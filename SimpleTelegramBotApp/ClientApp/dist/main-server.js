(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 56);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DOMException = __webpack_require__(24);
var ERR = DOMException;
var isApiWritable = __webpack_require__(37).isApiWritable;

exports.NAMESPACE = {
  HTML: 'http://www.w3.org/1999/xhtml',
  XML: 'http://www.w3.org/XML/1998/namespace',
  XMLNS: 'http://www.w3.org/2000/xmlns/',
  MATHML: 'http://www.w3.org/1998/Math/MathML',
  SVG: 'http://www.w3.org/2000/svg',
  XLINK: 'http://www.w3.org/1999/xlink'
};

//
// Shortcut functions for throwing errors of various types.
//
exports.IndexSizeError = function() { throw new DOMException(ERR.INDEX_SIZE_ERR); };
exports.HierarchyRequestError = function() { throw new DOMException(ERR.HIERARCHY_REQUEST_ERR); };
exports.WrongDocumentError = function() { throw new DOMException(ERR.WRONG_DOCUMENT_ERR); };
exports.InvalidCharacterError = function() { throw new DOMException(ERR.INVALID_CHARACTER_ERR); };
exports.NoModificationAllowedError = function() { throw new DOMException(ERR.NO_MODIFICATION_ALLOWED_ERR); };
exports.NotFoundError = function() { throw new DOMException(ERR.NOT_FOUND_ERR); };
exports.NotSupportedError = function() { throw new DOMException(ERR.NOT_SUPPORTED_ERR); };
exports.InvalidStateError = function() { throw new DOMException(ERR.INVALID_STATE_ERR); };
exports.SyntaxError = function() { throw new DOMException(ERR.SYNTAX_ERR); };
exports.InvalidModificationError = function() { throw new DOMException(ERR.INVALID_MODIFICATION_ERR); };
exports.NamespaceError = function() { throw new DOMException(ERR.NAMESPACE_ERR); };
exports.InvalidAccessError = function() { throw new DOMException(ERR.INVALID_ACCESS_ERR); };
exports.TypeMismatchError = function() { throw new DOMException(ERR.TYPE_MISMATCH_ERR); };
exports.SecurityError = function() { throw new DOMException(ERR.SECURITY_ERR); };
exports.NetworkError = function() { throw new DOMException(ERR.NETWORK_ERR); };
exports.AbortError = function() { throw new DOMException(ERR.ABORT_ERR); };
exports.UrlMismatchError = function() { throw new DOMException(ERR.URL_MISMATCH_ERR); };
exports.QuotaExceededError = function() { throw new DOMException(ERR.QUOTA_EXCEEDED_ERR); };
exports.TimeoutError = function() { throw new DOMException(ERR.TIMEOUT_ERR); };
exports.InvalidNodeTypeError = function() { throw new DOMException(ERR.INVALID_NODE_TYPE_ERR); };
exports.DataCloneError = function() { throw new DOMException(ERR.DATA_CLONE_ERR); };

exports.nyi = function() {
  throw new Error("NotYetImplemented");
};

exports.assert = function(expr, msg) {
  if (!expr) {
    throw new Error("Assertion failed: " + (msg || "") + "\n" + new Error().stack);
  }
};

exports.expose = function(src, c) {
  for (var n in src) {
    Object.defineProperty(c.prototype, n, { value: src[n], writable: isApiWritable });
  }
};

exports.merge = function(a, b) {
  for (var n in b) {
    a[n] = b[n];
  }
};

// Compare two nodes based on their document order. This function is intended
// to be passed to sort(). Assumes that the array being sorted does not
// contain duplicates.  And that all nodes are connected and comparable.
// Clever code by ppk via jeresig.
exports.documentOrder = function(n,m) {
  /* jshint bitwise: false */
  return 3 - (n.compareDocumentPosition(m) & 6);
};

exports.toASCIILowerCase = function(s) {
  return s.replace(/[A-Z]+/g, function(t) { return t.toLowerCase(); });
};


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("./vendor");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Node;

var EventTarget = __webpack_require__(27);
var utils = __webpack_require__(0);
var NAMESPACE = utils.NAMESPACE;

// All nodes have a nodeType and an ownerDocument.
// Once inserted, they also have a parentNode.
// This is an abstract class; all nodes in a document are instances
// of a subtype, so all the properties are defined by more specific
// constructors.
function Node() {
}

var ELEMENT_NODE                = Node.ELEMENT_NODE = 1;
var ATTRIBUTE_NODE              = Node.ATTRIBUTE_NODE = 2;
var TEXT_NODE                   = Node.TEXT_NODE = 3;
var CDATA_SECTION_NODE          = Node.CDATA_SECTION_NODE = 4;
var ENTITY_REFERENCE_NODE       = Node.ENTITY_REFERENCE_NODE = 5;
var ENTITY_NODE                 = Node.ENTITY_NODE = 6;
var PROCESSING_INSTRUCTION_NODE = Node.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = Node.COMMENT_NODE = 8;
var DOCUMENT_NODE               = Node.DOCUMENT_NODE = 9;
var DOCUMENT_TYPE_NODE          = Node.DOCUMENT_TYPE_NODE = 10;
var DOCUMENT_FRAGMENT_NODE      = Node.DOCUMENT_FRAGMENT_NODE = 11;
var NOTATION_NODE               = Node.NOTATION_NODE = 12;

var DOCUMENT_POSITION_DISCONNECTED            = Node.DOCUMENT_POSITION_DISCONNECTED = 0x01;
var DOCUMENT_POSITION_PRECEDING               = Node.DOCUMENT_POSITION_PRECEDING = 0x02;
var DOCUMENT_POSITION_FOLLOWING               = Node.DOCUMENT_POSITION_FOLLOWING = 0x04;
var DOCUMENT_POSITION_CONTAINS                = Node.DOCUMENT_POSITION_CONTAINS = 0x08;
var DOCUMENT_POSITION_CONTAINED_BY            = Node.DOCUMENT_POSITION_CONTAINED_BY = 0x10;
var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

var hasRawContent = {
  STYLE: true,
  SCRIPT: true,
  XMP: true,
  IFRAME: true,
  NOEMBED: true,
  NOFRAMES: true,
  PLAINTEXT: true
};

var emptyElements = {
  area: true,
  base: true,
  basefont: true,
  bgsound: true,
  br: true,
  col: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

var extraNewLine = {
  /* Removed in https://github.com/whatwg/html/issues/944
  pre: true,
  textarea: true,
  listing: true
  */
};

Node.prototype = Object.create(EventTarget.prototype, {

  // Node that are not inserted into the tree inherit a null parent
  parentNode: { value: null, writable: true },

  // XXX: the baseURI attribute is defined by dom core, but
  // a correct implementation of it requires HTML features, so
  // we'll come back to this later.
  baseURI: { get: utils.nyi },

  parentElement: { get: function() {
    return (this.parentNode && this.parentNode.nodeType===ELEMENT_NODE) ? this.parentNode : null;
  }},

  hasChildNodes: { value: function() {  // Overridden in leaf.js
    return this.childNodes.length > 0;
  }},

  firstChild: { get: function() {
    return this.childNodes.length === 0 ? null : this.childNodes[0];
  }},

  lastChild: { get: function() {
    return this.childNodes.length === 0 ? null : this.childNodes[this.childNodes.length-1];
  }},

  previousSibling: { get: function() {
    if (!this.parentNode) return null;
    var sibs = this.parentNode.childNodes, i = this.index;
    return i === 0 ? null : sibs[i-1];
  }},

  nextSibling: { get: function() {
    if (!this.parentNode) return null;
    var sibs = this.parentNode.childNodes, i = this.index;
    return i+1 === sibs.length ? null : sibs[i+1];
  }},


  _countChildrenOfType: { value: function(type) {
    var sum = 0, nodes = this.childNodes, length = nodes.length, i;
    for (i=0; i<length; i++) {
      if (nodes[i].nodeType === type) sum++;
    }
    return sum;
  }},

  _ensureInsertValid: { value: function _ensureInsertValid(node, child, isPreinsert) {
    var parent = this, i;
    if (!node.nodeType) throw new TypeError('not a node');
    // 1. If parent is not a Document, DocumentFragment, or Element
    // node, throw a HierarchyRequestError.
    switch (parent.nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
    case ELEMENT_NODE:
      break;
    default: utils.HierarchyRequestError();
    }
    // 2. If node is a host-including inclusive ancestor of parent,
    // throw a HierarchyRequestError.
    if (node.isAncestor(parent)) utils.HierarchyRequestError();
    // 3. If child is not null and its parent is not parent, then
    // throw a NotFoundError. (replaceChild omits the 'child is not null'
    // and throws a TypeError here if child is null.)
    if (child !== null || !isPreinsert) {
      if (child.parentNode !== parent) utils.NotFoundError();
    }
    // 4. If node is not a DocumentFragment, DocumentType, Element,
    // Text, ProcessingInstruction, or Comment node, throw a
    // HierarchyRequestError.
    switch (node.nodeType) {
    case DOCUMENT_FRAGMENT_NODE:
    case DOCUMENT_TYPE_NODE:
    case ELEMENT_NODE:
    case TEXT_NODE:
    case PROCESSING_INSTRUCTION_NODE:
    case COMMENT_NODE:
      break;
    default: utils.HierarchyRequestError();
    }
    // 5. If either node is a Text node and parent is a document, or
    // node is a doctype and parent is not a document, throw a
    // HierarchyRequestError.
    // 6. If parent is a document, and any of the statements below, switched
    // on node, are true, throw a HierarchyRequestError.
    if (parent.nodeType === DOCUMENT_NODE) {
      switch (node.nodeType) {
      case TEXT_NODE:
        utils.HierarchyRequestError();
        break;
      case DOCUMENT_FRAGMENT_NODE:
        // 6a1. If node has more than one element child or has a Text
        // node child.
        if (node._countChildrenOfType(TEXT_NODE) > 0)
          utils.HierarchyRequestError();
        switch (node._countChildrenOfType(ELEMENT_NODE)) {
        case 0:
          break;
        case 1:
          // 6a2. Otherwise, if node has one element child and either
          // parent has an element child, child is a doctype, or child
          // is not null and a doctype is following child. [preinsert]
          // 6a2. Otherwise, if node has one element child and either
          // parent has an element child that is not child or a
          // doctype is following child. [replaceWith]
          if (child !== null /* always true here for replaceWith */) {
            if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE)
              utils.HierarchyRequestError();
            for (i=parent.childNodes.length-1; i>=0; i--) {
              if (parent.childNodes[i] === child) break;
              if (parent.childNodes[i].nodeType === DOCUMENT_TYPE_NODE)
                utils.HierarchyRequestError();
            }
          }
          i = parent._countChildrenOfType(ELEMENT_NODE);
          if (isPreinsert) {
            // "parent has an element child"
            if (i > 0)
              utils.HierarchyRequestError();
          } else {
            // "parent has an element child that is not child"
            if (i > 1 || (i === 1 && child.nodeType !== ELEMENT_NODE))
              utils.HierarchyRequestError();
          }
          break;
        default: // 6a1, continued. (more than one Element child)
          utils.HierarchyRequestError();
        }
        break;
      case ELEMENT_NODE:
        // 6b. parent has an element child, child is a doctype, or
        // child is not null and a doctype is following child. [preinsert]
        // 6b. parent has an element child that is not child or a
        // doctype is following child. [replaceWith]
        if (child !== null /* always true here for replaceWith */) {
          if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE)
            utils.HierarchyRequestError();
          for (i=parent.childNodes.length-1; i>=0; i--) {
            if (parent.childNodes[i] === child) break;
            if (parent.childNodes[i].nodeType === DOCUMENT_TYPE_NODE)
              utils.HierarchyRequestError();
          }
        }
        i = parent._countChildrenOfType(ELEMENT_NODE);
        if (isPreinsert) {
          // "parent has an element child"
          if (i > 0)
            utils.HierarchyRequestError();
        } else {
          // "parent has an element child that is not child"
          if (i > 1 || (i === 1 && child.nodeType !== ELEMENT_NODE))
            utils.HierarchyRequestError();
        }
        break;
      case DOCUMENT_TYPE_NODE:
        // 6c. parent has a doctype child, child is non-null and an
        // element is preceding child, or child is null and parent has
        // an element child. [preinsert]
        // 6c. parent has a doctype child that is not child, or an
        // element is preceding child. [replaceWith]
        if (child === null) {
          if (parent._countChildrenOfType(ELEMENT_NODE))
            utils.HierarchyRequestError();
        } else {
          // child is always non-null for [replaceWith] case
          for (i=0; i<parent.childNodes.length; i++) {
            if (parent.childNodes[i] === child) break;
            if (parent.childNodes[i].nodeType === ELEMENT_NODE)
              utils.HierarchyRequestError();
          }
        }
        i = parent._countChildrenOfType(DOCUMENT_TYPE_NODE);
        if (isPreinsert) {
          // "parent has an doctype child"
          if (i > 0)
            utils.HierarchyRequestError();
        } else {
          // "parent has an doctype child that is not child"
          if (i > 1 || (i === 1 && child.nodeType !== DOCUMENT_TYPE_NODE))
            utils.HierarchyRequestError();
        }
        break;
      }
    } else {
      // 5, continued: (parent is not a document)
      if (node.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
    }
  }},

  insertBefore: { value: function insertBefore(node, child) {
    var parent = this;
    // 1. Ensure pre-insertion validity
    parent._ensureInsertValid(node, child, true);
    // 2. Let reference child be child.
    var refChild = child;
    // 3. If reference child is node, set it to node's next sibling
    if (refChild === node) { refChild = node.nextSibling; }
    // 4. Adopt node into parent's node document.
    parent.doc.adoptNode(node);
    // 5. Insert node into parent before reference child.
    if (refChild === null) {
      parent._appendChild(node);
    } else {
      node.insert(parent, refChild.index);
    }
    // 6. Return node
    return node;
  }},


  appendChild: { value: function(child) {
    // This invokes _appendChild after doing validity checks.
    return this.insertBefore(child, null);
  }},

  _appendChild: { value: function(child) {
    child.insert(this, this.childNodes.length);
    return child;
  }},

  removeChild: { value: function removeChild(child) {
    var parent = this;
    if (!child.nodeType) throw new TypeError('not a node');
    if (child.parentNode !== parent) utils.NotFoundError();
    child.remove();
    return child;
  }},

  // To replace a `child` with `node` within a `parent` (this)
  replaceChild: { value: function replaceChild(node, child) {
    var parent = this;
    // Ensure validity (slight differences from pre-insertion check)
    parent._ensureInsertValid(node, child, false);
    // Adopt node into parent's node document.
    if (node.doc !== parent.doc) {
      // XXX adoptNode has side-effect of removing node from its parent
      // and generating a mutation event, thus causing the _insertOrReplace
      // to generate two deletes and an insert instead of a 'move'
      // event.  It looks like the new MutationObserver stuff avoids
      // this problem, but for now let's only adopt (ie, remove `node`
      // from its parent) here if we need to.
      parent.doc.adoptNode(node);
    }
    // Do the replace.
    node._insertOrReplace(parent, child.index, true);
    return child;
  }},

  // See: http://ejohn.org/blog/comparing-document-position/
  contains: { value: function contains(node) {
    if (node === null) { return false; }
    if (this === node) { return true; /* inclusive descendant */ }
    /* jshint bitwise: false */
    return (this.compareDocumentPosition(node) &
            DOCUMENT_POSITION_CONTAINED_BY) !== 0;
  }},

  compareDocumentPosition: { value: function compareDocumentPosition(that){
    // Basic algorithm for finding the relative position of two nodes.
    // Make a list the ancestors of each node, starting with the
    // document element and proceeding down to the nodes themselves.
    // Then, loop through the lists, looking for the first element
    // that differs.  The order of those two elements give the
    // order of their descendant nodes.  Or, if one list is a prefix
    // of the other one, then that node contains the other.

    if (this === that) return 0;

    // If they're not owned by the same document or if one is rooted
    // and one is not, then they're disconnected.
    if (this.doc !== that.doc ||
      this.rooted !== that.rooted)
      return (DOCUMENT_POSITION_DISCONNECTED +
          DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);

    // Get arrays of ancestors for this and that
    var these = [], those = [];
    for(var n = this; n !== null; n = n.parentNode) these.push(n);
    for(n = that; n !== null; n = n.parentNode) those.push(n);
    these.reverse();  // So we start with the outermost
    those.reverse();

    if (these[0] !== those[0]) // No common ancestor
      return (DOCUMENT_POSITION_DISCONNECTED +
          DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);

    n = Math.min(these.length, those.length);
    for(var i = 1; i < n; i++) {
      if (these[i] !== those[i]) {
        // We found two different ancestors, so compare
        // their positions
        if (these[i].index < those[i].index)
          return DOCUMENT_POSITION_FOLLOWING;
        else
          return DOCUMENT_POSITION_PRECEDING;
      }
    }

    // If we get to here, then one of the nodes (the one with the
    // shorter list of ancestors) contains the other one.
    if (these.length < those.length)
      return (DOCUMENT_POSITION_FOLLOWING +
          DOCUMENT_POSITION_CONTAINED_BY);
    else
      return (DOCUMENT_POSITION_PRECEDING +
          DOCUMENT_POSITION_CONTAINS);
  }},

  isSameNode: {value : function isSameNode(node) {
    return this === node;
  }},


  // This method implements the generic parts of node equality testing
  // and defers to the (non-recursive) type-specific isEqual() method
  // defined by subclasses
  isEqualNode: { value: function isEqualNode(node) {
    if (!node) return false;
    if (node.nodeType !== this.nodeType) return false;

    // Check for same number of children
    // Check for children this way because it is more efficient
    // for childless leaf nodes.
    var n; // number of child nodes
    if (!this.firstChild) {
      n = 0;
      if (node.firstChild) return false;
    }
    else {
      n = this.childNodes.length;
      if (node.childNodes.length !== n) return false;
    }

    // Check type-specific properties for equality
    if (!this.isEqual(node)) return false;

    // Now check children for equality
    for(var i = 0; i < n; i++) {
      var c1 = this.childNodes[i], c2 = node.childNodes[i];
      if (!c1.isEqualNode(c2)) return false;
    }

    return true;
  }},

  // This method delegates shallow cloning to a clone() method
  // that each concrete subclass must implement
  cloneNode: { value: function(deep) {
    // Clone this node
    var clone = this.clone();

    // Handle the recursive case if necessary
    if (deep && this.firstChild) {
      for(var i = 0, n = this.childNodes.length; i < n; i++) {
        clone._appendChild(this.childNodes[i].cloneNode(true));
      }
    }

    return clone;
  }},

  lookupPrefix: { value: function lookupPrefix(ns) {
    var e;
    if (ns === '') return null;
    switch(this.nodeType) {
    case ELEMENT_NODE:
      return this.locateNamespacePrefix(ns);
    case DOCUMENT_NODE:
      e = this.documentElement;
      return e ? e.locateNamespacePrefix(ns) : null;
    case DOCUMENT_TYPE_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      return null;
    default:
      e = this.parentElement;
      return e ? e.locateNamespacePrefix(ns) : null;
    }
  }},


  lookupNamespaceURI: {value: function lookupNamespaceURI(prefix) {
    var e;
    switch(this.nodeType) {
    case ELEMENT_NODE:
      return this.locateNamespace(prefix);
    case DOCUMENT_NODE:
      e = this.documentElement;
      return e ? e.locateNamespace(prefix) : null;
    case DOCUMENT_TYPE_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      return null;
    default:
      e = this.parentElement;
      return e ? e.locateNamespace(prefix) : null;
    }
  }},

  isDefaultNamespace: { value: function isDefaultNamespace(ns) {
    var defaultns = this.lookupNamespaceURI(null);
    if (defaultns === null) defaultns = '';
    return ns === defaultns;
  }},

  // Utility methods for nodes.  Not part of the DOM

  // Return the index of this node in its parent.
  // Throw if no parent, or if this node is not a child of its parent
  index: { get: function() {
    utils.assert(this.parentNode);
    var kids = this.parentNode.childNodes;
    if (this._index === undefined || kids[this._index] !== this) {
      // Ensure that we don't have an O(N^2) blowup if none of the
      // kids have defined indices yet and we're traversing via
      // nextSibling or prevSibling
      for (var i=0; i<kids.length; i++) {
        kids[i]._index = i;
      }
      utils.assert(kids[this._index] === this);
    }
    return this._index;
  }},

  // Return true if this node is equal to or is an ancestor of that node
  // Note that nodes are considered to be ancestors of themselves
  isAncestor: { value: function(that) {
    // If they belong to different documents, then they're unrelated.
    if (this.doc !== that.doc) return false;
    // If one is rooted and one isn't then they're not related
    if (this.rooted !== that.rooted) return false;

    // Otherwise check by traversing the parentNode chain
    for(var e = that; e; e = e.parentNode) {
      if (e === this) return true;
    }
    return false;
  }},

  // DOMINO Changed the behavior to conform with the specs. See:
  // https://groups.google.com/d/topic/mozilla.dev.platform/77sIYcpdDmc/discussion
  ensureSameDoc: { value: function(that) {
    if (that.ownerDocument === null) {
      that.ownerDocument = this.doc;
    }
    else if(that.ownerDocument !== this.doc) {
      utils.WrongDocumentError();
    }
  }},

  // Remove all of this node's children.  This is a minor
  // optimization that only calls modify() once.
  removeChildren: { value: function removeChildren() {
    var n = this.childNodes.length;
    if (n) {
      var root = this.rooted ? this.ownerDocument : null;
      for(var i = 0; i < n; i++) {
        if (root) root.mutateRemove(this.childNodes[i]);
        this.childNodes[i].parentNode = null;
      }
      this.childNodes.length = 0; // Forget all children
      this.modify();              // Update last modified type once only
    }
  }},

  // Insert this node as a child of parent at the specified index,
  // firing mutation events as necessary
  insert: { value: function insert(parent, index) {
    this._insertOrReplace(parent, index, false);
  }},

  // Insert this node as a child of parent at the specified index,
  // or replace the specified child with this node, firing mutation events as
  // necessary
  _insertOrReplace: { value: function _insertOrReplace(parent, index, isReplace) {
    var child = this;
    var kids = parent.childNodes;

    if (child.nodeType === DOCUMENT_FRAGMENT_NODE && child.rooted) {
      utils.HierarchyRequestError();
    }

    // If we are already a child of the specified parent, then
    // the index may have to be adjusted.
    if (child.parentNode === parent) {
      var currentIndex = child.index;
      // If we're not moving the node, we're done now
      // XXX: or do DOM mutation events still have to be fired?
      if (currentIndex === index) return;

      // If the child is before the spot it is to be inserted at,
      // then when it is removed, the index of that spot will be
      // reduced.
      if (currentIndex < index) index--;
    }

    // Delete the old child
    if (isReplace) {
      var oldChild = parent.childNodes[index];
      if (oldChild.rooted) oldChild.doc.mutateRemove(oldChild);
      oldChild.parentNode = null;
    }

    // If both the child and the parent are rooted, then we want to
    // transplant the child without uprooting and rerooting it.
    if (child.rooted && parent.rooted) {
      // Remove the child from its current position in the tree
      // without calling remove(), since we don't want to uproot it.
      var curpar = child.parentNode;
      curpar.childNodes.splice(child.index, 1);
      curpar.modify();

      // And insert it as a child of its new parent
      child.parentNode = parent;
      if (isReplace) {
        kids[index] = child;
      } else {
        kids.splice(index, 0, child);
      }
      child._index = index;
      parent.modify();

      // Generate a move mutation event
      parent.doc.mutateMove(child);
    }
    else {
      if (child.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var spliceArgs = [index, isReplace ? 1 : 0];
        var i;
        for (i = 0; i < child.childNodes.length; i++) {
          var fragChild = child.childNodes[i];
          spliceArgs.push(fragChild);
          fragChild.parentNode = parent;
          fragChild._index = index + i;
        }
        // Remove all nodes from the document fragment
        child.childNodes.length = 0;
        // Add all nodes to the new parent, overwriting the old child
        kids.splice.apply(kids, spliceArgs);
        // Call the mutation handlers
        // Use spliceArgs since the original array has been destroyed. The
        // liveness guarantee requires us to clone the array so that
        // references to the childNodes of the DocumentFragment will be empty
        // when the insertion handlers are called.
        if (parent.rooted) {
          parent.modify();
          for (i = 2; i < spliceArgs.length; i++) {
            parent.doc.mutateInsert(spliceArgs[i]);
          }
        }
      }
      else {
        // If the child already has a parent, it needs to be
        // removed from that parent, which may also uproot it
        if (child.parentNode) child.remove();

        // Now insert the child into the parent's array of children
        child.parentNode = parent;
        if (isReplace) {
          kids[index] = child;
        } else {
          kids.splice(index, 0, child);
        }
        child._index = index;

        // And root the child if necessary
        if (parent.rooted) {
          parent.modify();
          parent.doc.mutateInsert(child);
        }
      }
    }
  }},


  // Return the lastModTime value for this node. (For use as a
  // cache invalidation mechanism. If the node does not already
  // have one, initialize it from the owner document's modclock
  // property. (Note that modclock does not return the actual
  // time; it is simply a counter incremented on each document
  // modification)
  lastModTime: { get: function() {
    if (!this._lastModTime) {
      this._lastModTime = this.doc.modclock;
    }
    return this._lastModTime;
  }},

  // Increment the owner document's modclock and use the new
  // value to update the lastModTime value for this node and
  // all of its ancestors. Nodes that have never had their
  // lastModTime value queried do not need to have a
  // lastModTime property set on them since there is no
  // previously queried value to ever compare the new value
  // against, so only update nodes that already have a
  // _lastModTime property.
  modify: { value: function() {
    if (this.doc.modclock) { // Skip while doc.modclock == 0
      var time = ++this.doc.modclock;
      for(var n = this; n; n = n.parentElement) {
        if (n._lastModTime) {
          n._lastModTime = time;
        }
      }
    }
  }},

  // This attribute is not part of the DOM but is quite helpful.
  // It returns the document with which a node is associated.  Usually
  // this is the ownerDocument. But ownerDocument is null for the
  // document object itself, so this is a handy way to get the document
  // regardless of the node type
  doc: { get: function() {
    return this.ownerDocument || this;
  }},


  // If the node has a nid (node id), then it is rooted in a document
  rooted: { get: function() {
    return !!this._nid;
  }},

  normalize: { value: function() {
    for (var i=0; i < this.childNodes.length; i++) {
      var child = this.childNodes[i];

      if (child.normalize) {
        child.normalize();
      }

      if (child.nodeType !== Node.TEXT_NODE) {
        continue;
      }

      if (child.nodeValue === "") {
        this.removeChild(child);
        i--;
        continue;
      }

      if (i) {
        var prevChild = this.childNodes[i-1];

        if (prevChild.nodeType === Node.TEXT_NODE) {
          // remove the child and decrement i
          prevChild.appendData(child.nodeValue);

          this.removeChild(child);
          i--;
        }
      }
    }
  }},

  // Convert the children of a node to an HTML string.
  // This is used by the innerHTML getter
  // The serialization spec is at:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#serializing-html-fragments
  serialize: { value: function() {
    var s = '';
    for(var i = 0, n = this.childNodes.length; i < n; i++) {
      var kid = this.childNodes[i];
      switch(kid.nodeType) {
      case 1: //ELEMENT_NODE
        var ns = kid.namespaceURI;
        var html = ns === NAMESPACE.HTML;
        var tagname = (html || ns === NAMESPACE.SVG || ns === NAMESPACE.MATHML) ? kid.localName : kid.tagName;

        s += '<' + tagname;

        for(var j = 0, k = kid._numattrs; j < k; j++) {
          var a = kid._attr(j);
          s += ' ' + attrname(a);
          if (a.value !== undefined) s += '="' + escapeAttr(a.value) + '"';
        }
        s += '>';

        if (!(html && emptyElements[tagname])) {
          var ss = kid.serialize();
          if (html && extraNewLine[tagname] && ss.charAt(0)==='\n') s += '\n';
          // Serialize children and add end tag for all others
          s += ss;
          s += '</' + tagname + '>';
        }
        break;
      case 3: //TEXT_NODE
      case 4: //CDATA_SECTION_NODE
        var parenttag;
        if (this.nodeType === ELEMENT_NODE &&
          this.namespaceURI === NAMESPACE.HTML)
          parenttag = this.tagName;
        else
          parenttag = '';

        if (hasRawContent[parenttag] ||
            (parenttag==='NOSCRIPT' && this.ownerDocument._scripting_enabled)) {
          s += kid.data;
        } else {
          s += escape(kid.data);
        }
        break;
      case 8: //COMMENT_NODE
        s += '<!--' + kid.data + '-->';
        break;
      case 7: //PROCESSING_INSTRUCTION_NODE
        s += '<?' + kid.target + ' ' + kid.data + '?>';
        break;
      case 10: //DOCUMENT_TYPE_NODE
        s += '<!DOCTYPE ' + kid.name;

        if (false) {
          // Latest HTML serialization spec omits the public/system ID
          if (kid.publicID) {
            s += ' PUBLIC "' + kid.publicId + '"';
          }

          if (kid.systemId) {
            s += ' "' + kid.systemId + '"';
          }
        }

        s += '>';
        break;
      default:
        utils.InvalidState();
      }
    }

    return s;
  }},

  // mirror node type properties in the prototype, so they are present
  // in instances of Node (and subclasses)
  ELEMENT_NODE:                { value: ELEMENT_NODE },
  ATTRIBUTE_NODE:              { value: ATTRIBUTE_NODE },
  TEXT_NODE:                   { value: TEXT_NODE },
  CDATA_SECTION_NODE:          { value: CDATA_SECTION_NODE },
  ENTITY_REFERENCE_NODE:       { value: ENTITY_REFERENCE_NODE },
  ENTITY_NODE:                 { value: ENTITY_NODE },
  PROCESSING_INSTRUCTION_NODE: { value: PROCESSING_INSTRUCTION_NODE },
  COMMENT_NODE:                { value: COMMENT_NODE },
  DOCUMENT_NODE:               { value: DOCUMENT_NODE },
  DOCUMENT_TYPE_NODE:          { value: DOCUMENT_TYPE_NODE },
  DOCUMENT_FRAGMENT_NODE:      { value: DOCUMENT_FRAGMENT_NODE },
  NOTATION_NODE:               { value: NOTATION_NODE }
});

function escape(s) {
  return s.replace(/[&<>\u00A0]/g, function(c) {
    switch(c) {
    case '&': return '&amp;';
    case '<': return '&lt;';
    case '>': return '&gt;';
    case '\u00A0': return '&nbsp;';
    }
  });
}

function escapeAttr(s) {
  var toEscape = /[&"\u00A0]/g;
  if (!toEscape.test(s)) {
      // nothing to do, fast path
      return s;
  } else {
      return s.replace(toEscape, function(c) {
        switch(c) {
        case '&': return '&amp;';
        case '"': return '&quot;';
        case '\u00A0': return '&nbsp;';
        }
      });
  }
}

function attrname(a) {
  var ns = a.namespaceURI;
  if (!ns)
    return a.localName;
  if (ns === NAMESPACE.XML)
    return 'xml:' + a.localName;
  if (ns === NAMESPACE.XLINK)
    return 'xlink:' + a.localName;

  if (ns === NAMESPACE.XMLNS) {
    if (a.localName === 'xmlns') return 'xmlns';
    else return 'xmlns:' + a.localName;
  }
  return a.name;
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Element;

var xml = __webpack_require__(21);
var utils = __webpack_require__(0);
var NAMESPACE = utils.NAMESPACE;
var attributes = __webpack_require__(36);
var Node = __webpack_require__(2);
var NodeList = __webpack_require__(9);
var FilteredElementList = __webpack_require__(58);
var DOMTokenList = __webpack_require__(25);
var select = __webpack_require__(20);
var ChildNode = __webpack_require__(13);
var NonDocumentTypeChildNode = __webpack_require__(31);

function Element(doc, localName, namespaceURI, prefix) {
  this.nodeType = Node.ELEMENT_NODE;
  this.ownerDocument = doc;
  this.localName = localName;
  this.namespaceURI = namespaceURI;
  this.prefix = prefix;

  this.tagName = (prefix !== null) ? prefix + ':' + localName : localName;

  if (namespaceURI !== NAMESPACE.HTML || (!namespaceURI && !doc.isHTML)) this.isHTML = false;

  if (this.isHTML) this.tagName = this.tagName.toUpperCase();

  this.childNodes = new NodeList();

  // These properties maintain the set of attributes
  this._attrsByQName = Object.create(null); // The qname->Attr map
  this._attrsByLName = Object.create(null); // The ns|lname->Attr map
  this._attrKeys = [];     // attr index -> ns|lname

  this._index = undefined;
}

function recursiveGetText(node, a) {
  if (node.nodeType === Node.TEXT_NODE) {
    a.push(node._data);
  }
  else {
    for(var i = 0, n = node.childNodes.length;  i < n; i++)
      recursiveGetText(node.childNodes[i], a);
  }
}

Element.prototype = Object.create(Node.prototype, {
  nodeName: { get: function() { return this.tagName; }},
  nodeValue: {
    get: function() {
      return null;
    },
    set: function() {}
  },
  textContent: {
    get: function() {
      var strings = [];
      recursiveGetText(this, strings);
      return strings.join('');
    },
    set: function(newtext) {
      this.removeChildren();
      if (newtext !== null && newtext !== '') {
        this._appendChild(this.ownerDocument.createTextNode(newtext));
      }
    }
  },
  innerHTML: {
    get: function() {
      return this.serialize();
    },
    set: utils.nyi
  },
  outerHTML: {
    get: function() {
      // "the attribute must return the result of running the HTML fragment
      // serialization algorithm on a fictional node whose only child is
      // the context object"
      var fictional = {
        childNodes: [ this ],
        nodeType: 0
      };
      return Node.prototype.serialize.call(fictional);
    },
    set: utils.nyi
  },

  children: { get: function() {
    if (!this._children) {
      this._children = new ChildrenCollection(this);
    }
    return this._children;
  }},

  attributes: { get: function() {
    if (!this._attributes) {
      this._attributes = new AttributesArray(this);
    }
    return this._attributes;
  }},


  firstElementChild: { get: function() {
    var kids = this.childNodes;
    for(var i = 0, n = kids.length; i < n; i++) {
      if (kids[i].nodeType === Node.ELEMENT_NODE) return kids[i];
    }
    return null;
  }},

  lastElementChild: { get: function() {
    var kids = this.childNodes;
    for(var i = kids.length-1; i >= 0; i--) {
      if (kids[i].nodeType === Node.ELEMENT_NODE) return kids[i];
    }
    return null;
  }},

  childElementCount: { get: function() {
    return this.children.length;
  }},


  // Return the next element, in source order, after this one or
  // null if there are no more.  If root element is specified,
  // then don't traverse beyond its subtree.
  //
  // This is not a DOM method, but is convenient for
  // lazy traversals of the tree.
  nextElement: { value: function(root) {
    if (!root) root = this.ownerDocument.documentElement;
    var next = this.firstElementChild;
    if (!next) {
      // don't use sibling if we're at root
      if (this===root) return null;
      next = this.nextElementSibling;
    }
    if (next) return next;

    // If we can't go down or across, then we have to go up
    // and across to the parent sibling or another ancestor's
    // sibling.  Be careful, though: if we reach the root
    // element, or if we reach the documentElement, then
    // the traversal ends.
    for(var parent = this.parentElement;
      parent && parent !== root;
      parent = parent.parentElement) {

      next = parent.nextElementSibling;
      if (next) return next;
    }

    return null;
  }},

  // XXX:
  // Tests are currently failing for this function.
  // Awaiting resolution of:
  // http://lists.w3.org/Archives/Public/www-dom/2011JulSep/0016.html
  getElementsByTagName: { value: function getElementsByTagName(lname) {
    var filter;
    if (!lname) return new NodeList();
    if (lname === '*')
      filter = function() { return true; };
    else if (this.isHTML)
      filter = htmlLocalNameElementFilter(lname);
    else
      filter = localNameElementFilter(lname);

    return new FilteredElementList(this, filter);
  }},

  getElementsByTagNameNS: { value: function getElementsByTagNameNS(ns, lname){
    var filter;
    if (ns === '*' && lname === '*')
      filter = function() { return true; };
    else if (ns === '*')
      filter = localNameElementFilter(lname);
    else if (lname === '*')
      filter = namespaceElementFilter(ns);
    else
      filter = namespaceLocalNameElementFilter(ns, lname);

    return new FilteredElementList(this, filter);
  }},

  getElementsByClassName: { value: function getElementsByClassName(names){
    names = String(names).trim();
    if (names === '') {
      var result = new NodeList(); // Empty node list
      return result;
    }
    names = names.split(/\s+/);  // Split on spaces
    return new FilteredElementList(this, classNamesElementFilter(names));
  }},

  getElementsByName: { value: function getElementsByName(name) {
    return new FilteredElementList(this, elementNameFilter(String(name)));
  }},

  // Overwritten in the constructor if not in the HTML namespace
  isHTML: { value: true, writable: true },

  // Utility methods used by the public API methods above
  clone: { value: function clone() {
    var e;

    // XXX:
    // Modify this to use the constructor directly or
    // avoid error checking in some other way. In case we try
    // to clone an invalid node that the parser inserted.
    //
    if (this.namespaceURI !== NAMESPACE.HTML || this.prefix)
      e = this.ownerDocument.createElementNS(this.namespaceURI,
                           this.tagName);
    else
      e = this.ownerDocument.createElement(this.localName);

    for(var i = 0, n = this._attrKeys.length; i < n; i++) {
      var lname = this._attrKeys[i];
      var a = this._attrsByLName[lname];
      var b = new Attr(e, a.localName, a.prefix, a.namespaceURI);
      b.data = a.data;
      e._attrsByLName[lname] = b;
      e._addQName(b);
    }
    e._attrKeys = this._attrKeys.concat();

    return e;
  }},

  isEqual: { value: function isEqual(that) {
    if (this.localName !== that.localName ||
      this.namespaceURI !== that.namespaceURI ||
      this.prefix !== that.prefix ||
      this._numattrs !== that._numattrs)
      return false;

    // Compare the sets of attributes, ignoring order
    // and ignoring attribute prefixes.
    for(var i = 0, n = this._numattrs; i < n; i++) {
      var a = this._attr(i);
      if (!that.hasAttributeNS(a.namespaceURI, a.localName))
        return false;
      if (that.getAttributeNS(a.namespaceURI,a.localName) !== a.value)
        return false;
    }

    return true;
  }},

  // This is the 'locate a namespace prefix' algorithm from the
  // DOMCore specification.  It is used by Node.lookupPrefix()
  locateNamespacePrefix: { value: function locateNamespacePrefix(ns) {
    if (this.namespaceURI === ns && this.prefix !== null)
      return this.prefix;

    for(var i = 0, n = this._numattrs; i < n; i++) {
      var a = this._attr(i);
      if (a.prefix === 'xmlns' && a.value === ns)
        return a.localName;
    }

    var parent = this.parentElement;
    return parent ? parent.locateNamespacePrefix(ns) : null;
  }},

  // This is the 'locate a namespace' algorithm for Element nodes
  // from the DOM Core spec.  It is used by Node.lookupNamespaceURI
  locateNamespace: { value: function locateNamespace(prefix) {
    if (this.prefix === prefix && this.namespaceURI !== null)
      return this.namespaceURI;

    for(var i = 0, n = this._numattrs; i < n; i++) {
      var a = this._attr(i);
      if ((a.prefix === 'xmlns' && a.localName === prefix) ||
        (a.prefix === null && a.localName === 'xmlns')) {
        return a.value || null;
      }
    }

    var parent = this.parentElement;
    return parent ? parent.locateNamespace(prefix) : null;
  }},

  //
  // Attribute handling methods and utilities
  //

  /*
   * Attributes in the DOM are tricky:
   *
   * - there are the 8 basic get/set/has/removeAttribute{NS} methods
   *
   * - but many HTML attributes are also 'reflected' through IDL
   *   attributes which means that they can be queried and set through
   *   regular properties of the element.  There is just one attribute
   *   value, but two ways to get and set it.
   *
   * - Different HTML element types have different sets of reflected
     attributes.
   *
   * - attributes can also be queried and set through the .attributes
   *   property of an element.  This property behaves like an array of
   *   Attr objects.  The value property of each Attr is writeable, so
   *   this is a third way to read and write attributes.
   *
   * - for efficiency, we really want to store attributes in some kind
   *   of name->attr map.  But the attributes[] array is an array, not a
   *   map, which is kind of unnatural.
   *
   * - When using namespaces and prefixes, and mixing the NS methods
   *   with the non-NS methods, it is apparently actually possible for
   *   an attributes[] array to have more than one attribute with the
   *   same qualified name.  And certain methods must operate on only
   *   the first attribute with such a name.  So for these methods, an
   *   inefficient array-like data structure would be easier to
   *   implement.
   *
   * - The attributes[] array is live, not a snapshot, so changes to the
   *   attributes must be immediately visible through existing arrays.
   *
   * - When attributes are queried and set through IDL properties
   *   (instead of the get/setAttributes() method or the attributes[]
   *   array) they may be subject to type conversions, URL
   *   normalization, etc., so some extra processing is required in that
   *   case.
   *
   * - But access through IDL properties is probably the most common
   *   case, so we'd like that to be as fast as possible.
   *
   * - We can't just store attribute values in their parsed idl form,
   *   because setAttribute() has to return whatever string is passed to
   *   getAttribute even if it is not a legal, parseable value. So
   *   attribute values must be stored in unparsed string form.
   *
   * - We need to be able to send change notifications or mutation
   *   events of some sort to the renderer whenever an attribute value
   *   changes, regardless of the way in which it changes.
   *
   * - Some attributes, such as id and class affect other parts of the
   *   DOM API, like getElementById and getElementsByClassName and so
   *   for efficiency, we need to specially track changes to these
   *   special attributes.
   *
   * - Some attributes like class have different names (className) when
   *   reflected.
   *
   * - Attributes whose names begin with the string 'data-' are treated
     specially.
   *
   * - Reflected attributes that have a boolean type in IDL have special
   *   behavior: setting them to false (in IDL) is the same as removing
   *   them with removeAttribute()
   *
   * - numeric attributes (like HTMLElement.tabIndex) can have default
   *   values that must be returned by the idl getter even if the
   *   content attribute does not exist. (The default tabIndex value
   *   actually varies based on the type of the element, so that is a
   *   tricky one).
   *
   * See
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#reflect
   * for rules on how attributes are reflected.
   *
   */

  getAttribute: { value: function getAttribute(qname) {
    if (this.isHTML) qname = utils.toASCIILowerCase(qname);
    var attr = this._attrsByQName[qname];
    if (!attr) return null;

    if (Array.isArray(attr))  // If there is more than one
      attr = attr[0];         // use the first

    return attr.value;
  }},

  getAttributeNS: { value: function getAttributeNS(ns, lname) {
    var attr = this._attrsByLName[(ns === null ? '' : ns) + '|' + lname];
    return attr ? attr.value : null;
  }},

  hasAttribute: { value: function hasAttribute(qname) {
    if (this.isHTML) qname = utils.toASCIILowerCase(qname);
    return this._attrsByQName[qname] !== undefined;
  }},

  hasAttributeNS: { value: function hasAttributeNS(ns, lname) {
    var key = (ns === null ? '' : ns) + '|' + lname;
    return this._attrsByLName[key] !== undefined;
  }},

  // Set the attribute without error checking. The parser uses this.
  _setAttribute: { value: function _setAttribute(qname, value) {
    // XXX: the spec says that this next search should be done
    // on the local name, but I think that is an error.
    // email pending on www-dom about it.
    var attr = this._attrsByQName[qname];
    var isnew;
    if (!attr) {
      attr = this._newattr(qname);
      isnew = true;
    }
    else {
      if (Array.isArray(attr)) attr = attr[0];
    }

    // Now set the attribute value on the new or existing Attr object.
    // The Attr.value setter method handles mutation events, etc.
    attr.value = value;
    if (this._attributes) this._attributes[qname] = attr;
    if (isnew && this._newattrhook) this._newattrhook(qname, value);
  }},

  // Check for errors, and then set the attribute
  setAttribute: { value: function setAttribute(qname, value) {
    if (!xml.isValidName(qname)) utils.InvalidCharacterError();
    if (this.isHTML) qname = utils.toASCIILowerCase(qname);
    if (qname.substring(0, 5) === 'xmlns') utils.NamespaceError();
    this._setAttribute(qname, String(value));
  }},


  // The version with no error checking used by the parser
  _setAttributeNS: { value: function _setAttributeNS(ns, qname, value) {
    var pos = qname.indexOf(':'), prefix, lname;
    if (pos === -1) {
      prefix = null;
      lname = qname;
    }
    else {
      prefix = qname.substring(0, pos);
      lname = qname.substring(pos+1);
    }

    var key = (ns === null ? '' : ns) + '|' + lname;
    if (ns === '') ns = null;

    var attr = this._attrsByLName[key];
    var isnew;
    if (!attr) {
      attr = new Attr(this, lname, prefix, ns);
      isnew = true;
      this._attrsByLName[key] = attr;
      this._attrKeys.push(key);

      // We also have to make the attr searchable by qname.
      // But we have to be careful because there may already
      // be an attr with this qname.
      this._addQName(attr);
    }
    else {
      // Calling setAttributeNS() can change the prefix of an
      // existing attribute!
      if (attr.prefix !== prefix) {
        // Unbind the old qname
        this._removeQName(attr);
        // Update the prefix
        attr.prefix = prefix;
        // Bind the new qname
        this._addQName(attr);

      }

    }
    attr.value = value; // Automatically sends mutation event
    if (isnew && this._newattrhook) this._newattrhook(qname, value);
  }},

  // Do error checking then call _setAttributeNS
  setAttributeNS: { value: function setAttributeNS(ns, qname, value) {
    if (!xml.isValidName(qname)) utils.InvalidCharacterError();
    if (!xml.isValidQName(qname)) utils.NamespaceError();

    var pos = qname.indexOf(':');
    var prefix = (pos === -1) ? null : qname.substring(0, pos);
    if (ns === '') ns = null;

    if ((prefix !== null && ns === null) ||
      (prefix === 'xml' && ns !== NAMESPACE.XML) ||
      ((qname === 'xmlns' || prefix === 'xmlns') &&
       (ns !== NAMESPACE.XMLNS)) ||
      (ns === NAMESPACE.XMLNS &&
       !(qname === 'xmlns' || prefix === 'xmlns')))
      utils.NamespaceError();

    this._setAttributeNS(ns, qname, String(value));
  }},

  removeAttribute: { value: function removeAttribute(qname) {
    if (this.isHTML) qname = utils.toASCIILowerCase(qname);

    var attr = this._attrsByQName[qname];
    if (!attr) return;

    // If there is more than one match for this qname
    // so don't delete the qname mapping, just remove the first
    // element from it.
    if (Array.isArray(attr)) {
      if (attr.length > 2) {
        attr = attr.shift();  // remove it from the array
      }
      else {
        this._attrsByQName[qname] = attr[1];
        attr = attr[0];
      }
    }
    else {
      // only a single match, so remove the qname mapping
      this._attrsByQName[qname] = undefined;
    }

    var ns = attr.namespaceURI;
    // Now attr is the removed attribute.  Figure out its
    // ns+lname key and remove it from the other mapping as well.
    var key = (ns === null ? '' : ns) + '|' + attr.localName;
    this._attrsByLName[key] = undefined;

    var i = this._attrKeys.indexOf(key);
    this._attrKeys.splice(i, 1);

    if (this._attributes)
      this._attributes[qname] = undefined;

    // Onchange handler for the attribute
    if (attr.onchange)
      attr.onchange(this, attr.localName, attr.value, null);

    // Mutation event
    if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);
  }},

  removeAttributeNS: { value: function removeAttributeNS(ns, lname) {
    var key = (ns === null ? '' : ns) + '|' + lname;
    var attr = this._attrsByLName[key];
    if (!attr) return;

    this._attrsByLName[key] = undefined;

    var i = this._attrKeys.indexOf(key);
    this._attrKeys.splice(i, 1);

    // Now find the same Attr object in the qname mapping and remove it
    // But be careful because there may be more than one match.
    this._removeQName(attr);

    // Onchange handler for the attribute
    if (attr.onchange)
      attr.onchange(this, attr.localName, attr.value, null);
    // Mutation event
    if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);
  }},

  // This 'raw' version of getAttribute is used by the getter functions
  // of reflected attributes. It skips some error checking and
  // namespace steps
  _getattr: { value: function _getattr(qname) {
    // Assume that qname is already lowercased, so don't do it here.
    // Also don't check whether attr is an array: a qname with no
    // prefix will never have two matching Attr objects (because
    // setAttributeNS doesn't allow a non-null namespace with a
    // null prefix.
    var attr = this._attrsByQName[qname];
    return attr ? attr.value : null;
  }},

  // The raw version of setAttribute for reflected idl attributes.
  _setattr: { value: function _setattr(qname, value) {
    var attr = this._attrsByQName[qname];
    var isnew;
    if (!attr) {
      attr = this._newattr(qname);
      isnew = true;
    }
    attr.value = String(value);
    if (this._attributes) this._attributes[qname] = attr;
    if (isnew && this._newattrhook) this._newattrhook(qname, value);
  }},

  // Create a new Attr object, insert it, and return it.
  // Used by setAttribute() and by set()
  _newattr: { value: function _newattr(qname) {
    var attr = new Attr(this, qname, null, null);
    var key = '|' + qname;
    this._attrsByQName[qname] = attr;
    this._attrsByLName[key] = attr;
    this._attrKeys.push(key);
    return attr;
  }},

  // Add a qname->Attr mapping to the _attrsByQName object, taking into
  // account that there may be more than one attr object with the
  // same qname
  _addQName: { value: function(attr) {
    var qname = attr.name;
    var existing = this._attrsByQName[qname];
    if (!existing) {
      this._attrsByQName[qname] = attr;
    }
    else if (Array.isArray(existing)) {
      existing.push(attr);
    }
    else {
      this._attrsByQName[qname] = [existing, attr];
    }
    if (this._attributes) this._attributes[qname] = attr;
  }},

  // Remove a qname->Attr mapping to the _attrsByQName object, taking into
  // account that there may be more than one attr object with the
  // same qname
  _removeQName: { value: function(attr) {
    var qname = attr.name;
    var target = this._attrsByQName[qname];

    if (Array.isArray(target)) {
      var idx = target.indexOf(attr);
      utils.assert(idx !== -1); // It must be here somewhere
      if (target.length === 2) {
        this._attrsByQName[qname] = target[1-idx];
      }
      else {
        target.splice(idx, 1);
      }
    }
    else {
      utils.assert(target === attr);  // If only one, it must match
      this._attrsByQName[qname] = undefined;
    }
  }},

  // Return the number of attributes
  _numattrs: { get: function() { return this._attrKeys.length; }},
  // Return the nth Attr object
  _attr: { value: function(n) {
    return this._attrsByLName[this._attrKeys[n]];
  }},

  // Define getters and setters for an 'id' property that reflects
  // the content attribute 'id'.
  id: attributes.property({name: 'id'}),

  // Define getters and setters for a 'className' property that reflects
  // the content attribute 'class'.
  className: attributes.property({name: 'class'}),

  classList: { get: function() {
    var self = this;
    if (this._classList) {
      return this._classList;
    }
    var dtlist = new DOMTokenList(
      function() {
        return self.className || "";
      },
      function(v) {
        self.className = v;
      }
    );
    this._classList = dtlist;
    return dtlist;
  }},

  matches: { value: function(selector) {
    return select.matches(this, selector);
  }},

  closest: { value: function(selector) {
    var el = this;
    while (el.matches && !el.matches(selector)) el = el.parentNode;
    return el.matches ? el : null;
  }},

  querySelector: { value: function(selector) {
    return select(selector, this)[0];
  }},

  querySelectorAll: { value: function(selector) {
    var nodes = select(selector, this);
    return nodes.item ? nodes : new NodeList(nodes);
  }}

});

Object.defineProperties(Element.prototype, ChildNode);
Object.defineProperties(Element.prototype, NonDocumentTypeChildNode);

// Register special handling for the id attribute
attributes.registerChangeHandler(Element, 'id',
 function(element, lname, oldval, newval) {
   if (element.rooted) {
     if (oldval) {
       element.ownerDocument.delId(oldval, element);
     }
     if (newval) {
       element.ownerDocument.addId(newval, element);
     }
   }
 }
);


// The Attr class represents a single attribute.  The values in
// _attrsByQName and _attrsByLName are instances of this class.
function Attr(elt, lname, prefix, namespace) {
  // Always remember what element we're associated with.
  // We need this to property handle mutations
  this.ownerElement = elt;

  if (!namespace && !prefix && elt._attributeChangeHandlers[lname])
    this.onchange = elt._attributeChangeHandlers[lname];

  // localName and namespace are constant for any attr object.
  // But value may change.  And so can prefix, and so, therefore can name.
  this.localName = lname;
  this.prefix = (prefix===null || prefix==='') ? null : ('' + prefix);
  this.namespaceURI = (namespace===null || namespace==='') ? null : ('' + namespace);
}

Attr.prototype = {
  get name() {
    return this.prefix ? this.prefix + ':' + this.localName : this.localName;
  },

  get value() {
    return this.data;
  },

  get specified() {
    // Deprecated
    return true;
  },

  set value(value) {
    var oldval = this.data;
    value = (value === undefined) ? '' : value + '';
    if (value === oldval) return;

    this.data = value;

    // Run the onchange hook for the attribute
    // if there is one.
    if (this.onchange)
      this.onchange(this.ownerElement,this.localName, oldval, value);

    // Generate a mutation event if the element is rooted
    if (this.ownerElement.rooted)
      this.ownerElement.ownerDocument.mutateAttr(this, oldval);
  },

  // Legacy aliases (see gh#70 and https://dom.spec.whatwg.org/#interface-attr)
  get nodeName() { return this.name; },
  get nodeValue() { return this.value; },
  get textContent() { return this.value; },
  set nodeValue(v) { this.value = v; },
  set textContent(v) { this.value = v; },
};


// The attributes property of an Element will be an instance of this class.
// This class is really just a dummy, though. It only defines a length
// property and an item() method. The AttrArrayProxy that
// defines the public API just uses the Element object itself.
function AttributesArray(elt) {
  this.element = elt;
  for (var name in elt._attrsByQName) {
    this[name] = elt._attrsByQName[name];
  }
}
AttributesArray.prototype = {
  get length() {
    return this.element._attrKeys.length;
  },
  item: function(n) {
    return this.element._attrsByLName[this.element._attrKeys[n]];
  }
};


// The children property of an Element will be an instance of this class.
// It defines length, item() and namedItem() and will be wrapped by an
// HTMLCollection when exposed through the DOM.
function ChildrenCollection(e) {
  this.element = e;
  this.updateCache();
}

ChildrenCollection.prototype = {
  get length() {
    this.updateCache();
    return this.childrenByNumber.length;
  },
  item: function item(n) {
    this.updateCache();
    return this.childrenByNumber[n] || null;
  },

  namedItem: function namedItem(name) {
    this.updateCache();
    return this.childrenByName[name] || null;
  },

  // This attribute returns the entire name->element map.
  // It is not part of the HTMLCollection API, but we need it in
  // src/HTMLCollectionProxy
  get namedItems() {
    this.updateCache();
    return this.childrenByName;
  },

  updateCache: function updateCache() {
    var namedElts = /^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;
    if (this.lastModTime !== this.element.lastModTime) {
      this.lastModTime = this.element.lastModTime;

      var n = this.childrenByNumber && this.childrenByNumber.length || 0;
      for(var i = 0; i < n; i++) {
        this[i] = undefined;
      }

      this.childrenByNumber = [];
      this.childrenByName = Object.create(null);

      for(i = 0, n = this.element.childNodes.length; i < n; i++) {
        var c = this.element.childNodes[i];
        if (c.nodeType === Node.ELEMENT_NODE) {

          this[this.childrenByNumber.length] = c;
          this.childrenByNumber.push(c);

          // XXX Are there any requirements about the namespace
          // of the id property?
          var id = c.getAttribute('id');

          // If there is an id that is not already in use...
          if (id && !this.childrenByName[id])
            this.childrenByName[id] = c;

          // For certain HTML elements we check the name attribute
          var name = c.getAttribute('name');
          if (name &&
            this.element.namespaceURI === NAMESPACE.HTML &&
            namedElts.test(this.element.localName) &&
            !this.childrenByName[name])
            this.childrenByName[id] = c;
        }
      }
    }
  }
};

// These functions return predicates for filtering elements.
// They're used by the Document and Element classes for methods like
// getElementsByTagName and getElementsByClassName

function localNameElementFilter(lname) {
  return function(e) { return e.localName === lname; };
}

function htmlLocalNameElementFilter(lname) {
  var lclname = utils.toASCIILowerCase(lname);
  if (lclname === lname)
    return localNameElementFilter(lname);

  return function(e) {
    return e.isHTML ? e.localName === lclname : e.localName === lname;
  };
}

function namespaceElementFilter(ns) {
  return function(e) { return e.namespaceURI === ns; };
}

function namespaceLocalNameElementFilter(ns, lname) {
  return function(e) {
    return e.namespaceURI === ns && e.localName === lname;
  };
}

// XXX
// Optimize this when I implement classList.
function classNamesElementFilter(names) {
  return function(e) {
    var classAttr = e.getAttribute('class');
    if (!classAttr) return false;
    var classes = classAttr.trim().split(/\s+/);
    return names.every(function(n) {
      return classes.indexOf(n) !== -1;
    });
  };
}

function elementNameFilter(name) {
  return function(e) {
    return e.getAttribute('name') === name;
  };
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Event;

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

function Event(type, dictionary) {
  // Initialize basic event properties
  this.type = '';
  this.target = null;
  this.currentTarget = null;
  this.eventPhase = Event.AT_TARGET;
  this.bubbles = false;
  this.cancelable = false;
  this.isTrusted = false;
  this.defaultPrevented = false;
  this.timeStamp = Date.now();

  // Initialize internal flags
  // XXX: Would it be better to inherit these defaults from the prototype?
  this._propagationStopped = false;
  this._immediatePropagationStopped = false;
  this._initialized = true;
  this._dispatching = false;

  // Now initialize based on the constructor arguments (if any)
  if (type) this.type = type;
  if (dictionary) {
    for(var p in dictionary) {
      this[p] = dictionary[p];
    }
  }
}

Event.prototype = Object.create(Object.prototype, {
  constructor: { value: Event },
  stopPropagation: { value: function stopPropagation() {
    this._propagationStopped = true;
  }},

  stopImmediatePropagation: { value: function stopImmediatePropagation() {
    this._propagationStopped = true;
    this._immediatePropagationStopped = true;
  }},

  preventDefault: { value: function preventDefault() {
    if (this.cancelable) this.defaultPrevented = true;
  }},

  initEvent: { value: function initEvent(type, bubbles, cancelable) {
    this._initialized = true;
    if (this._dispatching) return;

    this._propagationStopped = false;
    this._immediatePropagationStopped = false;
    this.defaultPrevented = false;
    this.isTrusted = false;

    this.target = null;
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
  }},

});


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(3);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = CharacterData;

var Leaf = __webpack_require__(28);
var utils = __webpack_require__(0);
var ChildNode = __webpack_require__(13);
var NonDocumentTypeChildNode = __webpack_require__(31);

function CharacterData() {
}

CharacterData.prototype = Object.create(Leaf.prototype, {
  // DOMString substringData(unsigned long offset,
  //               unsigned long count);
  // The substringData(offset, count) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     If offset+count is greater than the context
  //     object's length, return a DOMString whose value is
  //     the UTF-16 code units from the offsetth UTF-16 code
  //     unit to the end of data.
  //
  //     Return a DOMString whose value is the UTF-16 code
  //     units from the offsetth UTF-16 code unit to the
  //     offset+countth UTF-16 code unit in data.
  substringData: { value: function substringData(offset, count) {
    if (offset > this.data.length || offset < 0 || count < 0) 
      utils.IndexSizeError();
    return this.data.substring(offset, offset+count);
  }},

  // void appendData(DOMString data);
  // The appendData(data) method must append data to the context
  // object's data.
  appendData: { value: function appendData(data) {
    this.data = this.data + data;
  }},

  // void insertData(unsigned long offset, DOMString data);
  // The insertData(offset, data) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     Insert data into the context object's data after
  //     offset UTF-16 code units.
  //
  insertData: { value: function insertData(offset, data) {
    var curtext = this.data;
    if (offset > curtext.length || offset < 0) utils.IndexSizeError();
    var prefix = curtext.substring(0, offset),
    suffix = curtext.substring(offset);
    this.data = prefix + data + suffix;
  }},


  // void deleteData(unsigned long offset, unsigned long count);
  // The deleteData(offset, count) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     If offset+count is greater than the context
  //     object's length var count be length-offset.
  //
  //     Starting from offset UTF-16 code units remove count
  //     UTF-16 code units from the context object's data.
  deleteData: { value: function deleteData(offset, count) {
    var curtext = this.data, len = curtext.length;

    if (offset > len || offset < 0) utils.IndexSizeError();

    if (offset+count > len)
      count = len - offset;

    var prefix = curtext.substring(0, offset),
    suffix = curtext.substring(offset+count);

    this.data = prefix + suffix;
  }},


  // void replaceData(unsigned long offset, unsigned long count,
  //          DOMString data);
  //
  // The replaceData(offset, count, data) method must act as
  // if the deleteData() method is invoked with offset and
  // count as arguments followed by the insertData() method
  // with offset and data as arguments and re-throw any
  // exceptions these methods might have thrown.
  replaceData: { value: function replaceData(offset, count, data) {
    var curtext = this.data, len = curtext.length;

    if (offset > len || offset < 0) utils.IndexSizeError();

    if (offset+count > len)
      count = len - offset;

    var prefix = curtext.substring(0, offset),
    suffix = curtext.substring(offset+count);

    this.data = prefix + data + suffix;
  }},

  // Utility method that Node.isEqualNode() calls to test Text and
  // Comment nodes for equality.  It is okay to put it here, since
  // Node will have already verified that nodeType is equal
  isEqual: { value: function isEqual(n) {
    return this._data === n._data;
  }},

  length: { get: function() { return this.data.length; }}

});

Object.defineProperties(CharacterData.prototype, ChildNode);
Object.defineProperties(CharacterData.prototype, NonDocumentTypeChildNode);


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = DOMImplementation;

var Document = __webpack_require__(14);
var DocumentType = __webpack_require__(15);
var HTMLParser = __webpack_require__(16);
var utils = __webpack_require__(0);
var xml = __webpack_require__(21);

// Each document must have its own instance of the domimplementation object
// Even though these objects have no state
function DOMImplementation() {}


// Feature/version pairs that DOMImplementation.hasFeature() returns
// true for.  It returns false for anything else.
var supportedFeatures = {
  'xml': { '': true, '1.0': true, '2.0': true },   // DOM Core
  'core': { '': true, '2.0': true },               // DOM Core
  'html': { '': true, '1.0': true, '2.0': true} ,  // HTML
  'xhtml': { '': true, '1.0': true, '2.0': true} , // HTML
};

DOMImplementation.prototype = {
  hasFeature: function hasFeature(feature, version) {
    var f = supportedFeatures[(feature || '').toLowerCase()];
    return (f && f[version || '']) || false;
  },

  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {
    if (!xml.isValidName(qualifiedName)) utils.InvalidCharacterError();
    if (!xml.isValidQName(qualifiedName)) utils.NamespaceError();

    return new DocumentType(qualifiedName, publicId, systemId);
  },

  createDocument: function createDocument(namespace, qualifiedName, doctype) {
    //
    // Note that the current DOMCore spec makes it impossible to
    // create an HTML document with this function, even if the
    // namespace and doctype are propertly set.  See this thread:
    // http://lists.w3.org/Archives/Public/www-dom/2011AprJun/0132.html
    //
    var d = new Document(false, null);
    var e;

    if (qualifiedName)
      e = d.createElementNS(namespace, qualifiedName);
    else
      e = null;

    if (doctype) {
      if (doctype.ownerDocument) utils.WrongDocumentError();
      d.appendChild(doctype);
    }

    if (e) d.appendChild(e);

    return d;
  },

  createHTMLDocument: function createHTMLDocument(titleText) {
    var d = new Document(true, null);
    d.appendChild(new DocumentType('html'));
    var html = d.createElement('html');
    d.appendChild(html);
    var head = d.createElement('head');
    html.appendChild(head);
    var title = d.createElement('title');
    head.appendChild(title);
    title.appendChild(d.createTextNode(titleText));
    html.appendChild(d.createElement('body'));
    d.modclock = 1; // Start tracking modifications
    return d;
  },

  mozSetOutputMutationHandler: function(doc, handler) {
    doc.mutationHandler = handler;
  },

  mozGetInputMutationHandler: function(doc) {
    utils.nyi();
  },

  mozHTMLParser: HTMLParser,
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NodeFilter = {
  // Constants for acceptNode()
  FILTER_ACCEPT: 1,
  FILTER_REJECT: 2,
  FILTER_SKIP: 3,

  // Constants for whatToShow
  SHOW_ALL: 0xFFFFFFFF,
  SHOW_ELEMENT: 0x1,
  SHOW_ATTRIBUTE: 0x2, // historical
  SHOW_TEXT: 0x4,
  SHOW_CDATA_SECTION: 0x8, // historical
  SHOW_ENTITY_REFERENCE: 0x10, // historical
  SHOW_ENTITY: 0x20, // historical
  SHOW_PROCESSING_INSTRUCTION: 0x40,
  SHOW_COMMENT: 0x80,
  SHOW_DOCUMENT: 0x100,
  SHOW_DOCUMENT_TYPE: 0x200,
  SHOW_DOCUMENT_FRAGMENT: 0x400,
  SHOW_NOTATION: 0x800 // historical
};

module.exports = (NodeFilter.constructor = NodeFilter.prototype = NodeFilter);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = NodeList;

function item(i) {
  /* jshint validthis: true */
  return this[i];
}

function NodeList(a) {
  if (!a) a = [];
  a.item = item;
  return a;
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(0);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(7);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var parserlib = __webpack_require__(65);

module.exports = CSSStyleDeclaration;

function CSSStyleDeclaration(elt) {
  this._element = elt;
}

// Utility function for parsing style declarations
// Pass in a string like "margin-left: 5px; border-style: solid"
// and this function returns an object like
// {"margin-left":"5px", "border-style":"solid"}
function parseStyles(s) {
  var parser = new parserlib.css.Parser();
  var result = { property: Object.create(null), priority: Object.create(null) };
  parser.addListener("property", function(e) {
    if (e.invalid) return; // Skip errors
    result.property[e.property.text] = e.value.text;
    if (e.important) result.priority[e.property.text] = 'important';
  });
  s = (''+s).replace(/^;/, '');
  parser.parseStyleAttribute(s);
  return result;
}

var NO_CHANGE = {}; // Private marker object

CSSStyleDeclaration.prototype = Object.create(Object.prototype, {

  // Return the parsed form of the element's style attribute.
  // If the element's style attribute has never been parsed
  // or if it has changed since the last parse, then reparse it
  // Note that the styles don't get parsed until they're actually needed
  _parsed: { get: function() {
    if (!this._parsedStyles || this.cssText !== this._lastParsedText) {
      var text = this.cssText;
      this._parsedStyles = parseStyles(text);
      this._lastParsedText = text;
      delete this._names;
    }
    return this._parsedStyles;
  }},

  // Call this method any time the parsed representation of the
  // style changes.  It converts the style properties to a string and
  // sets cssText and the element's style attribute
  _serialize: { value: function() {
    var styles = this._parsed;
    var s = "";

    for(var name in styles.property) {
      if (s) s += " ";
      s += name + ": " + styles.property[name];
      if (styles.priority[name]) {
        s += " !" + styles.priority[name];
      }
      s += ";";
    }

    this.cssText = s;      // also sets the style attribute
    this._lastParsedText = s;  // so we don't reparse
    delete this._names;
  }},

  cssText: {
    get: function() {
      // XXX: this is a CSSStyleDeclaration for an element.
      // A different impl might be necessary for a set of styles
      // associated returned by getComputedStyle(), e.g.
      return this._element.getAttribute("style");
    },
    set: function(value) {
      // XXX: I should parse and serialize the value to
      // normalize it and remove errors. FF and chrome do that.
      this._element.setAttribute("style", value);
    }
  },

  length: { get: function() {
    if (!this._names)
      this._names = Object.getOwnPropertyNames(this._parsed.property);
    return this._names.length;
  }},

  item: { value: function(n) {
    if (!this._names)
      this._names = Object.getOwnPropertyNames(this._parsed.property);
    return this._names[n];
  }},

  getPropertyValue: { value: function(property) {
    property = property.toLowerCase();
    return this._parsed.property[property] || "";
  }},

  getPropertyPriority: { value: function(property) {
    property = property.toLowerCase();
    return this._parsed.priority[property] || "";
  }},

  setProperty: { value: function(property, value, priority) {
    property = property.toLowerCase();
    if (value === null || value === undefined) {
      value = "";
    }
    if (priority === null || priority === undefined) {
      priority = "";
    }

    // String coercion
    if (value !== NO_CHANGE) {
      value = "" + value;
    }

    if (value === "") {
      this.removeProperty(property);
      return;
    }

    if (priority !== "" && priority !== NO_CHANGE &&
        !/^important$/i.test(priority)) {
      return;
    }

    var styles = this._parsed;
    if (value === NO_CHANGE) {
      if (!styles.property[property]) {
        return; // Not a valid property name.
      }
      if (priority !== "") {
        styles.priority[property] = "important";
      } else {
        delete styles.priority[property];
      }
    } else {
      // We don't just accept the property value.  Instead
      // we parse it to ensure that it is something valid.
      // If it contains a semicolon it is invalid
      if (value.indexOf(";") !== -1) return;

      var newprops = parseStyles(property + ":" + value);
      if (Object.getOwnPropertyNames(newprops.property).length === 0) {
        return; // no valid property found
      }
      if (Object.getOwnPropertyNames(newprops.priority).length !== 0) {
        return; // if the value included '!important' it wasn't valid.
      }

      // XXX handle shorthand properties

      for (var p in newprops.property) {
        styles.property[p] = newprops.property[p];
        if (priority === NO_CHANGE) {
          continue;
        } else if (priority !== "") {
          styles.priority[p] = "important";
        } else if (styles.priority[p]) {
          delete styles.priority[p];
        }
      }
    }

    // Serialize and update cssText and element.style!
    this._serialize();
  }},

  setPropertyValue: { value: function(property, value) {
    return this.setProperty(property, value, NO_CHANGE);
  }},

  setPropertyPriority: { value: function(property, priority) {
    return this.setProperty(property, NO_CHANGE, priority);
  }},

  removeProperty: { value: function(property) {
    property = property.toLowerCase();
    var styles = this._parsed;
    if (property in styles.property) {
      delete styles.property[property];
      delete styles.priority[property];

      // Serialize and update cssText and element.style!
      this._serialize();
    }
  }},
});

var cssProperties = {
  background: "background",
  backgroundAttachment: "background-attachment",
  backgroundColor: "background-color",
  backgroundImage: "background-image",
  backgroundPosition: "background-position",
  backgroundRepeat: "background-repeat",
  border: "border",
  borderCollapse: "border-collapse",
  borderColor: "border-color",
  borderSpacing: "border-spacing",
  borderStyle: "border-style",
  borderTop: "border-top",
  borderRight: "border-right",
  borderBottom: "border-bottom",
  borderLeft: "border-left",
  borderTopColor: "border-top-color",
  borderRightColor: "border-right-color",
  borderBottomColor: "border-bottom-color",
  borderLeftColor: "border-left-color",
  borderTopStyle: "border-top-style",
  borderRightStyle: "border-right-style",
  borderBottomStyle: "border-bottom-style",
  borderLeftStyle: "border-left-style",
  borderTopWidth: "border-top-width",
  borderRightWidth: "border-right-width",
  borderBottomWidth: "border-bottom-width",
  borderLeftWidth: "border-left-width",
  borderWidth: "border-width",
  bottom: "bottom",
  captionSide: "caption-side",
  clear: "clear",
  clip: "clip",
  color: "color",
  content: "content",
  counterIncrement: "counter-increment",
  counterReset: "counter-reset",
  cursor: "cursor",
  direction: "direction",
  display: "display",
  emptyCells: "empty-cells",
  cssFloat: "float",
  font: "font",
  fontFamily: "font-family",
  fontSize: "font-size",
  fontSizeAdjust: "font-size-adjust",
  fontStretch: "font-stretch",
  fontStyle: "font-style",
  fontVariant: "font-variant",
  fontWeight: "font-weight",
  height: "height",
  left: "left",
  letterSpacing: "letter-spacing",
  lineHeight: "line-height",
  listStyle: "list-style",
  listStyleImage: "list-style-image",
  listStylePosition: "list-style-position",
  listStyleType: "list-style-type",
  margin: "margin",
  marginTop: "margin-top",
  marginRight: "margin-right",
  marginBottom: "margin-bottom",
  marginLeft: "margin-left",
  markerOffset: "marker-offset",
  marks: "marks",
  maxHeight: "max-height",
  maxWidth: "max-width",
  minHeight: "min-height",
  minWidth: "min-width",
  opacity: "opacity",
  orphans: "orphans",
  outline: "outline",
  outlineColor: "outline-color",
  outlineStyle: "outline-style",
  outlineWidth: "outline-width",
  overflow: "overflow",
  padding: "padding",
  paddingTop: "padding-top",
  paddingRight: "padding-right",
  paddingBottom: "padding-bottom",
  paddingLeft: "padding-left",
  page: "page",
  pageBreakAfter: "page-break-after",
  pageBreakBefore: "page-break-before",
  pageBreakInside: "page-break-inside",
  position: "position",
  quotes: "quotes",
  right: "right",
  size: "size",
  tableLayout: "table-layout",
  textAlign: "text-align",
  textDecoration: "text-decoration",
  textIndent: "text-indent",
  textShadow: "text-shadow",
  textTransform: "text-transform",
  top: "top",
  unicodeBidi: "unicode-bidi",
  verticalAlign: "vertical-align",
  visibility: "visibility",
  whiteSpace: "white-space",
  widows: "widows",
  width: "width",
  wordSpacing: "word-spacing",
  zIndex: "z-index",
};

for(var prop in cssProperties) defineStyleProperty(prop);

function defineStyleProperty(jsname) {
  var cssname = cssProperties[jsname];
  Object.defineProperty(CSSStyleDeclaration.prototype, jsname, {
    get: function() {
      return this.getPropertyValue(cssname);
    },
    set: function(value) {
      this.setProperty(cssname, value);
    }
  });
}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Node = __webpack_require__(2);

var createDocumentFragmentFromArguments = function(document, args) {
  var docFrag = document.createDocumentFragment();

  for (var i=0; i<args.length; i++) {
    var argItem = args[i];
    var isNode = argItem instanceof Node;
    docFrag.appendChild(isNode ? argItem :
                        document.createTextNode(String(argItem)));
  }

  return docFrag;
};

// The ChildNode interface contains methods that are particular to `Node`
// objects that can have a parent.  It is implemented by `Element`,
// `DocumentType`, and `CharacterData` objects.
var ChildNode = {

  // Inserts a set of Node or String objects in the children list of this
  // ChildNode's parent, just after this ChildNode.  String objects are
  // inserted as the equivalent Text nodes.
  after: { value: function after() {
    var argArr = Array.prototype.slice.call(arguments);
    var parentNode = this.parentNode, nextSibling = this.nextSibling;
    if (parentNode === null) { return; }
    // Find "viable next sibling"; that is, next one not in argArr
    while (nextSibling && argArr.some(function(v) { return v===nextSibling; }))
      nextSibling = nextSibling.nextSibling;
    // ok, parent and sibling are saved away since this node could itself
    // appear in argArr and we're about to move argArr to a document fragment.
    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);

    parentNode.insertBefore(docFrag, nextSibling);
  }},

  // Inserts a set of Node or String objects in the children list of this
  // ChildNode's parent, just before this ChildNode.  String objects are
  // inserted as the equivalent Text nodes.
  before: { value: function before() {
    var argArr = Array.prototype.slice.call(arguments);
    var parentNode = this.parentNode, prevSibling = this.previousSibling;
    if (parentNode === null) { return; }
    // Find "viable prev sibling"; that is, prev one not in argArr
    while (prevSibling && argArr.some(function(v) { return v===prevSibling; }))
      prevSibling = prevSibling.previousSibling;
    // ok, parent and sibling are saved away since this node could itself
    // appear in argArr and we're about to move argArr to a document fragment.
    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);

    var nextSibling =
        prevSibling ? prevSibling.nextSibling : parentNode.firstChild;
    parentNode.insertBefore(docFrag, nextSibling);
  }},

  // Remove this node from its parent
  remove: { value: function remove() {
    if (this.parentNode === null) return;

    // Send mutation events if necessary
    if (this.rooted && this.doc) this.doc.mutateRemove(this);

    // Remove this node from its parents array of children
    this.parentNode.childNodes.splice(this.index, 1);

    // Update the structure id for all ancestors
    this.parentNode.modify();

    // Forget this node's parent
    this.parentNode = null;
  }},

  // Replace this node with the nodes or strings provided as arguments.
  replaceWith: { value: function replaceWith() {
    var argArr = Array.prototype.slice.call(arguments);
    var parentNode = this.parentNode, nextSibling = this.nextSibling;
    if (parentNode === null) { return; }
    // Find "viable next sibling"; that is, next one not in argArr
    while (nextSibling && argArr.some(function(v) { return v===nextSibling; }))
      nextSibling = nextSibling.nextSibling;
    // ok, parent and sibling are saved away since this node could itself
    // appear in argArr and we're about to move argArr to a document fragment.
    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);
    if (this.parentNode === parentNode) {
      parentNode.replaceChild(docFrag, this);
    } else {
      // `this` was inserted into docFrag
      parentNode.insertBefore(docFrag, nextSibling);
    }
  }},

};

module.exports = ChildNode;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Document;

var Node = __webpack_require__(2);
var NodeList = __webpack_require__(9);
var Element = __webpack_require__(3);
var Text = __webpack_require__(33);
var Comment = __webpack_require__(23);
var Event = __webpack_require__(4);
var DocumentFragment = __webpack_require__(26);
var ProcessingInstruction = __webpack_require__(32);
var DOMImplementation = __webpack_require__(7);
var TreeWalker = __webpack_require__(63);
var NodeIterator = __webpack_require__(62);
var NodeFilter = __webpack_require__(8);
var URL = __webpack_require__(17);
var select = __webpack_require__(20);
var events = __webpack_require__(39);
var xml = __webpack_require__(21);
var html = __webpack_require__(19);
var svg = __webpack_require__(42);
var utils = __webpack_require__(0);
var MUTATE = __webpack_require__(60);
var NAMESPACE = utils.NAMESPACE;
var isApiWritable = __webpack_require__(37).isApiWritable;

function Document(isHTML, address) {
  this.nodeType = Node.DOCUMENT_NODE;
  this.isHTML = isHTML;
  this._address = address || 'about:blank';
  this.readyState = 'loading';
  this.implementation = new DOMImplementation();

  // DOMCore says that documents are always associated with themselves
  this.ownerDocument = null; // ... but W3C tests expect null

  // These will be initialized by our custom versions of
  // appendChild and insertBefore that override the inherited
  // Node methods.
  // XXX: override those methods!
  this.doctype = null;
  this.documentElement = null;
  this.childNodes = new NodeList();

  // "Associated inert template document"
  this._templateDocCache = null;

  // Documents are always rooted, by definition
  this._nid = 1;
  this._nextnid = 2; // For numbering children of the document
  this._nodes = [null, this];  // nid to node map

  // This maintains the mapping from element ids to element nodes.
  // We may need to update this mapping every time a node is rooted
  // or uprooted, and any time an attribute is added, removed or changed
  // on a rooted element.
  this.byId = Object.create(null);

  // This property holds a monotonically increasing value akin to
  // a timestamp used to record the last modification time of nodes
  // and their subtrees. See the lastModTime attribute and modify()
  // method of the Node class. And see FilteredElementList for an example
  // of the use of lastModTime
  this.modclock = 0;
}

// Map from lowercase event category names (used as arguments to
// createEvent()) to the property name in the impl object of the
// event constructor.
var supportedEvents = {
  event: 'Event',
  customevent: 'CustomEvent',
  uievent: 'UIEvent',
  mouseevent: 'MouseEvent'
};

// Certain arguments to document.createEvent() must be treated specially
var replacementEvent = {
  events: 'event',
  htmlevents: 'event',
  mouseevents: 'mouseevent',
  mutationevents: 'mutationevent',
  uievents: 'uievent'
};

var mirrorAttr = function(f, name, defaultValue) {
  return {
    get: function() {
      var o = f.call(this);
      if (o) { return o[name]; }
      return defaultValue;
    },
    set: function(value) {
      var o = f.call(this);
      if (o) { o[name] = value; }
    },
  };
};

Document.prototype = Object.create(Node.prototype, {
  // This method allows dom.js to communicate with a renderer
  // that displays the document in some way
  // XXX: I should probably move this to the window object
  _setMutationHandler: { value: function(handler) {
    this.mutationHandler = handler;
  }},

  // This method allows dom.js to receive event notifications
  // from the renderer.
  // XXX: I should probably move this to the window object
  _dispatchRendererEvent: { value: function(targetNid, type, details) {
    var target = this._nodes[targetNid];
    if (!target) return;
    target._dispatchEvent(new Event(type, details), true);
  }},

  nodeName: { value: '#document'},
  nodeValue: {
    get: function() {
      return null;
    },
    set: function() {}
  },

  // XXX: DOMCore may remove documentURI, so it is NYI for now
  documentURI: { get: utils.nyi, set: utils.nyi },
  compatMode: { get: function() {
    // The _quirks property is set by the HTML parser
    return this._quirks ? 'BackCompat' : 'CSS1Compat';
  }},
  parentNode: { value: null },

  createTextNode: { value: function(data) {
    return new Text(this, '' + data);
  }},
  createComment: { value: function(data) {
    return new Comment(this, data);
  }},
  createDocumentFragment: { value: function() {
    return new DocumentFragment(this);
  }},
  createProcessingInstruction: { value: function(target, data) {
    if (!xml.isValidName(target) || data.indexOf('?>') !== -1)
      utils.InvalidCharacterError();
    return new ProcessingInstruction(this, target, data);
  }},

  createElement: { value: function(localName) {
    if (!xml.isValidName(localName)) utils.InvalidCharacterError();
    if (this.isHTML) localName = utils.toASCIILowerCase(localName);
    return html.createElement(this, localName, null);
  }, writable: isApiWritable },

  createElementNS: { value: function(namespace, qualifiedName) {
    if (!xml.isValidName(qualifiedName)) utils.InvalidCharacterError();
    if (!xml.isValidQName(qualifiedName)) utils.NamespaceError();

    var pos, prefix, localName;
    if ((pos = qualifiedName.indexOf(':')) !== -1) {
      prefix = qualifiedName.substring(0, pos);
      localName = qualifiedName.substring(pos+1);

      if (namespace === '' ||
        (prefix === 'xml' && namespace !== NAMESPACE.XML))
        utils.NamespaceError();
    }
    else {
      prefix = null;
      localName = qualifiedName;
    }

    if (((qualifiedName === 'xmlns' || prefix === 'xmlns') &&
       namespace !== NAMESPACE.XMLNS) ||
      (namespace === NAMESPACE.XMLNS &&
       qualifiedName !== 'xmlns' &&
       prefix !== 'xmlns'))
      utils.NamespaceError();

    if (namespace === NAMESPACE.HTML) {
      return html.createElement(this, localName, prefix);
    }
    else if (namespace === NAMESPACE.SVG) {
      return svg.createElement(this, localName, prefix);
    }

    return new Element(this, localName, namespace, prefix);
  }, writable: isApiWritable },

  createEvent: { value: function createEvent(interfaceName) {
    interfaceName = interfaceName.toLowerCase();
    var name = replacementEvent[interfaceName] || interfaceName;
    var constructor = events[supportedEvents[name]];

    if (constructor) {
      var e = new constructor();
      e._initialized = false;
      return e;
    }
    else {
      utils.NotSupportedError();
    }
  }},

  // See: http://www.w3.org/TR/dom/#dom-document-createtreewalker
  createTreeWalker: {value: function (root, whatToShow, filter) {
    whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : whatToShow;

    if (filter && typeof filter === 'object' &&
        typeof filter.acceptNode === 'function') {
      filter = filter.acceptNode.bind(filter);
      // Support filter being a function
      // https://developer.mozilla.org/en-US/docs/DOM/document.createTreeWalker
    }
    else if (typeof filter !== 'function') {
      filter = null;
    }
    return new TreeWalker(root, whatToShow, filter);
  }},

  // See: http://www.w3.org/TR/dom/#dom-document-createnodeiterator
  createNodeIterator: {value: function (root, whatToShow, filter) {
    whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : whatToShow;

    if (filter && typeof filter === 'object' &&
        typeof filter.acceptNode === 'function') {
      filter = filter.acceptNode.bind(filter);
      // Support filter being a function
      // https://developer.mozilla.org/en-US/docs/DOM/document.createNodeIterator
    }
    else if (typeof filter !== 'function') {
      filter = null;
    }
    return new NodeIterator(root, whatToShow, filter);
  }},

  // Maintain the documentElement and
  // doctype properties of the document.  Each of the following
  // methods chains to the Node implementation of the method
  // to do the actual inserting, removal or replacement.

  _updateDocTypeElement: { value: function _updateDocTypeElement() {
    var i, n, nodes = this.childNodes, length = nodes.length;
    this.doctype = this.documentElement = null;
    for (i=0; i<length; i++) {
      n = nodes[i];
      if (n.nodeType === Node.DOCUMENT_TYPE_NODE)
        this.doctype = n;
      else if (n.nodeType === Node.ELEMENT_NODE)
        this.documentElement = n;
    }
  }},

  insertBefore: { value: function insertBefore(child, refChild) {
    Node.prototype.insertBefore.call(this, child, refChild);
    this._updateDocTypeElement();
    return child;
  }},

  replaceChild: { value: function replaceChild(node, child) {
    Node.prototype.replaceChild.call(this, node, child);
    this._updateDocTypeElement();
    return child;
  }},

  removeChild: { value: function removeChild(child) {
    Node.prototype.removeChild.call(this, child);
    this._updateDocTypeElement();
    return child;
  }},

  getElementById: { value: function(id) {
    var n = this.byId[id];
    if (!n) return null;
    if (n instanceof MultiId) { // there was more than one element with this id
      return n.getFirst();
    }
    return n;
  }},

  _hasMultipleElementsWithId: { value: function(id) {
    // Used internally by querySelectorAll optimization
    return (this.byId[id] instanceof MultiId);
  }},

  // Just copy this method from the Element prototype
  getElementsByName: { value: Element.prototype.getElementsByName },
  getElementsByTagName: { value: Element.prototype.getElementsByTagName },
  getElementsByTagNameNS: { value: Element.prototype.getElementsByTagNameNS },
  getElementsByClassName: { value: Element.prototype.getElementsByClassName },

  adoptNode: { value: function adoptNode(node) {
    if (node.nodeType === Node.DOCUMENT_NODE) utils.NotSupportedError();

    if (node.parentNode) node.parentNode.removeChild(node);

    if (node.ownerDocument !== this)
      recursivelySetOwner(node, this);

    return node;
  }},

  importNode: { value: function importNode(node, deep) {
    return this.adoptNode(node.cloneNode(deep));
  }, writable: isApiWritable },

  // The following attributes and methods are from the HTML spec
  URL: { get: utils.nyi },
  domain: { get: utils.nyi, set: utils.nyi },
  referrer: { get: utils.nyi },
  cookie: { get: utils.nyi, set: utils.nyi },
  lastModified: { get: utils.nyi },
  location: {
	get: function() {
	  return this.defaultView ? this.defaultView.location : null; // gh #75
	},
	set: utils.nyi
  },
  _titleElement: {
    get: function() {
      // The title element of a document is the first title element in the
      // document in tree order, if there is one, or null otherwise.
      return this.getElementsByTagName('title').item(0) || null;
    }
  },
  title: {
    get: function() {
      var elt = this._titleElement;
      // The child text content of the title element, or '' if null.
      var value = elt ? elt.textContent : '';
      // Strip and collapse whitespace in value
      return value.replace(/[ \t\n\r\f]+/g, ' ').trim();
    },
    set: function(value) {
      var elt = this._titleElement;
      var head = this.head;
      if (!elt && !head) { return; /* according to spec */ }
      if (!elt) {
        elt = this.createElement('title');
        head.appendChild(elt);
      }
      elt.textContent = value;
    }
  },
  dir: mirrorAttr(function() {
    var htmlElement = this.documentElement;
    if (htmlElement && htmlElement.tagName === 'HTML') { return htmlElement; }
  }, 'dir', ''),
  fgColor: mirrorAttr(function() { return this.body; }, 'text', ''),
  linkColor: mirrorAttr(function() { return this.body; }, 'link', ''),
  vlinkColor: mirrorAttr(function() { return this.body; }, 'vLink', ''),
  alinkColor: mirrorAttr(function() { return this.body; }, 'aLink', ''),
  bgColor: mirrorAttr(function() { return this.body; }, 'bgColor', ''),

  // Return the first <body> child of the document element.
  // XXX For now, setting this attribute is not implemented.
  body: {
    get: function() {
      return namedHTMLChild(this.documentElement, 'body');
    },
    set: utils.nyi
  },
  // Return the first <head> child of the document element.
  head: { get: function() {
    return namedHTMLChild(this.documentElement, 'head');
  }},
  images: { get: utils.nyi },
  embeds: { get: utils.nyi },
  plugins: { get: utils.nyi },
  links: { get: utils.nyi },
  forms: { get: utils.nyi },
  scripts: { get: utils.nyi },
  innerHTML: {
    get: function() { return this.serialize(); },
    set: utils.nyi
  },
  outerHTML: {
    get: function() { return this.serialize(); },
    set: utils.nyi
  },

  write: { value: function(args) {
    if (!this.isHTML) utils.InvalidStateError();

    // XXX: still have to implement the ignore part
    if (!this._parser /* && this._ignore_destructive_writes > 0 */ )
      return;

    if (!this._parser) {
      // XXX call document.open, etc.
    }

    var s = arguments.join('');

    // If the Document object's reload override flag is set, then
    // append the string consisting of the concatenation of all the
    // arguments to the method to the Document's reload override
    // buffer.
    // XXX: don't know what this is about.  Still have to do it

    // If there is no pending parsing-blocking script, have the
    // tokenizer process the characters that were inserted, one at a
    // time, processing resulting tokens as they are emitted, and
    // stopping when the tokenizer reaches the insertion point or when
    // the processing of the tokenizer is aborted by the tree
    // construction stage (this can happen if a script end tag token is
    // emitted by the tokenizer).

    // XXX: still have to do the above. Sounds as if we don't
    // always call parse() here.  If we're blocked, then we just
    // insert the text into the stream but don't parse it reentrantly...

    // Invoke the parser reentrantly
    this._parser.parse(s);
  }},

  writeln: { value: function writeln(args) {
    this.write(Array.prototype.join.call(arguments, '') + '\n');
  }},

  open: { value: function() {
    this.documentElement = null;
  }},

  close: { value: function() {
    this.readyState = 'complete';
    var ev = new Event('DOMContentLoaded');
    this._dispatchEvent(ev, true);
    if (this.defaultView) {
      ev = new Event('load');
      this.defaultView._dispatchEvent(ev, true);
    }
  }},

  // Utility methods
  clone: { value: function clone() {
    // Can't clone an entire document
    utils.DataCloneError();
  }},

  isEqual: { value: function isEqual(n) {
    // Any two documents are shallowly equal.
    // Node.isEqualNode will also test the children
    return true;
  }},

  // Implementation-specific function.  Called when a text, comment,
  // or pi value changes.
  mutateValue: { value: function(node) {
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.VALUE,
        target: node,
        data: node.data
      });
    }
  }},

  // Invoked when an attribute's value changes. Attr holds the new
  // value.  oldval is the old value.  Attribute mutations can also
  // involve changes to the prefix (and therefore the qualified name)
  mutateAttr: { value: function(attr, oldval) {
    // Manage id->element mapping for getElementsById()
    // XXX: this special case id handling should not go here,
    // but in the attribute declaration for the id attribute
    /*
    if (attr.localName === 'id' && attr.namespaceURI === null) {
      if (oldval) delId(oldval, attr.ownerElement);
      addId(attr.value, attr.ownerElement);
    }
    */
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.ATTR,
        target: attr.ownerElement,
        attr: attr
      });
    }
  }},

  // Used by removeAttribute and removeAttributeNS for attributes.
  mutateRemoveAttr: { value: function(attr) {
/*
* This is now handled in Attributes.js
    // Manage id to element mapping
    if (attr.localName === 'id' && attr.namespaceURI === null) {
      this.delId(attr.value, attr.ownerElement);
    }
*/
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.REMOVE_ATTR,
        target: attr.ownerElement,
        attr: attr
      });
    }
  }},

  // Called by Node.removeChild, etc. to remove a rooted element from
  // the tree. Only needs to generate a single mutation event when a
  // node is removed, but must recursively mark all descendants as not
  // rooted.
  mutateRemove: { value: function(node) {
    // Send a single mutation event
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.REMOVE,
        target: node.parentNode,
        node: node
      });
    }

    // Mark this and all descendants as not rooted
    recursivelyUproot(node);
  }},

  // Called when a new element becomes rooted.  It must recursively
  // generate mutation events for each of the children, and mark them all
  // as rooted.
  mutateInsert: { value: function(node) {
    // Mark node and its descendants as rooted
    recursivelyRoot(node);

    // Send a single mutation event
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.INSERT,
        target: node.parentNode,
        node: node
      });
    }
  }},

  // Called when a rooted element is moved within the document
  mutateMove: { value: function(node) {
    if (this.mutationHandler) {
      this.mutationHandler({
        type: MUTATE.MOVE,
        target: node
      });
    }
  }},


  // Add a mapping from  id to n for n.ownerDocument
  addId: { value: function addId(id, n) {
    var val = this.byId[id];
    if (!val) {
      this.byId[id] = n;
    }
    else {
      // TODO: Add a way to opt-out console warnings
      //console.warn('Duplicate element id ' + id);
      if (!(val instanceof MultiId)) {
        val = new MultiId(val);
        this.byId[id] = val;
      }
      val.add(n);
    }
  }},

  // Delete the mapping from id to n for n.ownerDocument
  delId: { value: function delId(id, n) {
    var val = this.byId[id];
    utils.assert(val);

    if (val instanceof MultiId) {
      val.del(n);
      if (val.length === 1) { // convert back to a single node
        this.byId[id] = val.downgrade();
      }
    }
    else {
      this.byId[id] = undefined;
    }
  }},

  _resolve: { value: function(href) {
    //XXX: Cache the URL
    return new URL(this._documentBaseURL).resolve(href);
  }},

  _documentBaseURL: { get: function() {
    // XXX: This is not implemented correctly yet
    var url = this._address;
    if (url === 'about:blank') url = '/';

    var base = this.querySelector('base[href]');
    if (base) {
      return new URL(url).resolve(base.getAttribute('href'));
    }
    return url;

    // The document base URL of a Document object is the
    // absolute URL obtained by running these substeps:

    //     Let fallback base url be the document's address.

    //     If fallback base url is about:blank, and the
    //     Document's browsing context has a creator browsing
    //     context, then let fallback base url be the document
    //     base URL of the creator Document instead.

    //     If the Document is an iframe srcdoc document, then
    //     let fallback base url be the document base URL of
    //     the Document's browsing context's browsing context
    //     container's Document instead.

    //     If there is no base element that has an href
    //     attribute, then the document base URL is fallback
    //     base url; abort these steps. Otherwise, let url be
    //     the value of the href attribute of the first such
    //     element.

    //     Resolve url relative to fallback base url (thus,
    //     the base href attribute isn't affected by xml:base
    //     attributes).

    //     The document base URL is the result of the previous
    //     step if it was successful; otherwise it is fallback
    //     base url.
  }},

  _templateDoc: { get: function() {
    if (!this._templateDocCache) {
      // "associated inert template document"
      var newDoc = new Document(this.isHTML, this._address);
      this._templateDocCache = newDoc._templateDocCache = newDoc;
    }
    return this._templateDocCache;
  }},

  querySelector: { value: function(selector) {
    return select(selector, this)[0];
  }},

  querySelectorAll: { value: function(selector) {
    var nodes = select(selector, this);
    return nodes.item ? nodes : new NodeList(nodes);
  }}

});


var eventHandlerTypes = [
  'abort', 'canplay', 'canplaythrough', 'change', 'click', 'contextmenu',
  'cuechange', 'dblclick', 'drag', 'dragend', 'dragenter', 'dragleave',
  'dragover', 'dragstart', 'drop', 'durationchange', 'emptied', 'ended',
  'input', 'invalid', 'keydown', 'keypress', 'keyup', 'loadeddata',
  'loadedmetadata', 'loadstart', 'mousedown', 'mousemove', 'mouseout',
  'mouseover', 'mouseup', 'mousewheel', 'pause', 'play', 'playing',
  'progress', 'ratechange', 'readystatechange', 'reset', 'seeked',
  'seeking', 'select', 'show', 'stalled', 'submit', 'suspend',
  'timeupdate', 'volumechange', 'waiting',

  'blur', 'error', 'focus', 'load', 'scroll'
];

// Add event handler idl attribute getters and setters to Document
eventHandlerTypes.forEach(function(type) {
  // Define the event handler registration IDL attribute for this type
  Object.defineProperty(Document.prototype, 'on' + type, {
    get: function() {
      return this._getEventHandler(type);
    },
    set: function(v) {
      this._setEventHandler(type, v);
    }
  });
});

function namedHTMLChild(parent, name) {
  if (parent && parent.isHTML) {
    var kids = parent.childNodes;
    for(var i = 0, n = kids.length; i < n; i++) {
      if (kids[i].nodeType === Node.ELEMENT_NODE &&
        kids[i].localName === name &&
        kids[i].namespaceURI === NAMESPACE.HTML) {
        return kids[i];
      }
    }
  }
  return null;
}

function root(n) {
  n._nid = n.ownerDocument._nextnid++;
  n.ownerDocument._nodes[n._nid] = n;
  // Manage id to element mapping
  if (n.nodeType === Node.ELEMENT_NODE) {
    var id = n.getAttribute('id');
    if (id) n.ownerDocument.addId(id, n);

    // Script elements need to know when they're inserted
    // into the document
    if (n._roothook) n._roothook();
  }
}

function uproot(n) {
  // Manage id to element mapping
  if (n.nodeType === Node.ELEMENT_NODE) {
    var id = n.getAttribute('id');
    if (id) n.ownerDocument.delId(id, n);
  }
  n.ownerDocument._nodes[n._nid] = undefined;
  n._nid = undefined;
}

function recursivelyRoot(node) {
  root(node);
  // XXX:
  // accessing childNodes on a leaf node creates a new array the
  // first time, so be careful to write this loop so that it
  // doesn't do that. node is polymorphic, so maybe this is hard to
  // optimize?  Try switching on nodeType?
/*
  if (node.hasChildNodes()) {
    var kids = node.childNodes;
    for(var i = 0, n = kids.length;  i < n; i++)
      recursivelyRoot(kids[i]);
  }
*/
  if (node.nodeType === Node.ELEMENT_NODE) {
    var kids = node.childNodes;
    for(var i = 0, n = kids.length; i < n; i++)
      recursivelyRoot(kids[i]);
  }
}

function recursivelyUproot(node) {
  uproot(node);
  for(var i = 0, n = node.childNodes.length; i < n; i++)
    recursivelyUproot(node.childNodes[i]);
}

function recursivelySetOwner(node, owner) {
  node.ownerDocument = owner;
  node._lastModTime = undefined; // mod times are document-based
  var kids = node.childNodes;
  for(var i = 0, n = kids.length; i < n; i++)
    recursivelySetOwner(kids[i], owner);
}

// A class for storing multiple nodes with the same ID
function MultiId(node) {
  this.nodes = Object.create(null);
  this.nodes[node._nid] = node;
  this.length = 1;
  this.firstNode = undefined;
}

// Add a node to the list, with O(1) time
MultiId.prototype.add = function(node) {
  if (!this.nodes[node._nid]) {
    this.nodes[node._nid] = node;
    this.length++;
    this.firstNode = undefined;
  }
};

// Remove a node from the list, with O(1) time
MultiId.prototype.del = function(node) {
  if (this.nodes[node._nid]) {
    delete this.nodes[node._nid];
    this.length--;
    this.firstNode = undefined;
  }
};

// Get the first node from the list, in the document order
// Takes O(N) time in the size of the list, with a cache that is invalidated
// when the list is modified.
MultiId.prototype.getFirst = function() {
  /* jshint bitwise: false */
  if (!this.firstNode) {
    var nid;
    for (nid in this.nodes) {
      if (this.firstNode === undefined ||
        this.firstNode.compareDocumentPosition(this.nodes[nid]) & Node.DOCUMENT_POSITION_PRECEDING) {
        this.firstNode = this.nodes[nid];
      }
    }
  }
  return this.firstNode;
};

// If there is only one node left, return it. Otherwise return "this".
MultiId.prototype.downgrade = function() {
  if (this.length === 1) {
    var nid;
    for (nid in this.nodes) {
      return this.nodes[nid];
    }
  }
  return this;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = DocumentType;

var Node = __webpack_require__(2);
var Leaf = __webpack_require__(28);
var utils = __webpack_require__(0);
var ChildNode = __webpack_require__(13);

function DocumentType(name, publicId, systemId) {
  // Unlike other nodes, doctype nodes always start off unowned
  // until inserted
  this.nodeType = Node.DOCUMENT_TYPE_NODE;
  this.ownerDocument = null;
  this.name = name;
  this.publicId = publicId || "";
  this.systemId = systemId || "";
}

DocumentType.prototype = Object.create(Leaf.prototype, {
  nodeName: { get: function() { return this.name; }},
  nodeValue: {
    get: function() { return null; },
    set: function() {}
  },

  // Utility methods
  clone: { value: function clone() {
    utils.DataCloneError();
  }},

  isEqual: { value: function isEqual(n) {
    return this.name === n.name &&
      this.publicId === n.publicId &&
      this.systemId === n.systemId;
  }}
});

Object.defineProperties(DocumentType.prototype, ChildNode);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = HTMLParser;

var Document = __webpack_require__(14);
var DocumentType = __webpack_require__(15);
var Node = __webpack_require__(2);
var NAMESPACE = __webpack_require__(0).NAMESPACE;
var html = __webpack_require__(19);
var impl = html.elements;

var pushAll = Function.prototype.apply.bind(Array.prototype.push);

/*
 * This file contains an implementation of the HTML parsing algorithm.
 * The algorithm and the implementation are complex because HTML
 * explicitly defines how the parser should behave for all possible
 * valid and invalid inputs.
 *
 * Usage:
 *
 * The file defines a single HTMLParser() function, which dom.js exposes
 * publicly as document.implementation.mozHTMLParser(). This is a
 * factory function, not a constructor.
 *
 * When you call document.implementation.mozHTMLParser(), it returns
 * an object that has parse() and document() methods. To parse HTML text,
 * pass the text (in one or more chunks) to the parse() method.  When
 * you've passed all the text (on the last chunk, or afterward) pass
 * true as the second argument to parse() to tell the parser that there
 * is no more coming. Call document() to get the document object that
 * the parser is parsing into.  You can call this at any time, before
 * or after calling parse().
 *
 * The first argument to mozHTMLParser is the absolute URL of the document.
 *
 * The second argument is optional and is for internal use only.  Pass an
 * element as the fragmentContext to do innerHTML parsing for the
 * element.  To do innerHTML parsing on a document, pass null. Otherwise,
 * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note
 * that if you pass a context element, the end() method will return an
 * unwrapped document instead of a wrapped one.
 *
 * Implementation details:
 *
 * This is a long file of almost 7000 lines. It is structured as one
 * big function nested within another big function.  The outer
 * function defines a bunch of constant data, utility functions
 * that use that data, and a couple of classes used by the parser.
 * The outer function also defines and returns the
 * inner function. This inner function is the HTMLParser factory
 * function that implements the parser and holds all the parser state
 * as local variables.  The HTMLParser function is quite big because
 * it defines many nested functions that use those local variables.
 *
 * There are three tightly coupled parser stages: a scanner, a
 * tokenizer and a tree builder. In a (possibly misguided) attempt at
 * efficiency, the stages are not implemented as separate classes:
 * everything shares state and is (mostly) implemented in imperative
 * (rather than OO) style.
 *
 * The stages of the parser work like this: When the client code calls
 * the parser's parse() method, the specified string is passed to
 * scanChars(). The scanner loops through that string and passes characters
 * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.
 * The tokenizer groups the characters into tokens: tags, endtags, runs
 * of text, comments, doctype declarations, and the end-of-file (EOF)
 * token.  These tokens are then passed to the tree building stage via
 * the insertToken() function.  The tree building stage builds up the
 * document tree.
 *
 * The tokenizer stage is a finite state machine.  Each state is
 * implemented as a function with a name that ends in "_state".  The
 * initial state is data_state(). The current tokenizer state is stored
 * in the variable 'tokenizer'.  Most state functions expect a single
 * integer argument which represents a single UTF-16 codepoint.  Some
 * states want more characters and set a lookahead property on
 * themselves.  The scanChars() function in the scanner checks for this
 * lookahead property.  If it doesn't exist, then scanChars() just passes
 * the next input character to the current tokenizer state function.
 * Otherwise, scanChars() looks ahead (a given # of characters, or for a
 * matching string, or for a matching regexp) and passes a string of
 * characters to the current tokenizer state function.
 *
 * As a shortcut, certain states of the tokenizer use regular expressions
 * to look ahead in the scanner's input buffer for runs of text, simple
 * tags and attributes.  For well-formed input, these shortcuts skip a
 * lot of state transitions and speed things up a bit.
 *
 * When a tokenizer state function has consumed a complete token, it
 * emits that token, by calling insertToken(), or by calling a utility
 * function that itself calls insertToken().  These tokens are passed to
 * the tree building stage, which is also a state machine.  Like the
 * tokenizer, the tree building states are implemented as functions, and
 * these functions have names that end with _mode (because the HTML spec
 * refers to them as insertion modes). The current insertion mode is held
 * by the 'parser' variable.  Each insertion mode function takes up to 4
 * arguments.  The first is a token type, represented by the constants
 * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is
 * the value of the token: the text or comment data, or tagname or
 * doctype.  For tags, the 3rd argument is an array of attributes.  For
 * DOCTYPES it is the optional public id.  For tags, the 4th argument is
 * true if the tag is self-closing. For doctypes, the 4th argument is the
 * optional system id.
 *
 * Search for "***" to find the major sub-divisions in the code.
 */


/***
 * Data prolog.  Lots of constants declared here, including some
 * very large objects.  They're used throughout the code that follows
 */
// Token types for the tree builder.
var EOF = -1;
var TEXT = 1;
var TAG = 2;
var ENDTAG = 3;
var COMMENT = 4;
var DOCTYPE = 5;

// A re-usable empty array
var NOATTRS = [];

// These DTD public ids put the browser in quirks mode
var quirkyPublicIds = /^HTML$|^-\/\/W3O\/\/DTD W3 HTML Strict 3\.0\/\/EN\/\/$|^-\/W3C\/DTD HTML 4\.0 Transitional\/EN$|^\+\/\/Silmaril\/\/dtd html Pro v0r11 19970101\/\/|^-\/\/AdvaSoft Ltd\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/AS\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict\/\/|^-\/\/IETF\/\/DTD HTML 2\.0\/\/|^-\/\/IETF\/\/DTD HTML 2\.1E\/\/|^-\/\/IETF\/\/DTD HTML 3\.0\/\/|^-\/\/IETF\/\/DTD HTML 3\.2 Final\/\/|^-\/\/IETF\/\/DTD HTML 3\.2\/\/|^-\/\/IETF\/\/DTD HTML 3\/\/|^-\/\/IETF\/\/DTD HTML Level 0\/\/|^-\/\/IETF\/\/DTD HTML Level 1\/\/|^-\/\/IETF\/\/DTD HTML Level 2\/\/|^-\/\/IETF\/\/DTD HTML Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 0\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict\/\/|^-\/\/IETF\/\/DTD HTML\/\/|^-\/\/Metrius\/\/DTD Metrius Presentational\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 Tables\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 Tables\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD HTML\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD Strict HTML\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML 2\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended 1\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended Relaxed 1\.0\/\/|^-\/\/SoftQuad Software\/\/DTD HoTMetaL PRO 6\.0::19990601::extensions to HTML 4\.0\/\/|^-\/\/SoftQuad\/\/DTD HoTMetaL PRO 4\.0::19971010::extensions to HTML 4\.0\/\/|^-\/\/Spyglass\/\/DTD HTML 2\.0 Extended\/\/|^-\/\/SQ\/\/DTD HTML 2\.0 HoTMetaL \+ extensions\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava HTML\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava Strict HTML\/\/|^-\/\/W3C\/\/DTD HTML 3 1995-03-24\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Draft\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Final\/\/|^-\/\/W3C\/\/DTD HTML 3\.2\/\/|^-\/\/W3C\/\/DTD HTML 3\.2S Draft\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Transitional\/\/|^-\/\/W3C\/\/DTD HTML Experimental 19960712\/\/|^-\/\/W3C\/\/DTD HTML Experimental 970421\/\/|^-\/\/W3C\/\/DTD W3 HTML\/\/|^-\/\/W3O\/\/DTD W3 HTML 3\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML 2\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML\/\//i;

var quirkySystemId = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";

var conditionallyQuirkyPublicIds = /^-\/\/W3C\/\/DTD HTML 4\.01 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.01 Transitional\/\//i;

// These DTD public ids put the browser in limited quirks mode
var limitedQuirkyPublicIds = /^-\/\/W3C\/\/DTD XHTML 1\.0 Frameset\/\/|^-\/\/W3C\/\/DTD XHTML 1\.0 Transitional\/\//i;


// Element sets below. See the isA() function for a way to test
// whether an element is a member of a set
var specialSet = Object.create(null);
specialSet[NAMESPACE.HTML] = {
  __proto__: null,
  "address":true, "applet":true, "area":true, "article":true,
  "aside":true, "base":true, "basefont":true, "bgsound":true,
  "blockquote":true, "body":true, "br":true, "button":true,
  "caption":true, "center":true, "col":true, "colgroup":true,
  "dd":true, "details":true, "dir":true,
  "div":true, "dl":true, "dt":true, "embed":true,
  "fieldset":true, "figcaption":true, "figure":true, "footer":true,
  "form":true, "frame":true, "frameset":true, "h1":true,
  "h2":true, "h3":true, "h4":true, "h5":true,
  "h6":true, "head":true, "header":true, "hgroup":true,
  "hr":true, "html":true, "iframe":true, "img":true,
  "input":true, "li":true, "link":true,
  "listing":true, "main":true, "marquee":true, "menu":true, "meta":true,
  "nav":true, "noembed":true, "noframes":true, "noscript":true,
  "object":true, "ol":true, "p":true, "param":true,
  "plaintext":true, "pre":true, "script":true, "section":true,
  "select":true, "source":true, "style":true, "summary":true, "table":true,
  "tbody":true, "td":true, "template":true, "textarea":true, "tfoot":true,
  "th":true, "thead":true, "title":true, "tr":true, "track":true,
  // Note that "xmp" was removed from the "special" set in the latest
  // spec, apparently by accident; see
  // https://github.com/whatwg/html/pull/1919
  "ul":true, "wbr":true, "xmp":true
};
specialSet[NAMESPACE.SVG] = {
  __proto__: null,
  "foreignObject": true, "desc": true, "title": true
};
specialSet[NAMESPACE.MATHML] = {
  __proto__: null,
  "mi":true, "mo":true, "mn":true, "ms":true,
  "mtext":true, "annotation-xml":true
};

// The set of address, div, and p HTML tags
var addressdivpSet = Object.create(null);
addressdivpSet[NAMESPACE.HTML] = {
  __proto__: null,
  "address":true, "div":true, "p":true
};

var dddtSet = Object.create(null);
dddtSet[NAMESPACE.HTML] = {
  __proto__: null,
  "dd":true, "dt":true
};

var tablesectionrowSet = Object.create(null);
tablesectionrowSet[NAMESPACE.HTML] = {
  __proto__: null,
  "table":true, "thead":true, "tbody":true, "tfoot":true, "tr":true
};

var impliedEndTagsSet = Object.create(null);
impliedEndTagsSet[NAMESPACE.HTML] = {
  __proto__: null,
  "dd": true, "dt": true, "li": true, "menuitem": true, "optgroup": true,
  "option": true, "p": true, "rb": true, "rp": true, "rt": true, "rtc": true
};

var thoroughImpliedEndTagsSet = Object.create(null);
thoroughImpliedEndTagsSet[NAMESPACE.HTML] = {
  __proto__: null,
  "caption": true, "colgroup": true, "dd": true, "dt": true, "li": true,
  "optgroup": true, "option": true, "p": true, "rb": true, "rp": true,
  "rt": true, "rtc": true, "tbody": true, "td": true, "tfoot": true,
  "th": true, "thead": true, "tr": true
};

var tableContextSet = Object.create(null);
tableContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "table": true, "template": true, "html": true
};

var tableBodyContextSet = Object.create(null);
tableBodyContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "tbody": true, "tfoot": true, "thead": true, "template": true, "html": true
};

var tableRowContextSet = Object.create(null);
tableRowContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "tr": true, "template": true, "html": true
};

// See http://www.w3.org/TR/html5/forms.html#form-associated-element
var formassociatedSet = Object.create(null);
formassociatedSet[NAMESPACE.HTML] = {
  __proto__: null,
  "button": true, "fieldset": true, "input": true, "keygen": true,
  "object": true, "output": true, "select": true, "textarea": true,
  "img": true
};

var inScopeSet = Object.create(null);
inScopeSet[NAMESPACE.HTML]= {
  __proto__: null,
  "applet":true, "caption":true, "html":true, "table":true,
  "td":true, "th":true, "marquee":true, "object":true,
  "template":true
};
inScopeSet[NAMESPACE.MATHML] = {
  __proto__: null,
  "mi":true, "mo":true, "mn":true, "ms":true,
  "mtext":true, "annotation-xml":true
};
inScopeSet[NAMESPACE.SVG] = {
  __proto__: null,
  "foreignObject":true, "desc":true, "title":true
};

var inListItemScopeSet = Object.create(inScopeSet);
inListItemScopeSet[NAMESPACE.HTML] =
  Object.create(inScopeSet[NAMESPACE.HTML]);
inListItemScopeSet[NAMESPACE.HTML].ol = true;
inListItemScopeSet[NAMESPACE.HTML].ul = true;

var inButtonScopeSet = Object.create(inScopeSet);
inButtonScopeSet[NAMESPACE.HTML] =
  Object.create(inScopeSet[NAMESPACE.HTML]);
inButtonScopeSet[NAMESPACE.HTML].button = true;

var inTableScopeSet = Object.create(null);
inTableScopeSet[NAMESPACE.HTML] = {
  __proto__: null,
  "html":true, "table":true, "template":true
};

// The set of elements for select scope is the everything *except* these
var invertedSelectScopeSet = Object.create(null);
invertedSelectScopeSet[NAMESPACE.HTML] = {
  __proto__: null,
  "optgroup":true, "option":true
};

var mathmlTextIntegrationPointSet = Object.create(null);
mathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {
  __proto__: null,
  mi: true,
  mo: true,
  mn: true,
  ms: true,
  mtext: true
};

var htmlIntegrationPointSet = Object.create(null);
htmlIntegrationPointSet[NAMESPACE.SVG] = {
  __proto__: null,
  foreignObject: true,
  desc: true,
  title: true
};

var foreignAttributes = {
  __proto__: null,
  "xlink:actuate": NAMESPACE.XLINK, "xlink:arcrole": NAMESPACE.XLINK,
  "xlink:href":   NAMESPACE.XLINK,  "xlink:role":    NAMESPACE.XLINK,
  "xlink:show":   NAMESPACE.XLINK,  "xlink:title":   NAMESPACE.XLINK,
  "xlink:type":   NAMESPACE.XLINK,  "xml:base":      NAMESPACE.XML,
  "xml:lang":     NAMESPACE.XML,    "xml:space":     NAMESPACE.XML,
  "xmlns":        NAMESPACE.XMLNS,  "xmlns:xlink":   NAMESPACE.XMLNS
};


// Lowercase to mixed case mapping for SVG attributes and tagnames
var svgAttrAdjustments = {
  __proto__: null,
  attributename: "attributeName", attributetype: "attributeType",
  basefrequency: "baseFrequency", baseprofile: "baseProfile",
  calcmode: "calcMode", clippathunits: "clipPathUnits",
  diffuseconstant: "diffuseConstant",
  edgemode: "edgeMode",
  filterunits: "filterUnits",
  glyphref: "glyphRef", gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits", kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength", keypoints: "keyPoints",
  keysplines: "keySplines", keytimes: "keyTimes",
  lengthadjust: "lengthAdjust", limitingconeangle: "limitingConeAngle",
  markerheight: "markerHeight", markerunits: "markerUnits",
  markerwidth: "markerWidth", maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits", numoctaves: "numOctaves",
  pathlength: "pathLength", patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform", patternunits: "patternUnits",
  pointsatx: "pointsAtX", pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ", preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits", refx: "refX",
  refy: "refY", repeatcount: "repeatCount",
  repeatdur: "repeatDur", requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent", spreadmethod: "spreadMethod",
  startoffset: "startOffset", stddeviation: "stdDeviation",
  stitchtiles: "stitchTiles", surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage", tablevalues: "tableValues",
  targetx: "targetX", targety: "targetY",
  textlength: "textLength", viewbox: "viewBox",
  viewtarget: "viewTarget", xchannelselector: "xChannelSelector",
  ychannelselector: "yChannelSelector", zoomandpan: "zoomAndPan"
};

var svgTagNameAdjustments = {
  __proto__: null,
  altglyph: "altGlyph", altglyphdef: "altGlyphDef",
  altglyphitem: "altGlyphItem", animatecolor: "animateColor",
  animatemotion: "animateMotion", animatetransform: "animateTransform",
  clippath: "clipPath", feblend: "feBlend",
  fecolormatrix: "feColorMatrix",
  fecomponenttransfer: "feComponentTransfer", fecomposite: "feComposite",
  feconvolvematrix: "feConvolveMatrix",
  fediffuselighting: "feDiffuseLighting",
  fedisplacementmap: "feDisplacementMap",
  fedistantlight: "feDistantLight", feflood: "feFlood",
  fefunca: "feFuncA", fefuncb: "feFuncB",
  fefuncg: "feFuncG", fefuncr: "feFuncR",
  fegaussianblur: "feGaussianBlur", feimage: "feImage",
  femerge: "feMerge", femergenode: "feMergeNode",
  femorphology: "feMorphology", feoffset: "feOffset",
  fepointlight: "fePointLight", fespecularlighting: "feSpecularLighting",
  fespotlight: "feSpotLight", fetile: "feTile",
  feturbulence: "feTurbulence", foreignobject: "foreignObject",
  glyphref: "glyphRef", lineargradient: "linearGradient",
  radialgradient: "radialGradient", textpath: "textPath"
};


// Data for parsing numeric and named character references
// These next 3 objects are direct translations of tables
// in the HTML spec into JavaScript object format
var numericCharRefReplacements = {
  __proto__: null,
  0x00:0xFFFD, 0x80:0x20AC, 0x82:0x201A, 0x83:0x0192, 0x84:0x201E,
  0x85:0x2026, 0x86:0x2020, 0x87:0x2021, 0x88:0x02C6, 0x89:0x2030,
  0x8A:0x0160, 0x8B:0x2039, 0x8C:0x0152, 0x8E:0x017D, 0x91:0x2018,
  0x92:0x2019, 0x93:0x201C, 0x94:0x201D, 0x95:0x2022, 0x96:0x2013,
  0x97:0x2014, 0x98:0x02DC, 0x99:0x2122, 0x9A:0x0161, 0x9B:0x203A,
  0x9C:0x0153, 0x9E:0x017E, 0x9F:0x0178
};

/*
 * This table is generated with test/tools/update-entities.js
 */
var namedCharRefs = {
  __proto__: null,
  "AElig":0xc6, "AElig;":0xc6,
  "AMP":0x26, "AMP;":0x26,
  "Aacute":0xc1, "Aacute;":0xc1,
  "Abreve;":0x102, "Acirc":0xc2,
  "Acirc;":0xc2, "Acy;":0x410,
  "Afr;":[0xd835,0xdd04], "Agrave":0xc0,
  "Agrave;":0xc0, "Alpha;":0x391,
  "Amacr;":0x100, "And;":0x2a53,
  "Aogon;":0x104, "Aopf;":[0xd835,0xdd38],
  "ApplyFunction;":0x2061, "Aring":0xc5,
  "Aring;":0xc5, "Ascr;":[0xd835,0xdc9c],
  "Assign;":0x2254, "Atilde":0xc3,
  "Atilde;":0xc3, "Auml":0xc4,
  "Auml;":0xc4, "Backslash;":0x2216,
  "Barv;":0x2ae7, "Barwed;":0x2306,
  "Bcy;":0x411, "Because;":0x2235,
  "Bernoullis;":0x212c, "Beta;":0x392,
  "Bfr;":[0xd835,0xdd05], "Bopf;":[0xd835,0xdd39],
  "Breve;":0x2d8, "Bscr;":0x212c,
  "Bumpeq;":0x224e, "CHcy;":0x427,
  "COPY":0xa9, "COPY;":0xa9,
  "Cacute;":0x106, "Cap;":0x22d2,
  "CapitalDifferentialD;":0x2145, "Cayleys;":0x212d,
  "Ccaron;":0x10c, "Ccedil":0xc7,
  "Ccedil;":0xc7, "Ccirc;":0x108,
  "Cconint;":0x2230, "Cdot;":0x10a,
  "Cedilla;":0xb8, "CenterDot;":0xb7,
  "Cfr;":0x212d, "Chi;":0x3a7,
  "CircleDot;":0x2299, "CircleMinus;":0x2296,
  "CirclePlus;":0x2295, "CircleTimes;":0x2297,
  "ClockwiseContourIntegral;":0x2232, "CloseCurlyDoubleQuote;":0x201d,
  "CloseCurlyQuote;":0x2019, "Colon;":0x2237,
  "Colone;":0x2a74, "Congruent;":0x2261,
  "Conint;":0x222f, "ContourIntegral;":0x222e,
  "Copf;":0x2102, "Coproduct;":0x2210,
  "CounterClockwiseContourIntegral;":0x2233, "Cross;":0x2a2f,
  "Cscr;":[0xd835,0xdc9e], "Cup;":0x22d3,
  "CupCap;":0x224d, "DD;":0x2145,
  "DDotrahd;":0x2911, "DJcy;":0x402,
  "DScy;":0x405, "DZcy;":0x40f,
  "Dagger;":0x2021, "Darr;":0x21a1,
  "Dashv;":0x2ae4, "Dcaron;":0x10e,
  "Dcy;":0x414, "Del;":0x2207,
  "Delta;":0x394, "Dfr;":[0xd835,0xdd07],
  "DiacriticalAcute;":0xb4, "DiacriticalDot;":0x2d9,
  "DiacriticalDoubleAcute;":0x2dd, "DiacriticalGrave;":0x60,
  "DiacriticalTilde;":0x2dc, "Diamond;":0x22c4,
  "DifferentialD;":0x2146, "Dopf;":[0xd835,0xdd3b],
  "Dot;":0xa8, "DotDot;":0x20dc,
  "DotEqual;":0x2250, "DoubleContourIntegral;":0x222f,
  "DoubleDot;":0xa8, "DoubleDownArrow;":0x21d3,
  "DoubleLeftArrow;":0x21d0, "DoubleLeftRightArrow;":0x21d4,
  "DoubleLeftTee;":0x2ae4, "DoubleLongLeftArrow;":0x27f8,
  "DoubleLongLeftRightArrow;":0x27fa, "DoubleLongRightArrow;":0x27f9,
  "DoubleRightArrow;":0x21d2, "DoubleRightTee;":0x22a8,
  "DoubleUpArrow;":0x21d1, "DoubleUpDownArrow;":0x21d5,
  "DoubleVerticalBar;":0x2225, "DownArrow;":0x2193,
  "DownArrowBar;":0x2913, "DownArrowUpArrow;":0x21f5,
  "DownBreve;":0x311, "DownLeftRightVector;":0x2950,
  "DownLeftTeeVector;":0x295e, "DownLeftVector;":0x21bd,
  "DownLeftVectorBar;":0x2956, "DownRightTeeVector;":0x295f,
  "DownRightVector;":0x21c1, "DownRightVectorBar;":0x2957,
  "DownTee;":0x22a4, "DownTeeArrow;":0x21a7,
  "Downarrow;":0x21d3, "Dscr;":[0xd835,0xdc9f],
  "Dstrok;":0x110, "ENG;":0x14a,
  "ETH":0xd0, "ETH;":0xd0,
  "Eacute":0xc9, "Eacute;":0xc9,
  "Ecaron;":0x11a, "Ecirc":0xca,
  "Ecirc;":0xca, "Ecy;":0x42d,
  "Edot;":0x116, "Efr;":[0xd835,0xdd08],
  "Egrave":0xc8, "Egrave;":0xc8,
  "Element;":0x2208, "Emacr;":0x112,
  "EmptySmallSquare;":0x25fb, "EmptyVerySmallSquare;":0x25ab,
  "Eogon;":0x118, "Eopf;":[0xd835,0xdd3c],
  "Epsilon;":0x395, "Equal;":0x2a75,
  "EqualTilde;":0x2242, "Equilibrium;":0x21cc,
  "Escr;":0x2130, "Esim;":0x2a73,
  "Eta;":0x397, "Euml":0xcb,
  "Euml;":0xcb, "Exists;":0x2203,
  "ExponentialE;":0x2147, "Fcy;":0x424,
  "Ffr;":[0xd835,0xdd09], "FilledSmallSquare;":0x25fc,
  "FilledVerySmallSquare;":0x25aa, "Fopf;":[0xd835,0xdd3d],
  "ForAll;":0x2200, "Fouriertrf;":0x2131,
  "Fscr;":0x2131, "GJcy;":0x403,
  "GT":0x3e, "GT;":0x3e,
  "Gamma;":0x393, "Gammad;":0x3dc,
  "Gbreve;":0x11e, "Gcedil;":0x122,
  "Gcirc;":0x11c, "Gcy;":0x413,
  "Gdot;":0x120, "Gfr;":[0xd835,0xdd0a],
  "Gg;":0x22d9, "Gopf;":[0xd835,0xdd3e],
  "GreaterEqual;":0x2265, "GreaterEqualLess;":0x22db,
  "GreaterFullEqual;":0x2267, "GreaterGreater;":0x2aa2,
  "GreaterLess;":0x2277, "GreaterSlantEqual;":0x2a7e,
  "GreaterTilde;":0x2273, "Gscr;":[0xd835,0xdca2],
  "Gt;":0x226b, "HARDcy;":0x42a,
  "Hacek;":0x2c7, "Hat;":0x5e,
  "Hcirc;":0x124, "Hfr;":0x210c,
  "HilbertSpace;":0x210b, "Hopf;":0x210d,
  "HorizontalLine;":0x2500, "Hscr;":0x210b,
  "Hstrok;":0x126, "HumpDownHump;":0x224e,
  "HumpEqual;":0x224f, "IEcy;":0x415,
  "IJlig;":0x132, "IOcy;":0x401,
  "Iacute":0xcd, "Iacute;":0xcd,
  "Icirc":0xce, "Icirc;":0xce,
  "Icy;":0x418, "Idot;":0x130,
  "Ifr;":0x2111, "Igrave":0xcc,
  "Igrave;":0xcc, "Im;":0x2111,
  "Imacr;":0x12a, "ImaginaryI;":0x2148,
  "Implies;":0x21d2, "Int;":0x222c,
  "Integral;":0x222b, "Intersection;":0x22c2,
  "InvisibleComma;":0x2063, "InvisibleTimes;":0x2062,
  "Iogon;":0x12e, "Iopf;":[0xd835,0xdd40],
  "Iota;":0x399, "Iscr;":0x2110,
  "Itilde;":0x128, "Iukcy;":0x406,
  "Iuml":0xcf, "Iuml;":0xcf,
  "Jcirc;":0x134, "Jcy;":0x419,
  "Jfr;":[0xd835,0xdd0d], "Jopf;":[0xd835,0xdd41],
  "Jscr;":[0xd835,0xdca5], "Jsercy;":0x408,
  "Jukcy;":0x404, "KHcy;":0x425,
  "KJcy;":0x40c, "Kappa;":0x39a,
  "Kcedil;":0x136, "Kcy;":0x41a,
  "Kfr;":[0xd835,0xdd0e], "Kopf;":[0xd835,0xdd42],
  "Kscr;":[0xd835,0xdca6], "LJcy;":0x409,
  "LT":0x3c, "LT;":0x3c,
  "Lacute;":0x139, "Lambda;":0x39b,
  "Lang;":0x27ea, "Laplacetrf;":0x2112,
  "Larr;":0x219e, "Lcaron;":0x13d,
  "Lcedil;":0x13b, "Lcy;":0x41b,
  "LeftAngleBracket;":0x27e8, "LeftArrow;":0x2190,
  "LeftArrowBar;":0x21e4, "LeftArrowRightArrow;":0x21c6,
  "LeftCeiling;":0x2308, "LeftDoubleBracket;":0x27e6,
  "LeftDownTeeVector;":0x2961, "LeftDownVector;":0x21c3,
  "LeftDownVectorBar;":0x2959, "LeftFloor;":0x230a,
  "LeftRightArrow;":0x2194, "LeftRightVector;":0x294e,
  "LeftTee;":0x22a3, "LeftTeeArrow;":0x21a4,
  "LeftTeeVector;":0x295a, "LeftTriangle;":0x22b2,
  "LeftTriangleBar;":0x29cf, "LeftTriangleEqual;":0x22b4,
  "LeftUpDownVector;":0x2951, "LeftUpTeeVector;":0x2960,
  "LeftUpVector;":0x21bf, "LeftUpVectorBar;":0x2958,
  "LeftVector;":0x21bc, "LeftVectorBar;":0x2952,
  "Leftarrow;":0x21d0, "Leftrightarrow;":0x21d4,
  "LessEqualGreater;":0x22da, "LessFullEqual;":0x2266,
  "LessGreater;":0x2276, "LessLess;":0x2aa1,
  "LessSlantEqual;":0x2a7d, "LessTilde;":0x2272,
  "Lfr;":[0xd835,0xdd0f], "Ll;":0x22d8,
  "Lleftarrow;":0x21da, "Lmidot;":0x13f,
  "LongLeftArrow;":0x27f5, "LongLeftRightArrow;":0x27f7,
  "LongRightArrow;":0x27f6, "Longleftarrow;":0x27f8,
  "Longleftrightarrow;":0x27fa, "Longrightarrow;":0x27f9,
  "Lopf;":[0xd835,0xdd43], "LowerLeftArrow;":0x2199,
  "LowerRightArrow;":0x2198, "Lscr;":0x2112,
  "Lsh;":0x21b0, "Lstrok;":0x141,
  "Lt;":0x226a, "Map;":0x2905,
  "Mcy;":0x41c, "MediumSpace;":0x205f,
  "Mellintrf;":0x2133, "Mfr;":[0xd835,0xdd10],
  "MinusPlus;":0x2213, "Mopf;":[0xd835,0xdd44],
  "Mscr;":0x2133, "Mu;":0x39c,
  "NJcy;":0x40a, "Nacute;":0x143,
  "Ncaron;":0x147, "Ncedil;":0x145,
  "Ncy;":0x41d, "NegativeMediumSpace;":0x200b,
  "NegativeThickSpace;":0x200b, "NegativeThinSpace;":0x200b,
  "NegativeVeryThinSpace;":0x200b, "NestedGreaterGreater;":0x226b,
  "NestedLessLess;":0x226a, "NewLine;":0xa,
  "Nfr;":[0xd835,0xdd11], "NoBreak;":0x2060,
  "NonBreakingSpace;":0xa0, "Nopf;":0x2115,
  "Not;":0x2aec, "NotCongruent;":0x2262,
  "NotCupCap;":0x226d, "NotDoubleVerticalBar;":0x2226,
  "NotElement;":0x2209, "NotEqual;":0x2260,
  "NotEqualTilde;":[0x2242,0x338], "NotExists;":0x2204,
  "NotGreater;":0x226f, "NotGreaterEqual;":0x2271,
  "NotGreaterFullEqual;":[0x2267,0x338], "NotGreaterGreater;":[0x226b,0x338],
  "NotGreaterLess;":0x2279, "NotGreaterSlantEqual;":[0x2a7e,0x338],
  "NotGreaterTilde;":0x2275, "NotHumpDownHump;":[0x224e,0x338],
  "NotHumpEqual;":[0x224f,0x338], "NotLeftTriangle;":0x22ea,
  "NotLeftTriangleBar;":[0x29cf,0x338], "NotLeftTriangleEqual;":0x22ec,
  "NotLess;":0x226e, "NotLessEqual;":0x2270,
  "NotLessGreater;":0x2278, "NotLessLess;":[0x226a,0x338],
  "NotLessSlantEqual;":[0x2a7d,0x338], "NotLessTilde;":0x2274,
  "NotNestedGreaterGreater;":[0x2aa2,0x338], "NotNestedLessLess;":[0x2aa1,0x338],
  "NotPrecedes;":0x2280, "NotPrecedesEqual;":[0x2aaf,0x338],
  "NotPrecedesSlantEqual;":0x22e0, "NotReverseElement;":0x220c,
  "NotRightTriangle;":0x22eb, "NotRightTriangleBar;":[0x29d0,0x338],
  "NotRightTriangleEqual;":0x22ed, "NotSquareSubset;":[0x228f,0x338],
  "NotSquareSubsetEqual;":0x22e2, "NotSquareSuperset;":[0x2290,0x338],
  "NotSquareSupersetEqual;":0x22e3, "NotSubset;":[0x2282,0x20d2],
  "NotSubsetEqual;":0x2288, "NotSucceeds;":0x2281,
  "NotSucceedsEqual;":[0x2ab0,0x338], "NotSucceedsSlantEqual;":0x22e1,
  "NotSucceedsTilde;":[0x227f,0x338], "NotSuperset;":[0x2283,0x20d2],
  "NotSupersetEqual;":0x2289, "NotTilde;":0x2241,
  "NotTildeEqual;":0x2244, "NotTildeFullEqual;":0x2247,
  "NotTildeTilde;":0x2249, "NotVerticalBar;":0x2224,
  "Nscr;":[0xd835,0xdca9], "Ntilde":0xd1,
  "Ntilde;":0xd1, "Nu;":0x39d,
  "OElig;":0x152, "Oacute":0xd3,
  "Oacute;":0xd3, "Ocirc":0xd4,
  "Ocirc;":0xd4, "Ocy;":0x41e,
  "Odblac;":0x150, "Ofr;":[0xd835,0xdd12],
  "Ograve":0xd2, "Ograve;":0xd2,
  "Omacr;":0x14c, "Omega;":0x3a9,
  "Omicron;":0x39f, "Oopf;":[0xd835,0xdd46],
  "OpenCurlyDoubleQuote;":0x201c, "OpenCurlyQuote;":0x2018,
  "Or;":0x2a54, "Oscr;":[0xd835,0xdcaa],
  "Oslash":0xd8, "Oslash;":0xd8,
  "Otilde":0xd5, "Otilde;":0xd5,
  "Otimes;":0x2a37, "Ouml":0xd6,
  "Ouml;":0xd6, "OverBar;":0x203e,
  "OverBrace;":0x23de, "OverBracket;":0x23b4,
  "OverParenthesis;":0x23dc, "PartialD;":0x2202,
  "Pcy;":0x41f, "Pfr;":[0xd835,0xdd13],
  "Phi;":0x3a6, "Pi;":0x3a0,
  "PlusMinus;":0xb1, "Poincareplane;":0x210c,
  "Popf;":0x2119, "Pr;":0x2abb,
  "Precedes;":0x227a, "PrecedesEqual;":0x2aaf,
  "PrecedesSlantEqual;":0x227c, "PrecedesTilde;":0x227e,
  "Prime;":0x2033, "Product;":0x220f,
  "Proportion;":0x2237, "Proportional;":0x221d,
  "Pscr;":[0xd835,0xdcab], "Psi;":0x3a8,
  "QUOT":0x22, "QUOT;":0x22,
  "Qfr;":[0xd835,0xdd14], "Qopf;":0x211a,
  "Qscr;":[0xd835,0xdcac], "RBarr;":0x2910,
  "REG":0xae, "REG;":0xae,
  "Racute;":0x154, "Rang;":0x27eb,
  "Rarr;":0x21a0, "Rarrtl;":0x2916,
  "Rcaron;":0x158, "Rcedil;":0x156,
  "Rcy;":0x420, "Re;":0x211c,
  "ReverseElement;":0x220b, "ReverseEquilibrium;":0x21cb,
  "ReverseUpEquilibrium;":0x296f, "Rfr;":0x211c,
  "Rho;":0x3a1, "RightAngleBracket;":0x27e9,
  "RightArrow;":0x2192, "RightArrowBar;":0x21e5,
  "RightArrowLeftArrow;":0x21c4, "RightCeiling;":0x2309,
  "RightDoubleBracket;":0x27e7, "RightDownTeeVector;":0x295d,
  "RightDownVector;":0x21c2, "RightDownVectorBar;":0x2955,
  "RightFloor;":0x230b, "RightTee;":0x22a2,
  "RightTeeArrow;":0x21a6, "RightTeeVector;":0x295b,
  "RightTriangle;":0x22b3, "RightTriangleBar;":0x29d0,
  "RightTriangleEqual;":0x22b5, "RightUpDownVector;":0x294f,
  "RightUpTeeVector;":0x295c, "RightUpVector;":0x21be,
  "RightUpVectorBar;":0x2954, "RightVector;":0x21c0,
  "RightVectorBar;":0x2953, "Rightarrow;":0x21d2,
  "Ropf;":0x211d, "RoundImplies;":0x2970,
  "Rrightarrow;":0x21db, "Rscr;":0x211b,
  "Rsh;":0x21b1, "RuleDelayed;":0x29f4,
  "SHCHcy;":0x429, "SHcy;":0x428,
  "SOFTcy;":0x42c, "Sacute;":0x15a,
  "Sc;":0x2abc, "Scaron;":0x160,
  "Scedil;":0x15e, "Scirc;":0x15c,
  "Scy;":0x421, "Sfr;":[0xd835,0xdd16],
  "ShortDownArrow;":0x2193, "ShortLeftArrow;":0x2190,
  "ShortRightArrow;":0x2192, "ShortUpArrow;":0x2191,
  "Sigma;":0x3a3, "SmallCircle;":0x2218,
  "Sopf;":[0xd835,0xdd4a], "Sqrt;":0x221a,
  "Square;":0x25a1, "SquareIntersection;":0x2293,
  "SquareSubset;":0x228f, "SquareSubsetEqual;":0x2291,
  "SquareSuperset;":0x2290, "SquareSupersetEqual;":0x2292,
  "SquareUnion;":0x2294, "Sscr;":[0xd835,0xdcae],
  "Star;":0x22c6, "Sub;":0x22d0,
  "Subset;":0x22d0, "SubsetEqual;":0x2286,
  "Succeeds;":0x227b, "SucceedsEqual;":0x2ab0,
  "SucceedsSlantEqual;":0x227d, "SucceedsTilde;":0x227f,
  "SuchThat;":0x220b, "Sum;":0x2211,
  "Sup;":0x22d1, "Superset;":0x2283,
  "SupersetEqual;":0x2287, "Supset;":0x22d1,
  "THORN":0xde, "THORN;":0xde,
  "TRADE;":0x2122, "TSHcy;":0x40b,
  "TScy;":0x426, "Tab;":0x9,
  "Tau;":0x3a4, "Tcaron;":0x164,
  "Tcedil;":0x162, "Tcy;":0x422,
  "Tfr;":[0xd835,0xdd17], "Therefore;":0x2234,
  "Theta;":0x398, "ThickSpace;":[0x205f,0x200a],
  "ThinSpace;":0x2009, "Tilde;":0x223c,
  "TildeEqual;":0x2243, "TildeFullEqual;":0x2245,
  "TildeTilde;":0x2248, "Topf;":[0xd835,0xdd4b],
  "TripleDot;":0x20db, "Tscr;":[0xd835,0xdcaf],
  "Tstrok;":0x166, "Uacute":0xda,
  "Uacute;":0xda, "Uarr;":0x219f,
  "Uarrocir;":0x2949, "Ubrcy;":0x40e,
  "Ubreve;":0x16c, "Ucirc":0xdb,
  "Ucirc;":0xdb, "Ucy;":0x423,
  "Udblac;":0x170, "Ufr;":[0xd835,0xdd18],
  "Ugrave":0xd9, "Ugrave;":0xd9,
  "Umacr;":0x16a, "UnderBar;":0x5f,
  "UnderBrace;":0x23df, "UnderBracket;":0x23b5,
  "UnderParenthesis;":0x23dd, "Union;":0x22c3,
  "UnionPlus;":0x228e, "Uogon;":0x172,
  "Uopf;":[0xd835,0xdd4c], "UpArrow;":0x2191,
  "UpArrowBar;":0x2912, "UpArrowDownArrow;":0x21c5,
  "UpDownArrow;":0x2195, "UpEquilibrium;":0x296e,
  "UpTee;":0x22a5, "UpTeeArrow;":0x21a5,
  "Uparrow;":0x21d1, "Updownarrow;":0x21d5,
  "UpperLeftArrow;":0x2196, "UpperRightArrow;":0x2197,
  "Upsi;":0x3d2, "Upsilon;":0x3a5,
  "Uring;":0x16e, "Uscr;":[0xd835,0xdcb0],
  "Utilde;":0x168, "Uuml":0xdc,
  "Uuml;":0xdc, "VDash;":0x22ab,
  "Vbar;":0x2aeb, "Vcy;":0x412,
  "Vdash;":0x22a9, "Vdashl;":0x2ae6,
  "Vee;":0x22c1, "Verbar;":0x2016,
  "Vert;":0x2016, "VerticalBar;":0x2223,
  "VerticalLine;":0x7c, "VerticalSeparator;":0x2758,
  "VerticalTilde;":0x2240, "VeryThinSpace;":0x200a,
  "Vfr;":[0xd835,0xdd19], "Vopf;":[0xd835,0xdd4d],
  "Vscr;":[0xd835,0xdcb1], "Vvdash;":0x22aa,
  "Wcirc;":0x174, "Wedge;":0x22c0,
  "Wfr;":[0xd835,0xdd1a], "Wopf;":[0xd835,0xdd4e],
  "Wscr;":[0xd835,0xdcb2], "Xfr;":[0xd835,0xdd1b],
  "Xi;":0x39e, "Xopf;":[0xd835,0xdd4f],
  "Xscr;":[0xd835,0xdcb3], "YAcy;":0x42f,
  "YIcy;":0x407, "YUcy;":0x42e,
  "Yacute":0xdd, "Yacute;":0xdd,
  "Ycirc;":0x176, "Ycy;":0x42b,
  "Yfr;":[0xd835,0xdd1c], "Yopf;":[0xd835,0xdd50],
  "Yscr;":[0xd835,0xdcb4], "Yuml;":0x178,
  "ZHcy;":0x416, "Zacute;":0x179,
  "Zcaron;":0x17d, "Zcy;":0x417,
  "Zdot;":0x17b, "ZeroWidthSpace;":0x200b,
  "Zeta;":0x396, "Zfr;":0x2128,
  "Zopf;":0x2124, "Zscr;":[0xd835,0xdcb5],
  "aacute":0xe1, "aacute;":0xe1,
  "abreve;":0x103, "ac;":0x223e,
  "acE;":[0x223e,0x333], "acd;":0x223f,
  "acirc":0xe2, "acirc;":0xe2,
  "acute":0xb4, "acute;":0xb4,
  "acy;":0x430, "aelig":0xe6,
  "aelig;":0xe6, "af;":0x2061,
  "afr;":[0xd835,0xdd1e], "agrave":0xe0,
  "agrave;":0xe0, "alefsym;":0x2135,
  "aleph;":0x2135, "alpha;":0x3b1,
  "amacr;":0x101, "amalg;":0x2a3f,
  "amp":0x26, "amp;":0x26,
  "and;":0x2227, "andand;":0x2a55,
  "andd;":0x2a5c, "andslope;":0x2a58,
  "andv;":0x2a5a, "ang;":0x2220,
  "ange;":0x29a4, "angle;":0x2220,
  "angmsd;":0x2221, "angmsdaa;":0x29a8,
  "angmsdab;":0x29a9, "angmsdac;":0x29aa,
  "angmsdad;":0x29ab, "angmsdae;":0x29ac,
  "angmsdaf;":0x29ad, "angmsdag;":0x29ae,
  "angmsdah;":0x29af, "angrt;":0x221f,
  "angrtvb;":0x22be, "angrtvbd;":0x299d,
  "angsph;":0x2222, "angst;":0xc5,
  "angzarr;":0x237c, "aogon;":0x105,
  "aopf;":[0xd835,0xdd52], "ap;":0x2248,
  "apE;":0x2a70, "apacir;":0x2a6f,
  "ape;":0x224a, "apid;":0x224b,
  "apos;":0x27, "approx;":0x2248,
  "approxeq;":0x224a, "aring":0xe5,
  "aring;":0xe5, "ascr;":[0xd835,0xdcb6],
  "ast;":0x2a, "asymp;":0x2248,
  "asympeq;":0x224d, "atilde":0xe3,
  "atilde;":0xe3, "auml":0xe4,
  "auml;":0xe4, "awconint;":0x2233,
  "awint;":0x2a11, "bNot;":0x2aed,
  "backcong;":0x224c, "backepsilon;":0x3f6,
  "backprime;":0x2035, "backsim;":0x223d,
  "backsimeq;":0x22cd, "barvee;":0x22bd,
  "barwed;":0x2305, "barwedge;":0x2305,
  "bbrk;":0x23b5, "bbrktbrk;":0x23b6,
  "bcong;":0x224c, "bcy;":0x431,
  "bdquo;":0x201e, "becaus;":0x2235,
  "because;":0x2235, "bemptyv;":0x29b0,
  "bepsi;":0x3f6, "bernou;":0x212c,
  "beta;":0x3b2, "beth;":0x2136,
  "between;":0x226c, "bfr;":[0xd835,0xdd1f],
  "bigcap;":0x22c2, "bigcirc;":0x25ef,
  "bigcup;":0x22c3, "bigodot;":0x2a00,
  "bigoplus;":0x2a01, "bigotimes;":0x2a02,
  "bigsqcup;":0x2a06, "bigstar;":0x2605,
  "bigtriangledown;":0x25bd, "bigtriangleup;":0x25b3,
  "biguplus;":0x2a04, "bigvee;":0x22c1,
  "bigwedge;":0x22c0, "bkarow;":0x290d,
  "blacklozenge;":0x29eb, "blacksquare;":0x25aa,
  "blacktriangle;":0x25b4, "blacktriangledown;":0x25be,
  "blacktriangleleft;":0x25c2, "blacktriangleright;":0x25b8,
  "blank;":0x2423, "blk12;":0x2592,
  "blk14;":0x2591, "blk34;":0x2593,
  "block;":0x2588, "bne;":[0x3d,0x20e5],
  "bnequiv;":[0x2261,0x20e5], "bnot;":0x2310,
  "bopf;":[0xd835,0xdd53], "bot;":0x22a5,
  "bottom;":0x22a5, "bowtie;":0x22c8,
  "boxDL;":0x2557, "boxDR;":0x2554,
  "boxDl;":0x2556, "boxDr;":0x2553,
  "boxH;":0x2550, "boxHD;":0x2566,
  "boxHU;":0x2569, "boxHd;":0x2564,
  "boxHu;":0x2567, "boxUL;":0x255d,
  "boxUR;":0x255a, "boxUl;":0x255c,
  "boxUr;":0x2559, "boxV;":0x2551,
  "boxVH;":0x256c, "boxVL;":0x2563,
  "boxVR;":0x2560, "boxVh;":0x256b,
  "boxVl;":0x2562, "boxVr;":0x255f,
  "boxbox;":0x29c9, "boxdL;":0x2555,
  "boxdR;":0x2552, "boxdl;":0x2510,
  "boxdr;":0x250c, "boxh;":0x2500,
  "boxhD;":0x2565, "boxhU;":0x2568,
  "boxhd;":0x252c, "boxhu;":0x2534,
  "boxminus;":0x229f, "boxplus;":0x229e,
  "boxtimes;":0x22a0, "boxuL;":0x255b,
  "boxuR;":0x2558, "boxul;":0x2518,
  "boxur;":0x2514, "boxv;":0x2502,
  "boxvH;":0x256a, "boxvL;":0x2561,
  "boxvR;":0x255e, "boxvh;":0x253c,
  "boxvl;":0x2524, "boxvr;":0x251c,
  "bprime;":0x2035, "breve;":0x2d8,
  "brvbar":0xa6, "brvbar;":0xa6,
  "bscr;":[0xd835,0xdcb7], "bsemi;":0x204f,
  "bsim;":0x223d, "bsime;":0x22cd,
  "bsol;":0x5c, "bsolb;":0x29c5,
  "bsolhsub;":0x27c8, "bull;":0x2022,
  "bullet;":0x2022, "bump;":0x224e,
  "bumpE;":0x2aae, "bumpe;":0x224f,
  "bumpeq;":0x224f, "cacute;":0x107,
  "cap;":0x2229, "capand;":0x2a44,
  "capbrcup;":0x2a49, "capcap;":0x2a4b,
  "capcup;":0x2a47, "capdot;":0x2a40,
  "caps;":[0x2229,0xfe00], "caret;":0x2041,
  "caron;":0x2c7, "ccaps;":0x2a4d,
  "ccaron;":0x10d, "ccedil":0xe7,
  "ccedil;":0xe7, "ccirc;":0x109,
  "ccups;":0x2a4c, "ccupssm;":0x2a50,
  "cdot;":0x10b, "cedil":0xb8,
  "cedil;":0xb8, "cemptyv;":0x29b2,
  "cent":0xa2, "cent;":0xa2,
  "centerdot;":0xb7, "cfr;":[0xd835,0xdd20],
  "chcy;":0x447, "check;":0x2713,
  "checkmark;":0x2713, "chi;":0x3c7,
  "cir;":0x25cb, "cirE;":0x29c3,
  "circ;":0x2c6, "circeq;":0x2257,
  "circlearrowleft;":0x21ba, "circlearrowright;":0x21bb,
  "circledR;":0xae, "circledS;":0x24c8,
  "circledast;":0x229b, "circledcirc;":0x229a,
  "circleddash;":0x229d, "cire;":0x2257,
  "cirfnint;":0x2a10, "cirmid;":0x2aef,
  "cirscir;":0x29c2, "clubs;":0x2663,
  "clubsuit;":0x2663, "colon;":0x3a,
  "colone;":0x2254, "coloneq;":0x2254,
  "comma;":0x2c, "commat;":0x40,
  "comp;":0x2201, "compfn;":0x2218,
  "complement;":0x2201, "complexes;":0x2102,
  "cong;":0x2245, "congdot;":0x2a6d,
  "conint;":0x222e, "copf;":[0xd835,0xdd54],
  "coprod;":0x2210, "copy":0xa9,
  "copy;":0xa9, "copysr;":0x2117,
  "crarr;":0x21b5, "cross;":0x2717,
  "cscr;":[0xd835,0xdcb8], "csub;":0x2acf,
  "csube;":0x2ad1, "csup;":0x2ad0,
  "csupe;":0x2ad2, "ctdot;":0x22ef,
  "cudarrl;":0x2938, "cudarrr;":0x2935,
  "cuepr;":0x22de, "cuesc;":0x22df,
  "cularr;":0x21b6, "cularrp;":0x293d,
  "cup;":0x222a, "cupbrcap;":0x2a48,
  "cupcap;":0x2a46, "cupcup;":0x2a4a,
  "cupdot;":0x228d, "cupor;":0x2a45,
  "cups;":[0x222a,0xfe00], "curarr;":0x21b7,
  "curarrm;":0x293c, "curlyeqprec;":0x22de,
  "curlyeqsucc;":0x22df, "curlyvee;":0x22ce,
  "curlywedge;":0x22cf, "curren":0xa4,
  "curren;":0xa4, "curvearrowleft;":0x21b6,
  "curvearrowright;":0x21b7, "cuvee;":0x22ce,
  "cuwed;":0x22cf, "cwconint;":0x2232,
  "cwint;":0x2231, "cylcty;":0x232d,
  "dArr;":0x21d3, "dHar;":0x2965,
  "dagger;":0x2020, "daleth;":0x2138,
  "darr;":0x2193, "dash;":0x2010,
  "dashv;":0x22a3, "dbkarow;":0x290f,
  "dblac;":0x2dd, "dcaron;":0x10f,
  "dcy;":0x434, "dd;":0x2146,
  "ddagger;":0x2021, "ddarr;":0x21ca,
  "ddotseq;":0x2a77, "deg":0xb0,
  "deg;":0xb0, "delta;":0x3b4,
  "demptyv;":0x29b1, "dfisht;":0x297f,
  "dfr;":[0xd835,0xdd21], "dharl;":0x21c3,
  "dharr;":0x21c2, "diam;":0x22c4,
  "diamond;":0x22c4, "diamondsuit;":0x2666,
  "diams;":0x2666, "die;":0xa8,
  "digamma;":0x3dd, "disin;":0x22f2,
  "div;":0xf7, "divide":0xf7,
  "divide;":0xf7, "divideontimes;":0x22c7,
  "divonx;":0x22c7, "djcy;":0x452,
  "dlcorn;":0x231e, "dlcrop;":0x230d,
  "dollar;":0x24, "dopf;":[0xd835,0xdd55],
  "dot;":0x2d9, "doteq;":0x2250,
  "doteqdot;":0x2251, "dotminus;":0x2238,
  "dotplus;":0x2214, "dotsquare;":0x22a1,
  "doublebarwedge;":0x2306, "downarrow;":0x2193,
  "downdownarrows;":0x21ca, "downharpoonleft;":0x21c3,
  "downharpoonright;":0x21c2, "drbkarow;":0x2910,
  "drcorn;":0x231f, "drcrop;":0x230c,
  "dscr;":[0xd835,0xdcb9], "dscy;":0x455,
  "dsol;":0x29f6, "dstrok;":0x111,
  "dtdot;":0x22f1, "dtri;":0x25bf,
  "dtrif;":0x25be, "duarr;":0x21f5,
  "duhar;":0x296f, "dwangle;":0x29a6,
  "dzcy;":0x45f, "dzigrarr;":0x27ff,
  "eDDot;":0x2a77, "eDot;":0x2251,
  "eacute":0xe9, "eacute;":0xe9,
  "easter;":0x2a6e, "ecaron;":0x11b,
  "ecir;":0x2256, "ecirc":0xea,
  "ecirc;":0xea, "ecolon;":0x2255,
  "ecy;":0x44d, "edot;":0x117,
  "ee;":0x2147, "efDot;":0x2252,
  "efr;":[0xd835,0xdd22], "eg;":0x2a9a,
  "egrave":0xe8, "egrave;":0xe8,
  "egs;":0x2a96, "egsdot;":0x2a98,
  "el;":0x2a99, "elinters;":0x23e7,
  "ell;":0x2113, "els;":0x2a95,
  "elsdot;":0x2a97, "emacr;":0x113,
  "empty;":0x2205, "emptyset;":0x2205,
  "emptyv;":0x2205, "emsp13;":0x2004,
  "emsp14;":0x2005, "emsp;":0x2003,
  "eng;":0x14b, "ensp;":0x2002,
  "eogon;":0x119, "eopf;":[0xd835,0xdd56],
  "epar;":0x22d5, "eparsl;":0x29e3,
  "eplus;":0x2a71, "epsi;":0x3b5,
  "epsilon;":0x3b5, "epsiv;":0x3f5,
  "eqcirc;":0x2256, "eqcolon;":0x2255,
  "eqsim;":0x2242, "eqslantgtr;":0x2a96,
  "eqslantless;":0x2a95, "equals;":0x3d,
  "equest;":0x225f, "equiv;":0x2261,
  "equivDD;":0x2a78, "eqvparsl;":0x29e5,
  "erDot;":0x2253, "erarr;":0x2971,
  "escr;":0x212f, "esdot;":0x2250,
  "esim;":0x2242, "eta;":0x3b7,
  "eth":0xf0, "eth;":0xf0,
  "euml":0xeb, "euml;":0xeb,
  "euro;":0x20ac, "excl;":0x21,
  "exist;":0x2203, "expectation;":0x2130,
  "exponentiale;":0x2147, "fallingdotseq;":0x2252,
  "fcy;":0x444, "female;":0x2640,
  "ffilig;":0xfb03, "fflig;":0xfb00,
  "ffllig;":0xfb04, "ffr;":[0xd835,0xdd23],
  "filig;":0xfb01, "fjlig;":[0x66,0x6a],
  "flat;":0x266d, "fllig;":0xfb02,
  "fltns;":0x25b1, "fnof;":0x192,
  "fopf;":[0xd835,0xdd57], "forall;":0x2200,
  "fork;":0x22d4, "forkv;":0x2ad9,
  "fpartint;":0x2a0d, "frac12":0xbd,
  "frac12;":0xbd, "frac13;":0x2153,
  "frac14":0xbc, "frac14;":0xbc,
  "frac15;":0x2155, "frac16;":0x2159,
  "frac18;":0x215b, "frac23;":0x2154,
  "frac25;":0x2156, "frac34":0xbe,
  "frac34;":0xbe, "frac35;":0x2157,
  "frac38;":0x215c, "frac45;":0x2158,
  "frac56;":0x215a, "frac58;":0x215d,
  "frac78;":0x215e, "frasl;":0x2044,
  "frown;":0x2322, "fscr;":[0xd835,0xdcbb],
  "gE;":0x2267, "gEl;":0x2a8c,
  "gacute;":0x1f5, "gamma;":0x3b3,
  "gammad;":0x3dd, "gap;":0x2a86,
  "gbreve;":0x11f, "gcirc;":0x11d,
  "gcy;":0x433, "gdot;":0x121,
  "ge;":0x2265, "gel;":0x22db,
  "geq;":0x2265, "geqq;":0x2267,
  "geqslant;":0x2a7e, "ges;":0x2a7e,
  "gescc;":0x2aa9, "gesdot;":0x2a80,
  "gesdoto;":0x2a82, "gesdotol;":0x2a84,
  "gesl;":[0x22db,0xfe00], "gesles;":0x2a94,
  "gfr;":[0xd835,0xdd24], "gg;":0x226b,
  "ggg;":0x22d9, "gimel;":0x2137,
  "gjcy;":0x453, "gl;":0x2277,
  "glE;":0x2a92, "gla;":0x2aa5,
  "glj;":0x2aa4, "gnE;":0x2269,
  "gnap;":0x2a8a, "gnapprox;":0x2a8a,
  "gne;":0x2a88, "gneq;":0x2a88,
  "gneqq;":0x2269, "gnsim;":0x22e7,
  "gopf;":[0xd835,0xdd58], "grave;":0x60,
  "gscr;":0x210a, "gsim;":0x2273,
  "gsime;":0x2a8e, "gsiml;":0x2a90,
  "gt":0x3e, "gt;":0x3e,
  "gtcc;":0x2aa7, "gtcir;":0x2a7a,
  "gtdot;":0x22d7, "gtlPar;":0x2995,
  "gtquest;":0x2a7c, "gtrapprox;":0x2a86,
  "gtrarr;":0x2978, "gtrdot;":0x22d7,
  "gtreqless;":0x22db, "gtreqqless;":0x2a8c,
  "gtrless;":0x2277, "gtrsim;":0x2273,
  "gvertneqq;":[0x2269,0xfe00], "gvnE;":[0x2269,0xfe00],
  "hArr;":0x21d4, "hairsp;":0x200a,
  "half;":0xbd, "hamilt;":0x210b,
  "hardcy;":0x44a, "harr;":0x2194,
  "harrcir;":0x2948, "harrw;":0x21ad,
  "hbar;":0x210f, "hcirc;":0x125,
  "hearts;":0x2665, "heartsuit;":0x2665,
  "hellip;":0x2026, "hercon;":0x22b9,
  "hfr;":[0xd835,0xdd25], "hksearow;":0x2925,
  "hkswarow;":0x2926, "hoarr;":0x21ff,
  "homtht;":0x223b, "hookleftarrow;":0x21a9,
  "hookrightarrow;":0x21aa, "hopf;":[0xd835,0xdd59],
  "horbar;":0x2015, "hscr;":[0xd835,0xdcbd],
  "hslash;":0x210f, "hstrok;":0x127,
  "hybull;":0x2043, "hyphen;":0x2010,
  "iacute":0xed, "iacute;":0xed,
  "ic;":0x2063, "icirc":0xee,
  "icirc;":0xee, "icy;":0x438,
  "iecy;":0x435, "iexcl":0xa1,
  "iexcl;":0xa1, "iff;":0x21d4,
  "ifr;":[0xd835,0xdd26], "igrave":0xec,
  "igrave;":0xec, "ii;":0x2148,
  "iiiint;":0x2a0c, "iiint;":0x222d,
  "iinfin;":0x29dc, "iiota;":0x2129,
  "ijlig;":0x133, "imacr;":0x12b,
  "image;":0x2111, "imagline;":0x2110,
  "imagpart;":0x2111, "imath;":0x131,
  "imof;":0x22b7, "imped;":0x1b5,
  "in;":0x2208, "incare;":0x2105,
  "infin;":0x221e, "infintie;":0x29dd,
  "inodot;":0x131, "int;":0x222b,
  "intcal;":0x22ba, "integers;":0x2124,
  "intercal;":0x22ba, "intlarhk;":0x2a17,
  "intprod;":0x2a3c, "iocy;":0x451,
  "iogon;":0x12f, "iopf;":[0xd835,0xdd5a],
  "iota;":0x3b9, "iprod;":0x2a3c,
  "iquest":0xbf, "iquest;":0xbf,
  "iscr;":[0xd835,0xdcbe], "isin;":0x2208,
  "isinE;":0x22f9, "isindot;":0x22f5,
  "isins;":0x22f4, "isinsv;":0x22f3,
  "isinv;":0x2208, "it;":0x2062,
  "itilde;":0x129, "iukcy;":0x456,
  "iuml":0xef, "iuml;":0xef,
  "jcirc;":0x135, "jcy;":0x439,
  "jfr;":[0xd835,0xdd27], "jmath;":0x237,
  "jopf;":[0xd835,0xdd5b], "jscr;":[0xd835,0xdcbf],
  "jsercy;":0x458, "jukcy;":0x454,
  "kappa;":0x3ba, "kappav;":0x3f0,
  "kcedil;":0x137, "kcy;":0x43a,
  "kfr;":[0xd835,0xdd28], "kgreen;":0x138,
  "khcy;":0x445, "kjcy;":0x45c,
  "kopf;":[0xd835,0xdd5c], "kscr;":[0xd835,0xdcc0],
  "lAarr;":0x21da, "lArr;":0x21d0,
  "lAtail;":0x291b, "lBarr;":0x290e,
  "lE;":0x2266, "lEg;":0x2a8b,
  "lHar;":0x2962, "lacute;":0x13a,
  "laemptyv;":0x29b4, "lagran;":0x2112,
  "lambda;":0x3bb, "lang;":0x27e8,
  "langd;":0x2991, "langle;":0x27e8,
  "lap;":0x2a85, "laquo":0xab,
  "laquo;":0xab, "larr;":0x2190,
  "larrb;":0x21e4, "larrbfs;":0x291f,
  "larrfs;":0x291d, "larrhk;":0x21a9,
  "larrlp;":0x21ab, "larrpl;":0x2939,
  "larrsim;":0x2973, "larrtl;":0x21a2,
  "lat;":0x2aab, "latail;":0x2919,
  "late;":0x2aad, "lates;":[0x2aad,0xfe00],
  "lbarr;":0x290c, "lbbrk;":0x2772,
  "lbrace;":0x7b, "lbrack;":0x5b,
  "lbrke;":0x298b, "lbrksld;":0x298f,
  "lbrkslu;":0x298d, "lcaron;":0x13e,
  "lcedil;":0x13c, "lceil;":0x2308,
  "lcub;":0x7b, "lcy;":0x43b,
  "ldca;":0x2936, "ldquo;":0x201c,
  "ldquor;":0x201e, "ldrdhar;":0x2967,
  "ldrushar;":0x294b, "ldsh;":0x21b2,
  "le;":0x2264, "leftarrow;":0x2190,
  "leftarrowtail;":0x21a2, "leftharpoondown;":0x21bd,
  "leftharpoonup;":0x21bc, "leftleftarrows;":0x21c7,
  "leftrightarrow;":0x2194, "leftrightarrows;":0x21c6,
  "leftrightharpoons;":0x21cb, "leftrightsquigarrow;":0x21ad,
  "leftthreetimes;":0x22cb, "leg;":0x22da,
  "leq;":0x2264, "leqq;":0x2266,
  "leqslant;":0x2a7d, "les;":0x2a7d,
  "lescc;":0x2aa8, "lesdot;":0x2a7f,
  "lesdoto;":0x2a81, "lesdotor;":0x2a83,
  "lesg;":[0x22da,0xfe00], "lesges;":0x2a93,
  "lessapprox;":0x2a85, "lessdot;":0x22d6,
  "lesseqgtr;":0x22da, "lesseqqgtr;":0x2a8b,
  "lessgtr;":0x2276, "lesssim;":0x2272,
  "lfisht;":0x297c, "lfloor;":0x230a,
  "lfr;":[0xd835,0xdd29], "lg;":0x2276,
  "lgE;":0x2a91, "lhard;":0x21bd,
  "lharu;":0x21bc, "lharul;":0x296a,
  "lhblk;":0x2584, "ljcy;":0x459,
  "ll;":0x226a, "llarr;":0x21c7,
  "llcorner;":0x231e, "llhard;":0x296b,
  "lltri;":0x25fa, "lmidot;":0x140,
  "lmoust;":0x23b0, "lmoustache;":0x23b0,
  "lnE;":0x2268, "lnap;":0x2a89,
  "lnapprox;":0x2a89, "lne;":0x2a87,
  "lneq;":0x2a87, "lneqq;":0x2268,
  "lnsim;":0x22e6, "loang;":0x27ec,
  "loarr;":0x21fd, "lobrk;":0x27e6,
  "longleftarrow;":0x27f5, "longleftrightarrow;":0x27f7,
  "longmapsto;":0x27fc, "longrightarrow;":0x27f6,
  "looparrowleft;":0x21ab, "looparrowright;":0x21ac,
  "lopar;":0x2985, "lopf;":[0xd835,0xdd5d],
  "loplus;":0x2a2d, "lotimes;":0x2a34,
  "lowast;":0x2217, "lowbar;":0x5f,
  "loz;":0x25ca, "lozenge;":0x25ca,
  "lozf;":0x29eb, "lpar;":0x28,
  "lparlt;":0x2993, "lrarr;":0x21c6,
  "lrcorner;":0x231f, "lrhar;":0x21cb,
  "lrhard;":0x296d, "lrm;":0x200e,
  "lrtri;":0x22bf, "lsaquo;":0x2039,
  "lscr;":[0xd835,0xdcc1], "lsh;":0x21b0,
  "lsim;":0x2272, "lsime;":0x2a8d,
  "lsimg;":0x2a8f, "lsqb;":0x5b,
  "lsquo;":0x2018, "lsquor;":0x201a,
  "lstrok;":0x142, "lt":0x3c,
  "lt;":0x3c, "ltcc;":0x2aa6,
  "ltcir;":0x2a79, "ltdot;":0x22d6,
  "lthree;":0x22cb, "ltimes;":0x22c9,
  "ltlarr;":0x2976, "ltquest;":0x2a7b,
  "ltrPar;":0x2996, "ltri;":0x25c3,
  "ltrie;":0x22b4, "ltrif;":0x25c2,
  "lurdshar;":0x294a, "luruhar;":0x2966,
  "lvertneqq;":[0x2268,0xfe00], "lvnE;":[0x2268,0xfe00],
  "mDDot;":0x223a, "macr":0xaf,
  "macr;":0xaf, "male;":0x2642,
  "malt;":0x2720, "maltese;":0x2720,
  "map;":0x21a6, "mapsto;":0x21a6,
  "mapstodown;":0x21a7, "mapstoleft;":0x21a4,
  "mapstoup;":0x21a5, "marker;":0x25ae,
  "mcomma;":0x2a29, "mcy;":0x43c,
  "mdash;":0x2014, "measuredangle;":0x2221,
  "mfr;":[0xd835,0xdd2a], "mho;":0x2127,
  "micro":0xb5, "micro;":0xb5,
  "mid;":0x2223, "midast;":0x2a,
  "midcir;":0x2af0, "middot":0xb7,
  "middot;":0xb7, "minus;":0x2212,
  "minusb;":0x229f, "minusd;":0x2238,
  "minusdu;":0x2a2a, "mlcp;":0x2adb,
  "mldr;":0x2026, "mnplus;":0x2213,
  "models;":0x22a7, "mopf;":[0xd835,0xdd5e],
  "mp;":0x2213, "mscr;":[0xd835,0xdcc2],
  "mstpos;":0x223e, "mu;":0x3bc,
  "multimap;":0x22b8, "mumap;":0x22b8,
  "nGg;":[0x22d9,0x338], "nGt;":[0x226b,0x20d2],
  "nGtv;":[0x226b,0x338], "nLeftarrow;":0x21cd,
  "nLeftrightarrow;":0x21ce, "nLl;":[0x22d8,0x338],
  "nLt;":[0x226a,0x20d2], "nLtv;":[0x226a,0x338],
  "nRightarrow;":0x21cf, "nVDash;":0x22af,
  "nVdash;":0x22ae, "nabla;":0x2207,
  "nacute;":0x144, "nang;":[0x2220,0x20d2],
  "nap;":0x2249, "napE;":[0x2a70,0x338],
  "napid;":[0x224b,0x338], "napos;":0x149,
  "napprox;":0x2249, "natur;":0x266e,
  "natural;":0x266e, "naturals;":0x2115,
  "nbsp":0xa0, "nbsp;":0xa0,
  "nbump;":[0x224e,0x338], "nbumpe;":[0x224f,0x338],
  "ncap;":0x2a43, "ncaron;":0x148,
  "ncedil;":0x146, "ncong;":0x2247,
  "ncongdot;":[0x2a6d,0x338], "ncup;":0x2a42,
  "ncy;":0x43d, "ndash;":0x2013,
  "ne;":0x2260, "neArr;":0x21d7,
  "nearhk;":0x2924, "nearr;":0x2197,
  "nearrow;":0x2197, "nedot;":[0x2250,0x338],
  "nequiv;":0x2262, "nesear;":0x2928,
  "nesim;":[0x2242,0x338], "nexist;":0x2204,
  "nexists;":0x2204, "nfr;":[0xd835,0xdd2b],
  "ngE;":[0x2267,0x338], "nge;":0x2271,
  "ngeq;":0x2271, "ngeqq;":[0x2267,0x338],
  "ngeqslant;":[0x2a7e,0x338], "nges;":[0x2a7e,0x338],
  "ngsim;":0x2275, "ngt;":0x226f,
  "ngtr;":0x226f, "nhArr;":0x21ce,
  "nharr;":0x21ae, "nhpar;":0x2af2,
  "ni;":0x220b, "nis;":0x22fc,
  "nisd;":0x22fa, "niv;":0x220b,
  "njcy;":0x45a, "nlArr;":0x21cd,
  "nlE;":[0x2266,0x338], "nlarr;":0x219a,
  "nldr;":0x2025, "nle;":0x2270,
  "nleftarrow;":0x219a, "nleftrightarrow;":0x21ae,
  "nleq;":0x2270, "nleqq;":[0x2266,0x338],
  "nleqslant;":[0x2a7d,0x338], "nles;":[0x2a7d,0x338],
  "nless;":0x226e, "nlsim;":0x2274,
  "nlt;":0x226e, "nltri;":0x22ea,
  "nltrie;":0x22ec, "nmid;":0x2224,
  "nopf;":[0xd835,0xdd5f], "not":0xac,
  "not;":0xac, "notin;":0x2209,
  "notinE;":[0x22f9,0x338], "notindot;":[0x22f5,0x338],
  "notinva;":0x2209, "notinvb;":0x22f7,
  "notinvc;":0x22f6, "notni;":0x220c,
  "notniva;":0x220c, "notnivb;":0x22fe,
  "notnivc;":0x22fd, "npar;":0x2226,
  "nparallel;":0x2226, "nparsl;":[0x2afd,0x20e5],
  "npart;":[0x2202,0x338], "npolint;":0x2a14,
  "npr;":0x2280, "nprcue;":0x22e0,
  "npre;":[0x2aaf,0x338], "nprec;":0x2280,
  "npreceq;":[0x2aaf,0x338], "nrArr;":0x21cf,
  "nrarr;":0x219b, "nrarrc;":[0x2933,0x338],
  "nrarrw;":[0x219d,0x338], "nrightarrow;":0x219b,
  "nrtri;":0x22eb, "nrtrie;":0x22ed,
  "nsc;":0x2281, "nsccue;":0x22e1,
  "nsce;":[0x2ab0,0x338], "nscr;":[0xd835,0xdcc3],
  "nshortmid;":0x2224, "nshortparallel;":0x2226,
  "nsim;":0x2241, "nsime;":0x2244,
  "nsimeq;":0x2244, "nsmid;":0x2224,
  "nspar;":0x2226, "nsqsube;":0x22e2,
  "nsqsupe;":0x22e3, "nsub;":0x2284,
  "nsubE;":[0x2ac5,0x338], "nsube;":0x2288,
  "nsubset;":[0x2282,0x20d2], "nsubseteq;":0x2288,
  "nsubseteqq;":[0x2ac5,0x338], "nsucc;":0x2281,
  "nsucceq;":[0x2ab0,0x338], "nsup;":0x2285,
  "nsupE;":[0x2ac6,0x338], "nsupe;":0x2289,
  "nsupset;":[0x2283,0x20d2], "nsupseteq;":0x2289,
  "nsupseteqq;":[0x2ac6,0x338], "ntgl;":0x2279,
  "ntilde":0xf1, "ntilde;":0xf1,
  "ntlg;":0x2278, "ntriangleleft;":0x22ea,
  "ntrianglelefteq;":0x22ec, "ntriangleright;":0x22eb,
  "ntrianglerighteq;":0x22ed, "nu;":0x3bd,
  "num;":0x23, "numero;":0x2116,
  "numsp;":0x2007, "nvDash;":0x22ad,
  "nvHarr;":0x2904, "nvap;":[0x224d,0x20d2],
  "nvdash;":0x22ac, "nvge;":[0x2265,0x20d2],
  "nvgt;":[0x3e,0x20d2], "nvinfin;":0x29de,
  "nvlArr;":0x2902, "nvle;":[0x2264,0x20d2],
  "nvlt;":[0x3c,0x20d2], "nvltrie;":[0x22b4,0x20d2],
  "nvrArr;":0x2903, "nvrtrie;":[0x22b5,0x20d2],
  "nvsim;":[0x223c,0x20d2], "nwArr;":0x21d6,
  "nwarhk;":0x2923, "nwarr;":0x2196,
  "nwarrow;":0x2196, "nwnear;":0x2927,
  "oS;":0x24c8, "oacute":0xf3,
  "oacute;":0xf3, "oast;":0x229b,
  "ocir;":0x229a, "ocirc":0xf4,
  "ocirc;":0xf4, "ocy;":0x43e,
  "odash;":0x229d, "odblac;":0x151,
  "odiv;":0x2a38, "odot;":0x2299,
  "odsold;":0x29bc, "oelig;":0x153,
  "ofcir;":0x29bf, "ofr;":[0xd835,0xdd2c],
  "ogon;":0x2db, "ograve":0xf2,
  "ograve;":0xf2, "ogt;":0x29c1,
  "ohbar;":0x29b5, "ohm;":0x3a9,
  "oint;":0x222e, "olarr;":0x21ba,
  "olcir;":0x29be, "olcross;":0x29bb,
  "oline;":0x203e, "olt;":0x29c0,
  "omacr;":0x14d, "omega;":0x3c9,
  "omicron;":0x3bf, "omid;":0x29b6,
  "ominus;":0x2296, "oopf;":[0xd835,0xdd60],
  "opar;":0x29b7, "operp;":0x29b9,
  "oplus;":0x2295, "or;":0x2228,
  "orarr;":0x21bb, "ord;":0x2a5d,
  "order;":0x2134, "orderof;":0x2134,
  "ordf":0xaa, "ordf;":0xaa,
  "ordm":0xba, "ordm;":0xba,
  "origof;":0x22b6, "oror;":0x2a56,
  "orslope;":0x2a57, "orv;":0x2a5b,
  "oscr;":0x2134, "oslash":0xf8,
  "oslash;":0xf8, "osol;":0x2298,
  "otilde":0xf5, "otilde;":0xf5,
  "otimes;":0x2297, "otimesas;":0x2a36,
  "ouml":0xf6, "ouml;":0xf6,
  "ovbar;":0x233d, "par;":0x2225,
  "para":0xb6, "para;":0xb6,
  "parallel;":0x2225, "parsim;":0x2af3,
  "parsl;":0x2afd, "part;":0x2202,
  "pcy;":0x43f, "percnt;":0x25,
  "period;":0x2e, "permil;":0x2030,
  "perp;":0x22a5, "pertenk;":0x2031,
  "pfr;":[0xd835,0xdd2d], "phi;":0x3c6,
  "phiv;":0x3d5, "phmmat;":0x2133,
  "phone;":0x260e, "pi;":0x3c0,
  "pitchfork;":0x22d4, "piv;":0x3d6,
  "planck;":0x210f, "planckh;":0x210e,
  "plankv;":0x210f, "plus;":0x2b,
  "plusacir;":0x2a23, "plusb;":0x229e,
  "pluscir;":0x2a22, "plusdo;":0x2214,
  "plusdu;":0x2a25, "pluse;":0x2a72,
  "plusmn":0xb1, "plusmn;":0xb1,
  "plussim;":0x2a26, "plustwo;":0x2a27,
  "pm;":0xb1, "pointint;":0x2a15,
  "popf;":[0xd835,0xdd61], "pound":0xa3,
  "pound;":0xa3, "pr;":0x227a,
  "prE;":0x2ab3, "prap;":0x2ab7,
  "prcue;":0x227c, "pre;":0x2aaf,
  "prec;":0x227a, "precapprox;":0x2ab7,
  "preccurlyeq;":0x227c, "preceq;":0x2aaf,
  "precnapprox;":0x2ab9, "precneqq;":0x2ab5,
  "precnsim;":0x22e8, "precsim;":0x227e,
  "prime;":0x2032, "primes;":0x2119,
  "prnE;":0x2ab5, "prnap;":0x2ab9,
  "prnsim;":0x22e8, "prod;":0x220f,
  "profalar;":0x232e, "profline;":0x2312,
  "profsurf;":0x2313, "prop;":0x221d,
  "propto;":0x221d, "prsim;":0x227e,
  "prurel;":0x22b0, "pscr;":[0xd835,0xdcc5],
  "psi;":0x3c8, "puncsp;":0x2008,
  "qfr;":[0xd835,0xdd2e], "qint;":0x2a0c,
  "qopf;":[0xd835,0xdd62], "qprime;":0x2057,
  "qscr;":[0xd835,0xdcc6], "quaternions;":0x210d,
  "quatint;":0x2a16, "quest;":0x3f,
  "questeq;":0x225f, "quot":0x22,
  "quot;":0x22, "rAarr;":0x21db,
  "rArr;":0x21d2, "rAtail;":0x291c,
  "rBarr;":0x290f, "rHar;":0x2964,
  "race;":[0x223d,0x331], "racute;":0x155,
  "radic;":0x221a, "raemptyv;":0x29b3,
  "rang;":0x27e9, "rangd;":0x2992,
  "range;":0x29a5, "rangle;":0x27e9,
  "raquo":0xbb, "raquo;":0xbb,
  "rarr;":0x2192, "rarrap;":0x2975,
  "rarrb;":0x21e5, "rarrbfs;":0x2920,
  "rarrc;":0x2933, "rarrfs;":0x291e,
  "rarrhk;":0x21aa, "rarrlp;":0x21ac,
  "rarrpl;":0x2945, "rarrsim;":0x2974,
  "rarrtl;":0x21a3, "rarrw;":0x219d,
  "ratail;":0x291a, "ratio;":0x2236,
  "rationals;":0x211a, "rbarr;":0x290d,
  "rbbrk;":0x2773, "rbrace;":0x7d,
  "rbrack;":0x5d, "rbrke;":0x298c,
  "rbrksld;":0x298e, "rbrkslu;":0x2990,
  "rcaron;":0x159, "rcedil;":0x157,
  "rceil;":0x2309, "rcub;":0x7d,
  "rcy;":0x440, "rdca;":0x2937,
  "rdldhar;":0x2969, "rdquo;":0x201d,
  "rdquor;":0x201d, "rdsh;":0x21b3,
  "real;":0x211c, "realine;":0x211b,
  "realpart;":0x211c, "reals;":0x211d,
  "rect;":0x25ad, "reg":0xae,
  "reg;":0xae, "rfisht;":0x297d,
  "rfloor;":0x230b, "rfr;":[0xd835,0xdd2f],
  "rhard;":0x21c1, "rharu;":0x21c0,
  "rharul;":0x296c, "rho;":0x3c1,
  "rhov;":0x3f1, "rightarrow;":0x2192,
  "rightarrowtail;":0x21a3, "rightharpoondown;":0x21c1,
  "rightharpoonup;":0x21c0, "rightleftarrows;":0x21c4,
  "rightleftharpoons;":0x21cc, "rightrightarrows;":0x21c9,
  "rightsquigarrow;":0x219d, "rightthreetimes;":0x22cc,
  "ring;":0x2da, "risingdotseq;":0x2253,
  "rlarr;":0x21c4, "rlhar;":0x21cc,
  "rlm;":0x200f, "rmoust;":0x23b1,
  "rmoustache;":0x23b1, "rnmid;":0x2aee,
  "roang;":0x27ed, "roarr;":0x21fe,
  "robrk;":0x27e7, "ropar;":0x2986,
  "ropf;":[0xd835,0xdd63], "roplus;":0x2a2e,
  "rotimes;":0x2a35, "rpar;":0x29,
  "rpargt;":0x2994, "rppolint;":0x2a12,
  "rrarr;":0x21c9, "rsaquo;":0x203a,
  "rscr;":[0xd835,0xdcc7], "rsh;":0x21b1,
  "rsqb;":0x5d, "rsquo;":0x2019,
  "rsquor;":0x2019, "rthree;":0x22cc,
  "rtimes;":0x22ca, "rtri;":0x25b9,
  "rtrie;":0x22b5, "rtrif;":0x25b8,
  "rtriltri;":0x29ce, "ruluhar;":0x2968,
  "rx;":0x211e, "sacute;":0x15b,
  "sbquo;":0x201a, "sc;":0x227b,
  "scE;":0x2ab4, "scap;":0x2ab8,
  "scaron;":0x161, "sccue;":0x227d,
  "sce;":0x2ab0, "scedil;":0x15f,
  "scirc;":0x15d, "scnE;":0x2ab6,
  "scnap;":0x2aba, "scnsim;":0x22e9,
  "scpolint;":0x2a13, "scsim;":0x227f,
  "scy;":0x441, "sdot;":0x22c5,
  "sdotb;":0x22a1, "sdote;":0x2a66,
  "seArr;":0x21d8, "searhk;":0x2925,
  "searr;":0x2198, "searrow;":0x2198,
  "sect":0xa7, "sect;":0xa7,
  "semi;":0x3b, "seswar;":0x2929,
  "setminus;":0x2216, "setmn;":0x2216,
  "sext;":0x2736, "sfr;":[0xd835,0xdd30],
  "sfrown;":0x2322, "sharp;":0x266f,
  "shchcy;":0x449, "shcy;":0x448,
  "shortmid;":0x2223, "shortparallel;":0x2225,
  "shy":0xad, "shy;":0xad,
  "sigma;":0x3c3, "sigmaf;":0x3c2,
  "sigmav;":0x3c2, "sim;":0x223c,
  "simdot;":0x2a6a, "sime;":0x2243,
  "simeq;":0x2243, "simg;":0x2a9e,
  "simgE;":0x2aa0, "siml;":0x2a9d,
  "simlE;":0x2a9f, "simne;":0x2246,
  "simplus;":0x2a24, "simrarr;":0x2972,
  "slarr;":0x2190, "smallsetminus;":0x2216,
  "smashp;":0x2a33, "smeparsl;":0x29e4,
  "smid;":0x2223, "smile;":0x2323,
  "smt;":0x2aaa, "smte;":0x2aac,
  "smtes;":[0x2aac,0xfe00], "softcy;":0x44c,
  "sol;":0x2f, "solb;":0x29c4,
  "solbar;":0x233f, "sopf;":[0xd835,0xdd64],
  "spades;":0x2660, "spadesuit;":0x2660,
  "spar;":0x2225, "sqcap;":0x2293,
  "sqcaps;":[0x2293,0xfe00], "sqcup;":0x2294,
  "sqcups;":[0x2294,0xfe00], "sqsub;":0x228f,
  "sqsube;":0x2291, "sqsubset;":0x228f,
  "sqsubseteq;":0x2291, "sqsup;":0x2290,
  "sqsupe;":0x2292, "sqsupset;":0x2290,
  "sqsupseteq;":0x2292, "squ;":0x25a1,
  "square;":0x25a1, "squarf;":0x25aa,
  "squf;":0x25aa, "srarr;":0x2192,
  "sscr;":[0xd835,0xdcc8], "ssetmn;":0x2216,
  "ssmile;":0x2323, "sstarf;":0x22c6,
  "star;":0x2606, "starf;":0x2605,
  "straightepsilon;":0x3f5, "straightphi;":0x3d5,
  "strns;":0xaf, "sub;":0x2282,
  "subE;":0x2ac5, "subdot;":0x2abd,
  "sube;":0x2286, "subedot;":0x2ac3,
  "submult;":0x2ac1, "subnE;":0x2acb,
  "subne;":0x228a, "subplus;":0x2abf,
  "subrarr;":0x2979, "subset;":0x2282,
  "subseteq;":0x2286, "subseteqq;":0x2ac5,
  "subsetneq;":0x228a, "subsetneqq;":0x2acb,
  "subsim;":0x2ac7, "subsub;":0x2ad5,
  "subsup;":0x2ad3, "succ;":0x227b,
  "succapprox;":0x2ab8, "succcurlyeq;":0x227d,
  "succeq;":0x2ab0, "succnapprox;":0x2aba,
  "succneqq;":0x2ab6, "succnsim;":0x22e9,
  "succsim;":0x227f, "sum;":0x2211,
  "sung;":0x266a, "sup1":0xb9,
  "sup1;":0xb9, "sup2":0xb2,
  "sup2;":0xb2, "sup3":0xb3,
  "sup3;":0xb3, "sup;":0x2283,
  "supE;":0x2ac6, "supdot;":0x2abe,
  "supdsub;":0x2ad8, "supe;":0x2287,
  "supedot;":0x2ac4, "suphsol;":0x27c9,
  "suphsub;":0x2ad7, "suplarr;":0x297b,
  "supmult;":0x2ac2, "supnE;":0x2acc,
  "supne;":0x228b, "supplus;":0x2ac0,
  "supset;":0x2283, "supseteq;":0x2287,
  "supseteqq;":0x2ac6, "supsetneq;":0x228b,
  "supsetneqq;":0x2acc, "supsim;":0x2ac8,
  "supsub;":0x2ad4, "supsup;":0x2ad6,
  "swArr;":0x21d9, "swarhk;":0x2926,
  "swarr;":0x2199, "swarrow;":0x2199,
  "swnwar;":0x292a, "szlig":0xdf,
  "szlig;":0xdf, "target;":0x2316,
  "tau;":0x3c4, "tbrk;":0x23b4,
  "tcaron;":0x165, "tcedil;":0x163,
  "tcy;":0x442, "tdot;":0x20db,
  "telrec;":0x2315, "tfr;":[0xd835,0xdd31],
  "there4;":0x2234, "therefore;":0x2234,
  "theta;":0x3b8, "thetasym;":0x3d1,
  "thetav;":0x3d1, "thickapprox;":0x2248,
  "thicksim;":0x223c, "thinsp;":0x2009,
  "thkap;":0x2248, "thksim;":0x223c,
  "thorn":0xfe, "thorn;":0xfe,
  "tilde;":0x2dc, "times":0xd7,
  "times;":0xd7, "timesb;":0x22a0,
  "timesbar;":0x2a31, "timesd;":0x2a30,
  "tint;":0x222d, "toea;":0x2928,
  "top;":0x22a4, "topbot;":0x2336,
  "topcir;":0x2af1, "topf;":[0xd835,0xdd65],
  "topfork;":0x2ada, "tosa;":0x2929,
  "tprime;":0x2034, "trade;":0x2122,
  "triangle;":0x25b5, "triangledown;":0x25bf,
  "triangleleft;":0x25c3, "trianglelefteq;":0x22b4,
  "triangleq;":0x225c, "triangleright;":0x25b9,
  "trianglerighteq;":0x22b5, "tridot;":0x25ec,
  "trie;":0x225c, "triminus;":0x2a3a,
  "triplus;":0x2a39, "trisb;":0x29cd,
  "tritime;":0x2a3b, "trpezium;":0x23e2,
  "tscr;":[0xd835,0xdcc9], "tscy;":0x446,
  "tshcy;":0x45b, "tstrok;":0x167,
  "twixt;":0x226c, "twoheadleftarrow;":0x219e,
  "twoheadrightarrow;":0x21a0, "uArr;":0x21d1,
  "uHar;":0x2963, "uacute":0xfa,
  "uacute;":0xfa, "uarr;":0x2191,
  "ubrcy;":0x45e, "ubreve;":0x16d,
  "ucirc":0xfb, "ucirc;":0xfb,
  "ucy;":0x443, "udarr;":0x21c5,
  "udblac;":0x171, "udhar;":0x296e,
  "ufisht;":0x297e, "ufr;":[0xd835,0xdd32],
  "ugrave":0xf9, "ugrave;":0xf9,
  "uharl;":0x21bf, "uharr;":0x21be,
  "uhblk;":0x2580, "ulcorn;":0x231c,
  "ulcorner;":0x231c, "ulcrop;":0x230f,
  "ultri;":0x25f8, "umacr;":0x16b,
  "uml":0xa8, "uml;":0xa8,
  "uogon;":0x173, "uopf;":[0xd835,0xdd66],
  "uparrow;":0x2191, "updownarrow;":0x2195,
  "upharpoonleft;":0x21bf, "upharpoonright;":0x21be,
  "uplus;":0x228e, "upsi;":0x3c5,
  "upsih;":0x3d2, "upsilon;":0x3c5,
  "upuparrows;":0x21c8, "urcorn;":0x231d,
  "urcorner;":0x231d, "urcrop;":0x230e,
  "uring;":0x16f, "urtri;":0x25f9,
  "uscr;":[0xd835,0xdcca], "utdot;":0x22f0,
  "utilde;":0x169, "utri;":0x25b5,
  "utrif;":0x25b4, "uuarr;":0x21c8,
  "uuml":0xfc, "uuml;":0xfc,
  "uwangle;":0x29a7, "vArr;":0x21d5,
  "vBar;":0x2ae8, "vBarv;":0x2ae9,
  "vDash;":0x22a8, "vangrt;":0x299c,
  "varepsilon;":0x3f5, "varkappa;":0x3f0,
  "varnothing;":0x2205, "varphi;":0x3d5,
  "varpi;":0x3d6, "varpropto;":0x221d,
  "varr;":0x2195, "varrho;":0x3f1,
  "varsigma;":0x3c2, "varsubsetneq;":[0x228a,0xfe00],
  "varsubsetneqq;":[0x2acb,0xfe00], "varsupsetneq;":[0x228b,0xfe00],
  "varsupsetneqq;":[0x2acc,0xfe00], "vartheta;":0x3d1,
  "vartriangleleft;":0x22b2, "vartriangleright;":0x22b3,
  "vcy;":0x432, "vdash;":0x22a2,
  "vee;":0x2228, "veebar;":0x22bb,
  "veeeq;":0x225a, "vellip;":0x22ee,
  "verbar;":0x7c, "vert;":0x7c,
  "vfr;":[0xd835,0xdd33], "vltri;":0x22b2,
  "vnsub;":[0x2282,0x20d2], "vnsup;":[0x2283,0x20d2],
  "vopf;":[0xd835,0xdd67], "vprop;":0x221d,
  "vrtri;":0x22b3, "vscr;":[0xd835,0xdccb],
  "vsubnE;":[0x2acb,0xfe00], "vsubne;":[0x228a,0xfe00],
  "vsupnE;":[0x2acc,0xfe00], "vsupne;":[0x228b,0xfe00],
  "vzigzag;":0x299a, "wcirc;":0x175,
  "wedbar;":0x2a5f, "wedge;":0x2227,
  "wedgeq;":0x2259, "weierp;":0x2118,
  "wfr;":[0xd835,0xdd34], "wopf;":[0xd835,0xdd68],
  "wp;":0x2118, "wr;":0x2240,
  "wreath;":0x2240, "wscr;":[0xd835,0xdccc],
  "xcap;":0x22c2, "xcirc;":0x25ef,
  "xcup;":0x22c3, "xdtri;":0x25bd,
  "xfr;":[0xd835,0xdd35], "xhArr;":0x27fa,
  "xharr;":0x27f7, "xi;":0x3be,
  "xlArr;":0x27f8, "xlarr;":0x27f5,
  "xmap;":0x27fc, "xnis;":0x22fb,
  "xodot;":0x2a00, "xopf;":[0xd835,0xdd69],
  "xoplus;":0x2a01, "xotime;":0x2a02,
  "xrArr;":0x27f9, "xrarr;":0x27f6,
  "xscr;":[0xd835,0xdccd], "xsqcup;":0x2a06,
  "xuplus;":0x2a04, "xutri;":0x25b3,
  "xvee;":0x22c1, "xwedge;":0x22c0,
  "yacute":0xfd, "yacute;":0xfd,
  "yacy;":0x44f, "ycirc;":0x177,
  "ycy;":0x44b, "yen":0xa5,
  "yen;":0xa5, "yfr;":[0xd835,0xdd36],
  "yicy;":0x457, "yopf;":[0xd835,0xdd6a],
  "yscr;":[0xd835,0xdcce], "yucy;":0x44e,
  "yuml":0xff, "yuml;":0xff,
  "zacute;":0x17a, "zcaron;":0x17e,
  "zcy;":0x437, "zdot;":0x17c,
  "zeetrf;":0x2128, "zeta;":0x3b6,
  "zfr;":[0xd835,0xdd37], "zhcy;":0x436,
  "zigrarr;":0x21dd, "zopf;":[0xd835,0xdd6b],
  "zscr;":[0xd835,0xdccf], "zwj;":0x200d,
  "zwnj;":0x200c,
};
/*
 * This regexp is generated with test/tools/update-entities.js
 * It will always match at least one character -- but note that there
 * are no entities whose names are a single character long.
 */
var NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\s\S]/g;

var NAMEDCHARREF_MAXLEN = 32;

// Regular expression constants used by the tokenizer and parser

// Note that \r is included in all of these regexps because it will need
// to be converted to LF by the scanChars() function.
var DBLQUOTEATTRVAL = /[^\r"&\u0000]+/g;
var SINGLEQUOTEATTRVAL = /[^\r'&\u0000]+/g;
var UNQUOTEDATTRVAL = /[^\r\t\n\f &>\u0000]+/g;
var TAGNAME = /[^\r\t\n\f \/>A-Z\u0000]+/g;
var ATTRNAME = /[^\r\t\n\f \/=>A-Z\u0000]+/g;

var CDATATEXT = /[^\]\r\u0000\uffff]*/g;
var DATATEXT = /[^&<\r\u0000\uffff]*/g;
var RAWTEXT = /[^<\r\u0000\uffff]*/g;
var PLAINTEXT = /[^\r\u0000\uffff]*/g;
// Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG
// and SIMPLEATTR so that we are guaranteed to always match.  This prevents
// us from scanning past the lastIndex set. (Note that the desired matches
// are always greater than 1 char long, so longest-match will ensure that .
// is not matched unless the desired match fails.)
var SIMPLETAG = /(?:(\/)?([a-z]+)>)|[\s\S]/g;
var SIMPLEATTR = /(?:([-a-z]+)[ \t\n\f]*=[ \t\n\f]*('[^'&\r\u0000]*'|"[^"&\r\u0000]*"|[^\t\n\r\f "&'\u0000>][^&> \t\n\r\f\u0000]*[ \t\n\f]))|[\s\S]/g;

var NONWS = /[^\x09\x0A\x0C\x0D\x20]/;
var ALLNONWS = /[^\x09\x0A\x0C\x0D\x20]/g; // like above, with g flag
var NONWSNONNUL = /[^\x00\x09\x0A\x0C\x0D\x20]/; // don't allow NUL either
var LEADINGWS = /^[\x09\x0A\x0C\x0D\x20]+/;
var NULCHARS = /\x00/g;

/***
 * These are utility functions that don't use any of the parser's
 * internal state.
 */
function buf2str(buf) {
  var CHUNKSIZE=16384;
  if (buf.length < CHUNKSIZE) {
    return String.fromCharCode.apply(String, buf);
  }
  // special case for large strings, to avoid busting the stack.
  var result = '';
  for (var i = 0; i < buf.length; i += CHUNKSIZE) {
    result += String.fromCharCode.apply(String, buf.slice(i, i+CHUNKSIZE));
  }
  return result;
}

function str2buf(s) {
  var result = [];
  for (var i=0; i<s.length; i++) {
    result[i] = s.charCodeAt(i);
  }
  return result;
}

// Determine whether the element is a member of the set.
// The set is an object that maps namespaces to objects. The objects
// then map local tagnames to the value true if that tag is part of the set
function isA(elt, set) {
  if (typeof set === 'string') {
    // convenience case for testing a particular HTML element
    return elt.namespaceURI === NAMESPACE.HTML &&
      elt.localName === set;
  }
  var tagnames = set[elt.namespaceURI];
  return tagnames && tagnames[elt.localName];
}

function isMathmlTextIntegrationPoint(n) {
  return isA(n, mathmlTextIntegrationPointSet);
}

function isHTMLIntegrationPoint(n) {
  if (isA(n, htmlIntegrationPointSet)) return true;
  if (n.namespaceURI === NAMESPACE.MATHML &&
    n.localName === "annotation-xml") {
    var encoding = n.getAttribute("encoding");
    if (encoding) encoding = encoding.toLowerCase();
    if (encoding === "text/html" ||
      encoding === "application/xhtml+xml")
      return true;
  }
  return false;
}

function adjustSVGTagName(name) {
  if (name in svgTagNameAdjustments)
    return svgTagNameAdjustments[name];
  else
    return name;
}

function adjustSVGAttributes(attrs) {
  for(var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] in svgAttrAdjustments) {
      attrs[i][0] = svgAttrAdjustments[attrs[i][0]];
    }
  }
}

function adjustMathMLAttributes(attrs) {
  for(var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] === "definitionurl") {
      attrs[i][0] = "definitionURL";
      break;
    }
  }
}

function adjustForeignAttributes(attrs) {
  for(var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] in foreignAttributes) {
      // Attributes with namespaces get a 3rd element:
      // [Qname, value, namespace]
      attrs[i].push(foreignAttributes[attrs[i][0]]);
    }
  }
}

// For each attribute in attrs, if elt doesn't have an attribute
// by that name, add the attribute to elt
// XXX: I'm ignoring namespaces for now
function transferAttributes(attrs, elt) {
  for(var i = 0, n = attrs.length; i < n; i++) {
    var name = attrs[i][0], value = attrs[i][1];
    if (elt.hasAttribute(name)) continue;
    elt._setAttribute(name, value);
  }
}

/***
 * The ElementStack class
 */
HTMLParser.ElementStack = function ElementStack() {
  this.elements = [];
  this.top = null; // stack.top is the "current node" in the spec
};

/*
// This is for debugging only
HTMLParser.ElementStack.prototype.toString = function(e) {
  return "STACK: " +
  this.elements.map(function(e) {return e.localName;}).join("-");
}
*/

HTMLParser.ElementStack.prototype.push = function(e) {
  this.elements.push(e);
  this.top = e;
};

HTMLParser.ElementStack.prototype.pop = function(e) {
  this.elements.pop();
  this.top = this.elements[this.elements.length-1];
};

// Pop elements off the stack up to and including the first
// element with the specified (HTML) tagname
HTMLParser.ElementStack.prototype.popTag = function(tag) {
  for(var i = this.elements.length-1; i > 0; i--) {
    var e = this.elements[i];
    if (isA(e, tag)) break;
  }
  this.elements.length = i;
  this.top = this.elements[i-1];
};

// Pop elements off the stack up to and including the first
// element that is an instance of the specified type
HTMLParser.ElementStack.prototype.popElementType = function(type) {
  for(var i = this.elements.length-1; i > 0; i--) {
    if (this.elements[i] instanceof type) break;
  }
  this.elements.length = i;
  this.top = this.elements[i-1];
};

// Pop elements off the stack up to and including the element e.
// Note that this is very different from removeElement()
// This requires that e is on the stack.
HTMLParser.ElementStack.prototype.popElement = function(e) {
  for(var i = this.elements.length-1; i > 0; i--) {
    if (this.elements[i] === e) break;
  }
  this.elements.length = i;
  this.top = this.elements[i-1];
};

// Remove a specific element from the stack.
// Do nothing if the element is not on the stack
HTMLParser.ElementStack.prototype.removeElement = function(e) {
  if (this.top === e) this.pop();
  else {
    var idx = this.elements.lastIndexOf(e);
    if (idx !== -1)
      this.elements.splice(idx, 1);
  }
};

HTMLParser.ElementStack.prototype.clearToContext = function(set) {
  // Note that we don't loop to 0. Never pop the <html> elt off.
  for(var i = this.elements.length-1; i > 0; i--) {
    if (isA(this.elements[i], set)) break;
  }
  this.elements.length = i+1;
  this.top = this.elements[i];
};

HTMLParser.ElementStack.prototype.contains = function(tag) {
  return this.inSpecificScope(tag, Object.create(null));
};

HTMLParser.ElementStack.prototype.inSpecificScope = function(tag, set) {
  for(var i = this.elements.length-1; i >= 0; i--) {
    var elt = this.elements[i];
    if (isA(elt, tag)) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};

// Like the above, but for a specific element, not a tagname
HTMLParser.ElementStack.prototype.elementInSpecificScope = function(target, set) {
  for(var i = this.elements.length-1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt === target) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};

// Like the above, but for an element interface, not a tagname
HTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function(target, set) {
  for(var i = this.elements.length-1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt instanceof target) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};

HTMLParser.ElementStack.prototype.inScope = function(tag) {
  return this.inSpecificScope(tag, inScopeSet);
};

HTMLParser.ElementStack.prototype.elementInScope = function(e) {
  return this.elementInSpecificScope(e, inScopeSet);
};

HTMLParser.ElementStack.prototype.elementTypeInScope = function(type) {
  return this.elementTypeInSpecificScope(type, inScopeSet);
};

HTMLParser.ElementStack.prototype.inButtonScope = function(tag) {
  return this.inSpecificScope(tag, inButtonScopeSet);
};

HTMLParser.ElementStack.prototype.inListItemScope = function(tag) {
  return this.inSpecificScope(tag, inListItemScopeSet);
};

HTMLParser.ElementStack.prototype.inTableScope = function(tag) {
  return this.inSpecificScope(tag, inTableScopeSet);
};

HTMLParser.ElementStack.prototype.inSelectScope = function(tag) {
  // Can't implement this one with inSpecificScope, since it involves
  // a set defined by inverting another set. So implement manually.
  for(var i = this.elements.length-1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt.namespaceURI !== NAMESPACE.HTML) return false;
    var localname = elt.localName;
    if (localname === tag) return true;
    if (localname !== "optgroup" && localname !== "option")
      return false;
  }
  return false;
};

HTMLParser.ElementStack.prototype.generateImpliedEndTags = function(butnot, thorough) {
  var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;
  for(var i = this.elements.length-1; i >= 0; i--) {
    var e = this.elements[i];
    if (butnot && isA(e, butnot)) break;
    if (!isA(this.elements[i], endTagSet)) break;
  }

  this.elements.length = i+1;
  this.top = this.elements[i];
};

/***
 * The ActiveFormattingElements class
 */
HTMLParser.ActiveFormattingElements = function AFE() {
  this.list = []; // elements
  this.attrs = []; // attribute tokens for cloning
};

HTMLParser.ActiveFormattingElements.prototype.MARKER = { localName: "|" };

/*
// For debugging
HTMLParser.ActiveFormattingElements.prototype.toString = function() {
  return "AFE: " +
  this.list.map(function(e) { return e.localName; }).join("-");
}
*/

HTMLParser.ActiveFormattingElements.prototype.insertMarker = function() {
  this.list.push(this.MARKER);
  this.attrs.push(this.MARKER);
};

HTMLParser.ActiveFormattingElements.prototype.push = function(elt, attrs) {
  // Scan backwards: if there are already 3 copies of this element
  // before we encounter a marker, then drop the last one
  var count = 0;
  for(var i = this.list.length-1; i >= 0; i--) {
    if (this.list[i] === this.MARKER) break;
    // equal() is defined below
    if (equal(elt, this.list[i], this.attrs[i])) {
      count++;
      if (count === 3) {
        this.list.splice(i, 1);
        this.attrs.splice(i, 1);
        break;
      }
    }
  }


  // Now push the element onto the list
  this.list.push(elt);

  // Copy the attributes and push those on, too
  var attrcopy = [];
  for(var ii = 0; ii < attrs.length; ii++) {
    attrcopy[ii] = attrs[ii];
  }

  this.attrs.push(attrcopy);

  // This function defines equality of two elements for the purposes
  // of the AFE list.  Note that it compares the new elements
  // attributes to the saved array of attributes associated with
  // the old element because a script could have changed the
  // old element's set of attributes
  function equal(newelt, oldelt, oldattrs) {
    if (newelt.localName !== oldelt.localName) return false;
    if (newelt._numattrs !== oldattrs.length) return false;
    for(var i = 0, n = oldattrs.length; i < n; i++) {
      var oldname = oldattrs[i][0];
      var oldval = oldattrs[i][1];
      if (!newelt.hasAttribute(oldname)) return false;
      if (newelt.getAttribute(oldname) !== oldval) return false;
    }
    return true;
  }
};

HTMLParser.ActiveFormattingElements.prototype.clearToMarker = function() {
  for(var i = this.list.length-1; i >= 0; i--) {
    if (this.list[i] === this.MARKER) break;
  }
  if (i < 0) i = 0;
  this.list.length = i;
  this.attrs.length = i;
};

// Find and return the last element with the specified tag between the
// end of the list and the last marker on the list.
// Used when parsing <a> in_body_mode()
HTMLParser.ActiveFormattingElements.prototype.findElementByTag = function(tag) {
  for(var i = this.list.length-1; i >= 0; i--) {
    var elt = this.list[i];
    if (elt === this.MARKER) break;
    if (elt.localName === tag) return elt;
  }
  return null;
};

HTMLParser.ActiveFormattingElements.prototype.indexOf = function(e) {
  return this.list.lastIndexOf(e);
};

// Find the element e in the list and remove it
// Used when parsing <a> in_body()
HTMLParser.ActiveFormattingElements.prototype.remove = function(e) {
  var idx = this.list.lastIndexOf(e);
  if (idx !== -1) {
    this.list.splice(idx, 1);
    this.attrs.splice(idx, 1);
  }
};

// Find element a in the list and replace it with element b
// XXX: Do I need to handle attributes here?
HTMLParser.ActiveFormattingElements.prototype.replace = function(a, b, attrs) {
  var idx = this.list.lastIndexOf(a);
  if (idx !== -1) {
    this.list[idx] = b;
    this.attrs[idx] = attrs;
  }
};

// Find a in the list and insert b after it
// This is only used for insert a bookmark object, so the
// attrs array doesn't really matter
HTMLParser.ActiveFormattingElements.prototype.insertAfter = function(a,b) {
  var idx = this.list.lastIndexOf(a);
  if (idx !== -1) {
    this.list.splice(idx, 0, b);
    this.attrs.splice(idx, 0, b);
  }
};




/***
 * This is the parser factory function. It is the return value of
 * the outer closure that it is defined within.  Most of the parser
 * implementation details are inside this function.
 */
function HTMLParser(address, fragmentContext, options) {
  /***
   * These are the parser's state variables
   */
  // Scanner state
  var chars = null;
  var numchars = 0; // Length of chars
  var nextchar = 0; // Index of next char
  var input_complete = false; // Becomes true when end() called.
  var scanner_skip_newline = false; // If previous char was CR
  var reentrant_invocations = 0;
  var saved_scanner_state = [];
  var leftovers = "";
  var first_batch = true;
  var paused = 0; // Becomes non-zero while loading scripts


  // Tokenizer state
  var tokenizer = data_state; // Current tokenizer state
  var return_state;
  var character_reference_code;
  var tagnamebuf = "";
  var lasttagname = ""; // holds the target end tag for text states
  var tempbuf = [];
  var attrnamebuf = "";
  var attrvaluebuf = "";
  var commentbuf = [];
  var doctypenamebuf = [];
  var doctypepublicbuf = [];
  var doctypesystembuf = [];
  var attributes = [];
  var is_end_tag = false;

  // Tree builder state
  var parser = initial_mode; // Current insertion mode
  var originalInsertionMode = null; // A saved insertion mode
  var templateInsertionModes = []; // Stack of template insertion modes.
  var stack = new HTMLParser.ElementStack(); // Stack of open elements
  var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags
  var fragment = (fragmentContext!==undefined); // For innerHTML, etc.
  var head_element_pointer = null;
  var form_element_pointer = null;
  var scripting_enabled = true;
  if (fragmentContext) {
	scripting_enabled = fragmentContext.ownerDocument._scripting_enabled;
  }
  if (options && options.scripting_enabled === false)
    scripting_enabled = false;
  var frameset_ok = true;
  var force_quirks = false;
  var pending_table_text;
  var text_integration_mode; // XXX a spec bug workaround?

  // A single run of characters, buffered up to be sent to
  // the parser as a single string.
  var textrun = [];
  var textIncludesNUL = false;
  var ignore_linefeed = false;

  /***
   * This is the parser object that will be the return value of this
   * factory function, which is some 5000 lines below.
   * Note that the variable "parser" is the current state of the
   * parser's state machine.  This variable "htmlparser" is the
   * return value and defines the public API of the parser
   */
  var htmlparser = {
    document: function() {
      return doc;
    },

    // Internal function used from HTMLScriptElement to pause the
    // parser while a script is being loaded from the network
    pause: function() {
      // print("pausing parser");
      paused++;
    },

    // Called when a script finishes loading
    resume: function() {
      // print("resuming parser");
      paused--;
      // XXX: added this to force a resumption.
      // Is this the right thing to do?
      this.parse("");
    },

    // Parse the HTML text s.
    // The second argument should be true if there is no more
    // text to be parsed, and should be false or omitted otherwise.
    // The second argument must not be set for recursive invocations
    // from document.write()
    parse: function(s, end) {

      // If we're paused, remember the text to parse, but
      // don't parse it now.
      if (paused > 0) {
        leftovers += s;
        return;
      }


      if (reentrant_invocations === 0) {
        // A normal, top-level invocation
        if (leftovers) {
          s = leftovers + s;
          leftovers = "";
        }

        // Add a special marker character to the end of
        // the buffer.  If the scanner is at the end of
        // the buffer and input_complete is set, then this
        // character will transform into an EOF token.
        // Having an actual character that represents EOF
        // in the character buffer makes lookahead regexp
        // matching work more easily, and this is
        // important for character references.
        if (end) {
          s += "\uFFFF";
          input_complete = true; // Makes scanChars() send EOF
        }

        chars = s;
        numchars = s.length;
        nextchar = 0;

        if (first_batch) {
          // We skip a leading Byte Order Mark (\uFEFF)
          // on first batch of text we're given
          first_batch = false;
          if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;
        }

        reentrant_invocations++;
        scanChars();
        leftovers = chars.substring(nextchar, numchars);
        reentrant_invocations--;
      }
      else {
        // This is the re-entrant case, which we have to
        // handle a little differently.
        reentrant_invocations++;

        // Save current scanner state
        saved_scanner_state.push(chars, numchars, nextchar);

        // Set new scanner state
        chars = s;
        numchars = s.length;
        nextchar = 0;

        // Now scan as many of these new chars as we can
        scanChars();

        leftovers = chars.substring(nextchar, numchars);

        // restore old scanner state
        nextchar = saved_scanner_state.pop();
        numchars = saved_scanner_state.pop();
        chars = saved_scanner_state.pop();

        // If there were leftover chars from this invocation
        // insert them into the pending invocation's buffer
        // and trim already processed chars at the same time
        if (leftovers) {
          chars = leftovers + chars.substring(nextchar);
          numchars = chars.length;
          nextchar = 0;
          leftovers = "";
        }

        // Decrement the counter
        reentrant_invocations--;
      }
    }
  };


  // This is the document we'll be building up
  var doc = new Document(true, address);

  // The document needs to know about the parser, for document.write().
  // This _parser property will be deleted when we're done parsing.
  doc._parser = htmlparser;

  // XXX I think that any document we use this parser on should support
  // scripts. But I may need to configure that through a parser parameter
  // Only documents with windows ("browsing contexts" to be precise)
  // allow scripting.
  doc._scripting_enabled = scripting_enabled;


  /***
   * The actual code of the HTMLParser() factory function begins here.
   */

  if (fragmentContext) { // for innerHTML parsing
    if (fragmentContext.ownerDocument._quirks)
      doc._quirks = true;
    if (fragmentContext.ownerDocument._limitedQuirks)
      doc._limitedQuirks = true;

    // Set the initial tokenizer state
    if (fragmentContext.namespaceURI === NAMESPACE.HTML) {
      switch(fragmentContext.localName) {
      case "title":
      case "textarea":
        tokenizer = rcdata_state;
        break;
      case "style":
      case "xmp":
      case "iframe":
      case "noembed":
      case "noframes":
      case "script":
      case "plaintext":
        tokenizer = plaintext_state;
        break;
      case "noscript":
        if (scripting_enabled)
          tokenizer = plaintext_state;
      }
    }

    var root = doc.createElement("html");
    doc._appendChild(root);
    stack.push(root);
    if (fragmentContext instanceof impl.HTMLTemplateElement) {
      templateInsertionModes.push(in_template_mode);
    }
    resetInsertionMode();

    for(var e = fragmentContext; e !== null; e = e.parentElement) {
      if (e instanceof impl.HTMLFormElement) {
        form_element_pointer = e;
        break;
      }
    }
  }

  /***
   * Scanner functions
   */
  // Loop through the characters in chars, and pass them one at a time
  // to the tokenizer FSM. Return when no more characters can be processed
  // (This may leave 1 or more characters in the buffer: like a CR
  // waiting to see if the next char is LF, or for states that require
  // lookahead...)
  function scanChars() {
    var codepoint, s, pattern, eof;

    while(nextchar < numchars) {

      // If we just tokenized a </script> tag, then the paused flag
      // may have been set to tell us to stop tokenizing while
      // the script is loading
      if (paused > 0) {
        return;
      }


      switch(typeof tokenizer.lookahead) {
      case 'undefined':
        codepoint = chars.charCodeAt(nextchar++);
        if (scanner_skip_newline) {
          scanner_skip_newline = false;
          if (codepoint === 0x000A) {
            nextchar++;
            continue;
          }
        }
        switch(codepoint) {
        case 0x000D:
          // CR always turns into LF, but if the next character
          // is LF, then that second LF is skipped.
          if (nextchar < numchars) {
            if (chars.charCodeAt(nextchar) === 0x000A)
              nextchar++;
          }
          else {
            // We don't know the next char right now, so we
            // can't check if it is a LF.  So set a flag
            scanner_skip_newline = true;
          }

          // In either case, emit a LF
          tokenizer(0x000A);

          break;
        case 0xFFFF:
          if (input_complete && nextchar === numchars) {
            tokenizer(EOF); // codepoint will be 0xFFFF here
            break;
          }
          /* falls through */
        default:
          tokenizer(codepoint);
          break;
        }
        break;

      case 'number':
        codepoint = chars.charCodeAt(nextchar);

        // The only tokenizer states that require fixed lookahead
        // only consume alphanum characters, so we don't have
        // to worry about CR and LF in this case

        // tokenizer wants n chars of lookahead
        var n = tokenizer.lookahead;
        var needsString = true;
        if (n < 0) {
          needsString = false;
          n = -n;
        }

        if (n < numchars - nextchar) {
          // If we can look ahead that far
          s = needsString ? chars.substring(nextchar, nextchar+n) : null;
          eof = false;
        }
        else { // if we don't have that many characters
          if (input_complete) { // If no more are coming
            // Just return what we have
            s = needsString ? chars.substring(nextchar, numchars) : null;
            eof = true;
            if (codepoint === 0xFFFF && nextchar === numchars-1)
              codepoint = EOF;
          }
          else {
            // Return now and wait for more chars later
            return;
          }
        }
        tokenizer(codepoint, s, eof);
        break;
      case 'string':
        codepoint = chars.charCodeAt(nextchar);

        // tokenizer wants characters up to a matching string
        pattern = tokenizer.lookahead;
        var pos = chars.indexOf(pattern, nextchar);
        if (pos !== -1) {
          s = chars.substring(nextchar, pos + pattern.length);
          eof = false;
        }
        else {  // No match
          // If more characters coming, wait for them
          if (!input_complete) return;

          // Otherwise, we've got to return what we've got
          s = chars.substring(nextchar, numchars);
          if (codepoint === 0xFFFF && nextchar === numchars-1)
            codepoint = EOF;
          eof = true;
        }

        // The tokenizer states that require this kind of
        // lookahead have to be careful to handle CR characters
        // correctly
        tokenizer(codepoint, s, eof);
        break;
      }
    }
  }


  /***
   * Tokenizer utility functions
   */
  function addAttribute(name,value) {
    // Make sure there isn't already an attribute with this name
    // If there is, ignore this one.
    for(var i = 0; i < attributes.length; i++) {
      if (attributes[i][0] === name) return;
    }

    if (value !== undefined) {
      attributes.push([name, value]);
    }
    else {
      attributes.push([name]);
    }
  }

  // Shortcut for simple attributes
  function handleSimpleAttribute() {
    SIMPLEATTR.lastIndex = nextchar-1;
    var matched = SIMPLEATTR.exec(chars);
    if (!matched) throw new Error("should never happen");
    var name = matched[1];
    if (!name) return false;
    var value = matched[2];
    var len = value.length;
    switch(value[0]) {
    case '"':
    case "'":
      value = value.substring(1, len-1);
      nextchar += (matched[0].length-1);
      tokenizer = after_attribute_value_quoted_state;
      break;
    default:
      tokenizer = before_attribute_name_state;
      nextchar += (matched[0].length-1);
      value = value.substring(0, len-1);
      break;
    }

    // Make sure there isn't already an attribute with this name
    // If there is, ignore this one.
    for(var i = 0; i < attributes.length; i++) {
      if (attributes[i][0] === name) return true;
    }

    attributes.push([name, value]);
    return true;
  }

  function beginTagName() {
    is_end_tag = false;
    tagnamebuf = "";
    attributes.length = 0;
  }
  function beginEndTagName() {
    is_end_tag = true;
    tagnamebuf = "";
    attributes.length = 0;
  }

  function beginTempBuf() { tempbuf.length = 0; }
  function beginAttrName() { attrnamebuf = ""; }
  function beginAttrValue() { attrvaluebuf = ""; }
  function beginComment() { commentbuf.length = 0; }
  function beginDoctype() {
    doctypenamebuf.length = 0;
    doctypepublicbuf = null;
    doctypesystembuf = null;
  }
  function beginDoctypePublicId() { doctypepublicbuf = []; }
  function beginDoctypeSystemId() { doctypesystembuf = []; }
  function forcequirks() { force_quirks = true; }
  function cdataAllowed() {
    return stack.top &&
      stack.top.namespaceURI !== "http://www.w3.org/1999/xhtml";
  }

  // Return true if the codepoints in the specified buffer match the
  // characters of lasttagname
  function appropriateEndTag(buf) {
    return lasttagname === buf;
  }

  function flushText() {
    if (textrun.length > 0) {
      var s = buf2str(textrun);
      textrun.length = 0;

      if (ignore_linefeed) {
        ignore_linefeed = false;
        if (s[0] === "\n") s = s.substring(1);
        if (s.length === 0) return;
      }

      insertToken(TEXT, s);
      textIncludesNUL = false;
    }
    ignore_linefeed = false;
  }

  // Consume chars matched by the pattern and return them as a string. Starts
  // matching at the current position, so users should drop the current char
  // otherwise.
  function getMatchingChars(pattern) {
    pattern.lastIndex = nextchar - 1;
    var match = pattern.exec(chars);
    if (match && match.index === nextchar - 1) {
      match = match[0];
      nextchar += match.length - 1;
      /* Careful!  Make sure we haven't matched the EOF character! */
      if (input_complete && nextchar === numchars) {
        // Oops, backup one.
        match = match.slice(0, -1);
        nextchar--;
      }
      return match;
    } else {
      throw new Error("should never happen");
    }
  }

  // emit a string of chars that match a regexp
  // Returns false if no chars matched.
  function emitCharsWhile(pattern) {
    pattern.lastIndex = nextchar-1;
    var match = pattern.exec(chars)[0];
    if (!match) return false;
    emitCharString(match);
    nextchar += match.length - 1;
    return true;
  }

  // This is used by CDATA sections
  function emitCharString(s) {
    if (textrun.length > 0) flushText();

    if (ignore_linefeed) {
      ignore_linefeed = false;
      if (s[0] === "\n") s = s.substring(1);
      if (s.length === 0) return;
    }

    insertToken(TEXT, s);
  }

  function emitTag() {
    if (is_end_tag) insertToken(ENDTAG, tagnamebuf);
    else {
      // Remember the last open tag we emitted
      var tagname = tagnamebuf;
      tagnamebuf = "";
      lasttagname = tagname;
      insertToken(TAG, tagname, attributes);
    }
  }


  // A shortcut: look ahead and if this is a open or close tag
  // in lowercase with no spaces and no attributes, just emit it now.
  function emitSimpleTag() {
    SIMPLETAG.lastIndex = nextchar;
    var matched = SIMPLETAG.exec(chars);
    if (!matched) throw new Error("should never happen");
    var tagname = matched[2];
    if (!tagname) return false;
    var endtag = matched[1];
    if (endtag) {
      nextchar += (tagname.length+2);
      insertToken(ENDTAG, tagname);
    }
    else {
      nextchar += (tagname.length+1);
      lasttagname = tagname;
      insertToken(TAG, tagname, NOATTRS);
    }
    return true;
  }

  function emitSelfClosingTag() {
    if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);
    else {
      insertToken(TAG, tagnamebuf, attributes, true);
    }
  }

  function emitDoctype() {
    insertToken(DOCTYPE,
          buf2str(doctypenamebuf),
          doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined,
          doctypesystembuf ? buf2str(doctypesystembuf) : undefined);
  }

  function emitEOF() {
    flushText();
    parser(EOF); // EOF never goes to insertForeignContent()
    doc.modclock = 1; // Start tracking modifications
  }

  // Insert a token, either using the current parser insertion mode
  // (for HTML stuff) or using the insertForeignToken() method.
  var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {
    flushText();
    var current = stack.top;

    if (!current || current.namespaceURI === NAMESPACE.HTML) {
      // This is the common case
      parser(t, value, arg3, arg4);
    }
    else {
      // Otherwise we may need to insert this token as foreign content
      if (t !== TAG && t !== TEXT) {
        insertForeignToken(t, value, arg3, arg4);
      }
      else {
        // But in some cases we treat it as regular content
        if ((isMathmlTextIntegrationPoint(current) &&
           (t === TEXT ||
            (t === TAG &&
             value !== "mglyph" && value !== "malignmark"))) ||
          (t === TAG &&
           value === "svg" &&
           current.namespaceURI === NAMESPACE.MATHML &&
           current.localName === "annotation-xml") ||
          isHTMLIntegrationPoint(current)) {

          // XXX: the text_integration_mode stuff is an
          // attempted bug workaround of mine
          text_integration_mode = true;
          parser(t, value, arg3, arg4);
          text_integration_mode = false;
        }
        // Otherwise it is foreign content
        else {
          insertForeignToken(t, value, arg3, arg4);
        }
      }
    }
  };


  /***
   * Tree building utility functions
   */
  function insertComment(data) {
    var parent = stack.top;
    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {
      fosterParent(function(doc) { return doc.createComment(data); });
    } else {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      if (parent instanceof impl.HTMLTemplateElement) {
        parent = parent.content;
      }
      parent._appendChild(parent.ownerDocument.createComment(data));
    }
  }

  function insertText(s) {
    var parent = stack.top;
    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {
      fosterParent(function(doc) { return doc.createTextNode(s); });
    } else {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      if (parent instanceof impl.HTMLTemplateElement) {
        parent = parent.content;
      }
      // "If there is a Text node immediately before the adjusted insertion
      // location, then append data to that Text node's data."
      var lastChild = parent.lastChild;
      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {
        lastChild.appendData(s);
      } else {
        parent._appendChild(parent.ownerDocument.createTextNode(s));
      }
    }
  }

  function createHTMLElt(doc, name, attrs) {
    // Create the element this way, rather than with
    // doc.createElement because createElement() does error
    // checking on the element name that we need to avoid here.
    var elt = html.createElement(doc, name, null);

    if (attrs) {
      for(var i = 0, n = attrs.length; i < n; i++) {
        // Use the _ version to avoid testing the validity
        // of the attribute name
        elt._setAttribute(attrs[i][0], attrs[i][1]);
      }
    }
    // XXX
    // If the element is a resettable form element,
    // run its reset algorithm now
    // XXX
    // handle case where form-element-pointer is not null
    return elt;
  }

  // The in_table insertion mode turns on this flag, and that makes
  // insertHTMLElement use the foster parenting algorithm for elements
  // tags inside a table
  var foster_parent_mode = false;

  function insertHTMLElement(name, attrs) {
    var elt = insertElement(function(doc) {
      return createHTMLElt(doc, name, attrs);
    });

    // XXX
    // If this is a form element, set its form attribute property here
    if (isA(elt, formassociatedSet)) {
      elt._form = form_element_pointer;
    }

    return elt;
  }

  // Insert the element into the open element or foster parent it
  function insertElement(eltFunc) {
    var elt;
    if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {
      elt = fosterParent(eltFunc);
    }
    else if (stack.top instanceof impl.HTMLTemplateElement) {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      elt = eltFunc(stack.top.content.ownerDocument);
      stack.top.content._appendChild(elt);
    } else {
      elt = eltFunc(stack.top.ownerDocument);
      stack.top._appendChild(elt);
    }

    stack.push(elt);
    return elt;
  }

  function insertForeignElement(name, attrs, ns) {
    return insertElement(function(doc) {
      var elt = doc.createElementNS(ns, name);
      if (attrs) {
        for(var i = 0, n = attrs.length; i < n; i++) {
          var attr = attrs[i];
          if (attr.length === 2)
            elt._setAttribute(attr[0], attr[1]);
          else {
            elt._setAttributeNS(attr[2], attr[0], attr[1]);
          }
        }
      }
      return elt;
    });
  }

  function lastElementOfType(type) {
    for(var i = stack.elements.length-1; i >= 0; i--) {
      if (stack.elements[i] instanceof type) {
        return i;
      }
    }
    return -1;
  }

  function fosterParent(eltFunc) {
    var parent, before, lastTable = -1, lastTemplate = -1, elt;

    lastTable = lastElementOfType(impl.HTMLTableElement);
    lastTemplate = lastElementOfType(impl.HTMLTemplateElement);

    if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {
      parent = stack.elements[lastTemplate];
    } else if (lastTable >= 0) {
      parent = stack.elements[lastTable].parentNode;
      if (parent) {
        before = stack.elements[lastTable];
      } else {
        parent = stack.elements[lastTable - 1];
      }
    }
    if (!parent) parent = stack.elements[0]; // the `html` element.

    // "If the adjusted insertion location is inside a template element,
    // let it instead be inside the template element's template contents"
    if (parent instanceof impl.HTMLTemplateElement) {
      parent = parent.content;
    }
    // Create element in the appropriate document.
    elt = eltFunc(parent.ownerDocument);

    if (elt.nodeType === Node.TEXT_NODE) {
      var prev;
      if (before) prev = before.previousSibling;
      else prev = parent.lastChild;
      if (prev && prev.nodeType === Node.TEXT_NODE) {
        prev.appendData(elt.data);
        return elt;
      }
    }
    if (before)
      parent.insertBefore(elt, before);
    else
      parent._appendChild(elt);
    return elt;
  }


  function resetInsertionMode() {
    var last = false;
    for(var i = stack.elements.length-1; i >= 0; i--) {
      var node = stack.elements[i];
      if (i === 0) {
        last = true;
        if (fragment) {
          node = fragmentContext;
        }
      }
      if (node.namespaceURI === NAMESPACE.HTML) {
        var tag = node.localName;
        switch(tag) {
        case "select":
          for(var j = i; j > 0; ) {
            var ancestor = stack.elements[--j];
            if (ancestor instanceof impl.HTMLTemplateElement) {
              break;
            } else if (ancestor instanceof impl.HTMLTableElement) {
              parser = in_select_in_table_mode;
              return;
            }
          }
          parser = in_select_mode;
          return;
        case "tr":
          parser = in_row_mode;
          return;
        case "tbody":
        case "tfoot":
        case "thead":
          parser = in_table_body_mode;
          return;
        case "caption":
          parser = in_caption_mode;
          return;
        case "colgroup":
          parser = in_column_group_mode;
          return;
        case "table":
          parser = in_table_mode;
          return;
        case "template":
          parser = templateInsertionModes[templateInsertionModes.length-1];
          return;
        case "body":
          parser = in_body_mode;
          return;
        case "frameset":
          parser = in_frameset_mode;
          return;
        case "html":
          if (head_element_pointer === null) {
            parser = before_head_mode;
          } else {
            parser = after_head_mode;
          }
          return;
        default:
          if (!last) {
            if (tag === "head") {
              parser = in_head_mode;
              return;
            }
            if (tag === "td" || tag === "th") {
              parser = in_cell_mode;
              return;
            }
          }
        }
      }
      if (last) {
        parser = in_body_mode;
        return;
      }
    }
  }


  function parseRawText(name, attrs) {
    insertHTMLElement(name, attrs);
    tokenizer = rawtext_state;
    originalInsertionMode = parser;
    parser = text_mode;
  }

  function parseRCDATA(name, attrs) {
    insertHTMLElement(name, attrs);
    tokenizer = rcdata_state;
    originalInsertionMode = parser;
    parser = text_mode;
  }

  // Make a copy of element i on the list of active formatting
  // elements, using its original attributes, not current
  // attributes (which may have been modified by a script)
  function afeclone(doc, i) {
    return {
      elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),
      attrs: afe.attrs[i],
    };
  }


  function afereconstruct() {
    if (afe.list.length === 0) return;
    var entry = afe.list[afe.list.length-1];
    // If the last is a marker , do nothing
    if (entry === afe.MARKER) return;
    // Or if it is an open element, do nothing
    if (stack.elements.lastIndexOf(entry) !== -1) return;

    // Loop backward through the list until we find a marker or an
    // open element, and then move forward one from there.
    for(var i = afe.list.length-2; i >= 0; i--) {
      entry = afe.list[i];
      if (entry === afe.MARKER) break;
      if (stack.elements.lastIndexOf(entry) !== -1) break;
    }

    // Now loop forward, starting from the element after the current
    // one, recreating formatting elements and pushing them back onto
    // the list of open elements
    for(i = i+1; i < afe.list.length; i++) {
      var newelt = insertElement(function(doc) { return afeclone(doc, i).elt; });
      afe.list[i] = newelt;
    }
  }

  // Used by the adoptionAgency() function
  var BOOKMARK = {localName:"BM"};

  function adoptionAgency(tag) {
    // If the current node is an HTML element whose tag name is subject,
    // and the current node is not in the list of active formatting
    // elements, then pop the current node off the stack of open
    // elements and abort these steps.
    if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {
      stack.pop();
      return true; // no more handling required
    }

    // Let outer loop counter be zero.
    var outer = 0;

    // Outer loop: If outer loop counter is greater than or
    // equal to eight, then abort these steps.
    while(outer < 8) {
      // Increment outer loop counter by one.
      outer++;

      // Let the formatting element be the last element in the list
      // of active formatting elements that: is between the end of
      // the list and the last scope marker in the list, if any, or
      // the start of the list otherwise, and has the same tag name
      // as the token.
      var fmtelt = afe.findElementByTag(tag);

      // If there is no such node, then abort these steps and instead
      // act as described in the "any other end tag" entry below.
      if (!fmtelt) {
        return false; // false means handle by the default case
      }

      // Otherwise, if there is such a node, but that node is not in
      // the stack of open elements, then this is a parse error;
      // remove the element from the list, and abort these steps.
      var index = stack.elements.lastIndexOf(fmtelt);
      if (index === -1) {
        afe.remove(fmtelt);
        return true;   // true means no more handling required
      }

      // Otherwise, if there is such a node, and that node is also in
      // the stack of open elements, but the element is not in scope,
      // then this is a parse error; ignore the token, and abort
      // these steps.
      if (!stack.elementInScope(fmtelt)) {
        return true;
      }

      // Let the furthest block be the topmost node in the stack of
      // open elements that is lower in the stack than the formatting
      // element, and is an element in the special category. There
      // might not be one.
      var furthestblock = null, furthestblockindex;
      for(var i = index+1; i < stack.elements.length; i++) {
        if (isA(stack.elements[i], specialSet)) {
          furthestblock = stack.elements[i];
          furthestblockindex = i;
          break;
        }
      }

      // If there is no furthest block, then the UA must skip the
      // subsequent steps and instead just pop all the nodes from the
      // bottom of the stack of open elements, from the current node
      // up to and including the formatting element, and remove the
      // formatting element from the list of active formatting
      // elements.
      if (!furthestblock) {
        stack.popElement(fmtelt);
        afe.remove(fmtelt);
        return true;
      }
      else {
        // Let the common ancestor be the element immediately above
        // the formatting element in the stack of open elements.
        var ancestor = stack.elements[index-1];

        // Let a bookmark note the position of the formatting
        // element in the list of active formatting elements
        // relative to the elements on either side of it in the
        // list.
        afe.insertAfter(fmtelt, BOOKMARK);

        // Let node and last node be the furthest block.
        var node = furthestblock;
        var lastnode = furthestblock;
        var nodeindex = furthestblockindex;
        var nodeafeindex;

        // Let inner loop counter be zero.
        var inner = 0;

        while (true) {

          // Increment inner loop counter by one.
          inner++;

          // Let node be the element immediately above node in
          // the stack of open elements, or if node is no longer
          // in the stack of open elements (e.g. because it got
          // removed by this algorithm), the element that was
          // immediately above node in the stack of open elements
          // before node was removed.
          node = stack.elements[--nodeindex];

          // If node is the formatting element, then go
          // to the next step in the overall algorithm.
          if (node === fmtelt) break;

          // If the inner loop counter is greater than three and node
          // is in the list of active formatting elements, then remove
          // node from the list of active formatting elements.
          nodeafeindex = afe.indexOf(node);
          if (inner > 3 && nodeafeindex !== -1) {
            afe.remove(node);
            nodeafeindex = -1;
          }

          // If node is not in the list of active formatting
          // elements, then remove node from the stack of open
          // elements and then go back to the step labeled inner
          // loop.
          if (nodeafeindex === -1) {
            stack.removeElement(node);
            continue;
          }

          // Create an element for the token for which the
          // element node was created with common ancestor as
          // the intended parent, replace the entry for node
          // in the list of active formatting elements with an
          // entry for the new element, replace the entry for
          // node in the stack of open elements with an entry for
          // the new element, and let node be the new element.
          var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);
          afe.replace(node, newelt.elt, newelt.attrs);
          stack.elements[nodeindex] = newelt.elt;
          node = newelt.elt;

          // If last node is the furthest block, then move the
          // aforementioned bookmark to be immediately after the
          // new node in the list of active formatting elements.
          if (lastnode === furthestblock) {
            afe.remove(BOOKMARK);
            afe.insertAfter(newelt.elt, BOOKMARK);
          }

          // Insert last node into node, first removing it from
          // its previous parent node if any.
          node._appendChild(lastnode);

          // Let last node be node.
          lastnode = node;
        }

        // If the common ancestor node is a table, tbody, tfoot,
        // thead, or tr element, then, foster parent whatever last
        // node ended up being in the previous step, first removing
        // it from its previous parent node if any.
        if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {
          fosterParent(function() { return lastnode; });
        }
        // Otherwise, append whatever last node ended up being in
        // the previous step to the common ancestor node, first
        // removing it from its previous parent node if any.
        else if (ancestor instanceof impl.HTMLTemplateElement) {
          ancestor.content._appendChild(lastnode);
        } else {
          ancestor._appendChild(lastnode);
        }

        // Create an element for the token for which the
        // formatting element was created, with furthest block
        // as the intended parent.
        var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt));

        // Take all of the child nodes of the furthest block and
        // append them to the element created in the last step.
        while(furthestblock.hasChildNodes()) {
          newelt2.elt._appendChild(furthestblock.firstChild);
        }

        // Append that new element to the furthest block.
        furthestblock._appendChild(newelt2.elt);

        // Remove the formatting element from the list of active
        // formatting elements, and insert the new element into the
        // list of active formatting elements at the position of
        // the aforementioned bookmark.
        afe.remove(fmtelt);
        afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs);

        // Remove the formatting element from the stack of open
        // elements, and insert the new element into the stack of
        // open elements immediately below the position of the
        // furthest block in that stack.
        stack.removeElement(fmtelt);
        var pos = stack.elements.lastIndexOf(furthestblock);
        stack.elements.splice(pos+1, 0, newelt2.elt);
      }
    }

    return true;
  }

  // We do this when we get /script in in_text_mode
  function handleScriptEnd() {
    // XXX:
    // This is just a stub implementation right now and doesn't run scripts.
    // Getting this method right involves the event loop, URL resolution
    // script fetching etc. For now I just want to be able to parse
    // documents and test the parser.

    //var script = stack.top;
    stack.pop();
    parser = originalInsertionMode;
    //script._prepare();
    return;

    // XXX: here is what this method is supposed to do

    // Provide a stable state.

    // Let script be the current node (which will be a script
    // element).

    // Pop the current node off the stack of open elements.

    // Switch the insertion mode to the original insertion mode.

    // Let the old insertion point have the same value as the current
    // insertion point. Let the insertion point be just before the
    // next input character.

    // Increment the parser's script nesting level by one.

    // Prepare the script. This might cause some script to execute,
    // which might cause new characters to be inserted into the
    // tokenizer, and might cause the tokenizer to output more tokens,
    // resulting in a reentrant invocation of the parser.

    // Decrement the parser's script nesting level by one. If the
    // parser's script nesting level is zero, then set the parser
    // pause flag to false.

    // Let the insertion point have the value of the old insertion
    // point. (In other words, restore the insertion point to its
    // previous value. This value might be the "undefined" value.)

    // At this stage, if there is a pending parsing-blocking script,
    // then:

    // If the script nesting level is not zero:

    //   Set the parser pause flag to true, and abort the processing
    //   of any nested invocations of the tokenizer, yielding
    //   control back to the caller. (Tokenization will resume when
    //   the caller returns to the "outer" tree construction stage.)

    //   The tree construction stage of this particular parser is
    //   being called reentrantly, say from a call to
    //   document.write().

    // Otherwise:

    //     Run these steps:

    //       Let the script be the pending parsing-blocking
    //       script. There is no longer a pending
    //       parsing-blocking script.

    //       Block the tokenizer for this instance of the HTML
    //       parser, such that the event loop will not run tasks
    //       that invoke the tokenizer.

    //       If the parser's Document has a style sheet that is
    //       blocking scripts or the script's "ready to be
    //       parser-executed" flag is not set: spin the event
    //       loop until the parser's Document has no style sheet
    //       that is blocking scripts and the script's "ready to
    //       be parser-executed" flag is set.

    //       Unblock the tokenizer for this instance of the HTML
    //       parser, such that tasks that invoke the tokenizer
    //       can again be run.

    //       Let the insertion point be just before the next
    //       input character.

    //       Increment the parser's script nesting level by one
    //       (it should be zero before this step, so this sets
    //       it to one).

    //       Execute the script.

    //       Decrement the parser's script nesting level by
    //       one. If the parser's script nesting level is zero
    //       (which it always should be at this point), then set
    //       the parser pause flag to false.

    //       Let the insertion point be undefined again.

    //       If there is once again a pending parsing-blocking
    //       script, then repeat these steps from step 1.


  }

  function stopParsing() {
    // XXX This is just a temporary implementation to get the parser working.
    // A full implementation involves scripts and events and the event loop.

    // Remove the link from document to parser.
    // This is instead of "set the insertion point to undefined".
    // It means that document.write() can't write into the doc anymore.
    delete doc._parser;

    stack.elements.length = 0; // pop everything off

    // If there is a window object associated with the document
    // then trigger an load event on it
    if (doc.defaultView) {
      doc.defaultView.dispatchEvent(new impl.Event("load",{}));
    }

  }

  /****
   * Tokenizer states
   */

  /**
   * This file was partially mechanically generated from
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html
   *
   * After mechanical conversion, it was further converted from
   * prose to JS by hand, but the intent is that it is a very
   * faithful rendering of the HTML tokenization spec in
   * JavaScript.
   *
   * It is not a goal of this tokenizer to detect or report
   * parse errors.
   *
   * XXX The tokenizer is supposed to work with straight UTF32
   * codepoints. But I don't think it has any dependencies on
   * any character outside of the BMP so I think it is safe to
   * pass it UTF16 characters. I don't think it will ever change
   * state in the middle of a surrogate pair.
   */

  /*
   * Each state is represented by a function.  For most states, the
   * scanner simply passes the next character (as an integer
   * codepoint) to the current state function and automatically
   * consumes the character.  If the state function can't process
   * the character it can call pushback() to push it back to the
   * scanner.
   *
   * Some states require lookahead, though.  If a state function has
   * a lookahead property, then it is invoked differently.  In this
   * case, the scanner invokes the function with 3 arguments: 1) the
   * next codepoint 2) a string of lookahead text 3) a boolean that
   * is true if the lookahead goes all the way to the EOF. (XXX
   * actually maybe this third is not necessary... the lookahead
   * could just include \uFFFF?)
   *
   * If the lookahead property of a state function is an integer, it
   * specifies the number of characters required. If it is a string,
   * then the scanner will scan for that string and return all
   * characters up to and including that sequence, or up to EOF.  If
   * the lookahead property is a regexp, then the scanner will match
   * the regexp at the current point and return the matching string.
   *
   * States that require lookahead are responsible for explicitly
   * consuming the characters they process. They do this by
   * incrementing nextchar by the number of processed characters.
   */
  function reconsume(c, new_state) {
    tokenizer = new_state;
    nextchar--; // pushback
  }

  function data_state(c) {
    switch(c) {
    case 0x0026: // AMPERSAND
      return_state = data_state;
      tokenizer = character_reference_state;
      break;
    case 0x003C: // LESS-THAN SIGN
      if (emitSimpleTag()) // Shortcut for <p>, <dl>, </div> etc.
        break;
      tokenizer = tag_open_state;
      break;
    case 0x0000: // NULL
      // Usually null characters emitted by the tokenizer will be
      // ignored by the tree builder, but sometimes they'll be
      // converted to \uFFFD.  I don't want to have the search every
      // string emitted to replace NULs, so I'll set a flag
      // if I've emitted a NUL.
      textrun.push(c);
      textIncludesNUL = true;
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      // Instead of just pushing a single character and then
      // coming back to the very same place, lookahead and
      // emit everything we can at once.
      /*jshint -W030 */
      emitCharsWhile(DATATEXT) || textrun.push(c);
      break;
    }
  }

  function rcdata_state(c) {
    // Save the open tag so we can find a matching close tag
    switch(c) {
    case 0x0026: // AMPERSAND
      return_state = rcdata_state;
      tokenizer = character_reference_state;
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = rcdata_less_than_sign_state;
      break;
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      textIncludesNUL = true;
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      textrun.push(c);
      break;
    }
  }

  function rawtext_state(c) {
    switch(c) {
    case 0x003C: // LESS-THAN SIGN
      tokenizer = rawtext_less_than_sign_state;
      break;
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      /*jshint -W030 */
      emitCharsWhile(RAWTEXT) || textrun.push(c);
      break;
    }
  }

  function script_data_state(c) {
    switch(c) {
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_less_than_sign_state;
      break;
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      /*jshint -W030 */
      emitCharsWhile(RAWTEXT) || textrun.push(c);
      break;
    }
  }

  function plaintext_state(c) {
    switch(c) {
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      /*jshint -W030 */
      emitCharsWhile(PLAINTEXT) || textrun.push(c);
      break;
    }
  }

  function tag_open_state(c) {
    switch(c) {
    case 0x0021: // EXCLAMATION MARK
      tokenizer = markup_declaration_open_state;
      break;
    case 0x002F: // SOLIDUS
      tokenizer = end_tag_open_state;
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginTagName();
      reconsume(c, tag_name_state);
      break;
    case 0x003F: // QUESTION MARK
      reconsume(c, bogus_comment_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, data_state);
      break;
    }
  }

  function end_tag_open_state(c) {
    switch(c) {
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginEndTagName();
      reconsume(c, tag_name_state);
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      break;
    case -1: // EOF
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x002F); // SOLIDUS
      emitEOF();
      break;
    default:
      reconsume(c, bogus_comment_state);
      break;
    }
  }

  function tag_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = before_attribute_name_state;
      break;
    case 0x002F: // SOLIDUS
      tokenizer = self_closing_start_tag_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitTag();
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      tagnamebuf += String.fromCharCode(c + 0x0020);
      break;
    case 0x0000: // NULL
      tagnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      tagnamebuf += getMatchingChars(TAGNAME);
      break;
    }
  }

  function rcdata_less_than_sign_state(c) {
    /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */
    if (c === 0x002F) {  // SOLIDUS
      beginTempBuf();
      tokenizer = rcdata_end_tag_open_state;
    }
    else {
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, rcdata_state);
    }
  }

  function rcdata_end_tag_open_state(c) {
    /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */
    switch(c) {
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginEndTagName();
      reconsume(c, rcdata_end_tag_name_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x002F); // SOLIDUS
      reconsume(c, rcdata_state);
      break;
    }
  }

  function rcdata_end_tag_name_state(c) {
    /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = before_attribute_name_state;
        return;
      }
      break;
    case 0x002F: // SOLIDUS
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = self_closing_start_tag_state;
        return;
      }
      break;
    case 0x003E: // GREATER-THAN SIGN
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = data_state;
        emitTag();
        return;
      }
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:

      tagnamebuf += String.fromCharCode(c + 0x0020);
      tempbuf.push(c);
      return;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:

      tagnamebuf += String.fromCharCode(c);
      tempbuf.push(c);
      return;
    default:
      break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun, tempbuf);
    reconsume(c, rcdata_state);
  }

  function rawtext_less_than_sign_state(c) {
    /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g
     */
    if (c === 0x002F) { // SOLIDUS
      beginTempBuf();
      tokenizer = rawtext_end_tag_open_state;
    }
    else {
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, rawtext_state);
    }
  }

  function rawtext_end_tag_open_state(c) {
    /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */
    switch(c) {
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginEndTagName();
      reconsume(c, rawtext_end_tag_name_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x002F); // SOLIDUS
      reconsume(c, rawtext_state);
      break;
    }
  }

  function rawtext_end_tag_name_state(c) {
    /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = before_attribute_name_state;
        return;
      }
      break;
    case 0x002F: // SOLIDUS
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = self_closing_start_tag_state;
        return;
      }
      break;
    case 0x003E: // GREATER-THAN SIGN
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = data_state;
        emitTag();
        return;
      }
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      tagnamebuf += String.fromCharCode(c + 0x0020);
      tempbuf.push(c);
      return;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      tagnamebuf += String.fromCharCode(c);
      tempbuf.push(c);
      return;
    default:
      break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun,tempbuf);
    reconsume(c, rawtext_state);
  }

  function script_data_less_than_sign_state(c) {
    switch(c) {
    case 0x002F: // SOLIDUS
      beginTempBuf();
      tokenizer = script_data_end_tag_open_state;
      break;
    case 0x0021: // EXCLAMATION MARK
      tokenizer = script_data_escape_start_state;
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x0021); // EXCLAMATION MARK
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, script_data_state);
      break;
    }
  }

  function script_data_end_tag_open_state(c) {
    /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */
    switch(c) {
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginEndTagName();
      reconsume(c, script_data_end_tag_name_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x002F); // SOLIDUS
      reconsume(c, script_data_state);
      break;
    }
  }

  function script_data_end_tag_name_state(c) {
    /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = before_attribute_name_state;
        return;
      }
      break;
    case 0x002F: // SOLIDUS
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = self_closing_start_tag_state;
        return;
      }
      break;
    case 0x003E: // GREATER-THAN SIGN
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = data_state;
        emitTag();
        return;
      }
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:

      tagnamebuf += String.fromCharCode(c + 0x0020);
      tempbuf.push(c);
      return;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:

      tagnamebuf += String.fromCharCode(c);
      tempbuf.push(c);
      return;
    default:
      break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun,tempbuf);
    reconsume(c, script_data_state);
  }

  function script_data_escape_start_state(c) {
    if (c === 0x002D) { // HYPHEN-MINUS
      tokenizer = script_data_escape_start_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
    }
    else {
      reconsume(c, script_data_state);
    }
  }

  function script_data_escape_start_dash_state(c) {
    if (c === 0x002D) { // HYPHEN-MINUS
      tokenizer = script_data_escaped_dash_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
    }
    else {
      reconsume(c, script_data_state);
    }
  }

  function script_data_escaped_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = script_data_escaped_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_escaped_less_than_sign_state;
      break;
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      textrun.push(c);
      break;
    }
  }

  function script_data_escaped_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = script_data_escaped_dash_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_escaped_less_than_sign_state;
      break;
    case 0x0000: // NULL
      tokenizer = script_data_escaped_state;
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      tokenizer = script_data_escaped_state;
      textrun.push(c);
      break;
    }
  }

  function script_data_escaped_dash_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_escaped_less_than_sign_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = script_data_state;
      textrun.push(0x003E); // GREATER-THAN SIGN
      break;
    case 0x0000: // NULL
      tokenizer = script_data_escaped_state;
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      tokenizer = script_data_escaped_state;
      textrun.push(c);
      break;
    }
  }

  function script_data_escaped_less_than_sign_state(c) {
    switch(c) {
    case 0x002F: // SOLIDUS
      beginTempBuf();
      tokenizer = script_data_escaped_end_tag_open_state;
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginTempBuf();
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, script_data_double_escape_start_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, script_data_escaped_state);
      break;
    }
  }

  function script_data_escaped_end_tag_open_state(c) {
    switch(c) {
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      beginEndTagName();
      reconsume(c, script_data_escaped_end_tag_name_state);
      break;
    default:
      textrun.push(0x003C); // LESS-THAN SIGN
      textrun.push(0x002F); // SOLIDUS
      reconsume(c, script_data_escaped_state);
      break;
    }
  }

  function script_data_escaped_end_tag_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = before_attribute_name_state;
        return;
      }
      break;
    case 0x002F: // SOLIDUS
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = self_closing_start_tag_state;
        return;
      }
      break;
    case 0x003E: // GREATER-THAN SIGN
      if (appropriateEndTag(tagnamebuf)) {
        tokenizer = data_state;
        emitTag();
        return;
      }
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      tagnamebuf += String.fromCharCode(c + 0x0020);
      tempbuf.push(c);
      return;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      tagnamebuf += String.fromCharCode(c);
      tempbuf.push(c);
      return;
    default:
      break;
    }

    // We get here in the default case, and if the closing tagname
    // is not an appropriate tagname.
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun,tempbuf);
    reconsume(c, script_data_escaped_state);
  }

  function script_data_double_escape_start_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
    case 0x002F: // SOLIDUS
    case 0x003E: // GREATER-THAN SIGN
      if (buf2str(tempbuf) === "script") {
        tokenizer = script_data_double_escaped_state;
      }
      else {
        tokenizer = script_data_escaped_state;
      }
      textrun.push(c);
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      tempbuf.push(c + 0x0020);
      textrun.push(c);
      break;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      tempbuf.push(c);
      textrun.push(c);
      break;
    default:
      reconsume(c, script_data_escaped_state);
      break;
    }
  }

  function script_data_double_escaped_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = script_data_double_escaped_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_double_escaped_less_than_sign_state;
      textrun.push(0x003C); // LESS-THAN SIGN
      break;
    case 0x0000: // NULL
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      textrun.push(c);
      break;
    }
  }

  function script_data_double_escaped_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = script_data_double_escaped_dash_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_double_escaped_less_than_sign_state;
      textrun.push(0x003C); // LESS-THAN SIGN
      break;
    case 0x0000: // NULL
      tokenizer = script_data_double_escaped_state;
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      tokenizer = script_data_double_escaped_state;
      textrun.push(c);
      break;
    }
  }

  function script_data_double_escaped_dash_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      textrun.push(0x002D); // HYPHEN-MINUS
      break;
    case 0x003C: // LESS-THAN SIGN
      tokenizer = script_data_double_escaped_less_than_sign_state;
      textrun.push(0x003C); // LESS-THAN SIGN
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = script_data_state;
      textrun.push(0x003E); // GREATER-THAN SIGN
      break;
    case 0x0000: // NULL
      tokenizer = script_data_double_escaped_state;
      textrun.push(0xFFFD); // REPLACEMENT CHARACTER
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      tokenizer = script_data_double_escaped_state;
      textrun.push(c);
      break;
    }
  }

  function script_data_double_escaped_less_than_sign_state(c) {
    if (c === 0x002F) { // SOLIDUS
      beginTempBuf();
      tokenizer = script_data_double_escape_end_state;
      textrun.push(0x002F); // SOLIDUS
    }
    else {
      reconsume(c, script_data_double_escaped_state);
    }
  }

  function script_data_double_escape_end_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
    case 0x002F: // SOLIDUS
    case 0x003E: // GREATER-THAN SIGN
      if (buf2str(tempbuf) === "script") {
        tokenizer = script_data_escaped_state;
      }
      else {
        tokenizer = script_data_double_escaped_state;
      }
      textrun.push(c);
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      tempbuf.push(c + 0x0020);
      textrun.push(c);
      break;
    case 0x0061:  // [a-z]
    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:
    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:
    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:
    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:
    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:
      tempbuf.push(c);
      textrun.push(c);
      break;
    default:
      reconsume(c, script_data_double_escaped_state);
      break;
    }
  }

  function before_attribute_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says "reconsume in
    // the after attribute name state", but in our implementation that
    // state always has an active attribute in attrnamebuf.  Just clone
    // the rules here, without the addAttribute business.
    case 0x002F: // SOLIDUS
      tokenizer = self_closing_start_tag_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitTag();
      break;
    case -1: // EOF
      emitEOF();
      break;
    case 0x003D: // EQUALS SIGN
      beginAttrName();
      attrnamebuf += String.fromCharCode(c);
      tokenizer = attribute_name_state;
      break;
    default:
      if (handleSimpleAttribute()) break;
      beginAttrName();
      reconsume(c, attribute_name_state);
      break;
    }
  }

  // beginAttrName() must have been called before this point
  // There is an active attribute in attrnamebuf (but not attrvaluebuf)
  function attribute_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
    case 0x002F: // SOLIDUS
    case 0x003E: // GREATER-THAN SIGN
    case -1: // EOF
      reconsume(c, after_attribute_name_state);
      break;
    case 0x003D: // EQUALS SIGN
      tokenizer = before_attribute_value_state;
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      attrnamebuf += String.fromCharCode(c + 0x0020);
      break;
    case 0x0000: // NULL
      attrnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case 0x0022: // QUOTATION MARK
    case 0x0027: // APOSTROPHE
    case 0x003C: // LESS-THAN SIGN
      /* falls through */
    default:
      attrnamebuf += getMatchingChars(ATTRNAME);
      break;
    }
  }

  // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.
  function after_attribute_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    case 0x002F: // SOLIDUS
      // Keep in sync with before_attribute_name_state.
      addAttribute(attrnamebuf);
      tokenizer = self_closing_start_tag_state;
      break;
    case 0x003D: // EQUALS SIGN
      tokenizer = before_attribute_value_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      // Keep in sync with before_attribute_name_state.
      tokenizer = data_state;
      addAttribute(attrnamebuf);
      emitTag();
      break;
    case -1: // EOF
      // Keep in sync with before_attribute_name_state.
      addAttribute(attrnamebuf);
      emitEOF();
      break;
    default:
      addAttribute(attrnamebuf);
      beginAttrName();
      reconsume(c, attribute_name_state);
      break;
    }
  }

  function before_attribute_value_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    case 0x0022: // QUOTATION MARK
      beginAttrValue();
      tokenizer = attribute_value_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginAttrValue();
      tokenizer = attribute_value_single_quoted_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      /* falls through */
    default:
      beginAttrValue();
      reconsume(c, attribute_value_unquoted_state);
      break;
    }
  }

  function attribute_value_double_quoted_state(c) {
    switch(c) {
    case 0x0022: // QUOTATION MARK
      addAttribute(attrnamebuf, attrvaluebuf);
      tokenizer = after_attribute_value_quoted_state;
      break;
    case 0x0026: // AMPERSAND
      return_state = attribute_value_double_quoted_state;
      tokenizer = character_reference_state;
      break;
    case 0x0000: // NULL
      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      emitEOF();
      break;
    case 0x000A: // LF
      // this could be a converted \r, so don't use getMatchingChars
      attrvaluebuf += String.fromCharCode(c);
      break;
    default:
      attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);
      break;
    }
  }

  function attribute_value_single_quoted_state(c) {
    switch(c) {
    case 0x0027: // APOSTROPHE
      addAttribute(attrnamebuf, attrvaluebuf);
      tokenizer = after_attribute_value_quoted_state;
      break;
    case 0x0026: // AMPERSAND
      return_state = attribute_value_single_quoted_state;
      tokenizer = character_reference_state;
      break;
    case 0x0000: // NULL
      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      emitEOF();
      break;
    case 0x000A: // LF
      // this could be a converted \r, so don't use getMatchingChars
      attrvaluebuf += String.fromCharCode(c);
      break;
    default:
      attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);
      break;
    }
  }

  function attribute_value_unquoted_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      addAttribute(attrnamebuf, attrvaluebuf);
      tokenizer = before_attribute_name_state;
      break;
    case 0x0026: // AMPERSAND
      return_state = attribute_value_unquoted_state;
      tokenizer = character_reference_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      addAttribute(attrnamebuf, attrvaluebuf);
      tokenizer = data_state;
      emitTag();
      break;
    case 0x0000: // NULL
      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      nextchar--; // pushback
      tokenizer = data_state;
      break;
    case 0x0022: // QUOTATION MARK
    case 0x0027: // APOSTROPHE
    case 0x003C: // LESS-THAN SIGN
    case 0x003D: // EQUALS SIGN
    case 0x0060: // GRAVE ACCENT
      /* falls through */
    default:
      attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);
      break;
    }
  }

  function after_attribute_value_quoted_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = before_attribute_name_state;
      break;
    case 0x002F: // SOLIDUS
      tokenizer = self_closing_start_tag_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitTag();
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      reconsume(c, before_attribute_name_state);
      break;
    }
  }

  function self_closing_start_tag_state(c) {
    switch(c) {
    case 0x003E: // GREATER-THAN SIGN
      // Set the <i>self-closing flag</i> of the current tag token.
      tokenizer = data_state;
      emitSelfClosingTag(true);
      break;
    case -1: // EOF
      emitEOF();
      break;
    default:
      reconsume(c, before_attribute_name_state);
      break;
    }
  }

  function bogus_comment_state(c, lookahead, eof) {
    var len = lookahead.length;

    if (eof) {
      nextchar += len-1; // don't consume the eof
    }
    else {
      nextchar += len;
    }

    var comment = lookahead.substring(0, len-1);

    comment = comment.replace(/\u0000/g,"\uFFFD");
    comment = comment.replace(/\u000D\u000A/g,"\u000A");
    comment = comment.replace(/\u000D/g,"\u000A");

    insertToken(COMMENT, comment);
    tokenizer = data_state;
  }
  bogus_comment_state.lookahead = ">";

  function markup_declaration_open_state(c, lookahead, eof) {
    if (lookahead[0] === "-" && lookahead[1] === "-") {
      nextchar += 2;
      beginComment();
      tokenizer = comment_start_state;
      return;
    }

    if (lookahead.toUpperCase() === "DOCTYPE") {
      nextchar += 7;
      tokenizer = doctype_state;
    }
    else if (lookahead === "[CDATA[" && cdataAllowed()) {
      nextchar += 7;
      tokenizer = cdata_section_state;
    }
    else {
      tokenizer = bogus_comment_state;
    }
  }
  markup_declaration_open_state.lookahead = 7;

  function comment_start_state(c) {
    beginComment();
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_start_dash_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      insertToken(COMMENT, buf2str(commentbuf));
      break; /* see comment in comment end state */
    default:
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_start_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_end_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      insertToken(COMMENT, buf2str(commentbuf));
      break;
    case -1: // EOF
      insertToken(COMMENT, buf2str(commentbuf));
      emitEOF();
      break; /* see comment in comment end state */
    default:
      commentbuf.push(0x002D /* HYPHEN-MINUS */);
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_state(c) {
    switch(c) {
    case 0x003C: // LESS-THAN SIGN
      commentbuf.push(c);
      tokenizer = comment_less_than_sign_state;
      break;
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_end_dash_state;
      break;
    case 0x0000: // NULL
      commentbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      insertToken(COMMENT, buf2str(commentbuf));
      emitEOF();
      break; /* see comment in comment end state */
    default:
      commentbuf.push(c);
      break;
    }
  }

  function comment_less_than_sign_state(c) {
    switch(c) {
    case 0x0021: // EXCLAMATION MARK
      commentbuf.push(c);
      tokenizer = comment_less_than_sign_bang_state;
      break;
    case 0x003C: // LESS-THAN SIGN
      commentbuf.push(c);
      break;
    default:
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_less_than_sign_bang_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_less_than_sign_bang_dash_state;
      break;
    default:
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_less_than_sign_bang_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_less_than_sign_bang_dash_dash_state;
      break;
    default:
      reconsume(c, comment_end_dash_state);
      break;
    }
  }

  function comment_less_than_sign_bang_dash_dash_state(c) {
    switch(c) {
    case 0x003E: // GREATER-THAN SIGN
    case -1: // EOF
      reconsume(c, comment_end_state);
      break;
    default:
      // parse error
      reconsume(c, comment_end_state);
      break;
    }
  }

  function comment_end_dash_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      tokenizer = comment_end_state;
      break;
    case -1: // EOF
      insertToken(COMMENT, buf2str(commentbuf));
      emitEOF();
      break; /* see comment in comment end state */
    default:
      commentbuf.push(0x002D /* HYPHEN-MINUS */);
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_end_state(c) {
    switch(c) {
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      insertToken(COMMENT, buf2str(commentbuf));
      break;
    case 0x0021: // EXCLAMATION MARK
      tokenizer = comment_end_bang_state;
      break;
    case 0x002D: // HYPHEN-MINUS
      commentbuf.push(0x002D);
      break;
    case -1: // EOF
      insertToken(COMMENT, buf2str(commentbuf));
      emitEOF();
      break; /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */
    default:
      commentbuf.push(0x002D);
      commentbuf.push(0x002D);
      reconsume(c, comment_state);
      break;
    }
  }

  function comment_end_bang_state(c) {
    switch(c) {
    case 0x002D: // HYPHEN-MINUS
      commentbuf.push(0x002D);
      commentbuf.push(0x002D);
      commentbuf.push(0x0021);
      tokenizer = comment_end_dash_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      insertToken(COMMENT, buf2str(commentbuf));
      break;
    case -1: // EOF
      insertToken(COMMENT, buf2str(commentbuf));
      emitEOF();
      break; /* see comment in comment end state */
    default:
      commentbuf.push(0x002D);
      commentbuf.push(0x002D);
      commentbuf.push(0x0021);
      reconsume(c, comment_state);
      break;
    }
  }

  function doctype_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = before_doctype_name_state;
      break;
    case -1: // EOF
      beginDoctype();
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      reconsume(c, before_doctype_name_state);
      break;
    }
  }

  function before_doctype_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      beginDoctype();
      doctypenamebuf.push(c + 0x0020);
      tokenizer = doctype_name_state;
      break;
    case 0x0000: // NULL
      beginDoctype();
      doctypenamebuf.push(0xFFFD);
      tokenizer = doctype_name_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      beginDoctype();
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      beginDoctype();
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      beginDoctype();
      doctypenamebuf.push(c);
      tokenizer = doctype_name_state;
      break;
    }
  }

  function doctype_name_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = after_doctype_name_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitDoctype();
      break;
    case 0x0041:  // [A-Z]
    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:
    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:
    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:
    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:
    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:
      doctypenamebuf.push(c + 0x0020);
      break;
    case 0x0000: // NULL
      doctypenamebuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      doctypenamebuf.push(c);
      break;
    }
  }

  function after_doctype_name_state(c, lookahead, eof) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      nextchar += 1;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      nextchar += 1;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      lookahead = lookahead.toUpperCase();
      if (lookahead === "PUBLIC") {
        nextchar += 6;
        tokenizer = after_doctype_public_keyword_state;
      }
      else if (lookahead === "SYSTEM") {
        nextchar += 6;
        tokenizer = after_doctype_system_keyword_state;
      }
      else {
        forcequirks();
        tokenizer = bogus_doctype_state;
      }
      break;
    }
  }
  after_doctype_name_state.lookahead = 6;

  function after_doctype_public_keyword_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = before_doctype_public_identifier_state;
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypePublicId();
      tokenizer = doctype_public_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypePublicId();
      tokenizer = doctype_public_identifier_single_quoted_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function before_doctype_public_identifier_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypePublicId();
      tokenizer = doctype_public_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypePublicId();
      tokenizer = doctype_public_identifier_single_quoted_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function doctype_public_identifier_double_quoted_state(c) {
    switch(c) {
    case 0x0022: // QUOTATION MARK
      tokenizer = after_doctype_public_identifier_state;
      break;
    case 0x0000: // NULL
      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      doctypepublicbuf.push(c);
      break;
    }
  }

  function doctype_public_identifier_single_quoted_state(c) {
    switch(c) {
    case 0x0027: // APOSTROPHE
      tokenizer = after_doctype_public_identifier_state;
      break;
    case 0x0000: // NULL
      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      doctypepublicbuf.push(c);
      break;
    }
  }

  function after_doctype_public_identifier_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = between_doctype_public_and_system_identifiers_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitDoctype();
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_single_quoted_state;
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function between_doctype_public_and_system_identifiers_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE Ignore the character.
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitDoctype();
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_single_quoted_state;
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function after_doctype_system_keyword_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      tokenizer = before_doctype_system_identifier_state;
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_single_quoted_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function before_doctype_system_identifier_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE Ignore the character.
      break;
    case 0x0022: // QUOTATION MARK
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_double_quoted_state;
      break;
    case 0x0027: // APOSTROPHE
      beginDoctypeSystemId();
      tokenizer = doctype_system_identifier_single_quoted_state;
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      forcequirks();
      tokenizer = bogus_doctype_state;
      break;
    }
  }

  function doctype_system_identifier_double_quoted_state(c) {
    switch(c) {
    case 0x0022: // QUOTATION MARK
      tokenizer = after_doctype_system_identifier_state;
      break;
    case 0x0000: // NULL
      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      doctypesystembuf.push(c);
      break;
    }
  }

  function doctype_system_identifier_single_quoted_state(c) {
    switch(c) {
    case 0x0027: // APOSTROPHE
      tokenizer = after_doctype_system_identifier_state;
      break;
    case 0x0000: // NULL
      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
      break;
    case 0x003E: // GREATER-THAN SIGN
      forcequirks();
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      doctypesystembuf.push(c);
      break;
    }
  }

  function after_doctype_system_identifier_state(c) {
    switch(c) {
    case 0x0009: // CHARACTER TABULATION (tab)
    case 0x000A: // LINE FEED (LF)
    case 0x000C: // FORM FEED (FF)
    case 0x0020: // SPACE
      /* Ignore the character. */
      break;
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      forcequirks();
      emitDoctype();
      emitEOF();
      break;
    default:
      tokenizer = bogus_doctype_state;
      /* This does *not* set the DOCTYPE token's force-quirks flag. */
      break;
    }
  }

  function bogus_doctype_state(c) {
    switch(c) {
    case 0x003E: // GREATER-THAN SIGN
      tokenizer = data_state;
      emitDoctype();
      break;
    case -1: // EOF
      emitDoctype();
      emitEOF();
      break;
    default:
      /* Ignore the character. */
      break;
    }
  }

  function cdata_section_state(c) {
    switch(c) {
    case 0x005D: // RIGHT SQUARE BRACKET
      tokenizer = cdata_section_bracket_state;
      break;
    case -1: // EOF
      emitEOF();
      break;
    case 0x0000: // NULL
      textIncludesNUL = true;
      /* fall through */
    default:
      // Instead of just pushing a single character and then
      // coming back to the very same place, lookahead and
      // emit everything we can at once.
      /*jshint -W030 */
      emitCharsWhile(CDATATEXT) || textrun.push(c);
      break;
    }
  }

  function cdata_section_bracket_state(c) {
    switch(c) {
    case 0x005D: // RIGHT SQUARE BRACKET
      tokenizer = cdata_section_end_state;
      break;
    default:
      textrun.push(0x005D);
      reconsume(c, cdata_section_state);
      break;
    }
  }

  function cdata_section_end_state(c) {
    switch(c) {
    case 0x005D: // RIGHT SQUARE BRACKET
      textrun.push(0x005D);
      break;
    case 0x003E: // GREATER-THAN SIGN
      flushText();
      tokenizer = data_state;
      break;
    default:
      textrun.push(0x005D);
      textrun.push(0x005D);
      reconsume(c, cdata_section_state);
      break;
    }
  }

  function character_reference_state(c) {
    beginTempBuf();
    tempbuf.push(0x0026);
    switch(c) {
    case 0x0009: // TAB
    case 0x000A: // LINE FEED
    case 0x000C: // FORM FEED
    case 0x0020: // SPACE
    case 0x003C: // LESS-THAN SIGN
    case 0x0026: // AMPERSAND
    case -1: // EOF
      reconsume(c, character_reference_end_state);
      break;
    case 0x0023: // NUMBER SIGN
      tempbuf.push(c);
      tokenizer = numeric_character_reference_state;
      break;
    default:
      reconsume(c, named_character_reference_state);
      break;
    }
  }

  function named_character_reference_state(c) {
    NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed
    var matched = NAMEDCHARREF.exec(chars);
    if (!matched) throw new Error("should never happen");
    var name = matched[1];
    if (!name) {
      // If no match can be made, switch to the character reference end state
      tokenizer = character_reference_end_state;
      return;
    }

    // Consume the matched characters and append them to temporary buffer
    nextchar += name.length;
    pushAll(tempbuf, str2buf(name));

    switch(return_state) {
    case attribute_value_double_quoted_state:
    case attribute_value_single_quoted_state:
    case attribute_value_unquoted_state:
      // If the character reference was consumed as part of an attribute...
      if (name[name.length-1] !== ';') { // ...and the last char is not ;
        if (/[=A-Za-z0-9]/.test(chars[nextchar])) {
          tokenizer = character_reference_end_state;
          return;
        }
      }
      break;
    default:
      break;
    }

    beginTempBuf();
    var rv = namedCharRefs[name];
    if (typeof rv === 'number') {
      tempbuf.push(rv);
    } else {
      pushAll(tempbuf, rv);
    }
    tokenizer = character_reference_end_state;
  }
  // We might need to pause tokenization until we have enough characters
  // in the buffer for longest possible character reference.
  named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;

  function numeric_character_reference_state(c) {
    character_reference_code = 0;
    switch(c) {
    case 0x0078: // x
    case 0x0058: // X
      tempbuf.push(c);
      tokenizer = hexadecimal_character_reference_start_state;
      break;
    default:
      reconsume(c, decimal_character_reference_start_state);
      break;
    }
  }

  function hexadecimal_character_reference_start_state(c) {
    switch(c) {
    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:
    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]
    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:
    case 0x0046: // [A-F]
    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:
    case 0x0066: // [a-f]
      reconsume(c, hexadecimal_character_reference_state);
      break;
    default:
      reconsume(c, character_reference_end_state);
      break;
    }
  }

  function decimal_character_reference_start_state(c) {
    switch(c) {
    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:
    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]
      reconsume(c, decimal_character_reference_state);
      break;
    default:
      reconsume(c, character_reference_end_state);
      break;
    }
  }

  function hexadecimal_character_reference_state(c) {
    switch(c) {
    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:
    case 0x0046: // [A-F]
      character_reference_code *= 16;
      character_reference_code += (c - 0x0037);
      break;
    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:
    case 0x0066: // [a-f]
      character_reference_code *= 16;
      character_reference_code += (c - 0x0057);
      break;
    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:
    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]
      character_reference_code *= 16;
      character_reference_code += (c - 0x0030);
      break;
    case 0x003B: // SEMICOLON
      tokenizer = numeric_character_reference_end_state;
      break;
    default:
      reconsume(c, numeric_character_reference_end_state);
      break;
    }
  }

  function decimal_character_reference_state(c) {
    switch(c) {
    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:
    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]
      character_reference_code *= 10;
      character_reference_code += (c - 0x0030);
      break;
    case 0x003B: // SEMICOLON
      tokenizer = numeric_character_reference_end_state;
      break;
    default:
      reconsume(c, numeric_character_reference_end_state);
      break;
    }
  }

  function numeric_character_reference_end_state(c) {
    if (character_reference_code in numericCharRefReplacements) {
      character_reference_code = numericCharRefReplacements[character_reference_code];
    } else if (character_reference_code > 0x10FFFF || (character_reference_code >= 0xD800 && character_reference_code < 0xE000)) {
      character_reference_code = 0xFFFD;
    }

    beginTempBuf();
    if (character_reference_code <= 0xFFFF) {
      tempbuf.push(character_reference_code);
    } else {
      character_reference_code = character_reference_code - 0x10000;
      /* jshint bitwise: false */
      tempbuf.push(0xD800 + (character_reference_code >> 10));
      tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));
    }
    reconsume(c, character_reference_end_state);
  }

  function character_reference_end_state(c) {
    switch(return_state) {
    case attribute_value_double_quoted_state:
    case attribute_value_single_quoted_state:
    case attribute_value_unquoted_state:
      // append each character to the current attribute's value
      attrvaluebuf += buf2str(tempbuf);
      break;
    default:
      pushAll(textrun, tempbuf);
      break;
    }
    reconsume(c, return_state);
  }

  /***
   * The tree builder insertion modes
   */

  // 11.2.5.4.1 The "initial" insertion mode
  function initial_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      value = value.replace(LEADINGWS, ""); // Ignore spaces
      if (value.length === 0) return; // Are we done?
      break; // Handle anything non-space text below
    case 4: // COMMENT
      doc._appendChild(doc.createComment(value));
      return;
    case 5: // DOCTYPE
      var name = value;
      var publicid = arg3;
      var systemid = arg4;
      // Use the constructor directly instead of
      // implementation.createDocumentType because the create
      // function throws errors on invalid characters, and
      // we don't want the parser to throw them.
      doc.appendChild(new DocumentType(name,publicid, systemid));

      // Note that there is no public API for setting quirks mode We can
      // do this here because we have access to implementation details
      if (force_quirks ||
        name.toLowerCase() !== "html" ||
        quirkyPublicIds.test(publicid) ||
        (systemid && systemid.toLowerCase() === quirkySystemId) ||
        (systemid === undefined &&
         conditionallyQuirkyPublicIds.test(publicid)))
        doc._quirks = true;
      else if (limitedQuirkyPublicIds.test(publicid) ||
           (systemid !== undefined &&
            conditionallyQuirkyPublicIds.test(publicid)))
        doc._limitedQuirks = true;
      parser = before_html_mode;
      return;
    }

    // tags or non-whitespace text
    doc._quirks = true;
    parser = before_html_mode;
    parser(t,value,arg3,arg4);
  }

  // 11.2.5.4.2 The "before html" insertion mode
  function before_html_mode(t,value,arg3,arg4) {
    var elt;
    switch(t) {
    case 1: // TEXT
      value = value.replace(LEADINGWS, ""); // Ignore spaces
      if (value.length === 0) return; // Are we done?
      break; // Handle anything non-space text below
    case 5: // DOCTYPE
      /* ignore the token */
      return;
    case 4: // COMMENT
      doc._appendChild(doc.createComment(value));
      return;
    case 2: // TAG
      if (value === "html") {
        elt = createHTMLElt(doc, value, arg3);
        stack.push(elt);
        doc.appendChild(elt);
        // XXX: handle application cache here
        parser = before_head_mode;
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "html":
      case "head":
      case "body":
      case "br":
        break;  // fall through on these
      default:
        return; // ignore most end tags
      }
    }

    // Anything that didn't get handled above is handled like this:
    elt = createHTMLElt(doc, "html", null);
    stack.push(elt);
    doc.appendChild(elt);
    // XXX: handle application cache here
    parser = before_head_mode;
    parser(t,value,arg3,arg4);
  }

  // 11.2.5.4.3 The "before head" insertion mode
  function before_head_mode(t,value,arg3,arg4) {
    switch(t) {
    case 1: // TEXT
      value = value.replace(LEADINGWS, "");  // Ignore spaces
      if (value.length === 0) return; // Are we done?
      break;  // Handle anything non-space text below
    case 5: // DOCTYPE
      /* ignore the token */
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t,value,arg3,arg4);
        return;
      case "head":
        var elt = insertHTMLElement(value, arg3);
        head_element_pointer = elt;
        parser = in_head_mode;
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "html":
      case "head":
      case "body":
      case "br":
        break;
      default:
        return; // ignore most end tags
      }
    }

    // If not handled explicitly above
    before_head_mode(TAG, "head", null); // create a head tag
    parser(t, value, arg3, arg4); // then try again with this token
  }

  function in_head_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      var ws = value.match(LEADINGWS);
      if (ws) {
        insertText(ws[0]);
        value = value.substring(ws[0].length);
      }
      if (value.length === 0) return;
      break; // Handle non-whitespace below
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "meta":
        // XXX:
        // May need to change the encoding based on this tag
        /* falls through */
      case "base":
      case "basefont":
      case "bgsound":
      case "link":
        insertHTMLElement(value, arg3);
        stack.pop();
        return;
      case "title":
        parseRCDATA(value, arg3);
        return;
      case "noscript":
        if (!scripting_enabled) {
          insertHTMLElement(value, arg3);
          parser = in_head_noscript_mode;
          return;
        }
        // Otherwise, if scripting is enabled...
        /* falls through */
      case "noframes":
      case "style":
        parseRawText(value,arg3);
        return;
      case "script":
        insertElement(function(doc) {
          var elt = createHTMLElt(doc, value, arg3);
          elt._parser_inserted = true;
          elt._force_async = false;
          if (fragment) elt._already_started = true;
          flushText();
          return elt;
        });
        tokenizer = script_data_state;
        originalInsertionMode = parser;
        parser = text_mode;
        return;
      case "template":
        insertHTMLElement(value, arg3);
        afe.insertMarker();
        frameset_ok = false;
        parser = in_template_mode;
        templateInsertionModes.push(parser);
        return;
      case "head":
        return; // ignore it
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "head":
        stack.pop();
        parser = after_head_mode;
        return;
      case "body":
      case "html":
      case "br":
        break; // handle these at the bottom of the function
      case "template":
        if (!stack.contains("template")) {
          return;
        }
        stack.generateImpliedEndTags(null, "thorough");
        stack.popTag("template");
        afe.clearToMarker();
        templateInsertionModes.pop();
        resetInsertionMode();
        return;
      default:
        // ignore any other end tag
        return;
      }
      break;
    }

    // If not handled above
    in_head_mode(ENDTAG, "head", null);   // synthetic </head>
    parser(t, value, arg3, arg4);   // Then redo this one
  }

  // 13.2.5.4.5 The "in head noscript" insertion mode
  function in_head_noscript_mode(t, value, arg3, arg4) {
    switch(t) {
    case 5: // DOCTYPE
      return;
    case 4: // COMMENT
      in_head_mode(t, value);
      return;
    case 1: // TEXT
      var ws = value.match(LEADINGWS);
      if (ws) {
        in_head_mode(t, ws[0]);
        value = value.substring(ws[0].length);
      }
      if (value.length === 0) return; // no more text
      break; // Handle non-whitespace below
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "basefont":
      case "bgsound":
      case "link":
      case "meta":
      case "noframes":
      case "style":
        in_head_mode(t, value, arg3);
        return;
      case "head":
      case "noscript":
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "noscript":
        stack.pop();
        parser = in_head_mode;
        return;
      case "br":
        break;  // goes to the outer default
      default:
        return; // ignore other end tags
      }
      break;
    }

    // If not handled above
    in_head_noscript_mode(ENDTAG, "noscript", null);
    parser(t, value, arg3, arg4);
  }

  function after_head_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      var ws = value.match(LEADINGWS);
      if (ws) {
        insertText(ws[0]);
        value = value.substring(ws[0].length);
      }
      if (value.length === 0) return;
      break; // Handle non-whitespace below
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "body":
        insertHTMLElement(value, arg3);
        frameset_ok = false;
        parser = in_body_mode;
        return;
      case "frameset":
        insertHTMLElement(value, arg3);
        parser = in_frameset_mode;
        return;
      case "base":
      case "basefont":
      case "bgsound":
      case "link":
      case "meta":
      case "noframes":
      case "script":
      case "style":
      case "template":
      case "title":
        stack.push(head_element_pointer);
        in_head_mode(TAG, value, arg3);
        stack.removeElement(head_element_pointer);
        return;
      case "head":
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "template":
        return in_head_mode(t, value, arg3, arg4);
      case "body":
      case "html":
      case "br":
        break;
      default:
        return;  // ignore any other end tag
      }
      break;
    }

    after_head_mode(TAG, "body", null);
    frameset_ok = true;
    parser(t, value, arg3, arg4);
  }

  // 13.2.5.4.7 The "in body" insertion mode
  function in_body_mode(t,value,arg3,arg4) {
    var body, i, node, elt;
    switch(t) {
    case 1: // TEXT
      if (textIncludesNUL) {
        value = value.replace(NULCHARS, "");
        if (value.length === 0) return;
      }
      // If any non-space characters
      if (frameset_ok && NONWS.test(value))
        frameset_ok = false;
      afereconstruct();
      insertText(value);
      return;
    case 5: // DOCTYPE
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case -1: // EOF
      if (templateInsertionModes.length) {
        return in_template_mode(t);
      }
      stopParsing();
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        if (stack.contains("template")) {
          return;
        }
        transferAttributes(arg3, stack.elements[0]);
        return;
      case "base":
      case "basefont":
      case "bgsound":
      case "link":
      case "meta":
      case "noframes":
      case "script":
      case "style":
      case "template":
      case "title":
        in_head_mode(TAG, value, arg3);
        return;
      case "body":
        body = stack.elements[1];
        if (!body || !(body instanceof impl.HTMLBodyElement) ||
            stack.contains("template"))
          return;
        frameset_ok = false;
        transferAttributes(arg3, body);
        return;
      case "frameset":
        if (!frameset_ok) return;
        body = stack.elements[1];
        if (!body || !(body instanceof impl.HTMLBodyElement))
          return;
        if (body.parentNode) body.parentNode.removeChild(body);
        while(!(stack.top instanceof impl.HTMLHtmlElement))
          stack.pop();
        insertHTMLElement(value, arg3);
        parser = in_frameset_mode;
        return;

      case "address":
      case "article":
      case "aside":
      case "blockquote":
      case "center":
      case "details":
      case "dialog":
      case "dir":
      case "div":
      case "dl":
      case "fieldset":
      case "figcaption":
      case "figure":
      case "footer":
      case "header":
      case "hgroup":
      case "main":
      case "nav":
      case "ol":
      case "p":
      case "section":
      case "summary":
      case "ul":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        insertHTMLElement(value, arg3);
        return;

      case "menu":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        if (isA(stack.top, 'menuitem')) {
          stack.pop();
        }
        insertHTMLElement(value, arg3);
        return;

      case "h1":
      case "h2":
      case "h3":
      case "h4":
      case "h5":
      case "h6":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        if (stack.top instanceof impl.HTMLHeadingElement)
          stack.pop();
        insertHTMLElement(value, arg3);
        return;

      case "pre":
      case "listing":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        insertHTMLElement(value, arg3);
        ignore_linefeed = true;
        frameset_ok = false;
        return;

      case "form":
        if (form_element_pointer && !stack.contains("template")) return;
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        elt = insertHTMLElement(value, arg3);
        if (!stack.contains("template"))
          form_element_pointer = elt;
        return;

      case "li":
        frameset_ok = false;
        for(i = stack.elements.length-1; i >= 0; i--) {
          node = stack.elements[i];
          if (node instanceof impl.HTMLLIElement) {
            in_body_mode(ENDTAG, "li");
            break;
          }
          if (isA(node, specialSet) && !isA(node, addressdivpSet))
            break;
        }
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        insertHTMLElement(value, arg3);
        return;

      case "dd":
      case "dt":
        frameset_ok = false;
        for(i = stack.elements.length-1; i >= 0; i--) {
          node = stack.elements[i];
          if (isA(node, dddtSet)) {
            in_body_mode(ENDTAG, node.localName);
            break;
          }
          if (isA(node, specialSet) && !isA(node, addressdivpSet))
            break;
        }
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        insertHTMLElement(value, arg3);
        return;

      case "plaintext":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        insertHTMLElement(value, arg3);
        tokenizer = plaintext_state;
        return;

      case "button":
        if (stack.inScope("button")) {
          in_body_mode(ENDTAG, "button");
          parser(t, value, arg3, arg4);
        }
        else {
          afereconstruct();
          insertHTMLElement(value, arg3);
          frameset_ok = false;
        }
        return;

      case "a":
        var activeElement = afe.findElementByTag("a");
        if (activeElement) {
          in_body_mode(ENDTAG, value);
          afe.remove(activeElement);
          stack.removeElement(activeElement);
        }
        /* falls through */
      case "b":
      case "big":
      case "code":
      case "em":
      case "font":
      case "i":
      case "s":
      case "small":
      case "strike":
      case "strong":
      case "tt":
      case "u":
        afereconstruct();
        afe.push(insertHTMLElement(value,arg3), arg3);
        return;

      case "nobr":
        afereconstruct();

        if (stack.inScope(value)) {
          in_body_mode(ENDTAG, value);
          afereconstruct();
        }
        afe.push(insertHTMLElement(value,arg3), arg3);
        return;

      case "applet":
      case "marquee":
      case "object":
        afereconstruct();
        insertHTMLElement(value,arg3);
        afe.insertMarker();
        frameset_ok = false;
        return;

      case "table":
        if (!doc._quirks && stack.inButtonScope("p")) {
          in_body_mode(ENDTAG, "p");
        }
        insertHTMLElement(value,arg3);
        frameset_ok = false;
        parser = in_table_mode;
        return;

      case "area":
      case "br":
      case "embed":
      case "img":
      case "keygen":
      case "wbr":
        afereconstruct();
        insertHTMLElement(value,arg3);
        stack.pop();
        frameset_ok = false;
        return;

      case "input":
        afereconstruct();
        elt = insertHTMLElement(value,arg3);
        stack.pop();
        var type = elt.getAttribute("type");
        if (!type || type.toLowerCase() !== "hidden")
          frameset_ok = false;
        return;

      case "param":
      case "source":
      case "track":
        insertHTMLElement(value,arg3);
        stack.pop();
        return;

      case "hr":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        if (isA(stack.top, 'menuitem')) {
          stack.pop();
        }
        insertHTMLElement(value,arg3);
        stack.pop();
        frameset_ok = false;
        return;

      case "image":
        in_body_mode(TAG, "img", arg3, arg4);
        return;

      case "textarea":
        insertHTMLElement(value,arg3);
        ignore_linefeed = true;
        frameset_ok = false;
        tokenizer = rcdata_state;
        originalInsertionMode = parser;
        parser = text_mode;
        return;

      case "xmp":
        if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
        afereconstruct();
        frameset_ok = false;
        parseRawText(value, arg3);
        return;

      case "iframe":
        frameset_ok = false;
        parseRawText(value, arg3);
        return;

      case "noembed":
        parseRawText(value,arg3);
        return;

      case "noscript":
        if (scripting_enabled) {
          parseRawText(value,arg3);
          return;
        }
        break;  // XXX Otherwise treat it as any other open tag?

      case "select":
        afereconstruct();
        insertHTMLElement(value,arg3);
        frameset_ok = false;
        if (parser === in_table_mode ||
          parser === in_caption_mode ||
          parser === in_table_body_mode ||
          parser === in_row_mode ||
          parser === in_cell_mode)
          parser = in_select_in_table_mode;
        else
          parser = in_select_mode;
        return;

      case "optgroup":
      case "option":
        if (stack.top instanceof impl.HTMLOptionElement) {
          in_body_mode(ENDTAG, "option");
        }
        afereconstruct();
        insertHTMLElement(value,arg3);
        return;

      case "menuitem":
        if (isA(stack.top, 'menuitem')) {
          stack.pop();
        }
        afereconstruct();
        insertHTMLElement(value, arg3);
        return;

      case "rb":
      case "rtc":
        if (stack.inScope("ruby")) {
          stack.generateImpliedEndTags();
        }
        insertHTMLElement(value,arg3);
        return;

      case "rp":
      case "rt":
        if (stack.inScope("ruby")) {
          stack.generateImpliedEndTags("rtc");
        }
        insertHTMLElement(value,arg3);
        return;

      case "math":
        afereconstruct();
        adjustMathMLAttributes(arg3);
        adjustForeignAttributes(arg3);
        insertForeignElement(value, arg3, NAMESPACE.MATHML);
        if (arg4) // self-closing flag
          stack.pop();
        return;

      case "svg":
        afereconstruct();
        adjustSVGAttributes(arg3);
        adjustForeignAttributes(arg3);
        insertForeignElement(value, arg3, NAMESPACE.SVG);
        if (arg4) // self-closing flag
          stack.pop();
        return;

      case "caption":
      case "col":
      case "colgroup":
      case "frame":
      case "head":
      case "tbody":
      case "td":
      case "tfoot":
      case "th":
      case "thead":
      case "tr":
        // Ignore table tags if we're not in_table mode
        return;
      }

      // Handle any other start tag here
      // (and also noscript tags when scripting is disabled)
      afereconstruct();
      insertHTMLElement(value,arg3);
      return;

    case 3: // ENDTAG
      switch(value) {
      case "template":
        in_head_mode(ENDTAG, value, arg3);
        return;
      case "body":
        if (!stack.inScope("body")) return;
        parser = after_body_mode;
        return;
      case "html":
        if (!stack.inScope("body")) return;
        parser = after_body_mode;
        parser(t, value, arg3);
        return;

      case "address":
      case "article":
      case "aside":
      case "blockquote":
      case "button":
      case "center":
      case "details":
      case "dialog":
      case "dir":
      case "div":
      case "dl":
      case "fieldset":
      case "figcaption":
      case "figure":
      case "footer":
      case "header":
      case "hgroup":
      case "listing":
      case "main":
      case "menu":
      case "nav":
      case "ol":
      case "pre":
      case "section":
      case "summary":
      case "ul":
        // Ignore if there is not a matching open tag
        if (!stack.inScope(value)) return;
        stack.generateImpliedEndTags();
        stack.popTag(value);
        return;

      case "form":
        if (!stack.contains("template")) {
          var openform = form_element_pointer;
          form_element_pointer = null;
          if (!openform || !stack.elementInScope(openform)) return;
          stack.generateImpliedEndTags();
          stack.removeElement(openform);
        } else {
          if (!stack.inScope("form")) return;
          stack.generateImpliedEndTags();
          stack.popTag("form");
        }
        return;

      case "p":
        if (!stack.inButtonScope(value)) {
          in_body_mode(TAG, value, null);
          parser(t, value, arg3, arg4);
        }
        else {
          stack.generateImpliedEndTags(value);
          stack.popTag(value);
        }
        return;

      case "li":
        if (!stack.inListItemScope(value)) return;
        stack.generateImpliedEndTags(value);
        stack.popTag(value);
        return;

      case "dd":
      case "dt":
        if (!stack.inScope(value)) return;
        stack.generateImpliedEndTags(value);
        stack.popTag(value);
        return;

      case "h1":
      case "h2":
      case "h3":
      case "h4":
      case "h5":
      case "h6":
        if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;
        stack.generateImpliedEndTags();
        stack.popElementType(impl.HTMLHeadingElement);
        return;

      case "sarcasm":
        // Take a deep breath, and then:
        break;

      case "a":
      case "b":
      case "big":
      case "code":
      case "em":
      case "font":
      case "i":
      case "nobr":
      case "s":
      case "small":
      case "strike":
      case "strong":
      case "tt":
      case "u":
        var result = adoptionAgency(value);
        if (result) return;  // If we did something we're done
        break;         // Go to the "any other end tag" case

      case "applet":
      case "marquee":
      case "object":
        if (!stack.inScope(value)) return;
        stack.generateImpliedEndTags();
        stack.popTag(value);
        afe.clearToMarker();
        return;

      case "br":
        in_body_mode(TAG, value, null);  // Turn </br> into <br>
        return;
      }

      // Any other end tag goes here
      for(i = stack.elements.length-1; i >= 0; i--) {
        node = stack.elements[i];
        if (isA(node, value)) {
          stack.generateImpliedEndTags(value);
          stack.popElement(node);
          break;
        }
        else if (isA(node, specialSet)) {
          return;
        }
      }

      return;
    }
  }

  function text_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      insertText(value);
      return;
    case -1: // EOF
      if (stack.top instanceof impl.HTMLScriptElement)
        stack.top._already_started = true;
      stack.pop();
      parser = originalInsertionMode;
      parser(t);
      return;
    case 3: // ENDTAG
      if (value === "script") {
        handleScriptEnd();
      }
      else {
        stack.pop();
        parser = originalInsertionMode;
      }
      return;
    default:
      // We should never get any other token types
      return;
    }
  }

  function in_table_mode(t, value, arg3, arg4) {
    function getTypeAttr(attrs) {
      for(var i = 0, n = attrs.length; i < n; i++) {
        if (attrs[i][0] === "type")
          return attrs[i][1].toLowerCase();
      }
      return null;
    }

    switch(t) {
    case 1: // TEXT
      // XXX the text_integration_mode stuff is
      // just a hack I made up
      if (text_integration_mode) {
        in_body_mode(t, value, arg3, arg4);
        return;
      }
      else if (isA(stack.top, tablesectionrowSet)) {
        pending_table_text = [];
        originalInsertionMode = parser;
        parser = in_table_text_mode;
        parser(t, value, arg3, arg4);
        return;
      }
      break;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case 2: // TAG
      switch(value) {
      case "caption":
        stack.clearToContext(tableContextSet);
        afe.insertMarker();
        insertHTMLElement(value,arg3);
        parser = in_caption_mode;
        return;
      case "colgroup":
        stack.clearToContext(tableContextSet);
        insertHTMLElement(value,arg3);
        parser = in_column_group_mode;
        return;
      case "col":
        in_table_mode(TAG, "colgroup", null);
        parser(t, value, arg3, arg4);
        return;
      case "tbody":
      case "tfoot":
      case "thead":
        stack.clearToContext(tableContextSet);
        insertHTMLElement(value,arg3);
        parser = in_table_body_mode;
        return;
      case "td":
      case "th":
      case "tr":
        in_table_mode(TAG, "tbody", null);
        parser(t, value, arg3, arg4);
        return;

      case "table":
        if (!stack.inTableScope(value)) {
          return; // Ignore the token
        }
        in_table_mode(ENDTAG, value);
        parser(t, value, arg3, arg4);
        return;

      case "style":
      case "script":
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;

      case "input":
        var type = getTypeAttr(arg3);
        if (type !== "hidden") break;  // to the anything else case
        insertHTMLElement(value,arg3);
        stack.pop();
        return;

      case "form":
        if (form_element_pointer || stack.contains("template")) return;
        form_element_pointer = insertHTMLElement(value, arg3);
        stack.popElement(form_element_pointer);
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "table":
        if (!stack.inTableScope(value)) return;
        stack.popTag(value);
        resetInsertionMode();
        return;
      case "body":
      case "caption":
      case "col":
      case "colgroup":
      case "html":
      case "tbody":
      case "td":
      case "tfoot":
      case "th":
      case "thead":
      case "tr":
        return;
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      }

      break;
    case -1: // EOF
      in_body_mode(t, value, arg3, arg4);
      return;
    }

    // This is the anything else case
    foster_parent_mode = true;
    in_body_mode(t, value, arg3, arg4);
    foster_parent_mode = false;
  }

  function in_table_text_mode(t, value, arg3, arg4) {
    if (t === TEXT) {
      if (textIncludesNUL) {
        value = value.replace(NULCHARS, "");
        if (value.length === 0) return;
      }
      pending_table_text.push(value);
    }
    else {
      var s = pending_table_text.join("");
      pending_table_text.length = 0;
      if (NONWS.test(s)) { // If any non-whitespace characters
        // This must be the same code as the "anything else"
        // case of the in_table mode above.
        foster_parent_mode = true;
        in_body_mode(TEXT, s);
        foster_parent_mode = false;
      }
      else {
        insertText(s);
      }
      parser = originalInsertionMode;
      parser(t, value, arg3, arg4);
    }
  }


  function in_caption_mode(t, value, arg3, arg4) {
    function end_caption() {
      if (!stack.inTableScope("caption")) return false;
      stack.generateImpliedEndTags();
      stack.popTag("caption");
      afe.clearToMarker();
      parser = in_table_mode;
      return true;
    }

    switch(t) {
    case 2: // TAG
      switch(value) {
      case "caption":
      case "col":
      case "colgroup":
      case "tbody":
      case "td":
      case "tfoot":
      case "th":
      case "thead":
      case "tr":
        if (end_caption()) parser(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "caption":
        end_caption();
        return;
      case "table":
        if (end_caption()) parser(t, value, arg3, arg4);
        return;
      case "body":
      case "col":
      case "colgroup":
      case "html":
      case "tbody":
      case "td":
      case "tfoot":
      case "th":
      case "thead":
      case "tr":
        return;
      }
      break;
    }

    // The Anything Else case
    in_body_mode(t, value, arg3, arg4);
  }

  function in_column_group_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      var ws = value.match(LEADINGWS);
      if (ws) {
        insertText(ws[0]);
        value = value.substring(ws[0].length);
      }
      if (value.length === 0) return;
      break; // Handle non-whitespace below

    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "col":
        insertHTMLElement(value, arg3);
        stack.pop();
        return;
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "colgroup":
        if (!isA(stack.top, 'colgroup')) {
          return; // Ignore the token.
        }
        stack.pop();
        parser = in_table_mode;
        return;
      case "col":
        return;
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    case -1: // EOF
      in_body_mode(t, value, arg3, arg4);
      return;
    }

    // Anything else
    if (!isA(stack.top, 'colgroup')) {
      return; // Ignore the token.
    }
    in_column_group_mode(ENDTAG, "colgroup");
    parser(t, value, arg3, arg4);
  }

  function in_table_body_mode(t, value, arg3, arg4) {
    function endsect() {
      if (!stack.inTableScope("tbody") &&
        !stack.inTableScope("thead") &&
        !stack.inTableScope("tfoot"))
        return;
      stack.clearToContext(tableBodyContextSet);
      in_table_body_mode(ENDTAG, stack.top.localName, null);
      parser(t, value, arg3, arg4);
    }

    switch(t) {
    case 2: // TAG
      switch(value) {
      case "tr":
        stack.clearToContext(tableBodyContextSet);
        insertHTMLElement(value, arg3);
        parser = in_row_mode;
        return;
      case "th":
      case "td":
        in_table_body_mode(TAG, "tr", null);
        parser(t, value, arg3, arg4);
        return;
      case "caption":
      case "col":
      case "colgroup":
      case "tbody":
      case "tfoot":
      case "thead":
        endsect();
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "table":
        endsect();
        return;
      case "tbody":
      case "tfoot":
      case "thead":
        if (stack.inTableScope(value)) {
          stack.clearToContext(tableBodyContextSet);
          stack.pop();
          parser = in_table_mode;
        }
        return;
      case "body":
      case "caption":
      case "col":
      case "colgroup":
      case "html":
      case "td":
      case "th":
      case "tr":
        return;
      }
      break;
    }

    // Anything else:
    in_table_mode(t, value, arg3, arg4);
  }

  function in_row_mode(t, value, arg3, arg4) {
    function endrow() {
      if (!stack.inTableScope("tr")) return false;
      stack.clearToContext(tableRowContextSet);
      stack.pop();
      parser = in_table_body_mode;
      return true;
    }

    switch(t) {
    case 2: // TAG
      switch(value) {
      case "th":
      case "td":
        stack.clearToContext(tableRowContextSet);
        insertHTMLElement(value, arg3);
        parser = in_cell_mode;
        afe.insertMarker();
        return;
      case "caption":
      case "col":
      case "colgroup":
      case "tbody":
      case "tfoot":
      case "thead":
      case "tr":
        if (endrow()) parser(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "tr":
        endrow();
        return;
      case "table":
        if (endrow()) parser(t, value, arg3, arg4);
        return;
      case "tbody":
      case "tfoot":
      case "thead":
        if (stack.inTableScope(value)) {
          if (endrow()) parser(t, value, arg3, arg4);
        }
        return;
      case "body":
      case "caption":
      case "col":
      case "colgroup":
      case "html":
      case "td":
      case "th":
        return;
      }
      break;
    }

    // anything else
    in_table_mode(t, value, arg3, arg4);
  }

  function in_cell_mode(t, value, arg3, arg4) {
    switch(t) {
    case 2: // TAG
      switch(value) {
      case "caption":
      case "col":
      case "colgroup":
      case "tbody":
      case "td":
      case "tfoot":
      case "th":
      case "thead":
      case "tr":
        if (stack.inTableScope("td")) {
          in_cell_mode(ENDTAG, "td");
          parser(t, value, arg3, arg4);
        }
        else if (stack.inTableScope("th")) {
          in_cell_mode(ENDTAG, "th");
          parser(t, value, arg3, arg4);
        }
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "td":
      case "th":
        if (!stack.inTableScope(value)) return;
        stack.generateImpliedEndTags();
        stack.popTag(value);
        afe.clearToMarker();
        parser = in_row_mode;
        return;

      case "body":
      case "caption":
      case "col":
      case "colgroup":
      case "html":
        return;

      case "table":
      case "tbody":
      case "tfoot":
      case "thead":
      case "tr":
        if (!stack.inTableScope(value)) return;
        in_cell_mode(ENDTAG, stack.inTableScope("td") ? "td" : "th");
        parser(t, value, arg3, arg4);
        return;
      }
      break;
    }

    // anything else
    in_body_mode(t, value, arg3, arg4);
  }

  function in_select_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      if (textIncludesNUL) {
        value = value.replace(NULCHARS, "");
        if (value.length === 0) return;
      }
      insertText(value);
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case -1: // EOF
      in_body_mode(t, value, arg3, arg4);
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "option":
        if (stack.top instanceof impl.HTMLOptionElement)
          in_select_mode(ENDTAG, value);
        insertHTMLElement(value, arg3);
        return;
      case "optgroup":
        if (stack.top instanceof impl.HTMLOptionElement)
          in_select_mode(ENDTAG, "option");
        if (stack.top instanceof impl.HTMLOptGroupElement)
          in_select_mode(ENDTAG, value);
        insertHTMLElement(value, arg3);
        return;
      case "select":
        in_select_mode(ENDTAG, value); // treat it as a close tag
        return;

      case "input":
      case "keygen":
      case "textarea":
        if (!stack.inSelectScope("select")) return;
        in_select_mode(ENDTAG, "select");
        parser(t, value, arg3, arg4);
        return;

      case "script":
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      switch(value) {
      case "optgroup":
        if (stack.top instanceof impl.HTMLOptionElement &&
          stack.elements[stack.elements.length-2] instanceof
          impl.HTMLOptGroupElement) {
          in_select_mode(ENDTAG, "option");
        }
        if (stack.top instanceof impl.HTMLOptGroupElement)
          stack.pop();

        return;

      case "option":
        if (stack.top instanceof impl.HTMLOptionElement)
          stack.pop();
        return;

      case "select":
        if (!stack.inSelectScope(value)) return;
        stack.popTag(value);
        resetInsertionMode();
        return;

      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      }

      break;
    }

    // anything else: just ignore the token
  }

  function in_select_in_table_mode(t, value, arg3, arg4) {
    switch(value) {
    case "caption":
    case "table":
    case "tbody":
    case "tfoot":
    case "thead":
    case "tr":
    case "td":
    case "th":
      switch(t) {
      case 2: // TAG
        in_select_in_table_mode(ENDTAG, "select");
        parser(t, value, arg3, arg4);
        return;
      case 3: // ENDTAG
        if (stack.inTableScope(value)) {
          in_select_in_table_mode(ENDTAG, "select");
          parser(t, value, arg3, arg4);
        }
        return;
      }
    }

    // anything else
    in_select_mode(t, value, arg3, arg4);
  }

  function in_template_mode(t, value, arg3, arg4) {
    function switchModeAndReprocess(mode) {
      parser = mode;
      templateInsertionModes[templateInsertionModes.length-1] = parser;
      parser(t, value, arg3, arg4);
    }
    switch(t) {
    case 1: // TEXT
    case 4: // COMMENT
    case 5: // DOCTYPE
      in_body_mode(t, value, arg3, arg4);
      return;
    case -1: // EOF
      if (!stack.contains("template")) {
        stopParsing();
      } else {
        stack.popTag("template");
        afe.clearToMarker();
        templateInsertionModes.pop();
        resetInsertionMode();
        parser(t, value, arg3, arg4);
      }
      return;
    case 2: // TAG
      switch(value) {
      case "base":
      case "basefont":
      case "bgsound":
      case "link":
      case "meta":
      case "noframes":
      case "script":
      case "style":
      case "template":
      case "title":
        in_head_mode(t, value, arg3, arg4);
        return;
      case "caption":
      case "colgroup":
      case "tbody":
      case "tfoot":
      case "thead":
        switchModeAndReprocess(in_table_mode);
        return;
      case "col":
        switchModeAndReprocess(in_column_group_mode);
        return;
      case "tr":
        switchModeAndReprocess(in_table_body_mode);
        return;
      case "td":
      case "th":
        switchModeAndReprocess(in_row_mode);
        return;
      }
      switchModeAndReprocess(in_body_mode);
      return;
    case 3: // ENDTAG
      switch(value) {
      case "template":
        in_head_mode(t, value, arg3, arg4);
        return;
      default:
        return;
      }
    }
  }

  function after_body_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      // If any non-space chars, handle below
      if (NONWS.test(value)) break;
      in_body_mode(t, value);
      return;
    case 4: // COMMENT
      // Append it to the <html> element
      stack.elements[0]._appendChild(doc.createComment(value));
      return;
    case 5: // DOCTYPE
      return;
    case -1: // EOF
      stopParsing();
      return;
    case 2: // TAG
      if (value === "html") {
        in_body_mode(t, value, arg3, arg4);
        return;
      }
      break; // for any other tags
    case 3: // ENDTAG
      if (value === "html") {
        if (fragment) return;
        parser = after_after_body_mode;
        return;
      }
      break; // for any other tags
    }

    // anything else
    parser = in_body_mode;
    parser(t, value, arg3, arg4);
  }

  function in_frameset_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      // Ignore any non-space characters
      value = value.replace(ALLNONWS, "");
      if (value.length > 0) insertText(value);
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case -1: // EOF
      stopParsing();
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "frameset":
        insertHTMLElement(value, arg3);
        return;
      case "frame":
        insertHTMLElement(value, arg3);
        stack.pop();
        return;
      case "noframes":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      if (value === "frameset") {
        if (fragment && stack.top instanceof impl.HTMLHtmlElement)
          return;
        stack.pop();
        if (!fragment &&
          !(stack.top instanceof impl.HTMLFrameSetElement))
          parser = after_frameset_mode;
        return;
      }
      break;
    }

    // ignore anything else
  }

  function after_frameset_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      // Ignore any non-space characters
      value = value.replace(ALLNONWS, "");
      if (value.length > 0) insertText(value);
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      return;
    case -1: // EOF
      stopParsing();
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "noframes":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    case 3: // ENDTAG
      if (value === "html") {
        parser = after_after_frameset_mode;
        return;
      }
      break;
    }

    // ignore anything else
  }

  function after_after_body_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      // If any non-space chars, handle below
      if (NONWS.test(value)) break;
      in_body_mode(t, value, arg3, arg4);
      return;
    case 4: // COMMENT
      doc._appendChild(doc.createComment(value));
      return;
    case 5: // DOCTYPE
      in_body_mode(t, value, arg3, arg4);
      return;
    case -1: // EOF
      stopParsing();
      return;
    case 2: // TAG
      if (value === "html") {
        in_body_mode(t, value, arg3, arg4);
        return;
      }
      break;
    }

    // anything else
    parser = in_body_mode;
    parser(t, value, arg3, arg4);
  }

  function after_after_frameset_mode(t, value, arg3, arg4) {
    switch(t) {
    case 1: // TEXT
      // Ignore any non-space characters
      value = value.replace(ALLNONWS, "");
      if (value.length > 0)
        in_body_mode(t, value, arg3, arg4);
      return;
    case 4: // COMMENT
      doc._appendChild(doc.createComment(value));
      return;
    case 5: // DOCTYPE
      in_body_mode(t, value, arg3, arg4);
      return;
    case -1: // EOF
      stopParsing();
      return;
    case 2: // TAG
      switch(value) {
      case "html":
        in_body_mode(t, value, arg3, arg4);
        return;
      case "noframes":
        in_head_mode(t, value, arg3, arg4);
        return;
      }
      break;
    }

    // ignore anything else
  }


  // 13.2.5.5 The rules for parsing tokens in foreign content
  //
  // This is like one of the insertion modes above, but is
  // invoked somewhat differently when the current token is not HTML.
  // See the insertToken() function.
  function insertForeignToken(t, value, arg3, arg4) {
    // A <font> tag is an HTML font tag if it has a color, font, or size
    // attribute.  Otherwise we assume it is foreign content
    function isHTMLFont(attrs) {
      for(var i = 0, n = attrs.length; i < n; i++) {
        switch(attrs[i][0]) {
        case "color":
        case "face":
        case "size":
          return true;
        }
      }
      return false;
    }

    var current;

    switch(t) {
    case 1: // TEXT
      // If any non-space, non-nul characters
      if (frameset_ok && NONWSNONNUL.test(value))
        frameset_ok = false;
      if (textIncludesNUL) {
        value = value.replace(NULCHARS, "\uFFFD");
      }
      insertText(value);
      return;
    case 4: // COMMENT
      insertComment(value);
      return;
    case 5: // DOCTYPE
      // ignore it
      return;
    case 2: // TAG
      switch(value) {
      case "font":
        if (!isHTMLFont(arg3)) break;
        /* falls through */
      case "b":
      case "big":
      case "blockquote":
      case "body":
      case "br":
      case "center":
      case "code":
      case "dd":
      case "div":
      case "dl":
      case "dt":
      case "em":
      case "embed":
      case "h1":
      case "h2":
      case "h3":
      case "h4":
      case "h5":
      case "h6":
      case "head":
      case "hr":
      case "i":
      case "img":
      case "li":
      case "listing":
      case "menu":
      case "meta":
      case "nobr":
      case "ol":
      case "p":
      case "pre":
      case "ruby":
      case "s":
      case "small":
      case "span":
      case "strong":
      case "strike":
      case "sub":
      case "sup":
      case "table":
      case "tt":
      case "u":
      case "ul":
      case "var":
        if (fragment) {
          break;
        }
        do {
          stack.pop();
          current = stack.top;
        } while(current.namespaceURI !== NAMESPACE.HTML &&
            !isMathmlTextIntegrationPoint(current) &&
            !isHTMLIntegrationPoint(current));

        insertToken(t, value, arg3, arg4);  // reprocess
        return;
      }

      // Any other start tag case goes here
      current = (stack.elements.length===1 && fragment) ? fragmentContext :
        stack.top;
      if (current.namespaceURI === NAMESPACE.MATHML) {
        adjustMathMLAttributes(arg3);
      }
      else if (current.namespaceURI === NAMESPACE.SVG) {
        value = adjustSVGTagName(value);
        adjustSVGAttributes(arg3);
      }
      adjustForeignAttributes(arg3);

      insertForeignElement(value, arg3, current.namespaceURI);
      if (arg4) { // the self-closing flag
        if (value === 'script' && current.namespaceURI === NAMESPACE.SVG) {
          // XXX deal with SVG scripts here
        }
        stack.pop();
      }
      return;

    case 3: // ENDTAG
      current = stack.top;
      if (value === "script" &&
        current.namespaceURI === NAMESPACE.SVG &&
        current.localName === "script") {

        stack.pop();

        // XXX
        // Deal with SVG scripts here
      }
      else {
        // The any other end tag case
        var i = stack.elements.length-1;
        var node = stack.elements[i];
        for(;;) {
          if (node.localName.toLowerCase() === value) {
            stack.popElement(node);
            break;
          }
          node = stack.elements[--i];
          // If non-html, keep looping
          if (node.namespaceURI !== NAMESPACE.HTML)
            continue;
          // Otherwise process the end tag as html
          parser(t, value, arg3, arg4);
          break;
        }
      }
      return;
    }
  }

  /***
   * Finally, this is the end of the HTMLParser() factory function.
   * It returns the htmlparser object with the append() and end() methods.
   */

  // Sneak another method into the htmlparser object to allow us to run
  // tokenizer tests.  This can be commented out in production code.
  // This is a hook for testing the tokenizer. It has to be here
  // because the tokenizer details are all hidden away within the closure.
  // It should return an array of tokens generated while parsing the
  // input string.
  htmlparser.testTokenizer = function(input, initialState, lastStartTag, charbychar) {
    var tokens = [];

    switch(initialState) {
    case "PCDATA state":
      tokenizer = data_state;
      break;
    case "RCDATA state":
      tokenizer = rcdata_state;
      break;
    case "RAWTEXT state":
      tokenizer = rawtext_state;
      break;
    case "PLAINTEXT state":
      tokenizer = plaintext_state;
      break;
    }

    if (lastStartTag) {
      lasttagname = lastStartTag;
    }

    insertToken = function(t, value, arg3, arg4) {
      flushText();
      switch(t) {
      case 1: // TEXT
        if (tokens.length > 0 &&
          tokens[tokens.length-1][0] === "Character") {
          tokens[tokens.length-1][1] += value;
        }
        else tokens.push(["Character", value]);
        break;
      case 4: // COMMENT
        tokens.push(["Comment", value]);
        break;
      case 5: // DOCTYPE
        tokens.push(["DOCTYPE", value,
               arg3 === undefined ? null : arg3,
               arg4 === undefined ? null : arg4,
               !force_quirks]);
        break;
      case 2: // TAG
        var attrs = Object.create(null);
        for(var i = 0; i < arg3.length; i++) {
          // XXX: does attribute order matter?
          var a = arg3[i];
          if (a.length === 1) {
            attrs[a[0]] = "";
          }
          else {
            attrs[a[0]] = a[1];
          }
        }
        var token = ["StartTag", value, attrs];
        if (arg4) token.push(true);
        tokens.push(token);
        break;
      case 3: // ENDTAG
        tokens.push(["EndTag", value]);
        break;
      case -1: // EOF
        break;
      }
    };

    if (!charbychar) {
      this.parse(input, true);
    }
    else {
      for(var i = 0; i < input.length; i++) {
        this.parse(input[i]);
      }
      this.parse("", true);
    }
    return tokens;
  };

  // Return the parser object from the HTMLParser() factory function
  return htmlparser;
}


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = URL;

function URL(url) {
  if (!url) return Object.create(URL.prototype);
  // Can't use String.trim() since it defines whitespace differently than HTML
  this.url = url.replace(/^[ \t\n\r\f]+|[ \t\n\r\f]+$/g, "");

  // See http://tools.ietf.org/html/rfc3986#appendix-B
  // and https://url.spec.whatwg.org/#parsing
  var match = URL.pattern.exec(this.url);
  if (match) {
    if (match[2]) this.scheme = match[2];
    if (match[4]) {
      // parse username/password
      var userinfo = match[4].match(URL.userinfoPattern);
      if (userinfo) {
        this.username = userinfo[1];
        this.password = userinfo[3];
        match[4] = match[4].substring(userinfo[0].length);
      }
      if (match[4].match(URL.portPattern)) {
        var pos = match[4].lastIndexOf(':');
        this.host = match[4].substring(0, pos);
        this.port = match[4].substring(pos+1);
      }
      else {
        this.host = match[4];
      }
    }
    if (match[5]) this.path = match[5];
    if (match[6]) this.query = match[7];
    if (match[8]) this.fragment = match[9];
  }
}

URL.pattern = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/;
URL.userinfoPattern = /^([^@:]*)(:([^@]*))?@/;
URL.portPattern = /:\d+$/;
URL.authorityPattern = /^[^:\/?#]+:\/\//;
URL.hierarchyPattern = /^[^:\/?#]+:\//;

// Return a percentEncoded version of s.
// S should be a single-character string
// XXX: needs to do utf-8 encoding?
URL.percentEncode = function percentEncode(s) {
  var c = s.charCodeAt(0);
  if (c < 256) return "%" + c.toString(16);
  else throw Error("can't percent-encode codepoints > 255 yet");
};

URL.prototype = {
  constructor: URL,

  // XXX: not sure if this is the precise definition of absolute
  isAbsolute: function() { return !!this.scheme; },
  isAuthorityBased: function() {
    return URL.authorityPattern.test(this.url);
  },
  isHierarchical: function() {
    return URL.hierarchyPattern.test(this.url);
  },

  toString: function() {
    var s = "";
    if (this.scheme !== undefined) s += this.scheme + ":";
    if (this.isAbsolute()) {
      s += '//';
      if (this.username || this.password) {
        s += this.username || '';
        if (this.password) {
          s += ':' + this.password;
        }
        s += '@';
      }
      s += this.host;
    }
    if (this.port !== undefined) s += ":" + this.port;
    if (this.path !== undefined) s += this.path;
    if (this.query !== undefined) s += "?" + this.query;
    if (this.fragment !== undefined) s += "#" + this.fragment;
    return s;
  },

  // See: http://tools.ietf.org/html/rfc3986#section-5.2
  // and https://url.spec.whatwg.org/#constructors
  resolve: function(relative) {
    var base = this;           // The base url we're resolving against
    var r = new URL(relative); // The relative reference url to resolve
    var t = new URL();         // The absolute target url we will return

    if (r.scheme !== undefined) {
      t.scheme = r.scheme;
      t.username = r.username;
      t.password = r.password;
      t.host = r.host;
      t.port = r.port;
      t.path = remove_dot_segments(r.path);
      t.query = r.query;
    }
    else {
      t.scheme = base.scheme;
      if (r.host !== undefined) {
        t.username = r.username;
        t.password = r.password;
        t.host = r.host;
        t.port = r.port;
        t.path = remove_dot_segments(r.path);
        t.query = r.query;
      }
      else {
        t.username = base.username;
        t.password = base.password;
        t.host = base.host;
        t.port = base.port;
        if (!r.path) { // undefined or empty
          t.path = base.path;
          if (r.query !== undefined)
            t.query = r.query;
          else
            t.query = base.query;
        }
        else {
          if (r.path.charAt(0) === "/") {
            t.path = remove_dot_segments(r.path);
          }
          else {
            t.path = merge(base.path, r.path);
            t.path = remove_dot_segments(t.path);
          }
          t.query = r.query;
        }
      }
    }
    t.fragment = r.fragment;

    return t.toString();


    function merge(basepath, refpath) {
      if (base.host !== undefined && !base.path)
        return "/" + refpath;

      var lastslash = basepath.lastIndexOf("/");
      if (lastslash === -1)
        return refpath;
      else
        return basepath.substring(0, lastslash+1) + refpath;
    }

    function remove_dot_segments(path) {
      if (!path) return path; // For "" or undefined

      var output = "";
      while(path.length > 0) {
        if (path === "." || path === "..") {
          path = "";
          break;
        }

        var twochars = path.substring(0,2);
        var threechars = path.substring(0,3);
        var fourchars = path.substring(0,4);
        if (threechars === "../") {
          path = path.substring(3);
        }
        else if (twochars === "./") {
          path = path.substring(2);
        }
        else if (threechars === "/./") {
          path = "/" + path.substring(3);
        }
        else if (twochars === "/." && path.length === 2) {
          path = "/";
        }
        else if (fourchars === "/../" ||
             (threechars === "/.." && path.length === 3)) {
          path = "/" + path.substring(4);

          output = output.replace(/\/?[^\/]*$/, "");
        }
        else {
          var segment = path.match(/(\/?([^\/]*))/)[0];
          output += segment;
          path = path.substring(segment.length);
        }
      }

      return output;
    }
  },
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DOMImplementation = __webpack_require__(7);
var EventTarget = __webpack_require__(27);
var Location = __webpack_require__(59);
var sloppy = __webpack_require__(41);
var utils = __webpack_require__(0);

module.exports = Window;

function Window(document) {
  this.document = document || new DOMImplementation().createHTMLDocument("");
  this.document._scripting_enabled = true;
  this.document.defaultView = this;
  this.location = new Location(this, this.document._address || 'about:blank');
}

Window.prototype = Object.create(EventTarget.prototype, {
  _run: { value: sloppy.Window_run },
  console: { value: console },
  history: { value: {
    back: utils.nyi,
    forward: utils.nyi,
    go: utils.nyi
  }},
  navigator: { value: __webpack_require__(61) },

  // Self-referential properties
  window: { get: function() { return this; }},
  self: { get: function() { return this; }},
  frames: { get: function() { return this; }},

  // Self-referential properties for a top-level window
  parent: { get: function() { return this; }},
  top: { get: function() { return this; }},

  // We don't support any other windows for now
  length: { value: 0 },           // no frames
  frameElement: { value: null },  // not part of a frame
  opener: { value: null },        // not opened by another window

  // The onload event handler.
  // XXX: need to support a bunch of other event types, too,
  // and have them interoperate with document.body.

  onload: {
    get: function() {
      return this._getEventHandler("load");
    },
    set: function(v) {
      this._setEventHandler("load", v);
    }
  },

  // XXX This is a completely broken implementation
  getComputedStyle: { value: function getComputedStyle(elt) {
    return elt.style;
  }}

});

utils.expose(__webpack_require__(64), Window);
utils.expose(__webpack_require__(40), Window);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Node = __webpack_require__(2);
var Element = __webpack_require__(3);
var CSSStyleDeclaration = __webpack_require__(12);
var utils = __webpack_require__(0);
var URLUtils = __webpack_require__(35);
var defineElement = __webpack_require__(38);

var htmlElements = exports.elements = {};
var htmlNameToImpl = Object.create(null);

exports.createElement = function(doc, localName, prefix) {
  var impl = htmlNameToImpl[localName] || HTMLUnknownElement;
  return new impl(doc, localName, prefix);
};

function define(spec) {
  return defineElement(spec, HTMLElement, htmlElements, htmlNameToImpl);
}

function URL(attr) {
  return {
    get: function() {
      var v = this._getattr(attr);
      if (v === null) { return ''; }
      var url = this.doc._resolve(v);
      return (url === null) ? v : url;
    },
    set: function(value) {
      this._setattr(attr, value);
    }
  };
}

function CORS(attr) {
  return {
    get: function() {
      var v = this._getattr(attr);
      if (v === null) { return null; }
      if (v.toLowerCase() === 'use-credentials') { return 'use-credentials'; }
      return 'anonymous';
    },
    set: function(value) {
      if (value===null || value===undefined) {
        this.removeAttribute(attr);
      } else {
        this._setattr(attr, value);
      }
    }
  };
}

var REFERRER = {
  type: ["", "no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", "unsafe-url"],
  missing: '',
};


// XXX: the default value for tabIndex should be 0 if the element is
// focusable and -1 if it is not.  But the full definition of focusable
// is actually hard to compute, so for now, I'll follow Firefox and
// just base the default value on the type of the element.
var focusableElements = {
  "A":true, "LINK":true, "BUTTON":true, "INPUT":true,
  "SELECT":true, "TEXTAREA":true, "COMMAND":true
};

var HTMLFormElement = function(doc, localName, prefix) {
  HTMLElement.call(this, doc, localName, prefix);
  this._form = null; // Prevent later deoptimization
};

var HTMLElement = exports.HTMLElement = define({
  superclass: Element,
  ctor: function HTMLElement(doc, localName, prefix) {
    Element.call(this, doc, localName, utils.NAMESPACE.HTML, prefix);
  },
  props: {
    innerHTML: {
      get: function() {
        return this.serialize();
      },
      set: function(v) {
        var parser = this.ownerDocument.implementation.mozHTMLParser(
          this.ownerDocument._address,
          this);
        parser.parse(v, true);
        var tmpdoc = parser.document();
        var root = tmpdoc.firstChild;
        var target = (this instanceof htmlNameToImpl.template) ?
            this.content : this;

        // Remove any existing children of this node
        while(target.hasChildNodes())
          target.removeChild(target.firstChild);

        // Now copy newly parsed children from the root to this node
        target.doc.adoptNode(root);
        while(root.hasChildNodes()) {
          target.appendChild(root.firstChild);
        }
      }
    },
    style: { get: function() {
      if (!this._style)
        this._style = new CSSStyleDeclaration(this);
      return this._style;
    }},

    click: { value: function() {
      if (this._click_in_progress) return;
      this._click_in_progress = true;
      try {
        if (this._pre_click_activation_steps)
          this._pre_click_activation_steps();

        var event = this.ownerDocument.createEvent("MouseEvent");
        event.initMouseEvent("click", true, true,
          this.ownerDocument.defaultView, 1,
          0, 0, 0, 0,
          // These 4 should be initialized with
          // the actually current keyboard state
          // somehow...
          false, false, false, false,
          0, null
        );

        // Dispatch this as an untrusted event since it is synthetic
        var success = this.dispatchEvent(event);

        if (success) {
          if (this._post_click_activation_steps)
            this._post_click_activation_steps(event);
        }
        else {
          if (this._cancelled_activation_steps)
            this._cancelled_activation_steps();
        }
      }
      finally {
        this._click_in_progress = false;
      }
    }}
  },
  attributes: {
    title: String,
    lang: String,
    dir: {type: ["ltr", "rtl", "auto"], missing: ''},
    accessKey: String,
    hidden: Boolean,
    tabIndex: {type: "long", default: function() {
      if (this.tagName in focusableElements ||
        this.contentEditable)
        return 0;
      else
        return -1;
    }}
  },
  events: [
    "abort", "canplay", "canplaythrough", "change", "click", "contextmenu",
    "cuechange", "dblclick", "drag", "dragend", "dragenter", "dragleave",
    "dragover", "dragstart", "drop", "durationchange", "emptied", "ended",
    "input", "invalid", "keydown", "keypress", "keyup", "loadeddata",
    "loadedmetadata", "loadstart", "mousedown", "mousemove", "mouseout",
    "mouseover", "mouseup", "mousewheel", "pause", "play", "playing",
    "progress", "ratechange", "readystatechange", "reset", "seeked",
    "seeking", "select", "show", "stalled", "submit", "suspend",
    "timeupdate", "volumechange", "waiting",

    // These last 5 event types will be overriden by HTMLBodyElement
    "blur", "error", "focus", "load", "scroll"
  ]
});


// XXX: reflect contextmenu as contextMenu, with element type


// style: the spec doesn't call this a reflected attribute.
//   may want to handle it manually.

// contentEditable: enumerated, not clear if it is actually
// reflected or requires custom getter/setter. Not listed as
// "limited to known values".  Raises syntax_err on bad setting,
// so I think this is custom.

// contextmenu: content is element id, idl type is an element
// draggable: boolean, but not a reflected attribute
// dropzone: reflected SettableTokenList, experimental, so don't
//   implement it right away.

// data-* attributes: need special handling in setAttribute?
// Or maybe that isn't necessary. Can I just scan the attribute list
// when building the dataset?  Liveness and caching issues?

// microdata attributes: many are simple reflected attributes, but
// I'm not going to implement this now.


var HTMLUnknownElement = define({
  ctor: function HTMLUnknownElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});


var formAssociatedProps = {
  // See http://www.w3.org/TR/html5/association-of-controls-and-forms.html#form-owner
  form: { get: function() {
    return this._form;
  }}
};

define({
  tag: 'a',
  ctor: function HTMLAnchorElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    _post_click_activation_steps: { value: function(e) {
      if (this.href) {
        // Follow the link
        // XXX: this is just a quick hack
        // XXX: the HTML spec probably requires more than this
        this.ownerDocument.defaultView.location = this.href;
      }
    }},
    blur: { value: function() {}},
    focus: { value: function() {}}
  },
  attributes: {
    href: URL,
    ping: String,
    download: String,
    target: String,
    rel: String,
    media: String,
    hreflang: String,
    type: String,
    referrerPolicy: REFERRER,
    // Obsolete
    coords: String,
    charset: String,
    name: String,
    rev: String,
    shape: String,
  }
});
URLUtils._inherit(htmlNameToImpl.a.prototype);

define({
  tag: 'area',
  ctor: function HTMLAreaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    alt: String,
    target: String,
    download: String,
    rel: String,
    media: String,
    href: URL,
    hreflang: String,
    type: String,
    shape: String,
    coords: String,
    ping: String,
    // XXX: also reflect relList
    referrerPolicy: REFERRER,
    // Obsolete
    noHref: Boolean,
  }
});

define({
  tag: 'br',
  ctor: function HTMLBRElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    clear: String
  },
});

define({
  tag: 'base',
  ctor: function HTMLBaseElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    "target": String
  }
});


define({
  tag: 'body',
  ctor: function HTMLBodyElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  // Certain event handler attributes on a <body> tag actually set
  // handlers for the window rather than just that element.  Define
  // getters and setters for those here.  Note that some of these override
  // properties on HTMLElement.prototype.
  // XXX: If I add support for <frameset>, these have to go there, too
  // XXX
  // When the Window object is implemented, these attribute will have
  // to work with the same-named attributes on the Window.
  events: [
    "afterprint", "beforeprint", "beforeunload", "blur", "error",
    "focus","hashchange", "load", "message", "offline", "online",
    "pagehide", "pageshow","popstate","resize","scroll","storage","unload",
  ],
  attributes: {
    // Obsolete
    text: { type: String, treatNullAsEmptyString: true },
    link: { type: String, treatNullAsEmptyString: true },
    vLink: { type: String, treatNullAsEmptyString: true },
    aLink: { type: String, treatNullAsEmptyString: true },
    bgColor: { type: String, treatNullAsEmptyString: true },
    background: String,
  }
});

define({
  tag: 'button',
  ctor: function HTMLButtonElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    name: String,
    value: String,
    disabled: Boolean,
    autofocus: Boolean,
    type: { type:["submit", "reset", "button", "menu"], missing: 'submit' },
    formTarget: String,
    formNoValidate: Boolean,
    formMethod: { type: ["get", "post", "dialog"], invalid: 'get', missing: '' },
    formEnctype: { type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], invalid: "application/x-www-form-urlencoded", missing: '' },
  }
});

define({
  tag: 'dl',
  ctor: function HTMLDListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    compact: Boolean,
  }
});

define({
  tag: 'data',
  ctor: function HTMLDataElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    value: String,
  }
});

define({
  tag: 'datalist',
  ctor: function HTMLDataListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'details',
  ctor: function HTMLDetailsElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    "open": Boolean
  }
});

define({
  tag: 'div',
  ctor: function HTMLDivElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});

define({
  tag: 'embed',
  ctor: function HTMLEmbedElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    type: String,
    width: String,
    height: String,
    // Obsolete
    align: String,
    name: String,
  }
});

define({
  tag: 'fieldset',
  ctor: function HTMLFieldSetElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    disabled: Boolean,
    name: String
  }
});

define({
  tag: 'form',
  ctor: function HTMLFormElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    action: String,
    autocomplete: {type:['on', 'off'], missing: 'on'},
    name: String,
    acceptCharset: {name: "accept-charset"},
    target: String,
    noValidate: Boolean,
    method: { type: ["get", "post", "dialog"], invalid: 'get', missing: 'get' },
    // Both enctype and encoding reflect the enctype content attribute
    enctype: { type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], invalid: "application/x-www-form-urlencoded", missing: "application/x-www-form-urlencoded" },
    encoding: {name: 'enctype', type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], invalid: "application/x-www-form-urlencoded", missing: "application/x-www-form-urlencoded" },
  }
});

define({
  tag: 'hr',
  ctor: function HTMLHRElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String,
    color: String,
    noShade: Boolean,
    size: String,
    width: String,
  },
});

define({
  tag: 'head',
  ctor: function HTMLHeadElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});

define({
  tags: ['h1','h2','h3','h4','h5','h6'],
  ctor: function HTMLHeadingElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String,
  },
});

define({
  tag: 'html',
  ctor: function HTMLHtmlElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    version: String
  }
});

define({
  tag: 'iframe',
  ctor: function HTMLIFrameElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
    var Window = __webpack_require__(18); // Avoid circular dependencies.
    this._contentWindow = new Window();
  },
  props: {
    contentWindow: { get: function() {
      return this._contentWindow;
    } },
    contentDocument: { get: function() {
      return this.contentWindow.document;
    } },
  },
  attributes: {
    src: URL,
    srcdoc: String,
    name: String,
    width: String,
    height: String,
    // XXX: sandbox is a reflected settable token list
    seamless: Boolean,
    allowFullscreen: Boolean,
    allowUserMedia: Boolean,
    allowPaymentRequest: Boolean,
    referrerPolicy: REFERRER,
    // Obsolete
    align: String,
    scrolling: String,
    frameBorder: String,
    longDesc: URL,
    marginHeight: { type: String, treatNullAsEmptyString: true },
    marginWidth: { type: String, treatNullAsEmptyString: true },
  }
});

define({
  tag: 'img',
  ctor: function HTMLImageElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    alt: String,
    src: URL,
    srcset: String,
    crossOrigin: CORS,
    useMap: String,
    isMap: Boolean,
    height: { type: "unsigned long", default: 0 },
    width: { type: "unsigned long", default: 0 },
    referrerPolicy: REFERRER,
    // Obsolete:
    name: String,
    lowsrc: URL,
    align: String,
    hspace: { type: "unsigned long", default: 0 },
    vspace: { type: "unsigned long", default: 0 },
    longDesc: URL,
    border: { type: String, treatNullAsEmptyString: true },
  }
});

define({
  tag: 'input',
  ctor: function HTMLInputElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: {
    form: formAssociatedProps.form,
    _post_click_activation_steps: { value: function(e) {
      if (this.type === 'checkbox') {
        this.checked = !this.checked;
      }
      else if (this.type === 'radio') {
        var group = this.form.getElementsByName(this.name);
        for (var i=group.length-1; i >= 0; i--) {
          var el = group[i];
          el.checked = (el === this);
        }
      }
    }},
  },
  attributes: {
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    accept: String,
    alt: String,
    max: String,
    min: String,
    pattern: String,
    placeholder: String,
    step: String,
    dirName: String,
    defaultValue: {name: 'value'},
    multiple: Boolean,
    required: Boolean,
    readOnly: Boolean,
    checked: Boolean,
    value: String,
    src: URL,
    defaultChecked: {name: 'checked', type: Boolean},
    size: {type: 'unsigned long', default: 20, min: 1, setmin: 1},
    maxLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},
    autocomplete: String, // It's complicated
    type: { type:
            ["text", "hidden", "search", "tel", "url", "email", "password",
             "datetime", "date", "month", "week", "time", "datetime-local",
             "number", "range", "color", "checkbox", "radio", "file", "submit",
             "image", "reset", "button"],
            missing: 'text' },
    formTarget: String,
    formNoValidate: Boolean,
    formMethod: { type: ["get", "post"], invalid: 'get', missing: '' },
    formEnctype: { type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], invalid: "application/x-www-form-urlencoded", missing: '' },
    inputMode: { type: [ "verbatim", "latin", "latin-name", "latin-prose", "full-width-latin", "kana", "kana-name", "katakana", "numeric", "tel", "email", "url" ], missing: '' },
    // Obsolete
    align: String,
    useMap: String,
  }
});

define({
  tag: 'keygen',
  ctor: function HTMLKeygenElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    challenge: String,
    keytype: { type:["rsa"], missing: '' },
  }
});

define({
  tag: 'li',
  ctor: function HTMLLIElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    value: {type: "long", default: 0},
    // Obsolete
    type: String,
  }
});

define({
  tag: 'label',
  ctor: function HTMLLabelElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    htmlFor: {name: 'for', type: String}
  }
});

define({
  tag: 'legend',
  ctor: function HTMLLegendElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  },
});

define({
  tag: 'link',
  ctor: function HTMLLinkElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // XXX Reflect DOMSettableTokenList sizes also DOMTokenList relList
    href: URL,
    rel: String,
    media: String,
    hreflang: String,
    type: String,
    crossOrigin: CORS,
    nonce: String,
    integrity: String,
    referrerPolicy: REFERRER,
    // Obsolete
    charset: String,
    rev: String,
    target: String,
  }
});

define({
  tag: 'map',
  ctor: function HTMLMapElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String
  }
});

define({
  tag: 'menu',
  ctor: function HTMLMenuElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // XXX: not quite right, default should be popup if parent element is
    // popup.
    type: { type: [ 'context', 'popup', 'toolbar' ], missing: 'toolbar' },
    label: String,
    // Obsolete
    compact: Boolean,
  }
});

define({
  tag: 'meta',
  ctor: function HTMLMetaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String,
    content: String,
    httpEquiv: {name: 'http-equiv', type: String},
    // Obsolete
    scheme: String,
  }
});

define({
  tag: 'meter',
  ctor: function HTMLMeterElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps
});

define({
  tags: ['ins', 'del'],
  ctor: function HTMLModElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    cite: URL,
    dateTime: String
  }
});

define({
  tag: 'ol',
  ctor: function HTMLOListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    // Utility function (see the start attribute default value). Returns
    // the number of <li> children of this element
    _numitems: { get: function() {
      var items = 0;
      this.childNodes.forEach(function(n) {
        if (n.nodeType === Node.ELEMENT_NODE && n.tagName === "LI")
          items++;
      });
      return items;
    }}
  },
  attributes: {
    type: String,
    reversed: Boolean,
    start: {
      type: "long",
      default: function() {
       // The default value of the start attribute is 1 unless the list is
       // reversed. Then it is the # of li children
       if (this.reversed)
         return this._numitems;
       else
         return 1;
      }
    },
    // Obsolete
    compact: Boolean,
  }
});

define({
  tag: 'object',
  ctor: function HTMLObjectElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    data: URL,
    type: String,
    name: String,
    useMap: String,
    typeMustMatch: Boolean,
    width: String,
    height: String,
    // Obsolete
    align: String,
    archive: String,
    code: String,
    declare: Boolean,
    hspace: { type: "unsigned long", default: 0 },
    standby: String,
    vspace: { type: "unsigned long", default: 0 },
    codeBase: URL,
    codeType: String,
    border: { type: String, treatNullAsEmptyString: true },
  }
});

define({
  tag: 'optgroup',
  ctor: function HTMLOptGroupElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    disabled: Boolean,
    label: String
  }
});

define({
  tag: 'option',
  ctor: function HTMLOptionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    form: { get: function() {
      var p = this.parentNode;
      while (p && p.nodeType === Node.ELEMENT_NODE) {
        if (p.localName === 'select') return p.form;
        p = p.parentNode;
      }
    }}
  },
  attributes: {
    disabled: Boolean,
    defaultSelected: {name: 'selected', type: Boolean},
    label: String,
    value: String,
  }
});

define({
  tag: 'output',
  ctor: function HTMLOutputElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    // XXX Reflect for/htmlFor as a settable token list
    name: String
  }
});

define({
  tag: 'p',
  ctor: function HTMLParagraphElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});

define({
  tag: 'param',
  ctor: function HTMLParamElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String,
    value: String,
    // Obsolete
    type: String,
    valueType: String,
  }
});

define({
  tags: ['pre',/*legacy elements:*/'listing','xmp'],
  ctor: function HTMLPreElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    width: { type: "long", default: 0 },
  }
});

define({
  tag: 'progress',
  ctor: function HTMLProgressElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    max: {type: Number, float: true, default: 1.0, min: 0}
  }
});

define({
  tags: ['q', 'blockquote'],
  ctor: function HTMLQuoteElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    cite: URL
  }
});

define({
  tag: 'script',
  ctor: function HTMLScriptElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    text: {
      get: function() {
        var s = "";
        for(var i = 0, n = this.childNodes.length; i < n; i++) {
          var child = this.childNodes[i];
          if (child.nodeType === Node.TEXT_NODE)
            s += child._data;
        }
        return s;
      },
      set: function(value) {
        this.removeChildren();
        if (value !== null && value !== "") {
          this.appendChild(this.ownerDocument.createTextNode(value));
        }
      }
    }
  },
  attributes: {
    src: URL,
    type: String,
    charset: String,
    defer: Boolean,
    async: Boolean,
    crossOrigin: CORS,
    nonce: String,
    integrity: String,
  }
});

define({
  tag: 'select',
  ctor: function HTMLSelectElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: {
    form: formAssociatedProps.form,
    options: { get: function() {
      return this.getElementsByTagName('option');
    }}
  },
  attributes: {
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    multiple: Boolean,
    required: Boolean,
    size: {type: "unsigned long", default: 0}
  }
});

define({
  tag: 'source',
  ctor: function HTMLSourceElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    type: String,
    media: String
  }
});

define({
  tag: 'span',
  ctor: function HTMLSpanElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'style',
  ctor: function HTMLStyleElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    media: String,
    type: String,
    scoped: Boolean
  }
});

define({
  tag: 'caption',
  ctor: function HTMLTableCaptionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String,
  }
});


define({
  ctor: function HTMLTableCellElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    colSpan: {type: "unsigned long", default: 1},
    rowSpan: {type: "unsigned long", default: 1},
    //XXX Also reflect settable token list headers
    scope: { type: ['row','col','rowgroup','colgroup'], missing: '' },
    abbr: String,
    // Obsolete
    align: String,
    axis: String,
    height: String,
    width: String,
    ch: { name: 'char', type: String },
    chOff: { name: 'charoff', type: String },
    noWrap: Boolean,
    vAlign: String,
    bgColor: { type: String, treatNullAsEmptyString: true },
  }
});

define({
  tags: ['col', 'colgroup'],
  ctor: function HTMLTableColElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    span: {type: 'limited unsigned long with fallback', default: 1, min: 1},
    // Obsolete
    align: String,
    ch: { name: 'char', type: String },
    chOff: { name: 'charoff', type: String },
    vAlign: String,
    width: String,
  }
});

define({
  tag: 'table',
  ctor: function HTMLTableElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    rows: { get: function() {
      return this.getElementsByTagName('tr');
    }}
  },
  attributes: {
    // Obsolete
    align: String,
    border: String,
    frame: String,
    rules: String,
    summary: String,
    width: String,
    bgColor: { type: String, treatNullAsEmptyString: true },
    cellPadding: { type: String, treatNullAsEmptyString: true },
    cellSpacing: { type: String, treatNullAsEmptyString: true },
  }
});

define({
  tag: 'template',
  ctor: function HTMLTemplateElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
    this._contentFragment = doc._templateDoc.createDocumentFragment();
  },
  props: {
    content: { get: function() { return this._contentFragment; } },
    serialize: { value: function() { return this.content.serialize(); } }
  }
});

define({
  tag: 'tr',
  ctor: function HTMLTableRowElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    cells: { get: function() {
      return this.querySelectorAll('td,th');
    }}
  },
  attributes: {
    // Obsolete
    align: String,
    ch: { name: 'char', type: String },
    chOff: { name: 'charoff', type: String },
    vAlign: String,
    bgColor: { type: String, treatNullAsEmptyString: true },
  },
});

define({
  tags: ['thead', 'tfoot', 'tbody'],
  ctor: function HTMLTableSectionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    rows: { get: function() {
      return this.getElementsByTagName('tr');
    }}
  },
  attributes: {
    // Obsolete
    align: String,
    ch: { name: 'char', type: String },
    chOff: { name: 'charoff', type: String },
    vAlign: String,
  }
});

define({
  tag: 'textarea',
  ctor: function HTMLTextAreaElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    autocomplete: String, // It's complicated
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    placeholder: String,
    wrap: String,
    dirName: String,
    required: Boolean,
    readOnly: Boolean,
    rows: {type: 'limited unsigned long with fallback', default: 2 },
    cols: {type: 'limited unsigned long with fallback', default: 20 },
    maxLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},
    inputMode: { type: [ "verbatim", "latin", "latin-name", "latin-prose", "full-width-latin", "kana", "kana-name", "katakana", "numeric", "tel", "email", "url" ], missing: '' },
  }
});

define({
  tag: 'time',
  ctor: function HTMLTimeElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    dateTime: String,
    pubDate: Boolean
  }
});

define({
  tag: 'title',
  ctor: function HTMLTitleElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    text: { get: function() {
      return this.textContent;
    }}
  }
});

define({
  tag: 'ul',
  ctor: function HTMLUListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    type: String,
    // Obsolete
    compact: Boolean,
  }
});

define({
  ctor: function HTMLMediaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    crossOrigin: CORS,
    preload: { type:["metadata", "none", "auto", {value: "", alias: "auto"}], missing: 'auto' },
    loop: Boolean,
    autoplay: Boolean,
    mediaGroup: String,
    controls: Boolean,
    defaultMuted: {name: "muted", type: Boolean}
  }
});

define({
  tag: 'audio',
  superclass: htmlElements.HTMLMediaElement,
  ctor: function HTMLAudioElement(doc, localName, prefix) {
    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'video',
  superclass: htmlElements.HTMLMediaElement,
  ctor: function HTMLVideoElement(doc, localName, prefix) {
    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);
  },
  attributes: {
    poster: URL,
    width: {type: "unsigned long", min: 0, default: 0 },
    height: {type: "unsigned long", min: 0, default: 0 }
  }
});

define({
  tag: 'td',
  superclass: htmlElements.HTMLTableCellElement,
  ctor: function HTMLTableDataCellElement(doc, localName, prefix) {
    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'th',
  superclass: htmlElements.HTMLTableCellElement,
  ctor: function HTMLTableHeaderCellElement(doc, localName, prefix) {
    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);
  },
});

define({
  tag: 'frameset',
  ctor: function HTMLFrameSetElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'frame',
  ctor: function HTMLFrameElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});

define({
  tag: 'canvas',
  ctor: function HTMLCanvasElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    getContext: { value: utils.nyi },
    probablySupportsContext: { value: utils.nyi },
    setContext: { value: utils.nyi },
    transferControlToProxy: { value: utils.nyi },
    toDataURL: { value: utils.nyi },
    toBlob: { value: utils.nyi }
  },
  attributes: {
    width: { type: "unsigned long", default: 300},
    height: { type: "unsigned long", default: 150}
  }
});

define({
  tag: 'dialog',
  ctor: function HTMLDialogElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    show: { value: utils.nyi },
    showModal: { value: utils.nyi },
    close: { value: utils.nyi }
  },
  attributes: {
    open: Boolean,
    returnValue: String
  }
});

define({
  tag: 'menuitem',
  ctor: function HTMLMenuItemElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    // The menuitem's label
    _label: {
      get: function() {
        var val = this._getattr('label');
        if (val !== null && val !== '') { return val; }
        val = this.textContent;
        // Strip and collapse whitespace
        return val.replace(/[ \t\n\f\r]+/g, ' ').trim();
      }
    },
    // The menuitem label IDL attribute
    label: {
      get: function() {
        var val = this._getattr('label');
        if (val !== null) { return val; }
        return this._label;
      },
      set: function(v) {
        this._setattr('label', v);
      },
    }
  },
  attributes: {
    type: { type: ["command","checkbox","radio"], missing: 'command' },
    icon: URL,
    disabled: Boolean,
    checked: Boolean,
    radiogroup: String,
    default: Boolean
  }
});

define({
  tag: 'source',
  ctor: function HTMLSourceElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    srcset: String,
    sizes: String,
    media: String,
    src: URL,
    type: String
  }
});

define({
  tag: 'track',
  ctor: function HTMLTrackElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    srclang: String,
    label: String,
    default: Boolean,
    kind: { type: ["subtitles", "captions", "descriptions", "chapters", "metadata"], missing: 'subtitles', invalid: 'metadata' },
  },
  props: {
    NONE: { get: function() { return 0; } },
    LOADING: { get: function() { return 1; } },
    LOADED: { get: function() { return 2; } },
    ERROR: { get: function() { return 3; } },
    readyState: { get: utils.nyi },
    track: { get: utils.nyi }
  }
});

define({
  tags: [
    "abbr", "address", "article", "aside", "b", "bdi", "bdo",
    "cite", "code", "dd", "dfn", "dt", "em", "figcaption", "figure",
    "footer", "header", "hgroup", "i", "kbd", "main", "mark", "nav", "noscript",
    "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "section", "small", "strong",
    "sub", "summary", "sup", "u", "var", "wbr",
    // Legacy elements
    "acronym", "basefont", "big", "center", "nobr", "noembed", "noframes",
    "plaintext", "strike", "tt"
  ]
});


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* jshint eqnull: true */
/**
 * Zest (https://github.com/chjj/zest)
 * A css selector engine.
 * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)
 */

/**
 * Helpers
 */

var window = Object.create(null, {
  location: { get: function() {
    throw new Error('window.location is not supported.');
  } }
});

var compareDocumentPosition = function(a, b) {
      return a.compareDocumentPosition(b);
};

var order = function(a, b) {
  /* jshint bitwise: false */
  return compareDocumentPosition(a, b) & 2 ? 1 : -1;
};

var next = function(el) {
  while ((el = el.nextSibling)
         && el.nodeType !== 1);
  return el;
};

var prev = function(el) {
  while ((el = el.previousSibling)
         && el.nodeType !== 1);
  return el;
};

var child = function(el) {
  /*jshint -W084 */
  if (el = el.firstChild) {
    while (el.nodeType !== 1
           && (el = el.nextSibling));
  }
  return el;
};

var lastChild = function(el) {
  /*jshint -W084 */
  if (el = el.lastChild) {
    while (el.nodeType !== 1
           && (el = el.previousSibling));
  }
  return el;
};

var unquote = function(str) {
  if (!str) return str;
  var ch = str[0];
  if (ch === '"' || ch === '\'') {
    if (str[str.length-1] === ch) {
      str = str.slice(1, -1);
    } else {
      // bad string.
      str = str.slice(1);
    }
    return str.replace(rules.str_escape, function(s) {
      var m = /^\\(?:([0-9A-Fa-f]+)|([\r\n\f]+))/.exec(s);
      if (!m) { return s.slice(1); }
      if (m[2]) { return ''; /* escaped newlines are ignored in strings. */ }
      var cp = parseInt(m[1], 16);
      return String.fromCodePoint ? String.fromCodePoint(cp) :
        // Not all JavaScript implementations have String.fromCodePoint yet.
        String.fromCharCode(cp);
    });
  } else if (rules.ident.test(str)) {
    return decodeid(str);
  } else {
    // NUMBER, PERCENTAGE, DIMENSION, etc
    return str;
  }
};

var decodeid = function(str) {
  return str.replace(rules.escape, function(s) {
    var m = /^\\([0-9A-Fa-f]+)/.exec(s);
    if (!m) { return s[1]; }
    var cp = parseInt(m[1], 16);
    return String.fromCodePoint ? String.fromCodePoint(cp) :
      // Not all JavaScript implementations have String.fromCodePoint yet.
      String.fromCharCode(cp);
  });
};

var indexOf = (function() {
  if (Array.prototype.indexOf) {
    return Array.prototype.indexOf;
  }
  return function(obj, item) {
    var i = this.length;
    while (i--) {
      if (this[i] === item) return i;
    }
    return -1;
  };
})();

var makeInside = function(start, end) {
  var regex = rules.inside.source
    .replace(/</g, start)
    .replace(/>/g, end);

  return new RegExp(regex);
};

var replace = function(regex, name, val) {
  regex = regex.source;
  regex = regex.replace(name, val.source || val);
  return new RegExp(regex);
};

var truncateUrl = function(url, num) {
  return url
    .replace(/^(?:\w+:\/\/|\/+)/, '')
    .replace(/(?:\/+|\/*#.*?)$/, '')
    .split('/', num)
    .join('/');
};

/**
 * Handle `nth` Selectors
 */

var parseNth = function(param_, test) {
  var param = param_.replace(/\s+/g, '')
    , cap;

  if (param === 'even') {
    param = '2n+0';
  } else if (param === 'odd') {
    param = '2n+1';
  } else if (param.indexOf('n') === -1) {
    param = '0n' + param;
  }

  cap = /^([+-])?(\d+)?n([+-])?(\d+)?$/.exec(param);

  return {
    group: cap[1] === '-'
      ? -(cap[2] || 1)
      : +(cap[2] || 1),
    offset: cap[4]
      ? (cap[3] === '-' ? -cap[4] : +cap[4])
      : 0
  };
};

var nth = function(param_, test, last) {
  var param = parseNth(param_)
    , group = param.group
    , offset = param.offset
    , find = !last ? child : lastChild
    , advance = !last ? next : prev;

  return function(el) {
    if (el.parentNode.nodeType !== 1) return;

    var rel = find(el.parentNode)
      , pos = 0;

    while (rel) {
      if (test(rel, el)) pos++;
      if (rel === el) {
        pos -= offset;
        return group && pos
          ? (pos % group) === 0 && (pos < 0 === group < 0)
          : !pos;
      }
      rel = advance(rel);
    }
  };
};

/**
 * Simple Selectors
 */

var selectors = {
  '*': (function() {
    if (false/*function() {
      var el = document.createElement('div');
      el.appendChild(document.createComment(''));
      return !!el.getElementsByTagName('*')[0];
    }()*/) {
      return function(el) {
        if (el.nodeType === 1) return true;
      };
    }
    return function() {
      return true;
    };
  })(),
  'type': function(type) {
    type = type.toLowerCase();
    return function(el) {
      return el.nodeName.toLowerCase() === type;
    };
  },
  'attr': function(key, op, val, i) {
    op = operators[op];
    return function(el) {
      var attr;
      switch (key) {
        case 'for':
          attr = el.htmlFor;
          break;
        case 'class':
          // className is '' when non-existent
          // getAttribute('class') is null
          attr = el.className;
          if (attr === '' && el.getAttribute('class') == null) {
            attr = null;
          }
          break;
        case 'href':
          attr = el.getAttribute('href', 2);
          break;
        case 'title':
          // getAttribute('title') can be '' when non-existent sometimes?
          attr = el.getAttribute('title') || null;
          break;
        // careful with attributes with special getter functions
        case 'id':
        case 'lang':
        case 'dir':
        case 'accessKey':
        case 'hidden':
        case 'tabIndex':
        case 'style':
          if (el.getAttribute) {
            attr = el.getAttribute(key);
            break;
          }
        /* falls through */
        default:
          if (el.hasAttribute && !el.hasAttribute(key)) {
            break;
          }
          attr = el[key] != null
            ? el[key]
            : el.getAttribute && el.getAttribute(key);
          break;
      }
      if (attr == null) return;
      attr = attr + '';
      if (i) {
        attr = attr.toLowerCase();
        val = val.toLowerCase();
      }
      return op(attr, val);
    };
  },
  ':first-child': function(el) {
    return !prev(el) && el.parentNode.nodeType === 1;
  },
  ':last-child': function(el) {
    return !next(el) && el.parentNode.nodeType === 1;
  },
  ':only-child': function(el) {
    return !prev(el) && !next(el)
      && el.parentNode.nodeType === 1;
  },
  ':nth-child': function(param, last) {
    return nth(param, function() {
      return true;
    }, last);
  },
  ':nth-last-child': function(param) {
    return selectors[':nth-child'](param, true);
  },
  ':root': function(el) {
    return el.ownerDocument.documentElement === el;
  },
  ':empty': function(el) {
    return !el.firstChild;
  },
  ':not': function(sel) {
    var test = compileGroup(sel);
    return function(el) {
      return !test(el);
    };
  },
  ':first-of-type': function(el) {
    if (el.parentNode.nodeType !== 1) return;
    var type = el.nodeName;
    /*jshint -W084 */
    while (el = prev(el)) {
      if (el.nodeName === type) return;
    }
    return true;
  },
  ':last-of-type': function(el) {
    if (el.parentNode.nodeType !== 1) return;
    var type = el.nodeName;
    /*jshint -W084 */
    while (el = next(el)) {
      if (el.nodeName === type) return;
    }
    return true;
  },
  ':only-of-type': function(el) {
    return selectors[':first-of-type'](el)
        && selectors[':last-of-type'](el);
  },
  ':nth-of-type': function(param, last) {
    return nth(param, function(rel, el) {
      return rel.nodeName === el.nodeName;
    }, last);
  },
  ':nth-last-of-type': function(param) {
    return selectors[':nth-of-type'](param, true);
  },
  ':checked': function(el) {
    return !!(el.checked || el.selected);
  },
  ':indeterminate': function(el) {
    return !selectors[':checked'](el);
  },
  ':enabled': function(el) {
    return !el.disabled && el.type !== 'hidden';
  },
  ':disabled': function(el) {
    return !!el.disabled;
  },
  ':target': function(el) {
    return el.id === window.location.hash.substring(1);
  },
  ':focus': function(el) {
    return el === el.ownerDocument.activeElement;
  },
  ':matches': function(sel) {
    return compileGroup(sel);
  },
  ':nth-match': function(param, last) {
    var args = param.split(/\s*,\s*/)
      , arg = args.shift()
      , test = compileGroup(args.join(','));

    return nth(arg, test, last);
  },
  ':nth-last-match': function(param) {
    return selectors[':nth-match'](param, true);
  },
  ':links-here': function(el) {
    return el + '' === window.location + '';
  },
  ':lang': function(param) {
    return function(el) {
      while (el) {
        if (el.lang) return el.lang.indexOf(param) === 0;
        el = el.parentNode;
      }
    };
  },
  ':dir': function(param) {
    return function(el) {
      while (el) {
        if (el.dir) return el.dir === param;
        el = el.parentNode;
      }
    };
  },
  ':scope': function(el, con) {
    var context = con || el.ownerDocument;
    if (context.nodeType === 9) {
      return el === context.documentElement;
    }
    return el === context;
  },
  ':any-link': function(el) {
    return typeof el.href === 'string';
  },
  ':local-link': function(el) {
    if (el.nodeName) {
      return el.href && el.host === window.location.host;
    }
    var param = +el + 1;
    return function(el) {
      if (!el.href) return;

      var url = window.location + ''
        , href = el + '';

      return truncateUrl(url, param) === truncateUrl(href, param);
    };
  },
  ':default': function(el) {
    return !!el.defaultSelected;
  },
  ':valid': function(el) {
    return el.willValidate || (el.validity && el.validity.valid);
  },
  ':invalid': function(el) {
    return !selectors[':valid'](el);
  },
  ':in-range': function(el) {
    return el.value > el.min && el.value <= el.max;
  },
  ':out-of-range': function(el) {
    return !selectors[':in-range'](el);
  },
  ':required': function(el) {
    return !!el.required;
  },
  ':optional': function(el) {
    return !el.required;
  },
  ':read-only': function(el) {
    if (el.readOnly) return true;

    var attr = el.getAttribute('contenteditable')
      , prop = el.contentEditable
      , name = el.nodeName.toLowerCase();

    name = name !== 'input' && name !== 'textarea';

    return (name || el.disabled) && attr == null && prop !== 'true';
  },
  ':read-write': function(el) {
    return !selectors[':read-only'](el);
  },
  ':hover': function() {
    throw new Error(':hover is not supported.');
  },
  ':active': function() {
    throw new Error(':active is not supported.');
  },
  ':link': function() {
    throw new Error(':link is not supported.');
  },
  ':visited': function() {
    throw new Error(':visited is not supported.');
  },
  ':column': function() {
    throw new Error(':column is not supported.');
  },
  ':nth-column': function() {
    throw new Error(':nth-column is not supported.');
  },
  ':nth-last-column': function() {
    throw new Error(':nth-last-column is not supported.');
  },
  ':current': function() {
    throw new Error(':current is not supported.');
  },
  ':past': function() {
    throw new Error(':past is not supported.');
  },
  ':future': function() {
    throw new Error(':future is not supported.');
  },
  // Non-standard, for compatibility purposes.
  ':contains': function(param) {
    return function(el) {
      var text = el.innerText || el.textContent || el.value || '';
      return text.indexOf(param) !== -1;
    };
  },
  ':has': function(param) {
    return function(el) {
      return find(param, el).length > 0;
    };
  }
  // Potentially add more pseudo selectors for
  // compatibility with sizzle and most other
  // selector engines (?).
};

/**
 * Attribute Operators
 */

var operators = {
  '-': function() {
    return true;
  },
  '=': function(attr, val) {
    return attr === val;
  },
  '*=': function(attr, val) {
    return attr.indexOf(val) !== -1;
  },
  '~=': function(attr, val) {
    var i = attr.indexOf(val)
      , f
      , l;

    if (i === -1) return;
    f = attr[i - 1];
    l = attr[i + val.length];

    return (!f || f === ' ') && (!l || l === ' ');
  },
  '|=': function(attr, val) {
    var i = attr.indexOf(val)
      , l;

    if (i !== 0) return;
    l = attr[i + val.length];

    return l === '-' || !l;
  },
  '^=': function(attr, val) {
    return attr.indexOf(val) === 0;
  },
  '$=': function(attr, val) {
    return attr.indexOf(val) + val.length === attr.length;
  },
  // non-standard
  '!=': function(attr, val) {
    return attr !== val;
  }
};

/**
 * Combinator Logic
 */

var combinators = {
  ' ': function(test) {
    return function(el) {
      /*jshint -W084 */
      while (el = el.parentNode) {
        if (test(el)) return el;
      }
    };
  },
  '>': function(test) {
    return function(el) {
      /*jshint -W084 */
      if (el = el.parentNode) {
        return test(el) && el;
      }
    };
  },
  '+': function(test) {
    return function(el) {
      /*jshint -W084 */
      if (el = prev(el)) {
        return test(el) && el;
      }
    };
  },
  '~': function(test) {
    return function(el) {
      /*jshint -W084 */
      while (el = prev(el)) {
        if (test(el)) return el;
      }
    };
  },
  'noop': function(test) {
    return function(el) {
      return test(el) && el;
    };
  },
  'ref': function(test, name) {
    var node;

    function ref(el) {
      var doc = el.ownerDocument
        , nodes = doc.getElementsByTagName('*')
        , i = nodes.length;

      while (i--) {
        node = nodes[i];
        if (ref.test(el)) {
          node = null;
          return true;
        }
      }

      node = null;
    }

    ref.combinator = function(el) {
      if (!node || !node.getAttribute) return;

      var attr = node.getAttribute(name) || '';
      if (attr[0] === '#') attr = attr.substring(1);

      if (attr === el.id && test(node)) {
        return node;
      }
    };

    return ref;
  }
};

/**
 * Grammar
 */

var rules = {
  escape: /\\(?:[^0-9A-Fa-f\r\n]|[0-9A-Fa-f]{1,6}[\r\n\t ]?)/g,
  str_escape: /(escape)|\\(\n|\r\n?|\f)/g,
  nonascii: /[\u00A0-\uFFFF]/,
  cssid: /(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,
  qname: /^ *(cssid|\*)/,
  simple: /^(?:([.#]cssid)|pseudo|attr)/,
  ref: /^ *\/(cssid)\/ */,
  combinator: /^(?: +([^ \w*.#\\]) +|( )+|([^ \w*.#\\]))(?! *$)/,
  attr: /^\[(cssid)(?:([^\w]?=)(inside))?\]/,
  pseudo: /^(:cssid)(?:\((inside)\))?/,
  inside: /(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|<[^"'>]*>|\\["'>]|[^"'>])*/,
  ident: /^(cssid)$/
};

rules.cssid = replace(rules.cssid, 'nonascii', rules.nonascii);
rules.cssid = replace(rules.cssid, 'escape', rules.escape);
rules.qname = replace(rules.qname, 'cssid', rules.cssid);
rules.simple = replace(rules.simple, 'cssid', rules.cssid);
rules.ref = replace(rules.ref, 'cssid', rules.cssid);
rules.attr = replace(rules.attr, 'cssid', rules.cssid);
rules.pseudo = replace(rules.pseudo, 'cssid', rules.cssid);
rules.inside = replace(rules.inside, '[^"\'>]*', rules.inside);
rules.attr = replace(rules.attr, 'inside', makeInside('\\[', '\\]'));
rules.pseudo = replace(rules.pseudo, 'inside', makeInside('\\(', '\\)'));
rules.simple = replace(rules.simple, 'pseudo', rules.pseudo);
rules.simple = replace(rules.simple, 'attr', rules.attr);
rules.ident = replace(rules.ident, 'cssid', rules.cssid);
rules.str_escape = replace(rules.str_escape, 'escape', rules.escape);

/**
 * Compiling
 */

var compile = function(sel_) {
  var sel = sel_.replace(/^\s+|\s+$/g, '')
    , test
    , filter = []
    , buff = []
    , subject
    , qname
    , cap
    , op
    , ref;

  /*jshint -W084 */
  while (sel) {
    if (cap = rules.qname.exec(sel)) {
      sel = sel.substring(cap[0].length);
      qname = cap[1];
      buff.push(tok(qname, true));
    } else if (cap = rules.simple.exec(sel)) {
      sel = sel.substring(cap[0].length);
      qname = '*';
      buff.push(tok(qname, true));
      buff.push(tok(cap));
    } else {
      throw new SyntaxError('Invalid selector.');
    }

    while (cap = rules.simple.exec(sel)) {
      sel = sel.substring(cap[0].length);
      buff.push(tok(cap));
    }

    if (sel[0] === '!') {
      sel = sel.substring(1);
      subject = makeSubject();
      subject.qname = qname;
      buff.push(subject.simple);
    }

    if (cap = rules.ref.exec(sel)) {
      sel = sel.substring(cap[0].length);
      ref = combinators.ref(makeSimple(buff), decodeid(cap[1]));
      filter.push(ref.combinator);
      buff = [];
      continue;
    }

    if (cap = rules.combinator.exec(sel)) {
      sel = sel.substring(cap[0].length);
      op = cap[1] || cap[2] || cap[3];
      if (op === ',') {
        filter.push(combinators.noop(makeSimple(buff)));
        break;
      }
    } else {
      op = 'noop';
    }

    if (!combinators[op]) { throw new SyntaxError('Bad combinator.'); }
    filter.push(combinators[op](makeSimple(buff)));
    buff = [];
  }

  test = makeTest(filter);
  test.qname = qname;
  test.sel = sel;

  if (subject) {
    subject.lname = test.qname;

    subject.test = test;
    subject.qname = subject.qname;
    subject.sel = test.sel;
    test = subject;
  }

  if (ref) {
    ref.test = test;
    ref.qname = test.qname;
    ref.sel = test.sel;
    test = ref;
  }

  return test;
};

var tok = function(cap, qname) {
  // qname
  if (qname) {
    return cap === '*'
      ? selectors['*']
      : selectors.type(decodeid(cap));
  }

  // class/id
  if (cap[1]) {
    return cap[1][0] === '.'
	  // XXX unescape here?  or in attr?
      ? selectors.attr('class', '~=', decodeid(cap[1].substring(1)))
      : selectors.attr('id', '=', decodeid(cap[1].substring(1)));
  }

  // pseudo-name
  // inside-pseudo
  if (cap[2]) {
    return cap[3]
      ? selectors[decodeid(cap[2])](unquote(cap[3]))
      : selectors[decodeid(cap[2])];
  }

  // attr name
  // attr op
  // attr value
  if (cap[4]) {
    return selectors.attr(decodeid(cap[4]), cap[5] || '-', unquote(cap[6]), false);
  }

  throw new SyntaxError('Unknown Selector.');
};

var makeSimple = function(func) {
  var l = func.length
    , i;

  // Potentially make sure
  // `el` is truthy.
  if (l < 2) return func[0];

  return function(el) {
    if (!el) return;
    for (i = 0; i < l; i++) {
      if (!func[i](el)) return;
    }
    return true;
  };
};

var makeTest = function(func) {
  if (func.length < 2) {
    return function(el) {
      return !!func[0](el);
    };
  }
  return function(el) {
    var i = func.length;
    while (i--) {
      if (!(el = func[i](el))) return;
    }
    return true;
  };
};

var makeSubject = function() {
  var target;

  function subject(el) {
    var node = el.ownerDocument
      , scope = node.getElementsByTagName(subject.lname)
      , i = scope.length;

    while (i--) {
      if (subject.test(scope[i]) && target === el) {
        target = null;
        return true;
      }
    }

    target = null;
  }

  subject.simple = function(el) {
    target = el;
    return true;
  };

  return subject;
};

var compileGroup = function(sel) {
  var test = compile(sel)
    , tests = [ test ];

  while (test.sel) {
    test = compile(test.sel);
    tests.push(test);
  }

  if (tests.length < 2) return test;

  return function(el) {
    var l = tests.length
      , i = 0;

    for (; i < l; i++) {
      if (tests[i](el)) return true;
    }
  };
};

/**
 * Selection
 */

var find = function(sel, node) {
  var results = []
    , test = compile(sel)
    , scope = node.getElementsByTagName(test.qname)
    , i = 0
    , el;

  /*jshint -W084 */
  while (el = scope[i++]) {
    if (test(el)) results.push(el);
  }

  if (test.sel) {
    while (test.sel) {
      test = compile(test.sel);
      scope = node.getElementsByTagName(test.qname);
      i = 0;
      /*jshint -W084 */
      while (el = scope[i++]) {
        if (test(el) && indexOf.call(results, el) === -1) {
          results.push(el);
        }
      }
    }
    results.sort(order);
  }

  return results;
};

/**
 * Expose
 */

module.exports = exports = function(sel, context) {
  /* when context isn't a DocumentFragment and the selector is simple: */
  var id, r;
  if (context.nodeType !== 11 && sel.indexOf(' ') === -1) {
    if (sel[0] === '#' && context.rooted && /^#[A-Z_][-A-Z0-9_]*$/i.test(sel)) {
      if (context.doc._hasMultipleElementsWithId) {
        id = sel.substring(1);
        if (!context.doc._hasMultipleElementsWithId(id)) {
          r = context.doc.getElementById(id);
          return r ? [r] : [];
        }
      }
    }
    if (sel[0] === '.' && /^\.\w+$/.test(sel)) {
      return context.getElementsByClassName(sel.substring(1));
    }
    if (/^\w+$/.test(sel)) {
      return context.getElementsByTagName(sel);
    }
  }
  /* do things the hard/slow way */
  return find(sel, context);
};

exports.selectors = selectors;
exports.operators = operators;
exports.combinators = combinators;

exports.matches = function(el, sel) {
  var test = { sel: sel };
  do {
    test = compile(test.sel);
    if (test(el)) { return true; }
  } while (test.sel);
  return false;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// This grammar is from the XML and XML Namespace specs. It specifies whether
// a string (such as an element or attribute name) is a valid Name or QName.
//
// Name           ::= NameStartChar (NameChar)*
// NameStartChar  ::= ":" | [A-Z] | "_" | [a-z] |
//                    [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] |
//                    [#x370-#x37D] | [#x37F-#x1FFF] |
//                    [#x200C-#x200D] | [#x2070-#x218F] |
//                    [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
//                    [#xF900-#xFDCF] | [#xFDF0-#xFFFD] |
//                    [#x10000-#xEFFFF]
//
// NameChar       ::= NameStartChar | "-" | "." | [0-9] |
//                    #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//
// QName          ::= PrefixedName| UnprefixedName
// PrefixedName   ::= Prefix ':' LocalPart
// UnprefixedName ::= LocalPart
// Prefix         ::= NCName
// LocalPart      ::= NCName
// NCName         ::= Name - (Char* ':' Char*)
//                    # An XML Name, minus the ":"
//

exports.isValidName = isValidName;
exports.isValidQName = isValidQName;

// Most names will be ASCII only. Try matching against simple regexps first
var simplename = /^[_:A-Za-z][-.:\w]+$/;
var simpleqname = /^([_A-Za-z][-.\w]+|[_A-Za-z][-.\w]+:[_A-Za-z][-.\w]+)$/;

// If the regular expressions above fail, try more complex ones that work
// for any identifiers using codepoints from the Unicode BMP
var ncnamestartchars = "_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02ff\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
var ncnamechars = "-._A-Za-z0-9\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02ff\u0300-\u037D\u037F-\u1FFF\u200C\u200D\u203f\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";

var ncname = "[" + ncnamestartchars + "][" + ncnamechars + "]*";
var namestartchars = ncnamestartchars + ":";
var namechars = ncnamechars + ":";
var name = new RegExp("^[" + namestartchars + "]" + "[" + namechars + "]*$");
var qname = new RegExp("^(" + ncname + "|" + ncname + ":" + ncname + ")$");

// XML says that these characters are also legal:
// [#x10000-#xEFFFF].  So if the patterns above fail, and the
// target string includes surrogates, then try the following
// patterns that allow surrogates and then run an extra validation
// step to make sure that the surrogates are in valid pairs and in
// the right range.  Note that since the characters \uf0000 to \u1f0000
// are not allowed, it means that the high surrogate can only go up to
// \uDB7f instead of \uDBFF.
var hassurrogates = /[\uD800-\uDB7F\uDC00-\uDFFF]/;
var surrogatechars = /[\uD800-\uDB7F\uDC00-\uDFFF]/g;
var surrogatepairs = /[\uD800-\uDB7F][\uDC00-\uDFFF]/g;

// Modify the variables above to allow surrogates
ncnamestartchars += "\uD800-\uDB7F\uDC00-\uDFFF";
ncnamechars += "\uD800-\uDB7F\uDC00-\uDFFF";
ncname = "[" + ncnamestartchars + "][" + ncnamechars + "]*";
namestartchars = ncnamestartchars + ":";
namechars = ncnamechars + ":";

// Build another set of regexps that include surrogates
var surrogatename = new RegExp("^[" + namestartchars + "]" + "[" + namechars + "]*$");
var surrogateqname = new RegExp("^(" + ncname + "|" + ncname + ":" + ncname + ")$");

function isValidName(s) {
  if (simplename.test(s)) return true; // Plain ASCII
  if (name.test(s)) return true; // Unicode BMP

  // Maybe the tests above failed because s includes surrogate pairs
  // Most likely, though, they failed for some more basic syntax problem
  if (!hassurrogates.test(s)) return false;

  // Is the string a valid name if we allow surrogates?
  if (!surrogatename.test(s)) return false;

  // Finally, are the surrogates all correctly paired up?
  var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);
  return pairs !== null && 2*pairs.length === chars.length;
}

function isValidQName(s) {
  if (simpleqname.test(s)) return true; // Plain ASCII
  if (qname.test(s)) return true; // Unicode BMP

  if (!hassurrogates.test(s)) return false;
  if (!surrogateqname.test(s)) return false;
  var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);
  return pairs !== null && 2*pairs.length === chars.length;
}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(43)) :
	typeof define === 'function' && define.amd ? define('@angular/animations/browser', ['exports', '@angular/animations'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = {}),global.ng.animations));
}(this, (function (exports,_angular_animations) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} players
 * @return {?}
 */
function optimizeGroupPlayer(players) {
    switch (players.length) {
        case 0:
            return new _angular_animations.NoopAnimationPlayer();
        case 1:
            return players[0];
        default:
            return new _angular_animations.ɵAnimationGroupPlayer(players);
    }
}
/**
 * @param {?} driver
 * @param {?} normalizer
 * @param {?} element
 * @param {?} keyframes
 * @param {?=} preStyles
 * @param {?=} postStyles
 * @return {?}
 */
function normalizeKeyframes(driver, normalizer, element, keyframes, preStyles, postStyles) {
    if (preStyles === void 0) { preStyles = {}; }
    if (postStyles === void 0) { postStyles = {}; }
    var /** @type {?} */ errors = [];
    var /** @type {?} */ normalizedKeyframes = [];
    var /** @type {?} */ previousOffset = -1;
    var /** @type {?} */ previousKeyframe = null;
    keyframes.forEach(function (kf) {
        var /** @type {?} */ offset = /** @type {?} */ (kf['offset']);
        var /** @type {?} */ isSameOffset = offset == previousOffset;
        var /** @type {?} */ normalizedKeyframe = (isSameOffset && previousKeyframe) || {};
        Object.keys(kf).forEach(function (prop) {
            var /** @type {?} */ normalizedProp = prop;
            var /** @type {?} */ normalizedValue = kf[prop];
            if (prop !== 'offset') {
                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
                switch (normalizedValue) {
                    case _angular_animations.ɵPRE_STYLE:
                        normalizedValue = preStyles[prop];
                        break;
                    case _angular_animations.AUTO_STYLE:
                        normalizedValue = postStyles[prop];
                        break;
                    default:
                        normalizedValue =
                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
                        break;
                }
            }
            normalizedKeyframe[normalizedProp] = normalizedValue;
        });
        if (!isSameOffset) {
            normalizedKeyframes.push(normalizedKeyframe);
        }
        previousKeyframe = normalizedKeyframe;
        previousOffset = offset;
    });
    if (errors.length) {
        var /** @type {?} */ LINE_START = '\n - ';
        throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
    }
    return normalizedKeyframes;
}
/**
 * @param {?} player
 * @param {?} eventName
 * @param {?} event
 * @param {?} callback
 * @return {?}
 */
function listenOnPlayer(player, eventName, event, callback) {
    switch (eventName) {
        case 'start':
            player.onStart(function () { return callback(event && copyAnimationEvent(event, 'start', player.totalTime)); });
            break;
        case 'done':
            player.onDone(function () { return callback(event && copyAnimationEvent(event, 'done', player.totalTime)); });
            break;
        case 'destroy':
            player.onDestroy(function () { return callback(event && copyAnimationEvent(event, 'destroy', player.totalTime)); });
            break;
    }
}
/**
 * @param {?} e
 * @param {?=} phaseName
 * @param {?=} totalTime
 * @return {?}
 */
function copyAnimationEvent(e, phaseName, totalTime) {
    var /** @type {?} */ event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime);
    var /** @type {?} */ data = (/** @type {?} */ (e))['_data'];
    if (data != null) {
        (/** @type {?} */ (event))['_data'] = data;
    }
    return event;
}
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?=} phaseName
 * @param {?=} totalTime
 * @return {?}
 */
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
    if (phaseName === void 0) { phaseName = ''; }
    if (totalTime === void 0) { totalTime = 0; }
    return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
}
/**
 * @param {?} map
 * @param {?} key
 * @param {?} defaultValue
 * @return {?}
 */
function getOrSetAsInMap(map, key, defaultValue) {
    var /** @type {?} */ value;
    if (map instanceof Map) {
        value = map.get(key);
        if (!value) {
            map.set(key, value = defaultValue);
        }
    }
    else {
        value = map[key];
        if (!value) {
            value = map[key] = defaultValue;
        }
    }
    return value;
}
/**
 * @param {?} command
 * @return {?}
 */
function parseTimelineCommand(command) {
    var /** @type {?} */ separatorPos = command.indexOf(':');
    var /** @type {?} */ id = command.substring(1, separatorPos);
    var /** @type {?} */ action = command.substr(separatorPos + 1);
    return [id, action];
}
var _contains = function (elm1, elm2) { return false; };
var _matches = function (element, selector) {
    return false;
};
var _query = function (element, selector, multi) {
    return [];
};
if (typeof Element != 'undefined') {
    // this is well supported in all browsers
    _contains = function (elm1, elm2) { return /** @type {?} */ (elm1.contains(elm2)); };
    if (Element.prototype.matches) {
        _matches = function (element, selector) { return element.matches(selector); };
    }
    else {
        var /** @type {?} */ proto = /** @type {?} */ (Element.prototype);
        var /** @type {?} */ fn_1 = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||
            proto.oMatchesSelector || proto.webkitMatchesSelector;
        if (fn_1) {
            _matches = function (element, selector) { return fn_1.apply(element, [selector]); };
        }
    }
    _query = function (element, selector, multi) {
        var /** @type {?} */ results = [];
        if (multi) {
            results.push.apply(results, element.querySelectorAll(selector));
        }
        else {
            var /** @type {?} */ elm = element.querySelector(selector);
            if (elm) {
                results.push(elm);
            }
        }
        return results;
    };
}
/**
 * @param {?} prop
 * @return {?}
 */
function containsVendorPrefix(prop) {
    // Webkit is the only real popular vendor prefix nowadays
    // cc: http://shouldiprefix.com/
    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
}
var _CACHED_BODY = null;
var _IS_WEBKIT = false;
/**
 * @param {?} prop
 * @return {?}
 */
function validateStyleProperty(prop) {
    if (!_CACHED_BODY) {
        _CACHED_BODY = getBodyNode() || {};
        _IS_WEBKIT = /** @type {?} */ ((_CACHED_BODY)).style ? ('WebkitAppearance' in /** @type {?} */ ((_CACHED_BODY)).style) : false;
    }
    var /** @type {?} */ result = true;
    if (/** @type {?} */ ((_CACHED_BODY)).style && !containsVendorPrefix(prop)) {
        result = prop in /** @type {?} */ ((_CACHED_BODY)).style;
        if (!result && _IS_WEBKIT) {
            var /** @type {?} */ camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
            result = camelProp in /** @type {?} */ ((_CACHED_BODY)).style;
        }
    }
    return result;
}
/**
 * @return {?}
 */
function getBodyNode() {
    if (typeof document != 'undefined') {
        return document.body;
    }
    return null;
}
var matchesElement = _matches;
var containsElement = _contains;
var invokeQuery = _query;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental
 */
var NoopAnimationDriver = /** @class */ (function () {
    function NoopAnimationDriver() {
    }
    /**
     * @param {?} prop
     * @return {?}
     */
    NoopAnimationDriver.prototype.validateStyleProperty = /**
     * @param {?} prop
     * @return {?}
     */
    function (prop) { return validateStyleProperty(prop); };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    NoopAnimationDriver.prototype.matchesElement = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return matchesElement(element, selector);
    };
    /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    NoopAnimationDriver.prototype.containsElement = /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    function (elm1, elm2) { return containsElement(elm1, elm2); };
    /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    NoopAnimationDriver.prototype.query = /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    function (element, selector, multi) {
        return invokeQuery(element, selector, multi);
    };
    /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    NoopAnimationDriver.prototype.computeStyle = /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    function (element, prop, defaultValue) {
        return defaultValue || '';
    };
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    NoopAnimationDriver.prototype.animate = /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    function (element, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return new _angular_animations.NoopAnimationPlayer();
    };
    return NoopAnimationDriver;
}());
/**
 * \@experimental
 * @abstract
 */
var AnimationDriver = /** @class */ (function () {
    function AnimationDriver() {
    }
    AnimationDriver.NOOP = new NoopAnimationDriver();
    return AnimationDriver;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ONE_SECOND = 1000;
var SUBSTITUTION_EXPR_START = '{{';
var SUBSTITUTION_EXPR_END = '}}';
var ENTER_CLASSNAME = 'ng-enter';
var LEAVE_CLASSNAME = 'ng-leave';


var NG_TRIGGER_CLASSNAME = 'ng-trigger';
var NG_TRIGGER_SELECTOR = '.ng-trigger';
var NG_ANIMATING_CLASSNAME = 'ng-animating';
var NG_ANIMATING_SELECTOR = '.ng-animating';
/**
 * @param {?} value
 * @return {?}
 */
function resolveTimingValue(value) {
    if (typeof value == 'number')
        return value;
    var /** @type {?} */ matches = (/** @type {?} */ (value)).match(/^(-?[\.\d]+)(m?s)/);
    if (!matches || matches.length < 2)
        return 0;
    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}
/**
 * @param {?} value
 * @param {?} unit
 * @return {?}
 */
function _convertTimeValueToMS(value, unit) {
    switch (unit) {
        case 's':
            return value * ONE_SECOND;
        default:
            // ms or something else
            return value;
    }
}
/**
 * @param {?} timings
 * @param {?} errors
 * @param {?=} allowNegativeValues
 * @return {?}
 */
function resolveTiming(timings, errors, allowNegativeValues) {
    return timings.hasOwnProperty('duration') ? /** @type {?} */ (timings) :
        parseTimeExpression(/** @type {?} */ (timings), errors, allowNegativeValues);
}
/**
 * @param {?} exp
 * @param {?} errors
 * @param {?=} allowNegativeValues
 * @return {?}
 */
function parseTimeExpression(exp, errors, allowNegativeValues) {
    var /** @type {?} */ regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
    var /** @type {?} */ duration;
    var /** @type {?} */ delay = 0;
    var /** @type {?} */ easing = '';
    if (typeof exp === 'string') {
        var /** @type {?} */ matches = exp.match(regex);
        if (matches === null) {
            errors.push("The provided timing value \"" + exp + "\" is invalid.");
            return { duration: 0, delay: 0, easing: '' };
        }
        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
        var /** @type {?} */ delayMatch = matches[3];
        if (delayMatch != null) {
            delay = _convertTimeValueToMS(Math.floor(parseFloat(delayMatch)), matches[4]);
        }
        var /** @type {?} */ easingVal = matches[5];
        if (easingVal) {
            easing = easingVal;
        }
    }
    else {
        duration = /** @type {?} */ (exp);
    }
    if (!allowNegativeValues) {
        var /** @type {?} */ containsErrors = false;
        var /** @type {?} */ startIndex = errors.length;
        if (duration < 0) {
            errors.push("Duration values below 0 are not allowed for this animation step.");
            containsErrors = true;
        }
        if (delay < 0) {
            errors.push("Delay values below 0 are not allowed for this animation step.");
            containsErrors = true;
        }
        if (containsErrors) {
            errors.splice(startIndex, 0, "The provided timing value \"" + exp + "\" is invalid.");
        }
    }
    return { duration: duration, delay: delay, easing: easing };
}
/**
 * @param {?} obj
 * @param {?=} destination
 * @return {?}
 */
function copyObj(obj, destination) {
    if (destination === void 0) { destination = {}; }
    Object.keys(obj).forEach(function (prop) { destination[prop] = obj[prop]; });
    return destination;
}
/**
 * @param {?} styles
 * @return {?}
 */
function normalizeStyles(styles) {
    var /** @type {?} */ normalizedStyles = {};
    if (Array.isArray(styles)) {
        styles.forEach(function (data) { return copyStyles(data, false, normalizedStyles); });
    }
    else {
        copyStyles(styles, false, normalizedStyles);
    }
    return normalizedStyles;
}
/**
 * @param {?} styles
 * @param {?} readPrototype
 * @param {?=} destination
 * @return {?}
 */
function copyStyles(styles, readPrototype, destination) {
    if (destination === void 0) { destination = {}; }
    if (readPrototype) {
        // we make use of a for-in loop so that the
        // prototypically inherited properties are
        // revealed from the backFill map
        for (var /** @type {?} */ prop in styles) {
            destination[prop] = styles[prop];
        }
    }
    else {
        copyObj(styles, destination);
    }
    return destination;
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function setStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) {
            var /** @type {?} */ camelProp = dashCaseToCamelCase(prop);
            element.style[camelProp] = styles[prop];
        });
    }
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function eraseStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) {
            var /** @type {?} */ camelProp = dashCaseToCamelCase(prop);
            element.style[camelProp] = '';
        });
    }
}
/**
 * @param {?} steps
 * @return {?}
 */
function normalizeAnimationEntry(steps) {
    if (Array.isArray(steps)) {
        if (steps.length == 1)
            return steps[0];
        return _angular_animations.sequence(steps);
    }
    return /** @type {?} */ (steps);
}
/**
 * @param {?} value
 * @param {?} options
 * @param {?} errors
 * @return {?}
 */
function validateStyleParams(value, options, errors) {
    var /** @type {?} */ params = options.params || {};
    var /** @type {?} */ matches = extractStyleParams(value);
    if (matches.length) {
        matches.forEach(function (varName) {
            if (!params.hasOwnProperty(varName)) {
                errors.push("Unable to resolve the local animation param " + varName + " in the given list of values");
            }
        });
    }
}
var PARAM_REGEX = new RegExp(SUBSTITUTION_EXPR_START + "\\s*(.+?)\\s*" + SUBSTITUTION_EXPR_END, 'g');
/**
 * @param {?} value
 * @return {?}
 */
function extractStyleParams(value) {
    var /** @type {?} */ params = [];
    if (typeof value === 'string') {
        var /** @type {?} */ val = value.toString();
        var /** @type {?} */ match = void 0;
        while (match = PARAM_REGEX.exec(val)) {
            params.push(/** @type {?} */ (match[1]));
        }
        PARAM_REGEX.lastIndex = 0;
    }
    return params;
}
/**
 * @param {?} value
 * @param {?} params
 * @param {?} errors
 * @return {?}
 */
function interpolateParams(value, params, errors) {
    var /** @type {?} */ original = value.toString();
    var /** @type {?} */ str = original.replace(PARAM_REGEX, function (_, varName) {
        var /** @type {?} */ localVal = params[varName];
        // this means that the value was never overidden by the data passed in by the user
        if (!params.hasOwnProperty(varName)) {
            errors.push("Please provide a value for the animation param " + varName);
            localVal = '';
        }
        return localVal.toString();
    });
    // we do this to assert that numeric values stay as they are
    return str == original ? value : str;
}
/**
 * @param {?} iterator
 * @return {?}
 */
function iteratorToArray(iterator) {
    var /** @type {?} */ arr = [];
    var /** @type {?} */ item = iterator.next();
    while (!item.done) {
        arr.push(item.value);
        item = iterator.next();
    }
    return arr;
}
/**
 * @param {?} source
 * @param {?} destination
 * @return {?}
 */

var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        return m[1].toUpperCase();
    });
}
/**
 * @param {?} duration
 * @param {?} delay
 * @return {?}
 */
function allowPreviousPlayerStylesMerge(duration, delay) {
    return duration === 0 || delay === 0;
}
/**
 * @param {?} visitor
 * @param {?} node
 * @param {?} context
 * @return {?}
 */
function visitDslNode(visitor, node, context) {
    switch (node.type) {
        case 7 /* Trigger */:
            return visitor.visitTrigger(node, context);
        case 0 /* State */:
            return visitor.visitState(node, context);
        case 1 /* Transition */:
            return visitor.visitTransition(node, context);
        case 2 /* Sequence */:
            return visitor.visitSequence(node, context);
        case 3 /* Group */:
            return visitor.visitGroup(node, context);
        case 4 /* Animate */:
            return visitor.visitAnimate(node, context);
        case 5 /* Keyframes */:
            return visitor.visitKeyframes(node, context);
        case 6 /* Style */:
            return visitor.visitStyle(node, context);
        case 8 /* Reference */:
            return visitor.visitReference(node, context);
        case 9 /* AnimateChild */:
            return visitor.visitAnimateChild(node, context);
        case 10 /* AnimateRef */:
            return visitor.visitAnimateRef(node, context);
        case 11 /* Query */:
            return visitor.visitQuery(node, context);
        case 12 /* Stagger */:
            return visitor.visitStagger(node, context);
        default:
            throw new Error("Unable to resolve animation metadata node #" + node.type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ANY_STATE = '*';
/**
 * @param {?} transitionValue
 * @param {?} errors
 * @return {?}
 */
function parseTransitionExpr(transitionValue, errors) {
    var /** @type {?} */ expressions = [];
    if (typeof transitionValue == 'string') {
        (/** @type {?} */ (transitionValue))
            .split(/\s*,\s*/)
            .forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });
    }
    else {
        expressions.push(/** @type {?} */ (transitionValue));
    }
    return expressions;
}
/**
 * @param {?} eventStr
 * @param {?} expressions
 * @param {?} errors
 * @return {?}
 */
function parseInnerTransitionStr(eventStr, expressions, errors) {
    if (eventStr[0] == ':') {
        var /** @type {?} */ result = parseAnimationAlias(eventStr, errors);
        if (typeof result == 'function') {
            expressions.push(result);
            return;
        }
        eventStr = /** @type {?} */ (result);
    }
    var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (match == null || match.length < 4) {
        errors.push("The provided transition expression \"" + eventStr + "\" is not supported");
        return expressions;
    }
    var /** @type {?} */ fromState = match[1];
    var /** @type {?} */ separator = match[2];
    var /** @type {?} */ toState = match[3];
    expressions.push(makeLambdaFromStates(fromState, toState));
    var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
        expressions.push(makeLambdaFromStates(toState, fromState));
    }
}
/**
 * @param {?} alias
 * @param {?} errors
 * @return {?}
 */
function parseAnimationAlias(alias, errors) {
    switch (alias) {
        case ':enter':
            return 'void => *';
        case ':leave':
            return '* => void';
        case ':increment':
            return function (fromState, toState) { return parseFloat(toState) > parseFloat(fromState); };
        case ':decrement':
            return function (fromState, toState) { return parseFloat(toState) < parseFloat(fromState); };
        default:
            errors.push("The transition alias value \"" + alias + "\" is not supported");
            return '* => *';
    }
}
// DO NOT REFACTOR ... keep the follow set instantiations
// with the values intact (closure compiler for some reason
// removes follow-up lines that add the values outside of
// the constructor...
var TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
var FALSE_BOOLEAN_VALUES = new Set(['false', '0']);
/**
 * @param {?} lhs
 * @param {?} rhs
 * @return {?}
 */
function makeLambdaFromStates(lhs, rhs) {
    var /** @type {?} */ LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
    var /** @type {?} */ RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
    return function (fromState, toState) {
        var /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;
        var /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;
        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
        }
        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
        }
        return lhsMatch && rhsMatch;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SELF_TOKEN = ':self';
var SELF_TOKEN_REGEX = new RegExp("s*" + SELF_TOKEN + "s*,?", 'g');
/**
 * @param {?} driver
 * @param {?} metadata
 * @param {?} errors
 * @return {?}
 */
function buildAnimationAst(driver, metadata, errors) {
    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
}
var ROOT_SELECTOR = '';
var AnimationAstBuilderVisitor = /** @class */ (function () {
    function AnimationAstBuilderVisitor(_driver) {
        this._driver = _driver;
    }
    /**
     * @param {?} metadata
     * @param {?} errors
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.build = /**
     * @param {?} metadata
     * @param {?} errors
     * @return {?}
     */
    function (metadata, errors) {
        var /** @type {?} */ context = new AnimationAstBuilderContext(errors);
        this._resetContextStyleTimingState(context);
        return /** @type {?} */ (visitDslNode(this, normalizeAnimationEntry(metadata), context));
    };
    /**
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype._resetContextStyleTimingState = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        context.currentQuerySelector = ROOT_SELECTOR;
        context.collectedStyles = {};
        context.collectedStyles[ROOT_SELECTOR] = {};
        context.currentTime = 0;
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitTrigger = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var _this = this;
        var /** @type {?} */ queryCount = context.queryCount = 0;
        var /** @type {?} */ depCount = context.depCount = 0;
        var /** @type {?} */ states = [];
        var /** @type {?} */ transitions = [];
        if (metadata.name.charAt(0) == '@') {
            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
        }
        metadata.definitions.forEach(function (def) {
            _this._resetContextStyleTimingState(context);
            if (def.type == 0 /* State */) {
                var /** @type {?} */ stateDef_1 = /** @type {?} */ (def);
                var /** @type {?} */ name_1 = stateDef_1.name;
                name_1.split(/\s*,\s*/).forEach(function (n) {
                    stateDef_1.name = n;
                    states.push(_this.visitState(stateDef_1, context));
                });
                stateDef_1.name = name_1;
            }
            else if (def.type == 1 /* Transition */) {
                var /** @type {?} */ transition = _this.visitTransition(/** @type {?} */ (def), context);
                queryCount += transition.queryCount;
                depCount += transition.depCount;
                transitions.push(transition);
            }
            else {
                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
            }
        });
        return {
            type: 7 /* Trigger */,
            name: metadata.name, states: states, transitions: transitions, queryCount: queryCount, depCount: depCount,
            options: null
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitState = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var /** @type {?} */ styleAst = this.visitStyle(metadata.styles, context);
        var /** @type {?} */ astParams = (metadata.options && metadata.options.params) || null;
        if (styleAst.containsDynamicStyles) {
            var /** @type {?} */ missingSubs_1 = new Set();
            var /** @type {?} */ params_1 = astParams || {};
            styleAst.styles.forEach(function (value) {
                if (isObject(value)) {
                    var /** @type {?} */ stylesObj_1 = /** @type {?} */ (value);
                    Object.keys(stylesObj_1).forEach(function (prop) {
                        extractStyleParams(stylesObj_1[prop]).forEach(function (sub) {
                            if (!params_1.hasOwnProperty(sub)) {
                                missingSubs_1.add(sub);
                            }
                        });
                    });
                }
            });
            if (missingSubs_1.size) {
                var /** @type {?} */ missingSubsArr = iteratorToArray(missingSubs_1.values());
                context.errors.push("state(\"" + metadata.name + "\", ...) must define default values for all the following style substitutions: " + missingSubsArr.join(', '));
            }
        }
        return {
            type: 0 /* State */,
            name: metadata.name,
            style: styleAst,
            options: astParams ? { params: astParams } : null
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitTransition = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        context.queryCount = 0;
        context.depCount = 0;
        var /** @type {?} */ animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
        var /** @type {?} */ matchers = parseTransitionExpr(metadata.expr, context.errors);
        return {
            type: 1 /* Transition */,
            matchers: matchers,
            animation: animation,
            queryCount: context.queryCount,
            depCount: context.depCount,
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitSequence = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var _this = this;
        return {
            type: 2 /* Sequence */,
            steps: metadata.steps.map(function (s) { return visitDslNode(_this, s, context); }),
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitGroup = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var _this = this;
        var /** @type {?} */ currentTime = context.currentTime;
        var /** @type {?} */ furthestTime = 0;
        var /** @type {?} */ steps = metadata.steps.map(function (step) {
            context.currentTime = currentTime;
            var /** @type {?} */ innerAst = visitDslNode(_this, step, context);
            furthestTime = Math.max(furthestTime, context.currentTime);
            return innerAst;
        });
        context.currentTime = furthestTime;
        return {
            type: 3 /* Group */,
            steps: steps,
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitAnimate = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var /** @type {?} */ timingAst = constructTimingAst(metadata.timings, context.errors);
        context.currentAnimateTimings = timingAst;
        var /** @type {?} */ styleAst;
        var /** @type {?} */ styleMetadata = metadata.styles ? metadata.styles : _angular_animations.style({});
        if (styleMetadata.type == 5 /* Keyframes */) {
            styleAst = this.visitKeyframes(/** @type {?} */ (styleMetadata), context);
        }
        else {
            var /** @type {?} */ styleMetadata_1 = /** @type {?} */ (metadata.styles);
            var /** @type {?} */ isEmpty = false;
            if (!styleMetadata_1) {
                isEmpty = true;
                var /** @type {?} */ newStyleData = {};
                if (timingAst.easing) {
                    newStyleData['easing'] = timingAst.easing;
                }
                styleMetadata_1 = _angular_animations.style(newStyleData);
            }
            context.currentTime += timingAst.duration + timingAst.delay;
            var /** @type {?} */ _styleAst = this.visitStyle(styleMetadata_1, context);
            _styleAst.isEmptyStep = isEmpty;
            styleAst = _styleAst;
        }
        context.currentAnimateTimings = null;
        return {
            type: 4 /* Animate */,
            timings: timingAst,
            style: styleAst,
            options: null
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitStyle = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var /** @type {?} */ ast = this._makeStyleAst(metadata, context);
        this._validateStyleAst(ast, context);
        return ast;
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype._makeStyleAst = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var /** @type {?} */ styles = [];
        if (Array.isArray(metadata.styles)) {
            (/** @type {?} */ (metadata.styles)).forEach(function (styleTuple) {
                if (typeof styleTuple == 'string') {
                    if (styleTuple == _angular_animations.AUTO_STYLE) {
                        styles.push(/** @type {?} */ (styleTuple));
                    }
                    else {
                        context.errors.push("The provided style string value " + styleTuple + " is not allowed.");
                    }
                }
                else {
                    styles.push(/** @type {?} */ (styleTuple));
                }
            });
        }
        else {
            styles.push(metadata.styles);
        }
        var /** @type {?} */ containsDynamicStyles = false;
        var /** @type {?} */ collectedEasing = null;
        styles.forEach(function (styleData) {
            if (isObject(styleData)) {
                var /** @type {?} */ styleMap = /** @type {?} */ (styleData);
                var /** @type {?} */ easing = styleMap['easing'];
                if (easing) {
                    collectedEasing = /** @type {?} */ (easing);
                    delete styleMap['easing'];
                }
                if (!containsDynamicStyles) {
                    for (var /** @type {?} */ prop in styleMap) {
                        var /** @type {?} */ value = styleMap[prop];
                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                            containsDynamicStyles = true;
                            break;
                        }
                    }
                }
            }
        });
        return {
            type: 6 /* Style */,
            styles: styles,
            easing: collectedEasing,
            offset: metadata.offset, containsDynamicStyles: containsDynamicStyles,
            options: null
        };
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype._validateStyleAst = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var _this = this;
        var /** @type {?} */ timings = context.currentAnimateTimings;
        var /** @type {?} */ endTime = context.currentTime;
        var /** @type {?} */ startTime = context.currentTime;
        if (timings && startTime > 0) {
            startTime -= timings.duration + timings.delay;
        }
        ast.styles.forEach(function (tuple) {
            if (typeof tuple == 'string')
                return;
            Object.keys(tuple).forEach(function (prop) {
                if (!_this._driver.validateStyleProperty(prop)) {
                    context.errors.push("The provided animation property \"" + prop + "\" is not a supported CSS property for animations");
                    return;
                }
                var /** @type {?} */ collectedStyles = context.collectedStyles[/** @type {?} */ ((context.currentQuerySelector))];
                var /** @type {?} */ collectedEntry = collectedStyles[prop];
                var /** @type {?} */ updateCollectedStyle = true;
                if (collectedEntry) {
                    if (startTime != endTime && startTime >= collectedEntry.startTime &&
                        endTime <= collectedEntry.endTime) {
                        context.errors.push("The CSS property \"" + prop + "\" that exists between the times of \"" + collectedEntry.startTime + "ms\" and \"" + collectedEntry.endTime + "ms\" is also being animated in a parallel animation between the times of \"" + startTime + "ms\" and \"" + endTime + "ms\"");
                        updateCollectedStyle = false;
                    }
                    // we always choose the smaller start time value since we
                    // want to have a record of the entire animation window where
                    // the style property is being animated in between
                    startTime = collectedEntry.startTime;
                }
                if (updateCollectedStyle) {
                    collectedStyles[prop] = { startTime: startTime, endTime: endTime };
                }
                if (context.options) {
                    validateStyleParams(tuple[prop], context.options, context.errors);
                }
            });
        });
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitKeyframes = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var _this = this;
        var /** @type {?} */ ast = { type: 5 /* Keyframes */, styles: [], options: null };
        if (!context.currentAnimateTimings) {
            context.errors.push("keyframes() must be placed inside of a call to animate()");
            return ast;
        }
        var /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;
        var /** @type {?} */ totalKeyframesWithOffsets = 0;
        var /** @type {?} */ offsets = [];
        var /** @type {?} */ offsetsOutOfOrder = false;
        var /** @type {?} */ keyframesOutOfRange = false;
        var /** @type {?} */ previousOffset = 0;
        var /** @type {?} */ keyframes = metadata.steps.map(function (styles) {
            var /** @type {?} */ style$$1 = _this._makeStyleAst(styles, context);
            var /** @type {?} */ offsetVal = style$$1.offset != null ? style$$1.offset : consumeOffset(style$$1.styles);
            var /** @type {?} */ offset = 0;
            if (offsetVal != null) {
                totalKeyframesWithOffsets++;
                offset = style$$1.offset = offsetVal;
            }
            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
            previousOffset = offset;
            offsets.push(offset);
            return style$$1;
        });
        if (keyframesOutOfRange) {
            context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
        }
        if (offsetsOutOfOrder) {
            context.errors.push("Please ensure that all keyframe offsets are in order");
        }
        var /** @type {?} */ length = metadata.steps.length;
        var /** @type {?} */ generatedOffset = 0;
        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
            context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
        }
        else if (totalKeyframesWithOffsets == 0) {
            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
        }
        var /** @type {?} */ limit = length - 1;
        var /** @type {?} */ currentTime = context.currentTime;
        var /** @type {?} */ currentAnimateTimings = /** @type {?} */ ((context.currentAnimateTimings));
        var /** @type {?} */ animateDuration = currentAnimateTimings.duration;
        keyframes.forEach(function (kf, i) {
            var /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];
            var /** @type {?} */ durationUpToThisFrame = offset * animateDuration;
            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
            currentAnimateTimings.duration = durationUpToThisFrame;
            _this._validateStyleAst(kf, context);
            kf.offset = offset;
            ast.styles.push(kf);
        });
        return ast;
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitReference = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        return {
            type: 8 /* Reference */,
            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitAnimateChild = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        context.depCount++;
        return {
            type: 9 /* AnimateChild */,
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitAnimateRef = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        return {
            type: 10 /* AnimateRef */,
            animation: this.visitReference(metadata.animation, context),
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitQuery = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        var /** @type {?} */ parentSelector = /** @type {?} */ ((context.currentQuerySelector));
        var /** @type {?} */ options = /** @type {?} */ ((metadata.options || {}));
        context.queryCount++;
        context.currentQuery = metadata;
        var _a = normalizeSelector(metadata.selector), selector = _a[0], includeSelf = _a[1];
        context.currentQuerySelector =
            parentSelector.length ? (parentSelector + ' ' + selector) : selector;
        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
        var /** @type {?} */ animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
        context.currentQuery = null;
        context.currentQuerySelector = parentSelector;
        return {
            type: 11 /* Query */,
            selector: selector,
            limit: options.limit || 0,
            optional: !!options.optional, includeSelf: includeSelf, animation: animation,
            originalSelector: metadata.selector,
            options: normalizeAnimationOptions(metadata.options)
        };
    };
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    AnimationAstBuilderVisitor.prototype.visitStagger = /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    function (metadata, context) {
        if (!context.currentQuery) {
            context.errors.push("stagger() can only be used inside of query()");
        }
        var /** @type {?} */ timings = metadata.timings === 'full' ?
            { duration: 0, delay: 0, easing: 'full' } :
            resolveTiming(metadata.timings, context.errors, true);
        return {
            type: 12 /* Stagger */,
            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings: timings,
            options: null
        };
    };
    return AnimationAstBuilderVisitor;
}());
/**
 * @param {?} selector
 * @return {?}
 */
function normalizeSelector(selector) {
    var /** @type {?} */ hasAmpersand = selector.split(/\s*,\s*/).find(function (token) { return token == SELF_TOKEN; }) ? true : false;
    if (hasAmpersand) {
        selector = selector.replace(SELF_TOKEN_REGEX, '');
    }
    // the :enter and :leave selectors are filled in at runtime during timeline building
    selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR)
        .replace(/@\w+/g, function (match) { return NG_TRIGGER_SELECTOR + '-' + match.substr(1); })
        .replace(/:animating/g, NG_ANIMATING_SELECTOR);
    return [selector, hasAmpersand];
}
/**
 * @param {?} obj
 * @return {?}
 */
function normalizeParams(obj) {
    return obj ? copyObj(obj) : null;
}
var AnimationAstBuilderContext = /** @class */ (function () {
    function AnimationAstBuilderContext(errors) {
        this.errors = errors;
        this.queryCount = 0;
        this.depCount = 0;
        this.currentTransition = null;
        this.currentQuery = null;
        this.currentQuerySelector = null;
        this.currentAnimateTimings = null;
        this.currentTime = 0;
        this.collectedStyles = {};
        this.options = null;
    }
    return AnimationAstBuilderContext;
}());
/**
 * @param {?} styles
 * @return {?}
 */
function consumeOffset(styles) {
    if (typeof styles == 'string')
        return null;
    var /** @type {?} */ offset = null;
    if (Array.isArray(styles)) {
        styles.forEach(function (styleTuple) {
            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
                var /** @type {?} */ obj = /** @type {?} */ (styleTuple);
                offset = parseFloat(/** @type {?} */ (obj['offset']));
                delete obj['offset'];
            }
        });
    }
    else if (isObject(styles) && styles.hasOwnProperty('offset')) {
        var /** @type {?} */ obj = /** @type {?} */ (styles);
        offset = parseFloat(/** @type {?} */ (obj['offset']));
        delete obj['offset'];
    }
    return offset;
}
/**
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return !Array.isArray(value) && typeof value == 'object';
}
/**
 * @param {?} value
 * @param {?} errors
 * @return {?}
 */
function constructTimingAst(value, errors) {
    var /** @type {?} */ timings = null;
    if (value.hasOwnProperty('duration')) {
        timings = /** @type {?} */ (value);
    }
    else if (typeof value == 'number') {
        var /** @type {?} */ duration = resolveTiming(/** @type {?} */ (value), errors).duration;
        return makeTimingAst(/** @type {?} */ (duration), 0, '');
    }
    var /** @type {?} */ strValue = /** @type {?} */ (value);
    var /** @type {?} */ isDynamic = strValue.split(/\s+/).some(function (v) { return v.charAt(0) == '{' && v.charAt(1) == '{'; });
    if (isDynamic) {
        var /** @type {?} */ ast = /** @type {?} */ (makeTimingAst(0, 0, ''));
        ast.dynamic = true;
        ast.strValue = strValue;
        return /** @type {?} */ (ast);
    }
    timings = timings || resolveTiming(strValue, errors);
    return makeTimingAst(timings.duration, timings.delay, timings.easing);
}
/**
 * @param {?} options
 * @return {?}
 */
function normalizeAnimationOptions(options) {
    if (options) {
        options = copyObj(options);
        if (options['params']) {
            options['params'] = /** @type {?} */ ((normalizeParams(options['params'])));
        }
    }
    else {
        options = {};
    }
    return options;
}
/**
 * @param {?} duration
 * @param {?} delay
 * @param {?} easing
 * @return {?}
 */
function makeTimingAst(duration, delay, easing) {
    return { duration: duration, delay: delay, easing: easing };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @param {?} element
 * @param {?} keyframes
 * @param {?} preStyleProps
 * @param {?} postStyleProps
 * @param {?} duration
 * @param {?} delay
 * @param {?=} easing
 * @param {?=} subTimeline
 * @return {?}
 */
function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing, subTimeline) {
    if (easing === void 0) { easing = null; }
    if (subTimeline === void 0) { subTimeline = false; }
    return {
        type: 1 /* TimelineAnimation */,
        element: element,
        keyframes: keyframes,
        preStyleProps: preStyleProps,
        postStyleProps: postStyleProps,
        duration: duration,
        delay: delay,
        totalTime: duration + delay, easing: easing, subTimeline: subTimeline
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ElementInstructionMap = /** @class */ (function () {
    function ElementInstructionMap() {
        this._map = new Map();
    }
    /**
     * @param {?} element
     * @return {?}
     */
    ElementInstructionMap.prototype.consume = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ instructions = this._map.get(element);
        if (instructions) {
            this._map.delete(element);
        }
        else {
            instructions = [];
        }
        return instructions;
    };
    /**
     * @param {?} element
     * @param {?} instructions
     * @return {?}
     */
    ElementInstructionMap.prototype.append = /**
     * @param {?} element
     * @param {?} instructions
     * @return {?}
     */
    function (element, instructions) {
        var /** @type {?} */ existingInstructions = this._map.get(element);
        if (!existingInstructions) {
            this._map.set(element, existingInstructions = []);
        }
        existingInstructions.push.apply(existingInstructions, instructions);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ElementInstructionMap.prototype.has = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { return this._map.has(element); };
    /**
     * @return {?}
     */
    ElementInstructionMap.prototype.clear = /**
     * @return {?}
     */
    function () { this._map.clear(); };
    return ElementInstructionMap;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ONE_FRAME_IN_MILLISECONDS = 1;
var ENTER_TOKEN = ':enter';
var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
var LEAVE_TOKEN = ':leave';
var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
/**
 * @param {?} driver
 * @param {?} rootElement
 * @param {?} ast
 * @param {?} enterClassName
 * @param {?} leaveClassName
 * @param {?=} startingStyles
 * @param {?=} finalStyles
 * @param {?=} options
 * @param {?=} subInstructions
 * @param {?=} errors
 * @return {?}
 */
function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors) {
    if (startingStyles === void 0) { startingStyles = {}; }
    if (finalStyles === void 0) { finalStyles = {}; }
    if (errors === void 0) { errors = []; }
    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}
var AnimationTimelineBuilderVisitor = /** @class */ (function () {
    function AnimationTimelineBuilderVisitor() {
    }
    /**
     * @param {?} driver
     * @param {?} rootElement
     * @param {?} ast
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?} startingStyles
     * @param {?} finalStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @param {?=} errors
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.buildKeyframes = /**
     * @param {?} driver
     * @param {?} rootElement
     * @param {?} ast
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?} startingStyles
     * @param {?} finalStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @param {?=} errors
     * @return {?}
     */
    function (driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors) {
        if (errors === void 0) { errors = []; }
        subInstructions = subInstructions || new ElementInstructionMap();
        var /** @type {?} */ context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
        context.options = options;
        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
        visitDslNode(this, ast, context);
        // this checks to see if an actual animation happened
        var /** @type {?} */ timelines = context.timelines.filter(function (timeline) { return timeline.containsAnimation(); });
        if (timelines.length && Object.keys(finalStyles).length) {
            var /** @type {?} */ tl = timelines[timelines.length - 1];
            if (!tl.allowOnlyTimelineStyles()) {
                tl.setStyles([finalStyles], null, context.errors, options);
            }
        }
        return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :
            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitTrigger = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitState = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitTransition = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitAnimateChild = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ elementInstructions = context.subInstructions.consume(context.element);
        if (elementInstructions) {
            var /** @type {?} */ innerContext = context.createSubContext(ast.options);
            var /** @type {?} */ startTime = context.currentTimeline.currentTime;
            var /** @type {?} */ endTime = this._visitSubInstructions(elementInstructions, innerContext, /** @type {?} */ (innerContext.options));
            if (startTime != endTime) {
                // we do this on the upper context because we created a sub context for
                // the sub child animations
                context.transformIntoNewTimeline(endTime);
            }
        }
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitAnimateRef = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ innerContext = context.createSubContext(ast.options);
        innerContext.transformIntoNewTimeline();
        this.visitReference(ast.animation, innerContext);
        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
        context.previousNode = ast;
    };
    /**
     * @param {?} instructions
     * @param {?} context
     * @param {?} options
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype._visitSubInstructions = /**
     * @param {?} instructions
     * @param {?} context
     * @param {?} options
     * @return {?}
     */
    function (instructions, context, options) {
        var /** @type {?} */ startTime = context.currentTimeline.currentTime;
        var /** @type {?} */ furthestTime = startTime;
        // this is a special-case for when a user wants to skip a sub
        // animation from being fired entirely.
        var /** @type {?} */ duration = options.duration != null ? resolveTimingValue(options.duration) : null;
        var /** @type {?} */ delay = options.delay != null ? resolveTimingValue(options.delay) : null;
        if (duration !== 0) {
            instructions.forEach(function (instruction) {
                var /** @type {?} */ instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
                furthestTime =
                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
            });
        }
        return furthestTime;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitReference = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        context.updateOptions(ast.options, true);
        visitDslNode(this, ast.animation, context);
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitSequence = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var _this = this;
        var /** @type {?} */ subContextCount = context.subContextCount;
        var /** @type {?} */ ctx = context;
        var /** @type {?} */ options = ast.options;
        if (options && (options.params || options.delay)) {
            ctx = context.createSubContext(options);
            ctx.transformIntoNewTimeline();
            if (options.delay != null) {
                if (ctx.previousNode.type == 6 /* Style */) {
                    ctx.currentTimeline.snapshotCurrentStyles();
                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
                }
                var /** @type {?} */ delay = resolveTimingValue(options.delay);
                ctx.delayNextStep(delay);
            }
        }
        if (ast.steps.length) {
            ast.steps.forEach(function (s) { return visitDslNode(_this, s, ctx); });
            // this is here just incase the inner steps only contain or end with a style() call
            ctx.currentTimeline.applyStylesToKeyframe();
            // this means that some animation function within the sequence
            // ended up creating a sub timeline (which means the current
            // timeline cannot overlap with the contents of the sequence)
            if (ctx.subContextCount > subContextCount) {
                ctx.transformIntoNewTimeline();
            }
        }
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitGroup = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var _this = this;
        var /** @type {?} */ innerTimelines = [];
        var /** @type {?} */ furthestTime = context.currentTimeline.currentTime;
        var /** @type {?} */ delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
        ast.steps.forEach(function (s) {
            var /** @type {?} */ innerContext = context.createSubContext(ast.options);
            if (delay) {
                innerContext.delayNextStep(delay);
            }
            visitDslNode(_this, s, innerContext);
            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
            innerTimelines.push(innerContext.currentTimeline);
        });
        // this operation is run after the AST loop because otherwise
        // if the parent timeline's collected styles were updated then
        // it would pass in invalid data into the new-to-be forked items
        innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });
        context.transformIntoNewTimeline(furthestTime);
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype._visitTiming = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        if ((/** @type {?} */ (ast)).dynamic) {
            var /** @type {?} */ strValue = (/** @type {?} */ (ast)).strValue;
            var /** @type {?} */ timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
            return resolveTiming(timingValue, context.errors);
        }
        else {
            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
        }
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitAnimate = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
        var /** @type {?} */ timeline = context.currentTimeline;
        if (timings.delay) {
            context.incrementTime(timings.delay);
            timeline.snapshotCurrentStyles();
        }
        var /** @type {?} */ style$$1 = ast.style;
        if (style$$1.type == 5 /* Keyframes */) {
            this.visitKeyframes(style$$1, context);
        }
        else {
            context.incrementTime(timings.duration);
            this.visitStyle(/** @type {?} */ (style$$1), context);
            timeline.applyStylesToKeyframe();
        }
        context.currentAnimateTimings = null;
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitStyle = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ timeline = context.currentTimeline;
        var /** @type {?} */ timings = /** @type {?} */ ((context.currentAnimateTimings));
        // this is a special case for when a style() call
        // directly follows  an animate() call (but not inside of an animate() call)
        if (!timings && timeline.getCurrentStyleProperties().length) {
            timeline.forwardFrame();
        }
        var /** @type {?} */ easing = (timings && timings.easing) || ast.easing;
        if (ast.isEmptyStep) {
            timeline.applyEmptyStep(easing);
        }
        else {
            timeline.setStyles(ast.styles, easing, context.errors, context.options);
        }
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitKeyframes = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ currentAnimateTimings = /** @type {?} */ ((context.currentAnimateTimings));
        var /** @type {?} */ startTime = (/** @type {?} */ ((context.currentTimeline))).duration;
        var /** @type {?} */ duration = currentAnimateTimings.duration;
        var /** @type {?} */ innerContext = context.createSubContext();
        var /** @type {?} */ innerTimeline = innerContext.currentTimeline;
        innerTimeline.easing = currentAnimateTimings.easing;
        ast.styles.forEach(function (step) {
            var /** @type {?} */ offset = step.offset || 0;
            innerTimeline.forwardTime(offset * duration);
            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
            innerTimeline.applyStylesToKeyframe();
        });
        // this will ensure that the parent timeline gets all the styles from
        // the child even if the new timeline below is not used
        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
        // we do this because the window between this timeline and the sub timeline
        // should ensure that the styles within are exactly the same as they were before
        context.transformIntoNewTimeline(startTime + duration);
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitQuery = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var _this = this;
        // in the event that the first step before this is a style step we need
        // to ensure the styles are applied before the children are animated
        var /** @type {?} */ startTime = context.currentTimeline.currentTime;
        var /** @type {?} */ options = /** @type {?} */ ((ast.options || {}));
        var /** @type {?} */ delay = options.delay ? resolveTimingValue(options.delay) : 0;
        if (delay && (context.previousNode.type === 6 /* Style */ ||
            (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {
            context.currentTimeline.snapshotCurrentStyles();
            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }
        var /** @type {?} */ furthestTime = startTime;
        var /** @type {?} */ elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
        context.currentQueryTotal = elms.length;
        var /** @type {?} */ sameElementTimeline = null;
        elms.forEach(function (element, i) {
            context.currentQueryIndex = i;
            var /** @type {?} */ innerContext = context.createSubContext(ast.options, element);
            if (delay) {
                innerContext.delayNextStep(delay);
            }
            if (element === context.element) {
                sameElementTimeline = innerContext.currentTimeline;
            }
            visitDslNode(_this, ast.animation, innerContext);
            // this is here just incase the inner steps only contain or end
            // with a style() call (which is here to signal that this is a preparatory
            // call to style an element before it is animated again)
            innerContext.currentTimeline.applyStylesToKeyframe();
            var /** @type {?} */ endTime = innerContext.currentTimeline.currentTime;
            furthestTime = Math.max(furthestTime, endTime);
        });
        context.currentQueryIndex = 0;
        context.currentQueryTotal = 0;
        context.transformIntoNewTimeline(furthestTime);
        if (sameElementTimeline) {
            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
            context.currentTimeline.snapshotCurrentStyles();
        }
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineBuilderVisitor.prototype.visitStagger = /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    function (ast, context) {
        var /** @type {?} */ parentContext = /** @type {?} */ ((context.parentContext));
        var /** @type {?} */ tl = context.currentTimeline;
        var /** @type {?} */ timings = ast.timings;
        var /** @type {?} */ duration = Math.abs(timings.duration);
        var /** @type {?} */ maxTime = duration * (context.currentQueryTotal - 1);
        var /** @type {?} */ delay = duration * context.currentQueryIndex;
        var /** @type {?} */ staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;
        switch (staggerTransformer) {
            case 'reverse':
                delay = maxTime - delay;
                break;
            case 'full':
                delay = parentContext.currentStaggerTime;
                break;
        }
        var /** @type {?} */ timeline = context.currentTimeline;
        if (delay) {
            timeline.delayNextStep(delay);
        }
        var /** @type {?} */ startingTime = timeline.currentTime;
        visitDslNode(this, ast.animation, context);
        context.previousNode = ast;
        // time = duration + delay
        // the reason why this computation is so complex is because
        // the inner timeline may either have a delay value or a stretched
        // keyframe depending on if a subtimeline is not used or is used.
        parentContext.currentStaggerTime =
            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);
    };
    return AnimationTimelineBuilderVisitor;
}());
var DEFAULT_NOOP_PREVIOUS_NODE = /** @type {?} */ ({});
var AnimationTimelineContext = /** @class */ (function () {
    function AnimationTimelineContext(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
        this._driver = _driver;
        this.element = element;
        this.subInstructions = subInstructions;
        this._enterClassName = _enterClassName;
        this._leaveClassName = _leaveClassName;
        this.errors = errors;
        this.timelines = timelines;
        this.parentContext = null;
        this.currentAnimateTimings = null;
        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        this.subContextCount = 0;
        this.options = {};
        this.currentQueryIndex = 0;
        this.currentQueryTotal = 0;
        this.currentStaggerTime = 0;
        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
        timelines.push(this.currentTimeline);
    }
    Object.defineProperty(AnimationTimelineContext.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () { return this.options.params; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @param {?=} skipIfExists
     * @return {?}
     */
    AnimationTimelineContext.prototype.updateOptions = /**
     * @param {?} options
     * @param {?=} skipIfExists
     * @return {?}
     */
    function (options, skipIfExists) {
        var _this = this;
        if (!options)
            return;
        var /** @type {?} */ newOptions = /** @type {?} */ (options);
        var /** @type {?} */ optionsToUpdate = this.options;
        // NOTE: this will get patched up when other animation methods support duration overrides
        if (newOptions.duration != null) {
            (/** @type {?} */ (optionsToUpdate)).duration = resolveTimingValue(newOptions.duration);
        }
        if (newOptions.delay != null) {
            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
        }
        var /** @type {?} */ newParams = newOptions.params;
        if (newParams) {
            var /** @type {?} */ paramsToUpdate_1 = /** @type {?} */ ((optionsToUpdate.params));
            if (!paramsToUpdate_1) {
                paramsToUpdate_1 = this.options.params = {};
            }
            Object.keys(newParams).forEach(function (name) {
                if (!skipIfExists || !paramsToUpdate_1.hasOwnProperty(name)) {
                    paramsToUpdate_1[name] = interpolateParams(newParams[name], paramsToUpdate_1, _this.errors);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    AnimationTimelineContext.prototype._copyOptions = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ options = {};
        if (this.options) {
            var /** @type {?} */ oldParams_1 = this.options.params;
            if (oldParams_1) {
                var /** @type {?} */ params_1 = options['params'] = {};
                Object.keys(oldParams_1).forEach(function (name) { params_1[name] = oldParams_1[name]; });
            }
        }
        return options;
    };
    /**
     * @param {?=} options
     * @param {?=} element
     * @param {?=} newTime
     * @return {?}
     */
    AnimationTimelineContext.prototype.createSubContext = /**
     * @param {?=} options
     * @param {?=} element
     * @param {?=} newTime
     * @return {?}
     */
    function (options, element, newTime) {
        if (options === void 0) { options = null; }
        var /** @type {?} */ target = element || this.element;
        var /** @type {?} */ context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
        context.previousNode = this.previousNode;
        context.currentAnimateTimings = this.currentAnimateTimings;
        context.options = this._copyOptions();
        context.updateOptions(options);
        context.currentQueryIndex = this.currentQueryIndex;
        context.currentQueryTotal = this.currentQueryTotal;
        context.parentContext = this;
        this.subContextCount++;
        return context;
    };
    /**
     * @param {?=} newTime
     * @return {?}
     */
    AnimationTimelineContext.prototype.transformIntoNewTimeline = /**
     * @param {?=} newTime
     * @return {?}
     */
    function (newTime) {
        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
        this.timelines.push(this.currentTimeline);
        return this.currentTimeline;
    };
    /**
     * @param {?} instruction
     * @param {?} duration
     * @param {?} delay
     * @return {?}
     */
    AnimationTimelineContext.prototype.appendInstructionToTimeline = /**
     * @param {?} instruction
     * @param {?} duration
     * @param {?} delay
     * @return {?}
     */
    function (instruction, duration, delay) {
        var /** @type {?} */ updatedTimings = {
            duration: duration != null ? duration : instruction.duration,
            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
            easing: ''
        };
        var /** @type {?} */ builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
        this.timelines.push(builder);
        return updatedTimings;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    AnimationTimelineContext.prototype.incrementTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
    };
    /**
     * @param {?} delay
     * @return {?}
     */
    AnimationTimelineContext.prototype.delayNextStep = /**
     * @param {?} delay
     * @return {?}
     */
    function (delay) {
        // negative delays are not yet supported
        if (delay > 0) {
            this.currentTimeline.delayNextStep(delay);
        }
    };
    /**
     * @param {?} selector
     * @param {?} originalSelector
     * @param {?} limit
     * @param {?} includeSelf
     * @param {?} optional
     * @param {?} errors
     * @return {?}
     */
    AnimationTimelineContext.prototype.invokeQuery = /**
     * @param {?} selector
     * @param {?} originalSelector
     * @param {?} limit
     * @param {?} includeSelf
     * @param {?} optional
     * @param {?} errors
     * @return {?}
     */
    function (selector, originalSelector, limit, includeSelf, optional, errors) {
        var /** @type {?} */ results = [];
        if (includeSelf) {
            results.push(this.element);
        }
        if (selector.length > 0) {
            // if :self is only used then the selector is empty
            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
            var /** @type {?} */ multi = limit != 1;
            var /** @type {?} */ elements = this._driver.query(this.element, selector, multi);
            if (limit !== 0) {
                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :
                    elements.slice(0, limit);
            }
            results.push.apply(results, elements);
        }
        if (!optional && results.length == 0) {
            errors.push("`query(\"" + originalSelector + "\")` returned zero elements. (Use `query(\"" + originalSelector + "\", { optional: true })` if you wish to allow this.)");
        }
        return results;
    };
    return AnimationTimelineContext;
}());
var TimelineBuilder = /** @class */ (function () {
    function TimelineBuilder(_driver, element, startTime, _elementTimelineStylesLookup) {
        this._driver = _driver;
        this.element = element;
        this.startTime = startTime;
        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
        this.duration = 0;
        this._previousKeyframe = {};
        this._currentKeyframe = {};
        this._keyframes = new Map();
        this._styleSummary = {};
        this._pendingStyles = {};
        this._backFill = {};
        this._currentEmptyStepKeyframe = null;
        if (!this._elementTimelineStylesLookup) {
            this._elementTimelineStylesLookup = new Map();
        }
        this._localTimelineStyles = Object.create(this._backFill, {});
        this._globalTimelineStyles = /** @type {?} */ ((this._elementTimelineStylesLookup.get(element)));
        if (!this._globalTimelineStyles) {
            this._globalTimelineStyles = this._localTimelineStyles;
            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
        }
        this._loadKeyframe();
    }
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.containsAnimation = /**
     * @return {?}
     */
    function () {
        switch (this._keyframes.size) {
            case 0:
                return false;
            case 1:
                return this.getCurrentStyleProperties().length > 0;
            default:
                return true;
        }
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.getCurrentStyleProperties = /**
     * @return {?}
     */
    function () { return Object.keys(this._currentKeyframe); };
    Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
        get: /**
         * @return {?}
         */
        function () { return this.startTime + this.duration; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} delay
     * @return {?}
     */
    TimelineBuilder.prototype.delayNextStep = /**
     * @param {?} delay
     * @return {?}
     */
    function (delay) {
        // in the event that a style() step is placed right before a stagger()
        // and that style() step is the very first style() value in the animation
        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
        // properly applies the style() values to work with the stagger...
        var /** @type {?} */ hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;
        if (this.duration || hasPreStyleStep) {
            this.forwardTime(this.currentTime + delay);
            if (hasPreStyleStep) {
                this.snapshotCurrentStyles();
            }
        }
        else {
            this.startTime += delay;
        }
    };
    /**
     * @param {?} element
     * @param {?=} currentTime
     * @return {?}
     */
    TimelineBuilder.prototype.fork = /**
     * @param {?} element
     * @param {?=} currentTime
     * @return {?}
     */
    function (element, currentTime) {
        this.applyStylesToKeyframe();
        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype._loadKeyframe = /**
     * @return {?}
     */
    function () {
        if (this._currentKeyframe) {
            this._previousKeyframe = this._currentKeyframe;
        }
        this._currentKeyframe = /** @type {?} */ ((this._keyframes.get(this.duration)));
        if (!this._currentKeyframe) {
            this._currentKeyframe = Object.create(this._backFill, {});
            this._keyframes.set(this.duration, this._currentKeyframe);
        }
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.forwardFrame = /**
     * @return {?}
     */
    function () {
        this.duration += ONE_FRAME_IN_MILLISECONDS;
        this._loadKeyframe();
    };
    /**
     * @param {?} time
     * @return {?}
     */
    TimelineBuilder.prototype.forwardTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.applyStylesToKeyframe();
        this.duration = time;
        this._loadKeyframe();
    };
    /**
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    TimelineBuilder.prototype._updateStyle = /**
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    function (prop, value) {
        this._localTimelineStyles[prop] = value;
        this._globalTimelineStyles[prop] = value;
        this._styleSummary[prop] = { time: this.currentTime, value: value };
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.allowOnlyTimelineStyles = /**
     * @return {?}
     */
    function () { return this._currentEmptyStepKeyframe !== this._currentKeyframe; };
    /**
     * @param {?} easing
     * @return {?}
     */
    TimelineBuilder.prototype.applyEmptyStep = /**
     * @param {?} easing
     * @return {?}
     */
    function (easing) {
        var _this = this;
        if (easing) {
            this._previousKeyframe['easing'] = easing;
        }
        // special case for animate(duration):
        // all missing styles are filled with a `*` value then
        // if any destination styles are filled in later on the same
        // keyframe then they will override the overridden styles
        // We use `_globalTimelineStyles` here because there may be
        // styles in previous keyframes that are not present in this timeline
        Object.keys(this._globalTimelineStyles).forEach(function (prop) {
            _this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE;
            _this._currentKeyframe[prop] = _angular_animations.AUTO_STYLE;
        });
        this._currentEmptyStepKeyframe = this._currentKeyframe;
    };
    /**
     * @param {?} input
     * @param {?} easing
     * @param {?} errors
     * @param {?=} options
     * @return {?}
     */
    TimelineBuilder.prototype.setStyles = /**
     * @param {?} input
     * @param {?} easing
     * @param {?} errors
     * @param {?=} options
     * @return {?}
     */
    function (input, easing, errors, options) {
        var _this = this;
        if (easing) {
            this._previousKeyframe['easing'] = easing;
        }
        var /** @type {?} */ params = (options && options.params) || {};
        var /** @type {?} */ styles = flattenStyles(input, this._globalTimelineStyles);
        Object.keys(styles).forEach(function (prop) {
            var /** @type {?} */ val = interpolateParams(styles[prop], params, errors);
            _this._pendingStyles[prop] = val;
            if (!_this._localTimelineStyles.hasOwnProperty(prop)) {
                _this._backFill[prop] = _this._globalTimelineStyles.hasOwnProperty(prop) ?
                    _this._globalTimelineStyles[prop] :
                    _angular_animations.AUTO_STYLE;
            }
            _this._updateStyle(prop, val);
        });
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.applyStylesToKeyframe = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ styles = this._pendingStyles;
        var /** @type {?} */ props = Object.keys(styles);
        if (props.length == 0)
            return;
        this._pendingStyles = {};
        props.forEach(function (prop) {
            var /** @type {?} */ val = styles[prop];
            _this._currentKeyframe[prop] = val;
        });
        Object.keys(this._localTimelineStyles).forEach(function (prop) {
            if (!_this._currentKeyframe.hasOwnProperty(prop)) {
                _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
            }
        });
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.snapshotCurrentStyles = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this._localTimelineStyles).forEach(function (prop) {
            var /** @type {?} */ val = _this._localTimelineStyles[prop];
            _this._pendingStyles[prop] = val;
            _this._updateStyle(prop, val);
        });
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.getFinalKeyframe = /**
     * @return {?}
     */
    function () { return this._keyframes.get(this.duration); };
    Object.defineProperty(TimelineBuilder.prototype, "properties", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ properties = [];
            for (var /** @type {?} */ prop in this._currentKeyframe) {
                properties.push(prop);
            }
            return properties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} timeline
     * @return {?}
     */
    TimelineBuilder.prototype.mergeTimelineCollectedStyles = /**
     * @param {?} timeline
     * @return {?}
     */
    function (timeline) {
        var _this = this;
        Object.keys(timeline._styleSummary).forEach(function (prop) {
            var /** @type {?} */ details0 = _this._styleSummary[prop];
            var /** @type {?} */ details1 = timeline._styleSummary[prop];
            if (!details0 || details1.time > details0.time) {
                _this._updateStyle(prop, details1.value);
            }
        });
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.buildKeyframes = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.applyStylesToKeyframe();
        var /** @type {?} */ preStyleProps = new Set();
        var /** @type {?} */ postStyleProps = new Set();
        var /** @type {?} */ isEmpty = this._keyframes.size === 1 && this.duration === 0;
        var /** @type {?} */ finalKeyframes = [];
        this._keyframes.forEach(function (keyframe, time) {
            var /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);
            Object.keys(finalKeyframe).forEach(function (prop) {
                var /** @type {?} */ value = finalKeyframe[prop];
                if (value == _angular_animations.ɵPRE_STYLE) {
                    preStyleProps.add(prop);
                }
                else if (value == _angular_animations.AUTO_STYLE) {
                    postStyleProps.add(prop);
                }
            });
            if (!isEmpty) {
                finalKeyframe['offset'] = time / _this.duration;
            }
            finalKeyframes.push(finalKeyframe);
        });
        var /** @type {?} */ preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
        var /** @type {?} */ postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];
        // special case for a 0-second animation (which is designed just to place styles onscreen)
        if (isEmpty) {
            var /** @type {?} */ kf0 = finalKeyframes[0];
            var /** @type {?} */ kf1 = copyObj(kf0);
            kf0['offset'] = 0;
            kf1['offset'] = 1;
            finalKeyframes = [kf0, kf1];
        }
        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
    };
    return TimelineBuilder;
}());
var SubTimelineBuilder = /** @class */ (function (_super) {
    __extends(SubTimelineBuilder, _super);
    function SubTimelineBuilder(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe) {
        if (_stretchStartingKeyframe === void 0) { _stretchStartingKeyframe = false; }
        var _this = _super.call(this, driver, element, timings.delay) || this;
        _this.element = element;
        _this.keyframes = keyframes;
        _this.preStyleProps = preStyleProps;
        _this.postStyleProps = postStyleProps;
        _this._stretchStartingKeyframe = _stretchStartingKeyframe;
        _this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };
        return _this;
    }
    /**
     * @return {?}
     */
    SubTimelineBuilder.prototype.containsAnimation = /**
     * @return {?}
     */
    function () { return this.keyframes.length > 1; };
    /**
     * @return {?}
     */
    SubTimelineBuilder.prototype.buildKeyframes = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ keyframes = this.keyframes;
        var _a = this.timings, delay = _a.delay, duration = _a.duration, easing = _a.easing;
        if (this._stretchStartingKeyframe && delay) {
            var /** @type {?} */ newKeyframes = [];
            var /** @type {?} */ totalTime = duration + delay;
            var /** @type {?} */ startingGap = delay / totalTime;
            // the original starting keyframe now starts once the delay is done
            var /** @type {?} */ newFirstKeyframe = copyStyles(keyframes[0], false);
            newFirstKeyframe['offset'] = 0;
            newKeyframes.push(newFirstKeyframe);
            var /** @type {?} */ oldFirstKeyframe = copyStyles(keyframes[0], false);
            oldFirstKeyframe['offset'] = roundOffset(startingGap);
            newKeyframes.push(oldFirstKeyframe);
            /*
                    When the keyframe is stretched then it means that the delay before the animation
                    starts is gone. Instead the first keyframe is placed at the start of the animation
                    and it is then copied to where it starts when the original delay is over. This basically
                    means nothing animates during that delay, but the styles are still renderered. For this
                    to work the original offset values that exist in the original keyframes must be "warped"
                    so that they can take the new keyframe + delay into account.
            
                    delay=1000, duration=1000, keyframes = 0 .5 1
            
                    turns into
            
                    delay=0, duration=2000, keyframes = 0 .33 .66 1
                   */
            // offsets between 1 ... n -1 are all warped by the keyframe stretch
            var /** @type {?} */ limit = keyframes.length - 1;
            for (var /** @type {?} */ i = 1; i <= limit; i++) {
                var /** @type {?} */ kf = copyStyles(keyframes[i], false);
                var /** @type {?} */ oldOffset = /** @type {?} */ (kf['offset']);
                var /** @type {?} */ timeAtKeyframe = delay + oldOffset * duration;
                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
                newKeyframes.push(kf);
            }
            // the new starting keyframe should be added at the start
            duration = totalTime;
            delay = 0;
            easing = '';
            keyframes = newKeyframes;
        }
        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
    };
    return SubTimelineBuilder;
}(TimelineBuilder));
/**
 * @param {?} offset
 * @param {?=} decimalPoints
 * @return {?}
 */
function roundOffset(offset, decimalPoints) {
    if (decimalPoints === void 0) { decimalPoints = 3; }
    var /** @type {?} */ mult = Math.pow(10, decimalPoints - 1);
    return Math.round(offset * mult) / mult;
}
/**
 * @param {?} input
 * @param {?} allStyles
 * @return {?}
 */
function flattenStyles(input, allStyles) {
    var /** @type {?} */ styles = {};
    var /** @type {?} */ allProperties;
    input.forEach(function (token) {
        if (token === '*') {
            allProperties = allProperties || Object.keys(allStyles);
            allProperties.forEach(function (prop) { styles[prop] = _angular_animations.AUTO_STYLE; });
        }
        else {
            copyStyles(/** @type {?} */ (token), false, styles);
        }
    });
    return styles;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Animation = /** @class */ (function () {
    function Animation(_driver, input) {
        this._driver = _driver;
        var /** @type {?} */ errors = [];
        var /** @type {?} */ ast = buildAnimationAst(_driver, input, errors);
        if (errors.length) {
            var /** @type {?} */ errorMessage = "animation validation failed:\n" + errors.join("\n");
            throw new Error(errorMessage);
        }
        this._animationAst = ast;
    }
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} destinationStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @return {?}
     */
    Animation.prototype.buildTimelines = /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} destinationStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @return {?}
     */
    function (element, startingStyles, destinationStyles, options, subInstructions) {
        var /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : /** @type {?} */ (startingStyles);
        var /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : /** @type {?} */ (destinationStyles);
        var /** @type {?} */ errors = [];
        subInstructions = subInstructions || new ElementInstructionMap();
        var /** @type {?} */ result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);
        if (errors.length) {
            var /** @type {?} */ errorMessage = "animation building failed:\n" + errors.join("\n");
            throw new Error(errorMessage);
        }
        return result;
    };
    return Animation;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental Animation support is experimental.
 * @abstract
 */
var AnimationStyleNormalizer = /** @class */ (function () {
    function AnimationStyleNormalizer() {
    }
    return AnimationStyleNormalizer;
}());
/**
 * \@experimental Animation support is experimental.
 */
var NoopAnimationStyleNormalizer = /** @class */ (function () {
    function NoopAnimationStyleNormalizer() {
    }
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    NoopAnimationStyleNormalizer.prototype.normalizePropertyName = /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    function (propertyName, errors) { return propertyName; };
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    function (userProvidedProperty, normalizedProperty, value, errors) {
        return /** @type {?} */ (value);
    };
    return NoopAnimationStyleNormalizer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsStyleNormalizer = /** @class */ (function (_super) {
    __extends(WebAnimationsStyleNormalizer, _super);
    function WebAnimationsStyleNormalizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    WebAnimationsStyleNormalizer.prototype.normalizePropertyName = /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    function (propertyName, errors) {
        return dashCaseToCamelCase(propertyName);
    };
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    function (userProvidedProperty, normalizedProperty, value, errors) {
        var /** @type {?} */ unit = '';
        var /** @type {?} */ strVal = value.toString().trim();
        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
            if (typeof value === 'number') {
                unit = 'px';
            }
            else {
                var /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                    errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
                }
            }
        }
        return strVal + unit;
    };
    return WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer));
var DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'
    .split(','));
/**
 * @param {?} keys
 * @return {?}
 */
function makeBooleanMap(keys) {
    var /** @type {?} */ map = {};
    keys.forEach(function (key) { return map[key] = true; });
    return map;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} isRemovalTransition
 * @param {?} fromStyles
 * @param {?} toStyles
 * @param {?} timelines
 * @param {?} queriedElements
 * @param {?} preStyleProps
 * @param {?} postStyleProps
 * @param {?=} errors
 * @return {?}
 */
function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, errors) {
    return {
        type: 0 /* TransitionAnimation */,
        element: element,
        triggerName: triggerName,
        isRemovalTransition: isRemovalTransition,
        fromState: fromState,
        fromStyles: fromStyles,
        toState: toState,
        toStyles: toStyles,
        timelines: timelines,
        queriedElements: queriedElements,
        preStyleProps: preStyleProps,
        postStyleProps: postStyleProps,
        errors: errors
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var EMPTY_OBJECT = {};
var AnimationTransitionFactory = /** @class */ (function () {
    function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
        this._triggerName = _triggerName;
        this.ast = ast;
        this._stateStyles = _stateStyles;
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    AnimationTransitionFactory.prototype.match = /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    function (currentState, nextState) {
        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState);
    };
    /**
     * @param {?} stateName
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    AnimationTransitionFactory.prototype.buildStyles = /**
     * @param {?} stateName
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    function (stateName, params, errors) {
        var /** @type {?} */ backupStateStyler = this._stateStyles['*'];
        var /** @type {?} */ stateStyler = this._stateStyles[stateName];
        var /** @type {?} */ backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
    };
    /**
     * @param {?} driver
     * @param {?} element
     * @param {?} currentState
     * @param {?} nextState
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?=} currentOptions
     * @param {?=} nextOptions
     * @param {?=} subInstructions
     * @return {?}
     */
    AnimationTransitionFactory.prototype.build = /**
     * @param {?} driver
     * @param {?} element
     * @param {?} currentState
     * @param {?} nextState
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?=} currentOptions
     * @param {?=} nextOptions
     * @param {?=} subInstructions
     * @return {?}
     */
    function (driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions) {
        var /** @type {?} */ errors = [];
        var /** @type {?} */ transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
        var /** @type {?} */ currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
        var /** @type {?} */ currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
        var /** @type {?} */ nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
        var /** @type {?} */ nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
        var /** @type {?} */ queriedElements = new Set();
        var /** @type {?} */ preStyleMap = new Map();
        var /** @type {?} */ postStyleMap = new Map();
        var /** @type {?} */ isRemoval = nextState === 'void';
        var /** @type {?} */ animationOptions = { params: __assign({}, transitionAnimationParams, nextAnimationParams) };
        var /** @type {?} */ timelines = buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
        if (errors.length) {
            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, errors);
        }
        timelines.forEach(function (tl) {
            var /** @type {?} */ elm = tl.element;
            var /** @type {?} */ preProps = getOrSetAsInMap(preStyleMap, elm, {});
            tl.preStyleProps.forEach(function (prop) { return preProps[prop] = true; });
            var /** @type {?} */ postProps = getOrSetAsInMap(postStyleMap, elm, {});
            tl.postStyleProps.forEach(function (prop) { return postProps[prop] = true; });
            if (elm !== element) {
                queriedElements.add(elm);
            }
        });
        var /** @type {?} */ queriedElementsList = iteratorToArray(queriedElements.values());
        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap);
    };
    return AnimationTransitionFactory;
}());
/**
 * @param {?} matchFns
 * @param {?} currentState
 * @param {?} nextState
 * @return {?}
 */
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
    return matchFns.some(function (fn) { return fn(currentState, nextState); });
}
var AnimationStateStyles = /** @class */ (function () {
    function AnimationStateStyles(styles, defaultParams) {
        this.styles = styles;
        this.defaultParams = defaultParams;
    }
    /**
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    AnimationStateStyles.prototype.buildStyles = /**
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    function (params, errors) {
        var /** @type {?} */ finalStyles = {};
        var /** @type {?} */ combinedParams = copyObj(this.defaultParams);
        Object.keys(params).forEach(function (key) {
            var /** @type {?} */ value = params[key];
            if (value != null) {
                combinedParams[key] = value;
            }
        });
        this.styles.styles.forEach(function (value) {
            if (typeof value !== 'string') {
                var /** @type {?} */ styleObj_1 = /** @type {?} */ (value);
                Object.keys(styleObj_1).forEach(function (prop) {
                    var /** @type {?} */ val = styleObj_1[prop];
                    if (val.length > 1) {
                        val = interpolateParams(val, combinedParams, errors);
                    }
                    finalStyles[prop] = val;
                });
            }
        });
        return finalStyles;
    };
    return AnimationStateStyles;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} ast
 * @return {?}
 */
function buildTrigger(name, ast) {
    return new AnimationTrigger(name, ast);
}
/**
 * \@experimental Animation support is experimental.
 */
var AnimationTrigger = /** @class */ (function () {
    function AnimationTrigger(name, ast) {
        var _this = this;
        this.name = name;
        this.ast = ast;
        this.transitionFactories = [];
        this.states = {};
        ast.states.forEach(function (ast) {
            var /** @type {?} */ defaultParams = (ast.options && ast.options.params) || {};
            _this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
        });
        balanceProperties(this.states, 'true', '1');
        balanceProperties(this.states, 'false', '0');
        ast.transitions.forEach(function (ast) {
            _this.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this.states));
        });
        this.fallbackTransition = createFallbackTransition(name, this.states);
    }
    Object.defineProperty(AnimationTrigger.prototype, "containsQueries", {
        get: /**
         * @return {?}
         */
        function () { return this.ast.queryCount > 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    AnimationTrigger.prototype.matchTransition = /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    function (currentState, nextState) {
        var /** @type {?} */ entry = this.transitionFactories.find(function (f) { return f.match(currentState, nextState); });
        return entry || null;
    };
    /**
     * @param {?} currentState
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    AnimationTrigger.prototype.matchStyles = /**
     * @param {?} currentState
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    function (currentState, params, errors) {
        return this.fallbackTransition.buildStyles(currentState, params, errors);
    };
    return AnimationTrigger;
}());
/**
 * @param {?} triggerName
 * @param {?} states
 * @return {?}
 */
function createFallbackTransition(triggerName, states) {
    var /** @type {?} */ matchers = [function (fromState, toState) { return true; }];
    var /** @type {?} */ animation = { type: 2 /* Sequence */, steps: [], options: null };
    var /** @type {?} */ transition = {
        type: 1 /* Transition */,
        animation: animation,
        matchers: matchers,
        options: null,
        queryCount: 0,
        depCount: 0
    };
    return new AnimationTransitionFactory(triggerName, transition, states);
}
/**
 * @param {?} obj
 * @param {?} key1
 * @param {?} key2
 * @return {?}
 */
function balanceProperties(obj, key1, key2) {
    if (obj.hasOwnProperty(key1)) {
        if (!obj.hasOwnProperty(key2)) {
            obj[key2] = obj[key1];
        }
    }
    else if (obj.hasOwnProperty(key2)) {
        obj[key1] = obj[key2];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
var TimelineAnimationEngine = /** @class */ (function () {
    function TimelineAnimationEngine(_driver, _normalizer) {
        this._driver = _driver;
        this._normalizer = _normalizer;
        this._animations = {};
        this._playersById = {};
        this.players = [];
    }
    /**
     * @param {?} id
     * @param {?} metadata
     * @return {?}
     */
    TimelineAnimationEngine.prototype.register = /**
     * @param {?} id
     * @param {?} metadata
     * @return {?}
     */
    function (id, metadata) {
        var /** @type {?} */ errors = [];
        var /** @type {?} */ ast = buildAnimationAst(this._driver, metadata, errors);
        if (errors.length) {
            throw new Error("Unable to build the animation due to the following errors: " + errors.join("\n"));
        }
        else {
            this._animations[id] = ast;
        }
    };
    /**
     * @param {?} i
     * @param {?} preStyles
     * @param {?=} postStyles
     * @return {?}
     */
    TimelineAnimationEngine.prototype._buildPlayer = /**
     * @param {?} i
     * @param {?} preStyles
     * @param {?=} postStyles
     * @return {?}
     */
    function (i, preStyles, postStyles) {
        var /** @type {?} */ element = i.element;
        var /** @type {?} */ keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, []);
    };
    /**
     * @param {?} id
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    TimelineAnimationEngine.prototype.create = /**
     * @param {?} id
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    function (id, element, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var /** @type {?} */ errors = [];
        var /** @type {?} */ ast = this._animations[id];
        var /** @type {?} */ instructions;
        var /** @type {?} */ autoStylesMap = new Map();
        if (ast) {
            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
            instructions.forEach(function (inst) {
                var /** @type {?} */ styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
                inst.postStyleProps.forEach(function (prop) { return styles[prop] = null; });
            });
        }
        else {
            errors.push('The requested animation doesn\'t exist or has already been destroyed');
            instructions = [];
        }
        if (errors.length) {
            throw new Error("Unable to create the animation due to the following errors: " + errors.join("\n"));
        }
        autoStylesMap.forEach(function (styles, element) {
            Object.keys(styles).forEach(function (prop) { styles[prop] = _this._driver.computeStyle(element, prop, _angular_animations.AUTO_STYLE); });
        });
        var /** @type {?} */ players = instructions.map(function (i) {
            var /** @type {?} */ styles = autoStylesMap.get(i.element);
            return _this._buildPlayer(i, {}, styles);
        });
        var /** @type {?} */ player = optimizeGroupPlayer(players);
        this._playersById[id] = player;
        player.onDestroy(function () { return _this.destroy(id); });
        this.players.push(player);
        return player;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TimelineAnimationEngine.prototype.destroy = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ player = this._getPlayer(id);
        player.destroy();
        delete this._playersById[id];
        var /** @type {?} */ index = this.players.indexOf(player);
        if (index >= 0) {
            this.players.splice(index, 1);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TimelineAnimationEngine.prototype._getPlayer = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ player = this._playersById[id];
        if (!player) {
            throw new Error("Unable to find the timeline player referenced by " + id);
        }
        return player;
    };
    /**
     * @param {?} id
     * @param {?} element
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    TimelineAnimationEngine.prototype.listen = /**
     * @param {?} id
     * @param {?} element
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (id, element, eventName, callback) {
        // triggerName, fromState, toState are all ignored for timeline animations
        var /** @type {?} */ baseEvent = makeAnimationEvent(element, '', '', '');
        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
        return function () { };
    };
    /**
     * @param {?} id
     * @param {?} element
     * @param {?} command
     * @param {?} args
     * @return {?}
     */
    TimelineAnimationEngine.prototype.command = /**
     * @param {?} id
     * @param {?} element
     * @param {?} command
     * @param {?} args
     * @return {?}
     */
    function (id, element, command, args) {
        if (command == 'register') {
            this.register(id, /** @type {?} */ (args[0]));
            return;
        }
        if (command == 'create') {
            var /** @type {?} */ options = /** @type {?} */ ((args[0] || {}));
            this.create(id, element, options);
            return;
        }
        var /** @type {?} */ player = this._getPlayer(id);
        switch (command) {
            case 'play':
                player.play();
                break;
            case 'pause':
                player.pause();
                break;
            case 'reset':
                player.reset();
                break;
            case 'restart':
                player.restart();
                break;
            case 'finish':
                player.finish();
                break;
            case 'init':
                player.init();
                break;
            case 'setPosition':
                player.setPosition(parseFloat(/** @type {?} */ (args[0])));
                break;
            case 'destroy':
                this.destroy(id);
                break;
        }
    };
    return TimelineAnimationEngine;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var QUEUED_CLASSNAME = 'ng-animate-queued';
var QUEUED_SELECTOR = '.ng-animate-queued';
var DISABLED_CLASSNAME = 'ng-animate-disabled';
var DISABLED_SELECTOR = '.ng-animate-disabled';
var STAR_CLASSNAME = 'ng-star-inserted';
var STAR_SELECTOR = '.ng-star-inserted';
var EMPTY_PLAYER_ARRAY = [];
var NULL_REMOVAL_STATE = {
    namespaceId: '',
    setForRemoval: null,
    hasAnimation: false,
    removedBeforeQueried: false
};
var NULL_REMOVED_QUERIED_STATE = {
    namespaceId: '',
    setForRemoval: null,
    hasAnimation: false,
    removedBeforeQueried: true
};
/**
 * @record
 */

var REMOVAL_FLAG = '__ng_removed';
/**
 * @record
 */

var StateValue = /** @class */ (function () {
    function StateValue(input, namespaceId) {
        if (namespaceId === void 0) { namespaceId = ''; }
        this.namespaceId = namespaceId;
        var /** @type {?} */ isObj = input && input.hasOwnProperty('value');
        var /** @type {?} */ value = isObj ? input['value'] : input;
        this.value = normalizeTriggerValue(value);
        if (isObj) {
            var /** @type {?} */ options = copyObj(/** @type {?} */ (input));
            delete options['value'];
            this.options = /** @type {?} */ (options);
        }
        else {
            this.options = {};
        }
        if (!this.options.params) {
            this.options.params = {};
        }
    }
    Object.defineProperty(StateValue.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () { return /** @type {?} */ (this.options.params); },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @return {?}
     */
    StateValue.prototype.absorbOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var /** @type {?} */ newParams = options.params;
        if (newParams) {
            var /** @type {?} */ oldParams_1 = /** @type {?} */ ((this.options.params));
            Object.keys(newParams).forEach(function (prop) {
                if (oldParams_1[prop] == null) {
                    oldParams_1[prop] = newParams[prop];
                }
            });
        }
    };
    return StateValue;
}());
var VOID_VALUE = 'void';
var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
var DELETED_STATE_VALUE = new StateValue('DELETED');
var AnimationTransitionNamespace = /** @class */ (function () {
    function AnimationTransitionNamespace(id, hostElement, _engine) {
        this.id = id;
        this.hostElement = hostElement;
        this._engine = _engine;
        this.players = [];
        this._triggers = {};
        this._queue = [];
        this._elementListeners = new Map();
        this._hostClassName = 'ng-tns-' + id;
        addClass(hostElement, this._hostClassName);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.listen = /**
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    function (element, name, phase, callback) {
        var _this = this;
        if (!this._triggers.hasOwnProperty(name)) {
            throw new Error("Unable to listen on the animation trigger event \"" + phase + "\" because the animation trigger \"" + name + "\" doesn't exist!");
        }
        if (phase == null || phase.length == 0) {
            throw new Error("Unable to listen on the animation trigger \"" + name + "\" because the provided event is undefined!");
        }
        if (!isTriggerEventValid(phase)) {
            throw new Error("The provided animation trigger event \"" + phase + "\" for the animation trigger \"" + name + "\" is not supported!");
        }
        var /** @type {?} */ listeners = getOrSetAsInMap(this._elementListeners, element, []);
        var /** @type {?} */ data = { name: name, phase: phase, callback: callback };
        listeners.push(data);
        var /** @type {?} */ triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});
        if (!triggersWithStates.hasOwnProperty(name)) {
            addClass(element, NG_TRIGGER_CLASSNAME);
            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
            triggersWithStates[name] = DEFAULT_STATE_VALUE;
        }
        return function () {
            // the event listener is removed AFTER the flush has occurred such
            // that leave animations callbacks can fire (otherwise if the node
            // is removed in between then the listeners would be deregistered)
            // the event listener is removed AFTER the flush has occurred such
            // that leave animations callbacks can fire (otherwise if the node
            // is removed in between then the listeners would be deregistered)
            _this._engine.afterFlush(function () {
                var /** @type {?} */ index = listeners.indexOf(data);
                if (index >= 0) {
                    listeners.splice(index, 1);
                }
                if (!_this._triggers[name]) {
                    delete triggersWithStates[name];
                }
            });
        };
    };
    /**
     * @param {?} name
     * @param {?} ast
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.register = /**
     * @param {?} name
     * @param {?} ast
     * @return {?}
     */
    function (name, ast) {
        if (this._triggers[name]) {
            // throw
            return false;
        }
        else {
            this._triggers[name] = ast;
            return true;
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AnimationTransitionNamespace.prototype._getTrigger = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var /** @type {?} */ trigger = this._triggers[name];
        if (!trigger) {
            throw new Error("The provided animation trigger \"" + name + "\" has not been registered!");
        }
        return trigger;
    };
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} value
     * @param {?=} defaultToFallback
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.trigger = /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} value
     * @param {?=} defaultToFallback
     * @return {?}
     */
    function (element, triggerName, value, defaultToFallback) {
        var _this = this;
        if (defaultToFallback === void 0) { defaultToFallback = true; }
        var /** @type {?} */ trigger = this._getTrigger(triggerName);
        var /** @type {?} */ player = new TransitionAnimationPlayer(this.id, triggerName, element);
        var /** @type {?} */ triggersWithStates = this._engine.statesByElement.get(element);
        if (!triggersWithStates) {
            addClass(element, NG_TRIGGER_CLASSNAME);
            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);
            this._engine.statesByElement.set(element, triggersWithStates = {});
        }
        var /** @type {?} */ fromState = triggersWithStates[triggerName];
        var /** @type {?} */ toState = new StateValue(value, this.id);
        var /** @type {?} */ isObj = value && value.hasOwnProperty('value');
        if (!isObj && fromState) {
            toState.absorbOptions(fromState.options);
        }
        triggersWithStates[triggerName] = toState;
        if (!fromState) {
            fromState = DEFAULT_STATE_VALUE;
        }
        else if (fromState === DELETED_STATE_VALUE) {
            return player;
        }
        var /** @type {?} */ isRemoval = toState.value === VOID_VALUE;
        // normally this isn't reached by here, however, if an object expression
        // is passed in then it may be a new object each time. Comparing the value
        // is important since that will stay the same despite there being a new object.
        // The removal arc here is special cased because the same element is triggered
        // twice in the event that it contains animations on the outer/inner portions
        // of the host container
        if (!isRemoval && fromState.value === toState.value) {
            // this means that despite the value not changing, some inner params
            // have changed which means that the animation final styles need to be applied
            if (!objEquals(fromState.params, toState.params)) {
                var /** @type {?} */ errors = [];
                var /** @type {?} */ fromStyles_1 = trigger.matchStyles(fromState.value, fromState.params, errors);
                var /** @type {?} */ toStyles_1 = trigger.matchStyles(toState.value, toState.params, errors);
                if (errors.length) {
                    this._engine.reportError(errors);
                }
                else {
                    this._engine.afterFlush(function () {
                        eraseStyles(element, fromStyles_1);
                        setStyles(element, toStyles_1);
                    });
                }
            }
            return;
        }
        var /** @type {?} */ playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
        playersOnElement.forEach(function (player) {
            // only remove the player if it is queued on the EXACT same trigger/namespace
            // we only also deal with queued players here because if the animation has
            // started then we want to keep the player alive until the flush happens
            // (which is where the previousPlayers are passed into the new palyer)
            if (player.namespaceId == _this.id && player.triggerName == triggerName && player.queued) {
                player.destroy();
            }
        });
        var /** @type {?} */ transition = trigger.matchTransition(fromState.value, toState.value);
        var /** @type {?} */ isFallbackTransition = false;
        if (!transition) {
            if (!defaultToFallback)
                return;
            transition = trigger.fallbackTransition;
            isFallbackTransition = true;
        }
        this._engine.totalQueuedPlayers++;
        this._queue.push({ element: element, triggerName: triggerName, transition: transition, fromState: fromState, toState: toState, player: player, isFallbackTransition: isFallbackTransition });
        if (!isFallbackTransition) {
            addClass(element, QUEUED_CLASSNAME);
            player.onStart(function () { removeClass(element, QUEUED_CLASSNAME); });
        }
        player.onDone(function () {
            var /** @type {?} */ index = _this.players.indexOf(player);
            if (index >= 0) {
                _this.players.splice(index, 1);
            }
            var /** @type {?} */ players = _this._engine.playersByElement.get(element);
            if (players) {
                var /** @type {?} */ index_1 = players.indexOf(player);
                if (index_1 >= 0) {
                    players.splice(index_1, 1);
                }
            }
        });
        this.players.push(player);
        playersOnElement.push(player);
        return player;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.deregister = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        delete this._triggers[name];
        this._engine.statesByElement.forEach(function (stateMap, element) { delete stateMap[name]; });
        this._elementListeners.forEach(function (listeners, element) {
            _this._elementListeners.set(element, listeners.filter(function (entry) { return entry.name != name; }));
        });
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.clearElementCache = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this._engine.statesByElement.delete(element);
        this._elementListeners.delete(element);
        var /** @type {?} */ elementPlayers = this._engine.playersByElement.get(element);
        if (elementPlayers) {
            elementPlayers.forEach(function (player) { return player.destroy(); });
            this._engine.playersByElement.delete(element);
        }
    };
    /**
     * @param {?} rootElement
     * @param {?} context
     * @param {?=} animate
     * @return {?}
     */
    AnimationTransitionNamespace.prototype._signalRemovalForInnerTriggers = /**
     * @param {?} rootElement
     * @param {?} context
     * @param {?=} animate
     * @return {?}
     */
    function (rootElement, context, animate) {
        var _this = this;
        if (animate === void 0) { animate = false; }
        // emulate a leave animation for all inner nodes within this node.
        // If there are no animations found for any of the nodes then clear the cache
        // for the element.
        this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true).forEach(function (elm) {
            // this means that an inner remove() operation has already kicked off
            // the animation on this element...
            if (elm[REMOVAL_FLAG])
                return;
            var /** @type {?} */ namespaces = _this._engine.fetchNamespacesByElement(elm);
            if (namespaces.size) {
                namespaces.forEach(function (ns) { return ns.triggerLeaveAnimation(elm, context, false, true); });
            }
            else {
                _this.clearElementCache(elm);
            }
        });
    };
    /**
     * @param {?} element
     * @param {?} context
     * @param {?=} destroyAfterComplete
     * @param {?=} defaultToFallback
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.triggerLeaveAnimation = /**
     * @param {?} element
     * @param {?} context
     * @param {?=} destroyAfterComplete
     * @param {?=} defaultToFallback
     * @return {?}
     */
    function (element, context, destroyAfterComplete, defaultToFallback) {
        var _this = this;
        var /** @type {?} */ triggerStates = this._engine.statesByElement.get(element);
        if (triggerStates) {
            var /** @type {?} */ players_1 = [];
            Object.keys(triggerStates).forEach(function (triggerName) {
                // this check is here in the event that an element is removed
                // twice (both on the host level and the component level)
                if (_this._triggers[triggerName]) {
                    var /** @type {?} */ player = _this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
                    if (player) {
                        players_1.push(player);
                    }
                }
            });
            if (players_1.length) {
                this._engine.markElementAsRemoved(this.id, element, true, context);
                if (destroyAfterComplete) {
                    optimizeGroupPlayer(players_1).onDone(function () { return _this._engine.processLeaveNode(element); });
                }
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.prepareLeaveAnimationListeners = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var _this = this;
        var /** @type {?} */ listeners = this._elementListeners.get(element);
        if (listeners) {
            var /** @type {?} */ visitedTriggers_1 = new Set();
            listeners.forEach(function (listener) {
                var /** @type {?} */ triggerName = listener.name;
                if (visitedTriggers_1.has(triggerName))
                    return;
                visitedTriggers_1.add(triggerName);
                var /** @type {?} */ trigger = _this._triggers[triggerName];
                var /** @type {?} */ transition = trigger.fallbackTransition;
                var /** @type {?} */ elementStates = /** @type {?} */ ((_this._engine.statesByElement.get(element)));
                var /** @type {?} */ fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
                var /** @type {?} */ toState = new StateValue(VOID_VALUE);
                var /** @type {?} */ player = new TransitionAnimationPlayer(_this.id, triggerName, element);
                _this._engine.totalQueuedPlayers++;
                _this._queue.push({
                    element: element,
                    triggerName: triggerName,
                    transition: transition,
                    fromState: fromState,
                    toState: toState,
                    player: player,
                    isFallbackTransition: true
                });
            });
        }
    };
    /**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.removeNode = /**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    function (element, context) {
        var _this = this;
        var /** @type {?} */ engine = this._engine;
        if (element.childElementCount) {
            this._signalRemovalForInnerTriggers(element, context, true);
        }
        // this means that a * => VOID animation was detected and kicked off
        if (this.triggerLeaveAnimation(element, context, true))
            return;
        // find the player that is animating and make sure that the
        // removal is delayed until that player has completed
        var /** @type {?} */ containsPotentialParentTransition = false;
        if (engine.totalAnimations) {
            var /** @type {?} */ currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
            // when this `if statement` does not continue forward it means that
            // a previous animation query has selected the current element and
            // is animating it. In this situation want to continue fowards and
            // allow the element to be queued up for animation later.
            if (currentPlayers && currentPlayers.length) {
                containsPotentialParentTransition = true;
            }
            else {
                var /** @type {?} */ parent_1 = element;
                while (parent_1 = parent_1.parentNode) {
                    var /** @type {?} */ triggers = engine.statesByElement.get(parent_1);
                    if (triggers) {
                        containsPotentialParentTransition = true;
                        break;
                    }
                }
            }
        }
        // at this stage we know that the element will either get removed
        // during flush or will be picked up by a parent query. Either way
        // we need to fire the listeners for this element when it DOES get
        // removed (once the query parent animation is done or after flush)
        this.prepareLeaveAnimationListeners(element);
        // whether or not a parent has an animation we need to delay the deferral of the leave
        // operation until we have more information (which we do after flush() has been called)
        if (containsPotentialParentTransition) {
            engine.markElementAsRemoved(this.id, element, false, context);
        }
        else {
            // we do this after the flush has occurred such
            // that the callbacks can be fired
            engine.afterFlush(function () { return _this.clearElementCache(element); });
            engine.destroyInnerAnimations(element);
            engine._onRemovalComplete(element, context);
        }
    };
    /**
     * @param {?} element
     * @param {?} parent
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.insertNode = /**
     * @param {?} element
     * @param {?} parent
     * @return {?}
     */
    function (element, parent) { addClass(element, this._hostClassName); };
    /**
     * @param {?} microtaskId
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.drainQueuedTransitions = /**
     * @param {?} microtaskId
     * @return {?}
     */
    function (microtaskId) {
        var _this = this;
        var /** @type {?} */ instructions = [];
        this._queue.forEach(function (entry) {
            var /** @type {?} */ player = entry.player;
            if (player.destroyed)
                return;
            var /** @type {?} */ element = entry.element;
            var /** @type {?} */ listeners = _this._elementListeners.get(element);
            if (listeners) {
                listeners.forEach(function (listener) {
                    if (listener.name == entry.triggerName) {
                        var /** @type {?} */ baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
                        (/** @type {?} */ (baseEvent))['_data'] = microtaskId;
                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
                    }
                });
            }
            if (player.markedForDestroy) {
                _this._engine.afterFlush(function () {
                    // now we can destroy the element properly since the event listeners have
                    // been bound to the player
                    player.destroy();
                });
            }
            else {
                instructions.push(entry);
            }
        });
        this._queue = [];
        return instructions.sort(function (a, b) {
            // if depCount == 0 them move to front
            // otherwise if a contains b then move back
            var /** @type {?} */ d0 = a.transition.ast.depCount;
            var /** @type {?} */ d1 = b.transition.ast.depCount;
            if (d0 == 0 || d1 == 0) {
                return d0 - d1;
            }
            return _this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
        });
    };
    /**
     * @param {?} context
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.destroy = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        this.players.forEach(function (p) { return p.destroy(); });
        this._signalRemovalForInnerTriggers(this.hostElement, context);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AnimationTransitionNamespace.prototype.elementContainsData = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ containsData = false;
        if (this._elementListeners.has(element))
            containsData = true;
        containsData =
            (this._queue.find(function (entry) { return entry.element === element; }) ? true : false) || containsData;
        return containsData;
    };
    return AnimationTransitionNamespace;
}());
/**
 * @record
 */

var TransitionAnimationEngine = /** @class */ (function () {
    function TransitionAnimationEngine(driver, _normalizer) {
        this.driver = driver;
        this._normalizer = _normalizer;
        this.players = [];
        this.newHostElements = new Map();
        this.playersByElement = new Map();
        this.playersByQueriedElement = new Map();
        this.statesByElement = new Map();
        this.disabledNodes = new Set();
        this.totalAnimations = 0;
        this.totalQueuedPlayers = 0;
        this._namespaceLookup = {};
        this._namespaceList = [];
        this._flushFns = [];
        this._whenQuietFns = [];
        this.namespacesByHostElement = new Map();
        this.collectedEnterElements = [];
        this.collectedLeaveElements = [];
        this.onRemovalComplete = function (element, context) { };
    }
    /** @internal */
    /**
     * \@internal
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    TransitionAnimationEngine.prototype._onRemovalComplete = /**
     * \@internal
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    function (element, context) { this.onRemovalComplete(element, context); };
    Object.defineProperty(TransitionAnimationEngine.prototype, "queuedPlayers", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ players = [];
            this._namespaceList.forEach(function (ns) {
                ns.players.forEach(function (player) {
                    if (player.queued) {
                        players.push(player);
                    }
                });
            });
            return players;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    TransitionAnimationEngine.prototype.createNamespace = /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    function (namespaceId, hostElement) {
        var /** @type {?} */ ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
        if (hostElement.parentNode) {
            this._balanceNamespaceList(ns, hostElement);
        }
        else {
            // defer this later until flush during when the host element has
            // been inserted so that we know exactly where to place it in
            // the namespace list
            this.newHostElements.set(hostElement, ns);
            // given that this host element is apart of the animation code, it
            // may or may not be inserted by a parent node that is an of an
            // animation renderer type. If this happens then we can still have
            // access to this item when we query for :enter nodes. If the parent
            // is a renderer then the set data-structure will normalize the entry
            this.collectEnterElement(hostElement);
        }
        return this._namespaceLookup[namespaceId] = ns;
    };
    /**
     * @param {?} ns
     * @param {?} hostElement
     * @return {?}
     */
    TransitionAnimationEngine.prototype._balanceNamespaceList = /**
     * @param {?} ns
     * @param {?} hostElement
     * @return {?}
     */
    function (ns, hostElement) {
        var /** @type {?} */ limit = this._namespaceList.length - 1;
        if (limit >= 0) {
            var /** @type {?} */ found = false;
            for (var /** @type {?} */ i = limit; i >= 0; i--) {
                var /** @type {?} */ nextNamespace = this._namespaceList[i];
                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
                    this._namespaceList.splice(i + 1, 0, ns);
                    found = true;
                    break;
                }
            }
            if (!found) {
                this._namespaceList.splice(0, 0, ns);
            }
        }
        else {
            this._namespaceList.push(ns);
        }
        this.namespacesByHostElement.set(hostElement, ns);
        return ns;
    };
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    TransitionAnimationEngine.prototype.register = /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    function (namespaceId, hostElement) {
        var /** @type {?} */ ns = this._namespaceLookup[namespaceId];
        if (!ns) {
            ns = this.createNamespace(namespaceId, hostElement);
        }
        return ns;
    };
    /**
     * @param {?} namespaceId
     * @param {?} name
     * @param {?} trigger
     * @return {?}
     */
    TransitionAnimationEngine.prototype.registerTrigger = /**
     * @param {?} namespaceId
     * @param {?} name
     * @param {?} trigger
     * @return {?}
     */
    function (namespaceId, name, trigger) {
        var /** @type {?} */ ns = this._namespaceLookup[namespaceId];
        if (ns && ns.register(name, trigger)) {
            this.totalAnimations++;
        }
    };
    /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    TransitionAnimationEngine.prototype.destroy = /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    function (namespaceId, context) {
        var _this = this;
        if (!namespaceId)
            return;
        var /** @type {?} */ ns = this._fetchNamespace(namespaceId);
        this.afterFlush(function () {
            _this.namespacesByHostElement.delete(ns.hostElement);
            delete _this._namespaceLookup[namespaceId];
            var /** @type {?} */ index = _this._namespaceList.indexOf(ns);
            if (index >= 0) {
                _this._namespaceList.splice(index, 1);
            }
        });
        this.afterFlushAnimationsDone(function () { return ns.destroy(context); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TransitionAnimationEngine.prototype._fetchNamespace = /**
     * @param {?} id
     * @return {?}
     */
    function (id) { return this._namespaceLookup[id]; };
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.fetchNamespacesByElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        // normally there should only be one namespace per element, however
        // if @triggers are placed on both the component element and then
        // its host element (within the component code) then there will be
        // two namespaces returned. We use a set here to simply the dedupe
        // of namespaces incase there are multiple triggers both the elm and host
        var /** @type {?} */ namespaces = new Set();
        var /** @type {?} */ elementStates = this.statesByElement.get(element);
        if (elementStates) {
            var /** @type {?} */ keys = Object.keys(elementStates);
            for (var /** @type {?} */ i = 0; i < keys.length; i++) {
                var /** @type {?} */ nsId = elementStates[keys[i]].namespaceId;
                if (nsId) {
                    var /** @type {?} */ ns = this._fetchNamespace(nsId);
                    if (ns) {
                        namespaces.add(ns);
                    }
                }
            }
        }
        return namespaces;
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    TransitionAnimationEngine.prototype.trigger = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (namespaceId, element, name, value) {
        if (isElementNode(element)) {
            this._fetchNamespace(namespaceId).trigger(element, name, value);
            return true;
        }
        return false;
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    TransitionAnimationEngine.prototype.insertNode = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    function (namespaceId, element, parent, insertBefore) {
        if (!isElementNode(element))
            return;
        // special case for when an element is removed and reinserted (move operation)
        // when this occurs we do not want to use the element for deletion later
        var /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);
        if (details && details.setForRemoval) {
            details.setForRemoval = false;
        }
        // in the event that the namespaceId is blank then the caller
        // code does not contain any animation code in it, but it is
        // just being called so that the node is marked as being inserted
        if (namespaceId) {
            this._fetchNamespace(namespaceId).insertNode(element, parent);
        }
        // only *directives and host elements are inserted before
        if (insertBefore) {
            this.collectEnterElement(element);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.collectEnterElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { this.collectedEnterElements.push(element); };
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    TransitionAnimationEngine.prototype.markElementAsDisabled = /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    function (element, value) {
        if (value) {
            if (!this.disabledNodes.has(element)) {
                this.disabledNodes.add(element);
                addClass(element, DISABLED_CLASSNAME);
            }
        }
        else if (this.disabledNodes.has(element)) {
            this.disabledNodes.delete(element);
            removeClass(element, DISABLED_CLASSNAME);
        }
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    TransitionAnimationEngine.prototype.removeNode = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    function (namespaceId, element, context) {
        if (!isElementNode(element)) {
            this._onRemovalComplete(element, context);
            return;
        }
        var /** @type {?} */ ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
        if (ns) {
            ns.removeNode(element, context);
        }
        else {
            this.markElementAsRemoved(namespaceId, element, false, context);
        }
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?=} hasAnimation
     * @param {?=} context
     * @return {?}
     */
    TransitionAnimationEngine.prototype.markElementAsRemoved = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?=} hasAnimation
     * @param {?=} context
     * @return {?}
     */
    function (namespaceId, element, hasAnimation, context) {
        this.collectedLeaveElements.push(element);
        element[REMOVAL_FLAG] = {
            namespaceId: namespaceId,
            setForRemoval: context, hasAnimation: hasAnimation,
            removedBeforeQueried: false
        };
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    TransitionAnimationEngine.prototype.listen = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    function (namespaceId, element, name, phase, callback) {
        if (isElementNode(element)) {
            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
        }
        return function () { };
    };
    /**
     * @param {?} entry
     * @param {?} subTimelines
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @return {?}
     */
    TransitionAnimationEngine.prototype._buildInstruction = /**
     * @param {?} entry
     * @param {?} subTimelines
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @return {?}
     */
    function (entry, subTimelines, enterClassName, leaveClassName) {
        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines);
    };
    /**
     * @param {?} containerElement
     * @return {?}
     */
    TransitionAnimationEngine.prototype.destroyInnerAnimations = /**
     * @param {?} containerElement
     * @return {?}
     */
    function (containerElement) {
        var _this = this;
        var /** @type {?} */ elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
        elements.forEach(function (element) { return _this.destroyActiveAnimationsForElement(element); });
        if (this.playersByQueriedElement.size == 0)
            return;
        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
        elements.forEach(function (element) { return _this.finishActiveQueriedAnimationOnElement(element); });
    };
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.destroyActiveAnimationsForElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ players = this.playersByElement.get(element);
        if (players) {
            players.forEach(function (player) {
                // special case for when an element is set for destruction, but hasn't started.
                // in this situation we want to delay the destruction until the flush occurs
                // so that any event listeners attached to the player are triggered.
                if (player.queued) {
                    player.markedForDestroy = true;
                }
                else {
                    player.destroy();
                }
            });
        }
        var /** @type {?} */ stateMap = this.statesByElement.get(element);
        if (stateMap) {
            Object.keys(stateMap).forEach(function (triggerName) { return stateMap[triggerName] = DELETED_STATE_VALUE; });
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.finishActiveQueriedAnimationOnElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ players = this.playersByQueriedElement.get(element);
        if (players) {
            players.forEach(function (player) { return player.finish(); });
        }
    };
    /**
     * @return {?}
     */
    TransitionAnimationEngine.prototype.whenRenderingDone = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.players.length) {
                return optimizeGroupPlayer(_this.players).onDone(function () { return resolve(); });
            }
            else {
                resolve();
            }
        });
    };
    /**
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.processLeaveNode = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var _this = this;
        var /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);
        if (details && details.setForRemoval) {
            // this will prevent it from removing it twice
            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
            if (details.namespaceId) {
                this.destroyInnerAnimations(element);
                var /** @type {?} */ ns = this._fetchNamespace(details.namespaceId);
                if (ns) {
                    ns.clearElementCache(element);
                }
            }
            this._onRemovalComplete(element, details.setForRemoval);
        }
        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
            this.markElementAsDisabled(element, false);
        }
        this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
            _this.markElementAsDisabled(element, false);
        });
    };
    /**
     * @param {?=} microtaskId
     * @return {?}
     */
    TransitionAnimationEngine.prototype.flush = /**
     * @param {?=} microtaskId
     * @return {?}
     */
    function (microtaskId) {
        var _this = this;
        if (microtaskId === void 0) { microtaskId = -1; }
        var /** @type {?} */ players = [];
        if (this.newHostElements.size) {
            this.newHostElements.forEach(function (ns, element) { return _this._balanceNamespaceList(ns, element); });
            this.newHostElements.clear();
        }
        if (this.totalAnimations && this.collectedEnterElements.length) {
            for (var /** @type {?} */ i = 0; i < this.collectedEnterElements.length; i++) {
                var /** @type {?} */ elm = this.collectedEnterElements[i];
                addClass(elm, STAR_CLASSNAME);
            }
        }
        if (this._namespaceList.length &&
            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
            var /** @type {?} */ cleanupFns = [];
            try {
                players = this._flushAnimations(cleanupFns, microtaskId);
            }
            finally {
                for (var /** @type {?} */ i = 0; i < cleanupFns.length; i++) {
                    cleanupFns[i]();
                }
            }
        }
        else {
            for (var /** @type {?} */ i = 0; i < this.collectedLeaveElements.length; i++) {
                var /** @type {?} */ element = this.collectedLeaveElements[i];
                this.processLeaveNode(element);
            }
        }
        this.totalQueuedPlayers = 0;
        this.collectedEnterElements.length = 0;
        this.collectedLeaveElements.length = 0;
        this._flushFns.forEach(function (fn) { return fn(); });
        this._flushFns = [];
        if (this._whenQuietFns.length) {
            // we move these over to a variable so that
            // if any new callbacks are registered in another
            // flush they do not populate the existing set
            var /** @type {?} */ quietFns_1 = this._whenQuietFns;
            this._whenQuietFns = [];
            if (players.length) {
                optimizeGroupPlayer(players).onDone(function () { quietFns_1.forEach(function (fn) { return fn(); }); });
            }
            else {
                quietFns_1.forEach(function (fn) { return fn(); });
            }
        }
    };
    /**
     * @param {?} errors
     * @return {?}
     */
    TransitionAnimationEngine.prototype.reportError = /**
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        throw new Error("Unable to process animations due to the following failed trigger transitions\n " + errors.join('\n'));
    };
    /**
     * @param {?} cleanupFns
     * @param {?} microtaskId
     * @return {?}
     */
    TransitionAnimationEngine.prototype._flushAnimations = /**
     * @param {?} cleanupFns
     * @param {?} microtaskId
     * @return {?}
     */
    function (cleanupFns, microtaskId) {
        var _this = this;
        var /** @type {?} */ subTimelines = new ElementInstructionMap();
        var /** @type {?} */ skippedPlayers = [];
        var /** @type {?} */ skippedPlayersMap = new Map();
        var /** @type {?} */ queuedInstructions = [];
        var /** @type {?} */ queriedElements = new Map();
        var /** @type {?} */ allPreStyleElements = new Map();
        var /** @type {?} */ allPostStyleElements = new Map();
        var /** @type {?} */ disabledElementsSet = new Set();
        this.disabledNodes.forEach(function (node) {
            disabledElementsSet.add(node);
            var /** @type {?} */ nodesThatAreDisabled = _this.driver.query(node, QUEUED_SELECTOR, true);
            for (var /** @type {?} */ i_1 = 0; i_1 < nodesThatAreDisabled.length; i_1++) {
                disabledElementsSet.add(nodesThatAreDisabled[i_1]);
            }
        });
        var /** @type {?} */ bodyNode = getBodyNode();
        var /** @type {?} */ allTriggerElements = Array.from(this.statesByElement.keys());
        var /** @type {?} */ enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
        // this must occur before the instructions are built below such that
        // the :enter queries match the elements (since the timeline queries
        // are fired during instruction building).
        var /** @type {?} */ enterNodeMapIds = new Map();
        var /** @type {?} */ i = 0;
        enterNodeMap.forEach(function (nodes, root) {
            var /** @type {?} */ className = ENTER_CLASSNAME + i++;
            enterNodeMapIds.set(root, className);
            nodes.forEach(function (node) { return addClass(node, className); });
        });
        var /** @type {?} */ allLeaveNodes = [];
        var /** @type {?} */ mergedLeaveNodes = new Set();
        var /** @type {?} */ leaveNodesWithoutAnimations = new Set();
        for (var /** @type {?} */ i_2 = 0; i_2 < this.collectedLeaveElements.length; i_2++) {
            var /** @type {?} */ element = this.collectedLeaveElements[i_2];
            var /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);
            if (details && details.setForRemoval) {
                allLeaveNodes.push(element);
                mergedLeaveNodes.add(element);
                if (details.hasAnimation) {
                    this.driver.query(element, STAR_SELECTOR, true).forEach(function (elm) { return mergedLeaveNodes.add(elm); });
                }
                else {
                    leaveNodesWithoutAnimations.add(element);
                }
            }
        }
        var /** @type {?} */ leaveNodeMapIds = new Map();
        var /** @type {?} */ leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
        leaveNodeMap.forEach(function (nodes, root) {
            var /** @type {?} */ className = LEAVE_CLASSNAME + i++;
            leaveNodeMapIds.set(root, className);
            nodes.forEach(function (node) { return addClass(node, className); });
        });
        cleanupFns.push(function () {
            enterNodeMap.forEach(function (nodes, root) {
                var /** @type {?} */ className = /** @type {?} */ ((enterNodeMapIds.get(root)));
                nodes.forEach(function (node) { return removeClass(node, className); });
            });
            leaveNodeMap.forEach(function (nodes, root) {
                var /** @type {?} */ className = /** @type {?} */ ((leaveNodeMapIds.get(root)));
                nodes.forEach(function (node) { return removeClass(node, className); });
            });
            allLeaveNodes.forEach(function (element) { _this.processLeaveNode(element); });
        });
        var /** @type {?} */ allPlayers = [];
        var /** @type {?} */ erroneousTransitions = [];
        for (var /** @type {?} */ i_3 = this._namespaceList.length - 1; i_3 >= 0; i_3--) {
            var /** @type {?} */ ns = this._namespaceList[i_3];
            ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
                var /** @type {?} */ player = entry.player;
                allPlayers.push(player);
                var /** @type {?} */ element = entry.element;
                if (!bodyNode || !_this.driver.containsElement(bodyNode, element)) {
                    player.destroy();
                    return;
                }
                var /** @type {?} */ leaveClassName = /** @type {?} */ ((leaveNodeMapIds.get(element)));
                var /** @type {?} */ enterClassName = /** @type {?} */ ((enterNodeMapIds.get(element)));
                var /** @type {?} */ instruction = /** @type {?} */ ((_this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName)));
                if (instruction.errors && instruction.errors.length) {
                    erroneousTransitions.push(instruction);
                    return;
                }
                // if a unmatched transition is queued to go then it SHOULD NOT render
                // an animation and cancel the previously running animations.
                if (entry.isFallbackTransition) {
                    player.onStart(function () { return eraseStyles(element, instruction.fromStyles); });
                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
                    skippedPlayers.push(player);
                    return;
                }
                // this means that if a parent animation uses this animation as a sub trigger
                // then it will instruct the timeline builder to not add a player delay, but
                // instead stretch the first keyframe gap up until the animation starts. The
                // reason this is important is to prevent extra initialization styles from being
                // required by the user in the animation.
                instruction.timelines.forEach(function (tl) { return tl.stretchStartingKeyframe = true; });
                subTimelines.append(element, instruction.timelines);
                var /** @type {?} */ tuple = { instruction: instruction, player: player, element: element };
                queuedInstructions.push(tuple);
                instruction.queriedElements.forEach(function (element) { return getOrSetAsInMap(queriedElements, element, []).push(player); });
                instruction.preStyleProps.forEach(function (stringMap, element) {
                    var /** @type {?} */ props = Object.keys(stringMap);
                    if (props.length) {
                        var /** @type {?} */ setVal_1 = /** @type {?} */ ((allPreStyleElements.get(element)));
                        if (!setVal_1) {
                            allPreStyleElements.set(element, setVal_1 = new Set());
                        }
                        props.forEach(function (prop) { return setVal_1.add(prop); });
                    }
                });
                instruction.postStyleProps.forEach(function (stringMap, element) {
                    var /** @type {?} */ props = Object.keys(stringMap);
                    var /** @type {?} */ setVal = /** @type {?} */ ((allPostStyleElements.get(element)));
                    if (!setVal) {
                        allPostStyleElements.set(element, setVal = new Set());
                    }
                    props.forEach(function (prop) { return setVal.add(prop); });
                });
            });
        }
        if (erroneousTransitions.length) {
            var /** @type {?} */ errors_1 = [];
            erroneousTransitions.forEach(function (instruction) {
                errors_1.push("@" + instruction.triggerName + " has failed due to:\n"); /** @type {?} */
                ((instruction.errors)).forEach(function (error) { return errors_1.push("- " + error + "\n"); });
            });
            allPlayers.forEach(function (player) { return player.destroy(); });
            this.reportError(errors_1);
        }
        var /** @type {?} */ allPreviousPlayersMap = new Map();
        // this map works to tell which element in the DOM tree is contained by
        // which animation. Further down below this map will get populated once
        // the players are built and in doing so it can efficiently figure out
        // if a sub player is skipped due to a parent player having priority.
        var /** @type {?} */ animationElementMap = new Map();
        queuedInstructions.forEach(function (entry) {
            var /** @type {?} */ element = entry.element;
            if (subTimelines.has(element)) {
                animationElementMap.set(element, element);
                _this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
            }
        });
        skippedPlayers.forEach(function (player) {
            var /** @type {?} */ element = player.element;
            var /** @type {?} */ previousPlayers = _this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
            previousPlayers.forEach(function (prevPlayer) {
                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
                prevPlayer.destroy();
            });
        });
        // this is a special case for nodes that will be removed (either by)
        // having their own leave animations or by being queried in a container
        // that will be removed once a parent animation is complete. The idea
        // here is that * styles must be identical to ! styles because of
        // backwards compatibility (* is also filled in by default in many places).
        // Otherwise * styles will return an empty value or auto since the element
        // that is being getComputedStyle'd will not be visible (since * = destination)
        var /** @type {?} */ replaceNodes = allLeaveNodes.filter(function (node) {
            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
        });
        // POST STAGE: fill the * styles
        var /** @type {?} */ postStylesMap = new Map();
        var /** @type {?} */ allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations.AUTO_STYLE);
        allLeaveQueriedNodes.forEach(function (node) {
            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
                replaceNodes.push(node);
            }
        });
        // PRE STAGE: fill the ! styles
        var /** @type {?} */ preStylesMap = new Map();
        enterNodeMap.forEach(function (nodes, root) {
            cloakAndComputeStyles(preStylesMap, _this.driver, new Set(nodes), allPreStyleElements, _angular_animations.ɵPRE_STYLE);
        });
        replaceNodes.forEach(function (node) {
            var /** @type {?} */ post = postStylesMap.get(node);
            var /** @type {?} */ pre = preStylesMap.get(node);
            postStylesMap.set(node, /** @type {?} */ (__assign({}, post, pre)));
        });
        var /** @type {?} */ rootPlayers = [];
        var /** @type {?} */ subPlayers = [];
        var /** @type {?} */ NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
        queuedInstructions.forEach(function (entry) {
            var element = entry.element, player = entry.player, instruction = entry.instruction;
            // this means that it was never consumed by a parent animation which
            // means that it is independent and therefore should be set for animation
            if (subTimelines.has(element)) {
                if (disabledElementsSet.has(element)) {
                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
                    skippedPlayers.push(player);
                    return;
                }
                // this will flow up the DOM and query the map to figure out
                // if a parent animation has priority over it. In the situation
                // that a parent is detected then it will cancel the loop. If
                // nothing is detected, or it takes a few hops to find a parent,
                // then it will fill in the missing nodes and signal them as having
                // a detected parent (or a NO_PARENT value via a special constant).
                var /** @type {?} */ parentWithAnimation_1 = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
                if (animationElementMap.size > 1) {
                    var /** @type {?} */ elm = element;
                    var /** @type {?} */ parentsToAdd = [];
                    while (elm = elm.parentNode) {
                        var /** @type {?} */ detectedParent = animationElementMap.get(elm);
                        if (detectedParent) {
                            parentWithAnimation_1 = detectedParent;
                            break;
                        }
                        parentsToAdd.push(elm);
                    }
                    parentsToAdd.forEach(function (parent) { return animationElementMap.set(parent, parentWithAnimation_1); });
                }
                var /** @type {?} */ innerPlayer = _this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
                player.setRealPlayer(innerPlayer);
                if (parentWithAnimation_1 === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
                    rootPlayers.push(player);
                }
                else {
                    var /** @type {?} */ parentPlayers = _this.playersByElement.get(parentWithAnimation_1);
                    if (parentPlayers && parentPlayers.length) {
                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);
                    }
                    skippedPlayers.push(player);
                }
            }
            else {
                eraseStyles(element, instruction.fromStyles);
                player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
                // there still might be a ancestor player animating this
                // element therefore we will still add it as a sub player
                // even if its animation may be disabled
                subPlayers.push(player);
                if (disabledElementsSet.has(element)) {
                    skippedPlayers.push(player);
                }
            }
        });
        // find all of the sub players' corresponding inner animation player
        subPlayers.forEach(function (player) {
            // even if any players are not found for a sub animation then it
            // will still complete itself after the next tick since it's Noop
            var /** @type {?} */ playersForElement = skippedPlayersMap.get(player.element);
            if (playersForElement && playersForElement.length) {
                var /** @type {?} */ innerPlayer = optimizeGroupPlayer(playersForElement);
                player.setRealPlayer(innerPlayer);
            }
        });
        // the reason why we don't actually play the animation is
        // because all that a skipped player is designed to do is to
        // fire the start/done transition callback events
        skippedPlayers.forEach(function (player) {
            if (player.parentPlayer) {
                player.syncPlayerEvents(player.parentPlayer);
            }
            else {
                player.destroy();
            }
        });
        // run through all of the queued removals and see if they
        // were picked up by a query. If not then perform the removal
        // operation right away unless a parent animation is ongoing.
        for (var /** @type {?} */ i_4 = 0; i_4 < allLeaveNodes.length; i_4++) {
            var /** @type {?} */ element = allLeaveNodes[i_4];
            var /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);
            removeClass(element, LEAVE_CLASSNAME);
            // this means the element has a removal animation that is being
            // taken care of and therefore the inner elements will hang around
            // until that animation is over (or the parent queried animation)
            if (details && details.hasAnimation)
                continue;
            var /** @type {?} */ players = [];
            // if this element is queried or if it contains queried children
            // then we want for the element not to be removed from the page
            // until the queried animations have finished
            if (queriedElements.size) {
                var /** @type {?} */ queriedPlayerResults = queriedElements.get(element);
                if (queriedPlayerResults && queriedPlayerResults.length) {
                    players.push.apply(players, queriedPlayerResults);
                }
                var /** @type {?} */ queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
                for (var /** @type {?} */ j = 0; j < queriedInnerElements.length; j++) {
                    var /** @type {?} */ queriedPlayers = queriedElements.get(queriedInnerElements[j]);
                    if (queriedPlayers && queriedPlayers.length) {
                        players.push.apply(players, queriedPlayers);
                    }
                }
            }
            var /** @type {?} */ activePlayers = players.filter(function (p) { return !p.destroyed; });
            if (activePlayers.length) {
                removeNodesAfterAnimationDone(this, element, activePlayers);
            }
            else {
                this.processLeaveNode(element);
            }
        }
        // this is required so the cleanup method doesn't remove them
        allLeaveNodes.length = 0;
        rootPlayers.forEach(function (player) {
            _this.players.push(player);
            player.onDone(function () {
                player.destroy();
                var /** @type {?} */ index = _this.players.indexOf(player);
                _this.players.splice(index, 1);
            });
            player.play();
        });
        return rootPlayers;
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @return {?}
     */
    TransitionAnimationEngine.prototype.elementContainsData = /**
     * @param {?} namespaceId
     * @param {?} element
     * @return {?}
     */
    function (namespaceId, element) {
        var /** @type {?} */ containsData = false;
        var /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);
        if (details && details.setForRemoval)
            containsData = true;
        if (this.playersByElement.has(element))
            containsData = true;
        if (this.playersByQueriedElement.has(element))
            containsData = true;
        if (this.statesByElement.has(element))
            containsData = true;
        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    TransitionAnimationEngine.prototype.afterFlush = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) { this._flushFns.push(callback); };
    /**
     * @param {?} callback
     * @return {?}
     */
    TransitionAnimationEngine.prototype.afterFlushAnimationsDone = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) { this._whenQuietFns.push(callback); };
    /**
     * @param {?} element
     * @param {?} isQueriedElement
     * @param {?=} namespaceId
     * @param {?=} triggerName
     * @param {?=} toStateValue
     * @return {?}
     */
    TransitionAnimationEngine.prototype._getPreviousPlayers = /**
     * @param {?} element
     * @param {?} isQueriedElement
     * @param {?=} namespaceId
     * @param {?=} triggerName
     * @param {?=} toStateValue
     * @return {?}
     */
    function (element, isQueriedElement, namespaceId, triggerName, toStateValue) {
        var /** @type {?} */ players = [];
        if (isQueriedElement) {
            var /** @type {?} */ queriedElementPlayers = this.playersByQueriedElement.get(element);
            if (queriedElementPlayers) {
                players = queriedElementPlayers;
            }
        }
        else {
            var /** @type {?} */ elementPlayers = this.playersByElement.get(element);
            if (elementPlayers) {
                var /** @type {?} */ isRemovalAnimation_1 = !toStateValue || toStateValue == VOID_VALUE;
                elementPlayers.forEach(function (player) {
                    if (player.queued)
                        return;
                    if (!isRemovalAnimation_1 && player.triggerName != triggerName)
                        return;
                    players.push(player);
                });
            }
        }
        if (namespaceId || triggerName) {
            players = players.filter(function (player) {
                if (namespaceId && namespaceId != player.namespaceId)
                    return false;
                if (triggerName && triggerName != player.triggerName)
                    return false;
                return true;
            });
        }
        return players;
    };
    /**
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @return {?}
     */
    TransitionAnimationEngine.prototype._beforeAnimationBuild = /**
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @return {?}
     */
    function (namespaceId, instruction, allPreviousPlayersMap) {
        var /** @type {?} */ triggerName = instruction.triggerName;
        var /** @type {?} */ rootElement = instruction.element;
        // when a removal animation occurs, ALL previous players are collected
        // and destroyed (even if they are outside of the current namespace)
        var /** @type {?} */ targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
        var /** @type {?} */ targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;
        var _loop_1 = function (timelineInstruction) {
            var /** @type {?} */ element = timelineInstruction.element;
            var /** @type {?} */ isQueriedElement = element !== rootElement;
            var /** @type {?} */ players = getOrSetAsInMap(allPreviousPlayersMap, element, []);
            var /** @type {?} */ previousPlayers = this_1._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
            previousPlayers.forEach(function (player) {
                var /** @type {?} */ realPlayer = /** @type {?} */ (player.getRealPlayer());
                if (realPlayer.beforeDestroy) {
                    realPlayer.beforeDestroy();
                }
                player.destroy();
                players.push(player);
            });
        };
        var this_1 = this;
        for (var _i = 0, _a = instruction.timelines; _i < _a.length; _i++) {
            var timelineInstruction = _a[_i];
            _loop_1(timelineInstruction);
        }
        // this needs to be done so that the PRE/POST styles can be
        // computed properly without interfering with the previous animation
        eraseStyles(rootElement, instruction.fromStyles);
    };
    /**
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @param {?} skippedPlayersMap
     * @param {?} preStylesMap
     * @param {?} postStylesMap
     * @return {?}
     */
    TransitionAnimationEngine.prototype._buildAnimation = /**
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @param {?} skippedPlayersMap
     * @param {?} preStylesMap
     * @param {?} postStylesMap
     * @return {?}
     */
    function (namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
        var _this = this;
        var /** @type {?} */ triggerName = instruction.triggerName;
        var /** @type {?} */ rootElement = instruction.element;
        // we first run this so that the previous animation player
        // data can be passed into the successive animation players
        var /** @type {?} */ allQueriedPlayers = [];
        var /** @type {?} */ allConsumedElements = new Set();
        var /** @type {?} */ allSubElements = new Set();
        var /** @type {?} */ allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
            var /** @type {?} */ element = timelineInstruction.element;
            allConsumedElements.add(element);
            // FIXME (matsko): make sure to-be-removed animations are removed properly
            var /** @type {?} */ details = element[REMOVAL_FLAG];
            if (details && details.removedBeforeQueried)
                return new _angular_animations.NoopAnimationPlayer();
            var /** @type {?} */ isQueriedElement = element !== rootElement;
            var /** @type {?} */ previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)
                .map(function (p) { return p.getRealPlayer(); }))
                .filter(function (p) {
                // the `element` is not apart of the AnimationPlayer definition, but
                // Mock/WebAnimations
                // use the element within their implementation. This will be added in Angular5 to
                // AnimationPlayer
                var /** @type {?} */ pp = /** @type {?} */ (p);
                return pp.element ? pp.element === element : false;
            });
            var /** @type {?} */ preStyles = preStylesMap.get(element);
            var /** @type {?} */ postStyles = postStylesMap.get(element);
            var /** @type {?} */ keyframes = normalizeKeyframes(_this.driver, _this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);
            var /** @type {?} */ player = _this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
            // this means that this particular player belongs to a sub trigger. It is
            // important that we match this player up with the corresponding (@trigger.listener)
            if (timelineInstruction.subTimeline && skippedPlayersMap) {
                allSubElements.add(element);
            }
            if (isQueriedElement) {
                var /** @type {?} */ wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
                wrappedPlayer.setRealPlayer(player);
                allQueriedPlayers.push(wrappedPlayer);
            }
            return player;
        });
        allQueriedPlayers.forEach(function (player) {
            getOrSetAsInMap(_this.playersByQueriedElement, player.element, []).push(player);
            player.onDone(function () { return deleteOrUnsetInMap(_this.playersByQueriedElement, player.element, player); });
        });
        allConsumedElements.forEach(function (element) { return addClass(element, NG_ANIMATING_CLASSNAME); });
        var /** @type {?} */ player = optimizeGroupPlayer(allNewPlayers);
        player.onDestroy(function () {
            allConsumedElements.forEach(function (element) { return removeClass(element, NG_ANIMATING_CLASSNAME); });
            setStyles(rootElement, instruction.toStyles);
        });
        // this basically makes all of the callbacks for sub element animations
        // be dependent on the upper players for when they finish
        allSubElements.forEach(function (element) { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); });
        return player;
    };
    /**
     * @param {?} instruction
     * @param {?} keyframes
     * @param {?} previousPlayers
     * @return {?}
     */
    TransitionAnimationEngine.prototype._buildPlayer = /**
     * @param {?} instruction
     * @param {?} keyframes
     * @param {?} previousPlayers
     * @return {?}
     */
    function (instruction, keyframes, previousPlayers) {
        if (keyframes.length > 0) {
            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
        }
        // special case for when an empty transition|definition is provided
        // ... there is no point in rendering an empty animation
        return new _angular_animations.NoopAnimationPlayer();
    };
    return TransitionAnimationEngine;
}());
var TransitionAnimationPlayer = /** @class */ (function () {
    function TransitionAnimationPlayer(namespaceId, triggerName, element) {
        this.namespaceId = namespaceId;
        this.triggerName = triggerName;
        this.element = element;
        this._player = new _angular_animations.NoopAnimationPlayer();
        this._containsRealPlayer = false;
        this._queuedCallbacks = {};
        this.destroyed = false;
        this.markedForDestroy = false;
    }
    Object.defineProperty(TransitionAnimationPlayer.prototype, "queued", {
        get: /**
         * @return {?}
         */
        function () { return this._containsRealPlayer == false; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} player
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.setRealPlayer = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        var _this = this;
        if (this._containsRealPlayer)
            return;
        this._player = player;
        Object.keys(this._queuedCallbacks).forEach(function (phase) {
            _this._queuedCallbacks[phase].forEach(function (callback) { return listenOnPlayer(player, phase, undefined, callback); });
        });
        this._queuedCallbacks = {};
        this._containsRealPlayer = true;
    };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.getRealPlayer = /**
     * @return {?}
     */
    function () { return this._player; };
    /**
     * @param {?} player
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.syncPlayerEvents = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        var _this = this;
        var /** @type {?} */ p = /** @type {?} */ (this._player);
        if (p.triggerCallback) {
            player.onStart(function () { return p.triggerCallback('start'); });
        }
        player.onDone(function () { return _this.finish(); });
        player.onDestroy(function () { return _this.destroy(); });
    };
    /**
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    TransitionAnimationPlayer.prototype._queueEvent = /**
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    function (name, callback) {
        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.onDone = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        if (this.queued) {
            this._queueEvent('done', fn);
        }
        this._player.onDone(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.onStart = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        if (this.queued) {
            this._queueEvent('start', fn);
        }
        this._player.onStart(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.onDestroy = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        if (this.queued) {
            this._queueEvent('destroy', fn);
        }
        this._player.onDestroy(fn);
    };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.init = /**
     * @return {?}
     */
    function () { this._player.init(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.hasStarted = /**
     * @return {?}
     */
    function () { return this.queued ? false : this._player.hasStarted(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.play = /**
     * @return {?}
     */
    function () { !this.queued && this._player.play(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.pause = /**
     * @return {?}
     */
    function () { !this.queued && this._player.pause(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.restart = /**
     * @return {?}
     */
    function () { !this.queued && this._player.restart(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.finish = /**
     * @return {?}
     */
    function () { this._player.finish(); };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.destroy = /**
     * @return {?}
     */
    function () {
        (/** @type {?} */ (this)).destroyed = true;
        this._player.destroy();
    };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.reset = /**
     * @return {?}
     */
    function () { !this.queued && this._player.reset(); };
    /**
     * @param {?} p
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.setPosition = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        if (!this.queued) {
            this._player.setPosition(p);
        }
    };
    /**
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.getPosition = /**
     * @return {?}
     */
    function () { return this.queued ? 0 : this._player.getPosition(); };
    Object.defineProperty(TransitionAnimationPlayer.prototype, "totalTime", {
        get: /**
         * @return {?}
         */
        function () { return this._player.totalTime; },
        enumerable: true,
        configurable: true
    });
    /* @internal */
    /**
     * @param {?} phaseName
     * @return {?}
     */
    TransitionAnimationPlayer.prototype.triggerCallback = /**
     * @param {?} phaseName
     * @return {?}
     */
    function (phaseName) {
        var /** @type {?} */ p = /** @type {?} */ (this._player);
        if (p.triggerCallback) {
            p.triggerCallback(phaseName);
        }
    };
    return TransitionAnimationPlayer;
}());
/**
 * @param {?} map
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function deleteOrUnsetInMap(map, key, value) {
    var /** @type {?} */ currentValues;
    if (map instanceof Map) {
        currentValues = map.get(key);
        if (currentValues) {
            if (currentValues.length) {
                var /** @type {?} */ index = currentValues.indexOf(value);
                currentValues.splice(index, 1);
            }
            if (currentValues.length == 0) {
                map.delete(key);
            }
        }
    }
    else {
        currentValues = map[key];
        if (currentValues) {
            if (currentValues.length) {
                var /** @type {?} */ index = currentValues.indexOf(value);
                currentValues.splice(index, 1);
            }
            if (currentValues.length == 0) {
                delete map[key];
            }
        }
    }
    return currentValues;
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeTriggerValue(value) {
    // we use `!= null` here because it's the most simple
    // way to test against a "falsy" value without mixing
    // in empty strings or a zero value. DO NOT OPTIMIZE.
    return value != null ? value : null;
}
/**
 * @param {?} node
 * @return {?}
 */
function isElementNode(node) {
    return node && node['nodeType'] === 1;
}
/**
 * @param {?} eventName
 * @return {?}
 */
function isTriggerEventValid(eventName) {
    return eventName == 'start' || eventName == 'done';
}
/**
 * @param {?} element
 * @param {?=} value
 * @return {?}
 */
function cloakElement(element, value) {
    var /** @type {?} */ oldValue = element.style.display;
    element.style.display = value != null ? value : 'none';
    return oldValue;
}
/**
 * @param {?} valuesMap
 * @param {?} driver
 * @param {?} elements
 * @param {?} elementPropsMap
 * @param {?} defaultStyle
 * @return {?}
 */
function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
    var /** @type {?} */ cloakVals = [];
    elements.forEach(function (element) { return cloakVals.push(cloakElement(element)); });
    var /** @type {?} */ failedElements = [];
    elementPropsMap.forEach(function (props, element) {
        var /** @type {?} */ styles = {};
        props.forEach(function (prop) {
            var /** @type {?} */ value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);
            // there is no easy way to detect this because a sub element could be removed
            // by a parent animation element being detached.
            if (!value || value.length == 0) {
                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
                failedElements.push(element);
            }
        });
        valuesMap.set(element, styles);
    });
    // we use a index variable here since Set.forEach(a, i) does not return
    // an index value for the closure (but instead just the value)
    var /** @type {?} */ i = 0;
    elements.forEach(function (element) { return cloakElement(element, cloakVals[i++]); });
    return failedElements;
}
/**
 * @param {?} roots
 * @param {?} nodes
 * @return {?}
 */
function buildRootMap(roots, nodes) {
    var /** @type {?} */ rootMap = new Map();
    roots.forEach(function (root) { return rootMap.set(root, []); });
    if (nodes.length == 0)
        return rootMap;
    var /** @type {?} */ NULL_NODE = 1;
    var /** @type {?} */ nodeSet = new Set(nodes);
    var /** @type {?} */ localRootMap = new Map();
    /**
     * @param {?} node
     * @return {?}
     */
    function getRoot(node) {
        if (!node)
            return NULL_NODE;
        var /** @type {?} */ root = localRootMap.get(node);
        if (root)
            return root;
        var /** @type {?} */ parent = node.parentNode;
        if (rootMap.has(parent)) {
            // ngIf inside @trigger
            root = parent;
        }
        else if (nodeSet.has(parent)) {
            // ngIf inside ngIf
            root = NULL_NODE;
        }
        else {
            // recurse upwards
            root = getRoot(parent);
        }
        localRootMap.set(node, root);
        return root;
    }
    nodes.forEach(function (node) {
        var /** @type {?} */ root = getRoot(node);
        if (root !== NULL_NODE) {
            /** @type {?} */ ((rootMap.get(root))).push(node);
        }
    });
    return rootMap;
}
var CLASSES_CACHE_KEY = '$$classes';
/**
 * @param {?} element
 * @param {?} className
 * @return {?}
 */
function addClass(element, className) {
    if (element.classList) {
        element.classList.add(className);
    }
    else {
        var /** @type {?} */ classes = element[CLASSES_CACHE_KEY];
        if (!classes) {
            classes = element[CLASSES_CACHE_KEY] = {};
        }
        classes[className] = true;
    }
}
/**
 * @param {?} element
 * @param {?} className
 * @return {?}
 */
function removeClass(element, className) {
    if (element.classList) {
        element.classList.remove(className);
    }
    else {
        var /** @type {?} */ classes = element[CLASSES_CACHE_KEY];
        if (classes) {
            delete classes[className];
        }
    }
}
/**
 * @param {?} engine
 * @param {?} element
 * @param {?} players
 * @return {?}
 */
function removeNodesAfterAnimationDone(engine, element, players) {
    optimizeGroupPlayer(players).onDone(function () { return engine.processLeaveNode(element); });
}
/**
 * @param {?} players
 * @return {?}
 */
function flattenGroupPlayers(players) {
    var /** @type {?} */ finalPlayers = [];
    _flattenGroupPlayersRecur(players, finalPlayers);
    return finalPlayers;
}
/**
 * @param {?} players
 * @param {?} finalPlayers
 * @return {?}
 */
function _flattenGroupPlayersRecur(players, finalPlayers) {
    for (var /** @type {?} */ i = 0; i < players.length; i++) {
        var /** @type {?} */ player = players[i];
        if (player instanceof _angular_animations.ɵAnimationGroupPlayer) {
            _flattenGroupPlayersRecur(player.players, finalPlayers);
        }
        else {
            finalPlayers.push(/** @type {?} */ (player));
        }
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function objEquals(a, b) {
    var /** @type {?} */ k1 = Object.keys(a);
    var /** @type {?} */ k2 = Object.keys(b);
    if (k1.length != k2.length)
        return false;
    for (var /** @type {?} */ i = 0; i < k1.length; i++) {
        var /** @type {?} */ prop = k1[i];
        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])
            return false;
    }
    return true;
}
/**
 * @param {?} element
 * @param {?} allPreStyleElements
 * @param {?} allPostStyleElements
 * @return {?}
 */
function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
    var /** @type {?} */ postEntry = allPostStyleElements.get(element);
    if (!postEntry)
        return false;
    var /** @type {?} */ preEntry = allPreStyleElements.get(element);
    if (preEntry) {
        postEntry.forEach(function (data) { return ((preEntry)).add(data); });
    }
    else {
        allPreStyleElements.set(element, postEntry);
    }
    allPostStyleElements.delete(element);
    return true;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AnimationEngine = /** @class */ (function () {
    function AnimationEngine(_driver, normalizer) {
        var _this = this;
        this._driver = _driver;
        this._triggerCache = {};
        this.onRemovalComplete = function (element, context) { };
        this._transitionEngine = new TransitionAnimationEngine(_driver, normalizer);
        this._timelineEngine = new TimelineAnimationEngine(_driver, normalizer);
        this._transitionEngine.onRemovalComplete = function (element, context) {
            return _this.onRemovalComplete(element, context);
        };
    }
    /**
     * @param {?} componentId
     * @param {?} namespaceId
     * @param {?} hostElement
     * @param {?} name
     * @param {?} metadata
     * @return {?}
     */
    AnimationEngine.prototype.registerTrigger = /**
     * @param {?} componentId
     * @param {?} namespaceId
     * @param {?} hostElement
     * @param {?} name
     * @param {?} metadata
     * @return {?}
     */
    function (componentId, namespaceId, hostElement, name, metadata) {
        var /** @type {?} */ cacheKey = componentId + '-' + name;
        var /** @type {?} */ trigger = this._triggerCache[cacheKey];
        if (!trigger) {
            var /** @type {?} */ errors = [];
            var /** @type {?} */ ast = /** @type {?} */ (buildAnimationAst(this._driver, /** @type {?} */ (metadata), errors));
            if (errors.length) {
                throw new Error("The animation trigger \"" + name + "\" has failed to build due to the following errors:\n - " + errors.join("\n - "));
            }
            trigger = buildTrigger(name, ast);
            this._triggerCache[cacheKey] = trigger;
        }
        this._transitionEngine.registerTrigger(namespaceId, name, trigger);
    };
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    AnimationEngine.prototype.register = /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    function (namespaceId, hostElement) {
        this._transitionEngine.register(namespaceId, hostElement);
    };
    /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    AnimationEngine.prototype.destroy = /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    function (namespaceId, context) {
        this._transitionEngine.destroy(namespaceId, context);
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    AnimationEngine.prototype.onInsert = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    function (namespaceId, element, parent, insertBefore) {
        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    AnimationEngine.prototype.onRemove = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    function (namespaceId, element, context) {
        this._transitionEngine.removeNode(namespaceId, element, context);
    };
    /**
     * @param {?} element
     * @param {?} disable
     * @return {?}
     */
    AnimationEngine.prototype.disableAnimations = /**
     * @param {?} element
     * @param {?} disable
     * @return {?}
     */
    function (element, disable) {
        this._transitionEngine.markElementAsDisabled(element, disable);
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AnimationEngine.prototype.process = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    function (namespaceId, element, property, value) {
        if (property.charAt(0) == '@') {
            var _a = parseTimelineCommand(property), id = _a[0], action = _a[1];
            var /** @type {?} */ args = /** @type {?} */ (value);
            this._timelineEngine.command(id, element, action, args);
        }
        else {
            this._transitionEngine.trigger(namespaceId, element, property, value);
        }
    };
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    AnimationEngine.prototype.listen = /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    function (namespaceId, element, eventName, eventPhase, callback) {
        // @@listen
        if (eventName.charAt(0) == '@') {
            var _a = parseTimelineCommand(eventName), id = _a[0], action = _a[1];
            return this._timelineEngine.listen(id, element, action, callback);
        }
        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
    };
    /**
     * @param {?=} microtaskId
     * @return {?}
     */
    AnimationEngine.prototype.flush = /**
     * @param {?=} microtaskId
     * @return {?}
     */
    function (microtaskId) {
        if (microtaskId === void 0) { microtaskId = -1; }
        this._transitionEngine.flush(microtaskId);
    };
    Object.defineProperty(AnimationEngine.prototype, "players", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this._transitionEngine.players))
                .concat(/** @type {?} */ (this._timelineEngine.players));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AnimationEngine.prototype.whenRenderingDone = /**
     * @return {?}
     */
    function () { return this._transitionEngine.whenRenderingDone(); };
    return AnimationEngine;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WebAnimationsPlayer = /** @class */ (function () {
    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var _this = this;
        this.element = element;
        this.keyframes = keyframes;
        this.options = options;
        this.previousPlayers = previousPlayers;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.time = 0;
        this.parentPlayer = null;
        this.previousStyles = {};
        this.currentSnapshot = {};
        this._duration = /** @type {?} */ (options['duration']);
        this._delay = /** @type {?} */ (options['delay']) || 0;
        this.time = this._duration + this._delay;
        if (allowPreviousPlayerStylesMerge(this._duration, this._delay)) {
            previousPlayers.forEach(function (player) {
                var /** @type {?} */ styles = player.currentSnapshot;
                Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
            });
        }
    }
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._onFinish = /**
     * @return {?}
     */
    function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.init = /**
     * @return {?}
     */
    function () {
        this._buildPlayer();
        this._preparePlayerBeforeStart();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._buildPlayer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._initialized)
            return;
        this._initialized = true;
        var /** @type {?} */ keyframes = this.keyframes.map(function (styles) { return copyStyles(styles, false); });
        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
        if (previousStyleProps.length && keyframes.length) {
            var /** @type {?} */ startingKeyframe_1 = keyframes[0];
            var /** @type {?} */ missingStyleProps_1 = [];
            previousStyleProps.forEach(function (prop) {
                if (!startingKeyframe_1.hasOwnProperty(prop)) {
                    missingStyleProps_1.push(prop);
                }
                startingKeyframe_1[prop] = _this.previousStyles[prop];
            });
            if (missingStyleProps_1.length) {
                var /** @type {?} */ self_1 = this;
                var _loop_1 = function () {
                    var /** @type {?} */ kf = keyframes[i];
                    missingStyleProps_1.forEach(function (prop) {
                        kf[prop] = _computeStyle(self_1.element, prop);
                    });
                };
                // tslint:disable-next-line
                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
                    _loop_1();
                }
            }
        }
        (/** @type {?} */ (this)).domPlayer =
            this._triggerWebAnimation(this.element, keyframes, this.options);
        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
        this.domPlayer.addEventListener('finish', function () { return _this._onFinish(); });
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._preparePlayerBeforeStart = /**
     * @return {?}
     */
    function () {
        // this is required so that the player doesn't start to animate right away
        if (this._delay) {
            this._resetDomPlayerState();
        }
        else {
            this.domPlayer.pause();
        }
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */
    WebAnimationsPlayer.prototype._triggerWebAnimation = /**
     * \@internal
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */
    function (element, keyframes, options) {
        // jscompiler doesn't seem to know animate is a native property because it's not fully
        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
        return /** @type {?} */ (element['animate'](keyframes, options));
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onStart = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onDone = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onDoneFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onDestroy = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onDestroyFns.push(fn); };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.play = /**
     * @return {?}
     */
    function () {
        this._buildPlayer();
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this.domPlayer.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.pause = /**
     * @return {?}
     */
    function () {
        this.init();
        this.domPlayer.pause();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.finish = /**
     * @return {?}
     */
    function () {
        this.init();
        this._onFinish();
        this.domPlayer.finish();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.reset = /**
     * @return {?}
     */
    function () {
        this._resetDomPlayerState();
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._resetDomPlayerState = /**
     * @return {?}
     */
    function () {
        if (this.domPlayer) {
            this.domPlayer.cancel();
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.restart = /**
     * @return {?}
     */
    function () {
        this.reset();
        this.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.hasStarted = /**
     * @return {?}
     */
    function () { return this._started; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (!this._destroyed) {
            this._destroyed = true;
            this._resetDomPlayerState();
            this._onFinish();
            this._onDestroyFns.forEach(function (fn) { return fn(); });
            this._onDestroyFns = [];
        }
    };
    /**
     * @param {?} p
     * @return {?}
     */
    WebAnimationsPlayer.prototype.setPosition = /**
     * @param {?} p
     * @return {?}
     */
    function (p) { this.domPlayer.currentTime = p * this.time; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.getPosition = /**
     * @return {?}
     */
    function () { return this.domPlayer.currentTime / this.time; };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
        get: /**
         * @return {?}
         */
        function () { return this._delay + this._duration; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.beforeDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ styles = {};
        if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                    styles[prop] =
                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                }
            });
        }
        this.currentSnapshot = styles;
    };
    /* @internal */
    /**
     * @param {?} phaseName
     * @return {?}
     */
    WebAnimationsPlayer.prototype.triggerCallback = /**
     * @param {?} phaseName
     * @return {?}
     */
    function (phaseName) {
        var /** @type {?} */ methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach(function (fn) { return fn(); });
        methods.length = 0;
    };
    return WebAnimationsPlayer;
}());
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
function _computeStyle(element, prop) {
    return (/** @type {?} */ (window.getComputedStyle(element)))[prop];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WebAnimationsDriver = /** @class */ (function () {
    function WebAnimationsDriver() {
    }
    /**
     * @param {?} prop
     * @return {?}
     */
    WebAnimationsDriver.prototype.validateStyleProperty = /**
     * @param {?} prop
     * @return {?}
     */
    function (prop) { return validateStyleProperty(prop); };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    WebAnimationsDriver.prototype.matchesElement = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return matchesElement(element, selector);
    };
    /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    WebAnimationsDriver.prototype.containsElement = /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    function (elm1, elm2) { return containsElement(elm1, elm2); };
    /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    WebAnimationsDriver.prototype.query = /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    function (element, selector, multi) {
        return invokeQuery(element, selector, multi);
    };
    /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    WebAnimationsDriver.prototype.computeStyle = /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    function (element, prop, defaultValue) {
        return /** @type {?} */ ((/** @type {?} */ (window.getComputedStyle(element)))[prop]);
    };
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    WebAnimationsDriver.prototype.animate = /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    function (element, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var /** @type {?} */ fill = delay == 0 ? 'both' : 'forwards';
        var /** @type {?} */ playerOptions = { duration: duration, delay: delay, fill: fill };
        // we check for this to avoid having a null|undefined value be present
        // for the easing (which results in an error for certain browsers #9752)
        if (easing) {
            playerOptions['easing'] = easing;
        }
        var /** @type {?} */ previousWebAnimationPlayers = /** @type {?} */ (previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; }));
        return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
    };
    return WebAnimationsDriver;
}());
/**
 * @return {?}
 */
function supportsWebAnimations() {
    return typeof Element !== 'undefined' && typeof (/** @type {?} */ (Element)).prototype['animate'] === 'function';
}

exports.AnimationDriver = AnimationDriver;
exports.ɵAnimation = Animation;
exports.ɵAnimationStyleNormalizer = AnimationStyleNormalizer;
exports.ɵNoopAnimationStyleNormalizer = NoopAnimationStyleNormalizer;
exports.ɵWebAnimationsStyleNormalizer = WebAnimationsStyleNormalizer;
exports.ɵNoopAnimationDriver = NoopAnimationDriver;
exports.ɵAnimationEngine = AnimationEngine;
exports.ɵWebAnimationsDriver = WebAnimationsDriver;
exports.ɵsupportsWebAnimations = supportsWebAnimations;
exports.ɵWebAnimationsPlayer = WebAnimationsPlayer;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=animations-browser.umd.js.map


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Comment;

var Node = __webpack_require__(2);
var CharacterData = __webpack_require__(6);

function Comment(doc, data) {
  this.nodeType = Node.COMMENT_NODE;
  this.ownerDocument = doc;
  this._data = data;
  this._index = undefined;
}

var nodeValue = {
  get: function() { return this._data; },
  set: function(v) {
    this._data = v;
    if (this.rooted)
      this.ownerDocument.mutateValue(this);
  }
};

Comment.prototype = Object.create(CharacterData.prototype, {
  nodeName: { value: '#comment' },
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: nodeValue,

  // Utility methods
  clone: { value: function clone() {
    return new Comment(this.ownerDocument, this._data);
  }},
});


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = DOMException;

var INDEX_SIZE_ERR = 1;
var HIERARCHY_REQUEST_ERR = 3;
var WRONG_DOCUMENT_ERR = 4;
var INVALID_CHARACTER_ERR = 5;
var NO_MODIFICATION_ALLOWED_ERR = 7;
var NOT_FOUND_ERR = 8;
var NOT_SUPPORTED_ERR = 9;
var INVALID_STATE_ERR = 11;
var SYNTAX_ERR = 12;
var INVALID_MODIFICATION_ERR = 13;
var NAMESPACE_ERR = 14;
var INVALID_ACCESS_ERR = 15;
var TYPE_MISMATCH_ERR = 17;
var SECURITY_ERR = 18;
var NETWORK_ERR = 19;
var ABORT_ERR = 20;
var URL_MISMATCH_ERR = 21;
var QUOTA_EXCEEDED_ERR = 22;
var TIMEOUT_ERR = 23;
var INVALID_NODE_TYPE_ERR = 24;
var DATA_CLONE_ERR = 25;

// Code to name
var names = [
  null,  // No error with code 0
  'INDEX_SIZE_ERR',
  null, // historical
  'HIERARCHY_REQUEST_ERR',
  'WRONG_DOCUMENT_ERR',
  'INVALID_CHARACTER_ERR',
  null, // historical
  'NO_MODIFICATION_ALLOWED_ERR',
  'NOT_FOUND_ERR',
  'NOT_SUPPORTED_ERR',
  null, // historical
  'INVALID_STATE_ERR',
  'SYNTAX_ERR',
  'INVALID_MODIFICATION_ERR',
  'NAMESPACE_ERR',
  'INVALID_ACCESS_ERR',
  null, // historical
  'TYPE_MISMATCH_ERR',
  'SECURITY_ERR',
  'NETWORK_ERR',
  'ABORT_ERR',
  'URL_MISMATCH_ERR',
  'QUOTA_EXCEEDED_ERR',
  'TIMEOUT_ERR',
  'INVALID_NODE_TYPE_ERR',
  'DATA_CLONE_ERR',
];

// Code to message
// These strings are from the 13 May 2011 Editor's Draft of DOM Core.
// http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html
// Copyright © 2011 W3C® (MIT, ERCIM, Keio), All Rights Reserved.
// Used under the terms of the W3C Document License:
// http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231
var messages = [
  null,  // No error with code 0
  'INDEX_SIZE_ERR (1): the index is not in the allowed range',
  null,
  'HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model',
  'WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required',
  'INVALID_CHARACTER_ERR (5): the string contains invalid characters',
  null,
  'NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified',
  'NOT_FOUND_ERR (8): the object can not be found here',
  'NOT_SUPPORTED_ERR (9): this operation is not supported',
  null,
  'INVALID_STATE_ERR (11): the object is in an invalid state',
  'SYNTAX_ERR (12): the string did not match the expected pattern',
  'INVALID_MODIFICATION_ERR (13): the object can not be modified in this way',
  'NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML',
  'INVALID_ACCESS_ERR (15): the object does not support the operation or argument',
  null,
  'TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type',
  'SECURITY_ERR (18): the operation is insecure',
  'NETWORK_ERR (19): a network error occurred',
  'ABORT_ERR (20): the user aborted an operation',
  'URL_MISMATCH_ERR (21): the given URL does not match another URL',
  'QUOTA_EXCEEDED_ERR (22): the quota has been exceeded',
  'TIMEOUT_ERR (23): a timeout occurred',
  'INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation',
  'DATA_CLONE_ERR (25): the object can not be cloned.'
];

// Name to code
var constants = {
  INDEX_SIZE_ERR: INDEX_SIZE_ERR,
  DOMSTRING_SIZE_ERR: 2, // historical
  HIERARCHY_REQUEST_ERR: HIERARCHY_REQUEST_ERR,
  WRONG_DOCUMENT_ERR: WRONG_DOCUMENT_ERR,
  INVALID_CHARACTER_ERR: INVALID_CHARACTER_ERR,
  NO_DATA_ALLOWED_ERR: 6, // historical
  NO_MODIFICATION_ALLOWED_ERR: NO_MODIFICATION_ALLOWED_ERR,
  NOT_FOUND_ERR: NOT_FOUND_ERR,
  NOT_SUPPORTED_ERR: NOT_SUPPORTED_ERR,
  INUSE_ATTRIBUTE_ERR: 10, // historical
  INVALID_STATE_ERR: INVALID_STATE_ERR,
  SYNTAX_ERR: SYNTAX_ERR,
  INVALID_MODIFICATION_ERR: INVALID_MODIFICATION_ERR,
  NAMESPACE_ERR: NAMESPACE_ERR,
  INVALID_ACCESS_ERR: INVALID_ACCESS_ERR,
  VALIDATION_ERR: 16, // historical
  TYPE_MISMATCH_ERR: TYPE_MISMATCH_ERR,
  SECURITY_ERR: SECURITY_ERR,
  NETWORK_ERR: NETWORK_ERR,
  ABORT_ERR: ABORT_ERR,
  URL_MISMATCH_ERR: URL_MISMATCH_ERR,
  QUOTA_EXCEEDED_ERR: QUOTA_EXCEEDED_ERR,
  TIMEOUT_ERR: TIMEOUT_ERR,
  INVALID_NODE_TYPE_ERR: INVALID_NODE_TYPE_ERR,
  DATA_CLONE_ERR: DATA_CLONE_ERR
};

function DOMException(code) {
  Error.call(this);
  Error.captureStackTrace(this, this.constructor);
  this.code = code;
  this.message = messages[code];
  this.name = names[code];
}
DOMException.prototype.__proto__ = Error.prototype;

// Initialize the constants on DOMException and DOMException.prototype
for(var c in constants) {
  var v = { value: constants[c] };
  Object.defineProperty(DOMException, c, v);
  Object.defineProperty(DOMException.prototype, c, v);
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// DOMTokenList implementation based on https://github.com/Raynos/DOM-shim
var utils = __webpack_require__(0);

module.exports = DOMTokenList;

function DOMTokenList(getter, setter) {
  this._getString = getter;
  this._setString = setter;
  fixIndex(this, getList(this));
}

DOMTokenList.prototype = {
  item: function(index) {
    if (index >= this.length) {
      return null;
    }
    return this._getString().split(" ")[index];
  },

  contains: function(token) {
    token = String(token);
    handleErrors(token);
    var list = getList(this);
    return list.indexOf(token) > -1;
  },

  add: function(token) {
    handleErrors(token);
    var list = getList(this);
    if (list.indexOf(token) > -1) {
      return;
    }
    list.push(token);
    this._setString(list.join(" ").trim());
    fixIndex(this, list);
  },

  remove: function(token) {
    handleErrors(token);
    var list = getList(this);
    var index = list.indexOf(token);
    if (index > -1) {
      list.splice(index, 1);
      this._setString(list.join(" ").trim());
    }
    fixIndex(this, list);
  },

  toggle: function toggle(token) {
    if (this.contains(token)) {
      this.remove(token);
      return false;
    }
    else {
      this.add(token);
      return true;
    }
  },

  toString: function() {
    return this._getString();
  }
};

function fixIndex(clist, list) {
  clist.length = list.length;
  for (var i = 0; i < list.length; i++) {
    clist[i] = list[i];
  }
}

function handleErrors(token) {
  if (token === "" || token === undefined) {
    utils.SyntaxError();
  }
  if (token.indexOf(" ") > -1) {
    utils.InvalidCharacterError();
  }
}

function getList(clist) {
  var str = clist._getString();
  if (str === "") {
    return [];
  }
  else {
    return str.split(" ");
  }
}


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports =  DocumentFragment;

var Node = __webpack_require__(2);
var NodeList = __webpack_require__(9);
var Element = __webpack_require__(3);
var select = __webpack_require__(20);
var utils = __webpack_require__(0);

function DocumentFragment(doc) {
  this.nodeType = Node.DOCUMENT_FRAGMENT_NODE;
  this.ownerDocument = doc;
  this.childNodes = [];
}

DocumentFragment.prototype = Object.create(Node.prototype, {
  nodeName: { value: '#document-fragment' },
  nodeValue: { 
    get: function() { 
      return null;
    },
    set: function() {}
  },
  // Copy the text content getter/setter from Element
  textContent: Object.getOwnPropertyDescriptor(Element.prototype, 'textContent'),

  querySelector: { value: function(selector) {
    // implement in terms of querySelectorAll
    var nodes = this.querySelectorAll(selector);
    return nodes.length ? nodes[0] : null;
  }},
  querySelectorAll: { value: function(selector) {
    // create a context
    var context = Object.create(this);
    // add some methods to the context for zest implementation, without
    // adding them to the public DocumentFragment API
    context.isHTML = true; // in HTML namespace (case-insensitive match)
    context.getElementsByTagName = Element.prototype.getElementsByTagName;
    context.nextElement =
      Object.getOwnPropertyDescriptor(Element.prototype, 'firstElementChild').
      get;
    // invoke zest
    var nodes = select(selector, context);
    return nodes.item ? nodes : new NodeList(nodes);
  }},

  // Utility methods
  clone: { value: function clone() {
      return new DocumentFragment(this.ownerDocument);
  }},
  isEqual: { value: function isEqual(n) {
      // Any two document fragments are shallowly equal.
      // Node.isEqualNode() will test their children for equality
      return true;
  }},

  // Non-standard, but useful (github issue #73)
  innerHTML: {
    get: function() { return this.serialize(); },
    set: utils.nyi
  },
  outerHTML: {
    get: function() { return this.serialize(); },
    set: utils.nyi
  },

});


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Event = __webpack_require__(4);
var MouseEvent = __webpack_require__(29);
var utils = __webpack_require__(0);

module.exports = EventTarget;

function EventTarget() {}

EventTarget.prototype = {
  // XXX
  // See WebIDL §4.8 for details on object event handlers
  // and how they should behave.  We actually have to accept
  // any object to addEventListener... Can't type check it.
  // on registration.

  // XXX:
  // Capturing event listeners are sort of rare.  I think I can optimize
  // them so that dispatchEvent can skip the capturing phase (or much of
  // it).  Each time a capturing listener is added, increment a flag on
  // the target node and each of its ancestors.  Decrement when removed.
  // And update the counter when nodes are added and removed from the
  // tree as well.  Then, in dispatch event, the capturing phase can
  // abort if it sees any node with a zero count.
  addEventListener: function addEventListener(type, listener, capture) {
    if (!listener) return;
    if (capture === undefined) capture = false;
    if (!this._listeners) this._listeners = Object.create(null);
    if (!this._listeners[type]) this._listeners[type] = [];
    var list = this._listeners[type];

    // If this listener has already been registered, just return
    for(var i = 0, n = list.length; i < n; i++) {
      var l = list[i];
      if (l.listener === listener && l.capture === capture)
        return;
    }

    // Add an object to the list of listeners
    var obj = { listener: listener, capture: capture };
    if (typeof listener === 'function') obj.f = listener;
    list.push(obj);
  },

  removeEventListener: function removeEventListener(type,
                            listener,
                            capture) {
    if (capture === undefined) capture = false;
    if (this._listeners) {
      var list = this._listeners[type];
      if (list) {
        // Find the listener in the list and remove it
        for(var i = 0, n = list.length; i < n; i++) {
          var l = list[i];
          if (l.listener === listener && l.capture === capture) {
            if (list.length === 1) {
              this._listeners[type] = undefined;
            }
            else {
              list.splice(i, 1);
            }
            return;
          }
        }
      }
    }
  },

  // This is the public API for dispatching untrusted public events.
  // See _dispatchEvent for the implementation
  dispatchEvent: function dispatchEvent(event) {
    // Dispatch an untrusted event
    return this._dispatchEvent(event, false);
  },

  //
  // See DOMCore §4.4
  // XXX: I'll probably need another version of this method for
  // internal use, one that does not set isTrusted to false.
  // XXX: see Document._dispatchEvent: perhaps that and this could
  // call a common internal function with different settings of
  // a trusted boolean argument
  //
  // XXX:
  // The spec has changed in how to deal with handlers registered
  // on idl or content attributes rather than with addEventListener.
  // Used to say that they always ran first.  That's how webkit does it
  // Spec now says that they run in a position determined by
  // when they were first set.  FF does it that way.  See:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#event-handlers
  //
  _dispatchEvent: function _dispatchEvent(event, trusted) {
    if (typeof trusted !== 'boolean') trusted = false;
    function invoke(target, event) {
      var type = event.type, phase = event.eventPhase;
      event.currentTarget = target;

      // If there was an individual handler defined, invoke it first
      // XXX: see comment above: this shouldn't always be first.
      if (phase !== Event.CAPTURING_PHASE &&
        target._handlers && target._handlers[type])
      {
        var handler = target._handlers[type];
        var rv;
        if (typeof handler === 'function') {
          rv=handler.call(event.currentTarget, event);
        }
        else {
          var f = handler.handleEvent;
          if (typeof f !== 'function')
            throw new TypeError('handleEvent property of ' +
                                'event handler object is' +
                                'not a function.');
          rv=f.call(handler, event);
        }

        switch(event.type) {
        case 'mouseover':
          if (rv === true)  // Historical baggage
            event.preventDefault();
          break;
        case 'beforeunload':
          // XXX: eventually we need a special case here
          /* falls through */
        default:
          if (rv === false)
            event.preventDefault();
          break;
        }
      }

      // Now invoke list list of listeners for this target and type
      var list = target._listeners && target._listeners[type];
      if (!list) return;
      list = list.slice();
      for(var i = 0, n = list.length; i < n; i++) {
        if (event._immediatePropagationStopped) return;
        var l = list[i];
        if ((phase === Event.CAPTURING_PHASE && !l.capture) ||
          (phase === Event.BUBBLING_PHASE && l.capture))
          continue;
        if (l.f) {
          l.f.call(event.currentTarget, event);
        }
        else {
          var fn = l.listener.handleEvent;
          if (typeof fn !== 'function')
            throw new TypeError('handleEvent property of event listener object is not a function.');
          fn.call(l.listener, event);
        }
      }
    }

    if (!event._initialized || event._dispatching) utils.InvalidStateError();
    event.isTrusted = trusted;

    // Begin dispatching the event now
    event._dispatching = true;
    event.target = this;

    // Build the list of targets for the capturing and bubbling phases
    // XXX: we'll eventually have to add Window to this list.
    var ancestors = [];
    for(var n = this.parentNode; n; n = n.parentNode)
      ancestors.push(n);

    // Capturing phase
    event.eventPhase = Event.CAPTURING_PHASE;
    for(var i = ancestors.length-1; i >= 0; i--) {
      invoke(ancestors[i], event);
      if (event._propagationStopped) break;
    }

    // At target phase
    if (!event._propagationStopped) {
      event.eventPhase = Event.AT_TARGET;
      invoke(this, event);
    }

    // Bubbling phase
    if (event.bubbles && !event._propagationStopped) {
      event.eventPhase = Event.BUBBLING_PHASE;
      for(var ii = 0, nn = ancestors.length; ii < nn; ii++) {
        invoke(ancestors[ii], event);
        if (event._propagationStopped) break;
      }
    }

    event._dispatching = false;
    event.eventPhase = Event.AT_TARGET;
    event.currentTarget = null;

    // Deal with mouse events and figure out when
    // a click has happened
    if (trusted && !event.defaultPrevented && event instanceof MouseEvent) {
      switch(event.type) {
      case 'mousedown':
        this._armed = {
          x: event.clientX,
          y: event.clientY,
          t: event.timeStamp
        };
        break;
      case 'mouseout':
      case 'mouseover':
        this._armed = null;
        break;
      case 'mouseup':
        if (this._isClick(event)) this._doClick(event);
        this._armed = null;
        break;
      }
    }



    return !event.defaultPrevented;
  },

  // Determine whether a click occurred
  // XXX We don't support double clicks for now
  _isClick: function(event) {
    return (this._armed !== null &&
        event.type === 'mouseup' &&
        event.isTrusted &&
        event.button === 0 &&
        event.timeStamp - this._armed.t < 1000 &&
        Math.abs(event.clientX - this._armed.x) < 10 &&
        Math.abs(event.clientY - this._armed.Y) < 10);
  },

  // Clicks are handled like this:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#interactive-content-0
  //
  // Note that this method is similar to the HTMLElement.click() method
  // The event argument must be the trusted mouseup event
  _doClick: function(event) {
    if (this._click_in_progress) return;
    this._click_in_progress = true;

    // Find the nearest enclosing element that is activatable
    // An element is activatable if it has a
    // _post_click_activation_steps hook
    var activated = this;
    while(activated && !activated._post_click_activation_steps)
      activated = activated.parentNode;

    if (activated && activated._pre_click_activation_steps) {
      activated._pre_click_activation_steps();
    }

    var click = this.ownerDocument.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true,
      this.ownerDocument.defaultView, 1,
      event.screenX, event.screenY,
      event.clientX, event.clientY,
      event.ctrlKey, event.altKey,
      event.shiftKey, event.metaKey,
      event.button, null);

    var result = this._dispatchEvent(click, true);

    if (activated) {
      if (result) {
        // This is where hyperlinks get followed, for example.
        if (activated._post_click_activation_steps)
          activated._post_click_activation_steps(click);
      }
      else {
        if (activated._cancelled_activation_steps)
          activated._cancelled_activation_steps();
      }
    }
  },

  //
  // An event handler is like an event listener, but it registered
  // by setting an IDL or content attribute like onload or onclick.
  // There can only be one of these at a time for any event type.
  // This is an internal method for the attribute accessors and
  // content attribute handlers that need to register events handlers.
  // The type argument is the same as in addEventListener().
  // The handler argument is the same as listeners in addEventListener:
  // it can be a function or an object. Pass null to remove any existing
  // handler.  Handlers are always invoked before any listeners of
  // the same type.  They are not invoked during the capturing phase
  // of event dispatch.
  //
  _setEventHandler: function _setEventHandler(type, handler) {
    if (!this._handlers) this._handlers = Object.create(null);
    this._handlers[type] = handler;
  },

  _getEventHandler: function _getEventHandler(type) {
    return (this._handlers && this._handlers[type]) || null;
  }

};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Leaf;

var Node = __webpack_require__(2);
var utils = __webpack_require__(0);
var HierarchyRequestError = utils.HierarchyRequestError;
var NotFoundError = utils.NotFoundError;

// This class defines common functionality for node subtypes that
// can never have children
function Leaf() {
}

Leaf.prototype = Object.create(Node.prototype, {
  hasChildNodes: { value: function() { return false; }},
  firstChild: { value: null },
  lastChild: { value: null },
  insertBefore: { value: function(node, child) {
    if (!node.nodeType) throw new TypeError('not a node');
    HierarchyRequestError();
  }},
  replaceChild: { value: function(node, child) {
    if (!node.nodeType) throw new TypeError('not a node');
    HierarchyRequestError();
  }},
  removeChild: { value: function(node) {
    if (!node.nodeType) throw new TypeError('not a node');
    NotFoundError();
  }},
  childNodes: { get: function() {
    if (!this._childNodes) this._childNodes = [];
    return this._childNodes;
  }}
});


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var UIEvent = __webpack_require__(34);

module.exports = MouseEvent;

function MouseEvent() {
  // Just use the superclass constructor to initialize
  UIEvent.call(this);

  this.screenX = this.screenY = this.clientX = this.clientY = 0;
  this.ctrlKey = this.altKey = this.shiftKey = this.metaKey = false;
  this.button = 0;
  this.buttons = 1;
  this.relatedTarget = null;
}
MouseEvent.prototype = Object.create(UIEvent.prototype, {
  constructor: { value: MouseEvent },
  initMouseEvent: { value: function(type, bubbles, cancelable,
    view, detail,
    screenX, screenY, clientX, clientY,
    ctrlKey, altKey, shiftKey, metaKey,
    button, relatedTarget) {

    this.initEvent(type, bubbles, cancelable, view, detail);
    this.screenX = screenX;
    this.screenY = screenY;
    this.clientX = clientX;
    this.clientY = clientY;
    this.ctrlKey = ctrlKey;
    this.altKey = altKey;
    this.shiftKey = shiftKey;
    this.metaKey = metaKey;
    this.button = button;
    switch(button) {
    case 0: this.buttons = 1; break;
    case 1: this.buttons = 4; break;
    case 2: this.buttons = 2; break;
    default: this.buttons = 0; break;
    }
    this.relatedTarget = relatedTarget;
  }},

  getModifierState: { value: function(key) {
    switch(key) {
    case "Alt": return this.altKey;
    case "Control": return this.ctrlKey;
    case "Shift": return this.shiftKey;
    case "Meta": return this.metaKey;
    default: return false;
    }
  }}
});


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* exported NodeTraversal */
var NodeTraversal = module.exports = {
  nextSkippingChildren: nextSkippingChildren,
  nextAncestorSibling: nextAncestorSibling,
  next: next,
  previous: previous,
  deepLastChild: deepLastChild
};

/**
 * @based on WebKit's NodeTraversal::nextSkippingChildren
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L109
 */
function nextSkippingChildren(node, stayWithin) {
  if (node === stayWithin) {
    return null;
  }
  if (node.nextSibling !== null) {
    return node.nextSibling;
  }
  return nextAncestorSibling(node, stayWithin);
}

/**
 * @based on WebKit's NodeTraversal::nextAncestorSibling
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L93
 */
function nextAncestorSibling(node, stayWithin) {
  for (node = node.parentNode; node !== null; node = node.parentNode) {
    if (node === stayWithin) {
      return null;
    }
    if (node.nextSibling !== null) {
      return node.nextSibling;
    }
  }
  return null;
}

/**
 * @based on WebKit's NodeTraversal::next
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L99
 */
function next(node, stayWithin) {
  var n;
  n = node.firstChild;
  if (n !== null) {
    return n;
  }
  if (node === stayWithin) {
    return null;
  }
  n = node.nextSibling;
  if (n !== null) {
    return n;
  }
  return nextAncestorSibling(node, stayWithin);
}

/**
 * @based on WebKit's NodeTraversal::deepLastChild
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L116
 */
function deepLastChild(node) {
  while (node.lastChild) {
    node = node.lastChild;
  }
  return node;
}

/**
 * @based on WebKit's NodeTraversal::previous
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L121
 */
function previous(node, stayWithin) {
  var p;
  p = node.previousSibling;
  if (p !== null) {
    return deepLastChild(p);
  }
  p = node.parentNode;
  if (p === stayWithin) {
    return null;
  }
  return p;
}


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Node = __webpack_require__(2);

var NonDocumentTypeChildNode = {

  nextElementSibling: { get: function() {
    if (this.parentNode) {
      var sibs = this.parentNode.childNodes;
      for(var i = this.index+1, n = sibs.length; i < n; i++) {
        if (sibs[i].nodeType === Node.ELEMENT_NODE) return sibs[i];
      }
    }
    return null;
  }},

  previousElementSibling: { get: function() {
    if (this.parentNode) {
      var sibs = this.parentNode.childNodes;
      for(var i = this.index-1; i >= 0; i--) {
        if (sibs[i].nodeType === Node.ELEMENT_NODE) return sibs[i];
      }
    }
    return null;
  }}

};

module.exports = NonDocumentTypeChildNode;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = ProcessingInstruction;

var Node = __webpack_require__(2);
var CharacterData = __webpack_require__(6);

function ProcessingInstruction(doc, target, data) {
  this.nodeType = Node.PROCESSING_INSTRUCTION_NODE;
  this.ownerDocument = doc;
  this.target = target;
  this._data = data;
}

var nodeValue = {
  get: function() { return this._data; },
  set: function(v) {
    this._data = v;
    if (this.rooted) this.ownerDocument.mutateValue(this);
  }
};

ProcessingInstruction.prototype = Object.create(CharacterData.prototype, {
  nodeName: { get: function() { return this.target; }},
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: nodeValue,

  // Utility methods
  clone: { value: function clone() {
      return new ProcessingInstruction(this.ownerDocument, this.target, this._data);
  }},
  isEqual: { value: function isEqual(n) {
      return this.target === n.target && this._data === n._data;
  }}

});


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Text;

var utils = __webpack_require__(0);
var Node = __webpack_require__(2);
var CharacterData = __webpack_require__(6);

function Text(doc, data) {
  this.nodeType = Node.TEXT_NODE;
  this.ownerDocument = doc;
  this._data = data;
  this._index = undefined;
}

var nodeValue = {
  get: function() { return this._data; },
  set: function(v) {
    if (v === this._data) return;
    this._data = v;
    if (this.rooted)
      this.ownerDocument.mutateValue(this);
    if (this.parentNode &&
      this.parentNode._textchangehook)
      this.parentNode._textchangehook(this);
  }
};

Text.prototype = Object.create(CharacterData.prototype, {
  nodeName: { value: "#text" },
  // These three attributes are all the same.
  // The data attribute has a [TreatNullAs=EmptyString] but we'll
  // implement that at the interface level
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: nodeValue,

  splitText: { value: function splitText(offset) {
    if (offset > this._data.length || offset < 0) utils.IndexSizeError();

    var newdata = this._data.substring(offset),
      newnode = this.ownerDocument.createTextNode(newdata);
    this.data = this.data.substring(0, offset);

    var parent = this.parentNode;
    if (parent !== null)
      parent.insertBefore(newnode, this.nextSibling);

    return newnode;
  }},

  // XXX
  // wholeText and replaceWholeText() are not implemented yet because
  // the DOMCore specification is considering removing or altering them.
  wholeText: {get: utils.nyi },
  replaceWholeText: { value: utils.nyi },

  // Utility methods
  clone: { value: function clone() {
    return new Text(this.ownerDocument, this._data);
  }},

});


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Event = __webpack_require__(4);

module.exports = UIEvent;

function UIEvent() {
  // Just use the superclass constructor to initialize
  Event.call(this);
  this.view = null; // FF uses the current window
  this.detail = 0;
}
UIEvent.prototype = Object.create(Event.prototype, {
  constructor: { value: UIEvent },
  initUIEvent: { value: function(type, bubbles, cancelable, view, detail) {
    this.initEvent(type, bubbles, cancelable);
    this.view = view;
    this.detail = detail;
  }}
});


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var URL = __webpack_require__(17);

module.exports = URLUtils;

// This is an abstract superclass for Location, HTMLAnchorElement and
// other types that have the standard complement of "URL decomposition
// IDL attributes".  This is now standardized as URLUtils, see:
// https://url.spec.whatwg.org/#urlutils
// Subclasses must define a getter/setter on href.
// The getter and setter methods parse and rebuild the URL on each
// invocation; there is no attempt to cache the value and be more efficient
function URLUtils() {}
URLUtils.prototype = {
  constructor: URLUtils,

  get protocol() {
    var url = new URL(this.href);
    if (url.isAbsolute()) return url.scheme + ":";
    else return "";
  },

  get host() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.isAuthorityBased())
      return url.host + (url.port ? (":" + url.port) : "");
    else
      return "";
  },

  get hostname() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.isAuthorityBased())
      return url.host;
    else
      return "";
  },

  get port() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.isAuthorityBased() && url.port!==undefined)
      return url.port;
    else
      return "";
  },

  get pathname() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.isHierarchical())
      return url.path;
    else
      return "";
  },

  get search() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.isHierarchical() && url.query!==undefined)
      return "?" + url.query;
    else
      return "";
  },

  get hash() {
    var url = new URL(this.href);
    if (url.isAbsolute() && url.fragment !== undefined)
      return "#" + url.fragment;
    else
      return "";
  },

  get username() {
    var url = new URL(this.href);
    return url.username || '';
  },

  get password() {
    var url = new URL(this.href);
    return url.password || '';
  },

  get origin() {
    var url = new URL(this.href);
    var originForPort = function(defaultPort) {
      var origin = [url.scheme, url.host, +url.port || defaultPort];
      // XXX should be "unicode serialization"
      return origin[0] + '://' + origin[1] +
        (origin[2] === defaultPort ? '' : (':' + origin[2]));
    };
    switch (url.scheme) {
    case 'ftp':
      return originForPort(21);
    case 'gopher':
      return originForPort(70);
    case 'http':
    case 'ws':
      return originForPort(80);
    case 'https':
    case 'wss':
      return originForPort(443);
    default:
      // this is what chrome does
      return url.scheme + '://';
    }
  },

  /*
  get searchParams() {
    var url = new URL(this.href);
    // XXX
  },
  */

  set protocol(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute()) {
      v = v.replace(/:+$/, "");
      v = v.replace(/[^-+\.a-zA-Z0-9]/g, URL.percentEncode);
      if (v.length > 0) {
        url.scheme = v;
        output = url.toString();
      }
    }
    this.href = output;
  },

  set host(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute() && url.isAuthorityBased()) {
      v = v.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);
      if (v.length > 0) {
        url.host = v;
        delete url.port;
        output = url.toString();
      }
    }
    this.href = output;
  },

  set hostname(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute() && url.isAuthorityBased()) {
      v = v.replace(/^\/+/, "");
      v = v.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);
      if (v.length > 0) {
        url.host = v;
        output = url.toString();
      }
    }
    this.href = output;
  },

  set port(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute() && url.isAuthorityBased()) {
      v = '' + v;
      v = v.replace(/[^0-9].*$/, "");
      v = v.replace(/^0+/, "");
      if (v.length === 0) v = "0";
      if (parseInt(v, 10) <= 65535) {
        url.port = v;
        output = url.toString();
      }
    }
    this.href = output;
  },

  set pathname(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute() && url.isHierarchical()) {
      if (v.charAt(0) !== "/")
        v = "/" + v;
      v = v.replace(/[^-+\._~!$&'()*,;:=@\/a-zA-Z0-9]/g, URL.percentEncode);
      url.path = v;
      output = url.toString();
    }
    this.href = output;
  },

  set search(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute() && url.isHierarchical()) {
      if (v.charAt(0) === "?") v = v.substring(1);
      v = v.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g, URL.percentEncode);
      url.query = v;
      output = url.toString();
    }
    this.href = output;
  },

  set hash(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute()) {
      if (v.charAt(0) === "#") v = v.substring(1);
      v = v.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g, URL.percentEncode);
      url.fragment = v;
      output = url.toString();
    }
    this.href = output;
  },

  set username(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute()) {
      v = v.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\:]/g, URL.percentEncode);
      url.username = v;
      output = url.toString();
    }
    this.href = output;
  },

  set password(v) {
    var output = this.href;
    var url = new URL(output);
    if (url.isAbsolute()) {
      if (v==='') {
        url.password = null;
      } else {
        v = v.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\]/g, URL.percentEncode);
        url.password = v;
      }
      output = url.toString();
    }
    this.href = output;
  }/*,

  set searchParams(v) {
    var output = this.href;
    var url = new URL(output);
    // XXX
    this.href = output;
  }
  */
};

URLUtils._inherit = function(proto) {
  // copy getters/setters from URLUtils to o.
  Object.getOwnPropertyNames(URLUtils.prototype).forEach(function(p) {
    if (p==='constructor' || p==='href') { return; }
    var desc = Object.getOwnPropertyDescriptor(URLUtils.prototype, p);
    Object.defineProperty(proto, p, desc);
  });
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var utils = __webpack_require__(0);

exports.property = function(attr) {
  if (Array.isArray(attr.type)) {
    var valid = Object.create(null);
    attr.type.forEach(function(val) {
      valid[val.value || val] = val.alias || val;
    });
    var missingValueDefault = attr.missing;
    if (missingValueDefault===undefined) { missingValueDefault = null; }
    var invalidValueDefault = attr.invalid;
    if (invalidValueDefault===undefined) { invalidValueDefault = missingValueDefault; }
    return {
      get: function() {
        var v = this._getattr(attr.name);
        if (v === null) return missingValueDefault;

        v = valid[v.toLowerCase()];
        if (v !== undefined) return v;
        if (invalidValueDefault !== null) return invalidValueDefault;
        return v;
      },
      set: function(v) {
        this._setattr(attr.name, v);
      }
    };
  }
  else if (attr.type === Boolean) {
    return {
      get: function() {
        return this.hasAttribute(attr.name);
      },
      set: function(v) {
        if (v) {
          this._setattr(attr.name, '');
        }
        else {
          this.removeAttribute(attr.name);
        }
      }
    };
  }
  else if (attr.type === Number ||
           attr.type === "long" ||
           attr.type === "unsigned long" ||
           attr.type === "limited unsigned long with fallback") {
    return numberPropDesc(attr);
  }
  else if (!attr.type || attr.type === String) {
    return {
      get: function() { return this._getattr(attr.name) || ''; },
      set: function(v) {
        if (attr.treatNullAsEmptyString && v === null) { v = ''; }
        this._setattr(attr.name, v);
      }
    };
  }
  else if (typeof attr.type === 'function') {
    return attr.type(attr.name, attr);
  }
  throw new Error('Invalid attribute definition');
};

// See http://www.whatwg.org/specs/web-apps/current-work/#reflect
//
// defval is the default value. If it is a function, then that function
// will be invoked as a method of the element to obtain the default.
// If no default is specified for a given attribute, then the default
// depends on the type of the attribute, but since this function handles
// 4 integer cases, you must specify the default value in each call
//
// min and max define a valid range for getting the attribute.
//
// setmin defines a minimum value when setting.  If the value is less
// than that, then throw INDEX_SIZE_ERR.
//
// Conveniently, JavaScript's parseInt function appears to be
// compatible with HTML's 'rules for parsing integers'
function numberPropDesc(a) {
  var def;
  if(typeof a.default === 'function') {
    def = a.default;
  }
  else if(typeof a.default === 'number') {
    def = function() { return a.default; };
  }
  else {
    def = function() { utils.assert(false, typeof a.default); };
  }
  var unsigned_long = (a.type === 'unsigned long');
  var signed_long = (a.type === 'long');
  var unsigned_fallback = (a.type === 'limited unsigned long with fallback');
  var min = a.min, max = a.max, setmin = a.setmin;
  if (min === undefined) {
    if (unsigned_long) min = 0;
    if (signed_long) min = -0x80000000;
    if (unsigned_fallback) min = 1;
  }
  if (max === undefined) {
    if (unsigned_long || signed_long || unsigned_fallback) max = 0x7FFFFFFF;
  }

  return {
    get: function() {
      var v = this._getattr(a.name);
      var n = a.float ? parseFloat(v) : parseInt(v, 10);
      if (v === null || !isFinite(n) || (min !== undefined && n < min) || (max !== undefined && n > max)) {
        return def.call(this);
      }
      if (unsigned_long || signed_long || unsigned_fallback) {
        if (!/^[ \t\n\f\r]*[-+]?[0-9]/.test(v)) { return def.call(this); }
        n = n|0; // jshint ignore:line
      }
      return n;
    },
    set: function(v) {
      if (!a.float) { v = Math.floor(v); }
      if (setmin !== undefined && v < setmin) {
        utils.IndexSizeError(a.name + ' set to ' + v);
      }
      if (unsigned_long) {
        v = (v < 0 || v > 0x7FFFFFFF) ? def.call(this) :
          (v|0);  // jshint ignore:line
      } else if (unsigned_fallback) {
        v = (v < 1 || v > 0x7FFFFFFF) ? def.call(this) :
          (v|0); // jshint ignore:line
      } else if (signed_long) {
        v = (v < -0x80000000 || v > 0x7FFFFFFF) ? def.call(this) :
          (v|0); // jshint ignore:line
      }
      this._setattr(a.name, String(v));
    }
  };
}

// This is a utility function for setting up change handler functions
// for attributes like 'id' that require special handling when they change.
exports.registerChangeHandler = function(c, name, handler) {
  var p = c.prototype;

  // If p does not already have its own _attributeChangeHandlers
  // then create one for it, inheriting from the inherited
  // _attributeChangeHandlers. At the top (for the Element class) the
  // _attributeChangeHandlers object will be created with a null prototype.
  if (!Object.prototype.hasOwnProperty.call(p, '_attributeChangeHandlers')) {
    p._attributeChangeHandlers =
      Object.create(p._attributeChangeHandlers || null);
  }

  p._attributeChangeHandlers[name] = handler;
};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

/*
 * This file defines Domino behaviour that can be externally configured.
 * To change these settings, set the relevant global property *before*
 * you call `require("domino")`.
 */

exports.isApiWritable = !global.__domino_frozen__;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var attributes = __webpack_require__(36);
var sloppy = __webpack_require__(41);

module.exports = function(spec, defaultConstructor, tagList, tagNameToImpl) {
  var c = spec.ctor;
  if (c) {
    var props = spec.props || {};

    if (spec.attributes) {
      for (var n in spec.attributes) {
        var attr = spec.attributes[n];
        if (typeof attr !== 'object' || Array.isArray(attr)) attr = {type: attr};
        if (!attr.name) attr.name = n.toLowerCase();
        props[n] = attributes.property(attr);
      }
    }

    props.constructor = { value : c };
    c.prototype = Object.create((spec.superclass || defaultConstructor).prototype, props);
    if (spec.events) {
      addEventHandlers(c, spec.events);
    }
    tagList[c.name] = c;
  }
  else {
    c = defaultConstructor;
  }

  (spec.tags || spec.tag && [spec.tag] || []).forEach(function(tag) {
    tagNameToImpl[tag] = c;
  });

  return c;
};

function EventHandlerBuilder(body, document, form, element) {
  this.body = body;
  this.document = document;
  this.form = form;
  this.element = element;
}

EventHandlerBuilder.prototype.build = sloppy.EventHandlerBuilder_build;

function EventHandlerChangeHandler(elt, name, oldval, newval) {
  var doc = elt.ownerDocument || Object.create(null);
  var form = elt.form || Object.create(null);
  elt[name] = new EventHandlerBuilder(newval, doc, form, elt).build();
}

function addEventHandlers(c, eventHandlerTypes) {
  var p = c.prototype;
  eventHandlerTypes.forEach(function(type) {
    // Define the event handler registration IDL attribute for this type
    Object.defineProperty(p, "on" + type, {
      get: function() {
        return this._getEventHandler(type);
      },
      set: function(v) {
        this._setEventHandler(type, v);
      },
    });

    // Define special behavior for the content attribute as well
    attributes.registerChangeHandler(c, "on" + type, EventHandlerChangeHandler);
  });
}


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = {
  Event: __webpack_require__(4),
  UIEvent: __webpack_require__(34),
  MouseEvent: __webpack_require__(29),
  CustomEvent: __webpack_require__(57)
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var utils = __webpack_require__(0);

exports = module.exports = {
  CSSStyleDeclaration: __webpack_require__(12),
  CharacterData: __webpack_require__(6),
  Comment: __webpack_require__(23),
  DOMException: __webpack_require__(24),
  DOMImplementation: __webpack_require__(7),
  DOMTokenList: __webpack_require__(25),
  Document: __webpack_require__(14),
  DocumentFragment: __webpack_require__(26),
  DocumentType: __webpack_require__(15),
  Element: __webpack_require__(3),
  HTMLParser: __webpack_require__(16),
  Node: __webpack_require__(2),
  NodeList: __webpack_require__(9),
  NodeFilter: __webpack_require__(8),
  ProcessingInstruction: __webpack_require__(32),
  Text: __webpack_require__(33),
  Window: __webpack_require__(18)
};

utils.merge(exports, __webpack_require__(39));
utils.merge(exports, __webpack_require__(19).elements);
utils.merge(exports, __webpack_require__(42).elements);


/***/ }),
/* 41 */
/***/ (function(module, exports) {

/* Domino uses sloppy-mode features (in particular, `with`) for a few
 * minor things.  This file encapsulates all the sloppiness; every
 * other module should be strict. */
/* jshint strict: false */
/* jshint evil: true */
/* jshint -W085 */
module.exports = {
  Window_run: function _run(code, file) {
    if (file) code += '\n//@ sourceURL=' + file;
    with(this) eval(code);
  },
  EventHandlerBuilder_build: function build() {
    try {
      with(this.document.defaultView || Object.create(null))
        with(this.document)
          with(this.form)
            with(this.element)
              return eval("(function(event){" + this.body + "})");
    }
    catch (err) {
      return function() { throw err; };
    }
  }
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Element = __webpack_require__(3);
var defineElement = __webpack_require__(38);
var utils = __webpack_require__(0);
var CSSStyleDeclaration = __webpack_require__(12);

var svgElements = exports.elements = {};
var svgNameToImpl = Object.create(null);

exports.createElement = function(doc, localName, prefix) {
  var impl = svgNameToImpl[localName] || SVGElement;
  return new impl(doc, localName, prefix);
};

function define(spec) {
  return defineElement(spec, SVGElement, svgElements, svgNameToImpl);
}

var SVGElement = define({
  superclass: Element,
  ctor: function SVGElement(doc, localName, prefix) {
    Element.call(this, doc, localName, utils.NAMESPACE.SVG, prefix);
  },
  props: {
    style: { get: function() {
      if (!this._style)
        this._style = new CSSStyleDeclaration(this);
      return this._style;
    }}
  }
});

define({
  ctor: function SVGSVGElement(doc, localName, prefix) {
    SVGElement.call(this, doc, localName, prefix);
  },
  tag: 'svg',
  props: {
    createSVGRect: { value: function () {
      return exports.createElement(this.ownerDocument, 'rect', null);
    } }
  }
});

define({
  tags: [
    'a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor', 'animateMotion', 'animateTransform',
    'circle', 'clipPath', 'color-profile', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
    'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight',
    'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',
    'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter',
    'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignObject', 'g',
    'glyph', 'glyphRef', 'hkern', 'image', 'line', 'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph',
    'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script', 'set', 'stop',  'style',
    'switch', 'symbol', 'text', 'textPath', 'title', 'tref', 'tspan', 'use', 'view', 'vkern'
  ]
});


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(39);

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(5);

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(86);

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(87);

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppModule; });
var AppModule = (function () {
    function AppModule() {
    }
    return AppModule;
}());

//# sourceMappingURL=app.server.module.js.map

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(5), __webpack_require__(44), __webpack_require__(22), __webpack_require__(11), __webpack_require__(54), __webpack_require__(72), __webpack_require__(73), __webpack_require__(55), __webpack_require__(10), __webpack_require__(74), __webpack_require__(47), __webpack_require__(70), __webpack_require__(45), __webpack_require__(46), __webpack_require__(67)) :
	typeof define === 'function' && define.amd ? define('@angular/platform-server', ['exports', '@angular/core', '@angular/platform-browser', '@angular/animations/browser', '@angular/common', '@angular/common/http', '@angular/http', '@angular/platform-browser-dynamic', '@angular/platform-browser/animations', 'rxjs/Observable', 'rxjs/Subject', 'url', '@angular/compiler', 'rxjs/operator/filter', 'rxjs/operator/first', 'rxjs/operator/toPromise'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.platformServer = {}),global.ng.core,global.ng.platformBrowser,global.ng.animations.browser,global.ng.common,global.ng.common.http,global.ng.http,global.ng.platformBrowserDynamic,global.ng.platformBrowser.animations,global.Rx,global.Rx,global.url,global.ng.compiler,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
}(this, (function (exports,_angular_core,_angular_platformBrowser,_angular_animations_browser,_angular_common,_angular_common_http,_angular_http,_angular_platformBrowserDynamic,_angular_platformBrowser_animations,rxjs_Observable,rxjs_Subject,url,_angular_compiler,rxjs_operator_filter,rxjs_operator_first,rxjs_operator_toPromise) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var domino = __webpack_require__(66);
/**
 * @param {?} methodName
 * @return {?}
 */
function _notImplemented(methodName) {
    return new Error('This method is not implemented in DominoAdapter: ' + methodName);
}
/**
 * Parses a document string to a Document object.
 * @param {?} html
 * @param {?=} url
 * @return {?}
 */
function parseDocument(html, url$$1) {
    if (url$$1 === void 0) { url$$1 = '/'; }
    var /** @type {?} */ window = domino.createWindow(html, url$$1);
    var /** @type {?} */ doc = window.document;
    return doc;
}
/**
 * Serializes a document to string.
 * @param {?} doc
 * @return {?}
 */
function serializeDocument(doc) {
    return (/** @type {?} */ (doc)).serialize();
}
/**
 * DOM Adapter for the server platform based on https://github.com/fgnass/domino.
 */
var DominoAdapter = /** @class */ (function (_super) {
    __extends(DominoAdapter, _super);
    function DominoAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    DominoAdapter.makeCurrent = /**
     * @return {?}
     */
    function () { _angular_platformBrowser.ɵsetRootDomAdapter(new DominoAdapter()); };
    /**
     * @param {?} error
     * @return {?}
     */
    DominoAdapter.prototype.logError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) { console.error(error); };
    /**
     * @param {?} error
     * @return {?}
     */
    DominoAdapter.prototype.log = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        // tslint:disable-next-line:no-console
        console.log(error);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    DominoAdapter.prototype.logGroup = /**
     * @param {?} error
     * @return {?}
     */
    function (error) { console.error(error); };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.logGroupEnd = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.supportsDOMEvents = /**
     * @return {?}
     */
    function () { return false; };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.supportsNativeShadowDOM = /**
     * @return {?}
     */
    function () { return false; };
    /**
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    DominoAdapter.prototype.contains = /**
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    function (nodeA, nodeB) {
        var /** @type {?} */ inner = nodeB;
        while (inner) {
            if (inner === nodeA)
                return true;
            inner = inner.parent;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.createHtmlDocument = /**
     * @return {?}
     */
    function () {
        return parseDocument('<html><head><title>fakeTitle</title></head><body></body></html>');
    };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getDefaultDocument = /**
     * @return {?}
     */
    function () {
        if (!DominoAdapter.defaultDoc) {
            DominoAdapter.defaultDoc = domino.createDocument();
        }
        return DominoAdapter.defaultDoc;
    };
    /**
     * @param {?} el
     * @param {?=} doc
     * @return {?}
     */
    DominoAdapter.prototype.createShadowRoot = /**
     * @param {?} el
     * @param {?=} doc
     * @return {?}
     */
    function (el, doc) {
        if (doc === void 0) { doc = document; }
        el.shadowRoot = doc.createDocumentFragment();
        el.shadowRoot.parent = el;
        return el.shadowRoot;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DominoAdapter.prototype.getShadowRoot = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { return el.shadowRoot; };
    /**
     * @param {?} node
     * @return {?}
     */
    DominoAdapter.prototype.isTextNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.nodeType === DominoAdapter.defaultDoc.TEXT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    DominoAdapter.prototype.isCommentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.nodeType === DominoAdapter.defaultDoc.COMMENT_NODE;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DominoAdapter.prototype.isElementNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node ? node.nodeType === DominoAdapter.defaultDoc.ELEMENT_NODE : false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DominoAdapter.prototype.hasShadowRoot = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return node.shadowRoot != null; };
    /**
     * @param {?} node
     * @return {?}
     */
    DominoAdapter.prototype.isShadowRoot = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return this.getShadowRoot(node) == node; };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DominoAdapter.prototype.getProperty = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) {
        if (name === 'href') {
            // Domino tries tp resolve href-s which we do not want. Just return the
            // atribute value.
            return this.getAttribute(el, 'href');
        }
        else if (name === 'innerText') {
            // Domino does not support innerText. Just map it to textContent.
            return el.textContent;
        }
        return (/** @type {?} */ (el))[name];
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DominoAdapter.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        if (name === 'href') {
            // Eventhough the server renderer reflects any properties to attributes
            // map 'href' to atribute just to handle when setProperty is directly called.
            this.setAttribute(el, 'href', value);
        }
        else if (name === 'innerText') {
            // Domino does not support innerText. Just map it to textContent.
            el.textContent = value;
        }
        (/** @type {?} */ (el))[name] = value;
    };
    /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    DominoAdapter.prototype.getGlobalEventTarget = /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    function (doc, target) {
        if (target === 'window') {
            return doc.defaultView;
        }
        if (target === 'document') {
            return doc;
        }
        if (target === 'body') {
            return doc.body;
        }
        return null;
    };
    /**
     * @param {?} doc
     * @return {?}
     */
    DominoAdapter.prototype.getBaseHref = /**
     * @param {?} doc
     * @return {?}
     */
    function (doc) {
        var /** @type {?} */ base = this.querySelector(doc.documentElement, 'base');
        var /** @type {?} */ href = '';
        if (base) {
            href = this.getHref(base);
        }
        // TODO(alxhub): Need relative path logic from BrowserDomAdapter here?
        return href;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} element
     * @return {?}
     */
    DominoAdapter.prototype._readStyleAttribute = /**
     * \@internal
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ styleMap = {};
        var /** @type {?} */ styleAttribute = element.getAttribute('style');
        if (styleAttribute) {
            var /** @type {?} */ styleList = styleAttribute.split(/;+/g);
            for (var /** @type {?} */ i = 0; i < styleList.length; i++) {
                if (styleList[i].length > 0) {
                    var /** @type {?} */ style = /** @type {?} */ (styleList[i]);
                    var /** @type {?} */ colon = style.indexOf(':');
                    if (colon === -1) {
                        throw new Error("Invalid CSS style: " + style);
                    }
                    (/** @type {?} */ (styleMap))[style.substr(0, colon).trim()] = style.substr(colon + 1).trim();
                }
            }
        }
        return styleMap;
    };
    /** @internal */
    /**
     * \@internal
     * @param {?} element
     * @param {?} styleMap
     * @return {?}
     */
    DominoAdapter.prototype._writeStyleAttribute = /**
     * \@internal
     * @param {?} element
     * @param {?} styleMap
     * @return {?}
     */
    function (element, styleMap) {
        var /** @type {?} */ styleAttrValue = '';
        for (var /** @type {?} */ key in styleMap) {
            var /** @type {?} */ newValue = styleMap[key];
            if (newValue) {
                styleAttrValue += key + ':' + styleMap[key] + ';';
            }
        }
        element.setAttribute('style', styleAttrValue);
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    DominoAdapter.prototype.setStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    function (element, styleName, styleValue) {
        var /** @type {?} */ styleMap = this._readStyleAttribute(element);
        (/** @type {?} */ (styleMap))[styleName] = styleValue;
        this._writeStyleAttribute(element, styleMap);
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DominoAdapter.prototype.removeStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    function (element, styleName) { this.setStyle(element, styleName, null); };
    /**
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DominoAdapter.prototype.getStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    function (element, styleName) {
        var /** @type {?} */ styleMap = this._readStyleAttribute(element);
        return styleMap.hasOwnProperty(styleName) ? (/** @type {?} */ (styleMap))[styleName] : '';
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    DominoAdapter.prototype.hasStyle = /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    function (element, styleName, styleValue) {
        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
        return styleValue ? value == styleValue : value.length > 0;
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    DominoAdapter.prototype.dispatchEvent = /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    function (el, evt) {
        el.dispatchEvent(evt);
        // Dispatch the event to the window also.
        var /** @type {?} */ doc = el.ownerDocument || el;
        var /** @type {?} */ win = (/** @type {?} */ (doc)).defaultView;
        if (win) {
            win.dispatchEvent(evt);
        }
    };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getHistory = /**
     * @return {?}
     */
    function () { throw _notImplemented('getHistory'); };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getLocation = /**
     * @return {?}
     */
    function () { throw _notImplemented('getLocation'); };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getUserAgent = /**
     * @return {?}
     */
    function () { return 'Fake user agent'; };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.supportsWebAnimation = /**
     * @return {?}
     */
    function () { return false; };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.performanceNow = /**
     * @return {?}
     */
    function () { return Date.now(); };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getAnimationPrefix = /**
     * @return {?}
     */
    function () { return ''; };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.getTransitionEnd = /**
     * @return {?}
     */
    function () { return 'transitionend'; };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.supportsAnimation = /**
     * @return {?}
     */
    function () { return true; };
    /**
     * @param {?} el
     * @return {?}
     */
    DominoAdapter.prototype.getDistributedNodes = /**
     * @param {?} el
     * @return {?}
     */
    function (el) { throw _notImplemented('getDistributedNodes'); };
    /**
     * @return {?}
     */
    DominoAdapter.prototype.supportsCookies = /**
     * @return {?}
     */
    function () { return false; };
    /**
     * @param {?} name
     * @return {?}
     */
    DominoAdapter.prototype.getCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) { throw _notImplemented('getCookie'); };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DominoAdapter.prototype.setCookie = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) { throw _notImplemented('setCookie'); };
    return DominoAdapter;
}(_angular_platformBrowser.ɵBrowserDomAdapter));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Representation of the current platform state.
 *
 * \@experimental
 */
var PlatformState = /** @class */ (function () {
    function PlatformState(_doc) {
        this._doc = _doc;
    }
    /**
     * Renders the current state of the platform to string.
     */
    /**
     * Renders the current state of the platform to string.
     * @return {?}
     */
    PlatformState.prototype.renderToString = /**
     * Renders the current state of the platform to string.
     * @return {?}
     */
    function () { return serializeDocument(this._doc); };
    /**
     * Returns the current DOM state.
     */
    /**
     * Returns the current DOM state.
     * @return {?}
     */
    PlatformState.prototype.getDocument = /**
     * Returns the current DOM state.
     * @return {?}
     */
    function () { return this._doc; };
    PlatformState.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    PlatformState.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
    ]; };
    return PlatformState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var xhr2 = __webpack_require__(69);
var isAbsoluteUrl = /^[a-zA-Z\-\+.]+:\/\//;
/**
 * @param {?} url
 * @return {?}
 */
function validateRequestUrl(url$$1) {
    if (!isAbsoluteUrl.test(url$$1)) {
        throw new Error("URLs requested via Http on the server must be absolute. URL: " + url$$1);
    }
}
var ServerXhr = /** @class */ (function () {
    function ServerXhr() {
    }
    /**
     * @return {?}
     */
    ServerXhr.prototype.build = /**
     * @return {?}
     */
    function () { return new xhr2.XMLHttpRequest(); };
    ServerXhr.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    ServerXhr.ctorParameters = function () { return []; };
    return ServerXhr;
}());
var ServerXsrfStrategy = /** @class */ (function () {
    function ServerXsrfStrategy() {
    }
    /**
     * @param {?} req
     * @return {?}
     */
    ServerXsrfStrategy.prototype.configureRequest = /**
     * @param {?} req
     * @return {?}
     */
    function (req) { };
    ServerXsrfStrategy.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    ServerXsrfStrategy.ctorParameters = function () { return []; };
    return ServerXsrfStrategy;
}());
/**
 * @abstract
 */
var ZoneMacroTaskWrapper = /** @class */ (function () {
    function ZoneMacroTaskWrapper() {
    }
    /**
     * @param {?} request
     * @return {?}
     */
    ZoneMacroTaskWrapper.prototype.wrap = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        var _this = this;
        return new rxjs_Observable.Observable(function (observer) {
            var /** @type {?} */ task = /** @type {?} */ ((null));
            var /** @type {?} */ scheduled = false;
            var /** @type {?} */ sub = null;
            var /** @type {?} */ savedResult = null;
            var /** @type {?} */ savedError = null;
            var /** @type {?} */ scheduleTask = function (_task) {
                task = _task;
                scheduled = true;
                var /** @type {?} */ delegate = _this.delegate(request);
                sub = delegate.subscribe(function (res) { return savedResult = res; }, function (err) {
                    if (!scheduled) {
                        throw new Error('An http observable was completed twice. This shouldn\'t happen, please file a bug.');
                    }
                    savedError = err;
                    scheduled = false;
                    task.invoke();
                }, function () {
                    if (!scheduled) {
                        throw new Error('An http observable was completed twice. This shouldn\'t happen, please file a bug.');
                    }
                    scheduled = false;
                    task.invoke();
                });
            };
            var /** @type {?} */ cancelTask = function (_task) {
                if (!scheduled) {
                    return;
                }
                scheduled = false;
                if (sub) {
                    sub.unsubscribe();
                    sub = null;
                }
            };
            var /** @type {?} */ onComplete = function () {
                if (savedError !== null) {
                    observer.error(savedError);
                }
                else {
                    observer.next(savedResult);
                    observer.complete();
                }
            };
            // MockBackend for Http is synchronous, which means that if scheduleTask is by
            // scheduleMacroTask, the request will hit MockBackend and the response will be
            // sent, causing task.invoke() to be called.
            var /** @type {?} */ _task = Zone.current.scheduleMacroTask('ZoneMacroTaskWrapper.subscribe', onComplete, {}, function () { return null; }, cancelTask);
            scheduleTask(_task);
            return function () {
                if (scheduled && task) {
                    task.zone.cancelTask(task);
                    scheduled = false;
                }
                if (sub) {
                    sub.unsubscribe();
                    sub = null;
                }
            };
        });
    };
    return ZoneMacroTaskWrapper;
}());
var ZoneMacroTaskConnection = /** @class */ (function (_super) {
    __extends(ZoneMacroTaskConnection, _super);
    function ZoneMacroTaskConnection(request, backend) {
        var _this = _super.call(this) || this;
        _this.request = request;
        _this.backend = backend;
        validateRequestUrl(request.url);
        _this.response = _this.wrap(request);
        return _this;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    ZoneMacroTaskConnection.prototype.delegate = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        this.lastConnection = this.backend.createConnection(request);
        return /** @type {?} */ (this.lastConnection.response);
    };
    Object.defineProperty(ZoneMacroTaskConnection.prototype, "readyState", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.lastConnection ? this.lastConnection.readyState : _angular_http.ReadyState.Unsent;
        },
        enumerable: true,
        configurable: true
    });
    return ZoneMacroTaskConnection;
}(ZoneMacroTaskWrapper));
var ZoneMacroTaskBackend = /** @class */ (function () {
    function ZoneMacroTaskBackend(backend) {
        this.backend = backend;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    ZoneMacroTaskBackend.prototype.createConnection = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return new ZoneMacroTaskConnection(request, this.backend);
    };
    return ZoneMacroTaskBackend;
}());
var ZoneClientBackend = /** @class */ (function (_super) {
    __extends(ZoneClientBackend, _super);
    function ZoneClientBackend(backend) {
        var _this = _super.call(this) || this;
        _this.backend = backend;
        return _this;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    ZoneClientBackend.prototype.handle = /**
     * @param {?} request
     * @return {?}
     */
    function (request) { return this.wrap(request); };
    /**
     * @param {?} request
     * @return {?}
     */
    ZoneClientBackend.prototype.delegate = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return this.backend.handle(request);
    };
    return ZoneClientBackend;
}(ZoneMacroTaskWrapper));
/**
 * @param {?} xhrBackend
 * @param {?} options
 * @return {?}
 */
function httpFactory(xhrBackend, options) {
    var /** @type {?} */ macroBackend = new ZoneMacroTaskBackend(xhrBackend);
    return new _angular_http.Http(macroBackend, options);
}
/**
 * @param {?} backend
 * @param {?} interceptors
 * @return {?}
 */
function zoneWrappedInterceptingHandler(backend, interceptors) {
    var /** @type {?} */ realBackend = _angular_common_http.ɵinterceptingHandler(backend, interceptors);
    return new ZoneClientBackend(realBackend);
}
var SERVER_HTTP_PROVIDERS = [
    { provide: _angular_http.Http, useFactory: httpFactory, deps: [_angular_http.XHRBackend, _angular_http.RequestOptions] },
    { provide: _angular_http.BrowserXhr, useClass: ServerXhr }, { provide: _angular_http.XSRFStrategy, useClass: ServerXsrfStrategy },
    { provide: _angular_common_http.XhrFactory, useClass: ServerXhr }, {
        provide: _angular_common_http.HttpHandler,
        useFactory: zoneWrappedInterceptingHandler,
        deps: [_angular_common_http.HttpBackend, [new _angular_core.Optional(), _angular_common_http.HTTP_INTERCEPTORS]]
    }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Config object passed to initialize the platform.
 *
 * \@experimental
 * @record
 */

/**
 * The DI token for setting the initial config for the platform.
 *
 * \@experimental
 */
var INITIAL_CONFIG = new _angular_core.InjectionToken('Server.INITIAL_CONFIG');
/**
 * A function that will be executed when calling `renderModuleFactory` or `renderModule` just
 * before current platform state is rendered to string.
 *
 * \@experimental
 */
var BEFORE_APP_SERIALIZED = new _angular_core.InjectionToken('Server.RENDER_MODULE_HOOK');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} urlStr
 * @return {?}
 */
function parseUrl(urlStr) {
    var /** @type {?} */ parsedUrl = url.parse(urlStr);
    return {
        pathname: parsedUrl.pathname || '',
        search: parsedUrl.search || '',
        hash: parsedUrl.hash || '',
    };
}
/**
 * Server-side implementation of URL state. Implements `pathname`, `search`, and `hash`
 * but not the state stack.
 */
var ServerPlatformLocation = /** @class */ (function () {
    function ServerPlatformLocation(_doc, _config) {
        this._doc = _doc;
        this.pathname = '/';
        this.search = '';
        this.hash = '';
        this._hashUpdate = new rxjs_Subject.Subject();
        var /** @type {?} */ config = /** @type {?} */ (_config);
        if (!!config && !!config.url) {
            var /** @type {?} */ parsedUrl = parseUrl(config.url);
            this.pathname = parsedUrl.pathname;
            this.search = parsedUrl.search;
            this.hash = parsedUrl.hash;
        }
    }
    /**
     * @return {?}
     */
    ServerPlatformLocation.prototype.getBaseHrefFromDOM = /**
     * @return {?}
     */
    function () { return /** @type {?} */ ((_angular_platformBrowser.ɵgetDOM().getBaseHref(this._doc))); };
    /**
     * @param {?} fn
     * @return {?}
     */
    ServerPlatformLocation.prototype.onPopState = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        // No-op: a state stack is not implemented, so
        // no events will ever come.
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ServerPlatformLocation.prototype.onHashChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._hashUpdate.subscribe(fn); };
    Object.defineProperty(ServerPlatformLocation.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return "" + this.pathname + this.search + this.hash; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} oldUrl
     * @return {?}
     */
    ServerPlatformLocation.prototype.setHash = /**
     * @param {?} value
     * @param {?} oldUrl
     * @return {?}
     */
    function (value, oldUrl) {
        var _this = this;
        if (this.hash === value) {
            // Don't fire events if the hash has not changed.
            return;
        }
        (/** @type {?} */ (this)).hash = value;
        var /** @type {?} */ newUrl = this.url;
        scheduleMicroTask(function () { return _this._hashUpdate.next(/** @type {?} */ ({ type: 'hashchange', oldUrl: oldUrl, newUrl: newUrl })); });
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} newUrl
     * @return {?}
     */
    ServerPlatformLocation.prototype.replaceState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} newUrl
     * @return {?}
     */
    function (state, title, newUrl) {
        var /** @type {?} */ oldUrl = this.url;
        var /** @type {?} */ parsedUrl = parseUrl(newUrl);
        (/** @type {?} */ (this)).pathname = parsedUrl.pathname;
        (/** @type {?} */ (this)).search = parsedUrl.search;
        this.setHash(parsedUrl.hash, oldUrl);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} newUrl
     * @return {?}
     */
    ServerPlatformLocation.prototype.pushState = /**
     * @param {?} state
     * @param {?} title
     * @param {?} newUrl
     * @return {?}
     */
    function (state, title, newUrl) {
        this.replaceState(state, title, newUrl);
    };
    /**
     * @return {?}
     */
    ServerPlatformLocation.prototype.forward = /**
     * @return {?}
     */
    function () { throw new Error('Not implemented'); };
    /**
     * @return {?}
     */
    ServerPlatformLocation.prototype.back = /**
     * @return {?}
     */
    function () { throw new Error('Not implemented'); };
    ServerPlatformLocation.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    ServerPlatformLocation.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [INITIAL_CONFIG,] },] },
    ]; };
    return ServerPlatformLocation;
}());
/**
 * @param {?} fn
 * @return {?}
 */
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EMPTY_ARRAY = [];
var ServerRendererFactory2 = /** @class */ (function () {
    function ServerRendererFactory2(ngZone, document, sharedStylesHost) {
        this.ngZone = ngZone;
        this.document = document;
        this.sharedStylesHost = sharedStylesHost;
        this.rendererByCompId = new Map();
        this.schema = new _angular_compiler.DomElementSchemaRegistry();
        this.defaultRenderer = new DefaultServerRenderer2(document, ngZone, this.schema);
    }
    /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    ServerRendererFactory2.prototype.createRenderer = /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    function (element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        switch (type.encapsulation) {
            case _angular_core.ViewEncapsulation.Native:
            case _angular_core.ViewEncapsulation.Emulated: {
                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer = new EmulatedEncapsulationServerRenderer2(this.document, this.ngZone, this.sharedStylesHost, this.schema, type);
                    this.rendererByCompId.set(type.id, renderer);
                }
                (/** @type {?} */ (renderer)).applyToHost(element);
                return renderer;
            }
            case _angular_core.ViewEncapsulation.Native:
                throw new Error('Native encapsulation is not supported on the server!');
            default: {
                if (!this.rendererByCompId.has(type.id)) {
                    var /** @type {?} */ styles = _angular_platformBrowser.ɵflattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
        }
    };
    /**
     * @return {?}
     */
    ServerRendererFactory2.prototype.begin = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ServerRendererFactory2.prototype.end = /**
     * @return {?}
     */
    function () { };
    ServerRendererFactory2.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    ServerRendererFactory2.ctorParameters = function () { return [
        { type: _angular_core.NgZone, },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
        { type: _angular_platformBrowser.ɵSharedStylesHost, },
    ]; };
    return ServerRendererFactory2;
}());
var DefaultServerRenderer2 = /** @class */ (function () {
    function DefaultServerRenderer2(document, ngZone, schema) {
        this.document = document;
        this.ngZone = ngZone;
        this.schema = schema;
        this.data = Object.create(null);
    }
    /**
     * @return {?}
     */
    DefaultServerRenderer2.prototype.destroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @param {?=} debugInfo
     * @return {?}
     */
    DefaultServerRenderer2.prototype.createElement = /**
     * @param {?} name
     * @param {?=} namespace
     * @param {?=} debugInfo
     * @return {?}
     */
    function (name, namespace, debugInfo) {
        if (namespace) {
            return _angular_platformBrowser.ɵgetDOM().createElementNS(_angular_platformBrowser.ɵNAMESPACE_URIS[namespace], name);
        }
        return _angular_platformBrowser.ɵgetDOM().createElement(name);
    };
    /**
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    DefaultServerRenderer2.prototype.createComment = /**
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    function (value, debugInfo) { return _angular_platformBrowser.ɵgetDOM().createComment(value); };
    /**
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    DefaultServerRenderer2.prototype.createText = /**
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    function (value, debugInfo) { return _angular_platformBrowser.ɵgetDOM().createTextNode(value); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    DefaultServerRenderer2.prototype.appendChild = /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    function (parent, newChild) { _angular_platformBrowser.ɵgetDOM().appendChild(parent, newChild); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    DefaultServerRenderer2.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    function (parent, newChild, refChild) {
        if (parent) {
            _angular_platformBrowser.ɵgetDOM().insertBefore(parent, refChild, newChild);
        }
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    DefaultServerRenderer2.prototype.removeChild = /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    function (parent, oldChild) {
        if (parent) {
            _angular_platformBrowser.ɵgetDOM().removeChild(parent, oldChild);
        }
    };
    /**
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */
    DefaultServerRenderer2.prototype.selectRootElement = /**
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */
    function (selectorOrNode, debugInfo) {
        var /** @type {?} */ el;
        if (typeof selectorOrNode === 'string') {
            el = _angular_platformBrowser.ɵgetDOM().querySelector(this.document, selectorOrNode);
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
        }
        else {
            el = selectorOrNode;
        }
        _angular_platformBrowser.ɵgetDOM().clearNodes(el);
        return el;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultServerRenderer2.prototype.parentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return _angular_platformBrowser.ɵgetDOM().parentElement(node); };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultServerRenderer2.prototype.nextSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return _angular_platformBrowser.ɵgetDOM().nextSibling(node); };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DefaultServerRenderer2.prototype.setAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, value, namespace) {
        if (namespace) {
            _angular_platformBrowser.ɵgetDOM().setAttributeNS(el, _angular_platformBrowser.ɵNAMESPACE_URIS[namespace], namespace + ':' + name, value);
        }
        else {
            _angular_platformBrowser.ɵgetDOM().setAttribute(el, name, value);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DefaultServerRenderer2.prototype.removeAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, namespace) {
        if (namespace) {
            _angular_platformBrowser.ɵgetDOM().removeAttributeNS(el, _angular_platformBrowser.ɵNAMESPACE_URIS[namespace], name);
        }
        else {
            _angular_platformBrowser.ɵgetDOM().removeAttribute(el, name);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultServerRenderer2.prototype.addClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { _angular_platformBrowser.ɵgetDOM().addClass(el, name); };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultServerRenderer2.prototype.removeClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { _angular_platformBrowser.ɵgetDOM().removeClass(el, name); };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    DefaultServerRenderer2.prototype.setStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    function (el, style, value, flags) {
        _angular_platformBrowser.ɵgetDOM().setStyle(el, style, value);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    DefaultServerRenderer2.prototype.removeStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    function (el, style, flags) {
        _angular_platformBrowser.ɵgetDOM().removeStyle(el, style);
    };
    /**
     * @param {?} tagName
     * @param {?} propertyName
     * @return {?}
     */
    DefaultServerRenderer2.prototype._isSafeToReflectProperty = /**
     * @param {?} tagName
     * @param {?} propertyName
     * @return {?}
     */
    function (tagName, propertyName) {
        return this.schema.securityContext(tagName, propertyName, true) ===
            this.schema.securityContext(tagName, propertyName, false);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DefaultServerRenderer2.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        checkNoSyntheticProp(name, 'property');
        _angular_platformBrowser.ɵgetDOM().setProperty(el, name, value);
        // Mirror property values for known HTML element properties in the attributes.
        var /** @type {?} */ tagName = (/** @type {?} */ (el.tagName)).toLowerCase();
        if (value != null && (typeof value === 'number' || typeof value == 'string') &&
            this.schema.hasElement(tagName, EMPTY_ARRAY) &&
            this.schema.hasProperty(tagName, name, EMPTY_ARRAY) &&
            this._isSafeToReflectProperty(tagName, name)) {
            this.setAttribute(el, name, value.toString());
        }
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    DefaultServerRenderer2.prototype.setValue = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) { _angular_platformBrowser.ɵgetDOM().setText(node, value); };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    DefaultServerRenderer2.prototype.listen = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (target, eventName, callback) {
        var _this = this;
        // Note: We are not using the EventsPlugin here as this is not needed
        // to run our tests.
        checkNoSyntheticProp(eventName, 'listener');
        var /** @type {?} */ el = typeof target === 'string' ? _angular_platformBrowser.ɵgetDOM().getGlobalEventTarget(this.document, target) : target;
        var /** @type {?} */ outsideHandler = function (event) { return _this.ngZone.runGuarded(function () { return callback(event); }); };
        return this.ngZone.runOutsideAngular(function () { return (_angular_platformBrowser.ɵgetDOM().onAndCancel(el, eventName, outsideHandler)); });
    };
    return DefaultServerRenderer2;
}());
var AT_CHARCODE = '@'.charCodeAt(0);
/**
 * @param {?} name
 * @param {?} nameKind
 * @return {?}
 */
function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) {
        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
    }
}
var EmulatedEncapsulationServerRenderer2 = /** @class */ (function (_super) {
    __extends(EmulatedEncapsulationServerRenderer2, _super);
    function EmulatedEncapsulationServerRenderer2(document, ngZone, sharedStylesHost, schema, component) {
        var _this = _super.call(this, document, ngZone, schema) || this;
        _this.component = component;
        var /** @type {?} */ styles = _angular_platformBrowser.ɵflattenStyles(component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        _this.contentAttr = _angular_platformBrowser.ɵshimContentAttribute(component.id);
        _this.hostAttr = _angular_platformBrowser.ɵshimHostAttribute(component.id);
        return _this;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    EmulatedEncapsulationServerRenderer2.prototype.applyToHost = /**
     * @param {?} element
     * @return {?}
     */
    function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
    /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    EmulatedEncapsulationServerRenderer2.prototype.createElement = /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    function (parent, name) {
        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
        return el;
    };
    return EmulatedEncapsulationServerRenderer2;
}(DefaultServerRenderer2));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ServerStylesHost = /** @class */ (function (_super) {
    __extends(ServerStylesHost, _super);
    function ServerStylesHost(doc, transitionId) {
        var _this = _super.call(this) || this;
        _this.doc = doc;
        _this.transitionId = transitionId;
        _this.head = null;
        _this.head = _angular_platformBrowser.ɵgetDOM().getElementsByTagName(doc, 'head')[0];
        return _this;
    }
    /**
     * @param {?} style
     * @return {?}
     */
    ServerStylesHost.prototype._addStyle = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        var /** @type {?} */ adapter = _angular_platformBrowser.ɵgetDOM();
        var /** @type {?} */ el = adapter.createElement('style');
        adapter.setText(el, style);
        if (!!this.transitionId) {
            adapter.setAttribute(el, 'ng-transition', this.transitionId);
        }
        adapter.appendChild(this.head, el);
    };
    /**
     * @param {?} additions
     * @return {?}
     */
    ServerStylesHost.prototype.onStylesAdded = /**
     * @param {?} additions
     * @return {?}
     */
    function (additions) {
        var _this = this;
        additions.forEach(function (style) { return _this._addStyle(style); });
    };
    ServerStylesHost.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    ServerStylesHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [_angular_platformBrowser.ɵTRANSITION_ID,] },] },
    ]; };
    return ServerStylesHost;
}(_angular_platformBrowser.ɵSharedStylesHost));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INTERNAL_SERVER_PLATFORM_PROVIDERS = [
    { provide: _angular_platformBrowser.DOCUMENT, useFactory: _document, deps: [_angular_core.Injector] },
    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_SERVER_ID },
    { provide: _angular_core.PLATFORM_INITIALIZER, useFactory: initDominoAdapter, multi: true, deps: [_angular_core.Injector] }, {
        provide: _angular_common.PlatformLocation,
        useClass: ServerPlatformLocation,
        deps: [_angular_platformBrowser.DOCUMENT, [_angular_core.Optional, INITIAL_CONFIG]]
    },
    { provide: PlatformState, deps: [_angular_platformBrowser.DOCUMENT] },
    // Add special provider that allows multiple instances of platformServer* to be created.
    { provide: _angular_core.ɵALLOW_MULTIPLE_PLATFORMS, useValue: true }
];
/**
 * @param {?} injector
 * @return {?}
 */
function initDominoAdapter(injector) {
    return function () { DominoAdapter.makeCurrent(); };
}
/**
 * @param {?} renderer
 * @param {?} engine
 * @param {?} zone
 * @return {?}
 */
function instantiateServerRendererFactory(renderer, engine, zone) {
    return new _angular_platformBrowser_animations.ɵAnimationRendererFactory(renderer, engine, zone);
}
var SERVER_RENDER_PROVIDERS = [
    ServerRendererFactory2,
    {
        provide: _angular_core.RendererFactory2,
        useFactory: instantiateServerRendererFactory,
        deps: [ServerRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone]
    },
    ServerStylesHost,
    { provide: _angular_platformBrowser.ɵSharedStylesHost, useExisting: ServerStylesHost },
];
/**
 * The ng module for the server.
 *
 * \@experimental
 */
var ServerModule = /** @class */ (function () {
    function ServerModule() {
    }
    ServerModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [_angular_platformBrowser.BrowserModule],
                    imports: [_angular_http.HttpModule, _angular_common_http.HttpClientModule, _angular_platformBrowser_animations.NoopAnimationsModule],
                    providers: [
                        SERVER_RENDER_PROVIDERS,
                        SERVER_HTTP_PROVIDERS,
                        { provide: _angular_core.Testability, useValue: null },
                    ],
                },] },
    ];
    /** @nocollapse */
    ServerModule.ctorParameters = function () { return []; };
    return ServerModule;
}());
/**
 * @param {?} injector
 * @return {?}
 */
function _document(injector) {
    var /** @type {?} */ config = injector.get(INITIAL_CONFIG, null);
    if (config && config.document) {
        return parseDocument(config.document, config.url);
    }
    else {
        return _angular_platformBrowser.ɵgetDOM().createHtmlDocument();
    }
}
/**
 * \@experimental
 */
var platformServer = _angular_core.createPlatformFactory(_angular_core.platformCore, 'server', INTERNAL_SERVER_PLATFORM_PROVIDERS);
/**
 * The server platform that supports the runtime compiler.
 *
 * \@experimental
 */
var platformDynamicServer = _angular_core.createPlatformFactory(_angular_platformBrowserDynamic.ɵplatformCoreDynamic, 'serverDynamic', INTERNAL_SERVER_PLATFORM_PROVIDERS);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} doc
 * @param {?} appId
 * @param {?} transferStore
 * @return {?}
 */
function serializeTransferStateFactory(doc, appId, transferStore) {
    return function () {
        var /** @type {?} */ script = doc.createElement('script');
        script.id = appId + '-state';
        script.setAttribute('type', 'application/json');
        script.textContent = _angular_platformBrowser.ɵescapeHtml(transferStore.toJson());
        doc.body.appendChild(script);
    };
}
/**
 * NgModule to install on the server side while using the `TransferState` to transfer state from
 * server to client.
 *
 * \@experimental
 */
var ServerTransferStateModule = /** @class */ (function () {
    function ServerTransferStateModule() {
    }
    ServerTransferStateModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    providers: [
                        _angular_platformBrowser.TransferState, {
                            provide: BEFORE_APP_SERIALIZED,
                            useFactory: serializeTransferStateFactory,
                            deps: [_angular_platformBrowser.DOCUMENT, _angular_core.APP_ID, _angular_platformBrowser.TransferState],
                            multi: true,
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ServerTransferStateModule.ctorParameters = function () { return []; };
    return ServerTransferStateModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} platformFactory
 * @param {?} options
 * @return {?}
 */
function _getPlatform(platformFactory, options) {
    var /** @type {?} */ extraProviders = options.extraProviders ? options.extraProviders : [];
    return platformFactory([
        { provide: INITIAL_CONFIG, useValue: { document: options.document, url: options.url } },
        extraProviders
    ]);
}
/**
 * @template T
 * @param {?} platform
 * @param {?} moduleRefPromise
 * @return {?}
 */
function _render(platform, moduleRefPromise) {
    return moduleRefPromise.then(function (moduleRef) {
        var /** @type {?} */ transitionId = moduleRef.injector.get(_angular_platformBrowser.ɵTRANSITION_ID, null);
        if (!transitionId) {
            throw new Error("renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.");
        }
        var /** @type {?} */ applicationRef = moduleRef.injector.get(_angular_core.ApplicationRef);
        return rxjs_operator_toPromise.toPromise
            .call(rxjs_operator_first.first.call(rxjs_operator_filter.filter.call(applicationRef.isStable, function (isStable) { return isStable; })))
            .then(function () {
            var /** @type {?} */ platformState = platform.injector.get(PlatformState);
            // Run any BEFORE_APP_SERIALIZED callbacks just before rendering to string.
            var /** @type {?} */ callbacks = moduleRef.injector.get(BEFORE_APP_SERIALIZED, null);
            if (callbacks) {
                for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                    var callback = callbacks_1[_i];
                    try {
                        callback();
                    }
                    catch (/** @type {?} */ e) {
                        // Ignore exceptions.
                        console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);
                    }
                }
            }
            var /** @type {?} */ output = platformState.renderToString();
            platform.destroy();
            return output;
        });
    });
}
/**
 * Renders a Module to string.
 *
 * `document` is the full document HTML of the page to render, as a string.
 * `url` is the URL for the current render request.
 * `extraProviders` are the platform level providers for the current render request.
 *
 * Do not use this in a production server environment. Use pre-compiled {\@link NgModuleFactory} with
 * {\@link renderModuleFactory} instead.
 *
 * \@experimental
 * @template T
 * @param {?} module
 * @param {?} options
 * @return {?}
 */
function renderModule(module, options) {
    var /** @type {?} */ platform = _getPlatform(platformDynamicServer, options);
    return _render(platform, platform.bootstrapModule(module));
}
/**
 * Renders a {\@link NgModuleFactory} to string.
 *
 * `document` is the full document HTML of the page to render, as a string.
 * `url` is the URL for the current render request.
 * `extraProviders` are the platform level providers for the current render request.
 *
 * \@experimental
 * @template T
 * @param {?} moduleFactory
 * @param {?} options
 * @return {?}
 */
function renderModuleFactory(moduleFactory, options) {
    var /** @type {?} */ platform = _getPlatform(platformServer, options);
    return _render(platform, platform.bootstrapModuleFactory(moduleFactory));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION = new _angular_core.Version('5.1.3');

exports.PlatformState = PlatformState;
exports.ServerModule = ServerModule;
exports.platformDynamicServer = platformDynamicServer;
exports.platformServer = platformServer;
exports.BEFORE_APP_SERIALIZED = BEFORE_APP_SERIALIZED;
exports.INITIAL_CONFIG = INITIAL_CONFIG;
exports.ServerTransferStateModule = ServerTransferStateModule;
exports.renderModule = renderModule;
exports.renderModuleFactory = renderModuleFactory;
exports.VERSION = VERSION;
exports.ɵINTERNAL_SERVER_PLATFORM_PROVIDERS = INTERNAL_SERVER_PLATFORM_PROVIDERS;
exports.ɵSERVER_RENDER_PROVIDERS = SERVER_RENDER_PROVIDERS;
exports.ɵServerRendererFactory2 = ServerRendererFactory2;
exports.ɵh = SERVER_HTTP_PROVIDERS;
exports.ɵd = ServerXhr;
exports.ɵe = ServerXsrfStrategy;
exports.ɵf = httpFactory;
exports.ɵg = zoneWrappedInterceptingHandler;
exports.ɵa = instantiateServerRendererFactory;
exports.ɵc = ServerStylesHost;
exports.ɵb = serializeTransferStateFactory;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=platform-server.umd.js.map


/***/ }),
/* 50 */
/***/ (function(module, exports) {

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Symbol support
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var HashMap;
    (function (HashMap) {
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        HashMap.create = supportsCreate
            ? function () { return MakeDictionary(Object.create(null)); }
            : supportsProto
                ? function () { return MakeDictionary({ __proto__: null }); }
                : function () { return MakeDictionary({}); };
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param propertyKey (Optional) The property key to decorate.
      * @param attributes (Optional) The property descriptor for the target key.
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                throw new TypeError();
            if (IsNull(attributes))
                attributes = undefined;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param propertyKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
            if (!Create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
            if (!Create)
                return undefined;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
    }
    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
    }
    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        return ToBoolean(metadataMap.has(MetadataKey));
    }
    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
        return undefined;
    }
    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return undefined;
        return metadataMap.get(MetadataKey);
    }
    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        return keys;
    }
    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
    function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
            var next = IteratorStep(iterator);
            if (!next) {
                keys.length = k;
                return keys;
            }
            var nextValue = IteratorValue(next);
            try {
                keys[k] = nextValue;
            }
            catch (e) {
                try {
                    IteratorClose(iterator);
                }
                finally {
                    throw e;
                }
            }
            k++;
        }
    }
    // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
    function Type(x) {
        if (x === null)
            return 1 /* Null */;
        switch (typeof x) {
            case "undefined": return 0 /* Undefined */;
            case "boolean": return 2 /* Boolean */;
            case "string": return 3 /* String */;
            case "symbol": return 4 /* Symbol */;
            case "number": return 5 /* Number */;
            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
            default: return 6 /* Object */;
        }
    }
    // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
    function IsNull(x) {
        return x === null;
    }
    // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive
    function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
            case 0 /* Undefined */: return input;
            case 1 /* Null */: return input;
            case 2 /* Boolean */: return input;
            case 3 /* String */: return input;
            case 4 /* Symbol */: return input;
            case 5 /* Number */: return input;
        }
        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== undefined) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
                throw new TypeError();
            return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
    function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
                var result = toString_1.call(O);
                if (!IsObject(result))
                    return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
                var result = toString_2.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        throw new TypeError();
    }
    // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean
    function ToBoolean(argument) {
        return !!argument;
    }
    // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring
    function ToString(argument) {
        return "" + argument;
    }
    // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey
    function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3 /* String */);
        if (IsSymbol(key))
            return key;
        return ToString(key);
    }
    // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray
    function IsArray(argument) {
        return Array.isArray
            ? Array.isArray(argument)
            : argument instanceof Object
                ? argument instanceof Array
                : Object.prototype.toString.call(argument) === "[object Array]";
    }
    // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable
    function IsCallable(argument) {
        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
        return typeof argument === "function";
    }
    // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor
    function IsConstructor(argument) {
        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
        return typeof argument === "function";
    }
    // 7.2.7 IsPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-ispropertykey
    function IsPropertyKey(argument) {
        switch (Type(argument)) {
            case 3 /* String */: return true;
            case 4 /* Symbol */: return true;
            default: return false;
        }
    }
    // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod
    function GetMethod(V, P) {
        var func = V[P];
        if (func === undefined || func === null)
            return undefined;
        if (!IsCallable(func))
            throw new TypeError();
        return func;
    }
    // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
    function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
            throw new TypeError(); // from Call
        var iterator = method.call(obj);
        if (!IsObject(iterator))
            throw new TypeError();
        return iterator;
    }
    // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
    function IteratorValue(iterResult) {
        return iterResult.value;
    }
    // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
    }
    // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
    function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass constructor. Compatible implementations
        // must either set __proto__ on a subclass constructor to the superclass constructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (function () {
            function MapIterator(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
            }
            MapIterator.prototype["@@iterator"] = function () { return this; };
            MapIterator.prototype[iteratorSymbol] = function () { return this; };
            MapIterator.prototype.next = function () {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                    var result = this._selector(this._keys[index], this._values[index]);
                    if (index + 1 >= this._keys.length) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    else {
                        this._index++;
                    }
                    return { value: result, done: false };
                }
                return { value: undefined, done: true };
            };
            MapIterator.prototype.throw = function (error) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                throw error;
            };
            MapIterator.prototype.return = function (value) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                return { value: value, done: true };
            };
            return MapIterator;
        }());
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    if (key === this._cacheKey) {
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
            Map.prototype["@@iterator"] = function () { return this.entries(); };
            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey !== key) {
                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                }
                if (this._cacheIndex < 0 && insert) {
                    this._cacheIndex = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheIndex;
            };
            return Map;
        }());
        function getKey(key, _) {
            return key;
        }
        function getValue(_, value) {
            return value;
        }
        function getEntry(key, value) {
            return [key, value];
        }
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            Set.prototype["@@iterator"] = function () { return this.keys(); };
            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
            return Set;
        }());
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        }());
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 § 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__ = undefined;
        delete obj.__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof global !== "undefined" ? global :
        typeof self !== "undefined" ? self :
            Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(10);
var first_1 = __webpack_require__(46);
Observable_1.Observable.prototype.first = first_1.first;
//# sourceMappingURL=first.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(44);

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(51);

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(5), __webpack_require__(75), __webpack_require__(76), __webpack_require__(45), __webpack_require__(71), __webpack_require__(68), __webpack_require__(11), __webpack_require__(10)) :
	typeof define === 'function' && define.amd ? define('@angular/common/http', ['exports', '@angular/core', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/filter', 'rxjs/operator/map', 'tslib', '@angular/common', 'rxjs/Observable'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = {}),global.ng.core,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.tslib,global.ng.common,global.Rx));
}(this, (function (exports,_angular_core,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_filter,rxjs_operator_map,tslib,_angular_common,rxjs_Observable) { 'use strict';

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 * \@stable
 * @abstract
 */
var HttpHandler = /** @class */ (function () {
    function HttpHandler() {
    }
    return HttpHandler;
}());
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 * \@stable
 * @abstract
 */
var HttpBackend = /** @class */ (function () {
    function HttpBackend() {
    }
    return HttpBackend;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @record
 */
/**
 * Immutable set of Http headers, with lazy parsing.
 * \@stable
 */
var HttpHeaders = /** @class */ (function () {
    function HttpHeaders(headers) {
        var _this = this;
        /**
         * Internal map of lowercased header names to the normalized
         * form of the name (the form seen first).
         */
        this.normalizedNames = new Map();
        /**
         * Queued updates to be materialized the next initialization.
         */
        this.lazyUpdate = null;
        if (!headers) {
            this.headers = new Map();
        }
        else if (typeof headers === 'string') {
            this.lazyInit = function () {
                _this.headers = new Map();
                headers.split('\n').forEach(function (line) {
                    var /** @type {?} */ index = line.indexOf(':');
                    if (index > 0) {
                        var /** @type {?} */ name_1 = line.slice(0, index);
                        var /** @type {?} */ key = name_1.toLowerCase();
                        var /** @type {?} */ value = line.slice(index + 1).trim();
                        _this.maybeSetNormalizedName(name_1, key);
                        if (_this.headers.has(key)) {
                            /** @type {?} */ ((_this.headers.get(key))).push(value);
                        }
                        else {
                            _this.headers.set(key, [value]);
                        }
                    }
                });
            };
        }
        else {
            this.lazyInit = function () {
                _this.headers = new Map();
                Object.keys(headers).forEach(function (name) {
                    var /** @type {?} */ values = headers[name];
                    var /** @type {?} */ key = name.toLowerCase();
                    if (typeof values === 'string') {
                        values = [values];
                    }
                    if (values.length > 0) {
                        _this.headers.set(key, values);
                        _this.maybeSetNormalizedName(name, key);
                    }
                });
            };
        }
    }
    /**
     * Checks for existence of header by given name.
     */
    /**
     * Checks for existence of header by given name.
     * @param {?} name
     * @return {?}
     */
    HttpHeaders.prototype.has = /**
     * Checks for existence of header by given name.
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.init();
        return this.headers.has(name.toLowerCase());
    };
    /**
     * Returns first header that matches given name.
     */
    /**
     * Returns first header that matches given name.
     * @param {?} name
     * @return {?}
     */
    HttpHeaders.prototype.get = /**
     * Returns first header that matches given name.
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.init();
        var /** @type {?} */ values = this.headers.get(name.toLowerCase());
        return values && values.length > 0 ? values[0] : null;
    };
    /**
     * Returns the names of the headers
     */
    /**
     * Returns the names of the headers
     * @return {?}
     */
    HttpHeaders.prototype.keys = /**
     * Returns the names of the headers
     * @return {?}
     */
    function () {
        this.init();
        return Array.from(this.normalizedNames.values());
    };
    /**
     * Returns list of header values for a given name.
     */
    /**
     * Returns list of header values for a given name.
     * @param {?} name
     * @return {?}
     */
    HttpHeaders.prototype.getAll = /**
     * Returns list of header values for a given name.
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.init();
        return this.headers.get(name.toLowerCase()) || null;
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    HttpHeaders.prototype.append = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        return this.clone({ name: name, value: value, op: 'a' });
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    HttpHeaders.prototype.set = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        return this.clone({ name: name, value: value, op: 's' });
    };
    /**
     * @param {?} name
     * @param {?=} value
     * @return {?}
     */
    HttpHeaders.prototype.delete = /**
     * @param {?} name
     * @param {?=} value
     * @return {?}
     */
    function (name, value) {
        return this.clone({ name: name, value: value, op: 'd' });
    };
    /**
     * @param {?} name
     * @param {?} lcName
     * @return {?}
     */
    HttpHeaders.prototype.maybeSetNormalizedName = /**
     * @param {?} name
     * @param {?} lcName
     * @return {?}
     */
    function (name, lcName) {
        if (!this.normalizedNames.has(lcName)) {
            this.normalizedNames.set(lcName, name);
        }
    };
    /**
     * @return {?}
     */
    HttpHeaders.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!!this.lazyInit) {
            if (this.lazyInit instanceof HttpHeaders) {
                this.copyFrom(this.lazyInit);
            }
            else {
                this.lazyInit();
            }
            this.lazyInit = null;
            if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });
                this.lazyUpdate = null;
            }
        }
    };
    /**
     * @param {?} other
     * @return {?}
     */
    HttpHeaders.prototype.copyFrom = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        var _this = this;
        other.init();
        Array.from(other.headers.keys()).forEach(function (key) {
            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));
            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));
        });
    };
    /**
     * @param {?} update
     * @return {?}
     */
    HttpHeaders.prototype.clone = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        var /** @type {?} */ clone = new HttpHeaders();
        clone.lazyInit =
            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
        return clone;
    };
    /**
     * @param {?} update
     * @return {?}
     */
    HttpHeaders.prototype.applyUpdate = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        var /** @type {?} */ key = update.name.toLowerCase();
        switch (update.op) {
            case 'a':
            case 's':
                var /** @type {?} */ value = /** @type {?} */ ((update.value));
                if (typeof value === 'string') {
                    value = [value];
                }
                if (value.length === 0) {
                    return;
                }
                this.maybeSetNormalizedName(update.name, key);
                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push.apply(base, value);
                this.headers.set(key, base);
                break;
            case 'd':
                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);
                if (!toDelete_1) {
                    this.headers.delete(key);
                    this.normalizedNames.delete(key);
                }
                else {
                    var /** @type {?} */ existing = this.headers.get(key);
                    if (!existing) {
                        return;
                    }
                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });
                    if (existing.length === 0) {
                        this.headers.delete(key);
                        this.normalizedNames.delete(key);
                    }
                    else {
                        this.headers.set(key, existing);
                    }
                }
                break;
        }
    };
    /**
     * @internal
     */
    /**
     * \@internal
     * @param {?} fn
     * @return {?}
     */
    HttpHeaders.prototype.forEach = /**
     * \@internal
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        this.init();
        Array.from(this.normalizedNames.keys())
            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });
    };
    return HttpHeaders;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A codec for encoding and decoding parameters in URLs.
 *
 * Used by `HttpParams`.
 *
 * \@stable
 *
 * @record
 */

/**
 * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to
 * serialize and parse URL parameter keys and values.
 *
 * \@stable
 */
var HttpUrlEncodingCodec = /** @class */ (function () {
    function HttpUrlEncodingCodec() {
    }
    /**
     * @param {?} k
     * @return {?}
     */
    HttpUrlEncodingCodec.prototype.encodeKey = /**
     * @param {?} k
     * @return {?}
     */
    function (k) { return standardEncoding(k); };
    /**
     * @param {?} v
     * @return {?}
     */
    HttpUrlEncodingCodec.prototype.encodeValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) { return standardEncoding(v); };
    /**
     * @param {?} k
     * @return {?}
     */
    HttpUrlEncodingCodec.prototype.decodeKey = /**
     * @param {?} k
     * @return {?}
     */
    function (k) { return decodeURIComponent(k); };
    /**
     * @param {?} v
     * @return {?}
     */
    HttpUrlEncodingCodec.prototype.decodeValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) { return decodeURIComponent(v); };
    return HttpUrlEncodingCodec;
}());
/**
 * @param {?} rawParams
 * @param {?} codec
 * @return {?}
 */
function paramParser(rawParams, codec) {
    var /** @type {?} */ map$$1 = new Map();
    if (rawParams.length > 0) {
        var /** @type {?} */ params = rawParams.split('&');
        params.forEach(function (param) {
            var /** @type {?} */ eqIdx = param.indexOf('=');
            var _a = eqIdx == -1 ?
                [codec.decodeKey(param), ''] :
                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];
            var /** @type {?} */ list = map$$1.get(key) || [];
            list.push(val);
            map$$1.set(key, list);
        });
    }
    return map$$1;
}
/**
 * @param {?} v
 * @return {?}
 */
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
/**
 * Options used to construct an `HttpParams` instance.
 * @record
 */

/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable - all mutation operations return a new instance.
 *
 * \@stable
 */
var HttpParams = /** @class */ (function () {
    function HttpParams(options) {
        if (options === void 0) { options = /** @type {?} */ ({}); }
        var _this = this;
        this.updates = null;
        this.cloneFrom = null;
        this.encoder = options.encoder || new HttpUrlEncodingCodec();
        if (!!options.fromString) {
            if (!!options.fromObject) {
                throw new Error("Cannot specify both fromString and fromObject.");
            }
            this.map = paramParser(options.fromString, this.encoder);
        }
        else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach(function (key) {
                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */
                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);
            });
        }
        else {
            this.map = null;
        }
    }
    /**
     * Check whether the body has one or more values for the given parameter name.
     */
    /**
     * Check whether the body has one or more values for the given parameter name.
     * @param {?} param
     * @return {?}
     */
    HttpParams.prototype.has = /**
     * Check whether the body has one or more values for the given parameter name.
     * @param {?} param
     * @return {?}
     */
    function (param) {
        this.init();
        return /** @type {?} */ ((this.map)).has(param);
    };
    /**
     * Get the first value for the given parameter name, or `null` if it's not present.
     */
    /**
     * Get the first value for the given parameter name, or `null` if it's not present.
     * @param {?} param
     * @return {?}
     */
    HttpParams.prototype.get = /**
     * Get the first value for the given parameter name, or `null` if it's not present.
     * @param {?} param
     * @return {?}
     */
    function (param) {
        this.init();
        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);
        return !!res ? res[0] : null;
    };
    /**
     * Get all values for the given parameter name, or `null` if it's not present.
     */
    /**
     * Get all values for the given parameter name, or `null` if it's not present.
     * @param {?} param
     * @return {?}
     */
    HttpParams.prototype.getAll = /**
     * Get all values for the given parameter name, or `null` if it's not present.
     * @param {?} param
     * @return {?}
     */
    function (param) {
        this.init();
        return /** @type {?} */ ((this.map)).get(param) || null;
    };
    /**
     * Get all the parameter names for this body.
     */
    /**
     * Get all the parameter names for this body.
     * @return {?}
     */
    HttpParams.prototype.keys = /**
     * Get all the parameter names for this body.
     * @return {?}
     */
    function () {
        this.init();
        return Array.from(/** @type {?} */ ((this.map)).keys());
    };
    /**
     * Construct a new body with an appended value for the given parameter name.
     */
    /**
     * Construct a new body with an appended value for the given parameter name.
     * @param {?} param
     * @param {?} value
     * @return {?}
     */
    HttpParams.prototype.append = /**
     * Construct a new body with an appended value for the given parameter name.
     * @param {?} param
     * @param {?} value
     * @return {?}
     */
    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };
    /**
     * Construct a new body with a new value for the given parameter name.
     */
    /**
     * Construct a new body with a new value for the given parameter name.
     * @param {?} param
     * @param {?} value
     * @return {?}
     */
    HttpParams.prototype.set = /**
     * Construct a new body with a new value for the given parameter name.
     * @param {?} param
     * @param {?} value
     * @return {?}
     */
    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };
    /**
     * Construct a new body with either the given value for the given parameter
     * removed, if a value is given, or all values for the given parameter removed
     * if not.
     */
    /**
     * Construct a new body with either the given value for the given parameter
     * removed, if a value is given, or all values for the given parameter removed
     * if not.
     * @param {?} param
     * @param {?=} value
     * @return {?}
     */
    HttpParams.prototype.delete = /**
     * Construct a new body with either the given value for the given parameter
     * removed, if a value is given, or all values for the given parameter removed
     * if not.
     * @param {?} param
     * @param {?=} value
     * @return {?}
     */
    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };
    /**
     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     */
    /**
     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     * @return {?}
     */
    HttpParams.prototype.toString = /**
     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     * @return {?}
     */
    function () {
        var _this = this;
        this.init();
        return this.keys()
            .map(function (key) {
            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);
            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');
        })
            .join('&');
    };
    /**
     * @param {?} update
     * @return {?}
     */
    HttpParams.prototype.clone = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));
        clone.cloneFrom = this.cloneFrom || this;
        clone.updates = (this.updates || []).concat([update]);
        return clone;
    };
    /**
     * @return {?}
     */
    HttpParams.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.map === null) {
            this.map = new Map();
        }
        if (this.cloneFrom !== null) {
            this.cloneFrom.init();
            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */
            ((this.updates)).forEach(function (update) {
                switch (update.op) {
                    case 'a':
                    case 's':
                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];
                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */
                        ((_this.map)).set(update.param, base);
                        break;
                    case 'd':
                        if (update.value !== undefined) {
                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];
                            var /** @type {?} */ idx = base_1.indexOf(update.value);
                            if (idx !== -1) {
                                base_1.splice(idx, 1);
                            }
                            if (base_1.length > 0) {
                                /** @type {?} */ ((_this.map)).set(update.param, base_1);
                            }
                            else {
                                /** @type {?} */ ((_this.map)).delete(update.param);
                            }
                        }
                        else {
                            /** @type {?} */ ((_this.map)).delete(update.param);
                            break;
                        }
                }
            });
            this.cloneFrom = null;
        }
    };
    return HttpParams;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine whether the given HTTP method may include a body.
 * @param {?} method
 * @return {?}
 */
function mightHaveBody(method) {
    switch (method) {
        case 'DELETE':
        case 'GET':
        case 'HEAD':
        case 'OPTIONS':
        case 'JSONP':
            return false;
        default:
            return true;
    }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 * @param {?} value
 * @return {?}
 */
function isArrayBuffer(value) {
    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 * @param {?} value
 * @return {?}
 */
function isBlob(value) {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 * @param {?} value
 * @return {?}
 */
function isFormData(value) {
    return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 * \@stable
 */
var HttpRequest = /** @class */ (function () {
    function HttpRequest(method, url, third, fourth) {
        this.url = url;
        /**
         * The request body, or `null` if one isn't set.
         *
         * Bodies are not enforced to be immutable, as they can include a reference to any
         * user-defined data type. However, interceptors should take care to preserve
         * idempotence by treating them as such.
         */
        this.body = null;
        /**
         * Whether this request should be made in a way that exposes progress events.
         *
         * Progress events are expensive (change detection runs on each event) and so
         * they should only be requested if the consumer intends to monitor them.
         */
        this.reportProgress = false;
        /**
         * Whether this request should be sent with outgoing credentials (cookies).
         */
        this.withCredentials = false;
        /**
         * The expected response type of the server.
         *
         * This is used to parse the response appropriately before returning it to
         * the requestee.
         */
        this.responseType = 'json';
        this.method = method.toUpperCase();
        // Next, need to figure out which argument holds the HttpRequestInit
        // options, if any.
        var /** @type {?} */ options;
        // Check whether a body argument is expected. The only valid way to omit
        // the body argument is to use a known no-body method like GET.
        if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;
            options = fourth;
        }
        else {
            // No body required, options are the third argument. The body stays null.
            options = /** @type {?} */ (third);
        }
        // If options have been passed, interpret them.
        if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials;
            // Override default response type of 'json' if one is provided.
            if (!!options.responseType) {
                this.responseType = options.responseType;
            }
            // Override headers if they're provided.
            if (!!options.headers) {
                this.headers = options.headers;
            }
            if (!!options.params) {
                this.params = options.params;
            }
        }
        // If no headers have been passed in, construct a new HttpHeaders instance.
        if (!this.headers) {
            this.headers = new HttpHeaders();
        }
        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
        if (!this.params) {
            this.params = new HttpParams();
            this.urlWithParams = url;
        }
        else {
            // Encode the parameters to a string in preparation for inclusion in the URL.
            var /** @type {?} */ params = this.params.toString();
            if (params.length === 0) {
                // No parameters, the visible URL is just the URL given at creation time.
                this.urlWithParams = url;
            }
            else {
                // Does the URL already have query parameters? Look for '?'.
                var /** @type {?} */ qIdx = url.indexOf('?');
                // There are 3 cases to handle:
                // 1) No existing parameters -> append '?' followed by params.
                // 2) '?' exists and is followed by existing query string ->
                //    append '&' followed by params.
                // 3) '?' exists at the end of the url -> append params directly.
                // This basically amounts to determining the character, if any, with
                // which to join the URL and parameters.
                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
                this.urlWithParams = url + sep + params;
            }
        }
    }
    /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     */
    /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     * @return {?}
     */
    HttpRequest.prototype.serializeBody = /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     * @return {?}
     */
    function () {
        // If no body is present, no need to serialize it.
        if (this.body === null) {
            return null;
        }
        // Check whether the body is already in a serialized form. If so,
        // it can just be returned directly.
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        // Check whether the body is an instance of HttpUrlEncodedParams.
        if (this.body instanceof HttpParams) {
            return this.body.toString();
        }
        // Check whether the body is an object or array, and serialize with JSON if so.
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        // Fall back on toString() for everything else.
        return (/** @type {?} */ (this.body)).toString();
    };
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     */
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     * @return {?}
     */
    HttpRequest.prototype.detectContentTypeHeader = /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     * @return {?}
     */
    function () {
        // An empty body has no content type.
        if (this.body === null) {
            return null;
        }
        // FormData bodies rely on the browser's content type assignment.
        if (isFormData(this.body)) {
            return null;
        }
        // Blobs usually have their own content type. If it doesn't, then
        // no type can be inferred.
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        // Array buffers have unknown contents and thus no type can be inferred.
        if (isArrayBuffer(this.body)) {
            return null;
        }
        // Technically, strings could be a form of JSON data, but it's safe enough
        // to assume they're plain strings.
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        // `HttpUrlEncodedParams` has its own content-type.
        if (this.body instanceof HttpParams) {
            return 'application/x-www-form-urlencoded;charset=UTF-8';
        }
        // Arrays, objects, and numbers will be encoded as JSON.
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        // No type could be inferred.
        return null;
    };
    /**
     * @param {?=} update
     * @return {?}
     */
    HttpRequest.prototype.clone = /**
     * @param {?=} update
     * @return {?}
     */
    function (update) {
        if (update === void 0) { update = {}; }
        // For method, url, and responseType, take the current value unless
        // it is overridden in the update hash.
        var /** @type {?} */ method = update.method || this.method;
        var /** @type {?} */ url = update.url || this.url;
        var /** @type {?} */ responseType = update.responseType || this.responseType;
        // The body is somewhat special - a `null` value in update.body means
        // whatever current body is present is being overridden with an empty
        // body, whereas an `undefined` value in update.body implies no
        // override.
        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;
        // Carefully handle the boolean options to differentiate between
        // `false` and `undefined` in the update args.
        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
        // Headers and params may be appended to if `setHeaders` or
        // `setParams` are used.
        var /** @type {?} */ headers = update.headers || this.headers;
        var /** @type {?} */ params = update.params || this.params;
        // Check whether the caller has asked to add headers.
        if (update.setHeaders !== undefined) {
            // Set every requested header.
            headers =
                Object.keys(update.setHeaders)
                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);
        }
        // Check whether the caller has asked to set params.
        if (update.setParams) {
            // Set every requested param.
            params = Object.keys(update.setParams)
                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);
        }
        // Finally, construct the new HttpRequest using the pieces from above.
        return new HttpRequest(method, url, body, {
            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,
        });
    };
    return HttpRequest;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
var HttpEventType = {
    /**
       * The request was sent out over the wire.
       */
    Sent: 0,
    /**
       * An upload progress event was received.
       */
    UploadProgress: 1,
    /**
       * The response status code and headers were received.
       */
    ResponseHeader: 2,
    /**
       * A download progress event was received.
       */
    DownloadProgress: 3,
    /**
       * The full response including the body was received.
       */
    Response: 4,
    /**
       * A custom event from an interceptor or a backend.
       */
    User: 5,
};
HttpEventType[HttpEventType.Sent] = "Sent";
HttpEventType[HttpEventType.UploadProgress] = "UploadProgress";
HttpEventType[HttpEventType.ResponseHeader] = "ResponseHeader";
HttpEventType[HttpEventType.DownloadProgress] = "DownloadProgress";
HttpEventType[HttpEventType.Response] = "Response";
HttpEventType[HttpEventType.User] = "User";
/**
 * Base interface for progress events.
 *
 * \@stable
 * @record
 */

/**
 * A download progress event.
 *
 * \@stable
 * @record
 */

/**
 * An upload progress event.
 *
 * \@stable
 * @record
 */

/**
 * An event indicating that the request was sent to the server. Useful
 * when a request may be retried multiple times, to distinguish between
 * retries on the final event stream.
 *
 * \@stable
 * @record
 */

/**
 * A user-defined event.
 *
 * Grouping all custom events under this type ensures they will be handled
 * and forwarded by all implementations of interceptors.
 *
 * \@stable
 * @record
 */

/**
 * An error that represents a failed attempt to JSON.parse text coming back
 * from the server.
 *
 * It bundles the Error object with the actual response body that failed to parse.
 *
 * \@stable
 * @record
 */

/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 * \@stable
 * @abstract
 */
var HttpResponseBase = /** @class */ (function () {
    /**
     * Super-constructor for all responses.
     *
     * The single parameter accepted is an initialization hash. Any properties
     * of the response passed there will override the default values.
     */
    function HttpResponseBase(init, defaultStatus, defaultStatusText) {
        if (defaultStatus === void 0) { defaultStatus = 200; }
        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }
        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null;
        // Cache the ok value to avoid defining a getter.
        this.ok = this.status >= 200 && this.status < 300;
    }
    return HttpResponseBase;
}());
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 * \@stable
 */
var HttpHeaderResponse = /** @class */ (function (_super) {
    tslib.__extends(HttpHeaderResponse, _super);
    /**
     * Create a new `HttpHeaderResponse` with the given parameters.
     */
    function HttpHeaderResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.ResponseHeader;
        return _this;
    }
    /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     */
    /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     * @param {?=} update
     * @return {?}
     */
    HttpHeaderResponse.prototype.clone = /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     * @param {?=} update
     * @return {?}
     */
    function (update) {
        if (update === void 0) { update = {}; }
        // Perform a straightforward initialization of the new HttpHeaderResponse,
        // overriding the current parameters with new ones if given.
        return new HttpHeaderResponse({
            headers: update.headers || this.headers,
            status: update.status !== undefined ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpHeaderResponse;
}(HttpResponseBase));
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 * \@stable
 */
var HttpResponse = /** @class */ (function (_super) {
    tslib.__extends(HttpResponse, _super);
    /**
     * Construct a new `HttpResponse`.
     */
    function HttpResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.Response;
        _this.body = init.body !== undefined ? init.body : null;
        return _this;
    }
    /**
     * @param {?=} update
     * @return {?}
     */
    HttpResponse.prototype.clone = /**
     * @param {?=} update
     * @return {?}
     */
    function (update) {
        if (update === void 0) { update = {}; }
        return new HttpResponse({
            body: (update.body !== undefined) ? update.body : this.body,
            headers: update.headers || this.headers,
            status: (update.status !== undefined) ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpResponse;
}(HttpResponseBase));
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 * \@stable
 */
var HttpErrorResponse = /** @class */ (function (_super) {
    tslib.__extends(HttpErrorResponse, _super);
    function HttpErrorResponse(init) {
        var _this = 
        // Initialize with a default status of 0 / Unknown Error.
        _super.call(this, init, 0, 'Unknown Error') || this;
        _this.name = 'HttpErrorResponse';
        /**
         * Errors are never okay, even when the status code is in the 2xx success range.
         */
        _this.ok = false;
        // If the response was successful, then this was a parse error. Otherwise, it was
        // a protocol-level failure of some sort. Either the request failed in transit
        // or the server returned an unsuccessful status code.
        if (_this.status >= 200 && _this.status < 300) {
            _this.message = "Http failure during parsing for " + (init.url || '(unknown url)');
        }
        else {
            _this.message =
                "Http failure response for " + (init.url || '(unknown url)') + ": " + init.status + " " + init.statusText;
        }
        _this.error = init.error || null;
        return _this;
    }
    return HttpErrorResponse;
}(HttpResponseBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. Basically, this clones the object and adds the body.
 * @template T
 * @param {?} options
 * @param {?} body
 * @return {?}
 */
function addBody(options, body) {
    return {
        body: body,
        headers: options.headers,
        observe: options.observe,
        params: options.params,
        reportProgress: options.reportProgress,
        responseType: options.responseType,
        withCredentials: options.withCredentials,
    };
}
/**
 * Perform HTTP requests.
 *
 * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies according to which
 * signature is called (mainly the values of `observe` and `responseType`).
 *
 * \@stable
 */
var HttpClient = /** @class */ (function () {
    function HttpClient(handler) {
        this.handler = handler;
    }
    /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     */
    /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.request = /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    function (first, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var /** @type {?} */ req;
        // Firstly, check whether the primary argument is an instance of `HttpRequest`.
        if (first instanceof HttpRequest) {
            // It is. The other arguments must be undefined (per the signatures) and can be
            // ignored.
            req = /** @type {?} */ (first);
        }
        else {
            // It's a string, so it represents a URL. Construct a request based on it,
            // and incorporate the remaining arguments (assuming GET unless a method is
            // provided.
            // Figure out the headers.
            var /** @type {?} */ headers = undefined;
            if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
            }
            else {
                headers = new HttpHeaders(options.headers);
            }
            // Sort out parameters.
            var /** @type {?} */ params = undefined;
            if (!!options.params) {
                if (options.params instanceof HttpParams) {
                    params = options.params;
                }
                else {
                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));
                }
            }
            // Construct the request.
            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {
                headers: headers,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials,
            });
        }
        // Start with an Observable.of() the initial request, and run the handler (which
        // includes all interceptors) inside a concatMap(). This way, the handler runs
        // inside an Observable chain, which causes interceptors to be re-run on every
        // subscription (this also makes retries re-run the handler, including interceptors).
        var /** @type {?} */ events$ = rxjs_operator_concatMap.concatMap.call(rxjs_observable_of.of(req), function (req) { return _this.handler.handle(req); });
        // If coming via the API signature which accepts a previously constructed HttpRequest,
        // the only option is to get the event stream. Otherwise, return the event stream if
        // that is what was requested.
        if (first instanceof HttpRequest || options.observe === 'events') {
            return events$;
        }
        // The requested stream contains either the full response or the body. In either
        // case, the first step is to filter the event stream to extract a stream of
        // responses(s).
        var /** @type {?} */ res$ = rxjs_operator_filter.filter.call(events$, function (event) { return event instanceof HttpResponse; });
        // Decide which stream to return.
        switch (options.observe || 'body') {
            case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                    case 'arraybuffer':
                        return rxjs_operator_map.map.call(res$, function (res) {
                            // Validate that the body is an ArrayBuffer.
                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                throw new Error('Response is not an ArrayBuffer.');
                            }
                            return res.body;
                        });
                    case 'blob':
                        return rxjs_operator_map.map.call(res$, function (res) {
                            // Validate that the body is a Blob.
                            if (res.body !== null && !(res.body instanceof Blob)) {
                                throw new Error('Response is not a Blob.');
                            }
                            return res.body;
                        });
                    case 'text':
                        return rxjs_operator_map.map.call(res$, function (res) {
                            // Validate that the body is a string.
                            if (res.body !== null && typeof res.body !== 'string') {
                                throw new Error('Response is not a string.');
                            }
                            return res.body;
                        });
                    case 'json':
                    default:
                        // No validation needed for JSON responses, as they can be of any type.
                        return rxjs_operator_map.map.call(res$, function (res) { return res.body; });
                }
            case 'response':
                // The response stream was requested directly, so return it.
                return res$;
            default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
        }
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.delete = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('DELETE', url, /** @type {?} */ (options));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.get = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('GET', url, /** @type {?} */ (options));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.head = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('HEAD', url, /** @type {?} */ (options));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     * @template T
     * @param {?} url
     * @param {?} callbackParam
     * @return {?}
     */
    HttpClient.prototype.jsonp = /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     * @template T
     * @param {?} url
     * @param {?} callbackParam
     * @return {?}
     */
    function (url, callbackParam) {
        return this.request('JSONP', url, {
            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
            observe: 'body',
            responseType: 'json',
        });
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.options = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('OPTIONS', url, /** @type {?} */ (options));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.patch = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PATCH', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.post = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('POST', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    HttpClient.prototype.put = /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PUT', url, addBody(options, body));
    };
    HttpClient.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    HttpClient.ctorParameters = function () { return [
        { type: HttpHandler, },
    ]; };
    return HttpClient;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Intercepts `HttpRequest` and handles them.
 *
 * Most interceptors will transform the outgoing request before passing it to the
 * next interceptor in the chain, by calling `next.handle(transformedReq)`.
 *
 * In rare cases, interceptors may wish to completely handle a request themselves,
 * and not delegate to the remainder of the chain. This behavior is allowed.
 *
 * \@stable
 * @record
 */

/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 * \@stable
 */
var HttpInterceptorHandler = /** @class */ (function () {
    function HttpInterceptorHandler(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    HttpInterceptorHandler.prototype.handle = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.interceptor.intercept(req, this.next);
    };
    return HttpInterceptorHandler;
}());
/**
 * A multi-provider token which represents the array of `HttpInterceptor`s that
 * are registered.
 *
 * \@stable
 */
var HTTP_INTERCEPTORS = new _angular_core.InjectionToken('HTTP_INTERCEPTORS');
var NoopInterceptor = /** @class */ (function () {
    function NoopInterceptor() {
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NoopInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        return next.handle(req);
    };
    NoopInterceptor.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    NoopInterceptor.ctorParameters = function () { return []; };
    return NoopInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.
var nextRequestId = 0;
// Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.
var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
// Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 * \@stable
 * @abstract
 */
var JsonpCallbackContext = /** @class */ (function () {
    function JsonpCallbackContext() {
    }
    return JsonpCallbackContext;
}());
/**
 * `HttpBackend` that only processes `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 *
 * \@stable
 */
var JsonpClientBackend = /** @class */ (function () {
    function JsonpClientBackend(callbackMap, document) {
        this.callbackMap = callbackMap;
        this.document = document;
    }
    /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     * @return {?}
     */
    JsonpClientBackend.prototype.nextCallback = /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     * @return {?}
     */
    function () { return "ng_jsonp_callback_" + nextRequestId++; };
    /**
     * Process a JSONP request and return an event stream of the results.
     */
    /**
     * Process a JSONP request and return an event stream of the results.
     * @param {?} req
     * @return {?}
     */
    JsonpClientBackend.prototype.handle = /**
     * Process a JSONP request and return an event stream of the results.
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        // Firstly, check both the method and response type. If either doesn't match
        // then the request was improperly routed here and cannot be handled.
        if (req.method !== 'JSONP') {
            throw new Error(JSONP_ERR_WRONG_METHOD);
        }
        else if (req.responseType !== 'json') {
            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
        }
        // Everything else happens inside the Observable boundary.
        return new rxjs_Observable.Observable(function (observer) {
            // The first step to make a request is to generate the callback name, and replace the
            // callback placeholder in the URL with the name. Care has to be taken here to ensure
            // a trailing &, if matched, gets inserted back into the URL in the correct place.
            var /** @type {?} */ callback = _this.nextCallback();
            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=" + callback + "$1");
            // Construct the <script> tag and point it at the URL.
            var /** @type {?} */ node = _this.document.createElement('script');
            node.src = url;
            // A JSONP request requires waiting for multiple callbacks. These variables
            // are closed over and track state across those callbacks.
            // The response object, if one has been received, or null otherwise.
            var /** @type {?} */ body = null;
            // Whether the response callback has been called.
            var /** @type {?} */ finished = false;
            // Whether the request has been cancelled (and thus any other callbacks)
            // should be ignored.
            var /** @type {?} */ cancelled = false;
            // Set the response callback in this.callbackMap (which will be the window
            // object in the browser. The script being loaded via the <script> tag will
            // eventually call this callback.
            // Set the response callback in this.callbackMap (which will be the window
            // object in the browser. The script being loaded via the <script> tag will
            // eventually call this callback.
            _this.callbackMap[callback] = function (data) {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete _this.callbackMap[callback];
                // Next, make sure the request wasn't cancelled in the meantime.
                if (cancelled) {
                    return;
                }
                // Set state to indicate data was received.
                body = data;
                finished = true;
            };
            // cleanup() is a utility closure that removes the <script> from the page and
            // the response callback from the window. This logic is used in both the
            // success, error, and cancellation paths, so it's extracted out for convenience.
            var /** @type {?} */ cleanup = function () {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
                // Remove the response callback from the callbackMap (window object in the
                // browser).
                delete _this.callbackMap[callback];
            };
            // onLoad() is the success callback which runs after the response callback
            // if the JSONP script loads successfully. The event itself is unimportant.
            // If something went wrong, onLoad() may run without the response callback
            // having been invoked.
            var /** @type {?} */ onLoad = function (event) {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                    return;
                }
                // Cleanup the page.
                cleanup();
                // Check whether the response callback has run.
                if (!finished) {
                    // It hasn't, something went wrong with the request. Return an error via
                    // the Observable error path. All JSONP errors have status 0.
                    observer.error(new HttpErrorResponse({
                        url: url,
                        status: 0,
                        statusText: 'JSONP Error',
                        error: new Error(JSONP_ERR_NO_CALLBACK),
                    }));
                    return;
                }
                // Success. body either contains the response body or null if none was
                // returned.
                observer.next(new HttpResponse({
                    body: body,
                    status: 200,
                    statusText: 'OK', url: url,
                }));
                // Complete the stream, the resposne is over.
                observer.complete();
            };
            // onError() is the error callback, which runs if the script returned generates
            // a Javascript error. It emits the error via the Observable error channel as
            // a HttpErrorResponse.
            var /** @type {?} */ onError = function (error) {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                    return;
                }
                cleanup();
                // Wrap the error in a HttpErrorResponse.
                observer.error(new HttpErrorResponse({
                    error: error,
                    status: 0,
                    statusText: 'JSONP Error', url: url,
                }));
            };
            // Subscribe to both the success (load) and error events on the <script> tag,
            // and add it to the page.
            node.addEventListener('load', onLoad);
            node.addEventListener('error', onError);
            _this.document.body.appendChild(node);
            // The request has now been successfully sent.
            observer.next({ type: HttpEventType.Sent });
            // Cancellation handler.
            return function () {
                // Track the cancellation so event listeners won't do anything even if already scheduled.
                cancelled = true;
                // Remove the event listeners so they won't run if the events later fire.
                node.removeEventListener('load', onLoad);
                node.removeEventListener('error', onError);
                // And finally, clean up the page.
                cleanup();
            };
        });
    };
    JsonpClientBackend.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    JsonpClientBackend.ctorParameters = function () { return [
        { type: JsonpCallbackContext, },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },
    ]; };
    return JsonpClientBackend;
}());
/**
 * An `HttpInterceptor` which identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 * \@stable
 */
var JsonpInterceptor = /** @class */ (function () {
    function JsonpInterceptor(jsonp) {
        this.jsonp = jsonp;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    JsonpInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        if (req.method === 'JSONP') {
            return this.jsonp.handle(/** @type {?} */ (req));
        }
        // Fall through for normal HTTP requests.
        return next.handle(req);
    };
    JsonpInterceptor.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    JsonpInterceptor.ctorParameters = function () { return [
        { type: JsonpClientBackend, },
    ]; };
    return JsonpInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 * @param {?} xhr
 * @return {?}
 */
function getResponseUrl(xhr) {
    if ('responseURL' in xhr && xhr.responseURL) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return null;
}
/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * \@stable
 * @abstract
 */
var XhrFactory = /** @class */ (function () {
    function XhrFactory() {
    }
    return XhrFactory;
}());
/**
 * A factory for \@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.
 *
 * \@stable
 */
var BrowserXhr = /** @class */ (function () {
    function BrowserXhr() {
    }
    /**
     * @return {?}
     */
    BrowserXhr.prototype.build = /**
     * @return {?}
     */
    function () { return /** @type {?} */ ((new XMLHttpRequest())); };
    BrowserXhr.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    BrowserXhr.ctorParameters = function () { return []; };
    return BrowserXhr;
}());
/**
 * An `HttpBackend` which uses the XMLHttpRequest API to send
 * requests to a backend server.
 *
 * \@stable
 */
var HttpXhrBackend = /** @class */ (function () {
    function HttpXhrBackend(xhrFactory) {
        this.xhrFactory = xhrFactory;
    }
    /**
     * Process a request and return a stream of response events.
     */
    /**
     * Process a request and return a stream of response events.
     * @param {?} req
     * @return {?}
     */
    HttpXhrBackend.prototype.handle = /**
     * Process a request and return a stream of response events.
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        // Quick check to give a better error message when a user attempts to use
        // HttpClient.jsonp() without installing the JsonpClientModule
        if (req.method === 'JSONP') {
            throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
        }
        // Everything happens on Observable subscription.
        return new rxjs_Observable.Observable(function (observer) {
            // Start by setting up the XHR object with request method, URL, and withCredentials flag.
            var /** @type {?} */ xhr = _this.xhrFactory.build();
            xhr.open(req.method, req.urlWithParams);
            if (!!req.withCredentials) {
                xhr.withCredentials = true;
            }
            // Add all the requested headers.
            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });
            // Add an Accept header if one isn't present already.
            if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
            }
            // Auto-detect the Content-Type header if one isn't present already.
            if (!req.headers.has('Content-Type')) {
                var /** @type {?} */ detectedType = req.detectContentTypeHeader();
                // Sometimes Content-Type detection fails.
                if (detectedType !== null) {
                    xhr.setRequestHeader('Content-Type', detectedType);
                }
            }
            // Set the responseType if one was requested.
            if (req.responseType) {
                var /** @type {?} */ responseType = req.responseType.toLowerCase();
                // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.
                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));
            }
            // Serialize the request body if one is present. If not, this will be set to null.
            var /** @type {?} */ reqBody = req.serializeBody();
            // If progress events are enabled, response headers will be delivered
            // in two events - the HttpHeaderResponse event and the full HttpResponse
            // event. However, since response headers don't change in between these
            // two events, it doesn't make sense to parse them twice. So headerResponse
            // caches the data extracted from the response whenever it's first parsed,
            // to ensure parsing isn't duplicated.
            var /** @type {?} */ headerResponse = null;
            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
            // state, and memoizes it into headerResponse.
            var /** @type {?} */ partialFromXhr = function () {
                if (headerResponse !== null) {
                    return headerResponse;
                }
                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;
                var /** @type {?} */ statusText = xhr.statusText || 'OK';
                // Parse headers from XMLHttpRequest - this step is lazy.
                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());
                // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.
                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;
                // Construct the HttpHeaderResponse and memoize it.
                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });
                return headerResponse;
            };
            // Next, a few closures are defined for the various events which XMLHttpRequest can
            // emit. This allows them to be unregistered as event listeners later.
            // First up is the load event, which represents a response being fully available.
            var /** @type {?} */ onLoad = function () {
                // Read response state from the memoized partial data.
                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;
                // The body will be read out if present.
                var /** @type {?} */ body = null;
                if (status !== 204) {
                    // Use XMLHttpRequest.response if set, responseText otherwise.
                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
                }
                // Normalize another potential bug (this one comes from CORS).
                if (status === 0) {
                    status = !!body ? 200 : 0;
                }
                // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.
                var /** @type {?} */ ok = status >= 200 && status < 300;
                // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).
                if (req.responseType === 'json' && typeof body === 'string') {
                    // Save the original body, before attempting XSSI prefix stripping.
                    var /** @type {?} */ originalBody = body;
                    body = body.replace(XSSI_PREFIX, '');
                    try {
                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
                        body = body !== '' ? JSON.parse(body) : null;
                    }
                    catch (/** @type {?} */ error) {
                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                        // JSON response. Restore the original body (including any XSSI prefix) to deliver
                        // a better error response.
                        body = originalBody;
                        // If this was an error request to begin with, leave it as a string, it probably
                        // just isn't JSON. Otherwise, deliver the parsing error to the user.
                        if (ok) {
                            // Even though the response status was 2xx, this is still an error.
                            ok = false;
                            // The parse error contains the text of the body that failed to parse.
                            body = /** @type {?} */ ({ error: error, text: body });
                        }
                    }
                }
                if (ok) {
                    // A successful response is delivered on the event stream.
                    observer.next(new HttpResponse({
                        body: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                    // The full body has been received and delivered, no further events
                    // are possible. This request is complete.
                    observer.complete();
                }
                else {
                    // An unsuccessful request is delivered on the error channel.
                    observer.error(new HttpErrorResponse({
                        // The error in this case is the response body (error from the server).
                        error: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                }
            };
            // The onError callback is called when something goes wrong at the network level.
            // Connection timeout, DNS error, offline, etc. These are actual errors, and are
            // transmitted on the error channel.
            var /** @type {?} */ onError = function (error) {
                var /** @type {?} */ res = new HttpErrorResponse({
                    error: error,
                    status: xhr.status || 0,
                    statusText: xhr.statusText || 'Unknown Error',
                });
                observer.error(res);
            };
            // The sentHeaders flag tracks whether the HttpResponseHeaders event
            // has been sent on the stream. This is necessary to track if progress
            // is enabled since the event will be sent on only the first download
            // progerss event.
            var /** @type {?} */ sentHeaders = false;
            // The download progress event handler, which is only registered if
            // progress events are enabled.
            var /** @type {?} */ onDownProgress = function (event) {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                    observer.next(partialFromXhr());
                    sentHeaders = true;
                }
                // Start building the download progress event to deliver on the response
                // event stream.
                var /** @type {?} */ progressEvent = {
                    type: HttpEventType.DownloadProgress,
                    loaded: event.loaded,
                };
                // Set the total number of bytes in the event if it's available.
                if (event.lengthComputable) {
                    progressEvent.total = event.total;
                }
                // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.
                if (req.responseType === 'text' && !!xhr.responseText) {
                    progressEvent.partialText = xhr.responseText;
                }
                // Finally, fire the event.
                observer.next(progressEvent);
            };
            // The upload progress event handler, which is only registered if
            // progress events are enabled.
            var /** @type {?} */ onUpProgress = function (event) {
                // Upload progress events are simpler. Begin building the progress
                // event.
                var /** @type {?} */ progress = {
                    type: HttpEventType.UploadProgress,
                    loaded: event.loaded,
                };
                // If the total number of bytes being uploaded is available, include
                // it.
                if (event.lengthComputable) {
                    progress.total = event.total;
                }
                // Send the event.
                observer.next(progress);
            };
            // By default, register for load and error events.
            xhr.addEventListener('load', onLoad);
            xhr.addEventListener('error', onError);
            // Progress events are only enabled if requested.
            if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress);
                // Upload progress depends on whether there is a body to upload.
                if (reqBody !== null && xhr.upload) {
                    xhr.upload.addEventListener('progress', onUpProgress);
                }
            }
            // Fire the request, and notify the event stream that it was fired.
            xhr.send(reqBody);
            observer.next({ type: HttpEventType.Sent });
            // This is the return from the Observable function, which is the
            // request cancellation handler.
            return function () {
                // On a cancellation, remove all registered event listeners.
                xhr.removeEventListener('error', onError);
                xhr.removeEventListener('load', onLoad);
                if (req.reportProgress) {
                    xhr.removeEventListener('progress', onDownProgress);
                    if (reqBody !== null && xhr.upload) {
                        xhr.upload.removeEventListener('progress', onUpProgress);
                    }
                }
                // Finally, abort the in-flight request.
                xhr.abort();
            };
        });
    };
    HttpXhrBackend.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    HttpXhrBackend.ctorParameters = function () { return [
        { type: XhrFactory, },
    ]; };
    return HttpXhrBackend;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSRF_COOKIE_NAME = new _angular_core.InjectionToken('XSRF_COOKIE_NAME');
var XSRF_HEADER_NAME = new _angular_core.InjectionToken('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 * \@stable
 * @abstract
 */
var HttpXsrfTokenExtractor = /** @class */ (function () {
    function HttpXsrfTokenExtractor() {
    }
    return HttpXsrfTokenExtractor;
}());
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */
var HttpXsrfCookieExtractor = /** @class */ (function () {
    function HttpXsrfCookieExtractor(doc, platform, cookieName) {
        this.doc = doc;
        this.platform = platform;
        this.cookieName = cookieName;
        this.lastCookieString = '';
        this.lastToken = null;
        /**
         * \@internal for testing
         */
        this.parseCount = 0;
    }
    /**
     * @return {?}
     */
    HttpXsrfCookieExtractor.prototype.getToken = /**
     * @return {?}
     */
    function () {
        if (this.platform === 'server') {
            return null;
        }
        var /** @type {?} */ cookieString = this.doc.cookie || '';
        if (cookieString !== this.lastCookieString) {
            this.parseCount++;
            this.lastToken = _angular_common.ɵparseCookieValue(cookieString, this.cookieName);
            this.lastCookieString = cookieString;
        }
        return this.lastToken;
    };
    HttpXsrfCookieExtractor.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    HttpXsrfCookieExtractor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PLATFORM_ID,] },] },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_COOKIE_NAME,] },] },
    ]; };
    return HttpXsrfCookieExtractor;
}());
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */
var HttpXsrfInterceptor = /** @class */ (function () {
    function HttpXsrfInterceptor(tokenService, headerName) {
        this.tokenService = tokenService;
        this.headerName = headerName;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpXsrfInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var /** @type {?} */ lcUrl = req.url.toLowerCase();
        // Skip both non-mutating requests and absolute URLs.
        // Non-mutating requests don't require a token, and absolute URLs require special handling
        // anyway as the cookie set
        // on our origin is not the same as the token expected by another origin.
        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
            lcUrl.startsWith('https://')) {
            return next.handle(req);
        }
        var /** @type {?} */ token = this.tokenService.getToken();
        // Be careful not to overwrite an existing header of the same name.
        if (token !== null && !req.headers.has(this.headerName)) {
            req = req.clone({ headers: req.headers.set(this.headerName, token) });
        }
        return next.handle(req);
    };
    HttpXsrfInterceptor.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    HttpXsrfInterceptor.ctorParameters = function () { return [
        { type: HttpXsrfTokenExtractor, },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_HEADER_NAME,] },] },
    ]; };
    return HttpXsrfInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s
 * to a request before passing it to the given `HttpBackend`.
 *
 * Meant to be used as a factory function within `HttpClientModule`.
 *
 * \@stable
 * @param {?} backend
 * @param {?=} interceptors
 * @return {?}
 */
function interceptingHandler(backend, interceptors) {
    if (interceptors === void 0) { interceptors = []; }
    if (!interceptors) {
        return backend;
    }
    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);
}
/**
 * Factory function that determines where to store JSONP callbacks.
 *
 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
 * in test environments. In that case, callbacks are stored on an anonymous object instead.
 *
 * \@stable
 * @return {?}
 */
function jsonpCallbackContext() {
    if (typeof window === 'object') {
        return window;
    }
    return {};
}
/**
 * `NgModule` which adds XSRF protection support to outgoing requests.
 *
 * Provided the server supports a cookie-based XSRF protection system, this
 * module can be used directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no such names are provided, the default is to use `X-XSRF-TOKEN` for
 * the header name and `XSRF-TOKEN` for the cookie name.
 *
 * \@stable
 */
var HttpClientXsrfModule = /** @class */ (function () {
    function HttpClientXsrfModule() {
    }
    /**
     * Disable the default XSRF protection.
     */
    /**
     * Disable the default XSRF protection.
     * @return {?}
     */
    HttpClientXsrfModule.disable = /**
     * Disable the default XSRF protection.
     * @return {?}
     */
    function () {
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
            ],
        };
    };
    /**
     * Configure XSRF protection to use the given cookie name or header name,
     * or the default names (as described above) if not provided.
     */
    /**
     * Configure XSRF protection to use the given cookie name or header name,
     * or the default names (as described above) if not provided.
     * @param {?=} options
     * @return {?}
     */
    HttpClientXsrfModule.withOptions = /**
     * Configure XSRF protection to use the given cookie name or header name,
     * or the default names (as described above) if not provided.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
            ],
        };
    };
    HttpClientXsrfModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    providers: [
                        HttpXsrfInterceptor,
                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
                    ],
                },] },
    ];
    /** @nocollapse */
    HttpClientXsrfModule.ctorParameters = function () { return []; };
    return HttpClientXsrfModule;
}());
/**
 * `NgModule` which provides the `HttpClient` and associated services.
 *
 * Interceptors can be added to the chain behind `HttpClient` by binding them
 * to the multiprovider for `HTTP_INTERCEPTORS`.
 *
 * \@stable
 */
var HttpClientModule = /** @class */ (function () {
    function HttpClientModule() {
    }
    HttpClientModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        HttpClientXsrfModule.withOptions({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'X-XSRF-TOKEN',
                        }),
                    ],
                    providers: [
                        HttpClient,
                        // HttpHandler is the backend + interceptors and is constructed
                        // using the interceptingHandler factory function.
                        {
                            provide: HttpHandler,
                            useFactory: interceptingHandler,
                            deps: [HttpBackend, [new _angular_core.Optional(), new _angular_core.Inject(HTTP_INTERCEPTORS)]],
                        },
                        HttpXhrBackend,
                        { provide: HttpBackend, useExisting: HttpXhrBackend },
                        BrowserXhr,
                        { provide: XhrFactory, useExisting: BrowserXhr },
                    ],
                },] },
    ];
    /** @nocollapse */
    HttpClientModule.ctorParameters = function () { return []; };
    return HttpClientModule;
}());
/**
 * `NgModule` which enables JSONP support in `HttpClient`.
 *
 * Without this module, Jsonp requests will reach the backend
 * with method JSONP, where they'll be rejected.
 *
 * \@stable
 */
var HttpClientJsonpModule = /** @class */ (function () {
    function HttpClientJsonpModule() {
    }
    HttpClientJsonpModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    providers: [
                        JsonpClientBackend,
                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },
                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },
                    ],
                },] },
    ];
    /** @nocollapse */
    HttpClientJsonpModule.ctorParameters = function () { return []; };
    return HttpClientJsonpModule;
}());

exports.HttpBackend = HttpBackend;
exports.HttpHandler = HttpHandler;
exports.HttpClient = HttpClient;
exports.HttpHeaders = HttpHeaders;
exports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;
exports.JsonpClientBackend = JsonpClientBackend;
exports.JsonpInterceptor = JsonpInterceptor;
exports.HttpClientJsonpModule = HttpClientJsonpModule;
exports.HttpClientModule = HttpClientModule;
exports.HttpClientXsrfModule = HttpClientXsrfModule;
exports.ɵinterceptingHandler = interceptingHandler;
exports.HttpParams = HttpParams;
exports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;
exports.HttpRequest = HttpRequest;
exports.HttpErrorResponse = HttpErrorResponse;
exports.HttpEventType = HttpEventType;
exports.HttpHeaderResponse = HttpHeaderResponse;
exports.HttpResponse = HttpResponse;
exports.HttpResponseBase = HttpResponseBase;
exports.HttpXhrBackend = HttpXhrBackend;
exports.XhrFactory = XhrFactory;
exports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;
exports.ɵa = NoopInterceptor;
exports.ɵb = JsonpCallbackContext;
exports.ɵc = jsonpCallbackContext;
exports.ɵd = BrowserXhr;
exports.ɵg = HttpXsrfCookieExtractor;
exports.ɵh = HttpXsrfInterceptor;
exports.ɵe = XSRF_COOKIE_NAME;
exports.ɵf = XSRF_HEADER_NAME;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=common-http.umd.js.map


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(5), __webpack_require__(44), __webpack_require__(43), __webpack_require__(22)) :
	typeof define === 'function' && define.amd ? define('@angular/platform-browser/animations', ['exports', '@angular/core', '@angular/platform-browser', '@angular/animations', '@angular/animations/browser'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}, global.ng.platformBrowser.animations = {}),global.ng.core,global.ng.platformBrowser,global.ng.animations,global.ng.animations.browser));
}(this, (function (exports,_angular_core,_angular_platformBrowser,_angular_animations,_angular_animations_browser) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @license Angular v5.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserAnimationBuilder = /** @class */ (function (_super) {
    __extends(BrowserAnimationBuilder, _super);
    function BrowserAnimationBuilder(rootRenderer, doc) {
        var _this = _super.call(this) || this;
        _this._nextAnimationId = 0;
        var /** @type {?} */ typeData = /** @type {?} */ ({
            id: '0',
            encapsulation: _angular_core.ViewEncapsulation.None,
            styles: [],
            data: { animation: [] }
        });
        _this._renderer = /** @type {?} */ (rootRenderer.createRenderer(doc.body, typeData));
        return _this;
    }
    /**
     * @param {?} animation
     * @return {?}
     */
    BrowserAnimationBuilder.prototype.build = /**
     * @param {?} animation
     * @return {?}
     */
    function (animation) {
        var /** @type {?} */ id = this._nextAnimationId.toString();
        this._nextAnimationId++;
        var /** @type {?} */ entry = Array.isArray(animation) ? _angular_animations.sequence(animation) : animation;
        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
        return new BrowserAnimationFactory(id, this._renderer);
    };
    BrowserAnimationBuilder.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    BrowserAnimationBuilder.ctorParameters = function () { return [
        { type: _angular_core.RendererFactory2, },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
    ]; };
    return BrowserAnimationBuilder;
}(_angular_animations.AnimationBuilder));
var BrowserAnimationFactory = /** @class */ (function (_super) {
    __extends(BrowserAnimationFactory, _super);
    function BrowserAnimationFactory(_id, _renderer) {
        var _this = _super.call(this) || this;
        _this._id = _id;
        _this._renderer = _renderer;
        return _this;
    }
    /**
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    BrowserAnimationFactory.prototype.create = /**
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    function (element, options) {
        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
    };
    return BrowserAnimationFactory;
}(_angular_animations.AnimationFactory));
var RendererAnimationPlayer = /** @class */ (function () {
    function RendererAnimationPlayer(id, element, options, _renderer) {
        this.id = id;
        this.element = element;
        this._renderer = _renderer;
        this.parentPlayer = null;
        this._started = false;
        this.totalTime = 0;
        this._command('create', options);
    }
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    RendererAnimationPlayer.prototype._listen = /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (eventName, callback) {
        return this._renderer.listen(this.element, "@@" + this.id + ":" + eventName, callback);
    };
    /**
     * @param {?} command
     * @param {...?} args
     * @return {?}
     */
    RendererAnimationPlayer.prototype._command = /**
     * @param {?} command
     * @param {...?} args
     * @return {?}
     */
    function (command) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RendererAnimationPlayer.prototype.onDone = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._listen('done', fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    RendererAnimationPlayer.prototype.onStart = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._listen('start', fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    RendererAnimationPlayer.prototype.onDestroy = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._listen('destroy', fn); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.init = /**
     * @return {?}
     */
    function () { this._command('init'); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.hasStarted = /**
     * @return {?}
     */
    function () { return this._started; };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.play = /**
     * @return {?}
     */
    function () {
        this._command('play');
        this._started = true;
    };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.pause = /**
     * @return {?}
     */
    function () { this._command('pause'); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.restart = /**
     * @return {?}
     */
    function () { this._command('restart'); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.finish = /**
     * @return {?}
     */
    function () { this._command('finish'); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.destroy = /**
     * @return {?}
     */
    function () { this._command('destroy'); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.reset = /**
     * @return {?}
     */
    function () { this._command('reset'); };
    /**
     * @param {?} p
     * @return {?}
     */
    RendererAnimationPlayer.prototype.setPosition = /**
     * @param {?} p
     * @return {?}
     */
    function (p) { this._command('setPosition', p); };
    /**
     * @return {?}
     */
    RendererAnimationPlayer.prototype.getPosition = /**
     * @return {?}
     */
    function () { return 0; };
    return RendererAnimationPlayer;
}());
/**
 * @param {?} renderer
 * @param {?} element
 * @param {?} id
 * @param {?} command
 * @param {?} args
 * @return {?}
 */
function issueAnimationCommand(renderer, element, id, command, args) {
    return renderer.setProperty(element, "@@" + id + ":" + command, args);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ANIMATION_PREFIX = '@';
var DISABLE_ANIMATIONS_FLAG = '@.disabled';
var AnimationRendererFactory = /** @class */ (function () {
    function AnimationRendererFactory(delegate, engine, _zone) {
        this.delegate = delegate;
        this.engine = engine;
        this._zone = _zone;
        this._currentId = 0;
        this._microtaskId = 1;
        this._animationCallbacksBuffer = [];
        this._rendererCache = new Map();
        this._cdRecurDepth = 0;
        engine.onRemovalComplete = function (element, delegate) {
            // Note: if an component element has a leave animation, and the component
            // a host leave animation, the view engine will call `removeChild` for the parent
            // component renderer as well as for the child component renderer.
            // Therefore, we need to check if we already removed the element.
            if (delegate && delegate.parentNode(element)) {
                delegate.removeChild(element.parentNode, element);
            }
        };
    }
    /**
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */
    AnimationRendererFactory.prototype.createRenderer = /**
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */
    function (hostElement, type) {
        var _this = this;
        var /** @type {?} */ EMPTY_NAMESPACE_ID = '';
        // cache the delegates to find out which cached delegate can
        // be used by which cached renderer
        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);
        if (!hostElement || !type || !type.data || !type.data['animation']) {
            var /** @type {?} */ renderer = this._rendererCache.get(delegate);
            if (!renderer) {
                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);
                // only cache this result when the base renderer is used
                this._rendererCache.set(delegate, renderer);
            }
            return renderer;
        }
        var /** @type {?} */ componentId = type.id;
        var /** @type {?} */ namespaceId = type.id + '-' + this._currentId;
        this._currentId++;
        this.engine.register(namespaceId, hostElement);
        var /** @type {?} */ animationTriggers = /** @type {?} */ (type.data['animation']);
        animationTriggers.forEach(function (trigger) {
            return _this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
        });
        return new AnimationRenderer(this, namespaceId, delegate, this.engine);
    };
    /**
     * @return {?}
     */
    AnimationRendererFactory.prototype.begin = /**
     * @return {?}
     */
    function () {
        this._cdRecurDepth++;
        if (this.delegate.begin) {
            this.delegate.begin();
        }
    };
    /**
     * @return {?}
     */
    AnimationRendererFactory.prototype._scheduleCountTask = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Zone.current.scheduleMicroTask('incremenet the animation microtask', function () { return _this._microtaskId++; });
    };
    /* @internal */
    /**
     * @param {?} count
     * @param {?} fn
     * @param {?} data
     * @return {?}
     */
    AnimationRendererFactory.prototype.scheduleListenerCallback = /**
     * @param {?} count
     * @param {?} fn
     * @param {?} data
     * @return {?}
     */
    function (count, fn, data) {
        var _this = this;
        if (count >= 0 && count < this._microtaskId) {
            this._zone.run(function () { return fn(data); });
            return;
        }
        if (this._animationCallbacksBuffer.length == 0) {
            Promise.resolve(null).then(function () {
                _this._zone.run(function () {
                    _this._animationCallbacksBuffer.forEach(function (tuple) {
                        var fn = tuple[0], data = tuple[1];
                        fn(data);
                    });
                    _this._animationCallbacksBuffer = [];
                });
            });
        }
        this._animationCallbacksBuffer.push([fn, data]);
    };
    /**
     * @return {?}
     */
    AnimationRendererFactory.prototype.end = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._cdRecurDepth--;
        // this is to prevent animations from running twice when an inner
        // component does CD when a parent component insted has inserted it
        if (this._cdRecurDepth == 0) {
            this._zone.runOutsideAngular(function () {
                _this._scheduleCountTask();
                _this.engine.flush(_this._microtaskId);
            });
        }
        if (this.delegate.end) {
            this.delegate.end();
        }
    };
    /**
     * @return {?}
     */
    AnimationRendererFactory.prototype.whenRenderingDone = /**
     * @return {?}
     */
    function () { return this.engine.whenRenderingDone(); };
    AnimationRendererFactory.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AnimationRendererFactory.ctorParameters = function () { return [
        { type: _angular_core.RendererFactory2, },
        { type: _angular_animations_browser.ɵAnimationEngine, },
        { type: _angular_core.NgZone, },
    ]; };
    return AnimationRendererFactory;
}());
var BaseAnimationRenderer = /** @class */ (function () {
    function BaseAnimationRenderer(namespaceId, delegate, engine) {
        this.namespaceId = namespaceId;
        this.delegate = delegate;
        this.engine = engine;
        this.destroyNode = this.delegate.destroyNode ? function (n) { return ((delegate.destroyNode))(n); } : null;
    }
    Object.defineProperty(BaseAnimationRenderer.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () { return this.delegate.data; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseAnimationRenderer.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.engine.destroy(this.namespaceId, this.delegate);
        this.delegate.destroy();
    };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    BaseAnimationRenderer.prototype.createElement = /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (name, namespace) {
        return this.delegate.createElement(name, namespace);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseAnimationRenderer.prototype.createComment = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return this.delegate.createComment(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseAnimationRenderer.prototype.createText = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { return this.delegate.createText(value); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    BaseAnimationRenderer.prototype.appendChild = /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    function (parent, newChild) {
        this.delegate.appendChild(parent, newChild);
        this.engine.onInsert(this.namespaceId, newChild, parent, false);
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    BaseAnimationRenderer.prototype.insertBefore = /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    function (parent, newChild, refChild) {
        this.delegate.insertBefore(parent, newChild, refChild);
        this.engine.onInsert(this.namespaceId, newChild, parent, true);
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    BaseAnimationRenderer.prototype.removeChild = /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    function (parent, oldChild) {
        this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
    };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    BaseAnimationRenderer.prototype.selectRootElement = /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    function (selectorOrNode) { return this.delegate.selectRootElement(selectorOrNode); };
    /**
     * @param {?} node
     * @return {?}
     */
    BaseAnimationRenderer.prototype.parentNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return this.delegate.parentNode(node); };
    /**
     * @param {?} node
     * @return {?}
     */
    BaseAnimationRenderer.prototype.nextSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) { return this.delegate.nextSibling(node); };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    BaseAnimationRenderer.prototype.setAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, value, namespace) {
        this.delegate.setAttribute(el, name, value, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    BaseAnimationRenderer.prototype.removeAttribute = /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (el, name, namespace) {
        this.delegate.removeAttribute(el, name, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    BaseAnimationRenderer.prototype.addClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { this.delegate.addClass(el, name); };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    BaseAnimationRenderer.prototype.removeClass = /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    function (el, name) { this.delegate.removeClass(el, name); };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?=} flags
     * @return {?}
     */
    BaseAnimationRenderer.prototype.setStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?=} flags
     * @return {?}
     */
    function (el, style, value, flags) {
        this.delegate.setStyle(el, style, value, flags);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?=} flags
     * @return {?}
     */
    BaseAnimationRenderer.prototype.removeStyle = /**
     * @param {?} el
     * @param {?} style
     * @param {?=} flags
     * @return {?}
     */
    function (el, style, flags) {
        this.delegate.removeStyle(el, style, flags);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BaseAnimationRenderer.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
            this.disableAnimations(el, !!value);
        }
        else {
            this.delegate.setProperty(el, name, value);
        }
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    BaseAnimationRenderer.prototype.setValue = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) { this.delegate.setValue(node, value); };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    BaseAnimationRenderer.prototype.listen = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (target, eventName, callback) {
        return this.delegate.listen(target, eventName, callback);
    };
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    BaseAnimationRenderer.prototype.disableAnimations = /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    function (element, value) {
        this.engine.disableAnimations(element, value);
    };
    return BaseAnimationRenderer;
}());
var AnimationRenderer = /** @class */ (function (_super) {
    __extends(AnimationRenderer, _super);
    function AnimationRenderer(factory, namespaceId, delegate, engine) {
        var _this = _super.call(this, namespaceId, delegate, engine) || this;
        _this.factory = factory;
        _this.namespaceId = namespaceId;
        return _this;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    AnimationRenderer.prototype.setProperty = /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (el, name, value) {
        if (name.charAt(0) == ANIMATION_PREFIX) {
            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
                value = value === undefined ? true : !!value;
                this.disableAnimations(el, /** @type {?} */ (value));
            }
            else {
                this.engine.process(this.namespaceId, el, name.substr(1), value);
            }
        }
        else {
            this.delegate.setProperty(el, name, value);
        }
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    AnimationRenderer.prototype.listen = /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (target, eventName, callback) {
        var _this = this;
        if (eventName.charAt(0) == ANIMATION_PREFIX) {
            var /** @type {?} */ element = resolveElementFromTarget(target);
            var /** @type {?} */ name_1 = eventName.substr(1);
            var /** @type {?} */ phase = '';
            // @listener.phase is for trigger animation callbacks
            // @@listener is for animation builder callbacks
            if (name_1.charAt(0) != ANIMATION_PREFIX) {
                _a = parseTriggerCallbackName(name_1), name_1 = _a[0], phase = _a[1];
            }
            return this.engine.listen(this.namespaceId, element, name_1, phase, function (event) {
                var /** @type {?} */ countId = (/** @type {?} */ (event))['_data'] || -1;
                _this.factory.scheduleListenerCallback(countId, callback, event);
            });
        }
        return this.delegate.listen(target, eventName, callback);
        var _a;
    };
    return AnimationRenderer;
}(BaseAnimationRenderer));
/**
 * @param {?} target
 * @return {?}
 */
function resolveElementFromTarget(target) {
    switch (target) {
        case 'body':
            return document.body;
        case 'document':
            return document;
        case 'window':
            return window;
        default:
            return target;
    }
}
/**
 * @param {?} triggerName
 * @return {?}
 */
function parseTriggerCallbackName(triggerName) {
    var /** @type {?} */ dotIndex = triggerName.indexOf('.');
    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);
    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);
    return [trigger, phase];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var InjectableAnimationEngine = /** @class */ (function (_super) {
    __extends(InjectableAnimationEngine, _super);
    function InjectableAnimationEngine(driver, normalizer) {
        return _super.call(this, driver, normalizer) || this;
    }
    InjectableAnimationEngine.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    InjectableAnimationEngine.ctorParameters = function () { return [
        { type: _angular_animations_browser.AnimationDriver, },
        { type: _angular_animations_browser.ɵAnimationStyleNormalizer, },
    ]; };
    return InjectableAnimationEngine;
}(_angular_animations_browser.ɵAnimationEngine));
/**
 * @return {?}
 */
function instantiateSupportedAnimationDriver() {
    if (_angular_animations_browser.ɵsupportsWebAnimations()) {
        return new _angular_animations_browser.ɵWebAnimationsDriver();
    }
    return new _angular_animations_browser.ɵNoopAnimationDriver();
}
/**
 * @return {?}
 */
function instantiateDefaultStyleNormalizer() {
    return new _angular_animations_browser.ɵWebAnimationsStyleNormalizer();
}
/**
 * @param {?} renderer
 * @param {?} engine
 * @param {?} zone
 * @return {?}
 */
function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
var SHARED_ANIMATION_PROVIDERS = [
    { provide: _angular_animations.AnimationBuilder, useClass: BrowserAnimationBuilder },
    { provide: _angular_animations_browser.ɵAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },
    { provide: _angular_animations_browser.ɵAnimationEngine, useClass: InjectableAnimationEngine }, {
        provide: _angular_core.RendererFactory2,
        useFactory: instantiateRendererFactory,
        deps: [_angular_platformBrowser.ɵDomRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone]
    }
];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */
var BROWSER_ANIMATIONS_PROVIDERS = [
    { provide: _angular_animations_browser.AnimationDriver, useFactory: instantiateSupportedAnimationDriver }
].concat(SHARED_ANIMATION_PROVIDERS);
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */
var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{ provide: _angular_animations_browser.AnimationDriver, useClass: _angular_animations_browser.ɵNoopAnimationDriver }].concat(SHARED_ANIMATION_PROVIDERS);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental Animation support is experimental.
 */
var BrowserAnimationsModule = /** @class */ (function () {
    function BrowserAnimationsModule() {
    }
    BrowserAnimationsModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [_angular_platformBrowser.BrowserModule],
                    providers: BROWSER_ANIMATIONS_PROVIDERS,
                },] },
    ];
    /** @nocollapse */
    BrowserAnimationsModule.ctorParameters = function () { return []; };
    return BrowserAnimationsModule;
}());
/**
 * \@experimental Animation support is experimental.
 */
var NoopAnimationsModule = /** @class */ (function () {
    function NoopAnimationsModule() {
    }
    NoopAnimationsModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [_angular_platformBrowser.BrowserModule],
                    providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
                },] },
    ];
    /** @nocollapse */
    NoopAnimationsModule.ctorParameters = function () { return []; };
    return NoopAnimationsModule;
}());

exports.BrowserAnimationsModule = BrowserAnimationsModule;
exports.NoopAnimationsModule = NoopAnimationsModule;
exports.ɵBrowserAnimationBuilder = BrowserAnimationBuilder;
exports.ɵBrowserAnimationFactory = BrowserAnimationFactory;
exports.ɵAnimationRenderer = AnimationRenderer;
exports.ɵAnimationRendererFactory = AnimationRendererFactory;
exports.ɵa = BaseAnimationRenderer;
exports.ɵf = BROWSER_ANIMATIONS_PROVIDERS;
exports.ɵg = BROWSER_NOOP_ANIMATIONS_PROVIDERS;
exports.ɵb = InjectableAnimationEngine;
exports.ɵd = instantiateDefaultStyleNormalizer;
exports.ɵe = instantiateRendererFactory;
exports.ɵc = instantiateSupportedAnimationDriver;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=platform-browser-animations.umd.js.map


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_reflect_metadata__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_reflect_metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_reflect_metadata__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zone_js__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zone_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_zone_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_first__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_first___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_first__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__angular_common__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_core__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_platform_server__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_platform_server___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__angular_platform_server__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aspnet_prerendering__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aspnet_prerendering___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_aspnet_prerendering__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__app_app_server_module__ = __webpack_require__(48);








__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__angular_core__["enableProdMode"])();
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_aspnet_prerendering__["createServerRenderer"])(function (params) {
    var providers = [
        { provide: __WEBPACK_IMPORTED_MODULE_5__angular_platform_server__["INITIAL_CONFIG"], useValue: { document: '<app></app>', url: params.url } },
        { provide: __WEBPACK_IMPORTED_MODULE_3__angular_common__["APP_BASE_HREF"], useValue: params.baseUrl },
        { provide: 'BASE_URL', useValue: params.origin + params.baseUrl },
    ];
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__angular_platform_server__["platformDynamicServer"])(providers).bootstrapModule(__WEBPACK_IMPORTED_MODULE_7__app_app_server_module__["a" /* AppModule */]).then(function (moduleRef) {
        var appRef = moduleRef.injector.get(__WEBPACK_IMPORTED_MODULE_4__angular_core__["ApplicationRef"]);
        var state = moduleRef.injector.get(__WEBPACK_IMPORTED_MODULE_5__angular_platform_server__["PlatformState"]);
        var zone = moduleRef.injector.get(__WEBPACK_IMPORTED_MODULE_4__angular_core__["NgZone"]);
        return new Promise(function (resolve, reject) {
            zone.onError.subscribe(function (errorInfo) { return reject(errorInfo); });
            appRef.isStable.first(function (isStable) { return isStable; }).subscribe(function () {
                // Because 'onStable' fires before 'onError', we have to delay slightly before
                // completing the request in case there's an error to report
                setImmediate(function () {
                    resolve({
                        html: state.renderToString()
                    });
                    moduleRef.destroy();
                });
            });
        });
    });
}));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = CustomEvent;

var Event = __webpack_require__(4);

function CustomEvent(type, dictionary) {
  // Just use the superclass constructor to initialize
  Event.call(this, type, dictionary);
}
CustomEvent.prototype = Object.create(Event.prototype, {
  constructor: { value: CustomEvent }
});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = FilteredElementList;

var Node = __webpack_require__(2);

//
// This file defines node list implementation that lazily traverses
// the document tree (or a subtree rooted at any element) and includes
// only those elements for which a specified filter function returns true.
// It is used to implement the
// {Document,Element}.getElementsBy{TagName,ClassName}{,NS} methods.
//

function FilteredElementList(root, filter) {
  this.root = root;
  this.filter = filter;
  this.lastModTime = root.lastModTime;
  this.done = false;
  this.cache = [];
  this.traverse();
}

FilteredElementList.prototype = {
  get length() {
    this.checkcache();
    if (!this.done) this.traverse();
    return this.cache.length;
  },

  item: function(n) {
    this.checkcache();
    if (!this.done && n >= this.cache.length) this.traverse(n);
    return this.cache[n];
  },

  checkcache: function() {
    if (this.lastModTime !== this.root.lastModTime) {
      // subtree has changed, so invalidate cache
      for (var i = this.cache.length-1; i>=0; i--) {
        this[i] = undefined;
      }
      this.cache.length = 0;
      this.done = false;
      this.lastModTime = this.root.lastModTime;
    }
  },

  // If n is specified, then traverse the tree until we've found the nth
  // item (or until we've found all items).  If n is not specified,
  // traverse until we've found all items.
  traverse: function(n) {
    // increment n so we can compare to length, and so it is never falsy
    if (n !== undefined) n++;

    var elt;
    while ((elt = this.next()) !== null) {
      this[this.cache.length] = elt; //XXX Use proxy instead
      this.cache.push(elt);
      if (n && this.cache.length === n) return;
    }

    // no next element, so we've found everything
    this.done = true;
  },

  // Return the next element under root that matches filter
  next: function() {
    var start = (this.cache.length === 0) ? this.root // Start at the root or at
      : this.cache[this.cache.length-1]; // the last element we found

    var elt;
    if (start.nodeType === Node.DOCUMENT_NODE)
      elt = start.documentElement;
    else
      elt = start.nextElement(this.root);

    while(elt) {
      if (this.filter(elt)) {
        return elt;
      }

      elt = elt.nextElement(this.root);
    }
    return null;
  }
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var URL = __webpack_require__(17);
var URLUtils = __webpack_require__(35);

module.exports = Location;

function Location(window, href) {
  this._window = window;
  this._href = href;
}

Location.prototype = Object.create(URLUtils.prototype, {
  constructor: { value: Location },

  // Special behavior when href is set
  href: {
    get: function() { return this._href; },
    set: function(v) { this.assign(v); }
  },

  assign: { value: function(url) {
    // Resolve the new url against the current one
    // XXX:
    // This is not actually correct. It should be resolved against
    // the URL of the document of the script. For now, though, I only
    // support a single window and there is only one base url.
    // So this is good enough for now.
    var current = new URL(this._href);
    var newurl = current.resolve(url);

    // Save the new url
    this._href = newurl;

    // Start loading the new document!
    // XXX
    // This is just something hacked together.
    // The real algorithm is: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#navigate
  }},

  replace: { value: function(url) {
    // XXX
    // Since we aren't tracking history yet, replace is the same as assign
    this.assign(url);
  }},

  reload: { value: function() {
    // XXX:
    // Actually, the spec is a lot more complicated than this
    this.assign(this.href);
  }},

  toString: { value: function() {
    return this.href;
  }}

});


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = {
  VALUE: 1, // The value of a Text, Comment or PI node changed
  ATTR: 2, // A new attribute was added or an attribute value and/or prefix changed
  REMOVE_ATTR: 3, // An attribute was removed
  REMOVE: 4, // A node was removed
  MOVE: 5, // A node was moved
  INSERT: 6 // A node (or a subtree of nodes) was inserted
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://html.spec.whatwg.org/multipage/webappapis.html#navigatorid
var NavigatorID = Object.create(null, {
  appCodeName: { value: "Mozilla" },
  appName: { value: "Netscape" },
  appVersion: { value: "4.0" },
  platform: { value: "" },
  product: { value: "Gecko" },
  productSub: { value: "20100101" },
  userAgent: { value: "" },
  vendor: { value: "" },
  vendorSub: { value: "" },
  taintEnabled: { value: function() { return false; } }
});

module.exports = NavigatorID;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = NodeIterator;

var NodeFilter = __webpack_require__(8);
var NodeTraversal = __webpack_require__(30);

/* Private methods and helpers */

/**
 * @based on WebKit's NodeIterator::moveToNext and NodeIterator::moveToPrevious
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeIterator.cpp?rev=186279#L51
 */
function move(node, stayWithin, directionIsNext) {
  if (directionIsNext) {
    return NodeTraversal.next(node, stayWithin);
  } else {
    if (node === stayWithin) {
      return null;
    }
    return NodeTraversal.previous(node, null);
  }
}

/**
 * @spec http://www.w3.org/TR/dom/#concept-nodeiterator-traverse
 * @method
 * @access private
 * @param {NodeIterator} ni
 * @param {string} direction One of 'next' or 'previous'.
 * @return {Node|null}
 */
function traverse(ni, directionIsNext) {
  var node, beforeNode;
  node = ni.referenceNode;
  beforeNode = ni.pointerBeforeReferenceNode;
  while (true) {
    if (beforeNode === directionIsNext) {
      beforeNode = !beforeNode;
    } else {
      node = move(node, ni.root, directionIsNext);
      if (node === null) {
        return null;
      }
    }
    var result = ni.filter.acceptNode(node);
    if (result === NodeFilter.FILTER_ACCEPT) {
      break;
    }
  }
  ni.referenceNode = node;
  ni.pointerBeforeReferenceNode = beforeNode;
  return node;
}

/* Public API */

/**
 * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#nodeiterator
 * Latest version: http://www.w3.org/TR/dom/#nodeiterator
 *
 * @constructor
 * @param {Node} root
 * @param {number} whatToShow [optional]
 * @param {Function|NodeFilter} filter [optional]
 * @throws Error
 */
function NodeIterator(root, whatToShow, filter) {
  var ni = this, active = false;

  if (!root || !root.nodeType) {
    throw new Error('DOMException: NOT_SUPPORTED_ERR');
  }

  ni.root = ni.referenceNode = root;
  ni.pointerBeforeReferenceNode = true;
  ni.whatToShow = Number(whatToShow) || 0;

  if (typeof filter !== 'function') {
    filter = null;
  }

  ni.filter = Object.create(NodeFilter.prototype);

  /**
   * @method
   * @param {Node} node
   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,
   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.
   */
  ni.filter.acceptNode = function (node) {
    /* jshint bitwise: false */
    var result;
    if (active) {
      throw new Error('DOMException: INVALID_STATE_ERR');
    }

    // Maps nodeType to whatToShow
    if (!(((1 << (node.nodeType - 1)) & ni.whatToShow))) {
      return NodeFilter.FILTER_SKIP;
    }

    if (filter === null) {
      return NodeFilter.FILTER_ACCEPT;
    }

    active = true;
    result = filter(node);
    active = false;

    return result;
  };
}

NodeIterator.prototype = {
  constructor: NodeIterator,

  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-nextnode
   * @method
   * @return {Node|null}
   */
  nextNode: function () {
    return traverse(this, true);
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-previousnode
   * @method
   * @return {Node|null}
   */
  previousNode: function () {
    return traverse(this, false);
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-detach
   * @method
   * @return void
   */
  detach: function() {
    /* "The detach() method must do nothing.
     * Its functionality (disabling a NodeIterator object) was removed,
     * but the method itself is preserved for compatibility.
     */
  }
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = TreeWalker;

var NodeFilter = __webpack_require__(8);
var NodeTraversal = __webpack_require__(30);

var mapChild = {
  first: 'firstChild',
  last: 'lastChild',
  next: 'firstChild',
  previous: 'lastChild'
};

var mapSibling = {
  first: 'nextSibling',
  last: 'previousSibling',
  next: 'nextSibling',
  previous: 'previousSibling'
};

/* Private methods and helpers */

/**
 * @spec http://www.w3.org/TR/dom/#concept-traverse-children
 * @method
 * @access private
 * @param {TreeWalker} tw
 * @param {string} type One of 'first' or 'last'.
 * @return {Node|null}
 */
function traverseChildren(tw, type) {
  var child, node, parent, result, sibling;
  node = tw.currentNode[mapChild[type]];
  while (node !== null) {
    result = tw.filter.acceptNode(node);
    if (result === NodeFilter.FILTER_ACCEPT) {
      tw.currentNode = node;
      return node;
    }
    if (result === NodeFilter.FILTER_SKIP) {
      child = node[mapChild[type]];
      if (child !== null) {
        node = child;
        continue;
      }
    }
    while (node !== null) {
      sibling = node[mapSibling[type]];
      if (sibling !== null) {
        node = sibling;
        break;
      }
      parent = node.parentNode;
      if (parent === null || parent === tw.root || parent === tw.currentNode) {
        return null;
      }
      else {
        node = parent;
      }
    }
  }
  return null;
}

/**
 * @spec http://www.w3.org/TR/dom/#concept-traverse-siblings
 * @method
 * @access private
 * @param {TreeWalker} tw
 * @param {TreeWalker} type One of 'next' or 'previous'.
 * @return {Node|nul}
 */
function traverseSiblings(tw, type) {
  var node, result, sibling;
  node = tw.currentNode;
  if (node === tw.root) {
    return null;
  }
  while (true) {
    sibling = node[mapSibling[type]];
    while (sibling !== null) {
      node = sibling;
      result = tw.filter.acceptNode(node);
      if (result === NodeFilter.FILTER_ACCEPT) {
        tw.currentNode = node;
        return node;
      }
      sibling = node[mapChild[type]];
      if (result === NodeFilter.FILTER_REJECT || sibling === null) {
        sibling = node[mapSibling[type]];
      }
    }
    node = node.parentNode;
    if (node === null || node === tw.root) {
      return null;
    }
    if (tw.filter.acceptNode(node) === NodeFilter.FILTER_ACCEPT) {
      return null;
    }
  }
}


/* Public API */

/**
 * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#interface-treewalker
 * Latest version: http://www.w3.org/TR/dom/#interface-treewalker
 *
 * @constructor
 * @param {Node} root
 * @param {number} whatToShow [optional]
 * @param {Function|NodeFilter} filter [optional]
 * @throws Error
 */
function TreeWalker(root, whatToShow, filter) {
  var tw = this, active = false;

  if (!root || !root.nodeType) {
    throw new Error('DOMException: NOT_SUPPORTED_ERR');
  }

  tw.root = root;
  tw.whatToShow = Number(whatToShow) || 0;

  tw.currentNode = root;

  if (typeof filter !== 'function') {
    filter = null;
  }

  tw.filter = Object.create(NodeFilter.prototype);

  /**
   * @method
   * @param {Node} node
   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,
   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.
   */
  tw.filter.acceptNode = function (node) {
    /* jshint bitwise: false */
    var result;
    if (active) {
      throw new Error('DOMException: INVALID_STATE_ERR');
    }

    // Maps nodeType to whatToShow
    if (!(((1 << (node.nodeType - 1)) & tw.whatToShow))) {
      return NodeFilter.FILTER_SKIP;
    }

    if (filter === null) {
      return NodeFilter.FILTER_ACCEPT;
    }

    active = true;
    result = filter(node);
    active = false;

    return result;
  };
}

TreeWalker.prototype = {

  constructor: TreeWalker,

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-parentnode
   * @method
   * @return {Node|null}
   */
  parentNode: function () {
    var node = this.currentNode;
    while (node !== null && node !== this.root) {
      node = node.parentNode;
      if (node !== null && this.filter.acceptNode(node) === NodeFilter.FILTER_ACCEPT) {
        this.currentNode = node;
        return node;
      }
    }
    return null;
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-firstchild
   * @method
   * @return {Node|null}
   */
  firstChild: function () {
    return traverseChildren(this, 'first');
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-lastchild
   * @method
   * @return {Node|null}
   */
  lastChild: function () {
    return traverseChildren(this, 'last');
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previoussibling
   * @method
   * @return {Node|null}
   */
  previousSibling: function () {
    return traverseSiblings(this, 'previous');
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextsibling
   * @method
   * @return {Node|null}
   */
  nextSibling: function () {
    return traverseSiblings(this, 'next');
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previousnode
   * @method
   * @return {Node|null}
   */
  previousNode: function () {
    var node, result, sibling;
    node = this.currentNode;
    while (node !== this.root) {
      sibling = node.previousSibling;
      while (sibling !== null) {
        node = sibling;
        result = this.filter.acceptNode(node);
        while (result !== NodeFilter.FILTER_REJECT && node.lastChild !== null) {
          node = node.lastChild;
          result = this.filter.acceptNode(node);
        }
        if (result === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = node;
          return node;
        }
        sibling = node.previousSibling;
      }
      if (node === this.root || node.parentNode === null) {
        return null;
      }
      node = node.parentNode;
      if (this.filter.acceptNode(node) === NodeFilter.FILTER_ACCEPT) {
        this.currentNode = node;
        return node;
      }
    }
    return null;
  },

  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextnode
   * @based on WebKit's TreeWalker::nextNode
   * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=179143#L252
   * @method
   * @return {Node|null}
   */
  nextNode: function () {
    var node, result, following;
    node = this.currentNode;
    result = NodeFilter.FILTER_ACCEPT;

    while (true) {
      while (result !== NodeFilter.FILTER_REJECT && node.firstChild !== null) {
        node = node.firstChild;
        result = this.filter.acceptNode(node);
        if (result === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = node;
          return node;
        }
      }
      following = NodeTraversal.nextSkippingChildren(node, this.root);
      if (following !== null) {
        node = following;
      }
      else {
        return null;
      }
      result = this.filter.acceptNode(node);
      if (result === NodeFilter.FILTER_ACCEPT) {
        this.currentNode = node;
        return node;
      }
    }
  }
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://html.spec.whatwg.org/multipage/webappapis.html#windowtimers
var WindowTimers = {
  setTimeout: setTimeout,
  clearTimeout: clearTimeout,
  setInterval: setInterval,
  clearInterval: clearInterval
};

module.exports = WindowTimers;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* jshint node:true, latedef:false */
 // jshint ignore:line
/*!
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
/* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */
var parserlib = Object.create(null);
(function(){

/**
 * A generic base to inherit from for any object
 * that needs event handling.
 * @class EventTarget
 * @constructor
 */
function EventTarget(){

    /**
     * The array of listeners for various events.
     * @type Object
     * @property _listeners
     * @private
     */
    this._listeners = Object.create(null);
}

EventTarget.prototype = {

    //restore constructor
    constructor: EventTarget,

    /**
     * Adds a listener for a given event type.
     * @param {String} type The type of event to add a listener for.
     * @param {Function} listener The function to call when the event occurs.
     * @return {void}
     * @method addListener
     */
    addListener: function(type, listener){
        if (!this._listeners[type]){
            this._listeners[type] = [];
        }

        this._listeners[type].push(listener);
    },

    /**
     * Fires an event based on the passed-in object.
     * @param {Object|String} event An object with at least a 'type' attribute
     *      or a string indicating the event name.
     * @return {void}
     * @method fire
     */
    fire: function(event){
        if (typeof event === "string"){
            event = { type: event };
        }
        if (typeof event.target !== "undefined"){
            event.target = this;
        }

        if (typeof event.type === "undefined"){
            throw new Error("Event object missing 'type' property.");
        }

        if (this._listeners[event.type]){

            //create a copy of the array and use that so listeners can't chane
            var listeners = this._listeners[event.type].concat();
            for (var i=0, len=listeners.length; i < len; i++){
                listeners[i].call(this, event);
            }
        }
    },

    /**
     * Removes a listener for a given event type.
     * @param {String} type The type of event to remove a listener from.
     * @param {Function} listener The function to remove from the event.
     * @return {void}
     * @method removeListener
     */
    removeListener: function(type, listener){
        if (this._listeners[type]){
            var listeners = this._listeners[type];
            for (var i=0, len=listeners.length; i < len; i++){
                if (listeners[i] === listener){
                    listeners.splice(i, 1);
                    break;
                }
            }


        }
    }
};
/**
 * Convenient way to read through strings.
 * @namespace parserlib.util
 * @class StringReader
 * @constructor
 * @param {String} text The text to read.
 */
function StringReader(text){

    /**
     * The input text with line endings normalized.
     * @property _input
     * @type String
     * @private
     */
    this._input = text.replace(/(\r|\n){1,2}/g, "\n");


    /**
     * The row for the character to be read next.
     * @property _line
     * @type int
     * @private
     */
    this._line = 1;


    /**
     * The column for the character to be read next.
     * @property _col
     * @type int
     * @private
     */
    this._col = 1;

    /**
     * The index of the character in the input to be read next.
     * @property _cursor
     * @type int
     * @private
     */
    this._cursor = 0;
}

StringReader.prototype = {

    //restore constructor
    constructor: StringReader,

    //-------------------------------------------------------------------------
    // Position info
    //-------------------------------------------------------------------------

    /**
     * Returns the column of the character to be read next.
     * @return {int} The column of the character to be read next.
     * @method getCol
     */
    getCol: function(){
        return this._col;
    },

    /**
     * Returns the row of the character to be read next.
     * @return {int} The row of the character to be read next.
     * @method getLine
     */
    getLine: function(){
        return this._line ;
    },

    /**
     * Determines if you're at the end of the input.
     * @return {Boolean} True if there's no more input, false otherwise.
     * @method eof
     */
    eof: function(){
        return (this._cursor === this._input.length);
    },

    //-------------------------------------------------------------------------
    // Basic reading
    //-------------------------------------------------------------------------

    /**
     * Reads the next character without advancing the cursor.
     * @param {int} count How many characters to look ahead (default is 1).
     * @return {String} The next character or null if there is no next character.
     * @method peek
     */
    peek: function(count){
        var c = null;
        count = (typeof count === "undefined" ? 1 : count);

        //if we're not at the end of the input...
        if (this._cursor < this._input.length){

            //get character and increment cursor and column
            c = this._input.charAt(this._cursor + count - 1);
        }

        return c;
    },

    /**
     * Reads the next character from the input and adjusts the row and column
     * accordingly.
     * @return {String} The next character or null if there is no next character.
     * @method read
     */
    read: function(){
        var c = null;

        //if we're not at the end of the input...
        if (this._cursor < this._input.length){

            //if the last character was a newline, increment row count
            //and reset column count
            if (this._input.charAt(this._cursor) === "\n"){
                this._line++;
                this._col=1;
            } else {
                this._col++;
            }

            //get character and increment cursor and column
            c = this._input.charAt(this._cursor++);
        }

        return c;
    },

    //-------------------------------------------------------------------------
    // Misc
    //-------------------------------------------------------------------------

    /**
     * Saves the current location so it can be returned to later.
     * @method mark
     * @return {void}
     */
    mark: function(){
        this._bookmark = {
            cursor: this._cursor,
            line:   this._line,
            col:    this._col
        };
    },

    reset: function(){
        if (this._bookmark){
            this._cursor = this._bookmark.cursor;
            this._line = this._bookmark.line;
            this._col = this._bookmark.col;
            delete this._bookmark;
        }
    },

    //-------------------------------------------------------------------------
    // Advanced reading
    //-------------------------------------------------------------------------

    /**
     * Reads up to and including the given string. Throws an error if that
     * string is not found.
     * @param {String} pattern The string to read.
     * @return {String} The string when it is found.
     * @throws Error when the string pattern is not found.
     * @method readTo
     */
    readTo: function(pattern){

        var buffer = "",
            c;

        /*
         * First, buffer must be the same length as the pattern.
         * Then, buffer must end with the pattern or else reach the
         * end of the input.
         */
        while (buffer.length < pattern.length || buffer.lastIndexOf(pattern) !== buffer.length - pattern.length){
            c = this.read();
            if (c){
                buffer += c;
            } else {
                throw new Error("Expected \"" + pattern + "\" at line " + this._line  + ", col " + this._col + ".");
            }
        }

        return buffer;

    },

    /**
     * Reads characters while each character causes the given
     * filter function to return true. The function is passed
     * in each character and either returns true to continue
     * reading or false to stop.
     * @param {Function} filter The function to read on each character.
     * @return {String} The string made up of all characters that passed the
     *      filter check.
     * @method readWhile
     */
    readWhile: function(filter){

        var buffer = "",
            c = this.read();

        while(c !== null && filter(c)){
            buffer += c;
            c = this.read();
        }

        return buffer;

    },

    /**
     * Reads characters that match either text or a regular expression and
     * returns those characters. If a match is found, the row and column
     * are adjusted; if no match is found, the reader's state is unchanged.
     * reading or false to stop.
     * @param {String|RegExp} matchter If a string, then the literal string
     *      value is searched for. If a regular expression, then any string
     *      matching the pattern is search for.
     * @return {String} The string made up of all characters that matched or
     *      null if there was no match.
     * @method readMatch
     */
    readMatch: function(matcher){

        var source = this._input.substring(this._cursor),
            value = null;

        //if it's a string, just do a straight match
        if (typeof matcher === "string"){
            if (source.indexOf(matcher) === 0){
                value = this.readCount(matcher.length);
            }
        } else if (matcher instanceof RegExp){
            if (matcher.test(source)){
                value = this.readCount(RegExp.lastMatch.length);
            }
        }

        return value;
    },


    /**
     * Reads a given number of characters. If the end of the input is reached,
     * it reads only the remaining characters and does not throw an error.
     * @param {int} count The number of characters to read.
     * @return {String} The string made up the read characters.
     * @method readCount
     */
    readCount: function(count){
        var buffer = "";

        while(count--){
            buffer += this.read();
        }

        return buffer;
    }

};
/**
 * Type to use when a syntax error occurs.
 * @class SyntaxError
 * @namespace parserlib.util
 * @constructor
 * @param {String} message The error message.
 * @param {int} line The line at which the error occurred.
 * @param {int} col The column at which the error occurred.
 */
function SyntaxError(message, line, col){
    Error.call(this);
    this.name = this.constructor.name;

    /**
     * The column at which the error occurred.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line at which the error occurred.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.message = message;

}

//inherit from Error
SyntaxError.prototype = Object.create(Error.prototype); // jshint ignore:line
SyntaxError.prototype.constructor = SyntaxError; // jshint ignore:line
/**
 * Base type to represent a single syntactic unit.
 * @class SyntaxUnit
 * @namespace parserlib.util
 * @constructor
 * @param {String} text The text of the unit.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function SyntaxUnit(text, line, col, type){


    /**
     * The column of text on which the unit resides.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line of text on which the unit resides.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.text = text;

    /**
     * The type of syntax unit.
     * @type int
     * @property type
     */
    this.type = type;
}

/**
 * Create a new syntax unit based solely on the given token.
 * Convenience method for creating a new syntax unit when
 * it represents a single token instead of multiple.
 * @param {Object} token The token object to represent.
 * @return {parserlib.util.SyntaxUnit} The object representing the token.
 * @static
 * @method fromToken
 */
SyntaxUnit.fromToken = function(token){
    return new SyntaxUnit(token.value, token.startLine, token.startCol);
};

SyntaxUnit.prototype = {

    //restore constructor
    constructor: SyntaxUnit,

    /**
     * Returns the text representation of the unit.
     * @return {String} The text representation of the unit.
     * @method valueOf
     */
    valueOf: function(){
        return this.toString();
    },

    /**
     * Returns the text representation of the unit.
     * @return {String} The text representation of the unit.
     * @method toString
     */
    toString: function(){
        return this.text;
    }

};

/**
 * Generic TokenStream providing base functionality.
 * @class TokenStreamBase
 * @namespace parserlib.util
 * @constructor
 * @param {String|StringReader} input The text to tokenize or a reader from
 *      which to read the input.
 */
function TokenStreamBase(input, tokenData){

    /**
     * The string reader for easy access to the text.
     * @type StringReader
     * @property _reader
     * @private
     */
    this._reader = input ? new StringReader(input.toString()) : null;

    /**
     * Token object for the last consumed token.
     * @type Token
     * @property _token
     * @private
     */
    this._token = null;

    /**
     * The array of token information.
     * @type Array
     * @property _tokenData
     * @private
     */
    this._tokenData = tokenData;

    /**
     * Lookahead token buffer.
     * @type Array
     * @property _lt
     * @private
     */
    this._lt = [];

    /**
     * Lookahead token buffer index.
     * @type int
     * @property _ltIndex
     * @private
     */
    this._ltIndex = 0;

    this._ltIndexCache = [];
}

/**
 * Accepts an array of token information and outputs
 * an array of token data containing key-value mappings
 * and matching functions that the TokenStream needs.
 * @param {Array} tokens An array of token descriptors.
 * @return {Array} An array of processed token data.
 * @method createTokenData
 * @static
 */
TokenStreamBase.createTokenData = function(tokens){

    var nameMap     = [],
        typeMap     = Object.create(null),
        tokenData     = tokens.concat([]),
        i            = 0,
        len            = tokenData.length+1;

    tokenData.UNKNOWN = -1;
    tokenData.unshift({name:"EOF"});

    for (; i < len; i++){
        nameMap.push(tokenData[i].name);
        tokenData[tokenData[i].name] = i;
        if (tokenData[i].text){
            typeMap[tokenData[i].text] = i;
        }
    }

    tokenData.name = function(tt){
        return nameMap[tt];
    };

    tokenData.type = function(c){
        return typeMap[c];
    };

    return tokenData;
};

TokenStreamBase.prototype = {

    //restore constructor
    constructor: TokenStreamBase,

    //-------------------------------------------------------------------------
    // Matching methods
    //-------------------------------------------------------------------------

    /**
     * Determines if the next token matches the given token type.
     * If so, that token is consumed; if not, the token is placed
     * back onto the token stream. You can pass in any number of
     * token types and this will return true if any of the token
     * types is found.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token might be. If an array is passed,
     *      it's assumed that the token can be any of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {Boolean} True if the token type matches, false if not.
     * @method match
     */
    match: function(tokenTypes, channel){

        //always convert to an array, makes things easier
        if (!(tokenTypes instanceof Array)){
            tokenTypes = [tokenTypes];
        }

        var tt  = this.get(channel),
            i   = 0,
            len = tokenTypes.length;

        while(i < len){
            if (tt === tokenTypes[i++]){
                return true;
            }
        }

        //no match found, put the token back
        this.unget();
        return false;
    },

    /**
     * Determines if the next token matches the given token type.
     * If so, that token is consumed; if not, an error is thrown.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token should be. If an array is passed,
     *      it's assumed that the token must be one of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {void}
     * @method mustMatch
     */
    mustMatch: function(tokenTypes, channel){

        var token;

        //always convert to an array, makes things easier
        if (!(tokenTypes instanceof Array)){
            tokenTypes = [tokenTypes];
        }

        if (!this.match.apply(this, arguments)){
            token = this.LT(1);
            throw new SyntaxError("Expected " + this._tokenData[tokenTypes[0]].name +
                " at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
        }
    },

    //-------------------------------------------------------------------------
    // Consuming methods
    //-------------------------------------------------------------------------

    /**
     * Keeps reading from the token stream until either one of the specified
     * token types is found or until the end of the input is reached.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token should be. If an array is passed,
     *      it's assumed that the token must be one of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {void}
     * @method advance
     */
    advance: function(tokenTypes, channel){

        while(this.LA(0) !== 0 && !this.match(tokenTypes, channel)){
            this.get();
        }

        return this.LA(0);
    },

    /**
     * Consumes the next token from the token stream.
     * @return {int} The token type of the token that was just consumed.
     * @method get
     */
    get: function(channel){

        var tokenInfo   = this._tokenData,
            i           =0,
            token,
            info;

        //check the lookahead buffer first
        if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length){

            i++;
            this._token = this._lt[this._ltIndex++];
            info = tokenInfo[this._token.type];

            //obey channels logic
            while((info.channel !== undefined && channel !== info.channel) &&
                    this._ltIndex < this._lt.length){
                this._token = this._lt[this._ltIndex++];
                info = tokenInfo[this._token.type];
                i++;
            }

            //here be dragons
            if ((info.channel === undefined || channel === info.channel) &&
                    this._ltIndex <= this._lt.length){
                this._ltIndexCache.push(i);
                return this._token.type;
            }
        }

        //call token retriever method
        token = this._getToken();

        //if it should be hidden, don't save a token
        if (token.type > -1 && !tokenInfo[token.type].hide){

            //apply token channel
            token.channel = tokenInfo[token.type].channel;

            //save for later
            this._token = token;
            this._lt.push(token);

            //save space that will be moved (must be done before array is truncated)
            this._ltIndexCache.push(this._lt.length - this._ltIndex + i);

            //keep the buffer under 5 items
            if (this._lt.length > 5){
                this._lt.shift();
            }

            //also keep the shift buffer under 5 items
            if (this._ltIndexCache.length > 5){
                this._ltIndexCache.shift();
            }

            //update lookahead index
            this._ltIndex = this._lt.length;
        }

        /*
         * Skip to the next token if:
         * 1. The token type is marked as hidden.
         * 2. The token type has a channel specified and it isn't the current channel.
         */
        info = tokenInfo[token.type];
        if (info &&
                (info.hide ||
                (info.channel !== undefined && channel !== info.channel))){
            return this.get(channel);
        } else {
            //return just the type
            return token.type;
        }
    },

    /**
     * Looks ahead a certain number of tokens and returns the token type at
     * that position. This will throw an error if you lookahead past the
     * end of input, past the size of the lookahead buffer, or back past
     * the first token in the lookahead buffer.
     * @param {int} The index of the token type to retrieve. 0 for the
     *      current token, 1 for the next, -1 for the previous, etc.
     * @return {int} The token type of the token in the given position.
     * @method LA
     */
    LA: function(index){
        var total = index,
            tt;
        if (index > 0){
            //TODO: Store 5 somewhere
            if (index > 5){
                throw new Error("Too much lookahead.");
            }

            //get all those tokens
            while(total){
                tt = this.get();
                total--;
            }

            //unget all those tokens
            while(total < index){
                this.unget();
                total++;
            }
        } else if (index < 0){

            if(this._lt[this._ltIndex+index]){
                tt = this._lt[this._ltIndex+index].type;
            } else {
                throw new Error("Too much lookbehind.");
            }

        } else {
            tt = this._token.type;
        }

        return tt;

    },

    /**
     * Looks ahead a certain number of tokens and returns the token at
     * that position. This will throw an error if you lookahead past the
     * end of input, past the size of the lookahead buffer, or back past
     * the first token in the lookahead buffer.
     * @param {int} The index of the token type to retrieve. 0 for the
     *      current token, 1 for the next, -1 for the previous, etc.
     * @return {Object} The token of the token in the given position.
     * @method LA
     */
    LT: function(index){

        //lookahead first to prime the token buffer
        this.LA(index);

        //now find the token, subtract one because _ltIndex is already at the next index
        return this._lt[this._ltIndex+index-1];
    },

    /**
     * Returns the token type for the next token in the stream without
     * consuming it.
     * @return {int} The token type of the next token in the stream.
     * @method peek
     */
    peek: function(){
        return this.LA(1);
    },

    /**
     * Returns the actual token object for the last consumed token.
     * @return {Token} The token object for the last consumed token.
     * @method token
     */
    token: function(){
        return this._token;
    },

    /**
     * Returns the name of the token for the given token type.
     * @param {int} tokenType The type of token to get the name of.
     * @return {String} The name of the token or "UNKNOWN_TOKEN" for any
     *      invalid token type.
     * @method tokenName
     */
    tokenName: function(tokenType){
        if (tokenType < 0 || tokenType > this._tokenData.length){
            return "UNKNOWN_TOKEN";
        } else {
            return this._tokenData[tokenType].name;
        }
    },

    /**
     * Returns the token type value for the given token name.
     * @param {String} tokenName The name of the token whose value should be returned.
     * @return {int} The token type value for the given token name or -1
     *      for an unknown token.
     * @method tokenName
     */
    tokenType: function(tokenName){
        return this._tokenData[tokenName] || -1;
    },

    /**
     * Returns the last consumed token to the token stream.
     * @method unget
     */
    unget: function(){
        //if (this._ltIndex > -1){
        if (this._ltIndexCache.length){
            this._ltIndex -= this._ltIndexCache.pop();//--;
            this._token = this._lt[this._ltIndex - 1];
        } else {
            throw new Error("Too much lookahead.");
        }
    }

};


parserlib.util = {
__proto__   : null,
StringReader: StringReader,
SyntaxError : SyntaxError,
SyntaxUnit  : SyntaxUnit,
EventTarget : EventTarget,
TokenStreamBase : TokenStreamBase
};
})();
/*
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
/* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */
(function(){
var EventTarget = parserlib.util.EventTarget,
TokenStreamBase = parserlib.util.TokenStreamBase,
StringReader = parserlib.util.StringReader, // jshint ignore:line
SyntaxError = parserlib.util.SyntaxError,
SyntaxUnit  = parserlib.util.SyntaxUnit;

var Colors = {
    __proto__       :null,
    aliceblue       :"#f0f8ff",
    antiquewhite    :"#faebd7",
    aqua            :"#00ffff",
    aquamarine      :"#7fffd4",
    azure           :"#f0ffff",
    beige           :"#f5f5dc",
    bisque          :"#ffe4c4",
    black           :"#000000",
    blanchedalmond  :"#ffebcd",
    blue            :"#0000ff",
    blueviolet      :"#8a2be2",
    brown           :"#a52a2a",
    burlywood       :"#deb887",
    cadetblue       :"#5f9ea0",
    chartreuse      :"#7fff00",
    chocolate       :"#d2691e",
    coral           :"#ff7f50",
    cornflowerblue  :"#6495ed",
    cornsilk        :"#fff8dc",
    crimson         :"#dc143c",
    cyan            :"#00ffff",
    darkblue        :"#00008b",
    darkcyan        :"#008b8b",
    darkgoldenrod   :"#b8860b",
    darkgray        :"#a9a9a9",
    darkgrey        :"#a9a9a9",
    darkgreen       :"#006400",
    darkkhaki       :"#bdb76b",
    darkmagenta     :"#8b008b",
    darkolivegreen  :"#556b2f",
    darkorange      :"#ff8c00",
    darkorchid      :"#9932cc",
    darkred         :"#8b0000",
    darksalmon      :"#e9967a",
    darkseagreen    :"#8fbc8f",
    darkslateblue   :"#483d8b",
    darkslategray   :"#2f4f4f",
    darkslategrey   :"#2f4f4f",
    darkturquoise   :"#00ced1",
    darkviolet      :"#9400d3",
    deeppink        :"#ff1493",
    deepskyblue     :"#00bfff",
    dimgray         :"#696969",
    dimgrey         :"#696969",
    dodgerblue      :"#1e90ff",
    firebrick       :"#b22222",
    floralwhite     :"#fffaf0",
    forestgreen     :"#228b22",
    fuchsia         :"#ff00ff",
    gainsboro       :"#dcdcdc",
    ghostwhite      :"#f8f8ff",
    gold            :"#ffd700",
    goldenrod       :"#daa520",
    gray            :"#808080",
    grey            :"#808080",
    green           :"#008000",
    greenyellow     :"#adff2f",
    honeydew        :"#f0fff0",
    hotpink         :"#ff69b4",
    indianred       :"#cd5c5c",
    indigo          :"#4b0082",
    ivory           :"#fffff0",
    khaki           :"#f0e68c",
    lavender        :"#e6e6fa",
    lavenderblush   :"#fff0f5",
    lawngreen       :"#7cfc00",
    lemonchiffon    :"#fffacd",
    lightblue       :"#add8e6",
    lightcoral      :"#f08080",
    lightcyan       :"#e0ffff",
    lightgoldenrodyellow  :"#fafad2",
    lightgray       :"#d3d3d3",
    lightgrey       :"#d3d3d3",
    lightgreen      :"#90ee90",
    lightpink       :"#ffb6c1",
    lightsalmon     :"#ffa07a",
    lightseagreen   :"#20b2aa",
    lightskyblue    :"#87cefa",
    lightslategray  :"#778899",
    lightslategrey  :"#778899",
    lightsteelblue  :"#b0c4de",
    lightyellow     :"#ffffe0",
    lime            :"#00ff00",
    limegreen       :"#32cd32",
    linen           :"#faf0e6",
    magenta         :"#ff00ff",
    maroon          :"#800000",
    mediumaquamarine:"#66cdaa",
    mediumblue      :"#0000cd",
    mediumorchid    :"#ba55d3",
    mediumpurple    :"#9370d8",
    mediumseagreen  :"#3cb371",
    mediumslateblue :"#7b68ee",
    mediumspringgreen   :"#00fa9a",
    mediumturquoise :"#48d1cc",
    mediumvioletred :"#c71585",
    midnightblue    :"#191970",
    mintcream       :"#f5fffa",
    mistyrose       :"#ffe4e1",
    moccasin        :"#ffe4b5",
    navajowhite     :"#ffdead",
    navy            :"#000080",
    oldlace         :"#fdf5e6",
    olive           :"#808000",
    olivedrab       :"#6b8e23",
    orange          :"#ffa500",
    orangered       :"#ff4500",
    orchid          :"#da70d6",
    palegoldenrod   :"#eee8aa",
    palegreen       :"#98fb98",
    paleturquoise   :"#afeeee",
    palevioletred   :"#d87093",
    papayawhip      :"#ffefd5",
    peachpuff       :"#ffdab9",
    peru            :"#cd853f",
    pink            :"#ffc0cb",
    plum            :"#dda0dd",
    powderblue      :"#b0e0e6",
    purple          :"#800080",
    red             :"#ff0000",
    rosybrown       :"#bc8f8f",
    royalblue       :"#4169e1",
    saddlebrown     :"#8b4513",
    salmon          :"#fa8072",
    sandybrown      :"#f4a460",
    seagreen        :"#2e8b57",
    seashell        :"#fff5ee",
    sienna          :"#a0522d",
    silver          :"#c0c0c0",
    skyblue         :"#87ceeb",
    slateblue       :"#6a5acd",
    slategray       :"#708090",
    slategrey       :"#708090",
    snow            :"#fffafa",
    springgreen     :"#00ff7f",
    steelblue       :"#4682b4",
    tan             :"#d2b48c",
    teal            :"#008080",
    thistle         :"#d8bfd8",
    tomato          :"#ff6347",
    turquoise       :"#40e0d0",
    violet          :"#ee82ee",
    wheat           :"#f5deb3",
    white           :"#ffffff",
    whitesmoke      :"#f5f5f5",
    yellow          :"#ffff00",
    yellowgreen     :"#9acd32",
    //'currentColor' color keyword http://www.w3.org/TR/css3-color/#currentcolor
    currentColor        :"The value of the 'color' property.",
    //CSS2 system colors http://www.w3.org/TR/css3-color/#css2-system
    activeBorder        :"Active window border.",
    activecaption       :"Active window caption.",
    appworkspace        :"Background color of multiple document interface.",
    background          :"Desktop background.",
    buttonface          :"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttonhighlight     :"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttonshadow        :"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttontext          :"Text on push buttons.",
    captiontext         :"Text in caption, size box, and scrollbar arrow box.",
    graytext            :"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.",
    greytext            :"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.",
    highlight           :"Item(s) selected in a control.",
    highlighttext       :"Text of item(s) selected in a control.",
    inactiveborder      :"Inactive window border.",
    inactivecaption     :"Inactive window caption.",
    inactivecaptiontext :"Color of text in an inactive caption.",
    infobackground      :"Background color for tooltip controls.",
    infotext            :"Text color for tooltip controls.",
    menu                :"Menu background.",
    menutext            :"Text in menus.",
    scrollbar           :"Scroll bar gray area.",
    threeddarkshadow    :"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedface          :"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedhighlight     :"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedlightshadow   :"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedshadow        :"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    window              :"Window background.",
    windowframe         :"Window frame.",
    windowtext          :"Text in windows."
};
/**
 * Represents a selector combinator (whitespace, +, >).
 * @namespace parserlib.css
 * @class Combinator
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {String} text The text representation of the unit.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function Combinator(text, line, col){

    SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);

    /**
     * The type of modifier.
     * @type String
     * @property type
     */
    this.type = "unknown";

    //pretty simple
    if (/^\s+$/.test(text)){
        this.type = "descendant";
    } else if (text === ">"){
        this.type = "child";
    } else if (text === "+"){
        this.type = "adjacent-sibling";
    } else if (text === "~"){
        this.type = "sibling";
    }

}

Combinator.prototype = new SyntaxUnit();
Combinator.prototype.constructor = Combinator;

/**
 * Represents a media feature, such as max-width:500.
 * @namespace parserlib.css
 * @class MediaFeature
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {SyntaxUnit} name The name of the feature.
 * @param {SyntaxUnit} value The value of the feature or null if none.
 */
function MediaFeature(name, value){

    SyntaxUnit.call(this, "(" + name + (value !== null ? ":" + value : "") + ")", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);

    /**
     * The name of the media feature
     * @type String
     * @property name
     */
    this.name = name;

    /**
     * The value for the feature or null if there is none.
     * @type SyntaxUnit
     * @property value
     */
    this.value = value;
}

MediaFeature.prototype = new SyntaxUnit();
MediaFeature.prototype.constructor = MediaFeature;

/**
 * Represents an individual media query.
 * @namespace parserlib.css
 * @class MediaQuery
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {String} modifier The modifier "not" or "only" (or null).
 * @param {String} mediaType The type of media (i.e., "print").
 * @param {Array} parts Array of selectors parts making up this selector.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function MediaQuery(modifier, mediaType, features, line, col){

    SyntaxUnit.call(this, (modifier ? modifier + " ": "") + (mediaType ? mediaType : "") + (mediaType && features.length > 0 ? " and " : "") + features.join(" and "), line, col, Parser.MEDIA_QUERY_TYPE);

    /**
     * The media modifier ("not" or "only")
     * @type String
     * @property modifier
     */
    this.modifier = modifier;

    /**
     * The mediaType (i.e., "print")
     * @type String
     * @property mediaType
     */
    this.mediaType = mediaType;

    /**
     * The parts that make up the selector.
     * @type Array
     * @property features
     */
    this.features = features;

}

MediaQuery.prototype = new SyntaxUnit();
MediaQuery.prototype.constructor = MediaQuery;


/**
 * A CSS3 parser.
 * @namespace parserlib.css
 * @class Parser
 * @constructor
 * @param {Object} options (Optional) Various options for the parser:
 *      starHack (true|false) to allow IE6 star hack as valid,
 *      underscoreHack (true|false) to interpret leading underscores
 *      as IE6-7 targeting for known properties, ieFilters (true|false)
 *      to indicate that IE < 8 filters should be accepted and not throw
 *      syntax errors.
 */
function Parser(options){

    //inherit event functionality
    EventTarget.call(this);


    this.options = options || {};

    this._tokenStream = null;
}

//Static constants
Parser.DEFAULT_TYPE = 0;
Parser.COMBINATOR_TYPE = 1;
Parser.MEDIA_FEATURE_TYPE = 2;
Parser.MEDIA_QUERY_TYPE = 3;
Parser.PROPERTY_NAME_TYPE = 4;
Parser.PROPERTY_VALUE_TYPE = 5;
Parser.PROPERTY_VALUE_PART_TYPE = 6;
Parser.SELECTOR_TYPE = 7;
Parser.SELECTOR_PART_TYPE = 8;
Parser.SELECTOR_SUB_PART_TYPE = 9;

Parser.prototype = function(){

    var proto = new EventTarget(),  //new prototype
        prop,
        additions =  {
            __proto__: null,

            //restore constructor
            constructor: Parser,

            //instance constants - yuck
            DEFAULT_TYPE : 0,
            COMBINATOR_TYPE : 1,
            MEDIA_FEATURE_TYPE : 2,
            MEDIA_QUERY_TYPE : 3,
            PROPERTY_NAME_TYPE : 4,
            PROPERTY_VALUE_TYPE : 5,
            PROPERTY_VALUE_PART_TYPE : 6,
            SELECTOR_TYPE : 7,
            SELECTOR_PART_TYPE : 8,
            SELECTOR_SUB_PART_TYPE : 9,

            //-----------------------------------------------------------------
            // Grammar
            //-----------------------------------------------------------------

            _stylesheet: function(){

                /*
                 * stylesheet
                 *  : [ CHARSET_SYM S* STRING S* ';' ]?
                 *    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
                 *    [ namespace [S|CDO|CDC]* ]*
                 *    [ [ ruleset | media | page | font_face | keyframes ] [S|CDO|CDC]* ]*
                 *  ;
                 */

                var tokenStream = this._tokenStream,
                    count,
                    token,
                    tt;

                this.fire("startstylesheet");

                //try to read character set
                this._charset();

                this._skipCruft();

                //try to read imports - may be more than one
                while (tokenStream.peek() === Tokens.IMPORT_SYM){
                    this._import();
                    this._skipCruft();
                }

                //try to read namespaces - may be more than one
                while (tokenStream.peek() === Tokens.NAMESPACE_SYM){
                    this._namespace();
                    this._skipCruft();
                }

                //get the next token
                tt = tokenStream.peek();

                //try to read the rest
                while(tt > Tokens.EOF){

                    try {

                        switch(tt){
                            case Tokens.MEDIA_SYM:
                                this._media();
                                this._skipCruft();
                                break;
                            case Tokens.PAGE_SYM:
                                this._page();
                                this._skipCruft();
                                break;
                            case Tokens.FONT_FACE_SYM:
                                this._font_face();
                                this._skipCruft();
                                break;
                            case Tokens.KEYFRAMES_SYM:
                                this._keyframes();
                                this._skipCruft();
                                break;
                            case Tokens.VIEWPORT_SYM:
                                this._viewport();
                                this._skipCruft();
                                break;
                            case Tokens.DOCUMENT_SYM:
                                this._document();
                                this._skipCruft();
                                break;
                            case Tokens.UNKNOWN_SYM:  //unknown @ rule
                                tokenStream.get();
                                if (!this.options.strict){

                                    //fire error event
                                    this.fire({
                                        type:       "error",
                                        error:      null,
                                        message:    "Unknown @ rule: " + tokenStream.LT(0).value + ".",
                                        line:       tokenStream.LT(0).startLine,
                                        col:        tokenStream.LT(0).startCol
                                    });

                                    //skip braces
                                    count=0;
                                    while (tokenStream.advance([Tokens.LBRACE, Tokens.RBRACE]) === Tokens.LBRACE){
                                        count++;    //keep track of nesting depth
                                    }

                                    while(count){
                                        tokenStream.advance([Tokens.RBRACE]);
                                        count--;
                                    }

                                } else {
                                    //not a syntax error, rethrow it
                                    throw new SyntaxError("Unknown @ rule.", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);
                                }
                                break;
                            case Tokens.S:
                                this._readWhitespace();
                                break;
                            default:
                                if(!this._ruleset()){

                                    //error handling for known issues
                                    switch(tt){
                                        case Tokens.CHARSET_SYM:
                                            token = tokenStream.LT(1);
                                            this._charset(false);
                                            throw new SyntaxError("@charset not allowed here.", token.startLine, token.startCol);
                                        case Tokens.IMPORT_SYM:
                                            token = tokenStream.LT(1);
                                            this._import(false);
                                            throw new SyntaxError("@import not allowed here.", token.startLine, token.startCol);
                                        case Tokens.NAMESPACE_SYM:
                                            token = tokenStream.LT(1);
                                            this._namespace(false);
                                            throw new SyntaxError("@namespace not allowed here.", token.startLine, token.startCol);
                                        default:
                                            tokenStream.get();  //get the last token
                                            this._unexpectedToken(tokenStream.token());
                                    }

                                }
                        }
                    } catch(ex) {
                        if (ex instanceof SyntaxError && !this.options.strict){
                            this.fire({
                                type:       "error",
                                error:      ex,
                                message:    ex.message,
                                line:       ex.line,
                                col:        ex.col
                            });
                        } else {
                            throw ex;
                        }
                    }

                    tt = tokenStream.peek();
                }

                if (tt !== Tokens.EOF){
                    this._unexpectedToken(tokenStream.token());
                }

                this.fire("endstylesheet");
            },

            _charset: function(emit){
                var tokenStream = this._tokenStream,
                    charset,
                    token,
                    line,
                    col;

                if (tokenStream.match(Tokens.CHARSET_SYM)){
                    line = tokenStream.token().startLine;
                    col = tokenStream.token().startCol;

                    this._readWhitespace();
                    tokenStream.mustMatch(Tokens.STRING);

                    token = tokenStream.token();
                    charset = token.value;

                    this._readWhitespace();
                    tokenStream.mustMatch(Tokens.SEMICOLON);

                    if (emit !== false){
                        this.fire({
                            type:   "charset",
                            charset:charset,
                            line:   line,
                            col:    col
                        });
                    }
                }
            },

            _import: function(emit){
                /*
                 * import
                 *   : IMPORT_SYM S*
                 *    [STRING|URI] S* media_query_list? ';' S*
                 */

                var tokenStream = this._tokenStream,
                    uri,
                    importToken,
                    mediaList   = [];

                //read import symbol
                tokenStream.mustMatch(Tokens.IMPORT_SYM);
                importToken = tokenStream.token();
                this._readWhitespace();

                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);

                //grab the URI value
                uri = tokenStream.token().value.replace(/^(?:url\()?["']?([^"']+?)["']?\)?$/, "$1");

                this._readWhitespace();

                mediaList = this._media_query_list();

                //must end with a semicolon
                tokenStream.mustMatch(Tokens.SEMICOLON);
                this._readWhitespace();

                if (emit !== false){
                    this.fire({
                        type:   "import",
                        uri:    uri,
                        media:  mediaList,
                        line:   importToken.startLine,
                        col:    importToken.startCol
                    });
                }

            },

            _namespace: function(emit){
                /*
                 * namespace
                 *   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S*
                 */

                var tokenStream = this._tokenStream,
                    line,
                    col,
                    prefix,
                    uri;

                //read import symbol
                tokenStream.mustMatch(Tokens.NAMESPACE_SYM);
                line = tokenStream.token().startLine;
                col = tokenStream.token().startCol;
                this._readWhitespace();

                //it's a namespace prefix - no _namespace_prefix() method because it's just an IDENT
                if (tokenStream.match(Tokens.IDENT)){
                    prefix = tokenStream.token().value;
                    this._readWhitespace();
                }

                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);
                /*if (!tokenStream.match(Tokens.STRING)){
                    tokenStream.mustMatch(Tokens.URI);
                }*/

                //grab the URI value
                uri = tokenStream.token().value.replace(/(?:url\()?["']([^"']+)["']\)?/, "$1");

                this._readWhitespace();

                //must end with a semicolon
                tokenStream.mustMatch(Tokens.SEMICOLON);
                this._readWhitespace();

                if (emit !== false){
                    this.fire({
                        type:   "namespace",
                        prefix: prefix,
                        uri:    uri,
                        line:   line,
                        col:    col
                    });
                }

            },

            _media: function(){
                /*
                 * media
                 *   : MEDIA_SYM S* media_query_list S* '{' S* ruleset* '}' S*
                 *   ;
                 */
                var tokenStream     = this._tokenStream,
                    line,
                    col,
                    mediaList;//       = [];

                //look for @media
                tokenStream.mustMatch(Tokens.MEDIA_SYM);
                line = tokenStream.token().startLine;
                col = tokenStream.token().startCol;

                this._readWhitespace();

                mediaList = this._media_query_list();

                tokenStream.mustMatch(Tokens.LBRACE);
                this._readWhitespace();

                this.fire({
                    type:   "startmedia",
                    media:  mediaList,
                    line:   line,
                    col:    col
                });

                while(true) {
                    if (tokenStream.peek() === Tokens.PAGE_SYM){
                        this._page();
                    } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM){
                        this._font_face();
                    } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM){
                        this._viewport();
                    } else if (tokenStream.peek() === Tokens.DOCUMENT_SYM){
                        this._document();
                    } else if (!this._ruleset()){
                        break;
                    }
                }

                tokenStream.mustMatch(Tokens.RBRACE);
                this._readWhitespace();

                this.fire({
                    type:   "endmedia",
                    media:  mediaList,
                    line:   line,
                    col:    col
                });
            },


            //CSS3 Media Queries
            _media_query_list: function(){
                /*
                 * media_query_list
                 *   : S* [media_query [ ',' S* media_query ]* ]?
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    mediaList   = [];


                this._readWhitespace();

                if (tokenStream.peek() === Tokens.IDENT || tokenStream.peek() === Tokens.LPAREN){
                    mediaList.push(this._media_query());
                }

                while(tokenStream.match(Tokens.COMMA)){
                    this._readWhitespace();
                    mediaList.push(this._media_query());
                }

                return mediaList;
            },

            /*
             * Note: "expression" in the grammar maps to the _media_expression
             * method.

             */
            _media_query: function(){
                /*
                 * media_query
                 *   : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*
                 *   | expression [ AND S* expression ]*
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    type        = null,
                    ident       = null,
                    token       = null,
                    expressions = [];

                if (tokenStream.match(Tokens.IDENT)){
                    ident = tokenStream.token().value.toLowerCase();

                    //since there's no custom tokens for these, need to manually check
                    if (ident !== "only" && ident !== "not"){
                        tokenStream.unget();
                        ident = null;
                    } else {
                        token = tokenStream.token();
                    }
                }

                this._readWhitespace();

                if (tokenStream.peek() === Tokens.IDENT){
                    type = this._media_type();
                    if (token === null){
                        token = tokenStream.token();
                    }
                } else if (tokenStream.peek() === Tokens.LPAREN){
                    if (token === null){
                        token = tokenStream.LT(1);
                    }
                    expressions.push(this._media_expression());
                }

                if (type === null && expressions.length === 0){
                    return null;
                } else {
                    this._readWhitespace();
                    while (tokenStream.match(Tokens.IDENT)){
                        if (tokenStream.token().value.toLowerCase() !== "and"){
                            this._unexpectedToken(tokenStream.token());
                        }

                        this._readWhitespace();
                        expressions.push(this._media_expression());
                    }
                }

                return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);
            },

            //CSS3 Media Queries
            _media_type: function(){
                /*
                 * media_type
                 *   : IDENT
                 *   ;
                 */
                return this._media_feature();
            },

            /**
             * Note: in CSS3 Media Queries, this is called "expression".
             * Renamed here to avoid conflict with CSS3 Selectors
             * definition of "expression". Also note that "expr" in the
             * grammar now maps to "expression" from CSS3 selectors.
             * @method _media_expression
             * @private
             */
            _media_expression: function(){
                /*
                 * expression
                 *  : '(' S* media_feature S* [ ':' S* expr ]? ')' S*
                 *  ;
                 */
                var tokenStream = this._tokenStream,
                    feature     = null,
                    token,
                    expression  = null;

                tokenStream.mustMatch(Tokens.LPAREN);

                feature = this._media_feature();
                this._readWhitespace();

                if (tokenStream.match(Tokens.COLON)){
                    this._readWhitespace();
                    token = tokenStream.LT(1);
                    expression = this._expression();
                }

                tokenStream.mustMatch(Tokens.RPAREN);
                this._readWhitespace();

                return new MediaFeature(feature, (expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null));
            },

            //CSS3 Media Queries
            _media_feature: function(){
                /*
                 * media_feature
                 *   : IDENT
                 *   ;
                 */
                var tokenStream = this._tokenStream;

                this._readWhitespace();

                tokenStream.mustMatch(Tokens.IDENT);

                return SyntaxUnit.fromToken(tokenStream.token());
            },

            //CSS3 Paged Media
            _page: function(){
                /*
                 * page:
                 *    PAGE_SYM S* IDENT? pseudo_page? S*
                 *    '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*
                 *    ;
                 */
                var tokenStream = this._tokenStream,
                    line,
                    col,
                    identifier  = null,
                    pseudoPage  = null;

                //look for @page
                tokenStream.mustMatch(Tokens.PAGE_SYM);
                line = tokenStream.token().startLine;
                col = tokenStream.token().startCol;

                this._readWhitespace();

                if (tokenStream.match(Tokens.IDENT)){
                    identifier = tokenStream.token().value;

                    //The value 'auto' may not be used as a page name and MUST be treated as a syntax error.
                    if (identifier.toLowerCase() === "auto"){
                        this._unexpectedToken(tokenStream.token());
                    }
                }

                //see if there's a colon upcoming
                if (tokenStream.peek() === Tokens.COLON){
                    pseudoPage = this._pseudo_page();
                }

                this._readWhitespace();

                this.fire({
                    type:   "startpage",
                    id:     identifier,
                    pseudo: pseudoPage,
                    line:   line,
                    col:    col
                });

                this._readDeclarations(true, true);

                this.fire({
                    type:   "endpage",
                    id:     identifier,
                    pseudo: pseudoPage,
                    line:   line,
                    col:    col
                });

            },

            //CSS3 Paged Media
            _margin: function(){
                /*
                 * margin :
                 *    margin_sym S* '{' declaration [ ';' S* declaration? ]* '}' S*
                 *    ;
                 */
                var tokenStream = this._tokenStream,
                    line,
                    col,
                    marginSym   = this._margin_sym();

                if (marginSym){
                    line = tokenStream.token().startLine;
                    col = tokenStream.token().startCol;

                    this.fire({
                        type: "startpagemargin",
                        margin: marginSym,
                        line:   line,
                        col:    col
                    });

                    this._readDeclarations(true);

                    this.fire({
                        type: "endpagemargin",
                        margin: marginSym,
                        line:   line,
                        col:    col
                    });
                    return true;
                } else {
                    return false;
                }
            },

            //CSS3 Paged Media
            _margin_sym: function(){

                /*
                 * margin_sym :
                 *    TOPLEFTCORNER_SYM |
                 *    TOPLEFT_SYM |
                 *    TOPCENTER_SYM |
                 *    TOPRIGHT_SYM |
                 *    TOPRIGHTCORNER_SYM |
                 *    BOTTOMLEFTCORNER_SYM |
                 *    BOTTOMLEFT_SYM |
                 *    BOTTOMCENTER_SYM |
                 *    BOTTOMRIGHT_SYM |
                 *    BOTTOMRIGHTCORNER_SYM |
                 *    LEFTTOP_SYM |
                 *    LEFTMIDDLE_SYM |
                 *    LEFTBOTTOM_SYM |
                 *    RIGHTTOP_SYM |
                 *    RIGHTMIDDLE_SYM |
                 *    RIGHTBOTTOM_SYM
                 *    ;
                 */

                var tokenStream = this._tokenStream;

                if(tokenStream.match([Tokens.TOPLEFTCORNER_SYM, Tokens.TOPLEFT_SYM,
                        Tokens.TOPCENTER_SYM, Tokens.TOPRIGHT_SYM, Tokens.TOPRIGHTCORNER_SYM,
                        Tokens.BOTTOMLEFTCORNER_SYM, Tokens.BOTTOMLEFT_SYM,
                        Tokens.BOTTOMCENTER_SYM, Tokens.BOTTOMRIGHT_SYM,
                        Tokens.BOTTOMRIGHTCORNER_SYM, Tokens.LEFTTOP_SYM,
                        Tokens.LEFTMIDDLE_SYM, Tokens.LEFTBOTTOM_SYM, Tokens.RIGHTTOP_SYM,
                        Tokens.RIGHTMIDDLE_SYM, Tokens.RIGHTBOTTOM_SYM]))
                {
                    return SyntaxUnit.fromToken(tokenStream.token());
                } else {
                    return null;
                }

            },

            _pseudo_page: function(){
                /*
                 * pseudo_page
                 *   : ':' IDENT
                 *   ;
                 */

                var tokenStream = this._tokenStream;

                tokenStream.mustMatch(Tokens.COLON);
                tokenStream.mustMatch(Tokens.IDENT);

                //TODO: CSS3 Paged Media says only "left", "center", and "right" are allowed

                return tokenStream.token().value;
            },

            _font_face: function(){
                /*
                 * font_face
                 *   : FONT_FACE_SYM S*
                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    line,
                    col;

                //look for @page
                tokenStream.mustMatch(Tokens.FONT_FACE_SYM);
                line = tokenStream.token().startLine;
                col = tokenStream.token().startCol;

                this._readWhitespace();

                this.fire({
                    type:   "startfontface",
                    line:   line,
                    col:    col
                });

                this._readDeclarations(true);

                this.fire({
                    type:   "endfontface",
                    line:   line,
                    col:    col
                });
            },

            _viewport: function(){
                /*
                 * viewport
                 *   : VIEWPORT_SYM S*
                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*
                 *   ;
                 */
                 var tokenStream = this._tokenStream,
                    line,
                    col;

                    tokenStream.mustMatch(Tokens.VIEWPORT_SYM);
                    line = tokenStream.token().startLine;
                    col = tokenStream.token().startCol;

                    this._readWhitespace();

                    this.fire({
                        type:   "startviewport",
                        line:   line,
                        col:    col
                    });

                    this._readDeclarations(true);

                    this.fire({
                        type:   "endviewport",
                        line:   line,
                        col:    col
                    });

            },

            _document: function(){
                /*
                 * document
                 *   : DOCUMENT_SYM S*
                 *     _document_function [ ',' S* _document_function ]* S*
                 *     '{' S* ruleset* '}'
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    token,
                    functions = [],
                    prefix = "";

                tokenStream.mustMatch(Tokens.DOCUMENT_SYM);
                token = tokenStream.token();
                if (/^@\-([^\-]+)\-/.test(token.value)) {
                    prefix = RegExp.$1;
                }

                this._readWhitespace();
                functions.push(this._document_function());

                while(tokenStream.match(Tokens.COMMA)) {
                    this._readWhitespace();
                    functions.push(this._document_function());
                }

                tokenStream.mustMatch(Tokens.LBRACE);
                this._readWhitespace();

                this.fire({
                    type:      "startdocument",
                    functions: functions,
                    prefix:    prefix,
                    line:      token.startLine,
                    col:       token.startCol
                });

                while(true) {
                    if (tokenStream.peek() === Tokens.PAGE_SYM){
                        this._page();
                    } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM){
                        this._font_face();
                    } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM){
                        this._viewport();
                    } else if (tokenStream.peek() === Tokens.MEDIA_SYM){
                        this._media();
                    } else if (!this._ruleset()){
                        break;
                    }
                }

                tokenStream.mustMatch(Tokens.RBRACE);
                this._readWhitespace();

                this.fire({
                    type:      "enddocument",
                    functions: functions,
                    prefix:    prefix,
                    line:      token.startLine,
                    col:       token.startCol
                });
            },

            _document_function: function(){
                /*
                 * document_function
                 *   : function | URI S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    value;

                if (tokenStream.match(Tokens.URI)) {
                    value = tokenStream.token().value;
                    this._readWhitespace();
                } else {
                    value = this._function();
                }

                return value;
            },

            _operator: function(inFunction){

                /*
                 * operator (outside function)
                 *  : '/' S* | ',' S* | /( empty )/
                 * operator (inside function)
                 *  : '/' S* | '+' S* | '*' S* | '-' S* /( empty )/
                 *  ;
                 */

                var tokenStream = this._tokenStream,
                    token       = null;

                if (tokenStream.match([Tokens.SLASH, Tokens.COMMA]) ||
                    (inFunction && tokenStream.match([Tokens.PLUS, Tokens.STAR, Tokens.MINUS]))){
                    token =  tokenStream.token();
                    this._readWhitespace();
                }
                return token ? PropertyValuePart.fromToken(token) : null;

            },

            _combinator: function(){

                /*
                 * combinator
                 *  : PLUS S* | GREATER S* | TILDE S* | S+
                 *  ;
                 */

                var tokenStream = this._tokenStream,
                    value       = null,
                    token;

                if(tokenStream.match([Tokens.PLUS, Tokens.GREATER, Tokens.TILDE])){
                    token = tokenStream.token();
                    value = new Combinator(token.value, token.startLine, token.startCol);
                    this._readWhitespace();
                }

                return value;
            },

            _unary_operator: function(){

                /*
                 * unary_operator
                 *  : '-' | '+'
                 *  ;
                 */

                var tokenStream = this._tokenStream;

                if (tokenStream.match([Tokens.MINUS, Tokens.PLUS])){
                    return tokenStream.token().value;
                } else {
                    return null;
                }
            },

            _property: function(){

                /*
                 * property
                 *   : IDENT S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    value       = null,
                    hack        = null,
                    tokenValue,
                    token,
                    line,
                    col;

                //check for star hack - throws error if not allowed
                if (tokenStream.peek() === Tokens.STAR && this.options.starHack){
                    tokenStream.get();
                    token = tokenStream.token();
                    hack = token.value;
                    line = token.startLine;
                    col = token.startCol;
                }

                if(tokenStream.match(Tokens.IDENT)){
                    token = tokenStream.token();
                    tokenValue = token.value;

                    //check for underscore hack - no error if not allowed because it's valid CSS syntax
                    if (tokenValue.charAt(0) === "_" && this.options.underscoreHack){
                        hack = "_";
                        tokenValue = tokenValue.substring(1);
                    }

                    value = new PropertyName(tokenValue, hack, (line||token.startLine), (col||token.startCol));
                    this._readWhitespace();
                }

                return value;
            },

            //Augmented with CSS3 Selectors
            _ruleset: function(){
                /*
                 * ruleset
                 *   : selectors_group
                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    tt,
                    selectors;


                /*
                 * Error Recovery: If even a single selector fails to parse,
                 * then the entire ruleset should be thrown away.
                 */
                try {
                    selectors = this._selectors_group();
                } catch (ex){
                    if (ex instanceof SyntaxError && !this.options.strict){

                        //fire error event
                        this.fire({
                            type:       "error",
                            error:      ex,
                            message:    ex.message,
                            line:       ex.line,
                            col:        ex.col
                        });

                        //skip over everything until closing brace
                        tt = tokenStream.advance([Tokens.RBRACE]);
                        if (tt === Tokens.RBRACE){
                            //if there's a right brace, the rule is finished so don't do anything
                        } else {
                            //otherwise, rethrow the error because it wasn't handled properly
                            throw ex;
                        }

                    } else {
                        //not a syntax error, rethrow it
                        throw ex;
                    }

                    //trigger parser to continue
                    return true;
                }

                //if it got here, all selectors parsed
                if (selectors){

                    this.fire({
                        type:       "startrule",
                        selectors:  selectors,
                        line:       selectors[0].line,
                        col:        selectors[0].col
                    });

                    this._readDeclarations(true);

                    this.fire({
                        type:       "endrule",
                        selectors:  selectors,
                        line:       selectors[0].line,
                        col:        selectors[0].col
                    });

                }

                return selectors;

            },

            //CSS3 Selectors
            _selectors_group: function(){

                /*
                 * selectors_group
                 *   : selector [ COMMA S* selector ]*
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    selectors   = [],
                    selector;

                selector = this._selector();
                if (selector !== null){

                    selectors.push(selector);
                    while(tokenStream.match(Tokens.COMMA)){
                        this._readWhitespace();
                        selector = this._selector();
                        if (selector !== null){
                            selectors.push(selector);
                        } else {
                            this._unexpectedToken(tokenStream.LT(1));
                        }
                    }
                }

                return selectors.length ? selectors : null;
            },

            //CSS3 Selectors
            _selector: function(){
                /*
                 * selector
                 *   : simple_selector_sequence [ combinator simple_selector_sequence ]*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    selector    = [],
                    nextSelector = null,
                    combinator  = null,
                    ws          = null;

                //if there's no simple selector, then there's no selector
                nextSelector = this._simple_selector_sequence();
                if (nextSelector === null){
                    return null;
                }

                selector.push(nextSelector);

                do {

                    //look for a combinator
                    combinator = this._combinator();

                    if (combinator !== null){
                        selector.push(combinator);
                        nextSelector = this._simple_selector_sequence();

                        //there must be a next selector
                        if (nextSelector === null){
                            this._unexpectedToken(tokenStream.LT(1));
                        } else {

                            //nextSelector is an instance of SelectorPart
                            selector.push(nextSelector);
                        }
                    } else {

                        //if there's not whitespace, we're done
                        if (this._readWhitespace()){

                            //add whitespace separator
                            ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);

                            //combinator is not required
                            combinator = this._combinator();

                            //selector is required if there's a combinator
                            nextSelector = this._simple_selector_sequence();
                            if (nextSelector === null){
                                if (combinator !== null){
                                    this._unexpectedToken(tokenStream.LT(1));
                                }
                            } else {

                                if (combinator !== null){
                                    selector.push(combinator);
                                } else {
                                    selector.push(ws);
                                }

                                selector.push(nextSelector);
                            }
                        } else {
                            break;
                        }

                    }
                } while(true);

                return new Selector(selector, selector[0].line, selector[0].col);
            },

            //CSS3 Selectors
            _simple_selector_sequence: function(){
                /*
                 * simple_selector_sequence
                 *   : [ type_selector | universal ]
                 *     [ HASH | class | attrib | pseudo | negation ]*
                 *   | [ HASH | class | attrib | pseudo | negation ]+
                 *   ;
                 */

                var tokenStream = this._tokenStream,

                    //parts of a simple selector
                    elementName = null,
                    modifiers   = [],

                    //complete selector text
                    selectorText= "",

                    //the different parts after the element name to search for
                    components  = [
                        //HASH
                        function(){
                            return tokenStream.match(Tokens.HASH) ?
                                    new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) :
                                    null;
                        },
                        this._class,
                        this._attrib,
                        this._pseudo,
                        this._negation
                    ],
                    i           = 0,
                    len         = components.length,
                    component   = null,
                    line,
                    col;


                //get starting line and column for the selector
                line = tokenStream.LT(1).startLine;
                col = tokenStream.LT(1).startCol;

                elementName = this._type_selector();
                if (!elementName){
                    elementName = this._universal();
                }

                if (elementName !== null){
                    selectorText += elementName;
                }

                while(true){

                    //whitespace means we're done
                    if (tokenStream.peek() === Tokens.S){
                        break;
                    }

                    //check for each component
                    while(i < len && component === null){
                        component = components[i++].call(this);
                    }

                    if (component === null){

                        //we don't have a selector
                        if (selectorText === ""){
                            return null;
                        } else {
                            break;
                        }
                    } else {
                        i = 0;
                        modifiers.push(component);
                        selectorText += component.toString();
                        component = null;
                    }
                }


                return selectorText !== "" ?
                        new SelectorPart(elementName, modifiers, selectorText, line, col) :
                        null;
            },

            //CSS3 Selectors
            _type_selector: function(){
                /*
                 * type_selector
                 *   : [ namespace_prefix ]? element_name
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    ns          = this._namespace_prefix(),
                    elementName = this._element_name();

                if (!elementName){
                    /*
                     * Need to back out the namespace that was read due to both
                     * type_selector and universal reading namespace_prefix
                     * first. Kind of hacky, but only way I can figure out
                     * right now how to not change the grammar.
                     */
                    if (ns){
                        tokenStream.unget();
                        if (ns.length > 1){
                            tokenStream.unget();
                        }
                    }

                    return null;
                } else {
                    if (ns){
                        elementName.text = ns + elementName.text;
                        elementName.col -= ns.length;
                    }
                    return elementName;
                }
            },

            //CSS3 Selectors
            _class: function(){
                /*
                 * class
                 *   : '.' IDENT
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    token;

                if (tokenStream.match(Tokens.DOT)){
                    tokenStream.mustMatch(Tokens.IDENT);
                    token = tokenStream.token();
                    return new SelectorSubPart("." + token.value, "class", token.startLine, token.startCol - 1);
                } else {
                    return null;
                }

            },

            //CSS3 Selectors
            _element_name: function(){
                /*
                 * element_name
                 *   : IDENT
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    token;

                if (tokenStream.match(Tokens.IDENT)){
                    token = tokenStream.token();
                    return new SelectorSubPart(token.value, "elementName", token.startLine, token.startCol);

                } else {
                    return null;
                }
            },

            //CSS3 Selectors
            _namespace_prefix: function(){
                /*
                 * namespace_prefix
                 *   : [ IDENT | '*' ]? '|'
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    value       = "";

                //verify that this is a namespace prefix
                if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE){

                    if(tokenStream.match([Tokens.IDENT, Tokens.STAR])){
                        value += tokenStream.token().value;
                    }

                    tokenStream.mustMatch(Tokens.PIPE);
                    value += "|";

                }

                return value.length ? value : null;
            },

            //CSS3 Selectors
            _universal: function(){
                /*
                 * universal
                 *   : [ namespace_prefix ]? '*'
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    value       = "",
                    ns;

                ns = this._namespace_prefix();
                if(ns){
                    value += ns;
                }

                if(tokenStream.match(Tokens.STAR)){
                    value += "*";
                }

                return value.length ? value : null;

           },

            //CSS3 Selectors
            _attrib: function(){
                /*
                 * attrib
                 *   : '[' S* [ namespace_prefix ]? IDENT S*
                 *         [ [ PREFIXMATCH |
                 *             SUFFIXMATCH |
                 *             SUBSTRINGMATCH |
                 *             '=' |
                 *             INCLUDES |
                 *             DASHMATCH ] S* [ IDENT | STRING ] S*
                 *         ]? ']'
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    value       = null,
                    ns,
                    token;

                if (tokenStream.match(Tokens.LBRACKET)){
                    token = tokenStream.token();
                    value = token.value;
                    value += this._readWhitespace();

                    ns = this._namespace_prefix();

                    if (ns){
                        value += ns;
                    }

                    tokenStream.mustMatch(Tokens.IDENT);
                    value += tokenStream.token().value;
                    value += this._readWhitespace();

                    if(tokenStream.match([Tokens.PREFIXMATCH, Tokens.SUFFIXMATCH, Tokens.SUBSTRINGMATCH,
                            Tokens.EQUALS, Tokens.INCLUDES, Tokens.DASHMATCH])){

                        value += tokenStream.token().value;
                        value += this._readWhitespace();

                        tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
                        value += tokenStream.token().value;
                        value += this._readWhitespace();
                    }

                    tokenStream.mustMatch(Tokens.RBRACKET);

                    return new SelectorSubPart(value + "]", "attribute", token.startLine, token.startCol);
                } else {
                    return null;
                }
            },

            //CSS3 Selectors
            _pseudo: function(){

                /*
                 * pseudo
                 *   : ':' ':'? [ IDENT | functional_pseudo ]
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    pseudo      = null,
                    colons      = ":",
                    line,
                    col;

                if (tokenStream.match(Tokens.COLON)){

                    if (tokenStream.match(Tokens.COLON)){
                        colons += ":";
                    }

                    if (tokenStream.match(Tokens.IDENT)){
                        pseudo = tokenStream.token().value;
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol - colons.length;
                    } else if (tokenStream.peek() === Tokens.FUNCTION){
                        line = tokenStream.LT(1).startLine;
                        col = tokenStream.LT(1).startCol - colons.length;
                        pseudo = this._functional_pseudo();
                    }

                    if (pseudo){
                        pseudo = new SelectorSubPart(colons + pseudo, "pseudo", line, col);
                    }
                }

                return pseudo;
            },

            //CSS3 Selectors
            _functional_pseudo: function(){
                /*
                 * functional_pseudo
                 *   : FUNCTION S* expression ')'
                 *   ;
                */

                var tokenStream = this._tokenStream,
                    value = null;

                if(tokenStream.match(Tokens.FUNCTION)){
                    value = tokenStream.token().value;
                    value += this._readWhitespace();
                    value += this._expression();
                    tokenStream.mustMatch(Tokens.RPAREN);
                    value += ")";
                }

                return value;
            },

            //CSS3 Selectors
            _expression: function(){
                /*
                 * expression
                 *   : [ [ PLUS | '-' | DIMENSION | NUMBER | STRING | IDENT ] S* ]+
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    value       = "";

                while(tokenStream.match([Tokens.PLUS, Tokens.MINUS, Tokens.DIMENSION,
                        Tokens.NUMBER, Tokens.STRING, Tokens.IDENT, Tokens.LENGTH,
                        Tokens.FREQ, Tokens.ANGLE, Tokens.TIME,
                        Tokens.RESOLUTION, Tokens.SLASH])){

                    value += tokenStream.token().value;
                    value += this._readWhitespace();
                }

                return value.length ? value : null;

            },

            //CSS3 Selectors
            _negation: function(){
                /*
                 * negation
                 *   : NOT S* negation_arg S* ')'
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    line,
                    col,
                    value       = "",
                    arg,
                    subpart     = null;

                if (tokenStream.match(Tokens.NOT)){
                    value = tokenStream.token().value;
                    line = tokenStream.token().startLine;
                    col = tokenStream.token().startCol;
                    value += this._readWhitespace();
                    arg = this._negation_arg();
                    value += arg;
                    value += this._readWhitespace();
                    tokenStream.match(Tokens.RPAREN);
                    value += tokenStream.token().value;

                    subpart = new SelectorSubPart(value, "not", line, col);
                    subpart.args.push(arg);
                }

                return subpart;
            },

            //CSS3 Selectors
            _negation_arg: function(){
                /*
                 * negation_arg
                 *   : type_selector | universal | HASH | class | attrib | pseudo
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    args        = [
                        this._type_selector,
                        this._universal,
                        function(){
                            return tokenStream.match(Tokens.HASH) ?
                                    new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) :
                                    null;
                        },
                        this._class,
                        this._attrib,
                        this._pseudo
                    ],
                    arg         = null,
                    i           = 0,
                    len         = args.length,
                    line,
                    col,
                    part;

                line = tokenStream.LT(1).startLine;
                col = tokenStream.LT(1).startCol;

                while(i < len && arg === null){

                    arg = args[i].call(this);
                    i++;
                }

                //must be a negation arg
                if (arg === null){
                    this._unexpectedToken(tokenStream.LT(1));
                }

                //it's an element name
                if (arg.type === "elementName"){
                    part = new SelectorPart(arg, [], arg.toString(), line, col);
                } else {
                    part = new SelectorPart(null, [arg], arg.toString(), line, col);
                }

                return part;
            },

            _declaration: function(){

                /*
                 * declaration
                 *   : property ':' S* expr prio?
                 *   | /( empty )/
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    property    = null,
                    expr        = null,
                    prio        = null,
                    invalid     = null,
                    propertyName= "";

                property = this._property();
                if (property !== null){

                    tokenStream.mustMatch(Tokens.COLON);
                    this._readWhitespace();

                    expr = this._expr();

                    //if there's no parts for the value, it's an error
                    if (!expr || expr.length === 0){
                        this._unexpectedToken(tokenStream.LT(1));
                    }

                    prio = this._prio();

                    /*
                     * If hacks should be allowed, then only check the root
                     * property. If hacks should not be allowed, treat
                     * _property or *property as invalid properties.
                     */
                    propertyName = property.toString();
                    if (this.options.starHack && property.hack === "*" ||
                            this.options.underscoreHack && property.hack === "_") {

                        propertyName = property.text;
                    }

                    try {
                        this._validateProperty(propertyName, expr);
                    } catch (ex) {
                        invalid = ex;
                    }

                    this.fire({
                        type:       "property",
                        property:   property,
                        value:      expr,
                        important:  prio,
                        line:       property.line,
                        col:        property.col,
                        invalid:    invalid
                    });

                    return true;
                } else {
                    return false;
                }
            },

            _prio: function(){
                /*
                 * prio
                 *   : IMPORTANT_SYM S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    result      = tokenStream.match(Tokens.IMPORTANT_SYM);

                this._readWhitespace();
                return result;
            },

            _expr: function(inFunction){
                /*
                 * expr
                 *   : term [ operator term ]*
                 *   ;
                 */

                var values      = [],
					//valueParts	= [],
                    value       = null,
                    operator    = null;

                value = this._term(inFunction);
                if (value !== null){

                    values.push(value);

                    do {
                        operator = this._operator(inFunction);

                        //if there's an operator, keep building up the value parts
                        if (operator){
                            values.push(operator);
                        } /*else {
                            //if there's not an operator, you have a full value
							values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));
							valueParts = [];
						}*/

                        value = this._term(inFunction);

                        if (value === null){
                            break;
                        } else {
                            values.push(value);
                        }
                    } while(true);
                }

				//cleanup
                /*if (valueParts.length){
                    values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));
                }*/

                return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;
            },

            _term: function(inFunction){

                /*
                 * term
                 *   : unary_operator?
                 *     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | ANGLE S* |
                 *       TIME S* | FREQ S* | function | ie_function ]
                 *   | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    unary       = null,
                    value       = null,
                    endChar     = null,
                    token,
                    line,
                    col;

                //returns the operator or null
                unary = this._unary_operator();
                if (unary !== null){
                    line = tokenStream.token().startLine;
                    col = tokenStream.token().startCol;
                }

                //exception for IE filters
                if (tokenStream.peek() === Tokens.IE_FUNCTION && this.options.ieFilters){

                    value = this._ie_function();
                    if (unary === null){
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                    }

                //see if it's a simple block
                } else if (inFunction && tokenStream.match([Tokens.LPAREN, Tokens.LBRACE, Tokens.LBRACKET])){

                    token = tokenStream.token();
                    endChar = token.endChar;
                    value = token.value + this._expr(inFunction).text;
                    if (unary === null){
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                    }
                    tokenStream.mustMatch(Tokens.type(endChar));
                    value += endChar;
                    this._readWhitespace();

                //see if there's a simple match
                } else if (tokenStream.match([Tokens.NUMBER, Tokens.PERCENTAGE, Tokens.LENGTH,
                        Tokens.ANGLE, Tokens.TIME,
                        Tokens.FREQ, Tokens.STRING, Tokens.IDENT, Tokens.URI, Tokens.UNICODE_RANGE])){

                    value = tokenStream.token().value;
                    if (unary === null){
                        line = tokenStream.token().startLine;
                        col = tokenStream.token().startCol;
                    }
                    this._readWhitespace();
                } else {

                    //see if it's a color
                    token = this._hexcolor();
                    if (token === null){

                        //if there's no unary, get the start of the next token for line/col info
                        if (unary === null){
                            line = tokenStream.LT(1).startLine;
                            col = tokenStream.LT(1).startCol;
                        }

                        //has to be a function
                        if (value === null){

                            /*
                             * This checks for alpha(opacity=0) style of IE
                             * functions. IE_FUNCTION only presents progid: style.
                             */
                            if (tokenStream.LA(3) === Tokens.EQUALS && this.options.ieFilters){
                                value = this._ie_function();
                            } else {
                                value = this._function();
                            }
                        }

                        /*if (value === null){
                            return null;
                            //throw new Error("Expected identifier at line " + tokenStream.token().startLine + ", character " +  tokenStream.token().startCol + ".");
                        }*/

                    } else {
                        value = token.value;
                        if (unary === null){
                            line = token.startLine;
                            col = token.startCol;
                        }
                    }

                }

                return value !== null ?
                        new PropertyValuePart(unary !== null ? unary + value : value, line, col) :
                        null;

            },

            _function: function(){

                /*
                 * function
                 *   : FUNCTION S* expr ')' S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    functionText = null,
                    expr        = null,
                    lt;

                if (tokenStream.match(Tokens.FUNCTION)){
                    functionText = tokenStream.token().value;
                    this._readWhitespace();
                    expr = this._expr(true);
                    functionText += expr;

                    //START: Horrible hack in case it's an IE filter
                    if (this.options.ieFilters && tokenStream.peek() === Tokens.EQUALS){
                        do {

                            if (this._readWhitespace()){
                                functionText += tokenStream.token().value;
                            }

                            //might be second time in the loop
                            if (tokenStream.LA(0) === Tokens.COMMA){
                                functionText += tokenStream.token().value;
                            }

                            tokenStream.match(Tokens.IDENT);
                            functionText += tokenStream.token().value;

                            tokenStream.match(Tokens.EQUALS);
                            functionText += tokenStream.token().value;

                            //functionText += this._term();
                            lt = tokenStream.peek();
                            while(lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN){
                                tokenStream.get();
                                functionText += tokenStream.token().value;
                                lt = tokenStream.peek();
                            }
                        } while(tokenStream.match([Tokens.COMMA, Tokens.S]));
                    }

                    //END: Horrible Hack

                    tokenStream.match(Tokens.RPAREN);
                    functionText += ")";
                    this._readWhitespace();
                }

                return functionText;
            },

            _ie_function: function(){

                /* (My own extension)
                 * ie_function
                 *   : IE_FUNCTION S* IDENT '=' term [S* ','? IDENT '=' term]+ ')' S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    functionText = null,
                    lt;

                //IE function can begin like a regular function, too
                if (tokenStream.match([Tokens.IE_FUNCTION, Tokens.FUNCTION])){
                    functionText = tokenStream.token().value;

                    do {

                        if (this._readWhitespace()){
                            functionText += tokenStream.token().value;
                        }

                        //might be second time in the loop
                        if (tokenStream.LA(0) === Tokens.COMMA){
                            functionText += tokenStream.token().value;
                        }

                        tokenStream.match(Tokens.IDENT);
                        functionText += tokenStream.token().value;

                        tokenStream.match(Tokens.EQUALS);
                        functionText += tokenStream.token().value;

                        //functionText += this._term();
                        lt = tokenStream.peek();
                        while(lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN){
                            tokenStream.get();
                            functionText += tokenStream.token().value;
                            lt = tokenStream.peek();
                        }
                    } while(tokenStream.match([Tokens.COMMA, Tokens.S]));

                    tokenStream.match(Tokens.RPAREN);
                    functionText += ")";
                    this._readWhitespace();
                }

                return functionText;
            },

            _hexcolor: function(){
                /*
                 * There is a constraint on the color that it must
                 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])
                 * after the "#"; e.g., "#000" is OK, but "#abcd" is not.
                 *
                 * hexcolor
                 *   : HASH S*
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    token = null,
                    color;

                if(tokenStream.match(Tokens.HASH)){

                    //need to do some validation here

                    token = tokenStream.token();
                    color = token.value;
                    if (!/#[a-f0-9]{3,6}/i.test(color)){
                        throw new SyntaxError("Expected a hex color but found '" + color + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
                    }
                    this._readWhitespace();
                }

                return token;
            },

            //-----------------------------------------------------------------
            // Animations methods
            //-----------------------------------------------------------------

            _keyframes: function(){

                /*
                 * keyframes:
                 *   : KEYFRAMES_SYM S* keyframe_name S* '{' S* keyframe_rule* '}' {
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    token,
                    tt,
                    name,
                    prefix = "";

                tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);
                token = tokenStream.token();
                if (/^@\-([^\-]+)\-/.test(token.value)) {
                    prefix = RegExp.$1;
                }

                this._readWhitespace();
                name = this._keyframe_name();

                this._readWhitespace();
                tokenStream.mustMatch(Tokens.LBRACE);

                this.fire({
                    type:   "startkeyframes",
                    name:   name,
                    prefix: prefix,
                    line:   token.startLine,
                    col:    token.startCol
                });

                this._readWhitespace();
                tt = tokenStream.peek();

                //check for key
                while(tt === Tokens.IDENT || tt === Tokens.PERCENTAGE) {
                    this._keyframe_rule();
                    this._readWhitespace();
                    tt = tokenStream.peek();
                }

                this.fire({
                    type:   "endkeyframes",
                    name:   name,
                    prefix: prefix,
                    line:   token.startLine,
                    col:    token.startCol
                });

                this._readWhitespace();
                tokenStream.mustMatch(Tokens.RBRACE);

            },

            _keyframe_name: function(){

                /*
                 * keyframe_name:
                 *   : IDENT
                 *   | STRING
                 *   ;
                 */
                var tokenStream = this._tokenStream;

                tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
                return SyntaxUnit.fromToken(tokenStream.token());
            },

            _keyframe_rule: function(){

                /*
                 * keyframe_rule:
                 *   : key_list S*
                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*
                 *   ;
                 */
                var keyList = this._key_list();

                this.fire({
                    type:   "startkeyframerule",
                    keys:   keyList,
                    line:   keyList[0].line,
                    col:    keyList[0].col
                });

                this._readDeclarations(true);

                this.fire({
                    type:   "endkeyframerule",
                    keys:   keyList,
                    line:   keyList[0].line,
                    col:    keyList[0].col
                });

            },

            _key_list: function(){

                /*
                 * key_list:
                 *   : key [ S* ',' S* key]*
                 *   ;
                 */
                var tokenStream = this._tokenStream,
                    keyList = [];

                //must be least one key
                keyList.push(this._key());

                this._readWhitespace();

                while(tokenStream.match(Tokens.COMMA)){
                    this._readWhitespace();
                    keyList.push(this._key());
                    this._readWhitespace();
                }

                return keyList;
            },

            _key: function(){
                /*
                 * There is a restriction that IDENT can be only "from" or "to".
                 *
                 * key
                 *   : PERCENTAGE
                 *   | IDENT
                 *   ;
                 */

                var tokenStream = this._tokenStream,
                    token;

                if (tokenStream.match(Tokens.PERCENTAGE)){
                    return SyntaxUnit.fromToken(tokenStream.token());
                } else if (tokenStream.match(Tokens.IDENT)){
                    token = tokenStream.token();

                    if (/from|to/i.test(token.value)){
                        return SyntaxUnit.fromToken(token);
                    }

                    tokenStream.unget();
                }

                //if it gets here, there wasn't a valid token, so time to explode
                this._unexpectedToken(tokenStream.LT(1));
            },

            //-----------------------------------------------------------------
            // Helper methods
            //-----------------------------------------------------------------

            /**
             * Not part of CSS grammar, but useful for skipping over
             * combination of white space and HTML-style comments.
             * @return {void}
             * @method _skipCruft
             * @private
             */
            _skipCruft: function(){
                while(this._tokenStream.match([Tokens.S, Tokens.CDO, Tokens.CDC])){
                    //noop
                }
            },

            /**
             * Not part of CSS grammar, but this pattern occurs frequently
             * in the official CSS grammar. Split out here to eliminate
             * duplicate code.
             * @param {Boolean} checkStart Indicates if the rule should check
             *      for the left brace at the beginning.
             * @param {Boolean} readMargins Indicates if the rule should check
             *      for margin patterns.
             * @return {void}
             * @method _readDeclarations
             * @private
             */
            _readDeclarations: function(checkStart, readMargins){
                /*
                 * Reads the pattern
                 * S* '{' S* declaration [ ';' S* declaration ]* '}' S*
                 * or
                 * S* '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*
                 * Note that this is how it is described in CSS3 Paged Media, but is actually incorrect.
                 * A semicolon is only necessary following a declaration if there's another declaration
                 * or margin afterwards.
                 */
                var tokenStream = this._tokenStream,
                    tt;


                this._readWhitespace();

                if (checkStart){
                    tokenStream.mustMatch(Tokens.LBRACE);
                }

                this._readWhitespace();

                try {

                    while(true){

                        if (tokenStream.match(Tokens.SEMICOLON) || (readMargins && this._margin())){
                            //noop
                        } else if (this._declaration()){
                            if (!tokenStream.match(Tokens.SEMICOLON)){
                                break;
                            }
                        } else {
                            break;
                        }

                        //if ((!this._margin() && !this._declaration()) || !tokenStream.match(Tokens.SEMICOLON)){
                        //    break;
                        //}
                        this._readWhitespace();
                    }

                    tokenStream.mustMatch(Tokens.RBRACE);
                    this._readWhitespace();

                } catch (ex) {
                    if (ex instanceof SyntaxError && !this.options.strict){

                        //fire error event
                        this.fire({
                            type:       "error",
                            error:      ex,
                            message:    ex.message,
                            line:       ex.line,
                            col:        ex.col
                        });

                        //see if there's another declaration
                        tt = tokenStream.advance([Tokens.SEMICOLON, Tokens.RBRACE]);
                        if (tt === Tokens.SEMICOLON){
                            //if there's a semicolon, then there might be another declaration
                            this._readDeclarations(false, readMargins);
                        } else if (tt !== Tokens.RBRACE){
                            //if there's a right brace, the rule is finished so don't do anything
                            //otherwise, rethrow the error because it wasn't handled properly
                            throw ex;
                        }

                    } else {
                        //not a syntax error, rethrow it
                        throw ex;
                    }
                }

            },

            /**
             * In some cases, you can end up with two white space tokens in a
             * row. Instead of making a change in every function that looks for
             * white space, this function is used to match as much white space
             * as necessary.
             * @method _readWhitespace
             * @return {String} The white space if found, empty string if not.
             * @private
             */
            _readWhitespace: function(){

                var tokenStream = this._tokenStream,
                    ws = "";

                while(tokenStream.match(Tokens.S)){
                    ws += tokenStream.token().value;
                }

                return ws;
            },


            /**
             * Throws an error when an unexpected token is found.
             * @param {Object} token The token that was found.
             * @method _unexpectedToken
             * @return {void}
             * @private
             */
            _unexpectedToken: function(token){
                throw new SyntaxError("Unexpected token '" + token.value + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
            },

            /**
             * Helper method used for parsing subparts of a style sheet.
             * @return {void}
             * @method _verifyEnd
             * @private
             */
            _verifyEnd: function(){
                if (this._tokenStream.LA(1) !== Tokens.EOF){
                    this._unexpectedToken(this._tokenStream.LT(1));
                }
            },

            //-----------------------------------------------------------------
            // Validation methods
            //-----------------------------------------------------------------
            _validateProperty: function(property, value){
                Validation.validate(property, value);
            },

            //-----------------------------------------------------------------
            // Parsing methods
            //-----------------------------------------------------------------

            parse: function(input){
                this._tokenStream = new TokenStream(input, Tokens);
                this._stylesheet();
            },

            parseStyleSheet: function(input){
                //just passthrough
                return this.parse(input);
            },

            parseMediaQuery: function(input){
                this._tokenStream = new TokenStream(input, Tokens);
                var result = this._media_query();

                //if there's anything more, then it's an invalid selector
                this._verifyEnd();

                //otherwise return result
                return result;
            },

            /**
             * Parses a property value (everything after the semicolon).
             * @return {parserlib.css.PropertyValue} The property value.
             * @throws parserlib.util.SyntaxError If an unexpected token is found.
             * @method parserPropertyValue
             */
            parsePropertyValue: function(input){

                this._tokenStream = new TokenStream(input, Tokens);
                this._readWhitespace();

                var result = this._expr();

                //okay to have a trailing white space
                this._readWhitespace();

                //if there's anything more, then it's an invalid selector
                this._verifyEnd();

                //otherwise return result
                return result;
            },

            /**
             * Parses a complete CSS rule, including selectors and
             * properties.
             * @param {String} input The text to parser.
             * @return {Boolean} True if the parse completed successfully, false if not.
             * @method parseRule
             */
            parseRule: function(input){
                this._tokenStream = new TokenStream(input, Tokens);

                //skip any leading white space
                this._readWhitespace();

                var result = this._ruleset();

                //skip any trailing white space
                this._readWhitespace();

                //if there's anything more, then it's an invalid selector
                this._verifyEnd();

                //otherwise return result
                return result;
            },

            /**
             * Parses a single CSS selector (no comma)
             * @param {String} input The text to parse as a CSS selector.
             * @return {Selector} An object representing the selector.
             * @throws parserlib.util.SyntaxError If an unexpected token is found.
             * @method parseSelector
             */
            parseSelector: function(input){

                this._tokenStream = new TokenStream(input, Tokens);

                //skip any leading white space
                this._readWhitespace();

                var result = this._selector();

                //skip any trailing white space
                this._readWhitespace();

                //if there's anything more, then it's an invalid selector
                this._verifyEnd();

                //otherwise return result
                return result;
            },

            /**
             * Parses an HTML style attribute: a set of CSS declarations
             * separated by semicolons.
             * @param {String} input The text to parse as a style attribute
             * @return {void}
             * @method parseStyleAttribute
             */
            parseStyleAttribute: function(input){
                input += "}"; // for error recovery in _readDeclarations()
                this._tokenStream = new TokenStream(input, Tokens);
                this._readDeclarations();
            }
        };

    //copy over onto prototype
    for (prop in additions){
        if (Object.prototype.hasOwnProperty.call(additions, prop)){
            proto[prop] = additions[prop];
        }
    }

    return proto;
}();


/*
nth
  : S* [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]? |
         ['-'|'+']? INTEGER | {O}{D}{D} | {E}{V}{E}{N} ] S*
  ;
*/
var Properties = {
    __proto__: null,

    //A
    "align-items"                   : "flex-start | flex-end | center | baseline | stretch",
    "align-content"                 : "flex-start | flex-end | center | space-between | space-around | stretch",
    "align-self"                    : "auto | flex-start | flex-end | center | baseline | stretch",
    "-webkit-align-items"           : "flex-start | flex-end | center | baseline | stretch",
    "-webkit-align-content"         : "flex-start | flex-end | center | space-between | space-around | stretch",
    "-webkit-align-self"            : "auto | flex-start | flex-end | center | baseline | stretch",
    "alignment-adjust"              : "auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>",
    "alignment-baseline"            : "baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "animation"                     : 1,
    "animation-delay"               : { multi: "<time>", comma: true },
    "animation-direction"           : { multi: "normal | alternate", comma: true },
    "animation-duration"            : { multi: "<time>", comma: true },
    "animation-fill-mode"           : { multi: "none | forwards | backwards | both", comma: true },
    "animation-iteration-count"     : { multi: "<number> | infinite", comma: true },
    "animation-name"                : { multi: "none | <ident>", comma: true },
    "animation-play-state"          : { multi: "running | paused", comma: true },
    "animation-timing-function"     : 1,

    //vendor prefixed
    "-moz-animation-delay"               : { multi: "<time>", comma: true },
    "-moz-animation-direction"           : { multi: "normal | alternate", comma: true },
    "-moz-animation-duration"            : { multi: "<time>", comma: true },
    "-moz-animation-iteration-count"     : { multi: "<number> | infinite", comma: true },
    "-moz-animation-name"                : { multi: "none | <ident>", comma: true },
    "-moz-animation-play-state"          : { multi: "running | paused", comma: true },

    "-ms-animation-delay"               : { multi: "<time>", comma: true },
    "-ms-animation-direction"           : { multi: "normal | alternate", comma: true },
    "-ms-animation-duration"            : { multi: "<time>", comma: true },
    "-ms-animation-iteration-count"     : { multi: "<number> | infinite", comma: true },
    "-ms-animation-name"                : { multi: "none | <ident>", comma: true },
    "-ms-animation-play-state"          : { multi: "running | paused", comma: true },

    "-webkit-animation-delay"               : { multi: "<time>", comma: true },
    "-webkit-animation-direction"           : { multi: "normal | alternate", comma: true },
    "-webkit-animation-duration"            : { multi: "<time>", comma: true },
    "-webkit-animation-fill-mode"           : { multi: "none | forwards | backwards | both", comma: true },
    "-webkit-animation-iteration-count"     : { multi: "<number> | infinite", comma: true },
    "-webkit-animation-name"                : { multi: "none | <ident>", comma: true },
    "-webkit-animation-play-state"          : { multi: "running | paused", comma: true },

    "-o-animation-delay"               : { multi: "<time>", comma: true },
    "-o-animation-direction"           : { multi: "normal | alternate", comma: true },
    "-o-animation-duration"            : { multi: "<time>", comma: true },
    "-o-animation-iteration-count"     : { multi: "<number> | infinite", comma: true },
    "-o-animation-name"                : { multi: "none | <ident>", comma: true },
    "-o-animation-play-state"          : { multi: "running | paused", comma: true },

    "appearance"                    : "icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit",
    "azimuth"                       : function (expression) {
        var simple      = "<angle> | leftwards | rightwards | inherit",
            direction   = "left-side | far-left | left | center-left | center | center-right | right | far-right | right-side",
            behind      = false,
            valid       = false,
            part;

        if (!ValidationTypes.isAny(expression, simple)) {
            if (ValidationTypes.isAny(expression, "behind")) {
                behind = true;
                valid = true;
            }

            if (ValidationTypes.isAny(expression, direction)) {
                valid = true;
                if (!behind) {
                    ValidationTypes.isAny(expression, "behind");
                }
            }
        }

        if (expression.hasNext()) {
            part = expression.next();
            if (valid) {
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                throw new ValidationError("Expected (<'azimuth'>) but found '" + part + "'.", part.line, part.col);
            }
        }
    },

    //B
    "backface-visibility"           : "visible | hidden",
    "background"                    : 1,
    "background-attachment"         : { multi: "<attachment>", comma: true },
    "background-clip"               : { multi: "<box>", comma: true },
    "background-color"              : "<color> | inherit",
    "background-image"              : { multi: "<bg-image>", comma: true },
    "background-origin"             : { multi: "<box>", comma: true },
    "background-position"           : { multi: "<bg-position>", comma: true },
    "background-repeat"             : { multi: "<repeat-style>" },
    "background-size"               : { multi: "<bg-size>", comma: true },
    "baseline-shift"                : "baseline | sub | super | <percentage> | <length>",
    "behavior"                      : 1,
    "binding"                       : 1,
    "bleed"                         : "<length>",
    "bookmark-label"                : "<content> | <attr> | <string>",
    "bookmark-level"                : "none | <integer>",
    "bookmark-state"                : "open | closed",
    "bookmark-target"               : "none | <uri> | <attr>",
    "border"                        : "<border-width> || <border-style> || <color>",
    "border-bottom"                 : "<border-width> || <border-style> || <color>",
    "border-bottom-color"           : "<color> | inherit",
    "border-bottom-left-radius"     :  "<x-one-radius>",
    "border-bottom-right-radius"    :  "<x-one-radius>",
    "border-bottom-style"           : "<border-style>",
    "border-bottom-width"           : "<border-width>",
    "border-collapse"               : "collapse | separate | inherit",
    "border-color"                  : { multi: "<color> | inherit", max: 4 },
    "border-image"                  : 1,
    "border-image-outset"           : { multi: "<length> | <number>", max: 4 },
    "border-image-repeat"           : { multi: "stretch | repeat | round", max: 2 },
    "border-image-slice"            : function(expression) {

        var valid   = false,
            numeric = "<number> | <percentage>",
            fill    = false,
            count   = 0,
            max     = 4,
            part;

        if (ValidationTypes.isAny(expression, "fill")) {
            fill = true;
            valid = true;
        }

        while (expression.hasNext() && count < max) {
            valid = ValidationTypes.isAny(expression, numeric);
            if (!valid) {
                break;
            }
            count++;
        }


        if (!fill) {
            ValidationTypes.isAny(expression, "fill");
        } else {
            valid = true;
        }

        if (expression.hasNext()) {
            part = expression.next();
            if (valid) {
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                throw new ValidationError("Expected ([<number> | <percentage>]{1,4} && fill?) but found '" + part + "'.", part.line, part.col);
            }
        }
    },
    "border-image-source"           : "<image> | none",
    "border-image-width"            : { multi: "<length> | <percentage> | <number> | auto", max: 4 },
    "border-left"                   : "<border-width> || <border-style> || <color>",
    "border-left-color"             : "<color> | inherit",
    "border-left-style"             : "<border-style>",
    "border-left-width"             : "<border-width>",
    "border-radius"                 : function(expression) {

        var valid   = false,
            simple = "<length> | <percentage> | inherit",
            slash   = false,
            count   = 0,
            max     = 8,
            part;

        while (expression.hasNext() && count < max) {
            valid = ValidationTypes.isAny(expression, simple);
            if (!valid) {

                if (String(expression.peek()) === "/" && count > 0 && !slash) {
                    slash = true;
                    max = count + 5;
                    expression.next();
                } else {
                    break;
                }
            }
            count++;
        }

        if (expression.hasNext()) {
            part = expression.next();
            if (valid) {
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                throw new ValidationError("Expected (<'border-radius'>) but found '" + part + "'.", part.line, part.col);
            }
        }
    },
    "border-right"                  : "<border-width> || <border-style> || <color>",
    "border-right-color"            : "<color> | inherit",
    "border-right-style"            : "<border-style>",
    "border-right-width"            : "<border-width>",
    "border-spacing"                : { multi: "<length> | inherit", max: 2 },
    "border-style"                  : { multi: "<border-style>", max: 4 },
    "border-top"                    : "<border-width> || <border-style> || <color>",
    "border-top-color"              : "<color> | inherit",
    "border-top-left-radius"        : "<x-one-radius>",
    "border-top-right-radius"       : "<x-one-radius>",
    "border-top-style"              : "<border-style>",
    "border-top-width"              : "<border-width>",
    "border-width"                  : { multi: "<border-width>", max: 4 },
    "bottom"                        : "<margin-width> | inherit",
    "-moz-box-align"                : "start | end | center | baseline | stretch",
    "-moz-box-decoration-break"     : "slice |clone",
    "-moz-box-direction"            : "normal | reverse | inherit",
    "-moz-box-flex"                 : "<number>",
    "-moz-box-flex-group"           : "<integer>",
    "-moz-box-lines"                : "single | multiple",
    "-moz-box-ordinal-group"        : "<integer>",
    "-moz-box-orient"               : "horizontal | vertical | inline-axis | block-axis | inherit",
    "-moz-box-pack"                 : "start | end | center | justify",
    "-o-box-decoration-break"       : "slice | clone",
    "-webkit-box-align"             : "start | end | center | baseline | stretch",
    "-webkit-box-decoration-break"  : "slice |clone",
    "-webkit-box-direction"         : "normal | reverse | inherit",
    "-webkit-box-flex"              : "<number>",
    "-webkit-box-flex-group"        : "<integer>",
    "-webkit-box-lines"             : "single | multiple",
    "-webkit-box-ordinal-group"     : "<integer>",
    "-webkit-box-orient"            : "horizontal | vertical | inline-axis | block-axis | inherit",
    "-webkit-box-pack"              : "start | end | center | justify",
    "box-decoration-break"          : "slice | clone",
    "box-shadow"                    : function (expression) {
        var part;

        if (!ValidationTypes.isAny(expression, "none")) {
            Validation.multiProperty("<shadow>", expression, true, Infinity);
        } else {
            if (expression.hasNext()) {
                part = expression.next();
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            }
        }
    },
    "box-sizing"                    : "content-box | border-box | inherit",
    "break-after"                   : "auto | always | avoid | left | right | page | column | avoid-page | avoid-column",
    "break-before"                  : "auto | always | avoid | left | right | page | column | avoid-page | avoid-column",
    "break-inside"                  : "auto | avoid | avoid-page | avoid-column",

    //C
    "caption-side"                  : "top | bottom | inherit",
    "clear"                         : "none | right | left | both | inherit",
    "clip"                          : 1,
    "color"                         : "<color> | inherit",
    "color-profile"                 : 1,
    "column-count"                  : "<integer> | auto",                      //http://www.w3.org/TR/css3-multicol/
    "column-fill"                   : "auto | balance",
    "column-gap"                    : "<length> | normal",
    "column-rule"                   : "<border-width> || <border-style> || <color>",
    "column-rule-color"             : "<color>",
    "column-rule-style"             : "<border-style>",
    "column-rule-width"             : "<border-width>",
    "column-span"                   : "none | all",
    "column-width"                  : "<length> | auto",
    "columns"                       : 1,
    "content"                       : 1,
    "counter-increment"             : 1,
    "counter-reset"                 : 1,
    "crop"                          : "<shape> | auto",
    "cue"                           : "cue-after | cue-before | inherit",
    "cue-after"                     : 1,
    "cue-before"                    : 1,
    "cursor"                        : 1,

    //D
    "direction"                     : "ltr | rtl | inherit",
    "display"                       : "inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex",
    "dominant-baseline"             : 1,
    "drop-initial-after-adjust"     : "central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>",
    "drop-initial-after-align"      : "baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "drop-initial-before-adjust"    : "before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>",
    "drop-initial-before-align"     : "caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "drop-initial-size"             : "auto | line | <length> | <percentage>",
    "drop-initial-value"            : "initial | <integer>",

    //E
    "elevation"                     : "<angle> | below | level | above | higher | lower | inherit",
    "empty-cells"                   : "show | hide | inherit",

    //F
    "filter"                        : 1,
    "fit"                           : "fill | hidden | meet | slice",
    "fit-position"                  : 1,
    "flex"                          : "<flex>",
    "flex-basis"                    : "<width>",
    "flex-direction"                : "row | row-reverse | column | column-reverse",
    "flex-flow"                     : "<flex-direction> || <flex-wrap>",
    "flex-grow"                     : "<number>",
    "flex-shrink"                   : "<number>",
    "flex-wrap"                     : "nowrap | wrap | wrap-reverse",
    "-webkit-flex"                  : "<flex>",
    "-webkit-flex-basis"            : "<width>",
    "-webkit-flex-direction"        : "row | row-reverse | column | column-reverse",
    "-webkit-flex-flow"             : "<flex-direction> || <flex-wrap>",
    "-webkit-flex-grow"             : "<number>",
    "-webkit-flex-shrink"           : "<number>",
    "-webkit-flex-wrap"             : "nowrap | wrap | wrap-reverse",
    "-ms-flex"                      : "<flex>",
    "-ms-flex-align"                : "start | end | center | stretch | baseline",
    "-ms-flex-direction"            : "row | row-reverse | column | column-reverse | inherit",
    "-ms-flex-order"                : "<number>",
    "-ms-flex-pack"                 : "start | end | center | justify",
    "-ms-flex-wrap"                 : "nowrap | wrap | wrap-reverse",
    "float"                         : "left | right | none | inherit",
    "float-offset"                  : 1,
    "font"                          : 1,
    "font-family"                   : 1,
    "font-feature-settings"         : "<feature-tag-value> | normal | inherit",
    "font-kerning"                  : "auto | normal | none | initial | inherit | unset",
    "font-size"                     : "<absolute-size> | <relative-size> | <length> | <percentage> | inherit",
    "font-size-adjust"              : "<number> | none | inherit",
    "font-stretch"                  : "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit",
    "font-style"                    : "normal | italic | oblique | inherit",
    "font-variant"                  : "normal | small-caps | inherit",
    "font-variant-caps"             : "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
    "font-variant-position"         : "normal | sub | super | inherit | initial | unset",
    "font-weight"                   : "normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit",

    //G
    "grid"                          : 1,
    "grid-area"                     : 1,
    "grid-auto-columns"             : 1,
    "grid-auto-flow"                : 1,
    "grid-auto-position"            : 1,
    "grid-auto-rows"                : 1,
    "grid-cell-stacking"            : "columns | rows | layer",
    "grid-column"                   : 1,
    "grid-columns"                  : 1,
    "grid-column-align"             : "start | end | center | stretch",
    "grid-column-sizing"            : 1,
    "grid-column-start"             : 1,
    "grid-column-end"               : 1,
    "grid-column-span"              : "<integer>",
    "grid-flow"                     : "none | rows | columns",
    "grid-layer"                    : "<integer>",
    "grid-row"                      : 1,
    "grid-rows"                     : 1,
    "grid-row-align"                : "start | end | center | stretch",
    "grid-row-start"                : 1,
    "grid-row-end"                  : 1,
    "grid-row-span"                 : "<integer>",
    "grid-row-sizing"               : 1,
    "grid-template"                 : 1,
    "grid-template-areas"           : 1,
    "grid-template-columns"         : 1,
    "grid-template-rows"            : 1,

    //H
    "hanging-punctuation"           : 1,
    "height"                        : "<margin-width> | <content-sizing> | inherit",
    "hyphenate-after"               : "<integer> | auto",
    "hyphenate-before"              : "<integer> | auto",
    "hyphenate-character"           : "<string> | auto",
    "hyphenate-lines"               : "no-limit | <integer>",
    "hyphenate-resource"            : 1,
    "hyphens"                       : "none | manual | auto",

    //I
    "icon"                          : 1,
    "image-orientation"             : "angle | auto",
    "image-rendering"               : 1,
    "image-resolution"              : 1,
    "ime-mode"                      : "auto | normal | active | inactive | disabled | inherit",
    "inline-box-align"              : "initial | last | <integer>",

    //J
    "justify-content"               : "flex-start | flex-end | center | space-between | space-around",
    "-webkit-justify-content"       : "flex-start | flex-end | center | space-between | space-around",

    //L
    "left"                          : "<margin-width> | inherit",
    "letter-spacing"                : "<length> | normal | inherit",
    "line-height"                   : "<number> | <length> | <percentage> | normal | inherit",
    "line-break"                    : "auto | loose | normal | strict",
    "line-stacking"                 : 1,
    "line-stacking-ruby"            : "exclude-ruby | include-ruby",
    "line-stacking-shift"           : "consider-shifts | disregard-shifts",
    "line-stacking-strategy"        : "inline-line-height | block-line-height | max-height | grid-height",
    "list-style"                    : 1,
    "list-style-image"              : "<uri> | none | inherit",
    "list-style-position"           : "inside | outside | inherit",
    "list-style-type"               : "disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit",

    //M
    "margin"                        : { multi: "<margin-width> | inherit", max: 4 },
    "margin-bottom"                 : "<margin-width> | inherit",
    "margin-left"                   : "<margin-width> | inherit",
    "margin-right"                  : "<margin-width> | inherit",
    "margin-top"                    : "<margin-width> | inherit",
    "mark"                          : 1,
    "mark-after"                    : 1,
    "mark-before"                   : 1,
    "marks"                         : 1,
    "marquee-direction"             : 1,
    "marquee-play-count"            : 1,
    "marquee-speed"                 : 1,
    "marquee-style"                 : 1,
    "max-height"                    : "<length> | <percentage> | <content-sizing> | none | inherit",
    "max-width"                     : "<length> | <percentage> | <content-sizing> | none | inherit",
    "min-height"                    : "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit",
    "min-width"                     : "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit",
    "move-to"                       : 1,

    //N
    "nav-down"                      : 1,
    "nav-index"                     : 1,
    "nav-left"                      : 1,
    "nav-right"                     : 1,
    "nav-up"                        : 1,

    //O
    "object-fit"                    : "fill | contain | cover | none | scale-down",
    "object-position"               : "<bg-position>",
    "opacity"                       : "<number> | inherit",
    "order"                         : "<integer>",
    "-webkit-order"                 : "<integer>",
    "orphans"                       : "<integer> | inherit",
    "outline"                       : 1,
    "outline-color"                 : "<color> | invert | inherit",
    "outline-offset"                : 1,
    "outline-style"                 : "<border-style> | inherit",
    "outline-width"                 : "<border-width> | inherit",
    "overflow"                      : "visible | hidden | scroll | auto | inherit",
    "overflow-style"                : 1,
    "overflow-wrap"                 : "normal | break-word",
    "overflow-x"                    : 1,
    "overflow-y"                    : 1,

    //P
    "padding"                       : { multi: "<padding-width> | inherit", max: 4 },
    "padding-bottom"                : "<padding-width> | inherit",
    "padding-left"                  : "<padding-width> | inherit",
    "padding-right"                 : "<padding-width> | inherit",
    "padding-top"                   : "<padding-width> | inherit",
    "page"                          : 1,
    "page-break-after"              : "auto | always | avoid | left | right | inherit",
    "page-break-before"             : "auto | always | avoid | left | right | inherit",
    "page-break-inside"             : "auto | avoid | inherit",
    "page-policy"                   : 1,
    "pause"                         : 1,
    "pause-after"                   : 1,
    "pause-before"                  : 1,
    "perspective"                   : 1,
    "perspective-origin"            : 1,
    "phonemes"                      : 1,
    "pitch"                         : 1,
    "pitch-range"                   : 1,
    "play-during"                   : 1,
    "pointer-events"                : "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
    "position"                      : "static | relative | absolute | fixed | inherit",
    "presentation-level"            : 1,
    "punctuation-trim"              : 1,

    //Q
    "quotes"                        : 1,

    //R
    "rendering-intent"              : 1,
    "resize"                        : 1,
    "rest"                          : 1,
    "rest-after"                    : 1,
    "rest-before"                   : 1,
    "richness"                      : 1,
    "right"                         : "<margin-width> | inherit",
    "rotation"                      : 1,
    "rotation-point"                : 1,
    "ruby-align"                    : 1,
    "ruby-overhang"                 : 1,
    "ruby-position"                 : 1,
    "ruby-span"                     : 1,

    //S
    "size"                          : 1,
    "speak"                         : "normal | none | spell-out | inherit",
    "speak-header"                  : "once | always | inherit",
    "speak-numeral"                 : "digits | continuous | inherit",
    "speak-punctuation"             : "code | none | inherit",
    "speech-rate"                   : 1,
    "src"                           : 1,
    "stress"                        : 1,
    "string-set"                    : 1,

    "table-layout"                  : "auto | fixed | inherit",
    "tab-size"                      : "<integer> | <length>",
    "target"                        : 1,
    "target-name"                   : 1,
    "target-new"                    : 1,
    "target-position"               : 1,
    "text-align"                    : "left | right | center | justify | match-parent | start | end | inherit" ,
    "text-align-last"               : 1,
    "text-decoration"               : 1,
    "text-emphasis"                 : 1,
    "text-height"                   : 1,
    "text-indent"                   : "<length> | <percentage> | inherit",
    "text-justify"                  : "auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida",
    "text-outline"                  : 1,
    "text-overflow"                 : 1,
    "text-rendering"                : "auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit",
    "text-shadow"                   : 1,
    "text-transform"                : "capitalize | uppercase | lowercase | none | inherit",
    "text-wrap"                     : "normal | none | avoid",
    "top"                           : "<margin-width> | inherit",
    "-ms-touch-action"              : "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",
    "touch-action"                  : "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",
    "transform"                     : 1,
    "transform-origin"              : 1,
    "transform-style"               : 1,
    "transition"                    : 1,
    "transition-delay"              : 1,
    "transition-duration"           : 1,
    "transition-property"           : 1,
    "transition-timing-function"    : 1,

    //U
    "unicode-bidi"                  : "normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit",
    "user-modify"                   : "read-only | read-write | write-only | inherit",
    "user-select"                   : "none | text | toggle | element | elements | all | inherit",

    //V
    "vertical-align"                : "auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length> | inherit",
    "visibility"                    : "visible | hidden | collapse | inherit",
    "voice-balance"                 : 1,
    "voice-duration"                : 1,
    "voice-family"                  : 1,
    "voice-pitch"                   : 1,
    "voice-pitch-range"             : 1,
    "voice-rate"                    : 1,
    "voice-stress"                  : 1,
    "voice-volume"                  : 1,
    "volume"                        : 1,

    //W
    "white-space"                   : "normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap", //http://perishablepress.com/wrapping-content/
    "white-space-collapse"          : 1,
    "widows"                        : "<integer> | inherit",
    "width"                         : "<length> | <percentage> | <content-sizing> | auto | inherit",
    "will-change"                   : { multi: "<ident>", comma: true },
    "word-break"                    : "normal | keep-all | break-all",
    "word-spacing"                  : "<length> | normal | inherit",
    "word-wrap"                     : "normal | break-word",
    "writing-mode"                  : "horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit",

    //Z
    "z-index"                       : "<integer> | auto | inherit",
    "zoom"                          : "<number> | <percentage> | normal"
};
/**
 * Represents a selector combinator (whitespace, +, >).
 * @namespace parserlib.css
 * @class PropertyName
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {String} text The text representation of the unit.
 * @param {String} hack The type of IE hack applied ("*", "_", or null).
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function PropertyName(text, hack, line, col){

    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);

    /**
     * The type of IE hack applied ("*", "_", or null).
     * @type String
     * @property hack
     */
    this.hack = hack;

}

PropertyName.prototype = new SyntaxUnit();
PropertyName.prototype.constructor = PropertyName;
PropertyName.prototype.toString = function(){
    return (this.hack ? this.hack : "") + this.text;
};
/**
 * Represents a single part of a CSS property value, meaning that it represents
 * just everything single part between ":" and ";". If there are multiple values
 * separated by commas, this type represents just one of the values.
 * @param {String[]} parts An array of value parts making up this value.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 * @namespace parserlib.css
 * @class PropertyValue
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 */
function PropertyValue(parts, line, col){

    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.PROPERTY_VALUE_TYPE);

    /**
     * The parts that make up the selector.
     * @type Array
     * @property parts
     */
    this.parts = parts;

}

PropertyValue.prototype = new SyntaxUnit();
PropertyValue.prototype.constructor = PropertyValue;

/**
 * A utility class that allows for easy iteration over the various parts of a
 * property value.
 * @param {parserlib.css.PropertyValue} value The property value to iterate over.
 * @namespace parserlib.css
 * @class PropertyValueIterator
 * @constructor
 */
function PropertyValueIterator(value){

    /**
     * Iterator value
     * @type int
     * @property _i
     * @private
     */
    this._i = 0;

    /**
     * The parts that make up the value.
     * @type Array
     * @property _parts
     * @private
     */
    this._parts = value.parts;

    /**
     * Keeps track of bookmarks along the way.
     * @type Array
     * @property _marks
     * @private
     */
    this._marks = [];

    /**
     * Holds the original property value.
     * @type parserlib.css.PropertyValue
     * @property value
     */
    this.value = value;

}

/**
 * Returns the total number of parts in the value.
 * @return {int} The total number of parts in the value.
 * @method count
 */
PropertyValueIterator.prototype.count = function(){
    return this._parts.length;
};

/**
 * Indicates if the iterator is positioned at the first item.
 * @return {Boolean} True if positioned at first item, false if not.
 * @method isFirst
 */
PropertyValueIterator.prototype.isFirst = function(){
    return this._i === 0;
};

/**
 * Indicates if there are more parts of the property value.
 * @return {Boolean} True if there are more parts, false if not.
 * @method hasNext
 */
PropertyValueIterator.prototype.hasNext = function(){
    return (this._i < this._parts.length);
};

/**
 * Marks the current spot in the iteration so it can be restored to
 * later on.
 * @return {void}
 * @method mark
 */
PropertyValueIterator.prototype.mark = function(){
    this._marks.push(this._i);
};

/**
 * Returns the next part of the property value or null if there is no next
 * part. Does not move the internal counter forward.
 * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next
 * part.
 * @method peek
 */
PropertyValueIterator.prototype.peek = function(count){
    return this.hasNext() ? this._parts[this._i + (count || 0)] : null;
};

/**
 * Returns the next part of the property value or null if there is no next
 * part.
 * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next
 * part.
 * @method next
 */
PropertyValueIterator.prototype.next = function(){
    return this.hasNext() ? this._parts[this._i++] : null;
};

/**
 * Returns the previous part of the property value or null if there is no
 * previous part.
 * @return {parserlib.css.PropertyValuePart} The previous part of the
 * property value or null if there is no previous part.
 * @method previous
 */
PropertyValueIterator.prototype.previous = function(){
    return this._i > 0 ? this._parts[--this._i] : null;
};

/**
 * Restores the last saved bookmark.
 * @return {void}
 * @method restore
 */
PropertyValueIterator.prototype.restore = function(){
    if (this._marks.length){
        this._i = this._marks.pop();
    }
};

/**
 * Represents a single part of a CSS property value, meaning that it represents
 * just one part of the data between ":" and ";".
 * @param {String} text The text representation of the unit.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 * @namespace parserlib.css
 * @class PropertyValuePart
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 */
function PropertyValuePart(text, line, col){

    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);

    /**
     * Indicates the type of value unit.
     * @type String
     * @property type
     */
    this.type = "unknown";

    //figure out what type of data it is

    var temp;

    //it is a measurement?
    if (/^([+\-]?[\d\.]+)([a-z]+)$/i.test(text)){  //dimension
        this.type = "dimension";
        this.value = +RegExp.$1;
        this.units = RegExp.$2;

        //try to narrow down
        switch(this.units.toLowerCase()){

            case "em":
            case "rem":
            case "ex":
            case "px":
            case "cm":
            case "mm":
            case "in":
            case "pt":
            case "pc":
            case "ch":
            case "vh":
            case "vw":
            case "vmax":
            case "vmin":
                this.type = "length";
                break;
                
            case "fr":
                this.type = "grid";
                break;

            case "deg":
            case "rad":
            case "grad":
                this.type = "angle";
                break;

            case "ms":
            case "s":
                this.type = "time";
                break;

            case "hz":
            case "khz":
                this.type = "frequency";
                break;

            case "dpi":
            case "dpcm":
                this.type = "resolution";
                break;

            //default

        }

    } else if (/^([+\-]?[\d\.]+)%$/i.test(text)){  //percentage
        this.type = "percentage";
        this.value = +RegExp.$1;
    } else if (/^([+\-]?\d+)$/i.test(text)){  //integer
        this.type = "integer";
        this.value = +RegExp.$1;
    } else if (/^([+\-]?[\d\.]+)$/i.test(text)){  //number
        this.type = "number";
        this.value = +RegExp.$1;

    } else if (/^#([a-f0-9]{3,6})/i.test(text)){  //hexcolor
        this.type = "color";
        temp = RegExp.$1;
        if (temp.length === 3){
            this.red    = parseInt(temp.charAt(0)+temp.charAt(0),16);
            this.green  = parseInt(temp.charAt(1)+temp.charAt(1),16);
            this.blue   = parseInt(temp.charAt(2)+temp.charAt(2),16);
        } else {
            this.red    = parseInt(temp.substring(0,2),16);
            this.green  = parseInt(temp.substring(2,4),16);
            this.blue   = parseInt(temp.substring(4,6),16);
        }
    } else if (/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i.test(text)){ //rgb() color with absolute numbers
        this.type   = "color";
        this.red    = +RegExp.$1;
        this.green  = +RegExp.$2;
        this.blue   = +RegExp.$3;
    } else if (/^rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)){ //rgb() color with percentages
        this.type   = "color";
        this.red    = +RegExp.$1 * 255 / 100;
        this.green  = +RegExp.$2 * 255 / 100;
        this.blue   = +RegExp.$3 * 255 / 100;
    } else if (/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/i.test(text)){ //rgba() color with absolute numbers
        this.type   = "color";
        this.red    = +RegExp.$1;
        this.green  = +RegExp.$2;
        this.blue   = +RegExp.$3;
        this.alpha  = +RegExp.$4;
    } else if (/^rgba\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)){ //rgba() color with percentages
        this.type   = "color";
        this.red    = +RegExp.$1 * 255 / 100;
        this.green  = +RegExp.$2 * 255 / 100;
        this.blue   = +RegExp.$3 * 255 / 100;
        this.alpha  = +RegExp.$4;
    } else if (/^hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)){ //hsl()
        this.type   = "color";
        this.hue    = +RegExp.$1;
        this.saturation = +RegExp.$2 / 100;
        this.lightness  = +RegExp.$3 / 100;
    } else if (/^hsla\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)){ //hsla() color with percentages
        this.type   = "color";
        this.hue    = +RegExp.$1;
        this.saturation = +RegExp.$2 / 100;
        this.lightness  = +RegExp.$3 / 100;
        this.alpha  = +RegExp.$4;
    } else if (/^url\(["']?([^\)"']+)["']?\)/i.test(text)){ //URI
        this.type   = "uri";
        this.uri    = RegExp.$1;
    } else if (/^([^\(]+)\(/i.test(text)){
        this.type   = "function";
        this.name   = RegExp.$1;
        this.value  = text;
    } else if (/^"([^\n\r\f\\"]|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*"/i.test(text)){    //double-quoted string
        this.type   = "string";
        this.value  = PropertyValuePart.parseString(text);
    } else if (/^'([^\n\r\f\\']|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*'/i.test(text)){    //single-quoted string
        this.type   = "string";
        this.value  = PropertyValuePart.parseString(text);
    } else if (Colors[text.toLowerCase()]){  //named color
        this.type   = "color";
        temp        = Colors[text.toLowerCase()].substring(1);
        this.red    = parseInt(temp.substring(0,2),16);
        this.green  = parseInt(temp.substring(2,4),16);
        this.blue   = parseInt(temp.substring(4,6),16);
    } else if (/^[\,\/]$/.test(text)){
        this.type   = "operator";
        this.value  = text;
    } else if (/^[a-z\-_\u0080-\uFFFF][a-z0-9\-_\u0080-\uFFFF]*$/i.test(text)){
        this.type   = "identifier";
        this.value  = text;
    }

}

PropertyValuePart.prototype = new SyntaxUnit();
PropertyValuePart.prototype.constructor = PropertyValuePart;

/**
 * Helper method to parse a CSS string.
 */
PropertyValuePart.parseString = function(str) {
    str = str.slice(1, -1); // Strip surrounding single/double quotes
    var replacer = function(match, esc) {
        if (/^(\n|\r\n|\r|\f)$/.test(esc)) { return ''; }
        var m = /^[0-9a-f]{1,6}/i.exec(esc);
        if (m) {
            var codePoint = parseInt(m[0], 16);
            if (String.fromCodePoint) {
                return String.fromCodePoint(codePoint);
            } else {
                // XXX No support for surrogates on old JavaScript engines.
                return String.fromCharCode(codePoint);
            }
        }
        return esc;
    };
    return str.replace(/\\(\r\n|[^\r0-9a-f]|[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)/ig,
                       replacer);
};

/**
 * Helper method to serialize a CSS string.
 */
PropertyValuePart.serializeString = function(value) {
    var replacer = function(match, c) {
        if (c === '"') {
            return "\\" + c;
        }
        var cp = String.codePointAt ? String.codePointAt(0) :
            // We only escape non-surrogate chars, so using charCodeAt
            // is harmless here.
            String.charCodeAt(0);
        return "\\" + cp.toString(16) + " ";
    };
    return '"' + value.replace(/["\r\n\f]/g, replacer) + '"';
};

/**
 * Create a new syntax unit based solely on the given token.
 * Convenience method for creating a new syntax unit when
 * it represents a single token instead of multiple.
 * @param {Object} token The token object to represent.
 * @return {parserlib.css.PropertyValuePart} The object representing the token.
 * @static
 * @method fromToken
 */
PropertyValuePart.fromToken = function(token){
    return new PropertyValuePart(token.value, token.startLine, token.startCol);
};
var Pseudos = {
    __proto__:       null,
    ":first-letter": 1,
    ":first-line":   1,
    ":before":       1,
    ":after":        1
};

Pseudos.ELEMENT = 1;
Pseudos.CLASS = 2;

Pseudos.isElement = function(pseudo){
    return pseudo.indexOf("::") === 0 || Pseudos[pseudo.toLowerCase()] === Pseudos.ELEMENT;
};
/**
 * Represents an entire single selector, including all parts but not
 * including multiple selectors (those separated by commas).
 * @namespace parserlib.css
 * @class Selector
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {Array} parts Array of selectors parts making up this selector.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function Selector(parts, line, col){

    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.SELECTOR_TYPE);

    /**
     * The parts that make up the selector.
     * @type Array
     * @property parts
     */
    this.parts = parts;

    /**
     * The specificity of the selector.
     * @type parserlib.css.Specificity
     * @property specificity
     */
    this.specificity = Specificity.calculate(this);

}

Selector.prototype = new SyntaxUnit();
Selector.prototype.constructor = Selector;

/**
 * Represents a single part of a selector string, meaning a single set of
 * element name and modifiers. This does not include combinators such as
 * spaces, +, >, etc.
 * @namespace parserlib.css
 * @class SelectorPart
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {String} elementName The element name in the selector or null
 *      if there is no element name.
 * @param {Array} modifiers Array of individual modifiers for the element.
 *      May be empty if there are none.
 * @param {String} text The text representation of the unit.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function SelectorPart(elementName, modifiers, text, line, col){

    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);

    /**
     * The tag name of the element to which this part
     * of the selector affects.
     * @type String
     * @property elementName
     */
    this.elementName = elementName;

    /**
     * The parts that come after the element name, such as class names, IDs,
     * pseudo classes/elements, etc.
     * @type Array
     * @property modifiers
     */
    this.modifiers = modifiers;

}

SelectorPart.prototype = new SyntaxUnit();
SelectorPart.prototype.constructor = SelectorPart;

/**
 * Represents a selector modifier string, meaning a class name, element name,
 * element ID, pseudo rule, etc.
 * @namespace parserlib.css
 * @class SelectorSubPart
 * @extends parserlib.util.SyntaxUnit
 * @constructor
 * @param {String} text The text representation of the unit.
 * @param {String} type The type of selector modifier.
 * @param {int} line The line of text on which the unit resides.
 * @param {int} col The column of text on which the unit resides.
 */
function SelectorSubPart(text, type, line, col){

    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);

    /**
     * The type of modifier.
     * @type String
     * @property type
     */
    this.type = type;

    /**
     * Some subparts have arguments, this represents them.
     * @type Array
     * @property args
     */
    this.args = [];

}

SelectorSubPart.prototype = new SyntaxUnit();
SelectorSubPart.prototype.constructor = SelectorSubPart;

/**
 * Represents a selector's specificity.
 * @namespace parserlib.css
 * @class Specificity
 * @constructor
 * @param {int} a Should be 1 for inline styles, zero for stylesheet styles
 * @param {int} b Number of ID selectors
 * @param {int} c Number of classes and pseudo classes
 * @param {int} d Number of element names and pseudo elements
 */
function Specificity(a, b, c, d){
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
}

Specificity.prototype = {
    constructor: Specificity,

    /**
     * Compare this specificity to another.
     * @param {Specificity} other The other specificity to compare to.
     * @return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.
     * @method compare
     */
    compare: function(other){
        var comps = ["a", "b", "c", "d"],
            i, len;

        for (i=0, len=comps.length; i < len; i++){
            if (this[comps[i]] < other[comps[i]]){
                return -1;
            } else if (this[comps[i]] > other[comps[i]]){
                return 1;
            }
        }

        return 0;
    },

    /**
     * Creates a numeric value for the specificity.
     * @return {int} The numeric value for the specificity.
     * @method valueOf
     */
    valueOf: function(){
        return (this.a * 1000) + (this.b * 100) + (this.c * 10) + this.d;
    },

    /**
     * Returns a string representation for specificity.
     * @return {String} The string representation of specificity.
     * @method toString
     */
    toString: function(){
        return this.a + "," + this.b + "," + this.c + "," + this.d;
    }

};

/**
 * Calculates the specificity of the given selector.
 * @param {parserlib.css.Selector} The selector to calculate specificity for.
 * @return {parserlib.css.Specificity} The specificity of the selector.
 * @static
 * @method calculate
 */
Specificity.calculate = function(selector){

    var i, len,
        part,
        b=0, c=0, d=0;

    function updateValues(part){

        var i, j, len, num,
            elementName = part.elementName ? part.elementName.text : "",
            modifier;

        if (elementName && elementName.charAt(elementName.length-1) !== "*") {
            d++;
        }

        for (i=0, len=part.modifiers.length; i < len; i++){
            modifier = part.modifiers[i];
            switch(modifier.type){
                case "class":
                case "attribute":
                    c++;
                    break;

                case "id":
                    b++;
                    break;

                case "pseudo":
                    if (Pseudos.isElement(modifier.text)){
                        d++;
                    } else {
                        c++;
                    }
                    break;

                case "not":
                    for (j=0, num=modifier.args.length; j < num; j++){
                        updateValues(modifier.args[j]);
                    }
            }
         }
    }

    for (i=0, len=selector.parts.length; i < len; i++){
        part = selector.parts[i];

        if (part instanceof SelectorPart){
            updateValues(part);
        }
    }

    return new Specificity(0, b, c, d);
};

var h = /^[0-9a-fA-F]$/,
    //nonascii = /^[\u0080-\uFFFF]$/,
    nl = /\n|\r\n|\r|\f/;

//-----------------------------------------------------------------------------
// Helper functions
//-----------------------------------------------------------------------------


function isHexDigit(c){
    return c !== null && h.test(c);
}

function isDigit(c){
    return c !== null && /\d/.test(c);
}

function isWhitespace(c){
    return c !== null && /\s/.test(c);
}

function isNewLine(c){
    return c !== null && nl.test(c);
}

function isNameStart(c){
    return c !== null && (/[a-z_\u0080-\uFFFF\\]/i.test(c));
}

function isNameChar(c){
    return c !== null && (isNameStart(c) || /[0-9\-\\]/.test(c));
}

function isIdentStart(c){
    return c !== null && (isNameStart(c) || /\-\\/.test(c));
}

function mix(receiver, supplier){
	for (var prop in supplier){
		if (Object.prototype.hasOwnProperty.call(supplier, prop)){
			receiver[prop] = supplier[prop];
		}
	}
	return receiver;
}

//-----------------------------------------------------------------------------
// CSS Token Stream
//-----------------------------------------------------------------------------


/**
 * A token stream that produces CSS tokens.
 * @param {String|Reader} input The source of text to tokenize.
 * @constructor
 * @class TokenStream
 * @namespace parserlib.css
 */
function TokenStream(input){
	TokenStreamBase.call(this, input, Tokens);
}

TokenStream.prototype = mix(new TokenStreamBase(), {

    /**
     * Overrides the TokenStreamBase method of the same name
     * to produce CSS tokens.
     * @param {variant} channel The name of the channel to use
     *      for the next token.
     * @return {Object} A token object representing the next token.
     * @method _getToken
     * @private
     */
    _getToken: function(channel){

        var c,
            reader = this._reader,
            token   = null,
            startLine   = reader.getLine(),
            startCol    = reader.getCol();

        c = reader.read();


        while(c){
            switch(c){

                /*
                 * Potential tokens:
                 * - COMMENT
                 * - SLASH
                 * - CHAR
                 */
                case "/":

                    if(reader.peek() === "*"){
                        token = this.commentToken(c, startLine, startCol);
                    } else {
                        token = this.charToken(c, startLine, startCol);
                    }
                    break;

                /*
                 * Potential tokens:
                 * - DASHMATCH
                 * - INCLUDES
                 * - PREFIXMATCH
                 * - SUFFIXMATCH
                 * - SUBSTRINGMATCH
                 * - CHAR
                 */
                case "|":
                case "~":
                case "^":
                case "$":
                case "*":
                    if(reader.peek() === "="){
                        token = this.comparisonToken(c, startLine, startCol);
                    } else {
                        token = this.charToken(c, startLine, startCol);
                    }
                    break;

                /*
                 * Potential tokens:
                 * - STRING
                 * - INVALID
                 */
                case "\"":
                case "'":
                    token = this.stringToken(c, startLine, startCol);
                    break;

                /*
                 * Potential tokens:
                 * - HASH
                 * - CHAR
                 */
                case "#":
                    if (isNameChar(reader.peek())){
                        token = this.hashToken(c, startLine, startCol);
                    } else {
                        token = this.charToken(c, startLine, startCol);
                    }
                    break;

                /*
                 * Potential tokens:
                 * - DOT
                 * - NUMBER
                 * - DIMENSION
                 * - PERCENTAGE
                 */
                case ".":
                    if (isDigit(reader.peek())){
                        token = this.numberToken(c, startLine, startCol);
                    } else {
                        token = this.charToken(c, startLine, startCol);
                    }
                    break;

                /*
                 * Potential tokens:
                 * - CDC
                 * - MINUS
                 * - NUMBER
                 * - DIMENSION
                 * - PERCENTAGE
                 */
                case "-":
                    if (reader.peek() === "-"){  //could be closing HTML-style comment
                        token = this.htmlCommentEndToken(c, startLine, startCol);
                    } else if (isNameStart(reader.peek())){
                        token = this.identOrFunctionToken(c, startLine, startCol);
                    } else {
                        token = this.charToken(c, startLine, startCol);
                    }
                    break;

                /*
                 * Potential tokens:
                 * - IMPORTANT_SYM
                 * - CHAR
                 */
                case "!":
                    token = this.importantToken(c, startLine, startCol);
                    break;

                /*
                 * Any at-keyword or CHAR
                 */
                case "@":
                    token = this.atRuleToken(c, startLine, startCol);
                    break;

                /*
                 * Potential tokens:
                 * - NOT
                 * - CHAR
                 */
                case ":":
                    token = this.notToken(c, startLine, startCol);
                    break;

                /*
                 * Potential tokens:
                 * - CDO
                 * - CHAR
                 */
                case "<":
                    token = this.htmlCommentStartToken(c, startLine, startCol);
                    break;

                /*
                 * Potential tokens:
                 * - UNICODE_RANGE
                 * - URL
                 * - CHAR
                 */
                case "U":
                case "u":
                    if (reader.peek() === "+"){
                        token = this.unicodeRangeToken(c, startLine, startCol);
                        break;
                    }
                    /* falls through */
                default:

                    /*
                     * Potential tokens:
                     * - NUMBER
                     * - DIMENSION
                     * - LENGTH
                     * - FREQ
                     * - TIME
                     * - EMS
                     * - EXS
                     * - ANGLE
                     */
                    if (isDigit(c)){
                        token = this.numberToken(c, startLine, startCol);
                    } else

                    /*
                     * Potential tokens:
                     * - S
                     */
                    if (isWhitespace(c)){
                        token = this.whitespaceToken(c, startLine, startCol);
                    } else

                    /*
                     * Potential tokens:
                     * - IDENT
                     */
                    if (isIdentStart(c)){
                        token = this.identOrFunctionToken(c, startLine, startCol);
                    } else

                    /*
                     * Potential tokens:
                     * - CHAR
                     * - PLUS
                     */
                    {
                        token = this.charToken(c, startLine, startCol);
                    }






            }

            //make sure this token is wanted
            //TODO: check channel
            break;
        }

        if (!token && c === null){
            token = this.createToken(Tokens.EOF,null,startLine,startCol);
        }

        return token;
    },

    //-------------------------------------------------------------------------
    // Methods to create tokens
    //-------------------------------------------------------------------------

    /**
     * Produces a token based on available data and the current
     * reader position information. This method is called by other
     * private methods to create tokens and is never called directly.
     * @param {int} tt The token type.
     * @param {String} value The text value of the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @param {Object} options (Optional) Specifies a channel property
     *      to indicate that a different channel should be scanned
     *      and/or a hide property indicating that the token should
     *      be hidden.
     * @return {Object} A token object.
     * @method createToken
     */
    createToken: function(tt, value, startLine, startCol, options){
        var reader = this._reader;
        options = options || {};

        return {
            value:      value,
            type:       tt,
            channel:    options.channel,
            endChar:    options.endChar,
            hide:       options.hide || false,
            startLine:  startLine,
            startCol:   startCol,
            endLine:    reader.getLine(),
            endCol:     reader.getCol()
        };
    },

    //-------------------------------------------------------------------------
    // Methods to create specific tokens
    //-------------------------------------------------------------------------

    /**
     * Produces a token for any at-rule. If the at-rule is unknown, then
     * the token is for a single "@" character.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method atRuleToken
     */
    atRuleToken: function(first, startLine, startCol){
        var rule    = first,
            reader  = this._reader,
            tt      = Tokens.CHAR,
            ident;

        /*
         * First, mark where we are. There are only four @ rules,
         * so anything else is really just an invalid token.
         * Basically, if this doesn't match one of the known @
         * rules, just return '@' as an unknown token and allow
         * parsing to continue after that point.
         */
        reader.mark();

        //try to find the at-keyword
        ident = this.readName();
        rule = first + ident;
        tt = Tokens.type(rule.toLowerCase());

        //if it's not valid, use the first character only and reset the reader
        if (tt === Tokens.CHAR || tt === Tokens.UNKNOWN){
            if (rule.length > 1){
                tt = Tokens.UNKNOWN_SYM;
            } else {
                tt = Tokens.CHAR;
                rule = first;
                reader.reset();
            }
        }

        return this.createToken(tt, rule, startLine, startCol);
    },

    /**
     * Produces a character token based on the given character
     * and location in the stream. If there's a special (non-standard)
     * token name, this is used; otherwise CHAR is used.
     * @param {String} c The character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method charToken
     */
    charToken: function(c, startLine, startCol){
        var tt = Tokens.type(c);
        var opts = {};

        if (tt === -1){
            tt = Tokens.CHAR;
        } else {
            opts.endChar = Tokens[tt].endChar;
        }

        return this.createToken(tt, c, startLine, startCol, opts);
    },

    /**
     * Produces a character token based on the given character
     * and location in the stream. If there's a special (non-standard)
     * token name, this is used; otherwise CHAR is used.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method commentToken
     */
    commentToken: function(first, startLine, startCol){
        var comment = this.readComment(first);

        return this.createToken(Tokens.COMMENT, comment, startLine, startCol);
    },

    /**
     * Produces a comparison token based on the given character
     * and location in the stream. The next character must be
     * read and is already known to be an equals sign.
     * @param {String} c The character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method comparisonToken
     */
    comparisonToken: function(c, startLine, startCol){
        var reader  = this._reader,
            comparison  = c + reader.read(),
            tt      = Tokens.type(comparison) || Tokens.CHAR;

        return this.createToken(tt, comparison, startLine, startCol);
    },

    /**
     * Produces a hash token based on the specified information. The
     * first character provided is the pound sign (#) and then this
     * method reads a name afterward.
     * @param {String} first The first character (#) in the hash name.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method hashToken
     */
    hashToken: function(first, startLine, startCol){
        var name    = this.readName(first);

        return this.createToken(Tokens.HASH, name, startLine, startCol);
    },

    /**
     * Produces a CDO or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method htmlCommentStartToken
     */
    htmlCommentStartToken: function(first, startLine, startCol){
        var reader      = this._reader,
            text        = first;

        reader.mark();
        text += reader.readCount(3);

        if (text === "<!--"){
            return this.createToken(Tokens.CDO, text, startLine, startCol);
        } else {
            reader.reset();
            return this.charToken(first, startLine, startCol);
        }
    },

    /**
     * Produces a CDC or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method htmlCommentEndToken
     */
    htmlCommentEndToken: function(first, startLine, startCol){
        var reader      = this._reader,
            text        = first;

        reader.mark();
        text += reader.readCount(2);

        if (text === "-->"){
            return this.createToken(Tokens.CDC, text, startLine, startCol);
        } else {
            reader.reset();
            return this.charToken(first, startLine, startCol);
        }
    },

    /**
     * Produces an IDENT or FUNCTION token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the identifier.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method identOrFunctionToken
     */
    identOrFunctionToken: function(first, startLine, startCol){
        var reader  = this._reader,
            ident   = this.readName(first),
            tt      = Tokens.IDENT,
            uriFns  = ["url(", "url-prefix(", "domain("];

        //if there's a left paren immediately after, it's a URI or function
        if (reader.peek() === "("){
            ident += reader.read();
            if (uriFns.indexOf(ident.toLowerCase()) > -1){
                tt = Tokens.URI;
                ident = this.readURI(ident);

                //didn't find a valid URL or there's no closing paren
                if (uriFns.indexOf(ident.toLowerCase()) > -1){
                    tt = Tokens.FUNCTION;
                }
            } else {
                tt = Tokens.FUNCTION;
            }
        } else if (reader.peek() === ":"){  //might be an IE function

            //IE-specific functions always being with progid:
            if (ident.toLowerCase() === "progid"){
                ident += reader.readTo("(");
                tt = Tokens.IE_FUNCTION;
            }
        }

        return this.createToken(tt, ident, startLine, startCol);
    },

    /**
     * Produces an IMPORTANT_SYM or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method importantToken
     */
    importantToken: function(first, startLine, startCol){
        var reader      = this._reader,
            important   = first,
            tt          = Tokens.CHAR,
            temp,
            c;

        reader.mark();
        c = reader.read();

        while(c){

            //there can be a comment in here
            if (c === "/"){

                //if the next character isn't a star, then this isn't a valid !important token
                if (reader.peek() !== "*"){
                    break;
                } else {
                    temp = this.readComment(c);
                    if (temp === ""){    //broken!
                        break;
                    }
                }
            } else if (isWhitespace(c)){
                important += c + this.readWhitespace();
            } else if (/i/i.test(c)){
                temp = reader.readCount(8);
                if (/mportant/i.test(temp)){
                    important += c + temp;
                    tt = Tokens.IMPORTANT_SYM;

                }
                break;  //we're done
            } else {
                break;
            }

            c = reader.read();
        }

        if (tt === Tokens.CHAR){
            reader.reset();
            return this.charToken(first, startLine, startCol);
        } else {
            return this.createToken(tt, important, startLine, startCol);
        }


    },

    /**
     * Produces a NOT or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method notToken
     */
    notToken: function(first, startLine, startCol){
        var reader      = this._reader,
            text        = first;

        reader.mark();
        text += reader.readCount(4);

        if (text.toLowerCase() === ":not("){
            return this.createToken(Tokens.NOT, text, startLine, startCol);
        } else {
            reader.reset();
            return this.charToken(first, startLine, startCol);
        }
    },

    /**
     * Produces a number token based on the given character
     * and location in the stream. This may return a token of
     * NUMBER, EMS, EXS, LENGTH, ANGLE, TIME, FREQ, DIMENSION,
     * or PERCENTAGE.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method numberToken
     */
    numberToken: function(first, startLine, startCol){
        var reader  = this._reader,
            value   = this.readNumber(first),
            ident,
            tt      = Tokens.NUMBER,
            c       = reader.peek();

        if (isIdentStart(c)){
            ident = this.readName(reader.read());
            value += ident;

            if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)){
                tt = Tokens.LENGTH;
            } else if (/^deg|^rad$|^grad$/i.test(ident)){
                tt = Tokens.ANGLE;
            } else if (/^ms$|^s$/i.test(ident)){
                tt = Tokens.TIME;
            } else if (/^hz$|^khz$/i.test(ident)){
                tt = Tokens.FREQ;
            } else if (/^dpi$|^dpcm$/i.test(ident)){
                tt = Tokens.RESOLUTION;
            } else {
                tt = Tokens.DIMENSION;
            }

        } else if (c === "%"){
            value += reader.read();
            tt = Tokens.PERCENTAGE;
        }

        return this.createToken(tt, value, startLine, startCol);
    },

    /**
     * Produces a string token based on the given character
     * and location in the stream. Since strings may be indicated
     * by single or double quotes, a failure to match starting
     * and ending quotes results in an INVALID token being generated.
     * The first character in the string is passed in and then
     * the rest are read up to and including the final quotation mark.
     * @param {String} first The first character in the string.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method stringToken
     */
    stringToken: function(first, startLine, startCol){
        var delim   = first,
            string  = first,
            reader  = this._reader,
            prev    = first,
            tt      = Tokens.STRING,
            c       = reader.read();

        while(c){
            string += c;

            //if the delimiter is found with an escapement, we're done.
            if (c === delim && prev !== "\\"){
                break;
            }

            //if there's a newline without an escapement, it's an invalid string
            if (isNewLine(reader.peek()) && c !== "\\"){
                tt = Tokens.INVALID;
                break;
            }

            //save previous and get next
            prev = c;
            c = reader.read();
        }

        //if c is null, that means we're out of input and the string was never closed
        if (c === null){
            tt = Tokens.INVALID;
        }

        return this.createToken(tt, string, startLine, startCol);
    },

    unicodeRangeToken: function(first, startLine, startCol){
        var reader  = this._reader,
            value   = first,
            temp,
            tt      = Tokens.CHAR;

        //then it should be a unicode range
        if (reader.peek() === "+"){
            reader.mark();
            value += reader.read();
            value += this.readUnicodeRangePart(true);

            //ensure there's an actual unicode range here
            if (value.length === 2){
                reader.reset();
            } else {

                tt = Tokens.UNICODE_RANGE;

                //if there's a ? in the first part, there can't be a second part
                if (value.indexOf("?") === -1){

                    if (reader.peek() === "-"){
                        reader.mark();
                        temp = reader.read();
                        temp += this.readUnicodeRangePart(false);

                        //if there's not another value, back up and just take the first
                        if (temp.length === 1){
                            reader.reset();
                        } else {
                            value += temp;
                        }
                    }

                }
            }
        }

        return this.createToken(tt, value, startLine, startCol);
    },

    /**
     * Produces a S token based on the specified information. Since whitespace
     * may have multiple characters, this consumes all whitespace characters
     * into a single token.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method whitespaceToken
     */
    whitespaceToken: function(first, startLine, startCol){
        var value   = first + this.readWhitespace();
        return this.createToken(Tokens.S, value, startLine, startCol);
    },




    //-------------------------------------------------------------------------
    // Methods to read values from the string stream
    //-------------------------------------------------------------------------

    readUnicodeRangePart: function(allowQuestionMark){
        var reader  = this._reader,
            part = "",
            c       = reader.peek();

        //first read hex digits
        while(isHexDigit(c) && part.length < 6){
            reader.read();
            part += c;
            c = reader.peek();
        }

        //then read question marks if allowed
        if (allowQuestionMark){
            while(c === "?" && part.length < 6){
                reader.read();
                part += c;
                c = reader.peek();
            }
        }

        //there can't be any other characters after this point

        return part;
    },

    readWhitespace: function(){
        var reader  = this._reader,
            whitespace = "",
            c       = reader.peek();

        while(isWhitespace(c)){
            reader.read();
            whitespace += c;
            c = reader.peek();
        }

        return whitespace;
    },
    readNumber: function(first){
        var reader  = this._reader,
            number  = first,
            hasDot  = (first === "."),
            c       = reader.peek();


        while(c){
            if (isDigit(c)){
                number += reader.read();
            } else if (c === "."){
                if (hasDot){
                    break;
                } else {
                    hasDot = true;
                    number += reader.read();
                }
            } else {
                break;
            }

            c = reader.peek();
        }

        return number;
    },
    readString: function(){
        var reader  = this._reader,
            delim   = reader.read(),
            string  = delim,
            prev    = delim,
            c       = reader.peek();

        while(c){
            c = reader.read();
            string += c;

            //if the delimiter is found with an escapement, we're done.
            if (c === delim && prev !== "\\"){
                break;
            }

            //if there's a newline without an escapement, it's an invalid string
            if (isNewLine(reader.peek()) && c !== "\\"){
                string = "";
                break;
            }

            //save previous and get next
            prev = c;
            c = reader.peek();
        }

        //if c is null, that means we're out of input and the string was never closed
        if (c === null){
            string = "";
        }

        return string;
    },
    readURI: function(first){
        var reader  = this._reader,
            uri     = first,
            inner   = "",
            c       = reader.peek();

        reader.mark();

        //skip whitespace before
        while(c && isWhitespace(c)){
            reader.read();
            c = reader.peek();
        }

        //it's a string
        if (c === "'" || c === "\""){
            inner = this.readString();
        } else {
            inner = this.readURL();
        }

        c = reader.peek();

        //skip whitespace after
        while(c && isWhitespace(c)){
            reader.read();
            c = reader.peek();
        }

        //if there was no inner value or the next character isn't closing paren, it's not a URI
        if (inner === "" || c !== ")"){
            uri = first;
            reader.reset();
        } else {
            uri += inner + reader.read();
        }

        return uri;
    },
    readURL: function(){
        var reader  = this._reader,
            url     = "",
            c       = reader.peek();

        //TODO: Check for escape and nonascii
        while (/^[!#$%&\\*-~]$/.test(c)){
            url += reader.read();
            c = reader.peek();
        }

        return url;

    },
    readName: function(first){
        var reader  = this._reader,
            ident   = first || "",
            c       = reader.peek();

        while(true){
            if (c === "\\"){
                ident += this.readEscape(reader.read());
                c = reader.peek();
            } else if(c && isNameChar(c)){
                ident += reader.read();
                c = reader.peek();
            } else {
                break;
            }
        }

        return ident;
    },

    readEscape: function(first){
        var reader  = this._reader,
            cssEscape = first || "",
            i       = 0,
            c       = reader.peek();

        if (isHexDigit(c)){
            do {
                cssEscape += reader.read();
                c = reader.peek();
            } while(c && isHexDigit(c) && ++i < 6);
        }

        if (cssEscape.length === 3 && /\s/.test(c) ||
            cssEscape.length === 7 || cssEscape.length === 1){
                reader.read();
        } else {
            c = "";
        }

        return cssEscape + c;
    },

    readComment: function(first){
        var reader  = this._reader,
            comment = first || "",
            c       = reader.read();

        if (c === "*"){
            while(c){
                comment += c;

                //look for end of comment
                if (comment.length > 2 && c === "*" && reader.peek() === "/"){
                    comment += reader.read();
                    break;
                }

                c = reader.read();
            }

            return comment;
        } else {
            return "";
        }

    }
});

var Tokens  = [

    /*
     * The following token names are defined in CSS3 Grammar: http://www.w3.org/TR/css3-syntax/#lexical
     */

    //HTML-style comments
    { name: "CDO"},
    { name: "CDC"},

    //ignorables
    { name: "S", whitespace: true/*, channel: "ws"*/},
    { name: "COMMENT", comment: true, hide: true, channel: "comment" },

    //attribute equality
    { name: "INCLUDES", text: "~="},
    { name: "DASHMATCH", text: "|="},
    { name: "PREFIXMATCH", text: "^="},
    { name: "SUFFIXMATCH", text: "$="},
    { name: "SUBSTRINGMATCH", text: "*="},

    //identifier types
    { name: "STRING"},
    { name: "IDENT"},
    { name: "HASH"},

    //at-keywords
    { name: "IMPORT_SYM", text: "@import"},
    { name: "PAGE_SYM", text: "@page"},
    { name: "MEDIA_SYM", text: "@media"},
    { name: "FONT_FACE_SYM", text: "@font-face"},
    { name: "CHARSET_SYM", text: "@charset"},
    { name: "NAMESPACE_SYM", text: "@namespace"},
    { name: "VIEWPORT_SYM", text: ["@viewport", "@-ms-viewport", "@-o-viewport"]},
    { name: "DOCUMENT_SYM", text: ["@document", "@-moz-document"]},
    { name: "UNKNOWN_SYM" },
    //{ name: "ATKEYWORD"},

    //CSS3 animations
    { name: "KEYFRAMES_SYM", text: [ "@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes" ] },

    //important symbol
    { name: "IMPORTANT_SYM"},

    //measurements
    { name: "LENGTH"},
    { name: "ANGLE"},
    { name: "TIME"},
    { name: "FREQ"},
    { name: "DIMENSION"},
    { name: "PERCENTAGE"},
    { name: "NUMBER"},

    //functions
    { name: "URI"},
    { name: "FUNCTION"},

    //Unicode ranges
    { name: "UNICODE_RANGE"},

    /*
     * The following token names are defined in CSS3 Selectors: http://www.w3.org/TR/css3-selectors/#selector-syntax
     */

    //invalid string
    { name: "INVALID"},

    //combinators
    { name: "PLUS", text: "+" },
    { name: "GREATER", text: ">"},
    { name: "COMMA", text: ","},
    { name: "TILDE", text: "~"},

    //modifier
    { name: "NOT"},

    /*
     * Defined in CSS3 Paged Media
     */
    { name: "TOPLEFTCORNER_SYM", text: "@top-left-corner"},
    { name: "TOPLEFT_SYM", text: "@top-left"},
    { name: "TOPCENTER_SYM", text: "@top-center"},
    { name: "TOPRIGHT_SYM", text: "@top-right"},
    { name: "TOPRIGHTCORNER_SYM", text: "@top-right-corner"},
    { name: "BOTTOMLEFTCORNER_SYM", text: "@bottom-left-corner"},
    { name: "BOTTOMLEFT_SYM", text: "@bottom-left"},
    { name: "BOTTOMCENTER_SYM", text: "@bottom-center"},
    { name: "BOTTOMRIGHT_SYM", text: "@bottom-right"},
    { name: "BOTTOMRIGHTCORNER_SYM", text: "@bottom-right-corner"},
    { name: "LEFTTOP_SYM", text: "@left-top"},
    { name: "LEFTMIDDLE_SYM", text: "@left-middle"},
    { name: "LEFTBOTTOM_SYM", text: "@left-bottom"},
    { name: "RIGHTTOP_SYM", text: "@right-top"},
    { name: "RIGHTMIDDLE_SYM", text: "@right-middle"},
    { name: "RIGHTBOTTOM_SYM", text: "@right-bottom"},

    /*
     * The following token names are defined in CSS3 Media Queries: http://www.w3.org/TR/css3-mediaqueries/#syntax
     */
    /*{ name: "MEDIA_ONLY", state: "media"},
    { name: "MEDIA_NOT", state: "media"},
    { name: "MEDIA_AND", state: "media"},*/
    { name: "RESOLUTION", state: "media"},

    /*
     * The following token names are not defined in any CSS specification but are used by the lexer.
     */

    //not a real token, but useful for stupid IE filters
    { name: "IE_FUNCTION" },

    //part of CSS3 grammar but not the Flex code
    { name: "CHAR" },

    //TODO: Needed?
    //Not defined as tokens, but might as well be
    {
        name: "PIPE",
        text: "|"
    },
    {
        name: "SLASH",
        text: "/"
    },
    {
        name: "MINUS",
        text: "-"
    },
    {
        name: "STAR",
        text: "*"
    },

    {
        name: "LBRACE",
        endChar: "}",
        text: "{"
    },
    {
        name: "RBRACE",
        text: "}"
    },
    {
        name: "LBRACKET",
        endChar: "]",
        text: "["
    },
    {
        name: "RBRACKET",
        text: "]"
    },
    {
        name: "EQUALS",
        text: "="
    },
    {
        name: "COLON",
        text: ":"
    },
    {
        name: "SEMICOLON",
        text: ";"
    },

    {
        name: "LPAREN",
        endChar: ")",
        text: "("
    },
    {
        name: "RPAREN",
        text: ")"
    },
    {
        name: "DOT",
        text: "."
    }
];

(function(){

    var nameMap = [],
        typeMap = Object.create(null);

    Tokens.UNKNOWN = -1;
    Tokens.unshift({name:"EOF"});
    for (var i=0, len = Tokens.length; i < len; i++){
        nameMap.push(Tokens[i].name);
        Tokens[Tokens[i].name] = i;
        if (Tokens[i].text){
            if (Tokens[i].text instanceof Array){
                for (var j=0; j < Tokens[i].text.length; j++){
                    typeMap[Tokens[i].text[j]] = i;
                }
            } else {
                typeMap[Tokens[i].text] = i;
            }
        }
    }

    Tokens.name = function(tt){
        return nameMap[tt];
    };

    Tokens.type = function(c){
        return typeMap[c] || -1;
    };

})();



//This file will likely change a lot! Very experimental!
var Validation = {

    validate: function(property, value){

        //normalize name
        var name        = property.toString().toLowerCase(),
            expression  = new PropertyValueIterator(value),
            spec        = Properties[name];

        if (!spec) {
            if (name.indexOf("-") !== 0){    //vendor prefixed are ok
                throw new ValidationError("Unknown property '" + property + "'.", property.line, property.col);
            }
        } else if (typeof spec !== "number"){

            //initialization
            if (typeof spec === "string"){
                if (spec.indexOf("||") > -1) {
                    this.groupProperty(spec, expression);
                } else {
                    this.singleProperty(spec, expression, 1);
                }

            } else if (spec.multi) {
                this.multiProperty(spec.multi, expression, spec.comma, spec.max || Infinity);
            } else if (typeof spec === "function") {
                spec(expression);
            }

        }

    },

    singleProperty: function(types, expression, max, partial) {

        var result      = false,
            value       = expression.value,
            count       = 0,
            part;

        while (expression.hasNext() && count < max) {
            result = ValidationTypes.isAny(expression, types);
            if (!result) {
                break;
            }
            count++;
        }

        if (!result) {
            if (expression.hasNext() && !expression.isFirst()) {
                part = expression.peek();
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                 throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
            }
        } else if (expression.hasNext()) {
            part = expression.next();
            throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        }

    },

    multiProperty: function (types, expression, comma, max) {

        var result      = false,
            value       = expression.value,
            count       = 0,
            part;

        while(expression.hasNext() && !result && count < max) {
            if (ValidationTypes.isAny(expression, types)) {
                count++;
                if (!expression.hasNext()) {
                    result = true;

                } else if (comma) {
                    if (String(expression.peek()) === ",") {
                        part = expression.next();
                    } else {
                        break;
                    }
                }
            } else {
                break;

            }
        }

        if (!result) {
            if (expression.hasNext() && !expression.isFirst()) {
                part = expression.peek();
                throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                part = expression.previous();
                if (comma && String(part) === ",") {
                    throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
                } else {
                    throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
                }
            }

        } else if (expression.hasNext()) {
            part = expression.next();
            throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        }

    },

    groupProperty: function (types, expression, comma) {

        var result      = false,
            value       = expression.value,
            typeCount   = types.split("||").length,
            groups      = { count: 0 },
            partial     = false,
            name,
            part;

        while(expression.hasNext() && !result) {
            name = ValidationTypes.isAnyOfGroup(expression, types);
            if (name) {

                //no dupes
                if (groups[name]) {
                    break;
                } else {
                    groups[name] = 1;
                    groups.count++;
                    partial = true;

                    if (groups.count === typeCount || !expression.hasNext()) {
                        result = true;
                    }
                }
            } else {
                break;
            }
        }

        if (!result) {
            if (partial && expression.hasNext()) {
                    part = expression.peek();
                    throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
            } else {
                throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
            }
        } else if (expression.hasNext()) {
            part = expression.next();
            throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        }
    }



};
/**
 * Type to use when a validation error occurs.
 * @class ValidationError
 * @namespace parserlib.util
 * @constructor
 * @param {String} message The error message.
 * @param {int} line The line at which the error occurred.
 * @param {int} col The column at which the error occurred.
 */
function ValidationError(message, line, col){

    /**
     * The column at which the error occurred.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line at which the error occurred.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.message = message;

}

//inherit from Error
ValidationError.prototype = new Error();
//This file will likely change a lot! Very experimental!
var ValidationTypes = {

    isLiteral: function (part, literals) {
        var text = part.text.toString().toLowerCase(),
            args = literals.split(" | "),
            i, len, found = false;

        for (i=0,len=args.length; i < len && !found; i++){
            if (text === args[i].toLowerCase()){
                found = true;
            }
        }

        return found;
    },

    isSimple: function(type) {
        return !!this.simple[type];
    },

    isComplex: function(type) {
        return !!this.complex[type];
    },

    /**
     * Determines if the next part(s) of the given expression
     * are any of the given types.
     */
    isAny: function (expression, types) {
        var args = types.split(" | "),
            i, len, found = false;

        for (i=0,len=args.length; i < len && !found && expression.hasNext(); i++){
            found = this.isType(expression, args[i]);
        }

        return found;
    },

    /**
     * Determines if the next part(s) of the given expression
     * are one of a group.
     */
    isAnyOfGroup: function(expression, types) {
        var args = types.split(" || "),
            i, len, found = false;

        for (i=0,len=args.length; i < len && !found; i++){
            found = this.isType(expression, args[i]);
        }

        return found ? args[i-1] : false;
    },

    /**
     * Determines if the next part(s) of the given expression
     * are of a given type.
     */
    isType: function (expression, type) {
        var part = expression.peek(),
            result = false;

        if (type.charAt(0) !== "<") {
            result = this.isLiteral(part, type);
            if (result) {
                expression.next();
            }
        } else if (this.simple[type]) {
            result = this.simple[type](part);
            if (result) {
                expression.next();
            }
        } else {
            result = this.complex[type](expression);
        }

        return result;
    },



    simple: {
        __proto__: null,

        "<absolute-size>": function(part){
            return ValidationTypes.isLiteral(part, "xx-small | x-small | small | medium | large | x-large | xx-large");
        },

        "<attachment>": function(part){
            return ValidationTypes.isLiteral(part, "scroll | fixed | local");
        },

        "<attr>": function(part){
            return part.type === "function" && part.name === "attr";
        },

        "<bg-image>": function(part){
            return this["<image>"](part) || this["<gradient>"](part) ||  String(part) === "none";
        },

        "<gradient>": function(part) {
            return part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?(?:repeating\-)?(?:radial\-|linear\-)?gradient/i.test(part);
        },

        "<box>": function(part){
            return ValidationTypes.isLiteral(part, "padding-box | border-box | content-box");
        },

        "<content>": function(part){
            return part.type === "function" && part.name === "content";
        },

        "<relative-size>": function(part){
            return ValidationTypes.isLiteral(part, "smaller | larger");
        },

        //any identifier
        "<ident>": function(part){
            return part.type === "identifier";
        },

        "<length>": function(part){
            if (part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?calc/i.test(part)){
                return true;
            }else{
                return part.type === "length" || part.type === "number" || part.type === "integer" || String(part) === "0";
            }
        },

        "<color>": function(part){
            return part.type === "color" || String(part) === "transparent" || String(part) === "currentColor";
        },

        "<number>": function(part){
            return part.type === "number" || this["<integer>"](part);
        },

        "<integer>": function(part){
            return part.type === "integer";
        },

        "<line>": function(part){
            return part.type === "integer";
        },

        "<angle>": function(part){
            return part.type === "angle";
        },

        "<uri>": function(part){
            return part.type === "uri";
        },

        "<image>": function(part){
            return this["<uri>"](part);
        },

        "<percentage>": function(part){
            return part.type === "percentage" || String(part) === "0";
        },

        "<border-width>": function(part){
            return this["<length>"](part) || ValidationTypes.isLiteral(part, "thin | medium | thick");
        },

        "<border-style>": function(part){
            return ValidationTypes.isLiteral(part, "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset");
        },

        "<content-sizing>": function(part){ // http://www.w3.org/TR/css3-sizing/#width-height-keywords
            return ValidationTypes.isLiteral(part, "fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content");
        },

        "<margin-width>": function(part){
            return this["<length>"](part) || this["<percentage>"](part) || ValidationTypes.isLiteral(part, "auto");
        },

        "<padding-width>": function(part){
            return this["<length>"](part) || this["<percentage>"](part);
        },

        "<shape>": function(part){
            return part.type === "function" && (part.name === "rect" || part.name === "inset-rect");
        },

        "<time>": function(part) {
            return part.type === "time";
        },

        "<flex-grow>": function(part){
            return this["<number>"](part);
        },

        "<flex-shrink>": function(part){
            return this["<number>"](part);
        },

        "<width>": function(part){
            return this["<margin-width>"](part);
        },

        "<flex-basis>": function(part){
            return this["<width>"](part);
        },

        "<flex-direction>": function(part){
            return ValidationTypes.isLiteral(part, "row | row-reverse | column | column-reverse");
        },

        "<flex-wrap>": function(part){
            return ValidationTypes.isLiteral(part, "nowrap | wrap | wrap-reverse");
        },

        "<feature-tag-value>": function(part){
            return (part.type === "function" && /^[A-Z0-9]{4}$/i.test(part));
        }
    },

    complex: {
        __proto__: null,

        "<bg-position>": function(expression){
            var result  = false,
                numeric = "<percentage> | <length>",
                xDir    = "left | right",
                yDir    = "top | bottom",
                count = 0;

            while (expression.peek(count) && expression.peek(count).text !== ",") {
                count++;
            }

/*
<position> = [
  [ left | center | right | top | bottom | <percentage> | <length> ]
|
  [ left | center | right | <percentage> | <length> ]
  [ top | center | bottom | <percentage> | <length> ]
|
  [ center | [ left | right ] [ <percentage> | <length> ]? ] &&
  [ center | [ top | bottom ] [ <percentage> | <length> ]? ]
]
*/

            if (count < 3) {
                if (ValidationTypes.isAny(expression, xDir + " | center | " + numeric)) {
                        result = true;
                        ValidationTypes.isAny(expression, yDir + " | center | " + numeric);
                } else if (ValidationTypes.isAny(expression, yDir)) {
                        result = true;
                        ValidationTypes.isAny(expression, xDir + " | center");
                }
            } else {
                if (ValidationTypes.isAny(expression, xDir)) {
                    if (ValidationTypes.isAny(expression, yDir)) {
                        result = true;
                        ValidationTypes.isAny(expression, numeric);
                    } else if (ValidationTypes.isAny(expression, numeric)) {
                        if (ValidationTypes.isAny(expression, yDir)) {
                            result = true;
                            ValidationTypes.isAny(expression, numeric);
                        } else if (ValidationTypes.isAny(expression, "center")) {
                            result = true;
                        }
                    }
                } else if (ValidationTypes.isAny(expression, yDir)) {
                    if (ValidationTypes.isAny(expression, xDir)) {
                        result = true;
                        ValidationTypes.isAny(expression, numeric);
                    } else if (ValidationTypes.isAny(expression, numeric)) {
                        if (ValidationTypes.isAny(expression, xDir)) {
                                result = true;
                                ValidationTypes.isAny(expression, numeric);
                        } else if (ValidationTypes.isAny(expression, "center")) {
                            result = true;
                        }
                    }
                } else if (ValidationTypes.isAny(expression, "center")) {
                    if (ValidationTypes.isAny(expression, xDir + " | " + yDir)) {
                        result = true;
                        ValidationTypes.isAny(expression, numeric);
                    }
                }
            }

            return result;
        },

        "<bg-size>": function(expression){
            //<bg-size> = [ <length> | <percentage> | auto ]{1,2} | cover | contain
            var result  = false,
                numeric = "<percentage> | <length> | auto";

            if (ValidationTypes.isAny(expression, "cover | contain")) {
                result = true;
            } else if (ValidationTypes.isAny(expression, numeric)) {
                result = true;
                ValidationTypes.isAny(expression, numeric);
            }

            return result;
        },

        "<repeat-style>": function(expression){
            //repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}
            var result  = false,
                values  = "repeat | space | round | no-repeat",
                part;

            if (expression.hasNext()){
                part = expression.next();

                if (ValidationTypes.isLiteral(part, "repeat-x | repeat-y")) {
                    result = true;
                } else if (ValidationTypes.isLiteral(part, values)) {
                    result = true;

                    if (expression.hasNext() && ValidationTypes.isLiteral(expression.peek(), values)) {
                        expression.next();
                    }
                }
            }

            return result;

        },

        "<shadow>": function(expression) {
            //inset? && [ <length>{2,4} && <color>? ]
            var result  = false,
                count   = 0,
                inset   = false,
                color   = false;

            if (expression.hasNext()) {

                if (ValidationTypes.isAny(expression, "inset")){
                    inset = true;
                }

                if (ValidationTypes.isAny(expression, "<color>")) {
                    color = true;
                }

                while (ValidationTypes.isAny(expression, "<length>") && count < 4) {
                    count++;
                }


                if (expression.hasNext()) {
                    if (!color) {
                        ValidationTypes.isAny(expression, "<color>");
                    }

                    if (!inset) {
                        ValidationTypes.isAny(expression, "inset");
                    }

                }

                result = (count >= 2 && count <= 4);

            }

            return result;
        },

        "<x-one-radius>": function(expression) {
            //[ <length> | <percentage> ] [ <length> | <percentage> ]?
            var result  = false,
                simple = "<length> | <percentage> | inherit";

            if (ValidationTypes.isAny(expression, simple)){
                result = true;
                ValidationTypes.isAny(expression, simple);
            }

            return result;
        },

        "<flex>": function(expression) {
            // http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/#flex-property
            // none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]
            // Valid syntaxes, according to https://developer.mozilla.org/en-US/docs/Web/CSS/flex#Syntax
            // * none
            // * <flex-grow>
            // * <flex-basis>
            // * <flex-grow> <flex-basis>
            // * <flex-grow> <flex-shrink>
            // * <flex-grow> <flex-shrink> <flex-basis>
            // * inherit
            var part,
                result = false;
            if (ValidationTypes.isAny(expression, "none | inherit")) {
                result = true;
            } else {
                if (ValidationTypes.isType(expression, "<flex-grow>")) {
                    if (expression.peek()) {
                        if (ValidationTypes.isType(expression, "<flex-shrink>")) {
                            if (expression.peek()) {
                                result = ValidationTypes.isType(expression, "<flex-basis>");
                            } else {
                                result = true;
                            }
                        } else if (ValidationTypes.isType(expression, "<flex-basis>")) {
                            result = expression.peek() === null;
                        }
                    } else {
                        result = true;
                    }
                } else if (ValidationTypes.isType(expression, "<flex-basis>")) {
                    result = true;
                }
            }

            if (!result) {
                // Generate a more verbose error than "Expected <flex>..."
                part = expression.peek();
                throw new ValidationError("Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '" + expression.value.text + "'.", part.line, part.col);
            }

            return result;
        }
    }
};

parserlib.css = {
__proto__           :null,
Colors              :Colors,
Combinator          :Combinator,
Parser              :Parser,
PropertyName        :PropertyName,
PropertyValue       :PropertyValue,
PropertyValuePart   :PropertyValuePart,
MediaFeature        :MediaFeature,
MediaQuery          :MediaQuery,
Selector            :Selector,
SelectorPart        :SelectorPart,
SelectorSubPart     :SelectorSubPart,
Specificity         :Specificity,
TokenStream         :TokenStream,
Tokens              :Tokens,
ValidationError     :ValidationError
};
})();

(function(){
/* jshint forin:false */
for(var prop in parserlib){
exports[prop] = parserlib[prop];
}
})();


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DOMImplementation = __webpack_require__(7);
var HTMLParser = __webpack_require__(16);
var Window = __webpack_require__(18);

exports.createDOMImplementation = function() {
  return new DOMImplementation();
};

exports.createDocument = function(html, force) {
  // Previous API couldn't let you pass '' as a document, and that
  // yields a slightly different document than createHTMLDocument('')
  // does.  The new `force` parameter lets you pass '' if you want to.
  if (html || force) {
    var parser = new HTMLParser();
    parser.parse(html || '', true);
    return parser.document();
  }
  return new DOMImplementation().createHTMLDocument("");
};

exports.createWindow = function(html, address) {
  var document = exports.createDocument(html);
  if (address !== undefined) { document._address = address; }
  return new Window(document);
};

exports.impl = __webpack_require__(40);


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(10);
// HACK: this is here for backward compatability
// TODO(benlesh): remove this in v6.
exports.toPromise = Observable_1.Observable.prototype.toPromise;
//# sourceMappingURL=toPromise.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (exports) { factory(createExporter(root, createExporter(exports))); }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    __extends = function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function (m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    };

    __values = function (o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator];
        return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
});


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.2
(function() {
  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLHttpRequestEventTarget = (function() {
    function XMLHttpRequestEventTarget() {
      this.onloadstart = null;
      this.onprogress = null;
      this.onabort = null;
      this.onerror = null;
      this.onload = null;
      this.ontimeout = null;
      this.onloadend = null;
      this._listeners = {};
    }

    XMLHttpRequestEventTarget.prototype.onloadstart = null;

    XMLHttpRequestEventTarget.prototype.onprogress = null;

    XMLHttpRequestEventTarget.prototype.onabort = null;

    XMLHttpRequestEventTarget.prototype.onerror = null;

    XMLHttpRequestEventTarget.prototype.onload = null;

    XMLHttpRequestEventTarget.prototype.ontimeout = null;

    XMLHttpRequestEventTarget.prototype.onloadend = null;

    XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {
      var base;
      eventType = eventType.toLowerCase();
      (base = this._listeners)[eventType] || (base[eventType] = []);
      this._listeners[eventType].push(listener);
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {
      var index;
      eventType = eventType.toLowerCase();
      if (this._listeners[eventType]) {
        index = this._listeners[eventType].indexOf(listener);
        if (index !== -1) {
          this._listeners[eventType].splice(index, 1);
        }
      }
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {
      var eventType, j, len, listener, listeners;
      event.currentTarget = event.target = this;
      eventType = event.type;
      if (listeners = this._listeners[eventType]) {
        for (j = 0, len = listeners.length; j < len; j++) {
          listener = listeners[j];
          listener.call(this, event);
        }
      }
      if (listener = this["on" + eventType]) {
        listener.call(this, event);
      }
      return void 0;
    };

    return XMLHttpRequestEventTarget;

  })();

  http = __webpack_require__(77);

  https = __webpack_require__(78);

  os = __webpack_require__(79);

  url = __webpack_require__(47);

  XMLHttpRequest = (function(superClass) {
    extend(XMLHttpRequest, superClass);

    function XMLHttpRequest(options) {
      XMLHttpRequest.__super__.constructor.call(this);
      this.onreadystatechange = null;
      this._anonymous = options && options.anon;
      this.readyState = XMLHttpRequest.UNSENT;
      this.response = null;
      this.responseText = '';
      this.responseType = '';
      this.responseURL = '';
      this.status = 0;
      this.statusText = '';
      this.timeout = 0;
      this.upload = new XMLHttpRequestUpload(this);
      this._method = null;
      this._url = null;
      this._sync = false;
      this._headers = null;
      this._loweredHeaders = null;
      this._mimeOverride = null;
      this._request = null;
      this._response = null;
      this._responseParts = null;
      this._responseHeaders = null;
      this._aborting = null;
      this._error = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
    }

    XMLHttpRequest.prototype.onreadystatechange = null;

    XMLHttpRequest.prototype.readyState = null;

    XMLHttpRequest.prototype.response = null;

    XMLHttpRequest.prototype.responseText = null;

    XMLHttpRequest.prototype.responseType = null;

    XMLHttpRequest.prototype.status = null;

    XMLHttpRequest.prototype.timeout = null;

    XMLHttpRequest.prototype.upload = null;

    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
      var xhrUrl;
      method = method.toUpperCase();
      if (method in this._restrictedMethods) {
        throw new SecurityError("HTTP method " + method + " is not allowed in XHR");
      }
      xhrUrl = this._parseUrl(url);
      if (async === void 0) {
        async = true;
      }
      switch (this.readyState) {
        case XMLHttpRequest.UNSENT:
        case XMLHttpRequest.OPENED:
        case XMLHttpRequest.DONE:
          null;
          break;
        case XMLHttpRequest.HEADERS_RECEIVED:
        case XMLHttpRequest.LOADING:
          null;
      }
      this._method = method;
      this._url = xhrUrl;
      this._sync = !async;
      this._headers = {};
      this._loweredHeaders = {};
      this._mimeOverride = null;
      this._setReadyState(XMLHttpRequest.OPENED);
      this._request = null;
      this._response = null;
      this.status = 0;
      this.statusText = '';
      this._responseParts = [];
      this._responseHeaders = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
      return void 0;
    };

    XMLHttpRequest.prototype.setRequestHeader = function(name, value) {
      var loweredName;
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      loweredName = name.toLowerCase();
      if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
        console.warn("Refused to set unsafe header \"" + name + "\"");
        return void 0;
      }
      value = value.toString();
      if (loweredName in this._loweredHeaders) {
        name = this._loweredHeaders[loweredName];
        this._headers[name] = this._headers[name] + ', ' + value;
      } else {
        this._loweredHeaders[loweredName] = name;
        this._headers[name] = value;
      }
      return void 0;
    };

    XMLHttpRequest.prototype.send = function(data) {
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      if (this._request) {
        throw new InvalidStateError("send() already called");
      }
      switch (this._url.protocol) {
        case 'file:':
          this._sendFile(data);
          break;
        case 'http:':
        case 'https:':
          this._sendHttp(data);
          break;
        default:
          throw new NetworkError("Unsupported protocol " + this._url.protocol);
      }
      return void 0;
    };

    XMLHttpRequest.prototype.abort = function() {
      if (!this._request) {
        return;
      }
      this._request.abort();
      this._setError();
      this._dispatchProgress('abort');
      this._dispatchProgress('loadend');
      return void 0;
    };

    XMLHttpRequest.prototype.getResponseHeader = function(name) {
      var loweredName;
      if (!this._responseHeaders) {
        return null;
      }
      loweredName = name.toLowerCase();
      if (loweredName in this._responseHeaders) {
        return this._responseHeaders[loweredName];
      } else {
        return null;
      }
    };

    XMLHttpRequest.prototype.getAllResponseHeaders = function() {
      var lines, name, value;
      if (!this._responseHeaders) {
        return '';
      }
      lines = (function() {
        var ref, results;
        ref = this._responseHeaders;
        results = [];
        for (name in ref) {
          value = ref[name];
          results.push(name + ": " + value);
        }
        return results;
      }).call(this);
      return lines.join("\r\n");
    };

    XMLHttpRequest.prototype.overrideMimeType = function(newMimeType) {
      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
        throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
      }
      this._mimeOverride = newMimeType.toLowerCase();
      return void 0;
    };

    XMLHttpRequest.prototype.nodejsSet = function(options) {
      var baseUrl, parsedUrl;
      if ('httpAgent' in options) {
        this.nodejsHttpAgent = options.httpAgent;
      }
      if ('httpsAgent' in options) {
        this.nodejsHttpsAgent = options.httpsAgent;
      }
      if ('baseUrl' in options) {
        baseUrl = options.baseUrl;
        if (baseUrl !== null) {
          parsedUrl = url.parse(baseUrl, false, true);
          if (!parsedUrl.protocol) {
            throw new SyntaxError("baseUrl must be an absolute URL");
          }
        }
        this.nodejsBaseUrl = baseUrl;
      }
      return void 0;
    };

    XMLHttpRequest.nodejsSet = function(options) {
      XMLHttpRequest.prototype.nodejsSet(options);
      return void 0;
    };

    XMLHttpRequest.prototype.UNSENT = 0;

    XMLHttpRequest.UNSENT = 0;

    XMLHttpRequest.prototype.OPENED = 1;

    XMLHttpRequest.OPENED = 1;

    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;

    XMLHttpRequest.HEADERS_RECEIVED = 2;

    XMLHttpRequest.prototype.LOADING = 3;

    XMLHttpRequest.LOADING = 3;

    XMLHttpRequest.prototype.DONE = 4;

    XMLHttpRequest.DONE = 4;

    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;

    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;

    XMLHttpRequest.prototype.nodejsBaseUrl = null;

    XMLHttpRequest.prototype._restrictedMethods = {
      CONNECT: true,
      TRACE: true,
      TRACK: true
    };

    XMLHttpRequest.prototype._restrictedHeaders = {
      'accept-charset': true,
      'accept-encoding': true,
      'access-control-request-headers': true,
      'access-control-request-method': true,
      connection: true,
      'content-length': true,
      cookie: true,
      cookie2: true,
      date: true,
      dnt: true,
      expect: true,
      host: true,
      'keep-alive': true,
      origin: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      via: true
    };

    XMLHttpRequest.prototype._privateHeaders = {
      'set-cookie': true,
      'set-cookie2': true
    };

    XMLHttpRequest.prototype._userAgent = ("Mozilla/5.0 (" + (os.type()) + " " + (os.arch()) + ") ") + ("node.js/" + process.versions.node + " v8/" + process.versions.v8);

    XMLHttpRequest.prototype._setReadyState = function(newReadyState) {
      var event;
      this.readyState = newReadyState;
      event = new ProgressEvent('readystatechange');
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._sendFile = function() {
      if (this._url.method !== 'GET') {
        throw new NetworkError('The file protocol only supports GET');
      }
      throw new Error("Protocol file: not implemented");
    };

    XMLHttpRequest.prototype._sendHttp = function(data) {
      if (this._sync) {
        throw new Error("Synchronous XHR processing not implemented");
      }
      if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {
        console.warn("Discarding entity body for " + this._method + " requests");
        data = null;
      } else {
        data || (data = '');
      }
      this.upload._setData(data);
      this._finalizeHeaders();
      this._sendHxxpRequest();
      return void 0;
    };

    XMLHttpRequest.prototype._sendHxxpRequest = function() {
      var agent, hxxp, request;
      if (this._url.protocol === 'http:') {
        hxxp = http;
        agent = this.nodejsHttpAgent;
      } else {
        hxxp = https;
        agent = this.nodejsHttpsAgent;
      }
      request = hxxp.request({
        hostname: this._url.hostname,
        port: this._url.port,
        path: this._url.path,
        auth: this._url.auth,
        method: this._method,
        headers: this._headers,
        agent: agent
      });
      this._request = request;
      if (this.timeout) {
        request.setTimeout(this.timeout, (function(_this) {
          return function() {
            return _this._onHttpTimeout(request);
          };
        })(this));
      }
      request.on('response', (function(_this) {
        return function(response) {
          return _this._onHttpResponse(request, response);
        };
      })(this));
      request.on('error', (function(_this) {
        return function(error) {
          return _this._onHttpRequestError(request, error);
        };
      })(this));
      this.upload._startUpload(request);
      if (this._request === request) {
        this._dispatchProgress('loadstart');
      }
      return void 0;
    };

    XMLHttpRequest.prototype._finalizeHeaders = function() {
      this._headers['Connection'] = 'keep-alive';
      this._headers['Host'] = this._url.host;
      if (this._anonymous) {
        this._headers['Referer'] = 'about:blank';
      }
      this._headers['User-Agent'] = this._userAgent;
      this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      return void 0;
    };

    XMLHttpRequest.prototype._onHttpResponse = function(request, response) {
      var lengthString;
      if (this._request !== request) {
        return;
      }
      switch (response.statusCode) {
        case 301:
        case 302:
        case 303:
        case 307:
        case 308:
          this._url = this._parseUrl(response.headers['location']);
          this._method = 'GET';
          if ('content-type' in this._loweredHeaders) {
            delete this._headers[this._loweredHeaders['content-type']];
            delete this._loweredHeaders['content-type'];
          }
          if ('Content-Type' in this._headers) {
            delete this._headers['Content-Type'];
          }
          delete this._headers['Content-Length'];
          this.upload._reset();
          this._finalizeHeaders();
          this._sendHxxpRequest();
          return;
      }
      this._response = response;
      this._response.on('data', (function(_this) {
        return function(data) {
          return _this._onHttpResponseData(response, data);
        };
      })(this));
      this._response.on('end', (function(_this) {
        return function() {
          return _this._onHttpResponseEnd(response);
        };
      })(this));
      this._response.on('close', (function(_this) {
        return function() {
          return _this._onHttpResponseClose(response);
        };
      })(this));
      this.responseURL = this._url.href.split('#')[0];
      this.status = this._response.statusCode;
      this.statusText = http.STATUS_CODES[this.status];
      this._parseResponseHeaders(response);
      if (lengthString = this._responseHeaders['content-length']) {
        this._totalBytes = parseInt(lengthString);
        this._lengthComputable = true;
      } else {
        this._lengthComputable = false;
      }
      return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
    };

    XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {
      if (this._response !== response) {
        return;
      }
      this._responseParts.push(data);
      this._loadedBytes += data.length;
      if (this.readyState !== XMLHttpRequest.LOADING) {
        this._setReadyState(XMLHttpRequest.LOADING);
      }
      return this._dispatchProgress('progress');
    };

    XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {
      if (this._response !== response) {
        return;
      }
      this._parseResponse();
      this._request = null;
      this._response = null;
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('load');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpResponseClose = function(response) {
      var request;
      if (this._response !== response) {
        return;
      }
      request = this._request;
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpTimeout = function(request) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('timeout');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._dispatchProgress = function(eventType) {
      var event;
      event = new ProgressEvent(eventType);
      event.lengthComputable = this._lengthComputable;
      event.loaded = this._loadedBytes;
      event.total = this._totalBytes;
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._setError = function() {
      this._request = null;
      this._response = null;
      this._responseHeaders = null;
      this._responseParts = null;
      return void 0;
    };

    XMLHttpRequest.prototype._parseUrl = function(urlString) {
      var absoluteUrlString, index, password, user, xhrUrl;
      if (this.nodejsBaseUrl === null) {
        absoluteUrlString = urlString;
      } else {
        absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);
      }
      xhrUrl = url.parse(absoluteUrlString, false, true);
      xhrUrl.hash = null;
      if (xhrUrl.auth && ((typeof user !== "undefined" && user !== null) || (typeof password !== "undefined" && password !== null))) {
        index = xhrUrl.auth.indexOf(':');
        if (index === -1) {
          if (!user) {
            user = xhrUrl.auth;
          }
        } else {
          if (!user) {
            user = xhrUrl.substring(0, index);
          }
          if (!password) {
            password = xhrUrl.substring(index + 1);
          }
        }
      }
      if (user || password) {
        xhrUrl.auth = user + ":" + password;
      }
      return xhrUrl;
    };

    XMLHttpRequest.prototype._parseResponseHeaders = function(response) {
      var loweredName, name, ref, value;
      this._responseHeaders = {};
      ref = response.headers;
      for (name in ref) {
        value = ref[name];
        loweredName = name.toLowerCase();
        if (this._privateHeaders[loweredName]) {
          continue;
        }
        if (this._mimeOverride !== null && loweredName === 'content-type') {
          value = this._mimeOverride;
        }
        this._responseHeaders[loweredName] = value;
      }
      if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {
        this._responseHeaders['content-type'] = this._mimeOverride;
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponse = function() {
      var arrayBuffer, buffer, i, j, jsonError, ref, view;
      if (Buffer.concat) {
        buffer = Buffer.concat(this._responseParts);
      } else {
        buffer = this._concatBuffers(this._responseParts);
      }
      this._responseParts = null;
      switch (this.responseType) {
        case 'text':
          this._parseTextResponse(buffer);
          break;
        case 'json':
          this.responseText = null;
          try {
            this.response = JSON.parse(buffer.toString('utf-8'));
          } catch (error1) {
            jsonError = error1;
            this.response = null;
          }
          break;
        case 'buffer':
          this.responseText = null;
          this.response = buffer;
          break;
        case 'arraybuffer':
          this.responseText = null;
          arrayBuffer = new ArrayBuffer(buffer.length);
          view = new Uint8Array(arrayBuffer);
          for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            view[i] = buffer[i];
          }
          this.response = arrayBuffer;
          break;
        default:
          this._parseTextResponse(buffer);
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseTextResponse = function(buffer) {
      var e;
      try {
        this.responseText = buffer.toString(this._parseResponseEncoding());
      } catch (error1) {
        e = error1;
        this.responseText = buffer.toString('binary');
      }
      this.response = this.responseText;
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponseEncoding = function() {
      var contentType, encoding, match;
      encoding = null;
      if (contentType = this._responseHeaders['content-type']) {
        if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
          return match[1];
        }
      }
      return 'utf-8';
    };

    XMLHttpRequest.prototype._concatBuffers = function(buffers) {
      var buffer, j, k, len, len1, length, target;
      if (buffers.length === 0) {
        return new Buffer(0);
      }
      if (buffers.length === 1) {
        return buffers[0];
      }
      length = 0;
      for (j = 0, len = buffers.length; j < len; j++) {
        buffer = buffers[j];
        length += buffer.length;
      }
      target = new Buffer(length);
      length = 0;
      for (k = 0, len1 = buffers.length; k < len1; k++) {
        buffer = buffers[k];
        buffer.copy(target, length);
        length += buffer.length;
      }
      return target;
    };

    return XMLHttpRequest;

  })(XMLHttpRequestEventTarget);

  module.exports = XMLHttpRequest;

  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  SecurityError = (function(superClass) {
    extend(SecurityError, superClass);

    function SecurityError() {
      SecurityError.__super__.constructor.apply(this, arguments);
    }

    return SecurityError;

  })(Error);

  XMLHttpRequest.SecurityError = SecurityError;

  InvalidStateError = (function(superClass) {
    extend(InvalidStateError, superClass);

    function InvalidStateError() {
      InvalidStateError.__super__.constructor.apply(this, arguments);
    }

    return InvalidStateError;

  })(Error);

  InvalidStateError = (function(superClass) {
    extend(InvalidStateError, superClass);

    function InvalidStateError() {
      return InvalidStateError.__super__.constructor.apply(this, arguments);
    }

    return InvalidStateError;

  })(Error);

  XMLHttpRequest.InvalidStateError = InvalidStateError;

  NetworkError = (function(superClass) {
    extend(NetworkError, superClass);

    function NetworkError() {
      NetworkError.__super__.constructor.apply(this, arguments);
    }

    return NetworkError;

  })(Error);

  XMLHttpRequest.SyntaxError = SyntaxError;

  SyntaxError = (function(superClass) {
    extend(SyntaxError, superClass);

    function SyntaxError() {
      SyntaxError.__super__.constructor.apply(this, arguments);
    }

    return SyntaxError;

  })(Error);

  ProgressEvent = (function() {
    function ProgressEvent(type) {
      this.type = type;
      this.target = null;
      this.currentTarget = null;
      this.lengthComputable = false;
      this.loaded = 0;
      this.total = 0;
    }

    ProgressEvent.prototype.bubbles = false;

    ProgressEvent.prototype.cancelable = false;

    ProgressEvent.prototype.target = null;

    ProgressEvent.prototype.loaded = null;

    ProgressEvent.prototype.lengthComputable = null;

    ProgressEvent.prototype.total = null;

    return ProgressEvent;

  })();

  XMLHttpRequest.ProgressEvent = ProgressEvent;

  XMLHttpRequestUpload = (function(superClass) {
    extend(XMLHttpRequestUpload, superClass);

    function XMLHttpRequestUpload(request) {
      XMLHttpRequestUpload.__super__.constructor.call(this);
      this._request = request;
      this._reset();
    }

    XMLHttpRequestUpload.prototype._reset = function() {
      this._contentType = null;
      this._body = null;
      return void 0;
    };

    XMLHttpRequestUpload.prototype._setData = function(data) {
      var body, i, j, k, offset, ref, ref1, view;
      if (typeof data === 'undefined' || data === null) {
        return;
      }
      if (typeof data === 'string') {
        if (data.length !== 0) {
          this._contentType = 'text/plain;charset=UTF-8';
        }
        this._body = new Buffer(data, 'utf8');
      } else if (Buffer.isBuffer(data)) {
        this._body = data;
      } else if (data instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        view = new Uint8Array(data);
        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          body[i] = view[i];
        }
        this._body = body;
      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        offset = data.byteOffset;
        view = new Uint8Array(data.buffer);
        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
          body[i] = view[i + offset];
        }
        this._body = body;
      } else {
        throw new Error("Unsupported send() data " + data);
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {
      if (this._contentType) {
        if (!('content-type' in loweredHeaders)) {
          headers['Content-Type'] = this._contentType;
        }
      }
      if (this._body) {
        headers['Content-Length'] = this._body.length.toString();
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._startUpload = function(request) {
      if (this._body) {
        request.write(this._body);
      }
      request.end();
      return void 0;
    };

    return XMLHttpRequestUpload;

  })(XMLHttpRequestEventTarget);

  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;

}).call(this);


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(21);

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(28);

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(41);

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(42);

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(6);

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(81);

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(1))(84);

/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMzQ2ZDhjZTQ1NmQ3NmE3YmMwMjEiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL3V0aWxzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIi4vdmVuZG9yXCIiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0V2ZW50LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9idW5kbGVzL2NvcmUudW1kLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvQ2hhcmFjdGVyRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvRE9NSW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vZGVGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vZGVMaXN0LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcnhqcy9PYnNlcnZhYmxlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvbW1vbi9idW5kbGVzL2NvbW1vbi51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9DU1NTdHlsZURlY2xhcmF0aW9uLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9DaGlsZE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0RvY3VtZW50LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9Eb2N1bWVudFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0hUTUxQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL1VSTC5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvV2luZG93LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9odG1sZWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvc2VsZWN0LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi94bWxuYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnVuZGxlcy9hbmltYXRpb25zLWJyb3dzZXIudW1kLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9Db21tZW50LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9ET01FeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0RPTVRva2VuTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvRG9jdW1lbnRGcmFnbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvRXZlbnRUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0xlYWYuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL01vdXNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vZGVUcmF2ZXJzYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vbkRvY3VtZW50VHlwZUNoaWxkTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvUHJvY2Vzc2luZ0luc3RydWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9UZXh0LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9VSUV2ZW50LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9VUkxVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvYXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvY29uZmlnLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL2ltcGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL3Nsb3BweS5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvc3ZnLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvYW5pbWF0aW9ucy9idW5kbGVzL2FuaW1hdGlvbnMudW1kLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYnVuZGxlcy9wbGF0Zm9ybS1icm93c2VyLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL2ZpbHRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL2ZpcnN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1cmxcIiIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvYXBwL2FwcC5zZXJ2ZXIubW9kdWxlLmpzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyL2J1bmRsZXMvcGxhdGZvcm0tc2VydmVyLnVtZC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlZmxlY3QtbWV0YWRhdGEvUmVmbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2ZpcnN0LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvYXNwbmV0LXByZXJlbmRlcmluZy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy96b25lLmpzL2Rpc3Qvem9uZS1ub2RlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL2NvbW1vbi9idW5kbGVzL2NvbW1vbi1odHRwLnVtZC5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYnVuZGxlcy9wbGF0Zm9ybS1icm93c2VyLWFuaW1hdGlvbnMudW1kLmpzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9ib290LnNlcnZlci50cyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvQ3VzdG9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0ZpbHRlcmVkRWxlbWVudExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL0xvY2F0aW9uLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9NdXRhdGlvbkNvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvTmF2aWdhdG9ySUQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL05vZGVJdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvVHJlZVdhbGtlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbWluby9saWIvV2luZG93VGltZXJzLmpzIiwid2VicGFjazovLy8uL34vZG9taW5vL2xpYi9jc3NwYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb21pbm8vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci90b1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi90c2xpYi90c2xpYi5qcyIsIndlYnBhY2s6Ly8vLi9+L3hocjIvbGliL3hocjIuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb21waWxlci9idW5kbGVzL2NvbXBpbGVyLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL21hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9AYW5ndWxhci9odHRwL2J1bmRsZXMvaHR0cC51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL2J1bmRsZXMvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL1N1YmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcnhqcy9vYnNlcnZhYmxlL29mLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvY29uY2F0TWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiaHR0cHNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJvc1wiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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U0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLHFCQUFxQjtBQUNyQjtBQUNBLElBQUk7O0FBRUosd0JBQXdCO0FBQ3hCO0FBQ0EsSUFBSTs7QUFFSixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDbFRBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsZUFBZSxlQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDLGtDQUFrQztBQUNsQyxtREFBbUQsd0JBQXdCLEVBQUU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEMsa0NBQWtDO0FBQ2xDLG1EQUFtRCx3QkFBd0IsRUFBRTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSw4QkFBOEIsUUFBUTtBQUN0QyxrQ0FBa0M7QUFDbEMsbURBQW1ELHdCQUF3QixFQUFFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKOztBQUVBOzs7Ozs7OztBQ2hHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLGlCQUFpQjtBQUMvQixLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUosYUFBYSxvQkFBb0I7QUFDakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGdCQUFnQixpQ0FBaUM7QUFDakQsZUFBZTtBQUNmO0FBQ0E7QUFDQSxJQUFJO0FBQ0osZUFBZSxjQUFjOztBQUU3QixtQkFBbUI7QUFDbkI7QUFDQSxJQUFJO0FBQ0osa0JBQWtCO0FBQ2xCO0FBQ0EsSUFBSTtBQUNKLDJCQUEyQjtBQUMzQjtBQUNBLElBQUk7QUFDSixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsR0FBRywyQkFBMkI7O0FBRTlCLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUcsMkJBQTJCOztBQUU5QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBLHNCQUFzQiw2Q0FBNkM7QUFDbkUseUJBQXlCLGdEQUFnRDtBQUN6RSwyQkFBMkIsa0RBQWtEO0FBQzdFLDJCQUEyQixrREFBa0Q7O0FBRTdFLGNBQWM7QUFDZDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSixlQUFlO0FBQ2Y7QUFDQSxHQUFHLDJCQUEyQjs7QUFFOUI7QUFDQSxRQUFRLGlCQUFpQjtBQUN6QixXQUFXLGlDQUFpQztBQUM1QyxhQUFhLGlCQUFpQjtBQUM5QixXQUFXLGlDQUFpQztBQUM1QyxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQsRUFBRTtBQUNGO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsUUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHdEQUF3RCxvQkFBb0I7QUFDNUUsR0FBRztBQUNILGtDQUFrQyxrQkFBa0IsRUFBRTtBQUN0RCxvQ0FBb0Msa0JBQWtCLEVBQUU7QUFDeEQscUNBQXFDLGtCQUFrQixFQUFFO0FBQ3pELHFDQUFxQyxrQkFBa0IsRUFBRTtBQUN6RCxrQ0FBa0Msa0JBQWtCLEVBQUU7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxJQUFJO0FBQ0osV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWSxpQkFBaUI7QUFDN0IsVUFBVSxpQkFBaUI7QUFDM0IsVUFBVSxpQkFBaUI7QUFDM0IsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQSxxQkFBcUIseUJBQXlCLEVBQUU7QUFDaEQ7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUIseUJBQXlCLEVBQUU7QUFDaEQ7QUFDQSxHQUFHOztBQUVILFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLFlBQVk7QUFDWjtBQUNBLElBQUk7O0FBRUosU0FBUztBQUNUO0FBQ0EsSUFBSTs7QUFFSixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxJQUFJOztBQUVKLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJOztBQUVKO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLElBQUk7O0FBRUo7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJOzs7QUFHSjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUosYUFBYTtBQUNiO0FBQ0E7QUFDQSxJQUFJOztBQUVKLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSxJQUFJOztBQUVKLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLGtCQUFrQjtBQUNsQjtBQUNBLElBQUk7O0FBRUoscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxpQ0FBaUMsT0FBTztBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMzeEJBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxrQkFBa0Isa0JBQWtCLEdBQUc7QUFDcEQ7QUFDQSxxQkFBcUIsYUFBYSxFQUFFO0FBQ3BDO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLFVBQVU7QUFDVjtBQUNBLElBQUk7O0FBRUosWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7Ozs7Ozs7QUNyQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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SyxLQUFLLEtBQUssS0FBSyxVQUFVLE9BQU8sVUFBVSxHQUFHLE1BQU0sa0JBQWtCLElBQUksS0FBSyxLQUFLLEtBQUssWUFBWSxRQUFRLE1BQU0sR0FBRyxHQUFHLEtBQUssTUFBTSxJQUFJLE9BQU8sT0FBTyxHQUFHLFFBQVEsZUFBZSxJQUFJLE1BQU0sYUFBYSxJQUFJLElBQUksWUFBWSxLQUFLLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxJQUFJLFFBQVEsT0FBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLFNBQVMsT0FBTyxHQUFHLFVBQVUsR0FBRyxPQUFPLFdBQVcsSUFBSSxPQUFPLEdBQUcsTUFBTSxHQUFHLElBQUksSUFBSSxTQUFTLElBQUksUUFBUSxTQUFTLEdBQUcsUUFBUSxJQUFJLFNBQVMsTUFBTSxhQUFhLEtBQUssV0FBVyxlQUFlLFNBQVMsT0FBTyxRQUFRLElBQUksV0FBVyxRQUFRLElBQUksV0FBVyxNQUFNLFVBQVUsR0FBRyxPQUFPLGFBQWEsR0FBRyxRQUFRLEtBQUssTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsTUFBTSxPQUFPLFdBQVcsS0FBSyxrQkFBa0IsSUFBSSxRQUFRLEtBQUssT0FBTyxRQUFRLHNCQUFzQixRQUFRLGFBQWEsTUFBTSxNQUFNLE9BQU8sTUFBTSxZQUFZLEdBQUcsS0FBSyxNQUFNLFdBQVcsTUFBTSxLQUFLLFNBQVMsTUFBTSxLQUFLLE9BQU8sV0FBVyxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLE1BQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsUUFBUSxNQUFNLE9BQU8sT0FBTyxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLFVBQVUsU0FBUyxNQUFNLFVBQVUsS0FBSyxPQUFPLEdBQUcsUUFBUSxHQUFHLE1BQU0sYUFBYSxJQUFJLFFBQVEsR0FBRyxNQUFNLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsU0FBUyxJQUFJLGNBQWMsS0FBSyxPQUFPLE1BQU0sUUFBUSxJQUFJLE9BQU8sU0FBUyxRQUFRLE9BQU8sT0FBTyxPQUFPLFFBQVEsUUFBUSxNQUFNLElBQUksUUFBUSxHQUFHLE1BQU0sSUFBSSxtQkFBbUIsT0FBTyxRQUFRLEdBQUcsS0FBSyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssTUFBTSxVQUFVLEtBQUssYUFBYSxNQUFNLEdBQUcsYUFBYSxHQUFHLE9BQU8sSUFBSSxXQUFXLEtBQUssYUFBYSxLQUFLLE1BQU0sUUFBUSxLQUFLLE1BQU0sSUFBSSxhQUFhLEtBQUssU0FBUyxVQUFVLEdBQUcsT0FBTyxHQUFHLFNBQVMsY0FBYyxHQUFHLFNBQVMsSUFBSSxVQUFVLEdBQUcsT0FBTyxPQUFPLFFBQVEsSUFBSSxNQUFNLElBQUksR0FBRyxhQUFhLEdBQUcsaUJBQWlCLE1BQU0sTUFBTSxPQUFPLE1BQU0saUJBQWlCLE9BQU8sT0FBTyxLQUFLLGFBQWEsS0FBSyxRQUFRLFVBQVUsS0FBSyxVQUFVLE1BQU0sSUFBSSxPQUFPLEdBQUcsYUFBYSxLQUFLLFdBQVcsR0FBRyxPQUFPLFVBQVUsSUFBSSxRQUFRLFFBQVEsTUFBTSxPQUFPLFdBQVcsR0FBRyxVQUFVLEdBQUcsWUFBWSxRQUFRLE1BQU0sSUFBSSxJQUFJLE9BQU8sS0FBSyxNQUFNLFFBQVEsU0FBUyxPQUFPLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxNQUFNLE9BQU8sS0FBSyxRQUFRLE1BQU0sUUFBUSxlQUFlLFlBQVksWUFBWSxnQkFBZ0IsT0FBTyxlQUFlLFNBQVMsS0FBSyxhQUFhLEdBQUcsS0FBSyxNQUFNLFVBQVUsT0FBTyxHQUFHLFdBQVcsS0FBSyxTQUFTLFFBQVEsUUFBUSxlQUFlLElBQUksV0FBVyxPQUFPLFdBQVcsT0FBTyxHQUFHLFFBQVEsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLE9BQU8sTUFBTSxPQUFPLEtBQUssUUFBUSxRQUFRLEdBQUcsTUFBTSxLQUFLLFdBQVcsUUFBUSxLQUFLLEdBQUcsYUFBYSxHQUFHLEdBQUcsU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksTUFBTSxPQUFPLEtBQUssR0FBRyxlQUFlLE1BQU0sU0FBUyxZQUFZLE1BQU0sV0FBVyxLQUFLLE9BQU8sSUFBSSxVQUFVLFVBQVUsS0FBSyxTQUFTLEtBQUssSUFBSSxRQUFRLEdBQUcsVUFBVSxLQUFLLFNBQVMsS0FBSyxjQUFjLFdBQVcscUJBQXFCLElBQUksT0FBTyxVQUFVLFFBQVEsS0FBSyxJQUFJLE9BQU8sTUFBTSxRQUFRLEtBQUssS0FBSyxNQUFNLFFBQVEsU0FBUyxNQUFNLEdBQUcsWUFBWSxtQkFBbUIsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLFFBQVEsR0FBRyxRQUFRLElBQUksR0FBRyxLQUFLLE9BQU8sR0FBRyxLQUFLLEtBQUssTUFBTSxNQUFNLFdBQVcsR0FBRyxXQUFXLFFBQVEsR0FBRyxJQUFJLFFBQVEsU0FBUyxHQUFHLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxPQUFPLE9BQU8sSUFBSSxRQUFRLE1BQU0sR0FBRyxRQUFRLElBQUksT0FBTyxNQUFNLEdBQUcsT0FBTyxLQUFLLE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxPQUFPLE1BQU0sT0FBTyxNQUFNLEdBQUcsT0FBTyxNQUFNLE1BQU0sUUFBUSxPQUFPLEdBQUcsR0FBRyxRQUFRLE9BQU8sSUFBSSxNQUFNLE1BQU0sT0FBTyxlQUFlLElBQUksTUFBTSxXQUFXLE9BQU8sT0FBTyxLQUFLLGdCQUFnQixJQUFJLFdBQVcsVUFBVSxJQUFJLE1BQU0sU0FBUyxNQUFNLEtBQUssR0FBRyxRQUFRLE1BQU0sYUFBYSxLQUFLLE9BQU8sTUFBTSxLQUFLLFlBQVksT0FBTyxVQUFVLE1BQU0sZ0JBQWdCLFlBQVksS0FBSyxNQUFNLFNBQVMsTUFBTSxNQUFNLFdBQVcsTUFBTSxhQUFhLE9BQU8sS0FBSyxJQUFJLFNBQVMsS0FBSyxTQUFTLEdBQUcsUUFBUSxPQUFPLFNBQVMsSUFBSSxPQUFPLEtBQUssT0FBTyxZQUFZLE9BQU8sTUFBTSxNQUFNLEtBQUssS0FBSyxLQUFLLE9BQU8sTUFBTSxRQUFRLEtBQUssT0FBTyxNQUFNLEtBQUssVUFBVSxNQUFNLFFBQVEsTUFBTSxVQUFVLEtBQUssSUFBSSxJQUFJLE9BQU8sT0FBTyxTQUFTLE9BQU8sR0FBRyxLQUFLLE1BQU0sR0FBRyxJQUFJLFFBQVEsTUFBTSxVQUFVLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxNQUFNLEtBQUssUUFBUSxNQUFNLE9BQU8sY0FBYyxHQUFHLFdBQVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxjQUFjLElBQUksTUFBTSxPQUFPLE1BQU0sR0FBRyxNQUFNLFVBQVUsUUFBUSxNQUFNLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxLQUFLLFFBQVEsTUFBTSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxNQUFNLEdBQUcsWUFBWSxLQUFLLFlBQVksR0FBRyxRQUFRLFFBQVEsR0FBRyxjQUFjLFNBQVMsSUFBSSxLQUFLLEdBQUcsU0FBUyxRQUFRLEdBQUcsV0FBVyxPQUFPLEtBQUssT0FBTyxlQUFlLE1BQU0saUJBQWlCLElBQUksYUFBYSxrQkFBa0IsR0FBRyxXQUFXLFlBQVksYUFBYSxJQUFJLE1BQU0sR0FBRyxPQUFPLE9BQU8sSUFBSSxRQUFRLE1BQU0sR0FBRyxRQUFRLElBQUksYUFBYSxLQUFLLFVBQVUsTUFBTSxNQUFNLEtBQUssYUFBYSxNQUFNLEdBQUcsT0FBTyxHQUFHLGFBQWEsTUFBTSxHQUFHLE9BQU8sTUFBTSxNQUFNLEtBQUssUUFBUSxNQUFNLEtBQUssV0FBVyxTQUFTLE1BQU0sU0FBUyxPQUFPLE1BQU0sT0FBTyxNQUFNLEdBQUcsT0FBTyxhQUFhLElBQUksTUFBTSxtQkFBbUIsWUFBWSxTQUFTLFlBQVksaUJBQWlCLE9BQU8sU0FBUyxHQUFHLEtBQUssUUFBUSxTQUFTLEtBQUssT0FBTyxNQUFNLEdBQUcsVUFBVSxJQUFJLFVBQVUsUUFBUSxRQUFRLEdBQUcsSUFBSSxLQUFLLFdBQVcsSUFBSSxHQUFHLE9BQU8sR0FBRyxHQUFHLFFBQVEsT0FBTyxHQUFHLFFBQVEsT0FBTyxPQUFPLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPLFNBQVMsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLE1BQU0sY0FBYyxJQUFJLFlBQVksUUFBUSxRQUFRLE1BQU0sS0FBSyxRQUFRLFFBQVEsTUFBTSxNQUFNLElBQUksUUFBUSxXQUFXLEdBQUcsT0FBTyxjQUFjLElBQUksSUFBSSxTQUFTLE9BQU8sS0FBSyxLQUFLLEtBQUssVUFBVSxHQUFHLE1BQU0sR0FBRyxXQUFXLElBQUksUUFBUSxVQUFVLElBQUksSUFBSSxRQUFRLE1BQU0sT0FBTyxRQUFRLEtBQUssYUFBYSxNQUFNLEdBQUcsbUJBQW1CLFlBQVksSUFBSSxNQUFNLEdBQUcsY0FBYyxVQUFVLE1BQU0sVUFBVSxNQUFNLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxNQUFNLFNBQVMsT0FBTyxHQUFHLFdBQVcsU0FBUyxHQUFHLGFBQWEsS0FBSyxPQUFPLFFBQVEsS0FBSyxLQUFLLEdBQUcsT0FBTyxNQUFNLEtBQUssU0FBUyxNQUFNLElBQUksT0FBTyxNQUFNLFNBQVMsSUFBSSxVQUFVLEdBQUcsTUFBTSxPQUFPLE1BQU0sTUFBTSxHQUFHLE9BQU8sSUFBSSxNQUFNLE1BQU0sR0FBRyxXQUFXLEtBQUssS0FBSyxPQUFPLE1BQU0sR0FBRyxJQUFJLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxNQUFNLFlBQVksWUFBWSxPQUFPLEdBQUcsT0FBTyxPQUFPLEdBQUcsT0FBTyxNQUFNLE9BQU8sR0FBRyxRQUFRLFFBQVEsTUFBTSxPQUFPLEdBQUcsS0FBSyxPQUFPLEdBQUcsR0FBRyxTQUFTLE9BQU8sR0FBRyxHQUFHLGdCQUFnQixPQUFPLElBQUksR0FBRyxRQUFRLE1BQU0sS0FBSyxNQUFNLE1BQU0sSUFBSSxhQUFhLFFBQVEsR0FBRyxHQUFHLFlBQVksUUFBUSxHQUFHLFlBQVksS0FBSyxHQUFHLEdBQUcsYUFBYSxVQUFVLFFBQVEsTUFBTSxHQUFHLE9BQU8sS0FBSyxVQUFVLElBQUksV0FBVyxHQUFHLEdBQUcsUUFBUSxPQUFPLEdBQUcsVUFBVSxJQUFJLE9BQU8sR0FBRyxHQUFHLFFBQVEsT0FBTyxHQUFHLGFBQWEsTUFBTSxLQUFLLG1CQUFtQixJQUFJLFdBQVcsSUFBSSxTQUFTLE1BQU0sS0FBSyxJQUFJLFlBQVksTUFBTSxJQUFJLE1BQU0sT0FBTyxHQUFHLFFBQVEsU0FBUyxHQUFHLE1BQU0sS0FBSyxXQUFXLE1BQU0sTUFBTSxVQUFVLFNBQVMsTUFBTSxJQUFJLFFBQVEsU0FBUyxVQUFVLEtBQUssWUFBWSxHQUFHLEtBQUssVUFBVSxNQUFNLElBQUksSUFBSSxNQUFNLE9BQU8sU0FBUyxHQUFHLFNBQVMsTUFBTSxJQUFJLFVBQVUsR0FBRyxNQUFNLFNBQVMsUUFBUSxNQUFNLE1BQU0sR0FBRyxVQUFVLEtBQUssVUFBVSxHQUFHLEtBQUssT0FBTyxRQUFRLEtBQUssS0FBSyxPQUFPLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxJQUFJLFFBQVEsSUFBSSxPQUFPLEdBQUcsU0FBUyxNQUFNLEtBQUssV0FBVyxTQUFTLElBQUksT0FBTyxPQUFPLFlBQVksTUFBTSxNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssVUFBVSxLQUFLLEtBQUssR0FBRyxNQUFNLEtBQUssVUFBVSxHQUFHLE9BQU8sS0FBSyxPQUFPLFNBQVMsR0FBRyxpQkFBaUIsR0FBRyxLQUFLLFFBQVEsTUFBTSxHQUFHLEtBQUssT0FBTyxHQUFHLElBQUksSUFBSSxNQUFNLEtBQUssS0FBSyxZQUFZLElBQUksS0FBSyxRQUFRLEdBQUcsSUFBSSxLQUFLLE1BQU0sTUFBTSxRQUFRLFNBQVMsSUFBSSxZQUFZLEtBQUssS0FBSyxNQUFNLFVBQVUsR0FBRyxRQUFRLElBQUksS0FBSyxRQUFRLFVBQVUsTUFBTSxNQUFNLE9BQU8sSUFBSSxPQUFPLE1BQU0sU0FBUyxHQUFH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QUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQyxnREFBZ0QsNkJBQTZCLEVBQUU7QUFDL0U7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJCQUEyQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxpQkFBaUIsRUFBRTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLElBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MscUNBQXFDO0FBQ3JDLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLHFDQUFxQztBQUNyQyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLHFDQUFxQztBQUNyQyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLGlDQUFpQztBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QyxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlCQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQzVrT0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsc0JBQXNCLEVBQUU7QUFDbEQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5QixzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDL0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLDJCQUEyQjtBQUNwQyxZQUFZLGlCQUFpQjtBQUM3QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGNBQWMsaUNBQWtDOztBQUVoRDtBQUNBLFdBQVcsa0JBQWtCLGFBQWEsR0FBRztBQUM3QyxTQUFTLGtCQUFrQixhQUFhLEdBQUc7QUFDM0MsV0FBVyxrQkFBa0IsYUFBYSxHQUFHOztBQUU3QztBQUNBLFdBQVcsa0JBQWtCLGFBQWEsR0FBRztBQUM3QyxRQUFRLGtCQUFrQixhQUFhLEdBQUc7O0FBRTFDO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLGlCQUFpQixjQUFjO0FBQy9CLFdBQVcsY0FBYzs7QUFFekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDtBQUNBOzs7Ozs7OztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDLGtEQUFrRCwwQkFBMEI7QUFDNUU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMENBQTBDO0FBQ3BEO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixXQUFXLHNCQUFzQjtBQUNqQyxZQUFZO0FBQ1osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQsV0FBVyw2Q0FBNkM7QUFDeEQsWUFBWSw2Q0FBNkM7QUFDekQsWUFBWSw2Q0FBNkM7QUFDekQsY0FBYyw2Q0FBNkM7QUFDM0Q7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnRUFBZ0U7QUFDM0U7QUFDQTtBQUNBLGlCQUFpQiwrREFBK0Q7QUFDaEYsa0JBQWtCLDhJQUE4STtBQUNoSztBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsbUJBQW1CLGtDQUFrQztBQUNyRDtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBLGFBQWEsa0VBQWtFO0FBQy9FO0FBQ0EsY0FBYywrS0FBK0s7QUFDN0wsZUFBZSwrTEFBK0w7QUFDOU07QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXFDO0FBQ3JDO0FBQ0EsR0FBRztBQUNIO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsS0FBSyxFQUFFO0FBQ1Asc0JBQXNCO0FBQ3RCO0FBQ0EsS0FBSyxFQUFFO0FBQ1AsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkNBQTZDO0FBQ2hFLGtCQUFrQiw2Q0FBNkM7QUFDL0Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0NBQW9DO0FBQ2pELGFBQWEsb0NBQW9DO0FBQ2pEO0FBQ0EsYUFBYSw2Q0FBNkM7QUFDMUQ7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0JBQStCO0FBQ3BELFdBQVcsc0RBQXNEO0FBQ2pFLGdCQUFnQixzREFBc0Q7QUFDdEU7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLGlCQUFpQixxREFBcUQ7QUFDdEUsa0JBQWtCLDhJQUE4STtBQUNoSyxnQkFBZ0IsaUtBQWlLO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRCQUE0QjtBQUMxQztBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxZQUFZLHlCQUF5QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOERBQThEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9DQUFvQztBQUNqRDtBQUNBLGFBQWEsb0NBQW9DO0FBQ2pEO0FBQ0E7QUFDQSxhQUFhLDZDQUE2QztBQUMxRDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCLGdDQUFnQztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxj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O0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUIsV0FBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2QyxJQUFJO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSwyQkFBMkIsMENBQTBDO0FBQ3JFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEVBQUUsc0JBQXNCLEVBQUU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxxQ0FBcUMsa0JBQWtCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSwrQkFBK0IsRUFBRTtBQUNqQyxtQ0FBbUMsRUFBRTtBQUNyQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLG1EQUFtRDtBQUNwRTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEVBQUU7QUFDdEMsaUNBQWlDLEVBQUU7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEVBQUU7QUFDakMsNkRBQTZELGtEQUFrRCxFQUFFO0FBQ2pILGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxhQUFhLEVBQUU7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRSxzREFBc0Qsa0NBQWtDLEVBQUU7QUFDbkgsdUJBQXVCLEVBQUU7QUFDekI7QUFDQSwyQkFBMkIsRUFBRTtBQUM3QiwyQkFBMkIsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsK0JBQStCLEVBQUU7QUFDakM7QUFDQSxtQ0FBbUMsRUFBRTtBQUNyQztBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxvQ0FBb0MsRUFBRSxVQUFVLHNCQUFzQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixFQUFFO0FBQ3RCO0FBQ0E7QUFDQSwrREFBK0QsMEJBQTBCLEVBQUU7QUFDM0Y7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixFQUFFO0FBQzVCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EsbUJBQW1CLDJCQUEyQjtBQUM5QztBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxtQkFBbUIsMEJBQTBCO0FBQzdDO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQ7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxhQUFhLEVBQUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsYUFBYSxFQUFFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLGtCQUFrQiw0Q0FBNEM7QUFDOUQ7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQiwrQ0FBK0M7QUFDaEU7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLHFCQUFxQixxQ0FBcUMsRUFBRTtBQUM1RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix1Q0FBdUMsYUFBYSxFQUFFO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7O0FBRUE7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLHFCQUFxQixvQ0FBb0M7QUFDekQ7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLDJCQUEyQixvQ0FBb0M7QUFDL0Q7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLDBCQUEwQixFQUFFLGlCQUFpQixFQUFFO0FBQy9DO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EseUNBQXlDLHNCQUFzQjtBQUMvRCx1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRSxxQkFBcUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixFQUFFLDZDQUE2QyxFQUFFLCtDQUErQyw4Q0FBOEMsRUFBRTtBQUN2SztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGdFQUFnRSxFQUFFO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QyxjQUFjOztBQUU1RCxDQUFDO0FBQ0Q7Ozs7Ozs7O0FDN2pNQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLG1CQUFtQixFQUFFO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBLElBQUk7QUFDSixDQUFDOzs7Ozs7OztBQ2hDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7Ozs7Ozs7O0FDcklBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3pGQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsOEJBQThCO0FBQzNDLGM7QUFDQSxxQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsSUFBSTtBQUNKLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCLEVBQUU7QUFDaEQ7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUIseUJBQXlCLEVBQUU7QUFDaEQ7QUFDQSxHQUFHOztBQUVILENBQUM7Ozs7Ozs7O0FDbEVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxPQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQzs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQ7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QUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDelBBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEU7QUFDQSwwQ0FBMEMsMkNBQTJDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdUNBQXVDLEVBQUU7QUFDaEU7QUFDQSx3REFBd0QsUUFBUTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4QztBQUNBO0FBQ0Esc0JBQXNCLHVDQUF1QztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHVCQUF1QjtBQUN4RSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixPQUFPO0FBQ1A7QUFDQSxnQkFBZ0I7QUFDaEIsT0FBTztBQUNQO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDdkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7O0FDTkE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7Ozs7OztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNOQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQ3pCQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxrQkFBa0I7QUFDOUQ7QUFDQTtBQUNBLHlCQUF5QixXQUFXO0FBQ3BDO0FBQ0E7QUFDQTs7Ozs7Ozs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7OztBQ3hERCw4Qzs7Ozs7O0FDQUEsNkM7Ozs7OztBQ0FBLDhDOzs7Ozs7QUNBQSw4Qzs7Ozs7O0FDQUEsZ0M7Ozs7Ozs7QUNBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IsNkM7Ozs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsK0JBQStCO0FBQ3JFLENBQUMsMFVBQTBVOztBQUUzVTtBQUNBO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLGdCQUFnQixzQ0FBc0MsaUJBQWlCLEVBQUU7QUFDL0UscUJBQXFCLHVEQUF1RDs7QUFFNUU7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEdBQUc7QUFDZCxZQUFZO0FBQ1o7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDLG1CQUFtQixFQUFFO0FBQ3JCLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLGtFQUFrRTtBQUNuRjtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHVCQUF1QixFQUFFO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsNkJBQTZCLGdCQUFnQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EscUJBQXFCLDZEQUE2RDtBQUNsRjtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxxQkFBcUIsZ0NBQWdDO0FBQ3JEO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLHFCQUFxQix5Q0FBeUM7QUFDOUQ7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixFQUFFO0FBQzdCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEVBQUU7QUFDdEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekIsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6QjtBQUNBLDJCQUEyQixFQUFFLHVDQUF1QztBQUNwRSxnQ0FBZ0MsRUFBRSxVQUFVLHNCQUFzQjtBQUNsRTtBQUNBLG1DQUFtQyxFQUFFLHVCQUF1QixFQUFFO0FBQzlELG1DQUFtQyxFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxFQUFFO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekIsNEJBQTRCLEVBQUU7QUFDOUIsMkJBQTJCLEVBQUU7QUFDN0I7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QixvQkFBb0IsRUFBRTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxtQ0FBbUMseUNBQXlDO0FBQzVFO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QixnRUFBZ0UsRUFBRTtBQUNsRTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHVCQUF1QixFQUFFO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixFQUFFO0FBQ3pCLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixxQ0FBcUM7QUFDdEQ7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixzQ0FBc0M7QUFDdkQ7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EsbUJBQW1CLDhDQUE4QztBQUNqRTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EscUJBQXFCLG9DQUFvQztBQUN6RDtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLDRCQUE0QixvQ0FBb0M7QUFDaEU7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCLHFDQUFxQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQSxTQUFTLGlDQUFpQztBQUMxQztBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hELFNBQVMsZ0NBQWdDLHlFQUF5RSxJQUFJO0FBQ3RILE1BQU07QUFDTjtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsa0NBQWtDO0FBQ25EO0FBQ0EsU0FBUyxpQ0FBaUM7QUFDMUM7QUFDQTtBQUNBLDRDQUE0QyxXQUFXO0FBQ3ZEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLFNBQVMsaUNBQWlDO0FBQzFDO0FBQ0E7QUFDQSxxREFBcUQsV0FBVztBQUNoRTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsRUFBRSxzQkFBc0IsRUFBRTtBQUNyRCwyQkFBMkIsRUFBRTtBQUM3QiwyQkFBMkIsRUFBRTtBQUM3QiwyQkFBMkIsRUFBRTtBQUM3QiwyQkFBMkIsRUFBRTtBQUM3QiwyQkFBMkIsRUFBRTtBQUM3QjtBQUNBO0FBQ0EsK0JBQStCLEVBQUU7QUFDakMseURBQXlELDBCQUEwQixFQUFFO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixFQUFFLDJGQUEyRixlQUFlLGFBQWEsRUFBRTtBQUN0SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEVBQUU7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25EO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsRUFBRTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLEtBQUssdUhBQXVIO0FBQzVILEtBQUsseURBQXlELEdBQUcsb0VBQW9FO0FBQ3JJLEtBQUssZ0VBQWdFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsRUFBRTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEVBQUUsd0JBQXdCLEVBQUU7QUFDbkQ7QUFDQSwyQkFBMkIsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQixtQkFBbUIsRUFBRSxrRUFBa0U7QUFDeEc7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxtQkFBbUIsZ0NBQWdDO0FBQ25EO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxxQkFBcUIscURBQXFELEVBQUU7QUFDNUU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixFQUFFO0FBQ3RCLHVCQUF1QixFQUFFO0FBQ3pCLHVDQUF1QywwQ0FBMEMsRUFBRSxNQUFNLHFEQUFxRCxHQUFHLEVBQUU7QUFDbko7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6QixvQkFBb0IsRUFBRTtBQUN0QixvQkFBb0IsRUFBRTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0EsU0FBUyxpQ0FBaUM7QUFDMUM7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCxTQUFTLGdDQUFnQyx5RUFBeUUsSUFBSTtBQUN0SCxTQUFTLGdDQUFnQywrQkFBK0IsR0FBRyxzREFBc0QsSUFBSTtBQUNySSxNQUFNO0FBQ047QUFDQSxDQUFDO0FBQ0Q7QUFDQSxXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLEVBQUU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsRUFBRTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVMsaUNBQWlDO0FBQzFDO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQsU0FBUyw4QkFBOEI7QUFDdkMsU0FBUyxnQ0FBZ0MseUVBQXlFLElBQUk7QUFDdEgsU0FBUyxvREFBb0Q7QUFDN0QsTUFBTTtBQUNOO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQSxpQ0FBaUMsZ0VBQWdFO0FBQ2pHO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUNBQWlDLGlFQUFpRTtBQUNsRztBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLGlDQUFpQyxrRUFBa0U7QUFDbkc7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EscUJBQXFCLCtEQUErRDtBQUNwRjtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQSxxQkFBcUIsNkRBQTZEO0FBQ2xGO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEdBQUc7QUFDbEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EseUJBQXlCLHVEQUF1RDtBQUNoRjtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBLHlCQUF5QiwwREFBMEQ7QUFDbkY7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRSwwQkFBMEIsRUFBRTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0EsNEJBQTRCLHlEQUF5RDtBQUNyRjtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixFQUFFO0FBQ3pCLHVCQUF1QixFQUFFLHVDQUF1Qyw2Q0FBNkMsd0JBQXdCLEVBQUUsRUFBRTtBQUN6SSwwREFBMEQsd0ZBQXdGLEVBQUU7QUFDcEo7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0Esd0JBQXdCLHNFQUFzRTtBQUM5RjtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLCtCQUErQixFQUFFO0FBQzdFO0FBQ0E7QUFDQSxTQUFTLGlDQUFpQztBQUMxQztBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELFNBQVMsZ0NBQWdDLHlFQUF5RSxJQUFJO0FBQ3RILFNBQVMsZ0NBQWdDLCtCQUErQixHQUFHLCtFQUErRSxJQUFJO0FBQzlKLE1BQU07QUFDTjtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLG9HQUFvRztBQUN6RyxLQUFLLG9GQUFvRjtBQUN6RixLQUFLLDBIQUEwSDtBQUMvSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsS0FBSyxvRUFBb0U7QUFDekU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QjtBQUNyRDtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSyxxRkFBcUY7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxREFBcUQ7QUFDOUU7QUFDQSxpQkFBaUIsSUFBSTtBQUNyQjtBQUNBO0FBQ0EsK0NBQStDLFdBQVc7QUFDMUQ7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixJQUFJO0FBQ3JCO0FBQ0E7QUFDQSw0REFBNEQsV0FBVztBQUN2RTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0EsU0FBUyxxQ0FBcUMsK0NBQStDLEVBQUU7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6QjtBQUNBLGdJQUFnSSxpQkFBaUIsRUFBRTtBQUNuSjtBQUNBLDJCQUEyQixFQUFFO0FBQzdCO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0I7QUFDQSx5REFBeUQseUJBQXlCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEVBQUU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixFQUFFO0FBQzdCO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsdUJBQXVCO0FBQ2hHLElBQUksMkJBQTJCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLEVBQUU7QUFDckI7QUFDQTtBQUNBO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDLGNBQWM7O0FBRTVELENBQUM7QUFDRDs7Ozs7OztBQzcwREE7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLDZCQUE2QixnQkFBZ0Isa0JBQWtCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0Q0FBNEM7QUFDdkU7QUFDQSwrQkFBK0Isd0JBQXdCLGtCQUFrQixFQUFFO0FBQzNFLCtCQUErQix5QkFBeUIsRUFBRTtBQUMxRDtBQUNBLG1DQUFtQyw4QkFBOEI7QUFDakUsbUNBQW1DLG1CQUFtQjtBQUN0RDtBQUNBLG1DQUFtQyxxREFBcUQ7QUFDeEYsbUNBQW1DLGlCQUFpQjtBQUNwRCxLQUFLLDBCQUEwQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLHdDQUF3QztBQUN4QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsd0NBQXdDO0FBQ3hDLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvR0FBb0c7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsd0NBQXdDO0FBQ3hDLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyx3Q0FBd0M7QUFDeEMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLHdDQUF3QztBQUN4QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsd0NBQXdDO0FBQ3hDLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLHdDQUF3QztBQUN4QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyx3Q0FBd0M7QUFDeEMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLHdDQUF3QztBQUN4QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHVCQUF1QjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCwwQkFBMEI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxHQUFHO0FBQ2xCLGVBQWUsR0FBRztBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Y0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ2xTQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7QUNWQTtBQUNhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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T0FBTztBQUN0QixnQkFBZ0IsSUFBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsTUFBTTtBQUNqQixXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7O0FBRUE7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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzQkFBc0IsdUJBQXVCO0FBQ3RFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCOztBQUVBOztBQUVBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVDQUF1Qyw0Q0FBNEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVDQUF1Qyw2Q0FBNkM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxnQ0FBZ0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsSUFBSTtBQUNmLFdBQVcsSUFBSTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsSUFBSTtBQUNmLFdBQVcsSUFBSTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxJQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsSUFBSTtBQUNmLFdBQVcsSUFBSTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsS0FBSyw0Q0FBNEM7QUFDakQ7QUFDQTtBQUNBLEtBQUssdUNBQXVDO0FBQzVDO0FBQ0E7QUFDQSxLQUFLLDJDQUEyQztBQUNoRDtBQUNBOztBQUVBLEtBQUssdUJBQXVCLElBQUksZ0JBQWdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUsscUVBQXFFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyx3RUFBd0U7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLHNGQUFzRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyx5RkFBeUY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssdUVBQXVFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyx3RkFBd0Y7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssc0RBQXNEO0FBQzNEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSywyREFBMkQsSUFBSSxxQ0FBcUM7QUFDekc7QUFDQTtBQUNBLEtBQUssMkRBQTJELElBQUkscUNBQXFDO0FBQ3pHO0FBQ0E7QUFDQSxLQUFLLHNDQUFzQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RCwyQkFBMkIsSUFBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsSUFBSTtBQUN6RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksZ0NBQWdDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxJQUFJO0FBQ2YsV0FBVyxJQUFJO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsSUFBSTtBQUNmLFdBQVcsSUFBSTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZixXQUFXLElBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZ0JBQWdCLElBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixJQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsWUFBWSwwQkFBMEI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDLFNBQVM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVELFNBQVM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0MsU0FBUztBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSyxh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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQyxtQkFBbUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQywyQ0FBMkM7QUFDNUU7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDLG1CQUFtQjtBQUNwRDtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOzs7O0FBSUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUzs7QUFF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QUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsOEJBQThCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFVBQVU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLDhDQUE4Qyw4QkFBOEI7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxpQ0FBaUM7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQSxDQUFDOzs7Ozs7O0FDMTJCRCw4Qzs7Ozs7O0FDQUEsOEM7Ozs7OztBQ0FBLDhDOzs7Ozs7QUNBQSw4Qzs7Ozs7O0FDQUEsNkM7Ozs7OztBQ0FBLDhDOzs7Ozs7QUNBQSw4Qzs7Ozs7O0FDQUEsaUM7Ozs7OztBQ0FBLGtDOzs7Ozs7QUNBQSwrQiIsImZpbGUiOiJtYWluLXNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiZGlzdC9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1Nik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMzQ2ZDhjZTQ1NmQ3NmE3YmMwMjEiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBET01FeGNlcHRpb24gPSByZXF1aXJlKCcuL0RPTUV4Y2VwdGlvbicpO1xudmFyIEVSUiA9IERPTUV4Y2VwdGlvbjtcbnZhciBpc0FwaVdyaXRhYmxlID0gcmVxdWlyZShcIi4vY29uZmlnXCIpLmlzQXBpV3JpdGFibGU7XG5cbmV4cG9ydHMuTkFNRVNQQUNFID0ge1xuICBIVE1MOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsXG4gIFhNTDogJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZScsXG4gIFhNTE5TOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nLFxuICBNQVRITUw6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJyxcbiAgU1ZHOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBYTElOSzogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG59O1xuXG4vL1xuLy8gU2hvcnRjdXQgZnVuY3Rpb25zIGZvciB0aHJvd2luZyBlcnJvcnMgb2YgdmFyaW91cyB0eXBlcy5cbi8vXG5leHBvcnRzLkluZGV4U2l6ZUVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLklOREVYX1NJWkVfRVJSKTsgfTtcbmV4cG9ydHMuSGllcmFyY2h5UmVxdWVzdEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLkhJRVJBUkNIWV9SRVFVRVNUX0VSUik7IH07XG5leHBvcnRzLldyb25nRG9jdW1lbnRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5XUk9OR19ET0NVTUVOVF9FUlIpOyB9O1xuZXhwb3J0cy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5WQUxJRF9DSEFSQUNURVJfRVJSKTsgfTtcbmV4cG9ydHMuTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSKTsgfTtcbmV4cG9ydHMuTm90Rm91bmRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OT1RfRk9VTkRfRVJSKTsgfTtcbmV4cG9ydHMuTm90U3VwcG9ydGVkRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuTk9UX1NVUFBPUlRFRF9FUlIpOyB9O1xuZXhwb3J0cy5JbnZhbGlkU3RhdGVFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX1NUQVRFX0VSUik7IH07XG5leHBvcnRzLlN5bnRheEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlNZTlRBWF9FUlIpOyB9O1xuZXhwb3J0cy5JbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSKTsgfTtcbmV4cG9ydHMuTmFtZXNwYWNlRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuTkFNRVNQQUNFX0VSUik7IH07XG5leHBvcnRzLkludmFsaWRBY2Nlc3NFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX0FDQ0VTU19FUlIpOyB9O1xuZXhwb3J0cy5UeXBlTWlzbWF0Y2hFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5UWVBFX01JU01BVENIX0VSUik7IH07XG5leHBvcnRzLlNlY3VyaXR5RXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuU0VDVVJJVFlfRVJSKTsgfTtcbmV4cG9ydHMuTmV0d29ya0Vycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLk5FVFdPUktfRVJSKTsgfTtcbmV4cG9ydHMuQWJvcnRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5BQk9SVF9FUlIpOyB9O1xuZXhwb3J0cy5VcmxNaXNtYXRjaEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlVSTF9NSVNNQVRDSF9FUlIpOyB9O1xuZXhwb3J0cy5RdW90YUV4Y2VlZGVkRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuUVVPVEFfRVhDRUVERURfRVJSKTsgfTtcbmV4cG9ydHMuVGltZW91dEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlRJTUVPVVRfRVJSKTsgfTtcbmV4cG9ydHMuSW52YWxpZE5vZGVUeXBlRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5WQUxJRF9OT0RFX1RZUEVfRVJSKTsgfTtcbmV4cG9ydHMuRGF0YUNsb25lRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuREFUQV9DTE9ORV9FUlIpOyB9O1xuXG5leHBvcnRzLm55aSA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RZZXRJbXBsZW1lbnRlZFwiKTtcbn07XG5cbmV4cG9ydHMuYXNzZXJ0ID0gZnVuY3Rpb24oZXhwciwgbXNnKSB7XG4gIGlmICghZXhwcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBmYWlsZWQ6IFwiICsgKG1zZyB8fCBcIlwiKSArIFwiXFxuXCIgKyBuZXcgRXJyb3IoKS5zdGFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuZXhwb3NlID0gZnVuY3Rpb24oc3JjLCBjKSB7XG4gIGZvciAodmFyIG4gaW4gc3JjKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGMucHJvdG90eXBlLCBuLCB7IHZhbHVlOiBzcmNbbl0sIHdyaXRhYmxlOiBpc0FwaVdyaXRhYmxlIH0pO1xuICB9XG59O1xuXG5leHBvcnRzLm1lcmdlID0gZnVuY3Rpb24oYSwgYikge1xuICBmb3IgKHZhciBuIGluIGIpIHtcbiAgICBhW25dID0gYltuXTtcbiAgfVxufTtcblxuLy8gQ29tcGFyZSB0d28gbm9kZXMgYmFzZWQgb24gdGhlaXIgZG9jdW1lbnQgb3JkZXIuIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWRcbi8vIHRvIGJlIHBhc3NlZCB0byBzb3J0KCkuIEFzc3VtZXMgdGhhdCB0aGUgYXJyYXkgYmVpbmcgc29ydGVkIGRvZXMgbm90XG4vLyBjb250YWluIGR1cGxpY2F0ZXMuICBBbmQgdGhhdCBhbGwgbm9kZXMgYXJlIGNvbm5lY3RlZCBhbmQgY29tcGFyYWJsZS5cbi8vIENsZXZlciBjb2RlIGJ5IHBwayB2aWEgamVyZXNpZy5cbmV4cG9ydHMuZG9jdW1lbnRPcmRlciA9IGZ1bmN0aW9uKG4sbSkge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgcmV0dXJuIDMgLSAobi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihtKSAmIDYpO1xufTtcblxuZXhwb3J0cy50b0FTQ0lJTG93ZXJDYXNlID0gZnVuY3Rpb24ocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9bQS1aXSsvZywgZnVuY3Rpb24odCkgeyByZXR1cm4gdC50b0xvd2VyQ2FzZSgpOyB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3ZlbmRvclwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIi4vdmVuZG9yXCJcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG5cbnZhciBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vRXZlbnRUYXJnZXQnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBOQU1FU1BBQ0UgPSB1dGlscy5OQU1FU1BBQ0U7XG5cbi8vIEFsbCBub2RlcyBoYXZlIGEgbm9kZVR5cGUgYW5kIGFuIG93bmVyRG9jdW1lbnQuXG4vLyBPbmNlIGluc2VydGVkLCB0aGV5IGFsc28gaGF2ZSBhIHBhcmVudE5vZGUuXG4vLyBUaGlzIGlzIGFuIGFic3RyYWN0IGNsYXNzOyBhbGwgbm9kZXMgaW4gYSBkb2N1bWVudCBhcmUgaW5zdGFuY2VzXG4vLyBvZiBhIHN1YnR5cGUsIHNvIGFsbCB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCBieSBtb3JlIHNwZWNpZmljXG4vLyBjb25zdHJ1Y3RvcnMuXG5mdW5jdGlvbiBOb2RlKCkge1xufVxuXG52YXIgRUxFTUVOVF9OT0RFICAgICAgICAgICAgICAgID0gTm9kZS5FTEVNRU5UX05PREUgPSAxO1xudmFyIEFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IE5vZGUuQVRUUklCVVRFX05PREUgPSAyO1xudmFyIFRFWFRfTk9ERSAgICAgICAgICAgICAgICAgICA9IE5vZGUuVEVYVF9OT0RFID0gMztcbnZhciBDREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSBOb2RlLkNEQVRBX1NFQ1RJT05fTk9ERSA9IDQ7XG52YXIgRU5USVRZX1JFRkVSRU5DRV9OT0RFICAgICAgID0gTm9kZS5FTlRJVFlfUkVGRVJFTkNFX05PREUgPSA1O1xudmFyIEVOVElUWV9OT0RFICAgICAgICAgICAgICAgICA9IE5vZGUuRU5USVRZX05PREUgPSA2O1xudmFyIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSA9IE5vZGUuUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFID0gNztcbnZhciBDT01NRU5UX05PREUgICAgICAgICAgICAgICAgPSBOb2RlLkNPTU1FTlRfTk9ERSA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gTm9kZS5ET0NVTUVOVF9OT0RFID0gOTtcbnZhciBET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSBOb2RlLkRPQ1VNRU5UX1RZUEVfTk9ERSA9IDEwO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgICAgICA9IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xudmFyIE5PVEFUSU9OX05PREUgICAgICAgICAgICAgICA9IE5vZGUuTk9UQVRJT05fTk9ERSA9IDEyO1xuXG52YXIgRE9DVU1FTlRfUE9TSVRJT05fRElTQ09OTkVDVEVEICAgICAgICAgICAgPSBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0RJU0NPTk5FQ1RFRCA9IDB4MDE7XG52YXIgRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HICAgICAgICAgICAgICAgPSBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyA9IDB4MDI7XG52YXIgRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HICAgICAgICAgICAgICAgPSBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyA9IDB4MDQ7XG52YXIgRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTlMgICAgICAgICAgICAgICAgPSBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TID0gMHgwODtcbnZhciBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkgICAgICAgICAgICA9IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZID0gMHgxMDtcbnZhciBET0NVTUVOVF9QT1NJVElPTl9JTVBMRU1FTlRBVElPTl9TUEVDSUZJQyA9IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fSU1QTEVNRU5UQVRJT05fU1BFQ0lGSUMgPSAweDIwO1xuXG52YXIgaGFzUmF3Q29udGVudCA9IHtcbiAgU1RZTEU6IHRydWUsXG4gIFNDUklQVDogdHJ1ZSxcbiAgWE1QOiB0cnVlLFxuICBJRlJBTUU6IHRydWUsXG4gIE5PRU1CRUQ6IHRydWUsXG4gIE5PRlJBTUVTOiB0cnVlLFxuICBQTEFJTlRFWFQ6IHRydWVcbn07XG5cbnZhciBlbXB0eUVsZW1lbnRzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBiYXNlZm9udDogdHJ1ZSxcbiAgYmdzb3VuZDogdHJ1ZSxcbiAgYnI6IHRydWUsXG4gIGNvbDogdHJ1ZSxcbiAgZW1iZWQ6IHRydWUsXG4gIGZyYW1lOiB0cnVlLFxuICBocjogdHJ1ZSxcbiAgaW1nOiB0cnVlLFxuICBpbnB1dDogdHJ1ZSxcbiAga2V5Z2VuOiB0cnVlLFxuICBsaW5rOiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBwYXJhbTogdHJ1ZSxcbiAgc291cmNlOiB0cnVlLFxuICB0cmFjazogdHJ1ZSxcbiAgd2JyOiB0cnVlXG59O1xuXG52YXIgZXh0cmFOZXdMaW5lID0ge1xuICAvKiBSZW1vdmVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvOTQ0XG4gIHByZTogdHJ1ZSxcbiAgdGV4dGFyZWE6IHRydWUsXG4gIGxpc3Rpbmc6IHRydWVcbiAgKi9cbn07XG5cbk5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudFRhcmdldC5wcm90b3R5cGUsIHtcblxuICAvLyBOb2RlIHRoYXQgYXJlIG5vdCBpbnNlcnRlZCBpbnRvIHRoZSB0cmVlIGluaGVyaXQgYSBudWxsIHBhcmVudFxuICBwYXJlbnROb2RlOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuXG4gIC8vIFhYWDogdGhlIGJhc2VVUkkgYXR0cmlidXRlIGlzIGRlZmluZWQgYnkgZG9tIGNvcmUsIGJ1dFxuICAvLyBhIGNvcnJlY3QgaW1wbGVtZW50YXRpb24gb2YgaXQgcmVxdWlyZXMgSFRNTCBmZWF0dXJlcywgc29cbiAgLy8gd2UnbGwgY29tZSBiYWNrIHRvIHRoaXMgbGF0ZXIuXG4gIGJhc2VVUkk6IHsgZ2V0OiB1dGlscy5ueWkgfSxcblxuICBwYXJlbnRFbGVtZW50OiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLm5vZGVUeXBlPT09RUxFTUVOVF9OT0RFKSA/IHRoaXMucGFyZW50Tm9kZSA6IG51bGw7XG4gIH19LFxuXG4gIGhhc0NoaWxkTm9kZXM6IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyAgLy8gT3ZlcnJpZGRlbiBpbiBsZWFmLmpzXG4gICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggPiAwO1xuICB9fSxcblxuICBmaXJzdENoaWxkOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgPyBudWxsIDogdGhpcy5jaGlsZE5vZGVzWzBdO1xuICB9fSxcblxuICBsYXN0Q2hpbGQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiB0aGlzLmNoaWxkTm9kZXNbdGhpcy5jaGlsZE5vZGVzLmxlbmd0aC0xXTtcbiAgfX0sXG5cbiAgcHJldmlvdXNTaWJsaW5nOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudE5vZGUpIHJldHVybiBudWxsO1xuICAgIHZhciBzaWJzID0gdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXMsIGkgPSB0aGlzLmluZGV4O1xuICAgIHJldHVybiBpID09PSAwID8gbnVsbCA6IHNpYnNbaS0xXTtcbiAgfX0sXG5cbiAgbmV4dFNpYmxpbmc6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50Tm9kZSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHNpYnMgPSB0aGlzLnBhcmVudE5vZGUuY2hpbGROb2RlcywgaSA9IHRoaXMuaW5kZXg7XG4gICAgcmV0dXJuIGkrMSA9PT0gc2licy5sZW5ndGggPyBudWxsIDogc2lic1tpKzFdO1xuICB9fSxcblxuXG4gIF9jb3VudENoaWxkcmVuT2ZUeXBlOiB7IHZhbHVlOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIHN1bSA9IDAsIG5vZGVzID0gdGhpcy5jaGlsZE5vZGVzLCBsZW5ndGggPSBub2Rlcy5sZW5ndGgsIGk7XG4gICAgZm9yIChpPTA7IGk8bGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub2Rlc1tpXS5ub2RlVHlwZSA9PT0gdHlwZSkgc3VtKys7XG4gICAgfVxuICAgIHJldHVybiBzdW07XG4gIH19LFxuXG4gIF9lbnN1cmVJbnNlcnRWYWxpZDogeyB2YWx1ZTogZnVuY3Rpb24gX2Vuc3VyZUluc2VydFZhbGlkKG5vZGUsIGNoaWxkLCBpc1ByZWluc2VydCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLCBpO1xuICAgIGlmICghbm9kZS5ub2RlVHlwZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgbm9kZScpO1xuICAgIC8vIDEuIElmIHBhcmVudCBpcyBub3QgYSBEb2N1bWVudCwgRG9jdW1lbnRGcmFnbWVudCwgb3IgRWxlbWVudFxuICAgIC8vIG5vZGUsIHRocm93IGEgSGllcmFyY2h5UmVxdWVzdEVycm9yLlxuICAgIHN3aXRjaCAocGFyZW50Lm5vZGVUeXBlKSB7XG4gICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICBjYXNlIEVMRU1FTlRfTk9ERTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgIH1cbiAgICAvLyAyLiBJZiBub2RlIGlzIGEgaG9zdC1pbmNsdWRpbmcgaW5jbHVzaXZlIGFuY2VzdG9yIG9mIHBhcmVudCxcbiAgICAvLyB0aHJvdyBhIEhpZXJhcmNoeVJlcXVlc3RFcnJvci5cbiAgICBpZiAobm9kZS5pc0FuY2VzdG9yKHBhcmVudCkpIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgIC8vIDMuIElmIGNoaWxkIGlzIG5vdCBudWxsIGFuZCBpdHMgcGFyZW50IGlzIG5vdCBwYXJlbnQsIHRoZW5cbiAgICAvLyB0aHJvdyBhIE5vdEZvdW5kRXJyb3IuIChyZXBsYWNlQ2hpbGQgb21pdHMgdGhlICdjaGlsZCBpcyBub3QgbnVsbCdcbiAgICAvLyBhbmQgdGhyb3dzIGEgVHlwZUVycm9yIGhlcmUgaWYgY2hpbGQgaXMgbnVsbC4pXG4gICAgaWYgKGNoaWxkICE9PSBudWxsIHx8ICFpc1ByZWluc2VydCkge1xuICAgICAgaWYgKGNoaWxkLnBhcmVudE5vZGUgIT09IHBhcmVudCkgdXRpbHMuTm90Rm91bmRFcnJvcigpO1xuICAgIH1cbiAgICAvLyA0LiBJZiBub2RlIGlzIG5vdCBhIERvY3VtZW50RnJhZ21lbnQsIERvY3VtZW50VHlwZSwgRWxlbWVudCxcbiAgICAvLyBUZXh0LCBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIG9yIENvbW1lbnQgbm9kZSwgdGhyb3cgYVxuICAgIC8vIEhpZXJhcmNoeVJlcXVlc3RFcnJvci5cbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICBjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG4gICAgY2FzZSBET0NVTUVOVF9UWVBFX05PREU6XG4gICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgY2FzZSBURVhUX05PREU6XG4gICAgY2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG4gICAgY2FzZSBDT01NRU5UX05PREU6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OiB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICB9XG4gICAgLy8gNS4gSWYgZWl0aGVyIG5vZGUgaXMgYSBUZXh0IG5vZGUgYW5kIHBhcmVudCBpcyBhIGRvY3VtZW50LCBvclxuICAgIC8vIG5vZGUgaXMgYSBkb2N0eXBlIGFuZCBwYXJlbnQgaXMgbm90IGEgZG9jdW1lbnQsIHRocm93IGFcbiAgICAvLyBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IuXG4gICAgLy8gNi4gSWYgcGFyZW50IGlzIGEgZG9jdW1lbnQsIGFuZCBhbnkgb2YgdGhlIHN0YXRlbWVudHMgYmVsb3csIHN3aXRjaGVkXG4gICAgLy8gb24gbm9kZSwgYXJlIHRydWUsIHRocm93IGEgSGllcmFyY2h5UmVxdWVzdEVycm9yLlxuICAgIGlmIChwYXJlbnQubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUpIHtcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgY2FzZSBURVhUX05PREU6XG4gICAgICAgIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgICAgLy8gNmExLiBJZiBub2RlIGhhcyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgY2hpbGQgb3IgaGFzIGEgVGV4dFxuICAgICAgICAvLyBub2RlIGNoaWxkLlxuICAgICAgICBpZiAobm9kZS5fY291bnRDaGlsZHJlbk9mVHlwZShURVhUX05PREUpID4gMClcbiAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgc3dpdGNoIChub2RlLl9jb3VudENoaWxkcmVuT2ZUeXBlKEVMRU1FTlRfTk9ERSkpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgLy8gNmEyLiBPdGhlcndpc2UsIGlmIG5vZGUgaGFzIG9uZSBlbGVtZW50IGNoaWxkIGFuZCBlaXRoZXJcbiAgICAgICAgICAvLyBwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGQsIGNoaWxkIGlzIGEgZG9jdHlwZSwgb3IgY2hpbGRcbiAgICAgICAgICAvLyBpcyBub3QgbnVsbCBhbmQgYSBkb2N0eXBlIGlzIGZvbGxvd2luZyBjaGlsZC4gW3ByZWluc2VydF1cbiAgICAgICAgICAvLyA2YTIuIE90aGVyd2lzZSwgaWYgbm9kZSBoYXMgb25lIGVsZW1lbnQgY2hpbGQgYW5kIGVpdGhlclxuICAgICAgICAgIC8vIHBhcmVudCBoYXMgYW4gZWxlbWVudCBjaGlsZCB0aGF0IGlzIG5vdCBjaGlsZCBvciBhXG4gICAgICAgICAgLy8gZG9jdHlwZSBpcyBmb2xsb3dpbmcgY2hpbGQuIFtyZXBsYWNlV2l0aF1cbiAgICAgICAgICBpZiAoY2hpbGQgIT09IG51bGwgLyogYWx3YXlzIHRydWUgaGVyZSBmb3IgcmVwbGFjZVdpdGggKi8pIHtcbiAgICAgICAgICAgIGlmIChpc1ByZWluc2VydCAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfVFlQRV9OT0RFKVxuICAgICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgICAgIGZvciAoaT1wYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGROb2Rlc1tpXSA9PT0gY2hpbGQpIGJyZWFrO1xuICAgICAgICAgICAgICBpZiAocGFyZW50LmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IERPQ1VNRU5UX1RZUEVfTk9ERSlcbiAgICAgICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaSA9IHBhcmVudC5fY291bnRDaGlsZHJlbk9mVHlwZShFTEVNRU5UX05PREUpO1xuICAgICAgICAgIGlmIChpc1ByZWluc2VydCkge1xuICAgICAgICAgICAgLy8gXCJwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGRcIlxuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gXCJwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGQgdGhhdCBpcyBub3QgY2hpbGRcIlxuICAgICAgICAgICAgaWYgKGkgPiAxIHx8IChpID09PSAxICYmIGNoaWxkLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUpKVxuICAgICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIDZhMSwgY29udGludWVkLiAobW9yZSB0aGFuIG9uZSBFbGVtZW50IGNoaWxkKVxuICAgICAgICAgIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgICAgIC8vIDZiLiBwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGQsIGNoaWxkIGlzIGEgZG9jdHlwZSwgb3JcbiAgICAgICAgLy8gY2hpbGQgaXMgbm90IG51bGwgYW5kIGEgZG9jdHlwZSBpcyBmb2xsb3dpbmcgY2hpbGQuIFtwcmVpbnNlcnRdXG4gICAgICAgIC8vIDZiLiBwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGQgdGhhdCBpcyBub3QgY2hpbGQgb3IgYVxuICAgICAgICAvLyBkb2N0eXBlIGlzIGZvbGxvd2luZyBjaGlsZC4gW3JlcGxhY2VXaXRoXVxuICAgICAgICBpZiAoY2hpbGQgIT09IG51bGwgLyogYWx3YXlzIHRydWUgaGVyZSBmb3IgcmVwbGFjZVdpdGggKi8pIHtcbiAgICAgICAgICBpZiAoaXNQcmVpbnNlcnQgJiYgY2hpbGQubm9kZVR5cGUgPT09IERPQ1VNRU5UX1RZUEVfTk9ERSlcbiAgICAgICAgICAgIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgICAgICAgIGZvciAoaT1wYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50LmNoaWxkTm9kZXNbaV0gPT09IGNoaWxkKSBicmVhaztcbiAgICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfVFlQRV9OT0RFKVxuICAgICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSA9IHBhcmVudC5fY291bnRDaGlsZHJlbk9mVHlwZShFTEVNRU5UX05PREUpO1xuICAgICAgICBpZiAoaXNQcmVpbnNlcnQpIHtcbiAgICAgICAgICAvLyBcInBhcmVudCBoYXMgYW4gZWxlbWVudCBjaGlsZFwiXG4gICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgdXRpbHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gXCJwYXJlbnQgaGFzIGFuIGVsZW1lbnQgY2hpbGQgdGhhdCBpcyBub3QgY2hpbGRcIlxuICAgICAgICAgIGlmIChpID4gMSB8fCAoaSA9PT0gMSAmJiBjaGlsZC5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFKSlcbiAgICAgICAgICAgIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBET0NVTUVOVF9UWVBFX05PREU6XG4gICAgICAgIC8vIDZjLiBwYXJlbnQgaGFzIGEgZG9jdHlwZSBjaGlsZCwgY2hpbGQgaXMgbm9uLW51bGwgYW5kIGFuXG4gICAgICAgIC8vIGVsZW1lbnQgaXMgcHJlY2VkaW5nIGNoaWxkLCBvciBjaGlsZCBpcyBudWxsIGFuZCBwYXJlbnQgaGFzXG4gICAgICAgIC8vIGFuIGVsZW1lbnQgY2hpbGQuIFtwcmVpbnNlcnRdXG4gICAgICAgIC8vIDZjLiBwYXJlbnQgaGFzIGEgZG9jdHlwZSBjaGlsZCB0aGF0IGlzIG5vdCBjaGlsZCwgb3IgYW5cbiAgICAgICAgLy8gZWxlbWVudCBpcyBwcmVjZWRpbmcgY2hpbGQuIFtyZXBsYWNlV2l0aF1cbiAgICAgICAgaWYgKGNoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHBhcmVudC5fY291bnRDaGlsZHJlbk9mVHlwZShFTEVNRU5UX05PREUpKVxuICAgICAgICAgICAgdXRpbHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2hpbGQgaXMgYWx3YXlzIG5vbi1udWxsIGZvciBbcmVwbGFjZVdpdGhdIGNhc2VcbiAgICAgICAgICBmb3IgKGk9MDsgaTxwYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBhcmVudC5jaGlsZE5vZGVzW2ldID09PSBjaGlsZCkgYnJlYWs7XG4gICAgICAgICAgICBpZiAocGFyZW50LmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSlcbiAgICAgICAgICAgICAgdXRpbHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkgPSBwYXJlbnQuX2NvdW50Q2hpbGRyZW5PZlR5cGUoRE9DVU1FTlRfVFlQRV9OT0RFKTtcbiAgICAgICAgaWYgKGlzUHJlaW5zZXJ0KSB7XG4gICAgICAgICAgLy8gXCJwYXJlbnQgaGFzIGFuIGRvY3R5cGUgY2hpbGRcIlxuICAgICAgICAgIGlmIChpID4gMClcbiAgICAgICAgICAgIHV0aWxzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFwicGFyZW50IGhhcyBhbiBkb2N0eXBlIGNoaWxkIHRoYXQgaXMgbm90IGNoaWxkXCJcbiAgICAgICAgICBpZiAoaSA+IDEgfHwgKGkgPT09IDEgJiYgY2hpbGQubm9kZVR5cGUgIT09IERPQ1VNRU5UX1RZUEVfTk9ERSkpXG4gICAgICAgICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gNSwgY29udGludWVkOiAocGFyZW50IGlzIG5vdCBhIGRvY3VtZW50KVxuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX1RZUEVfTk9ERSkgdXRpbHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gICAgfVxuICB9fSxcblxuICBpbnNlcnRCZWZvcmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZShub2RlLCBjaGlsZCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgIC8vIDEuIEVuc3VyZSBwcmUtaW5zZXJ0aW9uIHZhbGlkaXR5XG4gICAgcGFyZW50Ll9lbnN1cmVJbnNlcnRWYWxpZChub2RlLCBjaGlsZCwgdHJ1ZSk7XG4gICAgLy8gMi4gTGV0IHJlZmVyZW5jZSBjaGlsZCBiZSBjaGlsZC5cbiAgICB2YXIgcmVmQ2hpbGQgPSBjaGlsZDtcbiAgICAvLyAzLiBJZiByZWZlcmVuY2UgY2hpbGQgaXMgbm9kZSwgc2V0IGl0IHRvIG5vZGUncyBuZXh0IHNpYmxpbmdcbiAgICBpZiAocmVmQ2hpbGQgPT09IG5vZGUpIHsgcmVmQ2hpbGQgPSBub2RlLm5leHRTaWJsaW5nOyB9XG4gICAgLy8gNC4gQWRvcHQgbm9kZSBpbnRvIHBhcmVudCdzIG5vZGUgZG9jdW1lbnQuXG4gICAgcGFyZW50LmRvYy5hZG9wdE5vZGUobm9kZSk7XG4gICAgLy8gNS4gSW5zZXJ0IG5vZGUgaW50byBwYXJlbnQgYmVmb3JlIHJlZmVyZW5jZSBjaGlsZC5cbiAgICBpZiAocmVmQ2hpbGQgPT09IG51bGwpIHtcbiAgICAgIHBhcmVudC5fYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuaW5zZXJ0KHBhcmVudCwgcmVmQ2hpbGQuaW5kZXgpO1xuICAgIH1cbiAgICAvLyA2LiBSZXR1cm4gbm9kZVxuICAgIHJldHVybiBub2RlO1xuICB9fSxcblxuXG4gIGFwcGVuZENoaWxkOiB7IHZhbHVlOiBmdW5jdGlvbihjaGlsZCkge1xuICAgIC8vIFRoaXMgaW52b2tlcyBfYXBwZW5kQ2hpbGQgYWZ0ZXIgZG9pbmcgdmFsaWRpdHkgY2hlY2tzLlxuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjaGlsZCwgbnVsbCk7XG4gIH19LFxuXG4gIF9hcHBlbmRDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICBjaGlsZC5pbnNlcnQodGhpcywgdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9fSxcblxuICByZW1vdmVDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcztcbiAgICBpZiAoIWNoaWxkLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XG4gICAgaWYgKGNoaWxkLnBhcmVudE5vZGUgIT09IHBhcmVudCkgdXRpbHMuTm90Rm91bmRFcnJvcigpO1xuICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfX0sXG5cbiAgLy8gVG8gcmVwbGFjZSBhIGBjaGlsZGAgd2l0aCBgbm9kZWAgd2l0aGluIGEgYHBhcmVudGAgKHRoaXMpXG4gIHJlcGxhY2VDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZUNoaWxkKG5vZGUsIGNoaWxkKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXM7XG4gICAgLy8gRW5zdXJlIHZhbGlkaXR5IChzbGlnaHQgZGlmZmVyZW5jZXMgZnJvbSBwcmUtaW5zZXJ0aW9uIGNoZWNrKVxuICAgIHBhcmVudC5fZW5zdXJlSW5zZXJ0VmFsaWQobm9kZSwgY2hpbGQsIGZhbHNlKTtcbiAgICAvLyBBZG9wdCBub2RlIGludG8gcGFyZW50J3Mgbm9kZSBkb2N1bWVudC5cbiAgICBpZiAobm9kZS5kb2MgIT09IHBhcmVudC5kb2MpIHtcbiAgICAgIC8vIFhYWCBhZG9wdE5vZGUgaGFzIHNpZGUtZWZmZWN0IG9mIHJlbW92aW5nIG5vZGUgZnJvbSBpdHMgcGFyZW50XG4gICAgICAvLyBhbmQgZ2VuZXJhdGluZyBhIG11dGF0aW9uIGV2ZW50LCB0aHVzIGNhdXNpbmcgdGhlIF9pbnNlcnRPclJlcGxhY2VcbiAgICAgIC8vIHRvIGdlbmVyYXRlIHR3byBkZWxldGVzIGFuZCBhbiBpbnNlcnQgaW5zdGVhZCBvZiBhICdtb3ZlJ1xuICAgICAgLy8gZXZlbnQuICBJdCBsb29rcyBsaWtlIHRoZSBuZXcgTXV0YXRpb25PYnNlcnZlciBzdHVmZiBhdm9pZHNcbiAgICAgIC8vIHRoaXMgcHJvYmxlbSwgYnV0IGZvciBub3cgbGV0J3Mgb25seSBhZG9wdCAoaWUsIHJlbW92ZSBgbm9kZWBcbiAgICAgIC8vIGZyb20gaXRzIHBhcmVudCkgaGVyZSBpZiB3ZSBuZWVkIHRvLlxuICAgICAgcGFyZW50LmRvYy5hZG9wdE5vZGUobm9kZSk7XG4gICAgfVxuICAgIC8vIERvIHRoZSByZXBsYWNlLlxuICAgIG5vZGUuX2luc2VydE9yUmVwbGFjZShwYXJlbnQsIGNoaWxkLmluZGV4LCB0cnVlKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH19LFxuXG4gIC8vIFNlZTogaHR0cDovL2Vqb2huLm9yZy9ibG9nL2NvbXBhcmluZy1kb2N1bWVudC1wb3NpdGlvbi9cbiAgY29udGFpbnM6IHsgdmFsdWU6IGZ1bmN0aW9uIGNvbnRhaW5zKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodGhpcyA9PT0gbm9kZSkgeyByZXR1cm4gdHJ1ZTsgLyogaW5jbHVzaXZlIGRlc2NlbmRhbnQgKi8gfVxuICAgIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICAgIHJldHVybiAodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmXG4gICAgICAgICAgICBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpICE9PSAwO1xuICB9fSxcblxuICBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbjogeyB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhhdCl7XG4gICAgLy8gQmFzaWMgYWxnb3JpdGhtIGZvciBmaW5kaW5nIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0d28gbm9kZXMuXG4gICAgLy8gTWFrZSBhIGxpc3QgdGhlIGFuY2VzdG9ycyBvZiBlYWNoIG5vZGUsIHN0YXJ0aW5nIHdpdGggdGhlXG4gICAgLy8gZG9jdW1lbnQgZWxlbWVudCBhbmQgcHJvY2VlZGluZyBkb3duIHRvIHRoZSBub2RlcyB0aGVtc2VsdmVzLlxuICAgIC8vIFRoZW4sIGxvb3AgdGhyb3VnaCB0aGUgbGlzdHMsIGxvb2tpbmcgZm9yIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgLy8gdGhhdCBkaWZmZXJzLiAgVGhlIG9yZGVyIG9mIHRob3NlIHR3byBlbGVtZW50cyBnaXZlIHRoZVxuICAgIC8vIG9yZGVyIG9mIHRoZWlyIGRlc2NlbmRhbnQgbm9kZXMuICBPciwgaWYgb25lIGxpc3QgaXMgYSBwcmVmaXhcbiAgICAvLyBvZiB0aGUgb3RoZXIgb25lLCB0aGVuIHRoYXQgbm9kZSBjb250YWlucyB0aGUgb3RoZXIuXG5cbiAgICBpZiAodGhpcyA9PT0gdGhhdCkgcmV0dXJuIDA7XG5cbiAgICAvLyBJZiB0aGV5J3JlIG5vdCBvd25lZCBieSB0aGUgc2FtZSBkb2N1bWVudCBvciBpZiBvbmUgaXMgcm9vdGVkXG4gICAgLy8gYW5kIG9uZSBpcyBub3QsIHRoZW4gdGhleSdyZSBkaXNjb25uZWN0ZWQuXG4gICAgaWYgKHRoaXMuZG9jICE9PSB0aGF0LmRvYyB8fFxuICAgICAgdGhpcy5yb290ZWQgIT09IHRoYXQucm9vdGVkKVxuICAgICAgcmV0dXJuIChET0NVTUVOVF9QT1NJVElPTl9ESVNDT05ORUNURUQgK1xuICAgICAgICAgIERPQ1VNRU5UX1BPU0lUSU9OX0lNUExFTUVOVEFUSU9OX1NQRUNJRklDKTtcblxuICAgIC8vIEdldCBhcnJheXMgb2YgYW5jZXN0b3JzIGZvciB0aGlzIGFuZCB0aGF0XG4gICAgdmFyIHRoZXNlID0gW10sIHRob3NlID0gW107XG4gICAgZm9yKHZhciBuID0gdGhpczsgbiAhPT0gbnVsbDsgbiA9IG4ucGFyZW50Tm9kZSkgdGhlc2UucHVzaChuKTtcbiAgICBmb3IobiA9IHRoYXQ7IG4gIT09IG51bGw7IG4gPSBuLnBhcmVudE5vZGUpIHRob3NlLnB1c2gobik7XG4gICAgdGhlc2UucmV2ZXJzZSgpOyAgLy8gU28gd2Ugc3RhcnQgd2l0aCB0aGUgb3V0ZXJtb3N0XG4gICAgdGhvc2UucmV2ZXJzZSgpO1xuXG4gICAgaWYgKHRoZXNlWzBdICE9PSB0aG9zZVswXSkgLy8gTm8gY29tbW9uIGFuY2VzdG9yXG4gICAgICByZXR1cm4gKERPQ1VNRU5UX1BPU0lUSU9OX0RJU0NPTk5FQ1RFRCArXG4gICAgICAgICAgRE9DVU1FTlRfUE9TSVRJT05fSU1QTEVNRU5UQVRJT05fU1BFQ0lGSUMpO1xuXG4gICAgbiA9IE1hdGgubWluKHRoZXNlLmxlbmd0aCwgdGhvc2UubGVuZ3RoKTtcbiAgICBmb3IodmFyIGkgPSAxOyBpIDwgbjsgaSsrKSB7XG4gICAgICBpZiAodGhlc2VbaV0gIT09IHRob3NlW2ldKSB7XG4gICAgICAgIC8vIFdlIGZvdW5kIHR3byBkaWZmZXJlbnQgYW5jZXN0b3JzLCBzbyBjb21wYXJlXG4gICAgICAgIC8vIHRoZWlyIHBvc2l0aW9uc1xuICAgICAgICBpZiAodGhlc2VbaV0uaW5kZXggPCB0aG9zZVtpXS5pbmRleClcbiAgICAgICAgICByZXR1cm4gRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIERPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgdG8gaGVyZSwgdGhlbiBvbmUgb2YgdGhlIG5vZGVzICh0aGUgb25lIHdpdGggdGhlXG4gICAgLy8gc2hvcnRlciBsaXN0IG9mIGFuY2VzdG9ycykgY29udGFpbnMgdGhlIG90aGVyIG9uZS5cbiAgICBpZiAodGhlc2UubGVuZ3RoIDwgdGhvc2UubGVuZ3RoKVxuICAgICAgcmV0dXJuIChET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcgK1xuICAgICAgICAgIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcgK1xuICAgICAgICAgIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TKTtcbiAgfX0sXG5cbiAgaXNTYW1lTm9kZToge3ZhbHVlIDogZnVuY3Rpb24gaXNTYW1lTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMgPT09IG5vZGU7XG4gIH19LFxuXG5cbiAgLy8gVGhpcyBtZXRob2QgaW1wbGVtZW50cyB0aGUgZ2VuZXJpYyBwYXJ0cyBvZiBub2RlIGVxdWFsaXR5IHRlc3RpbmdcbiAgLy8gYW5kIGRlZmVycyB0byB0aGUgKG5vbi1yZWN1cnNpdmUpIHR5cGUtc3BlY2lmaWMgaXNFcXVhbCgpIG1ldGhvZFxuICAvLyBkZWZpbmVkIGJ5IHN1YmNsYXNzZXNcbiAgaXNFcXVhbE5vZGU6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWxOb2RlKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gdGhpcy5ub2RlVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgZm9yIHNhbWUgbnVtYmVyIG9mIGNoaWxkcmVuXG4gICAgLy8gQ2hlY2sgZm9yIGNoaWxkcmVuIHRoaXMgd2F5IGJlY2F1c2UgaXQgaXMgbW9yZSBlZmZpY2llbnRcbiAgICAvLyBmb3IgY2hpbGRsZXNzIGxlYWYgbm9kZXMuXG4gICAgdmFyIG47IC8vIG51bWJlciBvZiBjaGlsZCBub2Rlc1xuICAgIGlmICghdGhpcy5maXJzdENoaWxkKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGlmIChub2RlLmZpcnN0Q2hpbGQpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBuID0gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoICE9PSBuKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdHlwZS1zcGVjaWZpYyBwcm9wZXJ0aWVzIGZvciBlcXVhbGl0eVxuICAgIGlmICghdGhpcy5pc0VxdWFsKG5vZGUpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBOb3cgY2hlY2sgY2hpbGRyZW4gZm9yIGVxdWFsaXR5XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgdmFyIGMxID0gdGhpcy5jaGlsZE5vZGVzW2ldLCBjMiA9IG5vZGUuY2hpbGROb2Rlc1tpXTtcbiAgICAgIGlmICghYzEuaXNFcXVhbE5vZGUoYzIpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH19LFxuXG4gIC8vIFRoaXMgbWV0aG9kIGRlbGVnYXRlcyBzaGFsbG93IGNsb25pbmcgdG8gYSBjbG9uZSgpIG1ldGhvZFxuICAvLyB0aGF0IGVhY2ggY29uY3JldGUgc3ViY2xhc3MgbXVzdCBpbXBsZW1lbnRcbiAgY2xvbmVOb2RlOiB7IHZhbHVlOiBmdW5jdGlvbihkZWVwKSB7XG4gICAgLy8gQ2xvbmUgdGhpcyBub2RlXG4gICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuXG4gICAgLy8gSGFuZGxlIHRoZSByZWN1cnNpdmUgY2FzZSBpZiBuZWNlc3NhcnlcbiAgICBpZiAoZGVlcCAmJiB0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGZvcih2YXIgaSA9IDAsIG4gPSB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGNsb25lLl9hcHBlbmRDaGlsZCh0aGlzLmNoaWxkTm9kZXNbaV0uY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmU7XG4gIH19LFxuXG4gIGxvb2t1cFByZWZpeDogeyB2YWx1ZTogZnVuY3Rpb24gbG9va3VwUHJlZml4KG5zKSB7XG4gICAgdmFyIGU7XG4gICAgaWYgKG5zID09PSAnJykgcmV0dXJuIG51bGw7XG4gICAgc3dpdGNoKHRoaXMubm9kZVR5cGUpIHtcbiAgICBjYXNlIEVMRU1FTlRfTk9ERTpcbiAgICAgIHJldHVybiB0aGlzLmxvY2F0ZU5hbWVzcGFjZVByZWZpeChucyk7XG4gICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgICAgZSA9IHRoaXMuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIGUgPyBlLmxvY2F0ZU5hbWVzcGFjZVByZWZpeChucykgOiBudWxsO1xuICAgIGNhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICBlID0gdGhpcy5wYXJlbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIGUgPyBlLmxvY2F0ZU5hbWVzcGFjZVByZWZpeChucykgOiBudWxsO1xuICAgIH1cbiAgfX0sXG5cblxuICBsb29rdXBOYW1lc3BhY2VVUkk6IHt2YWx1ZTogZnVuY3Rpb24gbG9va3VwTmFtZXNwYWNlVVJJKHByZWZpeCkge1xuICAgIHZhciBlO1xuICAgIHN3aXRjaCh0aGlzLm5vZGVUeXBlKSB7XG4gICAgY2FzZSBFTEVNRU5UX05PREU6XG4gICAgICByZXR1cm4gdGhpcy5sb2NhdGVOYW1lc3BhY2UocHJlZml4KTtcbiAgICBjYXNlIERPQ1VNRU5UX05PREU6XG4gICAgICBlID0gdGhpcy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICByZXR1cm4gZSA/IGUubG9jYXRlTmFtZXNwYWNlKHByZWZpeCkgOiBudWxsO1xuICAgIGNhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICBlID0gdGhpcy5wYXJlbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIGUgPyBlLmxvY2F0ZU5hbWVzcGFjZShwcmVmaXgpIDogbnVsbDtcbiAgICB9XG4gIH19LFxuXG4gIGlzRGVmYXVsdE5hbWVzcGFjZTogeyB2YWx1ZTogZnVuY3Rpb24gaXNEZWZhdWx0TmFtZXNwYWNlKG5zKSB7XG4gICAgdmFyIGRlZmF1bHRucyA9IHRoaXMubG9va3VwTmFtZXNwYWNlVVJJKG51bGwpO1xuICAgIGlmIChkZWZhdWx0bnMgPT09IG51bGwpIGRlZmF1bHRucyA9ICcnO1xuICAgIHJldHVybiBucyA9PT0gZGVmYXVsdG5zO1xuICB9fSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHMgZm9yIG5vZGVzLiAgTm90IHBhcnQgb2YgdGhlIERPTVxuXG4gIC8vIFJldHVybiB0aGUgaW5kZXggb2YgdGhpcyBub2RlIGluIGl0cyBwYXJlbnQuXG4gIC8vIFRocm93IGlmIG5vIHBhcmVudCwgb3IgaWYgdGhpcyBub2RlIGlzIG5vdCBhIGNoaWxkIG9mIGl0cyBwYXJlbnRcbiAgaW5kZXg6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB1dGlscy5hc3NlcnQodGhpcy5wYXJlbnROb2RlKTtcbiAgICB2YXIga2lkcyA9IHRoaXMucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuICAgIGlmICh0aGlzLl9pbmRleCA9PT0gdW5kZWZpbmVkIHx8IGtpZHNbdGhpcy5faW5kZXhdICE9PSB0aGlzKSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCB3ZSBkb24ndCBoYXZlIGFuIE8oTl4yKSBibG93dXAgaWYgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGtpZHMgaGF2ZSBkZWZpbmVkIGluZGljZXMgeWV0IGFuZCB3ZSdyZSB0cmF2ZXJzaW5nIHZpYVxuICAgICAgLy8gbmV4dFNpYmxpbmcgb3IgcHJldlNpYmxpbmdcbiAgICAgIGZvciAodmFyIGk9MDsgaTxraWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtpZHNbaV0uX2luZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIHV0aWxzLmFzc2VydChraWRzW3RoaXMuX2luZGV4XSA9PT0gdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbmRleDtcbiAgfX0sXG5cbiAgLy8gUmV0dXJuIHRydWUgaWYgdGhpcyBub2RlIGlzIGVxdWFsIHRvIG9yIGlzIGFuIGFuY2VzdG9yIG9mIHRoYXQgbm9kZVxuICAvLyBOb3RlIHRoYXQgbm9kZXMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgYW5jZXN0b3JzIG9mIHRoZW1zZWx2ZXNcbiAgaXNBbmNlc3RvcjogeyB2YWx1ZTogZnVuY3Rpb24odGhhdCkge1xuICAgIC8vIElmIHRoZXkgYmVsb25nIHRvIGRpZmZlcmVudCBkb2N1bWVudHMsIHRoZW4gdGhleSdyZSB1bnJlbGF0ZWQuXG4gICAgaWYgKHRoaXMuZG9jICE9PSB0aGF0LmRvYykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIElmIG9uZSBpcyByb290ZWQgYW5kIG9uZSBpc24ndCB0aGVuIHRoZXkncmUgbm90IHJlbGF0ZWRcbiAgICBpZiAodGhpcy5yb290ZWQgIT09IHRoYXQucm9vdGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBPdGhlcndpc2UgY2hlY2sgYnkgdHJhdmVyc2luZyB0aGUgcGFyZW50Tm9kZSBjaGFpblxuICAgIGZvcih2YXIgZSA9IHRoYXQ7IGU7IGUgPSBlLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChlID09PSB0aGlzKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9fSxcblxuICAvLyBET01JTk8gQ2hhbmdlZCB0aGUgYmVoYXZpb3IgdG8gY29uZm9ybSB3aXRoIHRoZSBzcGVjcy4gU2VlOlxuICAvLyBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2QvdG9waWMvbW96aWxsYS5kZXYucGxhdGZvcm0vNzdzSVljcGREbWMvZGlzY3Vzc2lvblxuICBlbnN1cmVTYW1lRG9jOiB7IHZhbHVlOiBmdW5jdGlvbih0aGF0KSB7XG4gICAgaWYgKHRoYXQub3duZXJEb2N1bWVudCA9PT0gbnVsbCkge1xuICAgICAgdGhhdC5vd25lckRvY3VtZW50ID0gdGhpcy5kb2M7XG4gICAgfVxuICAgIGVsc2UgaWYodGhhdC5vd25lckRvY3VtZW50ICE9PSB0aGlzLmRvYykge1xuICAgICAgdXRpbHMuV3JvbmdEb2N1bWVudEVycm9yKCk7XG4gICAgfVxuICB9fSxcblxuICAvLyBSZW1vdmUgYWxsIG9mIHRoaXMgbm9kZSdzIGNoaWxkcmVuLiAgVGhpcyBpcyBhIG1pbm9yXG4gIC8vIG9wdGltaXphdGlvbiB0aGF0IG9ubHkgY2FsbHMgbW9kaWZ5KCkgb25jZS5cbiAgcmVtb3ZlQ2hpbGRyZW46IHsgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKCkge1xuICAgIHZhciBuID0gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICBpZiAobikge1xuICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RlZCA/IHRoaXMub3duZXJEb2N1bWVudCA6IG51bGw7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChyb290KSByb290Lm11dGF0ZVJlbW92ZSh0aGlzLmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB0aGlzLmNoaWxkTm9kZXNbaV0ucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoID0gMDsgLy8gRm9yZ2V0IGFsbCBjaGlsZHJlblxuICAgICAgdGhpcy5tb2RpZnkoKTsgICAgICAgICAgICAgIC8vIFVwZGF0ZSBsYXN0IG1vZGlmaWVkIHR5cGUgb25jZSBvbmx5XG4gICAgfVxuICB9fSxcblxuICAvLyBJbnNlcnQgdGhpcyBub2RlIGFzIGEgY2hpbGQgb2YgcGFyZW50IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXgsXG4gIC8vIGZpcmluZyBtdXRhdGlvbiBldmVudHMgYXMgbmVjZXNzYXJ5XG4gIGluc2VydDogeyB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0KHBhcmVudCwgaW5kZXgpIHtcbiAgICB0aGlzLl9pbnNlcnRPclJlcGxhY2UocGFyZW50LCBpbmRleCwgZmFsc2UpO1xuICB9fSxcblxuICAvLyBJbnNlcnQgdGhpcyBub2RlIGFzIGEgY2hpbGQgb2YgcGFyZW50IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXgsXG4gIC8vIG9yIHJlcGxhY2UgdGhlIHNwZWNpZmllZCBjaGlsZCB3aXRoIHRoaXMgbm9kZSwgZmlyaW5nIG11dGF0aW9uIGV2ZW50cyBhc1xuICAvLyBuZWNlc3NhcnlcbiAgX2luc2VydE9yUmVwbGFjZTogeyB2YWx1ZTogZnVuY3Rpb24gX2luc2VydE9yUmVwbGFjZShwYXJlbnQsIGluZGV4LCBpc1JlcGxhY2UpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzO1xuICAgIHZhciBraWRzID0gcGFyZW50LmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgJiYgY2hpbGQucm9vdGVkKSB7XG4gICAgICB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBhcmUgYWxyZWFkeSBhIGNoaWxkIG9mIHRoZSBzcGVjaWZpZWQgcGFyZW50LCB0aGVuXG4gICAgLy8gdGhlIGluZGV4IG1heSBoYXZlIHRvIGJlIGFkanVzdGVkLlxuICAgIGlmIChjaGlsZC5wYXJlbnROb2RlID09PSBwYXJlbnQpIHtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSBjaGlsZC5pbmRleDtcbiAgICAgIC8vIElmIHdlJ3JlIG5vdCBtb3ZpbmcgdGhlIG5vZGUsIHdlJ3JlIGRvbmUgbm93XG4gICAgICAvLyBYWFg6IG9yIGRvIERPTSBtdXRhdGlvbiBldmVudHMgc3RpbGwgaGF2ZSB0byBiZSBmaXJlZD9cbiAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IGluZGV4KSByZXR1cm47XG5cbiAgICAgIC8vIElmIHRoZSBjaGlsZCBpcyBiZWZvcmUgdGhlIHNwb3QgaXQgaXMgdG8gYmUgaW5zZXJ0ZWQgYXQsXG4gICAgICAvLyB0aGVuIHdoZW4gaXQgaXMgcmVtb3ZlZCwgdGhlIGluZGV4IG9mIHRoYXQgc3BvdCB3aWxsIGJlXG4gICAgICAvLyByZWR1Y2VkLlxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA8IGluZGV4KSBpbmRleC0tO1xuICAgIH1cblxuICAgIC8vIERlbGV0ZSB0aGUgb2xkIGNoaWxkXG4gICAgaWYgKGlzUmVwbGFjZSkge1xuICAgICAgdmFyIG9sZENoaWxkID0gcGFyZW50LmNoaWxkTm9kZXNbaW5kZXhdO1xuICAgICAgaWYgKG9sZENoaWxkLnJvb3RlZCkgb2xkQ2hpbGQuZG9jLm11dGF0ZVJlbW92ZShvbGRDaGlsZCk7XG4gICAgICBvbGRDaGlsZC5wYXJlbnROb2RlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBJZiBib3RoIHRoZSBjaGlsZCBhbmQgdGhlIHBhcmVudCBhcmUgcm9vdGVkLCB0aGVuIHdlIHdhbnQgdG9cbiAgICAvLyB0cmFuc3BsYW50IHRoZSBjaGlsZCB3aXRob3V0IHVwcm9vdGluZyBhbmQgcmVyb290aW5nIGl0LlxuICAgIGlmIChjaGlsZC5yb290ZWQgJiYgcGFyZW50LnJvb3RlZCkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBjaGlsZCBmcm9tIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSB0cmVlXG4gICAgICAvLyB3aXRob3V0IGNhbGxpbmcgcmVtb3ZlKCksIHNpbmNlIHdlIGRvbid0IHdhbnQgdG8gdXByb290IGl0LlxuICAgICAgdmFyIGN1cnBhciA9IGNoaWxkLnBhcmVudE5vZGU7XG4gICAgICBjdXJwYXIuY2hpbGROb2Rlcy5zcGxpY2UoY2hpbGQuaW5kZXgsIDEpO1xuICAgICAgY3VycGFyLm1vZGlmeSgpO1xuXG4gICAgICAvLyBBbmQgaW5zZXJ0IGl0IGFzIGEgY2hpbGQgb2YgaXRzIG5ldyBwYXJlbnRcbiAgICAgIGNoaWxkLnBhcmVudE5vZGUgPSBwYXJlbnQ7XG4gICAgICBpZiAoaXNSZXBsYWNlKSB7XG4gICAgICAgIGtpZHNbaW5kZXhdID0gY2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBraWRzLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgICAgfVxuICAgICAgY2hpbGQuX2luZGV4ID0gaW5kZXg7XG4gICAgICBwYXJlbnQubW9kaWZ5KCk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGEgbW92ZSBtdXRhdGlvbiBldmVudFxuICAgICAgcGFyZW50LmRvYy5tdXRhdGVNb3ZlKGNoaWxkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIHNwbGljZUFyZ3MgPSBbaW5kZXgsIGlzUmVwbGFjZSA/IDEgOiAwXTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGZyYWdDaGlsZCA9IGNoaWxkLmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgc3BsaWNlQXJncy5wdXNoKGZyYWdDaGlsZCk7XG4gICAgICAgICAgZnJhZ0NoaWxkLnBhcmVudE5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgZnJhZ0NoaWxkLl9pbmRleCA9IGluZGV4ICsgaTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYWxsIG5vZGVzIGZyb20gdGhlIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICAgIGNoaWxkLmNoaWxkTm9kZXMubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gQWRkIGFsbCBub2RlcyB0byB0aGUgbmV3IHBhcmVudCwgb3ZlcndyaXRpbmcgdGhlIG9sZCBjaGlsZFxuICAgICAgICBraWRzLnNwbGljZS5hcHBseShraWRzLCBzcGxpY2VBcmdzKTtcbiAgICAgICAgLy8gQ2FsbCB0aGUgbXV0YXRpb24gaGFuZGxlcnNcbiAgICAgICAgLy8gVXNlIHNwbGljZUFyZ3Mgc2luY2UgdGhlIG9yaWdpbmFsIGFycmF5IGhhcyBiZWVuIGRlc3Ryb3llZC4gVGhlXG4gICAgICAgIC8vIGxpdmVuZXNzIGd1YXJhbnRlZSByZXF1aXJlcyB1cyB0byBjbG9uZSB0aGUgYXJyYXkgc28gdGhhdFxuICAgICAgICAvLyByZWZlcmVuY2VzIHRvIHRoZSBjaGlsZE5vZGVzIG9mIHRoZSBEb2N1bWVudEZyYWdtZW50IHdpbGwgYmUgZW1wdHlcbiAgICAgICAgLy8gd2hlbiB0aGUgaW5zZXJ0aW9uIGhhbmRsZXJzIGFyZSBjYWxsZWQuXG4gICAgICAgIGlmIChwYXJlbnQucm9vdGVkKSB7XG4gICAgICAgICAgcGFyZW50Lm1vZGlmeSgpO1xuICAgICAgICAgIGZvciAoaSA9IDI7IGkgPCBzcGxpY2VBcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYXJlbnQuZG9jLm11dGF0ZUluc2VydChzcGxpY2VBcmdzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgY2hpbGQgYWxyZWFkeSBoYXMgYSBwYXJlbnQsIGl0IG5lZWRzIHRvIGJlXG4gICAgICAgIC8vIHJlbW92ZWQgZnJvbSB0aGF0IHBhcmVudCwgd2hpY2ggbWF5IGFsc28gdXByb290IGl0XG4gICAgICAgIGlmIChjaGlsZC5wYXJlbnROb2RlKSBjaGlsZC5yZW1vdmUoKTtcblxuICAgICAgICAvLyBOb3cgaW5zZXJ0IHRoZSBjaGlsZCBpbnRvIHRoZSBwYXJlbnQncyBhcnJheSBvZiBjaGlsZHJlblxuICAgICAgICBjaGlsZC5wYXJlbnROb2RlID0gcGFyZW50O1xuICAgICAgICBpZiAoaXNSZXBsYWNlKSB7XG4gICAgICAgICAga2lkc1tpbmRleF0gPSBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBraWRzLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkLl9pbmRleCA9IGluZGV4O1xuXG4gICAgICAgIC8vIEFuZCByb290IHRoZSBjaGlsZCBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKHBhcmVudC5yb290ZWQpIHtcbiAgICAgICAgICBwYXJlbnQubW9kaWZ5KCk7XG4gICAgICAgICAgcGFyZW50LmRvYy5tdXRhdGVJbnNlcnQoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9fSxcblxuXG4gIC8vIFJldHVybiB0aGUgbGFzdE1vZFRpbWUgdmFsdWUgZm9yIHRoaXMgbm9kZS4gKEZvciB1c2UgYXMgYVxuICAvLyBjYWNoZSBpbnZhbGlkYXRpb24gbWVjaGFuaXNtLiBJZiB0aGUgbm9kZSBkb2VzIG5vdCBhbHJlYWR5XG4gIC8vIGhhdmUgb25lLCBpbml0aWFsaXplIGl0IGZyb20gdGhlIG93bmVyIGRvY3VtZW50J3MgbW9kY2xvY2tcbiAgLy8gcHJvcGVydHkuIChOb3RlIHRoYXQgbW9kY2xvY2sgZG9lcyBub3QgcmV0dXJuIHRoZSBhY3R1YWxcbiAgLy8gdGltZTsgaXQgaXMgc2ltcGx5IGEgY291bnRlciBpbmNyZW1lbnRlZCBvbiBlYWNoIGRvY3VtZW50XG4gIC8vIG1vZGlmaWNhdGlvbilcbiAgbGFzdE1vZFRpbWU6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX2xhc3RNb2RUaW1lKSB7XG4gICAgICB0aGlzLl9sYXN0TW9kVGltZSA9IHRoaXMuZG9jLm1vZGNsb2NrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbGFzdE1vZFRpbWU7XG4gIH19LFxuXG4gIC8vIEluY3JlbWVudCB0aGUgb3duZXIgZG9jdW1lbnQncyBtb2RjbG9jayBhbmQgdXNlIHRoZSBuZXdcbiAgLy8gdmFsdWUgdG8gdXBkYXRlIHRoZSBsYXN0TW9kVGltZSB2YWx1ZSBmb3IgdGhpcyBub2RlIGFuZFxuICAvLyBhbGwgb2YgaXRzIGFuY2VzdG9ycy4gTm9kZXMgdGhhdCBoYXZlIG5ldmVyIGhhZCB0aGVpclxuICAvLyBsYXN0TW9kVGltZSB2YWx1ZSBxdWVyaWVkIGRvIG5vdCBuZWVkIHRvIGhhdmUgYVxuICAvLyBsYXN0TW9kVGltZSBwcm9wZXJ0eSBzZXQgb24gdGhlbSBzaW5jZSB0aGVyZSBpcyBub1xuICAvLyBwcmV2aW91c2x5IHF1ZXJpZWQgdmFsdWUgdG8gZXZlciBjb21wYXJlIHRoZSBuZXcgdmFsdWVcbiAgLy8gYWdhaW5zdCwgc28gb25seSB1cGRhdGUgbm9kZXMgdGhhdCBhbHJlYWR5IGhhdmUgYVxuICAvLyBfbGFzdE1vZFRpbWUgcHJvcGVydHkuXG4gIG1vZGlmeTogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZG9jLm1vZGNsb2NrKSB7IC8vIFNraXAgd2hpbGUgZG9jLm1vZGNsb2NrID09IDBcbiAgICAgIHZhciB0aW1lID0gKyt0aGlzLmRvYy5tb2RjbG9jaztcbiAgICAgIGZvcih2YXIgbiA9IHRoaXM7IG47IG4gPSBuLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKG4uX2xhc3RNb2RUaW1lKSB7XG4gICAgICAgICAgbi5fbGFzdE1vZFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9fSxcblxuICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBub3QgcGFydCBvZiB0aGUgRE9NIGJ1dCBpcyBxdWl0ZSBoZWxwZnVsLlxuICAvLyBJdCByZXR1cm5zIHRoZSBkb2N1bWVudCB3aXRoIHdoaWNoIGEgbm9kZSBpcyBhc3NvY2lhdGVkLiAgVXN1YWxseVxuICAvLyB0aGlzIGlzIHRoZSBvd25lckRvY3VtZW50LiBCdXQgb3duZXJEb2N1bWVudCBpcyBudWxsIGZvciB0aGVcbiAgLy8gZG9jdW1lbnQgb2JqZWN0IGl0c2VsZiwgc28gdGhpcyBpcyBhIGhhbmR5IHdheSB0byBnZXQgdGhlIGRvY3VtZW50XG4gIC8vIHJlZ2FyZGxlc3Mgb2YgdGhlIG5vZGUgdHlwZVxuICBkb2M6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXM7XG4gIH19LFxuXG5cbiAgLy8gSWYgdGhlIG5vZGUgaGFzIGEgbmlkIChub2RlIGlkKSwgdGhlbiBpdCBpcyByb290ZWQgaW4gYSBkb2N1bWVudFxuICByb290ZWQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISF0aGlzLl9uaWQ7XG4gIH19LFxuXG4gIG5vcm1hbGl6ZTogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaT0wOyBpIDwgdGhpcy5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkTm9kZXNbaV07XG5cbiAgICAgIGlmIChjaGlsZC5ub3JtYWxpemUpIHtcbiAgICAgICAgY2hpbGQubm9ybWFsaXplKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5ub2RlVmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpKSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGQgPSB0aGlzLmNoaWxkTm9kZXNbaS0xXTtcblxuICAgICAgICBpZiAocHJldkNoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2hpbGQgYW5kIGRlY3JlbWVudCBpXG4gICAgICAgICAgcHJldkNoaWxkLmFwcGVuZERhdGEoY2hpbGQubm9kZVZhbHVlKTtcblxuICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfX0sXG5cbiAgLy8gQ29udmVydCB0aGUgY2hpbGRyZW4gb2YgYSBub2RlIHRvIGFuIEhUTUwgc3RyaW5nLlxuICAvLyBUaGlzIGlzIHVzZWQgYnkgdGhlIGlubmVySFRNTCBnZXR0ZXJcbiAgLy8gVGhlIHNlcmlhbGl6YXRpb24gc3BlYyBpcyBhdDpcbiAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWVuZC5odG1sI3NlcmlhbGl6aW5nLWh0bWwtZnJhZ21lbnRzXG4gIHNlcmlhbGl6ZTogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHMgPSAnJztcbiAgICBmb3IodmFyIGkgPSAwLCBuID0gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgdmFyIGtpZCA9IHRoaXMuY2hpbGROb2Rlc1tpXTtcbiAgICAgIHN3aXRjaChraWQubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgMTogLy9FTEVNRU5UX05PREVcbiAgICAgICAgdmFyIG5zID0ga2lkLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgdmFyIGh0bWwgPSBucyA9PT0gTkFNRVNQQUNFLkhUTUw7XG4gICAgICAgIHZhciB0YWduYW1lID0gKGh0bWwgfHwgbnMgPT09IE5BTUVTUEFDRS5TVkcgfHwgbnMgPT09IE5BTUVTUEFDRS5NQVRITUwpID8ga2lkLmxvY2FsTmFtZSA6IGtpZC50YWdOYW1lO1xuXG4gICAgICAgIHMgKz0gJzwnICsgdGFnbmFtZTtcblxuICAgICAgICBmb3IodmFyIGogPSAwLCBrID0ga2lkLl9udW1hdHRyczsgaiA8IGs7IGorKykge1xuICAgICAgICAgIHZhciBhID0ga2lkLl9hdHRyKGopO1xuICAgICAgICAgIHMgKz0gJyAnICsgYXR0cm5hbWUoYSk7XG4gICAgICAgICAgaWYgKGEudmFsdWUgIT09IHVuZGVmaW5lZCkgcyArPSAnPVwiJyArIGVzY2FwZUF0dHIoYS52YWx1ZSkgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gJz4nO1xuXG4gICAgICAgIGlmICghKGh0bWwgJiYgZW1wdHlFbGVtZW50c1t0YWduYW1lXSkpIHtcbiAgICAgICAgICB2YXIgc3MgPSBraWQuc2VyaWFsaXplKCk7XG4gICAgICAgICAgaWYgKGh0bWwgJiYgZXh0cmFOZXdMaW5lW3RhZ25hbWVdICYmIHNzLmNoYXJBdCgwKT09PSdcXG4nKSBzICs9ICdcXG4nO1xuICAgICAgICAgIC8vIFNlcmlhbGl6ZSBjaGlsZHJlbiBhbmQgYWRkIGVuZCB0YWcgZm9yIGFsbCBvdGhlcnNcbiAgICAgICAgICBzICs9IHNzO1xuICAgICAgICAgIHMgKz0gJzwvJyArIHRhZ25hbWUgKyAnPic7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6IC8vVEVYVF9OT0RFXG4gICAgICBjYXNlIDQ6IC8vQ0RBVEFfU0VDVElPTl9OT0RFXG4gICAgICAgIHZhciBwYXJlbnR0YWc7XG4gICAgICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiZcbiAgICAgICAgICB0aGlzLm5hbWVzcGFjZVVSSSA9PT0gTkFNRVNQQUNFLkhUTUwpXG4gICAgICAgICAgcGFyZW50dGFnID0gdGhpcy50YWdOYW1lO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcGFyZW50dGFnID0gJyc7XG5cbiAgICAgICAgaWYgKGhhc1Jhd0NvbnRlbnRbcGFyZW50dGFnXSB8fFxuICAgICAgICAgICAgKHBhcmVudHRhZz09PSdOT1NDUklQVCcgJiYgdGhpcy5vd25lckRvY3VtZW50Ll9zY3JpcHRpbmdfZW5hYmxlZCkpIHtcbiAgICAgICAgICBzICs9IGtpZC5kYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMgKz0gZXNjYXBlKGtpZC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODogLy9DT01NRU5UX05PREVcbiAgICAgICAgcyArPSAnPCEtLScgKyBraWQuZGF0YSArICctLT4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzogLy9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREVcbiAgICAgICAgcyArPSAnPD8nICsga2lkLnRhcmdldCArICcgJyArIGtpZC5kYXRhICsgJz8+JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwOiAvL0RPQ1VNRU5UX1RZUEVfTk9ERVxuICAgICAgICBzICs9ICc8IURPQ1RZUEUgJyArIGtpZC5uYW1lO1xuXG4gICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgIC8vIExhdGVzdCBIVE1MIHNlcmlhbGl6YXRpb24gc3BlYyBvbWl0cyB0aGUgcHVibGljL3N5c3RlbSBJRFxuICAgICAgICAgIGlmIChraWQucHVibGljSUQpIHtcbiAgICAgICAgICAgIHMgKz0gJyBQVUJMSUMgXCInICsga2lkLnB1YmxpY0lkICsgJ1wiJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoa2lkLnN5c3RlbUlkKSB7XG4gICAgICAgICAgICBzICs9ICcgXCInICsga2lkLnN5c3RlbUlkICsgJ1wiJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB1dGlscy5JbnZhbGlkU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcztcbiAgfX0sXG5cbiAgLy8gbWlycm9yIG5vZGUgdHlwZSBwcm9wZXJ0aWVzIGluIHRoZSBwcm90b3R5cGUsIHNvIHRoZXkgYXJlIHByZXNlbnRcbiAgLy8gaW4gaW5zdGFuY2VzIG9mIE5vZGUgKGFuZCBzdWJjbGFzc2VzKVxuICBFTEVNRU5UX05PREU6ICAgICAgICAgICAgICAgIHsgdmFsdWU6IEVMRU1FTlRfTk9ERSB9LFxuICBBVFRSSUJVVEVfTk9ERTogICAgICAgICAgICAgIHsgdmFsdWU6IEFUVFJJQlVURV9OT0RFIH0sXG4gIFRFWFRfTk9ERTogICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogVEVYVF9OT0RFIH0sXG4gIENEQVRBX1NFQ1RJT05fTk9ERTogICAgICAgICAgeyB2YWx1ZTogQ0RBVEFfU0VDVElPTl9OT0RFIH0sXG4gIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTogICAgICAgeyB2YWx1ZTogRU5USVRZX1JFRkVSRU5DRV9OT0RFIH0sXG4gIEVOVElUWV9OT0RFOiAgICAgICAgICAgICAgICAgeyB2YWx1ZTogRU5USVRZX05PREUgfSxcbiAgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOiB7IHZhbHVlOiBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgfSxcbiAgQ09NTUVOVF9OT0RFOiAgICAgICAgICAgICAgICB7IHZhbHVlOiBDT01NRU5UX05PREUgfSxcbiAgRE9DVU1FTlRfTk9ERTogICAgICAgICAgICAgICB7IHZhbHVlOiBET0NVTUVOVF9OT0RFIH0sXG4gIERPQ1VNRU5UX1RZUEVfTk9ERTogICAgICAgICAgeyB2YWx1ZTogRE9DVU1FTlRfVFlQRV9OT0RFIH0sXG4gIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6ICAgICAgeyB2YWx1ZTogRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB9LFxuICBOT1RBVElPTl9OT0RFOiAgICAgICAgICAgICAgIHsgdmFsdWU6IE5PVEFUSU9OX05PREUgfVxufSk7XG5cbmZ1bmN0aW9uIGVzY2FwZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1smPD5cXHUwMEEwXS9nLCBmdW5jdGlvbihjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlICcmJzogcmV0dXJuICcmYW1wOyc7XG4gICAgY2FzZSAnPCc6IHJldHVybiAnJmx0Oyc7XG4gICAgY2FzZSAnPic6IHJldHVybiAnJmd0Oyc7XG4gICAgY2FzZSAnXFx1MDBBMCc6IHJldHVybiAnJm5ic3A7JztcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVBdHRyKHMpIHtcbiAgdmFyIHRvRXNjYXBlID0gL1smXCJcXHUwMEEwXS9nO1xuICBpZiAoIXRvRXNjYXBlLnRlc3QocykpIHtcbiAgICAgIC8vIG5vdGhpbmcgdG8gZG8sIGZhc3QgcGF0aFxuICAgICAgcmV0dXJuIHM7XG4gIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcy5yZXBsYWNlKHRvRXNjYXBlLCBmdW5jdGlvbihjKSB7XG4gICAgICAgIHN3aXRjaChjKSB7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gJyZhbXA7JztcbiAgICAgICAgY2FzZSAnXCInOiByZXR1cm4gJyZxdW90Oyc7XG4gICAgICAgIGNhc2UgJ1xcdTAwQTAnOiByZXR1cm4gJyZuYnNwOyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGF0dHJuYW1lKGEpIHtcbiAgdmFyIG5zID0gYS5uYW1lc3BhY2VVUkk7XG4gIGlmICghbnMpXG4gICAgcmV0dXJuIGEubG9jYWxOYW1lO1xuICBpZiAobnMgPT09IE5BTUVTUEFDRS5YTUwpXG4gICAgcmV0dXJuICd4bWw6JyArIGEubG9jYWxOYW1lO1xuICBpZiAobnMgPT09IE5BTUVTUEFDRS5YTElOSylcbiAgICByZXR1cm4gJ3hsaW5rOicgKyBhLmxvY2FsTmFtZTtcblxuICBpZiAobnMgPT09IE5BTUVTUEFDRS5YTUxOUykge1xuICAgIGlmIChhLmxvY2FsTmFtZSA9PT0gJ3htbG5zJykgcmV0dXJuICd4bWxucyc7XG4gICAgZWxzZSByZXR1cm4gJ3htbG5zOicgKyBhLmxvY2FsTmFtZTtcbiAgfVxuICByZXR1cm4gYS5uYW1lO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudDtcblxudmFyIHhtbCA9IHJlcXVpcmUoJy4veG1sbmFtZXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBOQU1FU1BBQ0UgPSB1dGlscy5OQU1FU1BBQ0U7XG52YXIgYXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vYXR0cmlidXRlcycpO1xudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QnKTtcbnZhciBGaWx0ZXJlZEVsZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9GaWx0ZXJlZEVsZW1lbnRMaXN0Jyk7XG52YXIgRE9NVG9rZW5MaXN0ID0gcmVxdWlyZSgnLi9ET01Ub2tlbkxpc3QnKTtcbnZhciBzZWxlY3QgPSByZXF1aXJlKCcuL3NlbGVjdCcpO1xudmFyIENoaWxkTm9kZSA9IHJlcXVpcmUoJy4vQ2hpbGROb2RlJyk7XG52YXIgTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlID0gcmVxdWlyZSgnLi9Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGUnKTtcblxuZnVuY3Rpb24gRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgbmFtZXNwYWNlVVJJLCBwcmVmaXgpIHtcbiAgdGhpcy5ub2RlVHlwZSA9IE5vZGUuRUxFTUVOVF9OT0RFO1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBkb2M7XG4gIHRoaXMubG9jYWxOYW1lID0gbG9jYWxOYW1lO1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IG5hbWVzcGFjZVVSSTtcbiAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG5cbiAgdGhpcy50YWdOYW1lID0gKHByZWZpeCAhPT0gbnVsbCkgPyBwcmVmaXggKyAnOicgKyBsb2NhbE5hbWUgOiBsb2NhbE5hbWU7XG5cbiAgaWYgKG5hbWVzcGFjZVVSSSAhPT0gTkFNRVNQQUNFLkhUTUwgfHwgKCFuYW1lc3BhY2VVUkkgJiYgIWRvYy5pc0hUTUwpKSB0aGlzLmlzSFRNTCA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLmlzSFRNTCkgdGhpcy50YWdOYW1lID0gdGhpcy50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgdGhpcy5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cbiAgLy8gVGhlc2UgcHJvcGVydGllcyBtYWludGFpbiB0aGUgc2V0IG9mIGF0dHJpYnV0ZXNcbiAgdGhpcy5fYXR0cnNCeVFOYW1lID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gVGhlIHFuYW1lLT5BdHRyIG1hcFxuICB0aGlzLl9hdHRyc0J5TE5hbWUgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBUaGUgbnN8bG5hbWUtPkF0dHIgbWFwXG4gIHRoaXMuX2F0dHJLZXlzID0gW107ICAgICAvLyBhdHRyIGluZGV4IC0+IG5zfGxuYW1lXG5cbiAgdGhpcy5faW5kZXggPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZUdldFRleHQobm9kZSwgYSkge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICBhLnB1c2gobm9kZS5fZGF0YSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZm9yKHZhciBpID0gMCwgbiA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7ICBpIDwgbjsgaSsrKVxuICAgICAgcmVjdXJzaXZlR2V0VGV4dChub2RlLmNoaWxkTm9kZXNbaV0sIGEpO1xuICB9XG59XG5cbkVsZW1lbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSwge1xuICBub2RlTmFtZTogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50YWdOYW1lOyB9fSxcbiAgbm9kZVZhbHVlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbigpIHt9XG4gIH0sXG4gIHRleHRDb250ZW50OiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdHJpbmdzID0gW107XG4gICAgICByZWN1cnNpdmVHZXRUZXh0KHRoaXMsIHN0cmluZ3MpO1xuICAgICAgcmV0dXJuIHN0cmluZ3Muam9pbignJyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKG5ld3RleHQpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICAgIGlmIChuZXd0ZXh0ICE9PSBudWxsICYmIG5ld3RleHQgIT09ICcnKSB7XG4gICAgICAgIHRoaXMuX2FwcGVuZENoaWxkKHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXd0ZXh0KSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpbm5lckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplKCk7XG4gICAgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuICBvdXRlckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gXCJ0aGUgYXR0cmlidXRlIG11c3QgcmV0dXJuIHRoZSByZXN1bHQgb2YgcnVubmluZyB0aGUgSFRNTCBmcmFnbWVudFxuICAgICAgLy8gc2VyaWFsaXphdGlvbiBhbGdvcml0aG0gb24gYSBmaWN0aW9uYWwgbm9kZSB3aG9zZSBvbmx5IGNoaWxkIGlzXG4gICAgICAvLyB0aGUgY29udGV4dCBvYmplY3RcIlxuICAgICAgdmFyIGZpY3Rpb25hbCA9IHtcbiAgICAgICAgY2hpbGROb2RlczogWyB0aGlzIF0sXG4gICAgICAgIG5vZGVUeXBlOiAwXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE5vZGUucHJvdG90eXBlLnNlcmlhbGl6ZS5jYWxsKGZpY3Rpb25hbCk7XG4gICAgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuXG4gIGNoaWxkcmVuOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLl9jaGlsZHJlbikge1xuICAgICAgdGhpcy5fY2hpbGRyZW4gPSBuZXcgQ2hpbGRyZW5Db2xsZWN0aW9uKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gIH19LFxuXG4gIGF0dHJpYnV0ZXM6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX2F0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSBuZXcgQXR0cmlidXRlc0FycmF5KHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcztcbiAgfX0sXG5cblxuICBmaXJzdEVsZW1lbnRDaGlsZDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBraWRzID0gdGhpcy5jaGlsZE5vZGVzO1xuICAgIGZvcih2YXIgaSA9IDAsIG4gPSBraWRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgaWYgKGtpZHNbaV0ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4ga2lkc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH19LFxuXG4gIGxhc3RFbGVtZW50Q2hpbGQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2lkcyA9IHRoaXMuY2hpbGROb2RlcztcbiAgICBmb3IodmFyIGkgPSBraWRzLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKGtpZHNbaV0ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4ga2lkc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH19LFxuXG4gIGNoaWxkRWxlbWVudENvdW50OiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICB9fSxcblxuXG4gIC8vIFJldHVybiB0aGUgbmV4dCBlbGVtZW50LCBpbiBzb3VyY2Ugb3JkZXIsIGFmdGVyIHRoaXMgb25lIG9yXG4gIC8vIG51bGwgaWYgdGhlcmUgYXJlIG5vIG1vcmUuICBJZiByb290IGVsZW1lbnQgaXMgc3BlY2lmaWVkLFxuICAvLyB0aGVuIGRvbid0IHRyYXZlcnNlIGJleW9uZCBpdHMgc3VidHJlZS5cbiAgLy9cbiAgLy8gVGhpcyBpcyBub3QgYSBET00gbWV0aG9kLCBidXQgaXMgY29udmVuaWVudCBmb3JcbiAgLy8gbGF6eSB0cmF2ZXJzYWxzIG9mIHRoZSB0cmVlLlxuICBuZXh0RWxlbWVudDogeyB2YWx1ZTogZnVuY3Rpb24ocm9vdCkge1xuICAgIGlmICghcm9vdCkgcm9vdCA9IHRoaXMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIG5leHQgPSB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIGlmICghbmV4dCkge1xuICAgICAgLy8gZG9uJ3QgdXNlIHNpYmxpbmcgaWYgd2UncmUgYXQgcm9vdFxuICAgICAgaWYgKHRoaXM9PT1yb290KSByZXR1cm4gbnVsbDtcbiAgICAgIG5leHQgPSB0aGlzLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgaWYgKG5leHQpIHJldHVybiBuZXh0O1xuXG4gICAgLy8gSWYgd2UgY2FuJ3QgZ28gZG93biBvciBhY3Jvc3MsIHRoZW4gd2UgaGF2ZSB0byBnbyB1cFxuICAgIC8vIGFuZCBhY3Jvc3MgdG8gdGhlIHBhcmVudCBzaWJsaW5nIG9yIGFub3RoZXIgYW5jZXN0b3Inc1xuICAgIC8vIHNpYmxpbmcuICBCZSBjYXJlZnVsLCB0aG91Z2g6IGlmIHdlIHJlYWNoIHRoZSByb290XG4gICAgLy8gZWxlbWVudCwgb3IgaWYgd2UgcmVhY2ggdGhlIGRvY3VtZW50RWxlbWVudCwgdGhlblxuICAgIC8vIHRoZSB0cmF2ZXJzYWwgZW5kcy5cbiAgICBmb3IodmFyIHBhcmVudCA9IHRoaXMucGFyZW50RWxlbWVudDtcbiAgICAgIHBhcmVudCAmJiBwYXJlbnQgIT09IHJvb3Q7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudCkge1xuXG4gICAgICBuZXh0ID0gcGFyZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgIGlmIChuZXh0KSByZXR1cm4gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfX0sXG5cbiAgLy8gWFhYOlxuICAvLyBUZXN0cyBhcmUgY3VycmVudGx5IGZhaWxpbmcgZm9yIHRoaXMgZnVuY3Rpb24uXG4gIC8vIEF3YWl0aW5nIHJlc29sdXRpb24gb2Y6XG4gIC8vIGh0dHA6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1kb20vMjAxMUp1bFNlcC8wMDE2Lmh0bWxcbiAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IHsgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdOYW1lKGxuYW1lKSB7XG4gICAgdmFyIGZpbHRlcjtcbiAgICBpZiAoIWxuYW1lKSByZXR1cm4gbmV3IE5vZGVMaXN0KCk7XG4gICAgaWYgKGxuYW1lID09PSAnKicpXG4gICAgICBmaWx0ZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgZWxzZSBpZiAodGhpcy5pc0hUTUwpXG4gICAgICBmaWx0ZXIgPSBodG1sTG9jYWxOYW1lRWxlbWVudEZpbHRlcihsbmFtZSk7XG4gICAgZWxzZVxuICAgICAgZmlsdGVyID0gbG9jYWxOYW1lRWxlbWVudEZpbHRlcihsbmFtZSk7XG5cbiAgICByZXR1cm4gbmV3IEZpbHRlcmVkRWxlbWVudExpc3QodGhpcywgZmlsdGVyKTtcbiAgfX0sXG5cbiAgZ2V0RWxlbWVudHNCeVRhZ05hbWVOUzogeyB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhucywgbG5hbWUpe1xuICAgIHZhciBmaWx0ZXI7XG4gICAgaWYgKG5zID09PSAnKicgJiYgbG5hbWUgPT09ICcqJylcbiAgICAgIGZpbHRlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgICBlbHNlIGlmIChucyA9PT0gJyonKVxuICAgICAgZmlsdGVyID0gbG9jYWxOYW1lRWxlbWVudEZpbHRlcihsbmFtZSk7XG4gICAgZWxzZSBpZiAobG5hbWUgPT09ICcqJylcbiAgICAgIGZpbHRlciA9IG5hbWVzcGFjZUVsZW1lbnRGaWx0ZXIobnMpO1xuICAgIGVsc2VcbiAgICAgIGZpbHRlciA9IG5hbWVzcGFjZUxvY2FsTmFtZUVsZW1lbnRGaWx0ZXIobnMsIGxuYW1lKTtcblxuICAgIHJldHVybiBuZXcgRmlsdGVyZWRFbGVtZW50TGlzdCh0aGlzLCBmaWx0ZXIpO1xuICB9fSxcblxuICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lOiB7IHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWVzKXtcbiAgICBuYW1lcyA9IFN0cmluZyhuYW1lcykudHJpbSgpO1xuICAgIGlmIChuYW1lcyA9PT0gJycpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTm9kZUxpc3QoKTsgLy8gRW1wdHkgbm9kZSBsaXN0XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBuYW1lcyA9IG5hbWVzLnNwbGl0KC9cXHMrLyk7ICAvLyBTcGxpdCBvbiBzcGFjZXNcbiAgICByZXR1cm4gbmV3IEZpbHRlcmVkRWxlbWVudExpc3QodGhpcywgY2xhc3NOYW1lc0VsZW1lbnRGaWx0ZXIobmFtZXMpKTtcbiAgfX0sXG5cbiAgZ2V0RWxlbWVudHNCeU5hbWU6IHsgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlcmVkRWxlbWVudExpc3QodGhpcywgZWxlbWVudE5hbWVGaWx0ZXIoU3RyaW5nKG5hbWUpKSk7XG4gIH19LFxuXG4gIC8vIE92ZXJ3cml0dGVuIGluIHRoZSBjb25zdHJ1Y3RvciBpZiBub3QgaW4gdGhlIEhUTUwgbmFtZXNwYWNlXG4gIGlzSFRNTDogeyB2YWx1ZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHMgdXNlZCBieSB0aGUgcHVibGljIEFQSSBtZXRob2RzIGFib3ZlXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgZTtcblxuICAgIC8vIFhYWDpcbiAgICAvLyBNb2RpZnkgdGhpcyB0byB1c2UgdGhlIGNvbnN0cnVjdG9yIGRpcmVjdGx5IG9yXG4gICAgLy8gYXZvaWQgZXJyb3IgY2hlY2tpbmcgaW4gc29tZSBvdGhlciB3YXkuIEluIGNhc2Ugd2UgdHJ5XG4gICAgLy8gdG8gY2xvbmUgYW4gaW52YWxpZCBub2RlIHRoYXQgdGhlIHBhcnNlciBpbnNlcnRlZC5cbiAgICAvL1xuICAgIGlmICh0aGlzLm5hbWVzcGFjZVVSSSAhPT0gTkFNRVNQQUNFLkhUTUwgfHwgdGhpcy5wcmVmaXgpXG4gICAgICBlID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh0aGlzLm5hbWVzcGFjZVVSSSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFnTmFtZSk7XG4gICAgZWxzZVxuICAgICAgZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMubG9jYWxOYW1lKTtcblxuICAgIGZvcih2YXIgaSA9IDAsIG4gPSB0aGlzLl9hdHRyS2V5cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHZhciBsbmFtZSA9IHRoaXMuX2F0dHJLZXlzW2ldO1xuICAgICAgdmFyIGEgPSB0aGlzLl9hdHRyc0J5TE5hbWVbbG5hbWVdO1xuICAgICAgdmFyIGIgPSBuZXcgQXR0cihlLCBhLmxvY2FsTmFtZSwgYS5wcmVmaXgsIGEubmFtZXNwYWNlVVJJKTtcbiAgICAgIGIuZGF0YSA9IGEuZGF0YTtcbiAgICAgIGUuX2F0dHJzQnlMTmFtZVtsbmFtZV0gPSBiO1xuICAgICAgZS5fYWRkUU5hbWUoYik7XG4gICAgfVxuICAgIGUuX2F0dHJLZXlzID0gdGhpcy5fYXR0cktleXMuY29uY2F0KCk7XG5cbiAgICByZXR1cm4gZTtcbiAgfX0sXG5cbiAgaXNFcXVhbDogeyB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbCh0aGF0KSB7XG4gICAgaWYgKHRoaXMubG9jYWxOYW1lICE9PSB0aGF0LmxvY2FsTmFtZSB8fFxuICAgICAgdGhpcy5uYW1lc3BhY2VVUkkgIT09IHRoYXQubmFtZXNwYWNlVVJJIHx8XG4gICAgICB0aGlzLnByZWZpeCAhPT0gdGhhdC5wcmVmaXggfHxcbiAgICAgIHRoaXMuX251bWF0dHJzICE9PSB0aGF0Ll9udW1hdHRycylcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENvbXBhcmUgdGhlIHNldHMgb2YgYXR0cmlidXRlcywgaWdub3Jpbmcgb3JkZXJcbiAgICAvLyBhbmQgaWdub3JpbmcgYXR0cmlidXRlIHByZWZpeGVzLlxuICAgIGZvcih2YXIgaSA9IDAsIG4gPSB0aGlzLl9udW1hdHRyczsgaSA8IG47IGkrKykge1xuICAgICAgdmFyIGEgPSB0aGlzLl9hdHRyKGkpO1xuICAgICAgaWYgKCF0aGF0Lmhhc0F0dHJpYnV0ZU5TKGEubmFtZXNwYWNlVVJJLCBhLmxvY2FsTmFtZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh0aGF0LmdldEF0dHJpYnV0ZU5TKGEubmFtZXNwYWNlVVJJLGEubG9jYWxOYW1lKSAhPT0gYS52YWx1ZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9fSxcblxuICAvLyBUaGlzIGlzIHRoZSAnbG9jYXRlIGEgbmFtZXNwYWNlIHByZWZpeCcgYWxnb3JpdGhtIGZyb20gdGhlXG4gIC8vIERPTUNvcmUgc3BlY2lmaWNhdGlvbi4gIEl0IGlzIHVzZWQgYnkgTm9kZS5sb29rdXBQcmVmaXgoKVxuICBsb2NhdGVOYW1lc3BhY2VQcmVmaXg6IHsgdmFsdWU6IGZ1bmN0aW9uIGxvY2F0ZU5hbWVzcGFjZVByZWZpeChucykge1xuICAgIGlmICh0aGlzLm5hbWVzcGFjZVVSSSA9PT0gbnMgJiYgdGhpcy5wcmVmaXggIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXg7XG5cbiAgICBmb3IodmFyIGkgPSAwLCBuID0gdGhpcy5fbnVtYXR0cnM7IGkgPCBuOyBpKyspIHtcbiAgICAgIHZhciBhID0gdGhpcy5fYXR0cihpKTtcbiAgICAgIGlmIChhLnByZWZpeCA9PT0gJ3htbG5zJyAmJiBhLnZhbHVlID09PSBucylcbiAgICAgICAgcmV0dXJuIGEubG9jYWxOYW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5sb2NhdGVOYW1lc3BhY2VQcmVmaXgobnMpIDogbnVsbDtcbiAgfX0sXG5cbiAgLy8gVGhpcyBpcyB0aGUgJ2xvY2F0ZSBhIG5hbWVzcGFjZScgYWxnb3JpdGhtIGZvciBFbGVtZW50IG5vZGVzXG4gIC8vIGZyb20gdGhlIERPTSBDb3JlIHNwZWMuICBJdCBpcyB1c2VkIGJ5IE5vZGUubG9va3VwTmFtZXNwYWNlVVJJXG4gIGxvY2F0ZU5hbWVzcGFjZTogeyB2YWx1ZTogZnVuY3Rpb24gbG9jYXRlTmFtZXNwYWNlKHByZWZpeCkge1xuICAgIGlmICh0aGlzLnByZWZpeCA9PT0gcHJlZml4ICYmIHRoaXMubmFtZXNwYWNlVVJJICE9PSBudWxsKVxuICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlVVJJO1xuXG4gICAgZm9yKHZhciBpID0gMCwgbiA9IHRoaXMuX251bWF0dHJzOyBpIDwgbjsgaSsrKSB7XG4gICAgICB2YXIgYSA9IHRoaXMuX2F0dHIoaSk7XG4gICAgICBpZiAoKGEucHJlZml4ID09PSAneG1sbnMnICYmIGEubG9jYWxOYW1lID09PSBwcmVmaXgpIHx8XG4gICAgICAgIChhLnByZWZpeCA9PT0gbnVsbCAmJiBhLmxvY2FsTmFtZSA9PT0gJ3htbG5zJykpIHtcbiAgICAgICAgcmV0dXJuIGEudmFsdWUgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xuICAgIHJldHVybiBwYXJlbnQgPyBwYXJlbnQubG9jYXRlTmFtZXNwYWNlKHByZWZpeCkgOiBudWxsO1xuICB9fSxcblxuICAvL1xuICAvLyBBdHRyaWJ1dGUgaGFuZGxpbmcgbWV0aG9kcyBhbmQgdXRpbGl0aWVzXG4gIC8vXG5cbiAgLypcbiAgICogQXR0cmlidXRlcyBpbiB0aGUgRE9NIGFyZSB0cmlja3k6XG4gICAqXG4gICAqIC0gdGhlcmUgYXJlIHRoZSA4IGJhc2ljIGdldC9zZXQvaGFzL3JlbW92ZUF0dHJpYnV0ZXtOU30gbWV0aG9kc1xuICAgKlxuICAgKiAtIGJ1dCBtYW55IEhUTUwgYXR0cmlidXRlcyBhcmUgYWxzbyAncmVmbGVjdGVkJyB0aHJvdWdoIElETFxuICAgKiAgIGF0dHJpYnV0ZXMgd2hpY2ggbWVhbnMgdGhhdCB0aGV5IGNhbiBiZSBxdWVyaWVkIGFuZCBzZXQgdGhyb3VnaFxuICAgKiAgIHJlZ3VsYXIgcHJvcGVydGllcyBvZiB0aGUgZWxlbWVudC4gIFRoZXJlIGlzIGp1c3Qgb25lIGF0dHJpYnV0ZVxuICAgKiAgIHZhbHVlLCBidXQgdHdvIHdheXMgdG8gZ2V0IGFuZCBzZXQgaXQuXG4gICAqXG4gICAqIC0gRGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcyBoYXZlIGRpZmZlcmVudCBzZXRzIG9mIHJlZmxlY3RlZFxuICAgICBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiAtIGF0dHJpYnV0ZXMgY2FuIGFsc28gYmUgcXVlcmllZCBhbmQgc2V0IHRocm91Z2ggdGhlIC5hdHRyaWJ1dGVzXG4gICAqICAgcHJvcGVydHkgb2YgYW4gZWxlbWVudC4gIFRoaXMgcHJvcGVydHkgYmVoYXZlcyBsaWtlIGFuIGFycmF5IG9mXG4gICAqICAgQXR0ciBvYmplY3RzLiAgVGhlIHZhbHVlIHByb3BlcnR5IG9mIGVhY2ggQXR0ciBpcyB3cml0ZWFibGUsIHNvXG4gICAqICAgdGhpcyBpcyBhIHRoaXJkIHdheSB0byByZWFkIGFuZCB3cml0ZSBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiAtIGZvciBlZmZpY2llbmN5LCB3ZSByZWFsbHkgd2FudCB0byBzdG9yZSBhdHRyaWJ1dGVzIGluIHNvbWUga2luZFxuICAgKiAgIG9mIG5hbWUtPmF0dHIgbWFwLiAgQnV0IHRoZSBhdHRyaWJ1dGVzW10gYXJyYXkgaXMgYW4gYXJyYXksIG5vdCBhXG4gICAqICAgbWFwLCB3aGljaCBpcyBraW5kIG9mIHVubmF0dXJhbC5cbiAgICpcbiAgICogLSBXaGVuIHVzaW5nIG5hbWVzcGFjZXMgYW5kIHByZWZpeGVzLCBhbmQgbWl4aW5nIHRoZSBOUyBtZXRob2RzXG4gICAqICAgd2l0aCB0aGUgbm9uLU5TIG1ldGhvZHMsIGl0IGlzIGFwcGFyZW50bHkgYWN0dWFsbHkgcG9zc2libGUgZm9yXG4gICAqICAgYW4gYXR0cmlidXRlc1tdIGFycmF5IHRvIGhhdmUgbW9yZSB0aGFuIG9uZSBhdHRyaWJ1dGUgd2l0aCB0aGVcbiAgICogICBzYW1lIHF1YWxpZmllZCBuYW1lLiAgQW5kIGNlcnRhaW4gbWV0aG9kcyBtdXN0IG9wZXJhdGUgb24gb25seVxuICAgKiAgIHRoZSBmaXJzdCBhdHRyaWJ1dGUgd2l0aCBzdWNoIGEgbmFtZS4gIFNvIGZvciB0aGVzZSBtZXRob2RzLCBhblxuICAgKiAgIGluZWZmaWNpZW50IGFycmF5LWxpa2UgZGF0YSBzdHJ1Y3R1cmUgd291bGQgYmUgZWFzaWVyIHRvXG4gICAqICAgaW1wbGVtZW50LlxuICAgKlxuICAgKiAtIFRoZSBhdHRyaWJ1dGVzW10gYXJyYXkgaXMgbGl2ZSwgbm90IGEgc25hcHNob3QsIHNvIGNoYW5nZXMgdG8gdGhlXG4gICAqICAgYXR0cmlidXRlcyBtdXN0IGJlIGltbWVkaWF0ZWx5IHZpc2libGUgdGhyb3VnaCBleGlzdGluZyBhcnJheXMuXG4gICAqXG4gICAqIC0gV2hlbiBhdHRyaWJ1dGVzIGFyZSBxdWVyaWVkIGFuZCBzZXQgdGhyb3VnaCBJREwgcHJvcGVydGllc1xuICAgKiAgIChpbnN0ZWFkIG9mIHRoZSBnZXQvc2V0QXR0cmlidXRlcygpIG1ldGhvZCBvciB0aGUgYXR0cmlidXRlc1tdXG4gICAqICAgYXJyYXkpIHRoZXkgbWF5IGJlIHN1YmplY3QgdG8gdHlwZSBjb252ZXJzaW9ucywgVVJMXG4gICAqICAgbm9ybWFsaXphdGlvbiwgZXRjLiwgc28gc29tZSBleHRyYSBwcm9jZXNzaW5nIGlzIHJlcXVpcmVkIGluIHRoYXRcbiAgICogICBjYXNlLlxuICAgKlxuICAgKiAtIEJ1dCBhY2Nlc3MgdGhyb3VnaCBJREwgcHJvcGVydGllcyBpcyBwcm9iYWJseSB0aGUgbW9zdCBjb21tb25cbiAgICogICBjYXNlLCBzbyB3ZSdkIGxpa2UgdGhhdCB0byBiZSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICAgKlxuICAgKiAtIFdlIGNhbid0IGp1c3Qgc3RvcmUgYXR0cmlidXRlIHZhbHVlcyBpbiB0aGVpciBwYXJzZWQgaWRsIGZvcm0sXG4gICAqICAgYmVjYXVzZSBzZXRBdHRyaWJ1dGUoKSBoYXMgdG8gcmV0dXJuIHdoYXRldmVyIHN0cmluZyBpcyBwYXNzZWQgdG9cbiAgICogICBnZXRBdHRyaWJ1dGUgZXZlbiBpZiBpdCBpcyBub3QgYSBsZWdhbCwgcGFyc2VhYmxlIHZhbHVlLiBTb1xuICAgKiAgIGF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBzdG9yZWQgaW4gdW5wYXJzZWQgc3RyaW5nIGZvcm0uXG4gICAqXG4gICAqIC0gV2UgbmVlZCB0byBiZSBhYmxlIHRvIHNlbmQgY2hhbmdlIG5vdGlmaWNhdGlvbnMgb3IgbXV0YXRpb25cbiAgICogICBldmVudHMgb2Ygc29tZSBzb3J0IHRvIHRoZSByZW5kZXJlciB3aGVuZXZlciBhbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICogICBjaGFuZ2VzLCByZWdhcmRsZXNzIG9mIHRoZSB3YXkgaW4gd2hpY2ggaXQgY2hhbmdlcy5cbiAgICpcbiAgICogLSBTb21lIGF0dHJpYnV0ZXMsIHN1Y2ggYXMgaWQgYW5kIGNsYXNzIGFmZmVjdCBvdGhlciBwYXJ0cyBvZiB0aGVcbiAgICogICBET00gQVBJLCBsaWtlIGdldEVsZW1lbnRCeUlkIGFuZCBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGFuZCBzb1xuICAgKiAgIGZvciBlZmZpY2llbmN5LCB3ZSBuZWVkIHRvIHNwZWNpYWxseSB0cmFjayBjaGFuZ2VzIHRvIHRoZXNlXG4gICAqICAgc3BlY2lhbCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiAtIFNvbWUgYXR0cmlidXRlcyBsaWtlIGNsYXNzIGhhdmUgZGlmZmVyZW50IG5hbWVzIChjbGFzc05hbWUpIHdoZW5cbiAgICogICByZWZsZWN0ZWQuXG4gICAqXG4gICAqIC0gQXR0cmlidXRlcyB3aG9zZSBuYW1lcyBiZWdpbiB3aXRoIHRoZSBzdHJpbmcgJ2RhdGEtJyBhcmUgdHJlYXRlZFxuICAgICBzcGVjaWFsbHkuXG4gICAqXG4gICAqIC0gUmVmbGVjdGVkIGF0dHJpYnV0ZXMgdGhhdCBoYXZlIGEgYm9vbGVhbiB0eXBlIGluIElETCBoYXZlIHNwZWNpYWxcbiAgICogICBiZWhhdmlvcjogc2V0dGluZyB0aGVtIHRvIGZhbHNlIChpbiBJREwpIGlzIHRoZSBzYW1lIGFzIHJlbW92aW5nXG4gICAqICAgdGhlbSB3aXRoIHJlbW92ZUF0dHJpYnV0ZSgpXG4gICAqXG4gICAqIC0gbnVtZXJpYyBhdHRyaWJ1dGVzIChsaWtlIEhUTUxFbGVtZW50LnRhYkluZGV4KSBjYW4gaGF2ZSBkZWZhdWx0XG4gICAqICAgdmFsdWVzIHRoYXQgbXVzdCBiZSByZXR1cm5lZCBieSB0aGUgaWRsIGdldHRlciBldmVuIGlmIHRoZVxuICAgKiAgIGNvbnRlbnQgYXR0cmlidXRlIGRvZXMgbm90IGV4aXN0LiAoVGhlIGRlZmF1bHQgdGFiSW5kZXggdmFsdWVcbiAgICogICBhY3R1YWxseSB2YXJpZXMgYmFzZWQgb24gdGhlIHR5cGUgb2YgdGhlIGVsZW1lbnQsIHNvIHRoYXQgaXMgYVxuICAgKiAgIHRyaWNreSBvbmUpLlxuICAgKlxuICAgKiBTZWVcbiAgICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdXJscy5odG1sI3JlZmxlY3RcbiAgICogZm9yIHJ1bGVzIG9uIGhvdyBhdHRyaWJ1dGVzIGFyZSByZWZsZWN0ZWQuXG4gICAqXG4gICAqL1xuXG4gIGdldEF0dHJpYnV0ZTogeyB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKHFuYW1lKSB7XG4gICAgaWYgKHRoaXMuaXNIVE1MKSBxbmFtZSA9IHV0aWxzLnRvQVNDSUlMb3dlckNhc2UocW5hbWUpO1xuICAgIHZhciBhdHRyID0gdGhpcy5fYXR0cnNCeVFOYW1lW3FuYW1lXTtcbiAgICBpZiAoIWF0dHIpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cikpICAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lXG4gICAgICBhdHRyID0gYXR0clswXTsgICAgICAgICAvLyB1c2UgdGhlIGZpcnN0XG5cbiAgICByZXR1cm4gYXR0ci52YWx1ZTtcbiAgfX0sXG5cbiAgZ2V0QXR0cmlidXRlTlM6IHsgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZU5TKG5zLCBsbmFtZSkge1xuICAgIHZhciBhdHRyID0gdGhpcy5fYXR0cnNCeUxOYW1lWyhucyA9PT0gbnVsbCA/ICcnIDogbnMpICsgJ3wnICsgbG5hbWVdO1xuICAgIHJldHVybiBhdHRyID8gYXR0ci52YWx1ZSA6IG51bGw7XG4gIH19LFxuXG4gIGhhc0F0dHJpYnV0ZTogeyB2YWx1ZTogZnVuY3Rpb24gaGFzQXR0cmlidXRlKHFuYW1lKSB7XG4gICAgaWYgKHRoaXMuaXNIVE1MKSBxbmFtZSA9IHV0aWxzLnRvQVNDSUlMb3dlckNhc2UocW5hbWUpO1xuICAgIHJldHVybiB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdICE9PSB1bmRlZmluZWQ7XG4gIH19LFxuXG4gIGhhc0F0dHJpYnV0ZU5TOiB7IHZhbHVlOiBmdW5jdGlvbiBoYXNBdHRyaWJ1dGVOUyhucywgbG5hbWUpIHtcbiAgICB2YXIga2V5ID0gKG5zID09PSBudWxsID8gJycgOiBucykgKyAnfCcgKyBsbmFtZTtcbiAgICByZXR1cm4gdGhpcy5fYXR0cnNCeUxOYW1lW2tleV0gIT09IHVuZGVmaW5lZDtcbiAgfX0sXG5cbiAgLy8gU2V0IHRoZSBhdHRyaWJ1dGUgd2l0aG91dCBlcnJvciBjaGVja2luZy4gVGhlIHBhcnNlciB1c2VzIHRoaXMuXG4gIF9zZXRBdHRyaWJ1dGU6IHsgdmFsdWU6IGZ1bmN0aW9uIF9zZXRBdHRyaWJ1dGUocW5hbWUsIHZhbHVlKSB7XG4gICAgLy8gWFhYOiB0aGUgc3BlYyBzYXlzIHRoYXQgdGhpcyBuZXh0IHNlYXJjaCBzaG91bGQgYmUgZG9uZVxuICAgIC8vIG9uIHRoZSBsb2NhbCBuYW1lLCBidXQgSSB0aGluayB0aGF0IGlzIGFuIGVycm9yLlxuICAgIC8vIGVtYWlsIHBlbmRpbmcgb24gd3d3LWRvbSBhYm91dCBpdC5cbiAgICB2YXIgYXR0ciA9IHRoaXMuX2F0dHJzQnlRTmFtZVtxbmFtZV07XG4gICAgdmFyIGlzbmV3O1xuICAgIGlmICghYXR0cikge1xuICAgICAgYXR0ciA9IHRoaXMuX25ld2F0dHIocW5hbWUpO1xuICAgICAgaXNuZXcgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGF0dHIpKSBhdHRyID0gYXR0clswXTtcbiAgICB9XG5cbiAgICAvLyBOb3cgc2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgb24gdGhlIG5ldyBvciBleGlzdGluZyBBdHRyIG9iamVjdC5cbiAgICAvLyBUaGUgQXR0ci52YWx1ZSBzZXR0ZXIgbWV0aG9kIGhhbmRsZXMgbXV0YXRpb24gZXZlbnRzLCBldGMuXG4gICAgYXR0ci52YWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLl9hdHRyaWJ1dGVzKSB0aGlzLl9hdHRyaWJ1dGVzW3FuYW1lXSA9IGF0dHI7XG4gICAgaWYgKGlzbmV3ICYmIHRoaXMuX25ld2F0dHJob29rKSB0aGlzLl9uZXdhdHRyaG9vayhxbmFtZSwgdmFsdWUpO1xuICB9fSxcblxuICAvLyBDaGVjayBmb3IgZXJyb3JzLCBhbmQgdGhlbiBzZXQgdGhlIGF0dHJpYnV0ZVxuICBzZXRBdHRyaWJ1dGU6IHsgdmFsdWU6IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZShxbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoIXhtbC5pc1ZhbGlkTmFtZShxbmFtZSkpIHV0aWxzLkludmFsaWRDaGFyYWN0ZXJFcnJvcigpO1xuICAgIGlmICh0aGlzLmlzSFRNTCkgcW5hbWUgPSB1dGlscy50b0FTQ0lJTG93ZXJDYXNlKHFuYW1lKTtcbiAgICBpZiAocW5hbWUuc3Vic3RyaW5nKDAsIDUpID09PSAneG1sbnMnKSB1dGlscy5OYW1lc3BhY2VFcnJvcigpO1xuICAgIHRoaXMuX3NldEF0dHJpYnV0ZShxbmFtZSwgU3RyaW5nKHZhbHVlKSk7XG4gIH19LFxuXG5cbiAgLy8gVGhlIHZlcnNpb24gd2l0aCBubyBlcnJvciBjaGVja2luZyB1c2VkIGJ5IHRoZSBwYXJzZXJcbiAgX3NldEF0dHJpYnV0ZU5TOiB7IHZhbHVlOiBmdW5jdGlvbiBfc2V0QXR0cmlidXRlTlMobnMsIHFuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwb3MgPSBxbmFtZS5pbmRleE9mKCc6JyksIHByZWZpeCwgbG5hbWU7XG4gICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgIHByZWZpeCA9IG51bGw7XG4gICAgICBsbmFtZSA9IHFuYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHByZWZpeCA9IHFuYW1lLnN1YnN0cmluZygwLCBwb3MpO1xuICAgICAgbG5hbWUgPSBxbmFtZS5zdWJzdHJpbmcocG9zKzEpO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSAobnMgPT09IG51bGwgPyAnJyA6IG5zKSArICd8JyArIGxuYW1lO1xuICAgIGlmIChucyA9PT0gJycpIG5zID0gbnVsbDtcblxuICAgIHZhciBhdHRyID0gdGhpcy5fYXR0cnNCeUxOYW1lW2tleV07XG4gICAgdmFyIGlzbmV3O1xuICAgIGlmICghYXR0cikge1xuICAgICAgYXR0ciA9IG5ldyBBdHRyKHRoaXMsIGxuYW1lLCBwcmVmaXgsIG5zKTtcbiAgICAgIGlzbmV3ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2F0dHJzQnlMTmFtZVtrZXldID0gYXR0cjtcbiAgICAgIHRoaXMuX2F0dHJLZXlzLnB1c2goa2V5KTtcblxuICAgICAgLy8gV2UgYWxzbyBoYXZlIHRvIG1ha2UgdGhlIGF0dHIgc2VhcmNoYWJsZSBieSBxbmFtZS5cbiAgICAgIC8vIEJ1dCB3ZSBoYXZlIHRvIGJlIGNhcmVmdWwgYmVjYXVzZSB0aGVyZSBtYXkgYWxyZWFkeVxuICAgICAgLy8gYmUgYW4gYXR0ciB3aXRoIHRoaXMgcW5hbWUuXG4gICAgICB0aGlzLl9hZGRRTmFtZShhdHRyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBDYWxsaW5nIHNldEF0dHJpYnV0ZU5TKCkgY2FuIGNoYW5nZSB0aGUgcHJlZml4IG9mIGFuXG4gICAgICAvLyBleGlzdGluZyBhdHRyaWJ1dGUhXG4gICAgICBpZiAoYXR0ci5wcmVmaXggIT09IHByZWZpeCkge1xuICAgICAgICAvLyBVbmJpbmQgdGhlIG9sZCBxbmFtZVxuICAgICAgICB0aGlzLl9yZW1vdmVRTmFtZShhdHRyKTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBwcmVmaXhcbiAgICAgICAgYXR0ci5wcmVmaXggPSBwcmVmaXg7XG4gICAgICAgIC8vIEJpbmQgdGhlIG5ldyBxbmFtZVxuICAgICAgICB0aGlzLl9hZGRRTmFtZShhdHRyKTtcblxuICAgICAgfVxuXG4gICAgfVxuICAgIGF0dHIudmFsdWUgPSB2YWx1ZTsgLy8gQXV0b21hdGljYWxseSBzZW5kcyBtdXRhdGlvbiBldmVudFxuICAgIGlmIChpc25ldyAmJiB0aGlzLl9uZXdhdHRyaG9vaykgdGhpcy5fbmV3YXR0cmhvb2socW5hbWUsIHZhbHVlKTtcbiAgfX0sXG5cbiAgLy8gRG8gZXJyb3IgY2hlY2tpbmcgdGhlbiBjYWxsIF9zZXRBdHRyaWJ1dGVOU1xuICBzZXRBdHRyaWJ1dGVOUzogeyB2YWx1ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlTlMobnMsIHFuYW1lLCB2YWx1ZSkge1xuICAgIGlmICgheG1sLmlzVmFsaWROYW1lKHFuYW1lKSkgdXRpbHMuSW52YWxpZENoYXJhY3RlckVycm9yKCk7XG4gICAgaWYgKCF4bWwuaXNWYWxpZFFOYW1lKHFuYW1lKSkgdXRpbHMuTmFtZXNwYWNlRXJyb3IoKTtcblxuICAgIHZhciBwb3MgPSBxbmFtZS5pbmRleE9mKCc6Jyk7XG4gICAgdmFyIHByZWZpeCA9IChwb3MgPT09IC0xKSA/IG51bGwgOiBxbmFtZS5zdWJzdHJpbmcoMCwgcG9zKTtcbiAgICBpZiAobnMgPT09ICcnKSBucyA9IG51bGw7XG5cbiAgICBpZiAoKHByZWZpeCAhPT0gbnVsbCAmJiBucyA9PT0gbnVsbCkgfHxcbiAgICAgIChwcmVmaXggPT09ICd4bWwnICYmIG5zICE9PSBOQU1FU1BBQ0UuWE1MKSB8fFxuICAgICAgKChxbmFtZSA9PT0gJ3htbG5zJyB8fCBwcmVmaXggPT09ICd4bWxucycpICYmXG4gICAgICAgKG5zICE9PSBOQU1FU1BBQ0UuWE1MTlMpKSB8fFxuICAgICAgKG5zID09PSBOQU1FU1BBQ0UuWE1MTlMgJiZcbiAgICAgICAhKHFuYW1lID09PSAneG1sbnMnIHx8IHByZWZpeCA9PT0gJ3htbG5zJykpKVxuICAgICAgdXRpbHMuTmFtZXNwYWNlRXJyb3IoKTtcblxuICAgIHRoaXMuX3NldEF0dHJpYnV0ZU5TKG5zLCBxbmFtZSwgU3RyaW5nKHZhbHVlKSk7XG4gIH19LFxuXG4gIHJlbW92ZUF0dHJpYnV0ZTogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKHFuYW1lKSB7XG4gICAgaWYgKHRoaXMuaXNIVE1MKSBxbmFtZSA9IHV0aWxzLnRvQVNDSUlMb3dlckNhc2UocW5hbWUpO1xuXG4gICAgdmFyIGF0dHIgPSB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdO1xuICAgIGlmICghYXR0cikgcmV0dXJuO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBtYXRjaCBmb3IgdGhpcyBxbmFtZVxuICAgIC8vIHNvIGRvbid0IGRlbGV0ZSB0aGUgcW5hbWUgbWFwcGluZywganVzdCByZW1vdmUgdGhlIGZpcnN0XG4gICAgLy8gZWxlbWVudCBmcm9tIGl0LlxuICAgIGlmIChBcnJheS5pc0FycmF5KGF0dHIpKSB7XG4gICAgICBpZiAoYXR0ci5sZW5ndGggPiAyKSB7XG4gICAgICAgIGF0dHIgPSBhdHRyLnNoaWZ0KCk7ICAvLyByZW1vdmUgaXQgZnJvbSB0aGUgYXJyYXlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdID0gYXR0clsxXTtcbiAgICAgICAgYXR0ciA9IGF0dHJbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gb25seSBhIHNpbmdsZSBtYXRjaCwgc28gcmVtb3ZlIHRoZSBxbmFtZSBtYXBwaW5nXG4gICAgICB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBucyA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgIC8vIE5vdyBhdHRyIGlzIHRoZSByZW1vdmVkIGF0dHJpYnV0ZS4gIEZpZ3VyZSBvdXQgaXRzXG4gICAgLy8gbnMrbG5hbWUga2V5IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgb3RoZXIgbWFwcGluZyBhcyB3ZWxsLlxuICAgIHZhciBrZXkgPSAobnMgPT09IG51bGwgPyAnJyA6IG5zKSArICd8JyArIGF0dHIubG9jYWxOYW1lO1xuICAgIHRoaXMuX2F0dHJzQnlMTmFtZVtrZXldID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGkgPSB0aGlzLl9hdHRyS2V5cy5pbmRleE9mKGtleSk7XG4gICAgdGhpcy5fYXR0cktleXMuc3BsaWNlKGksIDEpO1xuXG4gICAgaWYgKHRoaXMuX2F0dHJpYnV0ZXMpXG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzW3FuYW1lXSA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9uY2hhbmdlIGhhbmRsZXIgZm9yIHRoZSBhdHRyaWJ1dGVcbiAgICBpZiAoYXR0ci5vbmNoYW5nZSlcbiAgICAgIGF0dHIub25jaGFuZ2UodGhpcywgYXR0ci5sb2NhbE5hbWUsIGF0dHIudmFsdWUsIG51bGwpO1xuXG4gICAgLy8gTXV0YXRpb24gZXZlbnRcbiAgICBpZiAodGhpcy5yb290ZWQpIHRoaXMub3duZXJEb2N1bWVudC5tdXRhdGVSZW1vdmVBdHRyKGF0dHIpO1xuICB9fSxcblxuICByZW1vdmVBdHRyaWJ1dGVOUzogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlTlMobnMsIGxuYW1lKSB7XG4gICAgdmFyIGtleSA9IChucyA9PT0gbnVsbCA/ICcnIDogbnMpICsgJ3wnICsgbG5hbWU7XG4gICAgdmFyIGF0dHIgPSB0aGlzLl9hdHRyc0J5TE5hbWVba2V5XTtcbiAgICBpZiAoIWF0dHIpIHJldHVybjtcblxuICAgIHRoaXMuX2F0dHJzQnlMTmFtZVtrZXldID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGkgPSB0aGlzLl9hdHRyS2V5cy5pbmRleE9mKGtleSk7XG4gICAgdGhpcy5fYXR0cktleXMuc3BsaWNlKGksIDEpO1xuXG4gICAgLy8gTm93IGZpbmQgdGhlIHNhbWUgQXR0ciBvYmplY3QgaW4gdGhlIHFuYW1lIG1hcHBpbmcgYW5kIHJlbW92ZSBpdFxuICAgIC8vIEJ1dCBiZSBjYXJlZnVsIGJlY2F1c2UgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgbWF0Y2guXG4gICAgdGhpcy5fcmVtb3ZlUU5hbWUoYXR0cik7XG5cbiAgICAvLyBPbmNoYW5nZSBoYW5kbGVyIGZvciB0aGUgYXR0cmlidXRlXG4gICAgaWYgKGF0dHIub25jaGFuZ2UpXG4gICAgICBhdHRyLm9uY2hhbmdlKHRoaXMsIGF0dHIubG9jYWxOYW1lLCBhdHRyLnZhbHVlLCBudWxsKTtcbiAgICAvLyBNdXRhdGlvbiBldmVudFxuICAgIGlmICh0aGlzLnJvb3RlZCkgdGhpcy5vd25lckRvY3VtZW50Lm11dGF0ZVJlbW92ZUF0dHIoYXR0cik7XG4gIH19LFxuXG4gIC8vIFRoaXMgJ3JhdycgdmVyc2lvbiBvZiBnZXRBdHRyaWJ1dGUgaXMgdXNlZCBieSB0aGUgZ2V0dGVyIGZ1bmN0aW9uc1xuICAvLyBvZiByZWZsZWN0ZWQgYXR0cmlidXRlcy4gSXQgc2tpcHMgc29tZSBlcnJvciBjaGVja2luZyBhbmRcbiAgLy8gbmFtZXNwYWNlIHN0ZXBzXG4gIF9nZXRhdHRyOiB7IHZhbHVlOiBmdW5jdGlvbiBfZ2V0YXR0cihxbmFtZSkge1xuICAgIC8vIEFzc3VtZSB0aGF0IHFuYW1lIGlzIGFscmVhZHkgbG93ZXJjYXNlZCwgc28gZG9uJ3QgZG8gaXQgaGVyZS5cbiAgICAvLyBBbHNvIGRvbid0IGNoZWNrIHdoZXRoZXIgYXR0ciBpcyBhbiBhcnJheTogYSBxbmFtZSB3aXRoIG5vXG4gICAgLy8gcHJlZml4IHdpbGwgbmV2ZXIgaGF2ZSB0d28gbWF0Y2hpbmcgQXR0ciBvYmplY3RzIChiZWNhdXNlXG4gICAgLy8gc2V0QXR0cmlidXRlTlMgZG9lc24ndCBhbGxvdyBhIG5vbi1udWxsIG5hbWVzcGFjZSB3aXRoIGFcbiAgICAvLyBudWxsIHByZWZpeC5cbiAgICB2YXIgYXR0ciA9IHRoaXMuX2F0dHJzQnlRTmFtZVtxbmFtZV07XG4gICAgcmV0dXJuIGF0dHIgPyBhdHRyLnZhbHVlIDogbnVsbDtcbiAgfX0sXG5cbiAgLy8gVGhlIHJhdyB2ZXJzaW9uIG9mIHNldEF0dHJpYnV0ZSBmb3IgcmVmbGVjdGVkIGlkbCBhdHRyaWJ1dGVzLlxuICBfc2V0YXR0cjogeyB2YWx1ZTogZnVuY3Rpb24gX3NldGF0dHIocW5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGF0dHIgPSB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdO1xuICAgIHZhciBpc25ldztcbiAgICBpZiAoIWF0dHIpIHtcbiAgICAgIGF0dHIgPSB0aGlzLl9uZXdhdHRyKHFuYW1lKTtcbiAgICAgIGlzbmV3ID0gdHJ1ZTtcbiAgICB9XG4gICAgYXR0ci52YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2F0dHJpYnV0ZXMpIHRoaXMuX2F0dHJpYnV0ZXNbcW5hbWVdID0gYXR0cjtcbiAgICBpZiAoaXNuZXcgJiYgdGhpcy5fbmV3YXR0cmhvb2spIHRoaXMuX25ld2F0dHJob29rKHFuYW1lLCB2YWx1ZSk7XG4gIH19LFxuXG4gIC8vIENyZWF0ZSBhIG5ldyBBdHRyIG9iamVjdCwgaW5zZXJ0IGl0LCBhbmQgcmV0dXJuIGl0LlxuICAvLyBVc2VkIGJ5IHNldEF0dHJpYnV0ZSgpIGFuZCBieSBzZXQoKVxuICBfbmV3YXR0cjogeyB2YWx1ZTogZnVuY3Rpb24gX25ld2F0dHIocW5hbWUpIHtcbiAgICB2YXIgYXR0ciA9IG5ldyBBdHRyKHRoaXMsIHFuYW1lLCBudWxsLCBudWxsKTtcbiAgICB2YXIga2V5ID0gJ3wnICsgcW5hbWU7XG4gICAgdGhpcy5fYXR0cnNCeVFOYW1lW3FuYW1lXSA9IGF0dHI7XG4gICAgdGhpcy5fYXR0cnNCeUxOYW1lW2tleV0gPSBhdHRyO1xuICAgIHRoaXMuX2F0dHJLZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4gYXR0cjtcbiAgfX0sXG5cbiAgLy8gQWRkIGEgcW5hbWUtPkF0dHIgbWFwcGluZyB0byB0aGUgX2F0dHJzQnlRTmFtZSBvYmplY3QsIHRha2luZyBpbnRvXG4gIC8vIGFjY291bnQgdGhhdCB0aGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBhdHRyIG9iamVjdCB3aXRoIHRoZVxuICAvLyBzYW1lIHFuYW1lXG4gIF9hZGRRTmFtZTogeyB2YWx1ZTogZnVuY3Rpb24oYXR0cikge1xuICAgIHZhciBxbmFtZSA9IGF0dHIubmFtZTtcbiAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdO1xuICAgIGlmICghZXhpc3RpbmcpIHtcbiAgICAgIHRoaXMuX2F0dHJzQnlRTmFtZVtxbmFtZV0gPSBhdHRyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV4aXN0aW5nKSkge1xuICAgICAgZXhpc3RpbmcucHVzaChhdHRyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9hdHRyc0J5UU5hbWVbcW5hbWVdID0gW2V4aXN0aW5nLCBhdHRyXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2F0dHJpYnV0ZXMpIHRoaXMuX2F0dHJpYnV0ZXNbcW5hbWVdID0gYXR0cjtcbiAgfX0sXG5cbiAgLy8gUmVtb3ZlIGEgcW5hbWUtPkF0dHIgbWFwcGluZyB0byB0aGUgX2F0dHJzQnlRTmFtZSBvYmplY3QsIHRha2luZyBpbnRvXG4gIC8vIGFjY291bnQgdGhhdCB0aGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBhdHRyIG9iamVjdCB3aXRoIHRoZVxuICAvLyBzYW1lIHFuYW1lXG4gIF9yZW1vdmVRTmFtZTogeyB2YWx1ZTogZnVuY3Rpb24oYXR0cikge1xuICAgIHZhciBxbmFtZSA9IGF0dHIubmFtZTtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fYXR0cnNCeVFOYW1lW3FuYW1lXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgIHZhciBpZHggPSB0YXJnZXQuaW5kZXhPZihhdHRyKTtcbiAgICAgIHV0aWxzLmFzc2VydChpZHggIT09IC0xKTsgLy8gSXQgbXVzdCBiZSBoZXJlIHNvbWV3aGVyZVxuICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5fYXR0cnNCeVFOYW1lW3FuYW1lXSA9IHRhcmdldFsxLWlkeF07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHV0aWxzLmFzc2VydCh0YXJnZXQgPT09IGF0dHIpOyAgLy8gSWYgb25seSBvbmUsIGl0IG11c3QgbWF0Y2hcbiAgICAgIHRoaXMuX2F0dHJzQnlRTmFtZVtxbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9fSxcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBhdHRyaWJ1dGVzXG4gIF9udW1hdHRyczogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fYXR0cktleXMubGVuZ3RoOyB9fSxcbiAgLy8gUmV0dXJuIHRoZSBudGggQXR0ciBvYmplY3RcbiAgX2F0dHI6IHsgdmFsdWU6IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gdGhpcy5fYXR0cnNCeUxOYW1lW3RoaXMuX2F0dHJLZXlzW25dXTtcbiAgfX0sXG5cbiAgLy8gRGVmaW5lIGdldHRlcnMgYW5kIHNldHRlcnMgZm9yIGFuICdpZCcgcHJvcGVydHkgdGhhdCByZWZsZWN0c1xuICAvLyB0aGUgY29udGVudCBhdHRyaWJ1dGUgJ2lkJy5cbiAgaWQ6IGF0dHJpYnV0ZXMucHJvcGVydHkoe25hbWU6ICdpZCd9KSxcblxuICAvLyBEZWZpbmUgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgYSAnY2xhc3NOYW1lJyBwcm9wZXJ0eSB0aGF0IHJlZmxlY3RzXG4gIC8vIHRoZSBjb250ZW50IGF0dHJpYnV0ZSAnY2xhc3MnLlxuICBjbGFzc05hbWU6IGF0dHJpYnV0ZXMucHJvcGVydHkoe25hbWU6ICdjbGFzcyd9KSxcblxuICBjbGFzc0xpc3Q6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHRoaXMuX2NsYXNzTGlzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzTGlzdDtcbiAgICB9XG4gICAgdmFyIGR0bGlzdCA9IG5ldyBET01Ub2tlbkxpc3QoXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2xhc3NOYW1lIHx8IFwiXCI7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24odikge1xuICAgICAgICBzZWxmLmNsYXNzTmFtZSA9IHY7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLl9jbGFzc0xpc3QgPSBkdGxpc3Q7XG4gICAgcmV0dXJuIGR0bGlzdDtcbiAgfX0sXG5cbiAgbWF0Y2hlczogeyB2YWx1ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0Lm1hdGNoZXModGhpcywgc2VsZWN0b3IpO1xuICB9fSxcblxuICBjbG9zZXN0OiB7IHZhbHVlOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgd2hpbGUgKGVsLm1hdGNoZXMgJiYgIWVsLm1hdGNoZXMoc2VsZWN0b3IpKSBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIGVsLm1hdGNoZXMgPyBlbCA6IG51bGw7XG4gIH19LFxuXG4gIHF1ZXJ5U2VsZWN0b3I6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdChzZWxlY3RvciwgdGhpcylbMF07XG4gIH19LFxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIG5vZGVzID0gc2VsZWN0KHNlbGVjdG9yLCB0aGlzKTtcbiAgICByZXR1cm4gbm9kZXMuaXRlbSA/IG5vZGVzIDogbmV3IE5vZGVMaXN0KG5vZGVzKTtcbiAgfX1cblxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsZW1lbnQucHJvdG90eXBlLCBDaGlsZE5vZGUpO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRWxlbWVudC5wcm90b3R5cGUsIE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZSk7XG5cbi8vIFJlZ2lzdGVyIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRoZSBpZCBhdHRyaWJ1dGVcbmF0dHJpYnV0ZXMucmVnaXN0ZXJDaGFuZ2VIYW5kbGVyKEVsZW1lbnQsICdpZCcsXG4gZnVuY3Rpb24oZWxlbWVudCwgbG5hbWUsIG9sZHZhbCwgbmV3dmFsKSB7XG4gICBpZiAoZWxlbWVudC5yb290ZWQpIHtcbiAgICAgaWYgKG9sZHZhbCkge1xuICAgICAgIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWxJZChvbGR2YWwsIGVsZW1lbnQpO1xuICAgICB9XG4gICAgIGlmIChuZXd2YWwpIHtcbiAgICAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWRkSWQobmV3dmFsLCBlbGVtZW50KTtcbiAgICAgfVxuICAgfVxuIH1cbik7XG5cblxuLy8gVGhlIEF0dHIgY2xhc3MgcmVwcmVzZW50cyBhIHNpbmdsZSBhdHRyaWJ1dGUuICBUaGUgdmFsdWVzIGluXG4vLyBfYXR0cnNCeVFOYW1lIGFuZCBfYXR0cnNCeUxOYW1lIGFyZSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy5cbmZ1bmN0aW9uIEF0dHIoZWx0LCBsbmFtZSwgcHJlZml4LCBuYW1lc3BhY2UpIHtcbiAgLy8gQWx3YXlzIHJlbWVtYmVyIHdoYXQgZWxlbWVudCB3ZSdyZSBhc3NvY2lhdGVkIHdpdGguXG4gIC8vIFdlIG5lZWQgdGhpcyB0byBwcm9wZXJ0eSBoYW5kbGUgbXV0YXRpb25zXG4gIHRoaXMub3duZXJFbGVtZW50ID0gZWx0O1xuXG4gIGlmICghbmFtZXNwYWNlICYmICFwcmVmaXggJiYgZWx0Ll9hdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyc1tsbmFtZV0pXG4gICAgdGhpcy5vbmNoYW5nZSA9IGVsdC5fYXR0cmlidXRlQ2hhbmdlSGFuZGxlcnNbbG5hbWVdO1xuXG4gIC8vIGxvY2FsTmFtZSBhbmQgbmFtZXNwYWNlIGFyZSBjb25zdGFudCBmb3IgYW55IGF0dHIgb2JqZWN0LlxuICAvLyBCdXQgdmFsdWUgbWF5IGNoYW5nZS4gIEFuZCBzbyBjYW4gcHJlZml4LCBhbmQgc28sIHRoZXJlZm9yZSBjYW4gbmFtZS5cbiAgdGhpcy5sb2NhbE5hbWUgPSBsbmFtZTtcbiAgdGhpcy5wcmVmaXggPSAocHJlZml4PT09bnVsbCB8fCBwcmVmaXg9PT0nJykgPyBudWxsIDogKCcnICsgcHJlZml4KTtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSAobmFtZXNwYWNlPT09bnVsbCB8fCBuYW1lc3BhY2U9PT0nJykgPyBudWxsIDogKCcnICsgbmFtZXNwYWNlKTtcbn1cblxuQXR0ci5wcm90b3R5cGUgPSB7XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnByZWZpeCA/IHRoaXMucHJlZml4ICsgJzonICsgdGhpcy5sb2NhbE5hbWUgOiB0aGlzLmxvY2FsTmFtZTtcbiAgfSxcblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfSxcblxuICBnZXQgc3BlY2lmaWVkKCkge1xuICAgIC8vIERlcHJlY2F0ZWRcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICB2YXIgb2xkdmFsID0gdGhpcy5kYXRhO1xuICAgIHZhbHVlID0gKHZhbHVlID09PSB1bmRlZmluZWQpID8gJycgOiB2YWx1ZSArICcnO1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkdmFsKSByZXR1cm47XG5cbiAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcblxuICAgIC8vIFJ1biB0aGUgb25jaGFuZ2UgaG9vayBmb3IgdGhlIGF0dHJpYnV0ZVxuICAgIC8vIGlmIHRoZXJlIGlzIG9uZS5cbiAgICBpZiAodGhpcy5vbmNoYW5nZSlcbiAgICAgIHRoaXMub25jaGFuZ2UodGhpcy5vd25lckVsZW1lbnQsdGhpcy5sb2NhbE5hbWUsIG9sZHZhbCwgdmFsdWUpO1xuXG4gICAgLy8gR2VuZXJhdGUgYSBtdXRhdGlvbiBldmVudCBpZiB0aGUgZWxlbWVudCBpcyByb290ZWRcbiAgICBpZiAodGhpcy5vd25lckVsZW1lbnQucm9vdGVkKVxuICAgICAgdGhpcy5vd25lckVsZW1lbnQub3duZXJEb2N1bWVudC5tdXRhdGVBdHRyKHRoaXMsIG9sZHZhbCk7XG4gIH0sXG5cbiAgLy8gTGVnYWN5IGFsaWFzZXMgKHNlZSBnaCM3MCBhbmQgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtYXR0cilcbiAgZ2V0IG5vZGVOYW1lKCkgeyByZXR1cm4gdGhpcy5uYW1lOyB9LFxuICBnZXQgbm9kZVZhbHVlKCkgeyByZXR1cm4gdGhpcy52YWx1ZTsgfSxcbiAgZ2V0IHRleHRDb250ZW50KCkgeyByZXR1cm4gdGhpcy52YWx1ZTsgfSxcbiAgc2V0IG5vZGVWYWx1ZSh2KSB7IHRoaXMudmFsdWUgPSB2OyB9LFxuICBzZXQgdGV4dENvbnRlbnQodikgeyB0aGlzLnZhbHVlID0gdjsgfSxcbn07XG5cblxuLy8gVGhlIGF0dHJpYnV0ZXMgcHJvcGVydHkgb2YgYW4gRWxlbWVudCB3aWxsIGJlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4vLyBUaGlzIGNsYXNzIGlzIHJlYWxseSBqdXN0IGEgZHVtbXksIHRob3VnaC4gSXQgb25seSBkZWZpbmVzIGEgbGVuZ3RoXG4vLyBwcm9wZXJ0eSBhbmQgYW4gaXRlbSgpIG1ldGhvZC4gVGhlIEF0dHJBcnJheVByb3h5IHRoYXRcbi8vIGRlZmluZXMgdGhlIHB1YmxpYyBBUEkganVzdCB1c2VzIHRoZSBFbGVtZW50IG9iamVjdCBpdHNlbGYuXG5mdW5jdGlvbiBBdHRyaWJ1dGVzQXJyYXkoZWx0KSB7XG4gIHRoaXMuZWxlbWVudCA9IGVsdDtcbiAgZm9yICh2YXIgbmFtZSBpbiBlbHQuX2F0dHJzQnlRTmFtZSkge1xuICAgIHRoaXNbbmFtZV0gPSBlbHQuX2F0dHJzQnlRTmFtZVtuYW1lXTtcbiAgfVxufVxuQXR0cmlidXRlc0FycmF5LnByb3RvdHlwZSA9IHtcbiAgZ2V0IGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Ll9hdHRyS2V5cy5sZW5ndGg7XG4gIH0sXG4gIGl0ZW06IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Ll9hdHRyc0J5TE5hbWVbdGhpcy5lbGVtZW50Ll9hdHRyS2V5c1tuXV07XG4gIH1cbn07XG5cblxuLy8gVGhlIGNoaWxkcmVuIHByb3BlcnR5IG9mIGFuIEVsZW1lbnQgd2lsbCBiZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuLy8gSXQgZGVmaW5lcyBsZW5ndGgsIGl0ZW0oKSBhbmQgbmFtZWRJdGVtKCkgYW5kIHdpbGwgYmUgd3JhcHBlZCBieSBhblxuLy8gSFRNTENvbGxlY3Rpb24gd2hlbiBleHBvc2VkIHRocm91Z2ggdGhlIERPTS5cbmZ1bmN0aW9uIENoaWxkcmVuQ29sbGVjdGlvbihlKSB7XG4gIHRoaXMuZWxlbWVudCA9IGU7XG4gIHRoaXMudXBkYXRlQ2FjaGUoKTtcbn1cblxuQ2hpbGRyZW5Db2xsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgZ2V0IGxlbmd0aCgpIHtcbiAgICB0aGlzLnVwZGF0ZUNhY2hlKCk7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5CeU51bWJlci5sZW5ndGg7XG4gIH0sXG4gIGl0ZW06IGZ1bmN0aW9uIGl0ZW0obikge1xuICAgIHRoaXMudXBkYXRlQ2FjaGUoKTtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbkJ5TnVtYmVyW25dIHx8IG51bGw7XG4gIH0sXG5cbiAgbmFtZWRJdGVtOiBmdW5jdGlvbiBuYW1lZEl0ZW0obmFtZSkge1xuICAgIHRoaXMudXBkYXRlQ2FjaGUoKTtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbkJ5TmFtZVtuYW1lXSB8fCBudWxsO1xuICB9LFxuXG4gIC8vIFRoaXMgYXR0cmlidXRlIHJldHVybnMgdGhlIGVudGlyZSBuYW1lLT5lbGVtZW50IG1hcC5cbiAgLy8gSXQgaXMgbm90IHBhcnQgb2YgdGhlIEhUTUxDb2xsZWN0aW9uIEFQSSwgYnV0IHdlIG5lZWQgaXQgaW5cbiAgLy8gc3JjL0hUTUxDb2xsZWN0aW9uUHJveHlcbiAgZ2V0IG5hbWVkSXRlbXMoKSB7XG4gICAgdGhpcy51cGRhdGVDYWNoZSgpO1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuQnlOYW1lO1xuICB9LFxuXG4gIHVwZGF0ZUNhY2hlOiBmdW5jdGlvbiB1cGRhdGVDYWNoZSgpIHtcbiAgICB2YXIgbmFtZWRFbHRzID0gL14oYXxhcHBsZXR8YXJlYXxlbWJlZHxmb3JtfGZyYW1lfGZyYW1lc2V0fGlmcmFtZXxpbWd8b2JqZWN0KSQvO1xuICAgIGlmICh0aGlzLmxhc3RNb2RUaW1lICE9PSB0aGlzLmVsZW1lbnQubGFzdE1vZFRpbWUpIHtcbiAgICAgIHRoaXMubGFzdE1vZFRpbWUgPSB0aGlzLmVsZW1lbnQubGFzdE1vZFRpbWU7XG5cbiAgICAgIHZhciBuID0gdGhpcy5jaGlsZHJlbkJ5TnVtYmVyICYmIHRoaXMuY2hpbGRyZW5CeU51bWJlci5sZW5ndGggfHwgMDtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdGhpc1tpXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGlsZHJlbkJ5TnVtYmVyID0gW107XG4gICAgICB0aGlzLmNoaWxkcmVuQnlOYW1lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgZm9yKGkgPSAwLCBuID0gdGhpcy5lbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gdGhpcy5lbGVtZW50LmNoaWxkTm9kZXNbaV07XG4gICAgICAgIGlmIChjLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuXG4gICAgICAgICAgdGhpc1t0aGlzLmNoaWxkcmVuQnlOdW1iZXIubGVuZ3RoXSA9IGM7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbkJ5TnVtYmVyLnB1c2goYyk7XG5cbiAgICAgICAgICAvLyBYWFggQXJlIHRoZXJlIGFueSByZXF1aXJlbWVudHMgYWJvdXQgdGhlIG5hbWVzcGFjZVxuICAgICAgICAgIC8vIG9mIHRoZSBpZCBwcm9wZXJ0eT9cbiAgICAgICAgICB2YXIgaWQgPSBjLmdldEF0dHJpYnV0ZSgnaWQnKTtcblxuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGlkIHRoYXQgaXMgbm90IGFscmVhZHkgaW4gdXNlLi4uXG4gICAgICAgICAgaWYgKGlkICYmICF0aGlzLmNoaWxkcmVuQnlOYW1lW2lkXSlcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5CeU5hbWVbaWRdID0gYztcblxuICAgICAgICAgIC8vIEZvciBjZXJ0YWluIEhUTUwgZWxlbWVudHMgd2UgY2hlY2sgdGhlIG5hbWUgYXR0cmlidXRlXG4gICAgICAgICAgdmFyIG5hbWUgPSBjLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgICAgICAgIGlmIChuYW1lICYmXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBOQU1FU1BBQ0UuSFRNTCAmJlxuICAgICAgICAgICAgbmFtZWRFbHRzLnRlc3QodGhpcy5lbGVtZW50LmxvY2FsTmFtZSkgJiZcbiAgICAgICAgICAgICF0aGlzLmNoaWxkcmVuQnlOYW1lW25hbWVdKVxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbkJ5TmFtZVtpZF0gPSBjO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyBUaGVzZSBmdW5jdGlvbnMgcmV0dXJuIHByZWRpY2F0ZXMgZm9yIGZpbHRlcmluZyBlbGVtZW50cy5cbi8vIFRoZXkncmUgdXNlZCBieSB0aGUgRG9jdW1lbnQgYW5kIEVsZW1lbnQgY2xhc3NlcyBmb3IgbWV0aG9kcyBsaWtlXG4vLyBnZXRFbGVtZW50c0J5VGFnTmFtZSBhbmQgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZVxuXG5mdW5jdGlvbiBsb2NhbE5hbWVFbGVtZW50RmlsdGVyKGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7IHJldHVybiBlLmxvY2FsTmFtZSA9PT0gbG5hbWU7IH07XG59XG5cbmZ1bmN0aW9uIGh0bWxMb2NhbE5hbWVFbGVtZW50RmlsdGVyKGxuYW1lKSB7XG4gIHZhciBsY2xuYW1lID0gdXRpbHMudG9BU0NJSUxvd2VyQ2FzZShsbmFtZSk7XG4gIGlmIChsY2xuYW1lID09PSBsbmFtZSlcbiAgICByZXR1cm4gbG9jYWxOYW1lRWxlbWVudEZpbHRlcihsbmFtZSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gZS5pc0hUTUwgPyBlLmxvY2FsTmFtZSA9PT0gbGNsbmFtZSA6IGUubG9jYWxOYW1lID09PSBsbmFtZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmFtZXNwYWNlRWxlbWVudEZpbHRlcihucykge1xuICByZXR1cm4gZnVuY3Rpb24oZSkgeyByZXR1cm4gZS5uYW1lc3BhY2VVUkkgPT09IG5zOyB9O1xufVxuXG5mdW5jdGlvbiBuYW1lc3BhY2VMb2NhbE5hbWVFbGVtZW50RmlsdGVyKG5zLCBsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiBlLm5hbWVzcGFjZVVSSSA9PT0gbnMgJiYgZS5sb2NhbE5hbWUgPT09IGxuYW1lO1xuICB9O1xufVxuXG4vLyBYWFhcbi8vIE9wdGltaXplIHRoaXMgd2hlbiBJIGltcGxlbWVudCBjbGFzc0xpc3QuXG5mdW5jdGlvbiBjbGFzc05hbWVzRWxlbWVudEZpbHRlcihuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHZhciBjbGFzc0F0dHIgPSBlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICBpZiAoIWNsYXNzQXR0cikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBjbGFzc2VzID0gY2xhc3NBdHRyLnRyaW0oKS5zcGxpdCgvXFxzKy8pO1xuICAgIHJldHVybiBuYW1lcy5ldmVyeShmdW5jdGlvbihuKSB7XG4gICAgICByZXR1cm4gY2xhc3Nlcy5pbmRleE9mKG4pICE9PSAtMTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE5hbWVGaWx0ZXIobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiBlLmdldEF0dHJpYnV0ZSgnbmFtZScpID09PSBuYW1lO1xuICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvRWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRXZlbnQ7XG5cbkV2ZW50LkNBUFRVUklOR19QSEFTRSA9IDE7XG5FdmVudC5BVF9UQVJHRVQgPSAyO1xuRXZlbnQuQlVCQkxJTkdfUEhBU0UgPSAzO1xuXG5mdW5jdGlvbiBFdmVudCh0eXBlLCBkaWN0aW9uYXJ5KSB7XG4gIC8vIEluaXRpYWxpemUgYmFzaWMgZXZlbnQgcHJvcGVydGllc1xuICB0aGlzLnR5cGUgPSAnJztcbiAgdGhpcy50YXJnZXQgPSBudWxsO1xuICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICB0aGlzLmV2ZW50UGhhc2UgPSBFdmVudC5BVF9UQVJHRVQ7XG4gIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xuICB0aGlzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgdGhpcy5pc1RydXN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gIHRoaXMudGltZVN0YW1wID0gRGF0ZS5ub3coKTtcblxuICAvLyBJbml0aWFsaXplIGludGVybmFsIGZsYWdzXG4gIC8vIFhYWDogV291bGQgaXQgYmUgYmV0dGVyIHRvIGluaGVyaXQgdGhlc2UgZGVmYXVsdHMgZnJvbSB0aGUgcHJvdG90eXBlP1xuICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZTtcbiAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgdGhpcy5fZGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICAvLyBOb3cgaW5pdGlhbGl6ZSBiYXNlZCBvbiB0aGUgY29uc3RydWN0b3IgYXJndW1lbnRzIChpZiBhbnkpXG4gIGlmICh0eXBlKSB0aGlzLnR5cGUgPSB0eXBlO1xuICBpZiAoZGljdGlvbmFyeSkge1xuICAgIGZvcih2YXIgcCBpbiBkaWN0aW9uYXJ5KSB7XG4gICAgICB0aGlzW3BdID0gZGljdGlvbmFyeVtwXTtcbiAgICB9XG4gIH1cbn1cblxuRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShPYmplY3QucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBFdmVudCB9LFxuICBzdG9wUHJvcGFnYXRpb246IHsgdmFsdWU6IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuICB9fSxcblxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IHsgdmFsdWU6IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuICAgIHRoaXMuX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG4gIH19LFxuXG4gIHByZXZlbnREZWZhdWx0OiB7IHZhbHVlOiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxhYmxlKSB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICB9fSxcblxuICBpbml0RXZlbnQ6IHsgdmFsdWU6IGZ1bmN0aW9uIGluaXRFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLl9kaXNwYXRjaGluZykgcmV0dXJuO1xuXG4gICAgdGhpcy5fcHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgdGhpcy5pc1RydXN0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuYnViYmxlcyA9IGJ1YmJsZXM7XG4gICAgdGhpcy5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTtcbiAgfX0sXG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvRXZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvcmUvYnVuZGxlcy9jb3JlLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3Jcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IENoYXJhY3RlckRhdGE7XG5cbnZhciBMZWFmID0gcmVxdWlyZSgnLi9MZWFmJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgQ2hpbGROb2RlID0gcmVxdWlyZSgnLi9DaGlsZE5vZGUnKTtcbnZhciBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUgPSByZXF1aXJlKCcuL05vbkRvY3VtZW50VHlwZUNoaWxkTm9kZScpO1xuXG5mdW5jdGlvbiBDaGFyYWN0ZXJEYXRhKCkge1xufVxuXG5DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGVhZi5wcm90b3R5cGUsIHtcbiAgLy8gRE9NU3RyaW5nIHN1YnN0cmluZ0RhdGEodW5zaWduZWQgbG9uZyBvZmZzZXQsXG4gIC8vICAgICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBjb3VudCk7XG4gIC8vIFRoZSBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIG1ldGhvZCBtdXN0IHJ1biB0aGVzZSBzdGVwczpcbiAgLy9cbiAgLy8gICAgIElmIG9mZnNldCBpcyBncmVhdGVyIHRoYW4gdGhlIGNvbnRleHQgb2JqZWN0J3NcbiAgLy8gICAgIGxlbmd0aCwgdGhyb3cgYW4gSU5ERVhfU0laRV9FUlIgZXhjZXB0aW9uIGFuZFxuICAvLyAgICAgdGVybWluYXRlIHRoZXNlIHN0ZXBzLlxuICAvL1xuICAvLyAgICAgSWYgb2Zmc2V0K2NvdW50IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29udGV4dFxuICAvLyAgICAgb2JqZWN0J3MgbGVuZ3RoLCByZXR1cm4gYSBET01TdHJpbmcgd2hvc2UgdmFsdWUgaXNcbiAgLy8gICAgIHRoZSBVVEYtMTYgY29kZSB1bml0cyBmcm9tIHRoZSBvZmZzZXR0aCBVVEYtMTYgY29kZVxuICAvLyAgICAgdW5pdCB0byB0aGUgZW5kIG9mIGRhdGEuXG4gIC8vXG4gIC8vICAgICBSZXR1cm4gYSBET01TdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVURi0xNiBjb2RlXG4gIC8vICAgICB1bml0cyBmcm9tIHRoZSBvZmZzZXR0aCBVVEYtMTYgY29kZSB1bml0IHRvIHRoZVxuICAvLyAgICAgb2Zmc2V0K2NvdW50dGggVVRGLTE2IGNvZGUgdW5pdCBpbiBkYXRhLlxuICBzdWJzdHJpbmdEYXRhOiB7IHZhbHVlOiBmdW5jdGlvbiBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICBpZiAob2Zmc2V0ID4gdGhpcy5kYXRhLmxlbmd0aCB8fCBvZmZzZXQgPCAwIHx8IGNvdW50IDwgMCkgXG4gICAgICB1dGlscy5JbmRleFNpemVFcnJvcigpO1xuICAgIHJldHVybiB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0K2NvdW50KTtcbiAgfX0sXG5cbiAgLy8gdm9pZCBhcHBlbmREYXRhKERPTVN0cmluZyBkYXRhKTtcbiAgLy8gVGhlIGFwcGVuZERhdGEoZGF0YSkgbWV0aG9kIG11c3QgYXBwZW5kIGRhdGEgdG8gdGhlIGNvbnRleHRcbiAgLy8gb2JqZWN0J3MgZGF0YS5cbiAgYXBwZW5kRGF0YTogeyB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kRGF0YShkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhICsgZGF0YTtcbiAgfX0sXG5cbiAgLy8gdm9pZCBpbnNlcnREYXRhKHVuc2lnbmVkIGxvbmcgb2Zmc2V0LCBET01TdHJpbmcgZGF0YSk7XG4gIC8vIFRoZSBpbnNlcnREYXRhKG9mZnNldCwgZGF0YSkgbWV0aG9kIG11c3QgcnVuIHRoZXNlIHN0ZXBzOlxuICAvL1xuICAvLyAgICAgSWYgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29udGV4dCBvYmplY3Qnc1xuICAvLyAgICAgbGVuZ3RoLCB0aHJvdyBhbiBJTkRFWF9TSVpFX0VSUiBleGNlcHRpb24gYW5kXG4gIC8vICAgICB0ZXJtaW5hdGUgdGhlc2Ugc3RlcHMuXG4gIC8vXG4gIC8vICAgICBJbnNlcnQgZGF0YSBpbnRvIHRoZSBjb250ZXh0IG9iamVjdCdzIGRhdGEgYWZ0ZXJcbiAgLy8gICAgIG9mZnNldCBVVEYtMTYgY29kZSB1bml0cy5cbiAgLy9cbiAgaW5zZXJ0RGF0YTogeyB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0RGF0YShvZmZzZXQsIGRhdGEpIHtcbiAgICB2YXIgY3VydGV4dCA9IHRoaXMuZGF0YTtcbiAgICBpZiAob2Zmc2V0ID4gY3VydGV4dC5sZW5ndGggfHwgb2Zmc2V0IDwgMCkgdXRpbHMuSW5kZXhTaXplRXJyb3IoKTtcbiAgICB2YXIgcHJlZml4ID0gY3VydGV4dC5zdWJzdHJpbmcoMCwgb2Zmc2V0KSxcbiAgICBzdWZmaXggPSBjdXJ0ZXh0LnN1YnN0cmluZyhvZmZzZXQpO1xuICAgIHRoaXMuZGF0YSA9IHByZWZpeCArIGRhdGEgKyBzdWZmaXg7XG4gIH19LFxuXG5cbiAgLy8gdm9pZCBkZWxldGVEYXRhKHVuc2lnbmVkIGxvbmcgb2Zmc2V0LCB1bnNpZ25lZCBsb25nIGNvdW50KTtcbiAgLy8gVGhlIGRlbGV0ZURhdGEob2Zmc2V0LCBjb3VudCkgbWV0aG9kIG11c3QgcnVuIHRoZXNlIHN0ZXBzOlxuICAvL1xuICAvLyAgICAgSWYgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29udGV4dCBvYmplY3Qnc1xuICAvLyAgICAgbGVuZ3RoLCB0aHJvdyBhbiBJTkRFWF9TSVpFX0VSUiBleGNlcHRpb24gYW5kXG4gIC8vICAgICB0ZXJtaW5hdGUgdGhlc2Ugc3RlcHMuXG4gIC8vXG4gIC8vICAgICBJZiBvZmZzZXQrY291bnQgaXMgZ3JlYXRlciB0aGFuIHRoZSBjb250ZXh0XG4gIC8vICAgICBvYmplY3QncyBsZW5ndGggdmFyIGNvdW50IGJlIGxlbmd0aC1vZmZzZXQuXG4gIC8vXG4gIC8vICAgICBTdGFydGluZyBmcm9tIG9mZnNldCBVVEYtMTYgY29kZSB1bml0cyByZW1vdmUgY291bnRcbiAgLy8gICAgIFVURi0xNiBjb2RlIHVuaXRzIGZyb20gdGhlIGNvbnRleHQgb2JqZWN0J3MgZGF0YS5cbiAgZGVsZXRlRGF0YTogeyB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlRGF0YShvZmZzZXQsIGNvdW50KSB7XG4gICAgdmFyIGN1cnRleHQgPSB0aGlzLmRhdGEsIGxlbiA9IGN1cnRleHQubGVuZ3RoO1xuXG4gICAgaWYgKG9mZnNldCA+IGxlbiB8fCBvZmZzZXQgPCAwKSB1dGlscy5JbmRleFNpemVFcnJvcigpO1xuXG4gICAgaWYgKG9mZnNldCtjb3VudCA+IGxlbilcbiAgICAgIGNvdW50ID0gbGVuIC0gb2Zmc2V0O1xuXG4gICAgdmFyIHByZWZpeCA9IGN1cnRleHQuc3Vic3RyaW5nKDAsIG9mZnNldCksXG4gICAgc3VmZml4ID0gY3VydGV4dC5zdWJzdHJpbmcob2Zmc2V0K2NvdW50KTtcblxuICAgIHRoaXMuZGF0YSA9IHByZWZpeCArIHN1ZmZpeDtcbiAgfX0sXG5cblxuICAvLyB2b2lkIHJlcGxhY2VEYXRhKHVuc2lnbmVkIGxvbmcgb2Zmc2V0LCB1bnNpZ25lZCBsb25nIGNvdW50LFxuICAvLyAgICAgICAgICBET01TdHJpbmcgZGF0YSk7XG4gIC8vXG4gIC8vIFRoZSByZXBsYWNlRGF0YShvZmZzZXQsIGNvdW50LCBkYXRhKSBtZXRob2QgbXVzdCBhY3QgYXNcbiAgLy8gaWYgdGhlIGRlbGV0ZURhdGEoKSBtZXRob2QgaXMgaW52b2tlZCB3aXRoIG9mZnNldCBhbmRcbiAgLy8gY291bnQgYXMgYXJndW1lbnRzIGZvbGxvd2VkIGJ5IHRoZSBpbnNlcnREYXRhKCkgbWV0aG9kXG4gIC8vIHdpdGggb2Zmc2V0IGFuZCBkYXRhIGFzIGFyZ3VtZW50cyBhbmQgcmUtdGhyb3cgYW55XG4gIC8vIGV4Y2VwdGlvbnMgdGhlc2UgbWV0aG9kcyBtaWdodCBoYXZlIHRocm93bi5cbiAgcmVwbGFjZURhdGE6IHsgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VEYXRhKG9mZnNldCwgY291bnQsIGRhdGEpIHtcbiAgICB2YXIgY3VydGV4dCA9IHRoaXMuZGF0YSwgbGVuID0gY3VydGV4dC5sZW5ndGg7XG5cbiAgICBpZiAob2Zmc2V0ID4gbGVuIHx8IG9mZnNldCA8IDApIHV0aWxzLkluZGV4U2l6ZUVycm9yKCk7XG5cbiAgICBpZiAob2Zmc2V0K2NvdW50ID4gbGVuKVxuICAgICAgY291bnQgPSBsZW4gLSBvZmZzZXQ7XG5cbiAgICB2YXIgcHJlZml4ID0gY3VydGV4dC5zdWJzdHJpbmcoMCwgb2Zmc2V0KSxcbiAgICBzdWZmaXggPSBjdXJ0ZXh0LnN1YnN0cmluZyhvZmZzZXQrY291bnQpO1xuXG4gICAgdGhpcy5kYXRhID0gcHJlZml4ICsgZGF0YSArIHN1ZmZpeDtcbiAgfX0sXG5cbiAgLy8gVXRpbGl0eSBtZXRob2QgdGhhdCBOb2RlLmlzRXF1YWxOb2RlKCkgY2FsbHMgdG8gdGVzdCBUZXh0IGFuZFxuICAvLyBDb21tZW50IG5vZGVzIGZvciBlcXVhbGl0eS4gIEl0IGlzIG9rYXkgdG8gcHV0IGl0IGhlcmUsIHNpbmNlXG4gIC8vIE5vZGUgd2lsbCBoYXZlIGFscmVhZHkgdmVyaWZpZWQgdGhhdCBub2RlVHlwZSBpcyBlcXVhbFxuICBpc0VxdWFsOiB7IHZhbHVlOiBmdW5jdGlvbiBpc0VxdWFsKG4pIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YSA9PT0gbi5fZGF0YTtcbiAgfX0sXG5cbiAgbGVuZ3RoOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRhdGEubGVuZ3RoOyB9fVxuXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsIENoaWxkTm9kZSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0NoYXJhY3RlckRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IERPTUltcGxlbWVudGF0aW9uO1xuXG52YXIgRG9jdW1lbnQgPSByZXF1aXJlKCcuL0RvY3VtZW50Jyk7XG52YXIgRG9jdW1lbnRUeXBlID0gcmVxdWlyZSgnLi9Eb2N1bWVudFR5cGUnKTtcbnZhciBIVE1MUGFyc2VyID0gcmVxdWlyZSgnLi9IVE1MUGFyc2VyJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgeG1sID0gcmVxdWlyZSgnLi94bWxuYW1lcycpO1xuXG4vLyBFYWNoIGRvY3VtZW50IG11c3QgaGF2ZSBpdHMgb3duIGluc3RhbmNlIG9mIHRoZSBkb21pbXBsZW1lbnRhdGlvbiBvYmplY3Rcbi8vIEV2ZW4gdGhvdWdoIHRoZXNlIG9iamVjdHMgaGF2ZSBubyBzdGF0ZVxuZnVuY3Rpb24gRE9NSW1wbGVtZW50YXRpb24oKSB7fVxuXG5cbi8vIEZlYXR1cmUvdmVyc2lvbiBwYWlycyB0aGF0IERPTUltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoKSByZXR1cm5zXG4vLyB0cnVlIGZvci4gIEl0IHJldHVybnMgZmFsc2UgZm9yIGFueXRoaW5nIGVsc2UuXG52YXIgc3VwcG9ydGVkRmVhdHVyZXMgPSB7XG4gICd4bWwnOiB7ICcnOiB0cnVlLCAnMS4wJzogdHJ1ZSwgJzIuMCc6IHRydWUgfSwgICAvLyBET00gQ29yZVxuICAnY29yZSc6IHsgJyc6IHRydWUsICcyLjAnOiB0cnVlIH0sICAgICAgICAgICAgICAgLy8gRE9NIENvcmVcbiAgJ2h0bWwnOiB7ICcnOiB0cnVlLCAnMS4wJzogdHJ1ZSwgJzIuMCc6IHRydWV9ICwgIC8vIEhUTUxcbiAgJ3hodG1sJzogeyAnJzogdHJ1ZSwgJzEuMCc6IHRydWUsICcyLjAnOiB0cnVlfSAsIC8vIEhUTUxcbn07XG5cbkRPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZSA9IHtcbiAgaGFzRmVhdHVyZTogZnVuY3Rpb24gaGFzRmVhdHVyZShmZWF0dXJlLCB2ZXJzaW9uKSB7XG4gICAgdmFyIGYgPSBzdXBwb3J0ZWRGZWF0dXJlc1soZmVhdHVyZSB8fCAnJykudG9Mb3dlckNhc2UoKV07XG4gICAgcmV0dXJuIChmICYmIGZbdmVyc2lvbiB8fCAnJ10pIHx8IGZhbHNlO1xuICB9LFxuXG4gIGNyZWF0ZURvY3VtZW50VHlwZTogZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnRUeXBlKHF1YWxpZmllZE5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xuICAgIGlmICgheG1sLmlzVmFsaWROYW1lKHF1YWxpZmllZE5hbWUpKSB1dGlscy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoKTtcbiAgICBpZiAoIXhtbC5pc1ZhbGlkUU5hbWUocXVhbGlmaWVkTmFtZSkpIHV0aWxzLk5hbWVzcGFjZUVycm9yKCk7XG5cbiAgICByZXR1cm4gbmV3IERvY3VtZW50VHlwZShxdWFsaWZpZWROYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpO1xuICB9LFxuXG4gIGNyZWF0ZURvY3VtZW50OiBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudChuYW1lc3BhY2UsIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpIHtcbiAgICAvL1xuICAgIC8vIE5vdGUgdGhhdCB0aGUgY3VycmVudCBET01Db3JlIHNwZWMgbWFrZXMgaXQgaW1wb3NzaWJsZSB0b1xuICAgIC8vIGNyZWF0ZSBhbiBIVE1MIGRvY3VtZW50IHdpdGggdGhpcyBmdW5jdGlvbiwgZXZlbiBpZiB0aGVcbiAgICAvLyBuYW1lc3BhY2UgYW5kIGRvY3R5cGUgYXJlIHByb3BlcnRseSBzZXQuICBTZWUgdGhpcyB0aHJlYWQ6XG4gICAgLy8gaHR0cDovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LWRvbS8yMDExQXBySnVuLzAxMzIuaHRtbFxuICAgIC8vXG4gICAgdmFyIGQgPSBuZXcgRG9jdW1lbnQoZmFsc2UsIG51bGwpO1xuICAgIHZhciBlO1xuXG4gICAgaWYgKHF1YWxpZmllZE5hbWUpXG4gICAgICBlID0gZC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBxdWFsaWZpZWROYW1lKTtcbiAgICBlbHNlXG4gICAgICBlID0gbnVsbDtcblxuICAgIGlmIChkb2N0eXBlKSB7XG4gICAgICBpZiAoZG9jdHlwZS5vd25lckRvY3VtZW50KSB1dGlscy5Xcm9uZ0RvY3VtZW50RXJyb3IoKTtcbiAgICAgIGQuYXBwZW5kQ2hpbGQoZG9jdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGUpIGQuYXBwZW5kQ2hpbGQoZSk7XG5cbiAgICByZXR1cm4gZDtcbiAgfSxcblxuICBjcmVhdGVIVE1MRG9jdW1lbnQ6IGZ1bmN0aW9uIGNyZWF0ZUhUTUxEb2N1bWVudCh0aXRsZVRleHQpIHtcbiAgICB2YXIgZCA9IG5ldyBEb2N1bWVudCh0cnVlLCBudWxsKTtcbiAgICBkLmFwcGVuZENoaWxkKG5ldyBEb2N1bWVudFR5cGUoJ2h0bWwnKSk7XG4gICAgdmFyIGh0bWwgPSBkLmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcbiAgICBkLmFwcGVuZENoaWxkKGh0bWwpO1xuICAgIHZhciBoZWFkID0gZC5jcmVhdGVFbGVtZW50KCdoZWFkJyk7XG4gICAgaHRtbC5hcHBlbmRDaGlsZChoZWFkKTtcbiAgICB2YXIgdGl0bGUgPSBkLmNyZWF0ZUVsZW1lbnQoJ3RpdGxlJyk7XG4gICAgaGVhZC5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgdGl0bGUuYXBwZW5kQ2hpbGQoZC5jcmVhdGVUZXh0Tm9kZSh0aXRsZVRleHQpKTtcbiAgICBodG1sLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudCgnYm9keScpKTtcbiAgICBkLm1vZGNsb2NrID0gMTsgLy8gU3RhcnQgdHJhY2tpbmcgbW9kaWZpY2F0aW9uc1xuICAgIHJldHVybiBkO1xuICB9LFxuXG4gIG1velNldE91dHB1dE11dGF0aW9uSGFuZGxlcjogZnVuY3Rpb24oZG9jLCBoYW5kbGVyKSB7XG4gICAgZG9jLm11dGF0aW9uSGFuZGxlciA9IGhhbmRsZXI7XG4gIH0sXG5cbiAgbW96R2V0SW5wdXRNdXRhdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKGRvYykge1xuICAgIHV0aWxzLm55aSgpO1xuICB9LFxuXG4gIG1vekhUTUxQYXJzZXI6IEhUTUxQYXJzZXIsXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvRE9NSW1wbGVtZW50YXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTm9kZUZpbHRlciA9IHtcbiAgLy8gQ29uc3RhbnRzIGZvciBhY2NlcHROb2RlKClcbiAgRklMVEVSX0FDQ0VQVDogMSxcbiAgRklMVEVSX1JFSkVDVDogMixcbiAgRklMVEVSX1NLSVA6IDMsXG5cbiAgLy8gQ29uc3RhbnRzIGZvciB3aGF0VG9TaG93XG4gIFNIT1dfQUxMOiAweEZGRkZGRkZGLFxuICBTSE9XX0VMRU1FTlQ6IDB4MSxcbiAgU0hPV19BVFRSSUJVVEU6IDB4MiwgLy8gaGlzdG9yaWNhbFxuICBTSE9XX1RFWFQ6IDB4NCxcbiAgU0hPV19DREFUQV9TRUNUSU9OOiAweDgsIC8vIGhpc3RvcmljYWxcbiAgU0hPV19FTlRJVFlfUkVGRVJFTkNFOiAweDEwLCAvLyBoaXN0b3JpY2FsXG4gIFNIT1dfRU5USVRZOiAweDIwLCAvLyBoaXN0b3JpY2FsXG4gIFNIT1dfUFJPQ0VTU0lOR19JTlNUUlVDVElPTjogMHg0MCxcbiAgU0hPV19DT01NRU5UOiAweDgwLFxuICBTSE9XX0RPQ1VNRU5UOiAweDEwMCxcbiAgU0hPV19ET0NVTUVOVF9UWVBFOiAweDIwMCxcbiAgU0hPV19ET0NVTUVOVF9GUkFHTUVOVDogMHg0MDAsXG4gIFNIT1dfTk9UQVRJT046IDB4ODAwIC8vIGhpc3RvcmljYWxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKE5vZGVGaWx0ZXIuY29uc3RydWN0b3IgPSBOb2RlRmlsdGVyLnByb3RvdHlwZSA9IE5vZGVGaWx0ZXIpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTm9kZUZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTm9kZUxpc3Q7XG5cbmZ1bmN0aW9uIGl0ZW0oaSkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIHJldHVybiB0aGlzW2ldO1xufVxuXG5mdW5jdGlvbiBOb2RlTGlzdChhKSB7XG4gIGlmICghYSkgYSA9IFtdO1xuICBhLml0ZW0gPSBpdGVtO1xuICByZXR1cm4gYTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL05vZGVMaXN0LmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDApO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGRlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL09ic2VydmFibGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg3KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tbW9uL2J1bmRsZXMvY29tbW9uLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3Jcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHBhcnNlcmxpYiA9IHJlcXVpcmUoJy4vY3NzcGFyc2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTU3R5bGVEZWNsYXJhdGlvbjtcblxuZnVuY3Rpb24gQ1NTU3R5bGVEZWNsYXJhdGlvbihlbHQpIHtcbiAgdGhpcy5fZWxlbWVudCA9IGVsdDtcbn1cblxuLy8gVXRpbGl0eSBmdW5jdGlvbiBmb3IgcGFyc2luZyBzdHlsZSBkZWNsYXJhdGlvbnNcbi8vIFBhc3MgaW4gYSBzdHJpbmcgbGlrZSBcIm1hcmdpbi1sZWZ0OiA1cHg7IGJvcmRlci1zdHlsZTogc29saWRcIlxuLy8gYW5kIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBvYmplY3QgbGlrZVxuLy8ge1wibWFyZ2luLWxlZnRcIjpcIjVweFwiLCBcImJvcmRlci1zdHlsZVwiOlwic29saWRcIn1cbmZ1bmN0aW9uIHBhcnNlU3R5bGVzKHMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBwYXJzZXJsaWIuY3NzLlBhcnNlcigpO1xuICB2YXIgcmVzdWx0ID0geyBwcm9wZXJ0eTogT2JqZWN0LmNyZWF0ZShudWxsKSwgcHJpb3JpdHk6IE9iamVjdC5jcmVhdGUobnVsbCkgfTtcbiAgcGFyc2VyLmFkZExpc3RlbmVyKFwicHJvcGVydHlcIiwgZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLmludmFsaWQpIHJldHVybjsgLy8gU2tpcCBlcnJvcnNcbiAgICByZXN1bHQucHJvcGVydHlbZS5wcm9wZXJ0eS50ZXh0XSA9IGUudmFsdWUudGV4dDtcbiAgICBpZiAoZS5pbXBvcnRhbnQpIHJlc3VsdC5wcmlvcml0eVtlLnByb3BlcnR5LnRleHRdID0gJ2ltcG9ydGFudCc7XG4gIH0pO1xuICBzID0gKCcnK3MpLnJlcGxhY2UoL147LywgJycpO1xuICBwYXJzZXIucGFyc2VTdHlsZUF0dHJpYnV0ZShzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIE5PX0NIQU5HRSA9IHt9OyAvLyBQcml2YXRlIG1hcmtlciBvYmplY3RcblxuQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5wcm90b3R5cGUsIHtcblxuICAvLyBSZXR1cm4gdGhlIHBhcnNlZCBmb3JtIG9mIHRoZSBlbGVtZW50J3Mgc3R5bGUgYXR0cmlidXRlLlxuICAvLyBJZiB0aGUgZWxlbWVudCdzIHN0eWxlIGF0dHJpYnV0ZSBoYXMgbmV2ZXIgYmVlbiBwYXJzZWRcbiAgLy8gb3IgaWYgaXQgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgcGFyc2UsIHRoZW4gcmVwYXJzZSBpdFxuICAvLyBOb3RlIHRoYXQgdGhlIHN0eWxlcyBkb24ndCBnZXQgcGFyc2VkIHVudGlsIHRoZXkncmUgYWN0dWFsbHkgbmVlZGVkXG4gIF9wYXJzZWQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX3BhcnNlZFN0eWxlcyB8fCB0aGlzLmNzc1RleHQgIT09IHRoaXMuX2xhc3RQYXJzZWRUZXh0KSB7XG4gICAgICB2YXIgdGV4dCA9IHRoaXMuY3NzVGV4dDtcbiAgICAgIHRoaXMuX3BhcnNlZFN0eWxlcyA9IHBhcnNlU3R5bGVzKHRleHQpO1xuICAgICAgdGhpcy5fbGFzdFBhcnNlZFRleHQgPSB0ZXh0O1xuICAgICAgZGVsZXRlIHRoaXMuX25hbWVzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkU3R5bGVzO1xuICB9fSxcblxuICAvLyBDYWxsIHRoaXMgbWV0aG9kIGFueSB0aW1lIHRoZSBwYXJzZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gIC8vIHN0eWxlIGNoYW5nZXMuICBJdCBjb252ZXJ0cyB0aGUgc3R5bGUgcHJvcGVydGllcyB0byBhIHN0cmluZyBhbmRcbiAgLy8gc2V0cyBjc3NUZXh0IGFuZCB0aGUgZWxlbWVudCdzIHN0eWxlIGF0dHJpYnV0ZVxuICBfc2VyaWFsaXplOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5fcGFyc2VkO1xuICAgIHZhciBzID0gXCJcIjtcblxuICAgIGZvcih2YXIgbmFtZSBpbiBzdHlsZXMucHJvcGVydHkpIHtcbiAgICAgIGlmIChzKSBzICs9IFwiIFwiO1xuICAgICAgcyArPSBuYW1lICsgXCI6IFwiICsgc3R5bGVzLnByb3BlcnR5W25hbWVdO1xuICAgICAgaWYgKHN0eWxlcy5wcmlvcml0eVtuYW1lXSkge1xuICAgICAgICBzICs9IFwiICFcIiArIHN0eWxlcy5wcmlvcml0eVtuYW1lXTtcbiAgICAgIH1cbiAgICAgIHMgKz0gXCI7XCI7XG4gICAgfVxuXG4gICAgdGhpcy5jc3NUZXh0ID0gczsgICAgICAvLyBhbHNvIHNldHMgdGhlIHN0eWxlIGF0dHJpYnV0ZVxuICAgIHRoaXMuX2xhc3RQYXJzZWRUZXh0ID0gczsgIC8vIHNvIHdlIGRvbid0IHJlcGFyc2VcbiAgICBkZWxldGUgdGhpcy5fbmFtZXM7XG4gIH19LFxuXG4gIGNzc1RleHQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gWFhYOiB0aGlzIGlzIGEgQ1NTU3R5bGVEZWNsYXJhdGlvbiBmb3IgYW4gZWxlbWVudC5cbiAgICAgIC8vIEEgZGlmZmVyZW50IGltcGwgbWlnaHQgYmUgbmVjZXNzYXJ5IGZvciBhIHNldCBvZiBzdHlsZXNcbiAgICAgIC8vIGFzc29jaWF0ZWQgcmV0dXJuZWQgYnkgZ2V0Q29tcHV0ZWRTdHlsZSgpLCBlLmcuXG4gICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIC8vIFhYWDogSSBzaG91bGQgcGFyc2UgYW5kIHNlcmlhbGl6ZSB0aGUgdmFsdWUgdG9cbiAgICAgIC8vIG5vcm1hbGl6ZSBpdCBhbmQgcmVtb3ZlIGVycm9ycy4gRkYgYW5kIGNocm9tZSBkbyB0aGF0LlxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGxlbmd0aDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fbmFtZXMpXG4gICAgICB0aGlzLl9uYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3BhcnNlZC5wcm9wZXJ0eSk7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmxlbmd0aDtcbiAgfX0sXG5cbiAgaXRlbTogeyB2YWx1ZTogZnVuY3Rpb24obikge1xuICAgIGlmICghdGhpcy5fbmFtZXMpXG4gICAgICB0aGlzLl9uYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3BhcnNlZC5wcm9wZXJ0eSk7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzW25dO1xuICB9fSxcblxuICBnZXRQcm9wZXJ0eVZhbHVlOiB7IHZhbHVlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkLnByb3BlcnR5W3Byb3BlcnR5XSB8fCBcIlwiO1xuICB9fSxcblxuICBnZXRQcm9wZXJ0eVByaW9yaXR5OiB7IHZhbHVlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkLnByaW9yaXR5W3Byb3BlcnR5XSB8fCBcIlwiO1xuICB9fSxcblxuICBzZXRQcm9wZXJ0eTogeyB2YWx1ZTogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAocHJpb3JpdHkgPT09IG51bGwgfHwgcHJpb3JpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuICAgIH1cblxuICAgIC8vIFN0cmluZyBjb2VyY2lvblxuICAgIGlmICh2YWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICB2YWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIHRoaXMucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcmlvcml0eSAhPT0gXCJcIiAmJiBwcmlvcml0eSAhPT0gTk9fQ0hBTkdFICYmXG4gICAgICAgICEvXmltcG9ydGFudCQvaS50ZXN0KHByaW9yaXR5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLl9wYXJzZWQ7XG4gICAgaWYgKHZhbHVlID09PSBOT19DSEFOR0UpIHtcbiAgICAgIGlmICghc3R5bGVzLnByb3BlcnR5W3Byb3BlcnR5XSkge1xuICAgICAgICByZXR1cm47IC8vIE5vdCBhIHZhbGlkIHByb3BlcnR5IG5hbWUuXG4gICAgICB9XG4gICAgICBpZiAocHJpb3JpdHkgIT09IFwiXCIpIHtcbiAgICAgICAgc3R5bGVzLnByaW9yaXR5W3Byb3BlcnR5XSA9IFwiaW1wb3J0YW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgc3R5bGVzLnByaW9yaXR5W3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgZG9uJ3QganVzdCBhY2NlcHQgdGhlIHByb3BlcnR5IHZhbHVlLiAgSW5zdGVhZFxuICAgICAgLy8gd2UgcGFyc2UgaXQgdG8gZW5zdXJlIHRoYXQgaXQgaXMgc29tZXRoaW5nIHZhbGlkLlxuICAgICAgLy8gSWYgaXQgY29udGFpbnMgYSBzZW1pY29sb24gaXQgaXMgaW52YWxpZFxuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoXCI7XCIpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgICB2YXIgbmV3cHJvcHMgPSBwYXJzZVN0eWxlcyhwcm9wZXJ0eSArIFwiOlwiICsgdmFsdWUpO1xuICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG5ld3Byb3BzLnByb3BlcnR5KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuOyAvLyBubyB2YWxpZCBwcm9wZXJ0eSBmb3VuZFxuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG5ld3Byb3BzLnByaW9yaXR5KS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuOyAvLyBpZiB0aGUgdmFsdWUgaW5jbHVkZWQgJyFpbXBvcnRhbnQnIGl0IHdhc24ndCB2YWxpZC5cbiAgICAgIH1cblxuICAgICAgLy8gWFhYIGhhbmRsZSBzaG9ydGhhbmQgcHJvcGVydGllc1xuXG4gICAgICBmb3IgKHZhciBwIGluIG5ld3Byb3BzLnByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlcy5wcm9wZXJ0eVtwXSA9IG5ld3Byb3BzLnByb3BlcnR5W3BdO1xuICAgICAgICBpZiAocHJpb3JpdHkgPT09IE5PX0NIQU5HRSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5ICE9PSBcIlwiKSB7XG4gICAgICAgICAgc3R5bGVzLnByaW9yaXR5W3BdID0gXCJpbXBvcnRhbnRcIjtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZXMucHJpb3JpdHlbcF0pIHtcbiAgICAgICAgICBkZWxldGUgc3R5bGVzLnByaW9yaXR5W3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2VyaWFsaXplIGFuZCB1cGRhdGUgY3NzVGV4dCBhbmQgZWxlbWVudC5zdHlsZSFcbiAgICB0aGlzLl9zZXJpYWxpemUoKTtcbiAgfX0sXG5cbiAgc2V0UHJvcGVydHlWYWx1ZTogeyB2YWx1ZTogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlLCBOT19DSEFOR0UpO1xuICB9fSxcblxuICBzZXRQcm9wZXJ0eVByaW9yaXR5OiB7IHZhbHVlOiBmdW5jdGlvbihwcm9wZXJ0eSwgcHJpb3JpdHkpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgTk9fQ0hBTkdFLCBwcmlvcml0eSk7XG4gIH19LFxuXG4gIHJlbW92ZVByb3BlcnR5OiB7IHZhbHVlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5fcGFyc2VkO1xuICAgIGlmIChwcm9wZXJ0eSBpbiBzdHlsZXMucHJvcGVydHkpIHtcbiAgICAgIGRlbGV0ZSBzdHlsZXMucHJvcGVydHlbcHJvcGVydHldO1xuICAgICAgZGVsZXRlIHN0eWxlcy5wcmlvcml0eVtwcm9wZXJ0eV07XG5cbiAgICAgIC8vIFNlcmlhbGl6ZSBhbmQgdXBkYXRlIGNzc1RleHQgYW5kIGVsZW1lbnQuc3R5bGUhXG4gICAgICB0aGlzLl9zZXJpYWxpemUoKTtcbiAgICB9XG4gIH19LFxufSk7XG5cbnZhciBjc3NQcm9wZXJ0aWVzID0ge1xuICBiYWNrZ3JvdW5kOiBcImJhY2tncm91bmRcIixcbiAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IFwiYmFja2dyb3VuZC1hdHRhY2htZW50XCIsXG4gIGJhY2tncm91bmRDb2xvcjogXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXG4gIGJhY2tncm91bmRJbWFnZTogXCJiYWNrZ3JvdW5kLWltYWdlXCIsXG4gIGJhY2tncm91bmRQb3NpdGlvbjogXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIsXG4gIGJhY2tncm91bmRSZXBlYXQ6IFwiYmFja2dyb3VuZC1yZXBlYXRcIixcbiAgYm9yZGVyOiBcImJvcmRlclwiLFxuICBib3JkZXJDb2xsYXBzZTogXCJib3JkZXItY29sbGFwc2VcIixcbiAgYm9yZGVyQ29sb3I6IFwiYm9yZGVyLWNvbG9yXCIsXG4gIGJvcmRlclNwYWNpbmc6IFwiYm9yZGVyLXNwYWNpbmdcIixcbiAgYm9yZGVyU3R5bGU6IFwiYm9yZGVyLXN0eWxlXCIsXG4gIGJvcmRlclRvcDogXCJib3JkZXItdG9wXCIsXG4gIGJvcmRlclJpZ2h0OiBcImJvcmRlci1yaWdodFwiLFxuICBib3JkZXJCb3R0b206IFwiYm9yZGVyLWJvdHRvbVwiLFxuICBib3JkZXJMZWZ0OiBcImJvcmRlci1sZWZ0XCIsXG4gIGJvcmRlclRvcENvbG9yOiBcImJvcmRlci10b3AtY29sb3JcIixcbiAgYm9yZGVyUmlnaHRDb2xvcjogXCJib3JkZXItcmlnaHQtY29sb3JcIixcbiAgYm9yZGVyQm90dG9tQ29sb3I6IFwiYm9yZGVyLWJvdHRvbS1jb2xvclwiLFxuICBib3JkZXJMZWZ0Q29sb3I6IFwiYm9yZGVyLWxlZnQtY29sb3JcIixcbiAgYm9yZGVyVG9wU3R5bGU6IFwiYm9yZGVyLXRvcC1zdHlsZVwiLFxuICBib3JkZXJSaWdodFN0eWxlOiBcImJvcmRlci1yaWdodC1zdHlsZVwiLFxuICBib3JkZXJCb3R0b21TdHlsZTogXCJib3JkZXItYm90dG9tLXN0eWxlXCIsXG4gIGJvcmRlckxlZnRTdHlsZTogXCJib3JkZXItbGVmdC1zdHlsZVwiLFxuICBib3JkZXJUb3BXaWR0aDogXCJib3JkZXItdG9wLXdpZHRoXCIsXG4gIGJvcmRlclJpZ2h0V2lkdGg6IFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIsXG4gIGJvcmRlckJvdHRvbVdpZHRoOiBcImJvcmRlci1ib3R0b20td2lkdGhcIixcbiAgYm9yZGVyTGVmdFdpZHRoOiBcImJvcmRlci1sZWZ0LXdpZHRoXCIsXG4gIGJvcmRlcldpZHRoOiBcImJvcmRlci13aWR0aFwiLFxuICBib3R0b206IFwiYm90dG9tXCIsXG4gIGNhcHRpb25TaWRlOiBcImNhcHRpb24tc2lkZVwiLFxuICBjbGVhcjogXCJjbGVhclwiLFxuICBjbGlwOiBcImNsaXBcIixcbiAgY29sb3I6IFwiY29sb3JcIixcbiAgY29udGVudDogXCJjb250ZW50XCIsXG4gIGNvdW50ZXJJbmNyZW1lbnQ6IFwiY291bnRlci1pbmNyZW1lbnRcIixcbiAgY291bnRlclJlc2V0OiBcImNvdW50ZXItcmVzZXRcIixcbiAgY3Vyc29yOiBcImN1cnNvclwiLFxuICBkaXJlY3Rpb246IFwiZGlyZWN0aW9uXCIsXG4gIGRpc3BsYXk6IFwiZGlzcGxheVwiLFxuICBlbXB0eUNlbGxzOiBcImVtcHR5LWNlbGxzXCIsXG4gIGNzc0Zsb2F0OiBcImZsb2F0XCIsXG4gIGZvbnQ6IFwiZm9udFwiLFxuICBmb250RmFtaWx5OiBcImZvbnQtZmFtaWx5XCIsXG4gIGZvbnRTaXplOiBcImZvbnQtc2l6ZVwiLFxuICBmb250U2l6ZUFkanVzdDogXCJmb250LXNpemUtYWRqdXN0XCIsXG4gIGZvbnRTdHJldGNoOiBcImZvbnQtc3RyZXRjaFwiLFxuICBmb250U3R5bGU6IFwiZm9udC1zdHlsZVwiLFxuICBmb250VmFyaWFudDogXCJmb250LXZhcmlhbnRcIixcbiAgZm9udFdlaWdodDogXCJmb250LXdlaWdodFwiLFxuICBoZWlnaHQ6IFwiaGVpZ2h0XCIsXG4gIGxlZnQ6IFwibGVmdFwiLFxuICBsZXR0ZXJTcGFjaW5nOiBcImxldHRlci1zcGFjaW5nXCIsXG4gIGxpbmVIZWlnaHQ6IFwibGluZS1oZWlnaHRcIixcbiAgbGlzdFN0eWxlOiBcImxpc3Qtc3R5bGVcIixcbiAgbGlzdFN0eWxlSW1hZ2U6IFwibGlzdC1zdHlsZS1pbWFnZVwiLFxuICBsaXN0U3R5bGVQb3NpdGlvbjogXCJsaXN0LXN0eWxlLXBvc2l0aW9uXCIsXG4gIGxpc3RTdHlsZVR5cGU6IFwibGlzdC1zdHlsZS10eXBlXCIsXG4gIG1hcmdpbjogXCJtYXJnaW5cIixcbiAgbWFyZ2luVG9wOiBcIm1hcmdpbi10b3BcIixcbiAgbWFyZ2luUmlnaHQ6IFwibWFyZ2luLXJpZ2h0XCIsXG4gIG1hcmdpbkJvdHRvbTogXCJtYXJnaW4tYm90dG9tXCIsXG4gIG1hcmdpbkxlZnQ6IFwibWFyZ2luLWxlZnRcIixcbiAgbWFya2VyT2Zmc2V0OiBcIm1hcmtlci1vZmZzZXRcIixcbiAgbWFya3M6IFwibWFya3NcIixcbiAgbWF4SGVpZ2h0OiBcIm1heC1oZWlnaHRcIixcbiAgbWF4V2lkdGg6IFwibWF4LXdpZHRoXCIsXG4gIG1pbkhlaWdodDogXCJtaW4taGVpZ2h0XCIsXG4gIG1pbldpZHRoOiBcIm1pbi13aWR0aFwiLFxuICBvcGFjaXR5OiBcIm9wYWNpdHlcIixcbiAgb3JwaGFuczogXCJvcnBoYW5zXCIsXG4gIG91dGxpbmU6IFwib3V0bGluZVwiLFxuICBvdXRsaW5lQ29sb3I6IFwib3V0bGluZS1jb2xvclwiLFxuICBvdXRsaW5lU3R5bGU6IFwib3V0bGluZS1zdHlsZVwiLFxuICBvdXRsaW5lV2lkdGg6IFwib3V0bGluZS13aWR0aFwiLFxuICBvdmVyZmxvdzogXCJvdmVyZmxvd1wiLFxuICBwYWRkaW5nOiBcInBhZGRpbmdcIixcbiAgcGFkZGluZ1RvcDogXCJwYWRkaW5nLXRvcFwiLFxuICBwYWRkaW5nUmlnaHQ6IFwicGFkZGluZy1yaWdodFwiLFxuICBwYWRkaW5nQm90dG9tOiBcInBhZGRpbmctYm90dG9tXCIsXG4gIHBhZGRpbmdMZWZ0OiBcInBhZGRpbmctbGVmdFwiLFxuICBwYWdlOiBcInBhZ2VcIixcbiAgcGFnZUJyZWFrQWZ0ZXI6IFwicGFnZS1icmVhay1hZnRlclwiLFxuICBwYWdlQnJlYWtCZWZvcmU6IFwicGFnZS1icmVhay1iZWZvcmVcIixcbiAgcGFnZUJyZWFrSW5zaWRlOiBcInBhZ2UtYnJlYWstaW5zaWRlXCIsXG4gIHBvc2l0aW9uOiBcInBvc2l0aW9uXCIsXG4gIHF1b3RlczogXCJxdW90ZXNcIixcbiAgcmlnaHQ6IFwicmlnaHRcIixcbiAgc2l6ZTogXCJzaXplXCIsXG4gIHRhYmxlTGF5b3V0OiBcInRhYmxlLWxheW91dFwiLFxuICB0ZXh0QWxpZ246IFwidGV4dC1hbGlnblwiLFxuICB0ZXh0RGVjb3JhdGlvbjogXCJ0ZXh0LWRlY29yYXRpb25cIixcbiAgdGV4dEluZGVudDogXCJ0ZXh0LWluZGVudFwiLFxuICB0ZXh0U2hhZG93OiBcInRleHQtc2hhZG93XCIsXG4gIHRleHRUcmFuc2Zvcm06IFwidGV4dC10cmFuc2Zvcm1cIixcbiAgdG9wOiBcInRvcFwiLFxuICB1bmljb2RlQmlkaTogXCJ1bmljb2RlLWJpZGlcIixcbiAgdmVydGljYWxBbGlnbjogXCJ2ZXJ0aWNhbC1hbGlnblwiLFxuICB2aXNpYmlsaXR5OiBcInZpc2liaWxpdHlcIixcbiAgd2hpdGVTcGFjZTogXCJ3aGl0ZS1zcGFjZVwiLFxuICB3aWRvd3M6IFwid2lkb3dzXCIsXG4gIHdpZHRoOiBcIndpZHRoXCIsXG4gIHdvcmRTcGFjaW5nOiBcIndvcmQtc3BhY2luZ1wiLFxuICB6SW5kZXg6IFwiei1pbmRleFwiLFxufTtcblxuZm9yKHZhciBwcm9wIGluIGNzc1Byb3BlcnRpZXMpIGRlZmluZVN0eWxlUHJvcGVydHkocHJvcCk7XG5cbmZ1bmN0aW9uIGRlZmluZVN0eWxlUHJvcGVydHkoanNuYW1lKSB7XG4gIHZhciBjc3NuYW1lID0gY3NzUHJvcGVydGllc1tqc25hbWVdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUsIGpzbmFtZSwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eVZhbHVlKGNzc25hbWUpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShjc3NuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0NTU1N0eWxlRGVjbGFyYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xuXG52YXIgY3JlYXRlRG9jdW1lbnRGcmFnbWVudEZyb21Bcmd1bWVudHMgPSBmdW5jdGlvbihkb2N1bWVudCwgYXJncykge1xuICB2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICBmb3IgKHZhciBpPTA7IGk8YXJncy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcmdJdGVtID0gYXJnc1tpXTtcbiAgICB2YXIgaXNOb2RlID0gYXJnSXRlbSBpbnN0YW5jZW9mIE5vZGU7XG4gICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBhcmdJdGVtIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xuICB9XG5cbiAgcmV0dXJuIGRvY0ZyYWc7XG59O1xuXG4vLyBUaGUgQ2hpbGROb2RlIGludGVyZmFjZSBjb250YWlucyBtZXRob2RzIHRoYXQgYXJlIHBhcnRpY3VsYXIgdG8gYE5vZGVgXG4vLyBvYmplY3RzIHRoYXQgY2FuIGhhdmUgYSBwYXJlbnQuICBJdCBpcyBpbXBsZW1lbnRlZCBieSBgRWxlbWVudGAsXG4vLyBgRG9jdW1lbnRUeXBlYCwgYW5kIGBDaGFyYWN0ZXJEYXRhYCBvYmplY3RzLlxudmFyIENoaWxkTm9kZSA9IHtcblxuICAvLyBJbnNlcnRzIGEgc2V0IG9mIE5vZGUgb3IgU3RyaW5nIG9iamVjdHMgaW4gdGhlIGNoaWxkcmVuIGxpc3Qgb2YgdGhpc1xuICAvLyBDaGlsZE5vZGUncyBwYXJlbnQsIGp1c3QgYWZ0ZXIgdGhpcyBDaGlsZE5vZGUuICBTdHJpbmcgb2JqZWN0cyBhcmVcbiAgLy8gaW5zZXJ0ZWQgYXMgdGhlIGVxdWl2YWxlbnQgVGV4dCBub2Rlcy5cbiAgYWZ0ZXI6IHsgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyKCkge1xuICAgIHZhciBhcmdBcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIHZhciBwYXJlbnROb2RlID0gdGhpcy5wYXJlbnROb2RlLCBuZXh0U2libGluZyA9IHRoaXMubmV4dFNpYmxpbmc7XG4gICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgLy8gRmluZCBcInZpYWJsZSBuZXh0IHNpYmxpbmdcIjsgdGhhdCBpcywgbmV4dCBvbmUgbm90IGluIGFyZ0FyclxuICAgIHdoaWxlIChuZXh0U2libGluZyAmJiBhcmdBcnIuc29tZShmdW5jdGlvbih2KSB7IHJldHVybiB2PT09bmV4dFNpYmxpbmc7IH0pKVxuICAgICAgbmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5uZXh0U2libGluZztcbiAgICAvLyBvaywgcGFyZW50IGFuZCBzaWJsaW5nIGFyZSBzYXZlZCBhd2F5IHNpbmNlIHRoaXMgbm9kZSBjb3VsZCBpdHNlbGZcbiAgICAvLyBhcHBlYXIgaW4gYXJnQXJyIGFuZCB3ZSdyZSBhYm91dCB0byBtb3ZlIGFyZ0FyciB0byBhIGRvY3VtZW50IGZyYWdtZW50LlxuICAgIHZhciBkb2NGcmFnID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudEZyb21Bcmd1bWVudHModGhpcy5kb2MsIGFyZ0Fycik7XG5cbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2NGcmFnLCBuZXh0U2libGluZyk7XG4gIH19LFxuXG4gIC8vIEluc2VydHMgYSBzZXQgb2YgTm9kZSBvciBTdHJpbmcgb2JqZWN0cyBpbiB0aGUgY2hpbGRyZW4gbGlzdCBvZiB0aGlzXG4gIC8vIENoaWxkTm9kZSdzIHBhcmVudCwganVzdCBiZWZvcmUgdGhpcyBDaGlsZE5vZGUuICBTdHJpbmcgb2JqZWN0cyBhcmVcbiAgLy8gaW5zZXJ0ZWQgYXMgdGhlIGVxdWl2YWxlbnQgVGV4dCBub2Rlcy5cbiAgYmVmb3JlOiB7IHZhbHVlOiBmdW5jdGlvbiBiZWZvcmUoKSB7XG4gICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLnBhcmVudE5vZGUsIHByZXZTaWJsaW5nID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7XG4gICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgLy8gRmluZCBcInZpYWJsZSBwcmV2IHNpYmxpbmdcIjsgdGhhdCBpcywgcHJldiBvbmUgbm90IGluIGFyZ0FyclxuICAgIHdoaWxlIChwcmV2U2libGluZyAmJiBhcmdBcnIuc29tZShmdW5jdGlvbih2KSB7IHJldHVybiB2PT09cHJldlNpYmxpbmc7IH0pKVxuICAgICAgcHJldlNpYmxpbmcgPSBwcmV2U2libGluZy5wcmV2aW91c1NpYmxpbmc7XG4gICAgLy8gb2ssIHBhcmVudCBhbmQgc2libGluZyBhcmUgc2F2ZWQgYXdheSBzaW5jZSB0aGlzIG5vZGUgY291bGQgaXRzZWxmXG4gICAgLy8gYXBwZWFyIGluIGFyZ0FyciBhbmQgd2UncmUgYWJvdXQgdG8gbW92ZSBhcmdBcnIgdG8gYSBkb2N1bWVudCBmcmFnbWVudC5cbiAgICB2YXIgZG9jRnJhZyA9IGNyZWF0ZURvY3VtZW50RnJhZ21lbnRGcm9tQXJndW1lbnRzKHRoaXMuZG9jLCBhcmdBcnIpO1xuXG4gICAgdmFyIG5leHRTaWJsaW5nID1cbiAgICAgICAgcHJldlNpYmxpbmcgPyBwcmV2U2libGluZy5uZXh0U2libGluZyA6IHBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2NGcmFnLCBuZXh0U2libGluZyk7XG4gIH19LFxuXG4gIC8vIFJlbW92ZSB0aGlzIG5vZGUgZnJvbSBpdHMgcGFyZW50XG4gIHJlbW92ZTogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIGlmICh0aGlzLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybjtcblxuICAgIC8vIFNlbmQgbXV0YXRpb24gZXZlbnRzIGlmIG5lY2Vzc2FyeVxuICAgIGlmICh0aGlzLnJvb3RlZCAmJiB0aGlzLmRvYykgdGhpcy5kb2MubXV0YXRlUmVtb3ZlKHRoaXMpO1xuXG4gICAgLy8gUmVtb3ZlIHRoaXMgbm9kZSBmcm9tIGl0cyBwYXJlbnRzIGFycmF5IG9mIGNoaWxkcmVuXG4gICAgdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXMuc3BsaWNlKHRoaXMuaW5kZXgsIDEpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBzdHJ1Y3R1cmUgaWQgZm9yIGFsbCBhbmNlc3RvcnNcbiAgICB0aGlzLnBhcmVudE5vZGUubW9kaWZ5KCk7XG5cbiAgICAvLyBGb3JnZXQgdGhpcyBub2RlJ3MgcGFyZW50XG4gICAgdGhpcy5wYXJlbnROb2RlID0gbnVsbDtcbiAgfX0sXG5cbiAgLy8gUmVwbGFjZSB0aGlzIG5vZGUgd2l0aCB0aGUgbm9kZXMgb3Igc3RyaW5ncyBwcm92aWRlZCBhcyBhcmd1bWVudHMuXG4gIHJlcGxhY2VXaXRoOiB7IHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlV2l0aCgpIHtcbiAgICB2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMucGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7IHJldHVybjsgfVxuICAgIC8vIEZpbmQgXCJ2aWFibGUgbmV4dCBzaWJsaW5nXCI7IHRoYXQgaXMsIG5leHQgb25lIG5vdCBpbiBhcmdBcnJcbiAgICB3aGlsZSAobmV4dFNpYmxpbmcgJiYgYXJnQXJyLnNvbWUoZnVuY3Rpb24odikgeyByZXR1cm4gdj09PW5leHRTaWJsaW5nOyB9KSlcbiAgICAgIG5leHRTaWJsaW5nID0gbmV4dFNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgLy8gb2ssIHBhcmVudCBhbmQgc2libGluZyBhcmUgc2F2ZWQgYXdheSBzaW5jZSB0aGlzIG5vZGUgY291bGQgaXRzZWxmXG4gICAgLy8gYXBwZWFyIGluIGFyZ0FyciBhbmQgd2UncmUgYWJvdXQgdG8gbW92ZSBhcmdBcnIgdG8gYSBkb2N1bWVudCBmcmFnbWVudC5cbiAgICB2YXIgZG9jRnJhZyA9IGNyZWF0ZURvY3VtZW50RnJhZ21lbnRGcm9tQXJndW1lbnRzKHRoaXMuZG9jLCBhcmdBcnIpO1xuICAgIGlmICh0aGlzLnBhcmVudE5vZGUgPT09IHBhcmVudE5vZGUpIHtcbiAgICAgIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGRvY0ZyYWcsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBgdGhpc2Agd2FzIGluc2VydGVkIGludG8gZG9jRnJhZ1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9jRnJhZywgbmV4dFNpYmxpbmcpO1xuICAgIH1cbiAgfX0sXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hpbGROb2RlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvQ2hpbGROb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnQ7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG52YXIgTm9kZUxpc3QgPSByZXF1aXJlKCcuL05vZGVMaXN0Jyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vRWxlbWVudCcpO1xudmFyIFRleHQgPSByZXF1aXJlKCcuL1RleHQnKTtcbnZhciBDb21tZW50ID0gcmVxdWlyZSgnLi9Db21tZW50Jyk7XG52YXIgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG52YXIgRG9jdW1lbnRGcmFnbWVudCA9IHJlcXVpcmUoJy4vRG9jdW1lbnRGcmFnbWVudCcpO1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IHJlcXVpcmUoJy4vUHJvY2Vzc2luZ0luc3RydWN0aW9uJyk7XG52YXIgRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL0RPTUltcGxlbWVudGF0aW9uJyk7XG52YXIgVHJlZVdhbGtlciA9IHJlcXVpcmUoJy4vVHJlZVdhbGtlcicpO1xudmFyIE5vZGVJdGVyYXRvciA9IHJlcXVpcmUoJy4vTm9kZUl0ZXJhdG9yJyk7XG52YXIgTm9kZUZpbHRlciA9IHJlcXVpcmUoJy4vTm9kZUZpbHRlcicpO1xudmFyIFVSTCA9IHJlcXVpcmUoJy4vVVJMJyk7XG52YXIgc2VsZWN0ID0gcmVxdWlyZSgnLi9zZWxlY3QnKTtcbnZhciBldmVudHMgPSByZXF1aXJlKCcuL2V2ZW50cycpO1xudmFyIHhtbCA9IHJlcXVpcmUoJy4veG1sbmFtZXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9odG1sZWx0cycpO1xudmFyIHN2ZyA9IHJlcXVpcmUoJy4vc3ZnJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgTVVUQVRFID0gcmVxdWlyZSgnLi9NdXRhdGlvbkNvbnN0YW50cycpO1xudmFyIE5BTUVTUEFDRSA9IHV0aWxzLk5BTUVTUEFDRTtcbnZhciBpc0FwaVdyaXRhYmxlID0gcmVxdWlyZShcIi4vY29uZmlnXCIpLmlzQXBpV3JpdGFibGU7XG5cbmZ1bmN0aW9uIERvY3VtZW50KGlzSFRNTCwgYWRkcmVzcykge1xuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5ET0NVTUVOVF9OT0RFO1xuICB0aGlzLmlzSFRNTCA9IGlzSFRNTDtcbiAgdGhpcy5fYWRkcmVzcyA9IGFkZHJlc3MgfHwgJ2Fib3V0OmJsYW5rJztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2xvYWRpbmcnO1xuICB0aGlzLmltcGxlbWVudGF0aW9uID0gbmV3IERPTUltcGxlbWVudGF0aW9uKCk7XG5cbiAgLy8gRE9NQ29yZSBzYXlzIHRoYXQgZG9jdW1lbnRzIGFyZSBhbHdheXMgYXNzb2NpYXRlZCB3aXRoIHRoZW1zZWx2ZXNcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gbnVsbDsgLy8gLi4uIGJ1dCBXM0MgdGVzdHMgZXhwZWN0IG51bGxcblxuICAvLyBUaGVzZSB3aWxsIGJlIGluaXRpYWxpemVkIGJ5IG91ciBjdXN0b20gdmVyc2lvbnMgb2ZcbiAgLy8gYXBwZW5kQ2hpbGQgYW5kIGluc2VydEJlZm9yZSB0aGF0IG92ZXJyaWRlIHRoZSBpbmhlcml0ZWRcbiAgLy8gTm9kZSBtZXRob2RzLlxuICAvLyBYWFg6IG92ZXJyaWRlIHRob3NlIG1ldGhvZHMhXG4gIHRoaXMuZG9jdHlwZSA9IG51bGw7XG4gIHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cbiAgLy8gXCJBc3NvY2lhdGVkIGluZXJ0IHRlbXBsYXRlIGRvY3VtZW50XCJcbiAgdGhpcy5fdGVtcGxhdGVEb2NDYWNoZSA9IG51bGw7XG5cbiAgLy8gRG9jdW1lbnRzIGFyZSBhbHdheXMgcm9vdGVkLCBieSBkZWZpbml0aW9uXG4gIHRoaXMuX25pZCA9IDE7XG4gIHRoaXMuX25leHRuaWQgPSAyOyAvLyBGb3IgbnVtYmVyaW5nIGNoaWxkcmVuIG9mIHRoZSBkb2N1bWVudFxuICB0aGlzLl9ub2RlcyA9IFtudWxsLCB0aGlzXTsgIC8vIG5pZCB0byBub2RlIG1hcFxuXG4gIC8vIFRoaXMgbWFpbnRhaW5zIHRoZSBtYXBwaW5nIGZyb20gZWxlbWVudCBpZHMgdG8gZWxlbWVudCBub2Rlcy5cbiAgLy8gV2UgbWF5IG5lZWQgdG8gdXBkYXRlIHRoaXMgbWFwcGluZyBldmVyeSB0aW1lIGEgbm9kZSBpcyByb290ZWRcbiAgLy8gb3IgdXByb290ZWQsIGFuZCBhbnkgdGltZSBhbiBhdHRyaWJ1dGUgaXMgYWRkZWQsIHJlbW92ZWQgb3IgY2hhbmdlZFxuICAvLyBvbiBhIHJvb3RlZCBlbGVtZW50LlxuICB0aGlzLmJ5SWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIFRoaXMgcHJvcGVydHkgaG9sZHMgYSBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgdmFsdWUgYWtpbiB0b1xuICAvLyBhIHRpbWVzdGFtcCB1c2VkIHRvIHJlY29yZCB0aGUgbGFzdCBtb2RpZmljYXRpb24gdGltZSBvZiBub2Rlc1xuICAvLyBhbmQgdGhlaXIgc3VidHJlZXMuIFNlZSB0aGUgbGFzdE1vZFRpbWUgYXR0cmlidXRlIGFuZCBtb2RpZnkoKVxuICAvLyBtZXRob2Qgb2YgdGhlIE5vZGUgY2xhc3MuIEFuZCBzZWUgRmlsdGVyZWRFbGVtZW50TGlzdCBmb3IgYW4gZXhhbXBsZVxuICAvLyBvZiB0aGUgdXNlIG9mIGxhc3RNb2RUaW1lXG4gIHRoaXMubW9kY2xvY2sgPSAwO1xufVxuXG4vLyBNYXAgZnJvbSBsb3dlcmNhc2UgZXZlbnQgY2F0ZWdvcnkgbmFtZXMgKHVzZWQgYXMgYXJndW1lbnRzIHRvXG4vLyBjcmVhdGVFdmVudCgpKSB0byB0aGUgcHJvcGVydHkgbmFtZSBpbiB0aGUgaW1wbCBvYmplY3Qgb2YgdGhlXG4vLyBldmVudCBjb25zdHJ1Y3Rvci5cbnZhciBzdXBwb3J0ZWRFdmVudHMgPSB7XG4gIGV2ZW50OiAnRXZlbnQnLFxuICBjdXN0b21ldmVudDogJ0N1c3RvbUV2ZW50JyxcbiAgdWlldmVudDogJ1VJRXZlbnQnLFxuICBtb3VzZWV2ZW50OiAnTW91c2VFdmVudCdcbn07XG5cbi8vIENlcnRhaW4gYXJndW1lbnRzIHRvIGRvY3VtZW50LmNyZWF0ZUV2ZW50KCkgbXVzdCBiZSB0cmVhdGVkIHNwZWNpYWxseVxudmFyIHJlcGxhY2VtZW50RXZlbnQgPSB7XG4gIGV2ZW50czogJ2V2ZW50JyxcbiAgaHRtbGV2ZW50czogJ2V2ZW50JyxcbiAgbW91c2VldmVudHM6ICdtb3VzZWV2ZW50JyxcbiAgbXV0YXRpb25ldmVudHM6ICdtdXRhdGlvbmV2ZW50JyxcbiAgdWlldmVudHM6ICd1aWV2ZW50J1xufTtcblxudmFyIG1pcnJvckF0dHIgPSBmdW5jdGlvbihmLCBuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG8gPSBmLmNhbGwodGhpcyk7XG4gICAgICBpZiAobykgeyByZXR1cm4gb1tuYW1lXTsgfVxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBvID0gZi5jYWxsKHRoaXMpO1xuICAgICAgaWYgKG8pIHsgb1tuYW1lXSA9IHZhbHVlOyB9XG4gICAgfSxcbiAgfTtcbn07XG5cbkRvY3VtZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTm9kZS5wcm90b3R5cGUsIHtcbiAgLy8gVGhpcyBtZXRob2QgYWxsb3dzIGRvbS5qcyB0byBjb21tdW5pY2F0ZSB3aXRoIGEgcmVuZGVyZXJcbiAgLy8gdGhhdCBkaXNwbGF5cyB0aGUgZG9jdW1lbnQgaW4gc29tZSB3YXlcbiAgLy8gWFhYOiBJIHNob3VsZCBwcm9iYWJseSBtb3ZlIHRoaXMgdG8gdGhlIHdpbmRvdyBvYmplY3RcbiAgX3NldE11dGF0aW9uSGFuZGxlcjogeyB2YWx1ZTogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIHRoaXMubXV0YXRpb25IYW5kbGVyID0gaGFuZGxlcjtcbiAgfX0sXG5cbiAgLy8gVGhpcyBtZXRob2QgYWxsb3dzIGRvbS5qcyB0byByZWNlaXZlIGV2ZW50IG5vdGlmaWNhdGlvbnNcbiAgLy8gZnJvbSB0aGUgcmVuZGVyZXIuXG4gIC8vIFhYWDogSSBzaG91bGQgcHJvYmFibHkgbW92ZSB0aGlzIHRvIHRoZSB3aW5kb3cgb2JqZWN0XG4gIF9kaXNwYXRjaFJlbmRlcmVyRXZlbnQ6IHsgdmFsdWU6IGZ1bmN0aW9uKHRhcmdldE5pZCwgdHlwZSwgZGV0YWlscykge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLl9ub2Rlc1t0YXJnZXROaWRdO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgdGFyZ2V0Ll9kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh0eXBlLCBkZXRhaWxzKSwgdHJ1ZSk7XG4gIH19LFxuXG4gIG5vZGVOYW1lOiB7IHZhbHVlOiAnI2RvY3VtZW50J30sXG4gIG5vZGVWYWx1ZToge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oKSB7fVxuICB9LFxuXG4gIC8vIFhYWDogRE9NQ29yZSBtYXkgcmVtb3ZlIGRvY3VtZW50VVJJLCBzbyBpdCBpcyBOWUkgZm9yIG5vd1xuICBkb2N1bWVudFVSSTogeyBnZXQ6IHV0aWxzLm55aSwgc2V0OiB1dGlscy5ueWkgfSxcbiAgY29tcGF0TW9kZTogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoZSBfcXVpcmtzIHByb3BlcnR5IGlzIHNldCBieSB0aGUgSFRNTCBwYXJzZXJcbiAgICByZXR1cm4gdGhpcy5fcXVpcmtzID8gJ0JhY2tDb21wYXQnIDogJ0NTUzFDb21wYXQnO1xuICB9fSxcbiAgcGFyZW50Tm9kZTogeyB2YWx1ZTogbnVsbCB9LFxuXG4gIGNyZWF0ZVRleHROb2RlOiB7IHZhbHVlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0KHRoaXMsICcnICsgZGF0YSk7XG4gIH19LFxuICBjcmVhdGVDb21tZW50OiB7IHZhbHVlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDb21tZW50KHRoaXMsIGRhdGEpO1xuICB9fSxcbiAgY3JlYXRlRG9jdW1lbnRGcmFnbWVudDogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudEZyYWdtZW50KHRoaXMpO1xuICB9fSxcbiAgY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uOiB7IHZhbHVlOiBmdW5jdGlvbih0YXJnZXQsIGRhdGEpIHtcbiAgICBpZiAoIXhtbC5pc1ZhbGlkTmFtZSh0YXJnZXQpIHx8IGRhdGEuaW5kZXhPZignPz4nKSAhPT0gLTEpXG4gICAgICB1dGlscy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoKTtcbiAgICByZXR1cm4gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIGRhdGEpO1xuICB9fSxcblxuICBjcmVhdGVFbGVtZW50OiB7IHZhbHVlOiBmdW5jdGlvbihsb2NhbE5hbWUpIHtcbiAgICBpZiAoIXhtbC5pc1ZhbGlkTmFtZShsb2NhbE5hbWUpKSB1dGlscy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoKTtcbiAgICBpZiAodGhpcy5pc0hUTUwpIGxvY2FsTmFtZSA9IHV0aWxzLnRvQVNDSUlMb3dlckNhc2UobG9jYWxOYW1lKTtcbiAgICByZXR1cm4gaHRtbC5jcmVhdGVFbGVtZW50KHRoaXMsIGxvY2FsTmFtZSwgbnVsbCk7XG4gIH0sIHdyaXRhYmxlOiBpc0FwaVdyaXRhYmxlIH0sXG5cbiAgY3JlYXRlRWxlbWVudE5TOiB7IHZhbHVlOiBmdW5jdGlvbihuYW1lc3BhY2UsIHF1YWxpZmllZE5hbWUpIHtcbiAgICBpZiAoIXhtbC5pc1ZhbGlkTmFtZShxdWFsaWZpZWROYW1lKSkgdXRpbHMuSW52YWxpZENoYXJhY3RlckVycm9yKCk7XG4gICAgaWYgKCF4bWwuaXNWYWxpZFFOYW1lKHF1YWxpZmllZE5hbWUpKSB1dGlscy5OYW1lc3BhY2VFcnJvcigpO1xuXG4gICAgdmFyIHBvcywgcHJlZml4LCBsb2NhbE5hbWU7XG4gICAgaWYgKChwb3MgPSBxdWFsaWZpZWROYW1lLmluZGV4T2YoJzonKSkgIT09IC0xKSB7XG4gICAgICBwcmVmaXggPSBxdWFsaWZpZWROYW1lLnN1YnN0cmluZygwLCBwb3MpO1xuICAgICAgbG9jYWxOYW1lID0gcXVhbGlmaWVkTmFtZS5zdWJzdHJpbmcocG9zKzEpO1xuXG4gICAgICBpZiAobmFtZXNwYWNlID09PSAnJyB8fFxuICAgICAgICAocHJlZml4ID09PSAneG1sJyAmJiBuYW1lc3BhY2UgIT09IE5BTUVTUEFDRS5YTUwpKVxuICAgICAgICB1dGlscy5OYW1lc3BhY2VFcnJvcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHByZWZpeCA9IG51bGw7XG4gICAgICBsb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuICAgIH1cblxuICAgIGlmICgoKHF1YWxpZmllZE5hbWUgPT09ICd4bWxucycgfHwgcHJlZml4ID09PSAneG1sbnMnKSAmJlxuICAgICAgIG5hbWVzcGFjZSAhPT0gTkFNRVNQQUNFLlhNTE5TKSB8fFxuICAgICAgKG5hbWVzcGFjZSA9PT0gTkFNRVNQQUNFLlhNTE5TICYmXG4gICAgICAgcXVhbGlmaWVkTmFtZSAhPT0gJ3htbG5zJyAmJlxuICAgICAgIHByZWZpeCAhPT0gJ3htbG5zJykpXG4gICAgICB1dGlscy5OYW1lc3BhY2VFcnJvcigpO1xuXG4gICAgaWYgKG5hbWVzcGFjZSA9PT0gTkFNRVNQQUNFLkhUTUwpIHtcbiAgICAgIHJldHVybiBodG1sLmNyZWF0ZUVsZW1lbnQodGhpcywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lc3BhY2UgPT09IE5BTUVTUEFDRS5TVkcpIHtcbiAgICAgIHJldHVybiBzdmcuY3JlYXRlRWxlbWVudCh0aGlzLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFbGVtZW50KHRoaXMsIGxvY2FsTmFtZSwgbmFtZXNwYWNlLCBwcmVmaXgpO1xuICB9LCB3cml0YWJsZTogaXNBcGlXcml0YWJsZSB9LFxuXG4gIGNyZWF0ZUV2ZW50OiB7IHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFdmVudChpbnRlcmZhY2VOYW1lKSB7XG4gICAgaW50ZXJmYWNlTmFtZSA9IGludGVyZmFjZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgbmFtZSA9IHJlcGxhY2VtZW50RXZlbnRbaW50ZXJmYWNlTmFtZV0gfHwgaW50ZXJmYWNlTmFtZTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBldmVudHNbc3VwcG9ydGVkRXZlbnRzW25hbWVdXTtcblxuICAgIGlmIChjb25zdHJ1Y3Rvcikge1xuICAgICAgdmFyIGUgPSBuZXcgY29uc3RydWN0b3IoKTtcbiAgICAgIGUuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB1dGlscy5Ob3RTdXBwb3J0ZWRFcnJvcigpO1xuICAgIH1cbiAgfX0sXG5cbiAgLy8gU2VlOiBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS1kb2N1bWVudC1jcmVhdGV0cmVld2Fsa2VyXG4gIGNyZWF0ZVRyZWVXYWxrZXI6IHt2YWx1ZTogZnVuY3Rpb24gKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgIHdoYXRUb1Nob3cgPSB3aGF0VG9TaG93ID09PSB1bmRlZmluZWQgPyBOb2RlRmlsdGVyLlNIT1dfQUxMIDogd2hhdFRvU2hvdztcblxuICAgIGlmIChmaWx0ZXIgJiYgdHlwZW9mIGZpbHRlciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdHlwZW9mIGZpbHRlci5hY2NlcHROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaWx0ZXIgPSBmaWx0ZXIuYWNjZXB0Tm9kZS5iaW5kKGZpbHRlcik7XG4gICAgICAvLyBTdXBwb3J0IGZpbHRlciBiZWluZyBhIGZ1bmN0aW9uXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyXG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmaWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbHRlciA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJlZVdhbGtlcihyb290LCB3aGF0VG9TaG93LCBmaWx0ZXIpO1xuICB9fSxcblxuICAvLyBTZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jZG9tLWRvY3VtZW50LWNyZWF0ZW5vZGVpdGVyYXRvclxuICBjcmVhdGVOb2RlSXRlcmF0b3I6IHt2YWx1ZTogZnVuY3Rpb24gKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgIHdoYXRUb1Nob3cgPSB3aGF0VG9TaG93ID09PSB1bmRlZmluZWQgPyBOb2RlRmlsdGVyLlNIT1dfQUxMIDogd2hhdFRvU2hvdztcblxuICAgIGlmIChmaWx0ZXIgJiYgdHlwZW9mIGZpbHRlciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdHlwZW9mIGZpbHRlci5hY2NlcHROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaWx0ZXIgPSBmaWx0ZXIuYWNjZXB0Tm9kZS5iaW5kKGZpbHRlcik7XG4gICAgICAvLyBTdXBwb3J0IGZpbHRlciBiZWluZyBhIGZ1bmN0aW9uXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9kb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3JcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmlsdGVyID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOb2RlSXRlcmF0b3Iocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKTtcbiAgfX0sXG5cbiAgLy8gTWFpbnRhaW4gdGhlIGRvY3VtZW50RWxlbWVudCBhbmRcbiAgLy8gZG9jdHlwZSBwcm9wZXJ0aWVzIG9mIHRoZSBkb2N1bWVudC4gIEVhY2ggb2YgdGhlIGZvbGxvd2luZ1xuICAvLyBtZXRob2RzIGNoYWlucyB0byB0aGUgTm9kZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWV0aG9kXG4gIC8vIHRvIGRvIHRoZSBhY3R1YWwgaW5zZXJ0aW5nLCByZW1vdmFsIG9yIHJlcGxhY2VtZW50LlxuXG4gIF91cGRhdGVEb2NUeXBlRWxlbWVudDogeyB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZURvY1R5cGVFbGVtZW50KCkge1xuICAgIHZhciBpLCBuLCBub2RlcyA9IHRoaXMuY2hpbGROb2RlcywgbGVuZ3RoID0gbm9kZXMubGVuZ3RoO1xuICAgIHRoaXMuZG9jdHlwZSA9IHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbnVsbDtcbiAgICBmb3IgKGk9MDsgaTxsZW5ndGg7IGkrKykge1xuICAgICAgbiA9IG5vZGVzW2ldO1xuICAgICAgaWYgKG4ubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfVFlQRV9OT0RFKVxuICAgICAgICB0aGlzLmRvY3R5cGUgPSBuO1xuICAgICAgZWxzZSBpZiAobi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpXG4gICAgICAgIHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbjtcbiAgICB9XG4gIH19LFxuXG4gIGluc2VydEJlZm9yZTogeyB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKGNoaWxkLCByZWZDaGlsZCkge1xuICAgIE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZS5jYWxsKHRoaXMsIGNoaWxkLCByZWZDaGlsZCk7XG4gICAgdGhpcy5fdXBkYXRlRG9jVHlwZUVsZW1lbnQoKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH19LFxuXG4gIHJlcGxhY2VDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZUNoaWxkKG5vZGUsIGNoaWxkKSB7XG4gICAgTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkLmNhbGwodGhpcywgbm9kZSwgY2hpbGQpO1xuICAgIHRoaXMuX3VwZGF0ZURvY1R5cGVFbGVtZW50KCk7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9fSxcblxuICByZW1vdmVDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICBOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZC5jYWxsKHRoaXMsIGNoaWxkKTtcbiAgICB0aGlzLl91cGRhdGVEb2NUeXBlRWxlbWVudCgpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfX0sXG5cbiAgZ2V0RWxlbWVudEJ5SWQ6IHsgdmFsdWU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIG4gPSB0aGlzLmJ5SWRbaWRdO1xuICAgIGlmICghbikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBNdWx0aUlkKSB7IC8vIHRoZXJlIHdhcyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgd2l0aCB0aGlzIGlkXG4gICAgICByZXR1cm4gbi5nZXRGaXJzdCgpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfX0sXG5cbiAgX2hhc011bHRpcGxlRWxlbWVudHNXaXRoSWQ6IHsgdmFsdWU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgLy8gVXNlZCBpbnRlcm5hbGx5IGJ5IHF1ZXJ5U2VsZWN0b3JBbGwgb3B0aW1pemF0aW9uXG4gICAgcmV0dXJuICh0aGlzLmJ5SWRbaWRdIGluc3RhbmNlb2YgTXVsdGlJZCk7XG4gIH19LFxuXG4gIC8vIEp1c3QgY29weSB0aGlzIG1ldGhvZCBmcm9tIHRoZSBFbGVtZW50IHByb3RvdHlwZVxuICBnZXRFbGVtZW50c0J5TmFtZTogeyB2YWx1ZTogRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeU5hbWUgfSxcbiAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IHsgdmFsdWU6IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lIH0sXG4gIGdldEVsZW1lbnRzQnlUYWdOYW1lTlM6IHsgdmFsdWU6IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMgfSxcbiAgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZTogeyB2YWx1ZTogRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSB9LFxuXG4gIGFkb3B0Tm9kZTogeyB2YWx1ZTogZnVuY3Rpb24gYWRvcHROb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKSB1dGlscy5Ob3RTdXBwb3J0ZWRFcnJvcigpO1xuXG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXG4gICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPT0gdGhpcylcbiAgICAgIHJlY3Vyc2l2ZWx5U2V0T3duZXIobm9kZSwgdGhpcyk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfX0sXG5cbiAgaW1wb3J0Tm9kZTogeyB2YWx1ZTogZnVuY3Rpb24gaW1wb3J0Tm9kZShub2RlLCBkZWVwKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRvcHROb2RlKG5vZGUuY2xvbmVOb2RlKGRlZXApKTtcbiAgfSwgd3JpdGFibGU6IGlzQXBpV3JpdGFibGUgfSxcblxuICAvLyBUaGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgYW5kIG1ldGhvZHMgYXJlIGZyb20gdGhlIEhUTUwgc3BlY1xuICBVUkw6IHsgZ2V0OiB1dGlscy5ueWkgfSxcbiAgZG9tYWluOiB7IGdldDogdXRpbHMubnlpLCBzZXQ6IHV0aWxzLm55aSB9LFxuICByZWZlcnJlcjogeyBnZXQ6IHV0aWxzLm55aSB9LFxuICBjb29raWU6IHsgZ2V0OiB1dGlscy5ueWksIHNldDogdXRpbHMubnlpIH0sXG4gIGxhc3RNb2RpZmllZDogeyBnZXQ6IHV0aWxzLm55aSB9LFxuICBsb2NhdGlvbjoge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB0aGlzLmRlZmF1bHRWaWV3ID8gdGhpcy5kZWZhdWx0Vmlldy5sb2NhdGlvbiA6IG51bGw7IC8vIGdoICM3NVxuXHR9LFxuXHRzZXQ6IHV0aWxzLm55aVxuICB9LFxuICBfdGl0bGVFbGVtZW50OiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFRoZSB0aXRsZSBlbGVtZW50IG9mIGEgZG9jdW1lbnQgaXMgdGhlIGZpcnN0IHRpdGxlIGVsZW1lbnQgaW4gdGhlXG4gICAgICAvLyBkb2N1bWVudCBpbiB0cmVlIG9yZGVyLCBpZiB0aGVyZSBpcyBvbmUsIG9yIG51bGwgb3RoZXJ3aXNlLlxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RpdGxlJykuaXRlbSgwKSB8fCBudWxsO1xuICAgIH1cbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVsdCA9IHRoaXMuX3RpdGxlRWxlbWVudDtcbiAgICAgIC8vIFRoZSBjaGlsZCB0ZXh0IGNvbnRlbnQgb2YgdGhlIHRpdGxlIGVsZW1lbnQsIG9yICcnIGlmIG51bGwuXG4gICAgICB2YXIgdmFsdWUgPSBlbHQgPyBlbHQudGV4dENvbnRlbnQgOiAnJztcbiAgICAgIC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGluIHZhbHVlXG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWyBcXHRcXG5cXHJcXGZdKy9nLCAnICcpLnRyaW0oKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBlbHQgPSB0aGlzLl90aXRsZUVsZW1lbnQ7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuaGVhZDtcbiAgICAgIGlmICghZWx0ICYmICFoZWFkKSB7IHJldHVybjsgLyogYWNjb3JkaW5nIHRvIHNwZWMgKi8gfVxuICAgICAgaWYgKCFlbHQpIHtcbiAgICAgICAgZWx0ID0gdGhpcy5jcmVhdGVFbGVtZW50KCd0aXRsZScpO1xuICAgICAgICBoZWFkLmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICB9XG4gICAgICBlbHQudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG4gIGRpcjogbWlycm9yQXR0cihmdW5jdGlvbigpIHtcbiAgICB2YXIgaHRtbEVsZW1lbnQgPSB0aGlzLmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoaHRtbEVsZW1lbnQgJiYgaHRtbEVsZW1lbnQudGFnTmFtZSA9PT0gJ0hUTUwnKSB7IHJldHVybiBodG1sRWxlbWVudDsgfVxuICB9LCAnZGlyJywgJycpLFxuICBmZ0NvbG9yOiBtaXJyb3JBdHRyKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5ib2R5OyB9LCAndGV4dCcsICcnKSxcbiAgbGlua0NvbG9yOiBtaXJyb3JBdHRyKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5ib2R5OyB9LCAnbGluaycsICcnKSxcbiAgdmxpbmtDb2xvcjogbWlycm9yQXR0cihmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuYm9keTsgfSwgJ3ZMaW5rJywgJycpLFxuICBhbGlua0NvbG9yOiBtaXJyb3JBdHRyKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5ib2R5OyB9LCAnYUxpbmsnLCAnJyksXG4gIGJnQ29sb3I6IG1pcnJvckF0dHIoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmJvZHk7IH0sICdiZ0NvbG9yJywgJycpLFxuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgPGJvZHk+IGNoaWxkIG9mIHRoZSBkb2N1bWVudCBlbGVtZW50LlxuICAvLyBYWFggRm9yIG5vdywgc2V0dGluZyB0aGlzIGF0dHJpYnV0ZSBpcyBub3QgaW1wbGVtZW50ZWQuXG4gIGJvZHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5hbWVkSFRNTENoaWxkKHRoaXMuZG9jdW1lbnRFbGVtZW50LCAnYm9keScpO1xuICAgIH0sXG4gICAgc2V0OiB1dGlscy5ueWlcbiAgfSxcbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCA8aGVhZD4gY2hpbGQgb2YgdGhlIGRvY3VtZW50IGVsZW1lbnQuXG4gIGhlYWQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmFtZWRIVE1MQ2hpbGQodGhpcy5kb2N1bWVudEVsZW1lbnQsICdoZWFkJyk7XG4gIH19LFxuICBpbWFnZXM6IHsgZ2V0OiB1dGlscy5ueWkgfSxcbiAgZW1iZWRzOiB7IGdldDogdXRpbHMubnlpIH0sXG4gIHBsdWdpbnM6IHsgZ2V0OiB1dGlscy5ueWkgfSxcbiAgbGlua3M6IHsgZ2V0OiB1dGlscy5ueWkgfSxcbiAgZm9ybXM6IHsgZ2V0OiB1dGlscy5ueWkgfSxcbiAgc2NyaXB0czogeyBnZXQ6IHV0aWxzLm55aSB9LFxuICBpbm5lckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuICBvdXRlckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuXG4gIHdyaXRlOiB7IHZhbHVlOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgaWYgKCF0aGlzLmlzSFRNTCkgdXRpbHMuSW52YWxpZFN0YXRlRXJyb3IoKTtcblxuICAgIC8vIFhYWDogc3RpbGwgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIGlnbm9yZSBwYXJ0XG4gICAgaWYgKCF0aGlzLl9wYXJzZXIgLyogJiYgdGhpcy5faWdub3JlX2Rlc3RydWN0aXZlX3dyaXRlcyA+IDAgKi8gKVxuICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKCF0aGlzLl9wYXJzZXIpIHtcbiAgICAgIC8vIFhYWCBjYWxsIGRvY3VtZW50Lm9wZW4sIGV0Yy5cbiAgICB9XG5cbiAgICB2YXIgcyA9IGFyZ3VtZW50cy5qb2luKCcnKTtcblxuICAgIC8vIElmIHRoZSBEb2N1bWVudCBvYmplY3QncyByZWxvYWQgb3ZlcnJpZGUgZmxhZyBpcyBzZXQsIHRoZW5cbiAgICAvLyBhcHBlbmQgdGhlIHN0cmluZyBjb25zaXN0aW5nIG9mIHRoZSBjb25jYXRlbmF0aW9uIG9mIGFsbCB0aGVcbiAgICAvLyBhcmd1bWVudHMgdG8gdGhlIG1ldGhvZCB0byB0aGUgRG9jdW1lbnQncyByZWxvYWQgb3ZlcnJpZGVcbiAgICAvLyBidWZmZXIuXG4gICAgLy8gWFhYOiBkb24ndCBrbm93IHdoYXQgdGhpcyBpcyBhYm91dC4gIFN0aWxsIGhhdmUgdG8gZG8gaXRcblxuICAgIC8vIElmIHRoZXJlIGlzIG5vIHBlbmRpbmcgcGFyc2luZy1ibG9ja2luZyBzY3JpcHQsIGhhdmUgdGhlXG4gICAgLy8gdG9rZW5pemVyIHByb2Nlc3MgdGhlIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGluc2VydGVkLCBvbmUgYXQgYVxuICAgIC8vIHRpbWUsIHByb2Nlc3NpbmcgcmVzdWx0aW5nIHRva2VucyBhcyB0aGV5IGFyZSBlbWl0dGVkLCBhbmRcbiAgICAvLyBzdG9wcGluZyB3aGVuIHRoZSB0b2tlbml6ZXIgcmVhY2hlcyB0aGUgaW5zZXJ0aW9uIHBvaW50IG9yIHdoZW5cbiAgICAvLyB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgdG9rZW5pemVyIGlzIGFib3J0ZWQgYnkgdGhlIHRyZWVcbiAgICAvLyBjb25zdHJ1Y3Rpb24gc3RhZ2UgKHRoaXMgY2FuIGhhcHBlbiBpZiBhIHNjcmlwdCBlbmQgdGFnIHRva2VuIGlzXG4gICAgLy8gZW1pdHRlZCBieSB0aGUgdG9rZW5pemVyKS5cblxuICAgIC8vIFhYWDogc3RpbGwgaGF2ZSB0byBkbyB0aGUgYWJvdmUuIFNvdW5kcyBhcyBpZiB3ZSBkb24ndFxuICAgIC8vIGFsd2F5cyBjYWxsIHBhcnNlKCkgaGVyZS4gIElmIHdlJ3JlIGJsb2NrZWQsIHRoZW4gd2UganVzdFxuICAgIC8vIGluc2VydCB0aGUgdGV4dCBpbnRvIHRoZSBzdHJlYW0gYnV0IGRvbid0IHBhcnNlIGl0IHJlZW50cmFudGx5Li4uXG5cbiAgICAvLyBJbnZva2UgdGhlIHBhcnNlciByZWVudHJhbnRseVxuICAgIHRoaXMuX3BhcnNlci5wYXJzZShzKTtcbiAgfX0sXG5cbiAgd3JpdGVsbjogeyB2YWx1ZTogZnVuY3Rpb24gd3JpdGVsbihhcmdzKSB7XG4gICAgdGhpcy53cml0ZShBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKGFyZ3VtZW50cywgJycpICsgJ1xcbicpO1xuICB9fSxcblxuICBvcGVuOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRvY3VtZW50RWxlbWVudCA9IG51bGw7XG4gIH19LFxuXG4gIGNsb3NlOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY29tcGxldGUnO1xuICAgIHZhciBldiA9IG5ldyBFdmVudCgnRE9NQ29udGVudExvYWRlZCcpO1xuICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoZXYsIHRydWUpO1xuICAgIGlmICh0aGlzLmRlZmF1bHRWaWV3KSB7XG4gICAgICBldiA9IG5ldyBFdmVudCgnbG9hZCcpO1xuICAgICAgdGhpcy5kZWZhdWx0Vmlldy5fZGlzcGF0Y2hFdmVudChldiwgdHJ1ZSk7XG4gICAgfVxuICB9fSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHNcbiAgY2xvbmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIC8vIENhbid0IGNsb25lIGFuIGVudGlyZSBkb2N1bWVudFxuICAgIHV0aWxzLkRhdGFDbG9uZUVycm9yKCk7XG4gIH19LFxuXG4gIGlzRXF1YWw6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwobikge1xuICAgIC8vIEFueSB0d28gZG9jdW1lbnRzIGFyZSBzaGFsbG93bHkgZXF1YWwuXG4gICAgLy8gTm9kZS5pc0VxdWFsTm9kZSB3aWxsIGFsc28gdGVzdCB0aGUgY2hpbGRyZW5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfX0sXG5cbiAgLy8gSW1wbGVtZW50YXRpb24tc3BlY2lmaWMgZnVuY3Rpb24uICBDYWxsZWQgd2hlbiBhIHRleHQsIGNvbW1lbnQsXG4gIC8vIG9yIHBpIHZhbHVlIGNoYW5nZXMuXG4gIG11dGF0ZVZhbHVlOiB7IHZhbHVlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKHRoaXMubXV0YXRpb25IYW5kbGVyKSB7XG4gICAgICB0aGlzLm11dGF0aW9uSGFuZGxlcih7XG4gICAgICAgIHR5cGU6IE1VVEFURS5WQUxVRSxcbiAgICAgICAgdGFyZ2V0OiBub2RlLFxuICAgICAgICBkYXRhOiBub2RlLmRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfX0sXG5cbiAgLy8gSW52b2tlZCB3aGVuIGFuIGF0dHJpYnV0ZSdzIHZhbHVlIGNoYW5nZXMuIEF0dHIgaG9sZHMgdGhlIG5ld1xuICAvLyB2YWx1ZS4gIG9sZHZhbCBpcyB0aGUgb2xkIHZhbHVlLiAgQXR0cmlidXRlIG11dGF0aW9ucyBjYW4gYWxzb1xuICAvLyBpbnZvbHZlIGNoYW5nZXMgdG8gdGhlIHByZWZpeCAoYW5kIHRoZXJlZm9yZSB0aGUgcXVhbGlmaWVkIG5hbWUpXG4gIG11dGF0ZUF0dHI6IHsgdmFsdWU6IGZ1bmN0aW9uKGF0dHIsIG9sZHZhbCkge1xuICAgIC8vIE1hbmFnZSBpZC0+ZWxlbWVudCBtYXBwaW5nIGZvciBnZXRFbGVtZW50c0J5SWQoKVxuICAgIC8vIFhYWDogdGhpcyBzcGVjaWFsIGNhc2UgaWQgaGFuZGxpbmcgc2hvdWxkIG5vdCBnbyBoZXJlLFxuICAgIC8vIGJ1dCBpbiB0aGUgYXR0cmlidXRlIGRlY2xhcmF0aW9uIGZvciB0aGUgaWQgYXR0cmlidXRlXG4gICAgLypcbiAgICBpZiAoYXR0ci5sb2NhbE5hbWUgPT09ICdpZCcgJiYgYXR0ci5uYW1lc3BhY2VVUkkgPT09IG51bGwpIHtcbiAgICAgIGlmIChvbGR2YWwpIGRlbElkKG9sZHZhbCwgYXR0ci5vd25lckVsZW1lbnQpO1xuICAgICAgYWRkSWQoYXR0ci52YWx1ZSwgYXR0ci5vd25lckVsZW1lbnQpO1xuICAgIH1cbiAgICAqL1xuICAgIGlmICh0aGlzLm11dGF0aW9uSGFuZGxlcikge1xuICAgICAgdGhpcy5tdXRhdGlvbkhhbmRsZXIoe1xuICAgICAgICB0eXBlOiBNVVRBVEUuQVRUUixcbiAgICAgICAgdGFyZ2V0OiBhdHRyLm93bmVyRWxlbWVudCxcbiAgICAgICAgYXR0cjogYXR0clxuICAgICAgfSk7XG4gICAgfVxuICB9fSxcblxuICAvLyBVc2VkIGJ5IHJlbW92ZUF0dHJpYnV0ZSBhbmQgcmVtb3ZlQXR0cmlidXRlTlMgZm9yIGF0dHJpYnV0ZXMuXG4gIG11dGF0ZVJlbW92ZUF0dHI6IHsgdmFsdWU6IGZ1bmN0aW9uKGF0dHIpIHtcbi8qXG4qIFRoaXMgaXMgbm93IGhhbmRsZWQgaW4gQXR0cmlidXRlcy5qc1xuICAgIC8vIE1hbmFnZSBpZCB0byBlbGVtZW50IG1hcHBpbmdcbiAgICBpZiAoYXR0ci5sb2NhbE5hbWUgPT09ICdpZCcgJiYgYXR0ci5uYW1lc3BhY2VVUkkgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuZGVsSWQoYXR0ci52YWx1ZSwgYXR0ci5vd25lckVsZW1lbnQpO1xuICAgIH1cbiovXG4gICAgaWYgKHRoaXMubXV0YXRpb25IYW5kbGVyKSB7XG4gICAgICB0aGlzLm11dGF0aW9uSGFuZGxlcih7XG4gICAgICAgIHR5cGU6IE1VVEFURS5SRU1PVkVfQVRUUixcbiAgICAgICAgdGFyZ2V0OiBhdHRyLm93bmVyRWxlbWVudCxcbiAgICAgICAgYXR0cjogYXR0clxuICAgICAgfSk7XG4gICAgfVxuICB9fSxcblxuICAvLyBDYWxsZWQgYnkgTm9kZS5yZW1vdmVDaGlsZCwgZXRjLiB0byByZW1vdmUgYSByb290ZWQgZWxlbWVudCBmcm9tXG4gIC8vIHRoZSB0cmVlLiBPbmx5IG5lZWRzIHRvIGdlbmVyYXRlIGEgc2luZ2xlIG11dGF0aW9uIGV2ZW50IHdoZW4gYVxuICAvLyBub2RlIGlzIHJlbW92ZWQsIGJ1dCBtdXN0IHJlY3Vyc2l2ZWx5IG1hcmsgYWxsIGRlc2NlbmRhbnRzIGFzIG5vdFxuICAvLyByb290ZWQuXG4gIG11dGF0ZVJlbW92ZTogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIC8vIFNlbmQgYSBzaW5nbGUgbXV0YXRpb24gZXZlbnRcbiAgICBpZiAodGhpcy5tdXRhdGlvbkhhbmRsZXIpIHtcbiAgICAgIHRoaXMubXV0YXRpb25IYW5kbGVyKHtcbiAgICAgICAgdHlwZTogTVVUQVRFLlJFTU9WRSxcbiAgICAgICAgdGFyZ2V0OiBub2RlLnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1hcmsgdGhpcyBhbmQgYWxsIGRlc2NlbmRhbnRzIGFzIG5vdCByb290ZWRcbiAgICByZWN1cnNpdmVseVVwcm9vdChub2RlKTtcbiAgfX0sXG5cbiAgLy8gQ2FsbGVkIHdoZW4gYSBuZXcgZWxlbWVudCBiZWNvbWVzIHJvb3RlZC4gIEl0IG11c3QgcmVjdXJzaXZlbHlcbiAgLy8gZ2VuZXJhdGUgbXV0YXRpb24gZXZlbnRzIGZvciBlYWNoIG9mIHRoZSBjaGlsZHJlbiwgYW5kIG1hcmsgdGhlbSBhbGxcbiAgLy8gYXMgcm9vdGVkLlxuICBtdXRhdGVJbnNlcnQ6IHsgdmFsdWU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAvLyBNYXJrIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50cyBhcyByb290ZWRcbiAgICByZWN1cnNpdmVseVJvb3Qobm9kZSk7XG5cbiAgICAvLyBTZW5kIGEgc2luZ2xlIG11dGF0aW9uIGV2ZW50XG4gICAgaWYgKHRoaXMubXV0YXRpb25IYW5kbGVyKSB7XG4gICAgICB0aGlzLm11dGF0aW9uSGFuZGxlcih7XG4gICAgICAgIHR5cGU6IE1VVEFURS5JTlNFUlQsXG4gICAgICAgIHRhcmdldDogbm9kZS5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBub2RlXG4gICAgICB9KTtcbiAgICB9XG4gIH19LFxuXG4gIC8vIENhbGxlZCB3aGVuIGEgcm9vdGVkIGVsZW1lbnQgaXMgbW92ZWQgd2l0aGluIHRoZSBkb2N1bWVudFxuICBtdXRhdGVNb3ZlOiB7IHZhbHVlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKHRoaXMubXV0YXRpb25IYW5kbGVyKSB7XG4gICAgICB0aGlzLm11dGF0aW9uSGFuZGxlcih7XG4gICAgICAgIHR5cGU6IE1VVEFURS5NT1ZFLFxuICAgICAgICB0YXJnZXQ6IG5vZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfX0sXG5cblxuICAvLyBBZGQgYSBtYXBwaW5nIGZyb20gIGlkIHRvIG4gZm9yIG4ub3duZXJEb2N1bWVudFxuICBhZGRJZDogeyB2YWx1ZTogZnVuY3Rpb24gYWRkSWQoaWQsIG4pIHtcbiAgICB2YXIgdmFsID0gdGhpcy5ieUlkW2lkXTtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgdGhpcy5ieUlkW2lkXSA9IG47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gVE9ETzogQWRkIGEgd2F5IHRvIG9wdC1vdXQgY29uc29sZSB3YXJuaW5nc1xuICAgICAgLy9jb25zb2xlLndhcm4oJ0R1cGxpY2F0ZSBlbGVtZW50IGlkICcgKyBpZCk7XG4gICAgICBpZiAoISh2YWwgaW5zdGFuY2VvZiBNdWx0aUlkKSkge1xuICAgICAgICB2YWwgPSBuZXcgTXVsdGlJZCh2YWwpO1xuICAgICAgICB0aGlzLmJ5SWRbaWRdID0gdmFsO1xuICAgICAgfVxuICAgICAgdmFsLmFkZChuKTtcbiAgICB9XG4gIH19LFxuXG4gIC8vIERlbGV0ZSB0aGUgbWFwcGluZyBmcm9tIGlkIHRvIG4gZm9yIG4ub3duZXJEb2N1bWVudFxuICBkZWxJZDogeyB2YWx1ZTogZnVuY3Rpb24gZGVsSWQoaWQsIG4pIHtcbiAgICB2YXIgdmFsID0gdGhpcy5ieUlkW2lkXTtcbiAgICB1dGlscy5hc3NlcnQodmFsKTtcblxuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBNdWx0aUlkKSB7XG4gICAgICB2YWwuZGVsKG4pO1xuICAgICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHsgLy8gY29udmVydCBiYWNrIHRvIGEgc2luZ2xlIG5vZGVcbiAgICAgICAgdGhpcy5ieUlkW2lkXSA9IHZhbC5kb3duZ3JhZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmJ5SWRbaWRdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfX0sXG5cbiAgX3Jlc29sdmU6IHsgdmFsdWU6IGZ1bmN0aW9uKGhyZWYpIHtcbiAgICAvL1hYWDogQ2FjaGUgdGhlIFVSTFxuICAgIHJldHVybiBuZXcgVVJMKHRoaXMuX2RvY3VtZW50QmFzZVVSTCkucmVzb2x2ZShocmVmKTtcbiAgfX0sXG5cbiAgX2RvY3VtZW50QmFzZVVSTDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFhYWDogVGhpcyBpcyBub3QgaW1wbGVtZW50ZWQgY29ycmVjdGx5IHlldFxuICAgIHZhciB1cmwgPSB0aGlzLl9hZGRyZXNzO1xuICAgIGlmICh1cmwgPT09ICdhYm91dDpibGFuaycpIHVybCA9ICcvJztcblxuICAgIHZhciBiYXNlID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdiYXNlW2hyZWZdJyk7XG4gICAgaWYgKGJhc2UpIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKHVybCkucmVzb2x2ZShiYXNlLmdldEF0dHJpYnV0ZSgnaHJlZicpKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcblxuICAgIC8vIFRoZSBkb2N1bWVudCBiYXNlIFVSTCBvZiBhIERvY3VtZW50IG9iamVjdCBpcyB0aGVcbiAgICAvLyBhYnNvbHV0ZSBVUkwgb2J0YWluZWQgYnkgcnVubmluZyB0aGVzZSBzdWJzdGVwczpcblxuICAgIC8vICAgICBMZXQgZmFsbGJhY2sgYmFzZSB1cmwgYmUgdGhlIGRvY3VtZW50J3MgYWRkcmVzcy5cblxuICAgIC8vICAgICBJZiBmYWxsYmFjayBiYXNlIHVybCBpcyBhYm91dDpibGFuaywgYW5kIHRoZVxuICAgIC8vICAgICBEb2N1bWVudCdzIGJyb3dzaW5nIGNvbnRleHQgaGFzIGEgY3JlYXRvciBicm93c2luZ1xuICAgIC8vICAgICBjb250ZXh0LCB0aGVuIGxldCBmYWxsYmFjayBiYXNlIHVybCBiZSB0aGUgZG9jdW1lbnRcbiAgICAvLyAgICAgYmFzZSBVUkwgb2YgdGhlIGNyZWF0b3IgRG9jdW1lbnQgaW5zdGVhZC5cblxuICAgIC8vICAgICBJZiB0aGUgRG9jdW1lbnQgaXMgYW4gaWZyYW1lIHNyY2RvYyBkb2N1bWVudCwgdGhlblxuICAgIC8vICAgICBsZXQgZmFsbGJhY2sgYmFzZSB1cmwgYmUgdGhlIGRvY3VtZW50IGJhc2UgVVJMIG9mXG4gICAgLy8gICAgIHRoZSBEb2N1bWVudCdzIGJyb3dzaW5nIGNvbnRleHQncyBicm93c2luZyBjb250ZXh0XG4gICAgLy8gICAgIGNvbnRhaW5lcidzIERvY3VtZW50IGluc3RlYWQuXG5cbiAgICAvLyAgICAgSWYgdGhlcmUgaXMgbm8gYmFzZSBlbGVtZW50IHRoYXQgaGFzIGFuIGhyZWZcbiAgICAvLyAgICAgYXR0cmlidXRlLCB0aGVuIHRoZSBkb2N1bWVudCBiYXNlIFVSTCBpcyBmYWxsYmFja1xuICAgIC8vICAgICBiYXNlIHVybDsgYWJvcnQgdGhlc2Ugc3RlcHMuIE90aGVyd2lzZSwgbGV0IHVybCBiZVxuICAgIC8vICAgICB0aGUgdmFsdWUgb2YgdGhlIGhyZWYgYXR0cmlidXRlIG9mIHRoZSBmaXJzdCBzdWNoXG4gICAgLy8gICAgIGVsZW1lbnQuXG5cbiAgICAvLyAgICAgUmVzb2x2ZSB1cmwgcmVsYXRpdmUgdG8gZmFsbGJhY2sgYmFzZSB1cmwgKHRodXMsXG4gICAgLy8gICAgIHRoZSBiYXNlIGhyZWYgYXR0cmlidXRlIGlzbid0IGFmZmVjdGVkIGJ5IHhtbDpiYXNlXG4gICAgLy8gICAgIGF0dHJpYnV0ZXMpLlxuXG4gICAgLy8gICAgIFRoZSBkb2N1bWVudCBiYXNlIFVSTCBpcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmV2aW91c1xuICAgIC8vICAgICBzdGVwIGlmIGl0IHdhcyBzdWNjZXNzZnVsOyBvdGhlcndpc2UgaXQgaXMgZmFsbGJhY2tcbiAgICAvLyAgICAgYmFzZSB1cmwuXG4gIH19LFxuXG4gIF90ZW1wbGF0ZURvYzogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fdGVtcGxhdGVEb2NDYWNoZSkge1xuICAgICAgLy8gXCJhc3NvY2lhdGVkIGluZXJ0IHRlbXBsYXRlIGRvY3VtZW50XCJcbiAgICAgIHZhciBuZXdEb2MgPSBuZXcgRG9jdW1lbnQodGhpcy5pc0hUTUwsIHRoaXMuX2FkZHJlc3MpO1xuICAgICAgdGhpcy5fdGVtcGxhdGVEb2NDYWNoZSA9IG5ld0RvYy5fdGVtcGxhdGVEb2NDYWNoZSA9IG5ld0RvYztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlRG9jQ2FjaGU7XG4gIH19LFxuXG4gIHF1ZXJ5U2VsZWN0b3I6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdChzZWxlY3RvciwgdGhpcylbMF07XG4gIH19LFxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIG5vZGVzID0gc2VsZWN0KHNlbGVjdG9yLCB0aGlzKTtcbiAgICByZXR1cm4gbm9kZXMuaXRlbSA/IG5vZGVzIDogbmV3IE5vZGVMaXN0KG5vZGVzKTtcbiAgfX1cblxufSk7XG5cblxudmFyIGV2ZW50SGFuZGxlclR5cGVzID0gW1xuICAnYWJvcnQnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdjaGFuZ2UnLCAnY2xpY2snLCAnY29udGV4dG1lbnUnLFxuICAnY3VlY2hhbmdlJywgJ2RibGNsaWNrJywgJ2RyYWcnLCAnZHJhZ2VuZCcsICdkcmFnZW50ZXInLCAnZHJhZ2xlYXZlJyxcbiAgJ2RyYWdvdmVyJywgJ2RyYWdzdGFydCcsICdkcm9wJywgJ2R1cmF0aW9uY2hhbmdlJywgJ2VtcHRpZWQnLCAnZW5kZWQnLFxuICAnaW5wdXQnLCAnaW52YWxpZCcsICdrZXlkb3duJywgJ2tleXByZXNzJywgJ2tleXVwJywgJ2xvYWRlZGRhdGEnLFxuICAnbG9hZGVkbWV0YWRhdGEnLCAnbG9hZHN0YXJ0JywgJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2VvdXQnLFxuICAnbW91c2VvdmVyJywgJ21vdXNldXAnLCAnbW91c2V3aGVlbCcsICdwYXVzZScsICdwbGF5JywgJ3BsYXlpbmcnLFxuICAncHJvZ3Jlc3MnLCAncmF0ZWNoYW5nZScsICdyZWFkeXN0YXRlY2hhbmdlJywgJ3Jlc2V0JywgJ3NlZWtlZCcsXG4gICdzZWVraW5nJywgJ3NlbGVjdCcsICdzaG93JywgJ3N0YWxsZWQnLCAnc3VibWl0JywgJ3N1c3BlbmQnLFxuICAndGltZXVwZGF0ZScsICd2b2x1bWVjaGFuZ2UnLCAnd2FpdGluZycsXG5cbiAgJ2JsdXInLCAnZXJyb3InLCAnZm9jdXMnLCAnbG9hZCcsICdzY3JvbGwnXG5dO1xuXG4vLyBBZGQgZXZlbnQgaGFuZGxlciBpZGwgYXR0cmlidXRlIGdldHRlcnMgYW5kIHNldHRlcnMgdG8gRG9jdW1lbnRcbmV2ZW50SGFuZGxlclR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAvLyBEZWZpbmUgdGhlIGV2ZW50IGhhbmRsZXIgcmVnaXN0cmF0aW9uIElETCBhdHRyaWJ1dGUgZm9yIHRoaXMgdHlwZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnQucHJvdG90eXBlLCAnb24nICsgdHlwZSwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0RXZlbnRIYW5kbGVyKHR5cGUpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodHlwZSwgdik7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBuYW1lZEhUTUxDaGlsZChwYXJlbnQsIG5hbWUpIHtcbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuaXNIVE1MKSB7XG4gICAgdmFyIGtpZHMgPSBwYXJlbnQuY2hpbGROb2RlcztcbiAgICBmb3IodmFyIGkgPSAwLCBuID0ga2lkcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGlmIChraWRzW2ldLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgICBraWRzW2ldLmxvY2FsTmFtZSA9PT0gbmFtZSAmJlxuICAgICAgICBraWRzW2ldLm5hbWVzcGFjZVVSSSA9PT0gTkFNRVNQQUNFLkhUTUwpIHtcbiAgICAgICAgcmV0dXJuIGtpZHNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByb290KG4pIHtcbiAgbi5fbmlkID0gbi5vd25lckRvY3VtZW50Ll9uZXh0bmlkKys7XG4gIG4ub3duZXJEb2N1bWVudC5fbm9kZXNbbi5fbmlkXSA9IG47XG4gIC8vIE1hbmFnZSBpZCB0byBlbGVtZW50IG1hcHBpbmdcbiAgaWYgKG4ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgdmFyIGlkID0gbi5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgaWYgKGlkKSBuLm93bmVyRG9jdW1lbnQuYWRkSWQoaWQsIG4pO1xuXG4gICAgLy8gU2NyaXB0IGVsZW1lbnRzIG5lZWQgdG8ga25vdyB3aGVuIHRoZXkncmUgaW5zZXJ0ZWRcbiAgICAvLyBpbnRvIHRoZSBkb2N1bWVudFxuICAgIGlmIChuLl9yb290aG9vaykgbi5fcm9vdGhvb2soKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cHJvb3Qobikge1xuICAvLyBNYW5hZ2UgaWQgdG8gZWxlbWVudCBtYXBwaW5nXG4gIGlmIChuLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHZhciBpZCA9IG4uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGlmIChpZCkgbi5vd25lckRvY3VtZW50LmRlbElkKGlkLCBuKTtcbiAgfVxuICBuLm93bmVyRG9jdW1lbnQuX25vZGVzW24uX25pZF0gPSB1bmRlZmluZWQ7XG4gIG4uX25pZCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlbHlSb290KG5vZGUpIHtcbiAgcm9vdChub2RlKTtcbiAgLy8gWFhYOlxuICAvLyBhY2Nlc3NpbmcgY2hpbGROb2RlcyBvbiBhIGxlYWYgbm9kZSBjcmVhdGVzIGEgbmV3IGFycmF5IHRoZVxuICAvLyBmaXJzdCB0aW1lLCBzbyBiZSBjYXJlZnVsIHRvIHdyaXRlIHRoaXMgbG9vcCBzbyB0aGF0IGl0XG4gIC8vIGRvZXNuJ3QgZG8gdGhhdC4gbm9kZSBpcyBwb2x5bW9ycGhpYywgc28gbWF5YmUgdGhpcyBpcyBoYXJkIHRvXG4gIC8vIG9wdGltaXplPyAgVHJ5IHN3aXRjaGluZyBvbiBub2RlVHlwZT9cbi8qXG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHZhciBraWRzID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgIGZvcih2YXIgaSA9IDAsIG4gPSBraWRzLmxlbmd0aDsgIGkgPCBuOyBpKyspXG4gICAgICByZWN1cnNpdmVseVJvb3Qoa2lkc1tpXSk7XG4gIH1cbiovXG4gIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHZhciBraWRzID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgIGZvcih2YXIgaSA9IDAsIG4gPSBraWRzLmxlbmd0aDsgaSA8IG47IGkrKylcbiAgICAgIHJlY3Vyc2l2ZWx5Um9vdChraWRzW2ldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVseVVwcm9vdChub2RlKSB7XG4gIHVwcm9vdChub2RlKTtcbiAgZm9yKHZhciBpID0gMCwgbiA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBuOyBpKyspXG4gICAgcmVjdXJzaXZlbHlVcHJvb3Qobm9kZS5jaGlsZE5vZGVzW2ldKTtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlbHlTZXRPd25lcihub2RlLCBvd25lcikge1xuICBub2RlLm93bmVyRG9jdW1lbnQgPSBvd25lcjtcbiAgbm9kZS5fbGFzdE1vZFRpbWUgPSB1bmRlZmluZWQ7IC8vIG1vZCB0aW1lcyBhcmUgZG9jdW1lbnQtYmFzZWRcbiAgdmFyIGtpZHMgPSBub2RlLmNoaWxkTm9kZXM7XG4gIGZvcih2YXIgaSA9IDAsIG4gPSBraWRzLmxlbmd0aDsgaSA8IG47IGkrKylcbiAgICByZWN1cnNpdmVseVNldE93bmVyKGtpZHNbaV0sIG93bmVyKTtcbn1cblxuLy8gQSBjbGFzcyBmb3Igc3RvcmluZyBtdWx0aXBsZSBub2RlcyB3aXRoIHRoZSBzYW1lIElEXG5mdW5jdGlvbiBNdWx0aUlkKG5vZGUpIHtcbiAgdGhpcy5ub2RlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMubm9kZXNbbm9kZS5fbmlkXSA9IG5vZGU7XG4gIHRoaXMubGVuZ3RoID0gMTtcbiAgdGhpcy5maXJzdE5vZGUgPSB1bmRlZmluZWQ7XG59XG5cbi8vIEFkZCBhIG5vZGUgdG8gdGhlIGxpc3QsIHdpdGggTygxKSB0aW1lXG5NdWx0aUlkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICghdGhpcy5ub2Rlc1tub2RlLl9uaWRdKSB7XG4gICAgdGhpcy5ub2Rlc1tub2RlLl9uaWRdID0gbm9kZTtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuZmlyc3ROb2RlID0gdW5kZWZpbmVkO1xuICB9XG59O1xuXG4vLyBSZW1vdmUgYSBub2RlIGZyb20gdGhlIGxpc3QsIHdpdGggTygxKSB0aW1lXG5NdWx0aUlkLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLm5vZGVzW25vZGUuX25pZF0pIHtcbiAgICBkZWxldGUgdGhpcy5ub2Rlc1tub2RlLl9uaWRdO1xuICAgIHRoaXMubGVuZ3RoLS07XG4gICAgdGhpcy5maXJzdE5vZGUgPSB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbi8vIEdldCB0aGUgZmlyc3Qgbm9kZSBmcm9tIHRoZSBsaXN0LCBpbiB0aGUgZG9jdW1lbnQgb3JkZXJcbi8vIFRha2VzIE8oTikgdGltZSBpbiB0aGUgc2l6ZSBvZiB0aGUgbGlzdCwgd2l0aCBhIGNhY2hlIHRoYXQgaXMgaW52YWxpZGF0ZWRcbi8vIHdoZW4gdGhlIGxpc3QgaXMgbW9kaWZpZWQuXG5NdWx0aUlkLnByb3RvdHlwZS5nZXRGaXJzdCA9IGZ1bmN0aW9uKCkge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgaWYgKCF0aGlzLmZpcnN0Tm9kZSkge1xuICAgIHZhciBuaWQ7XG4gICAgZm9yIChuaWQgaW4gdGhpcy5ub2Rlcykge1xuICAgICAgaWYgKHRoaXMuZmlyc3ROb2RlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgdGhpcy5maXJzdE5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcy5ub2Rlc1tuaWRdKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HKSB7XG4gICAgICAgIHRoaXMuZmlyc3ROb2RlID0gdGhpcy5ub2Rlc1tuaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcy5maXJzdE5vZGU7XG59O1xuXG4vLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBub2RlIGxlZnQsIHJldHVybiBpdC4gT3RoZXJ3aXNlIHJldHVybiBcInRoaXNcIi5cbk11bHRpSWQucHJvdG90eXBlLmRvd25ncmFkZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgbmlkO1xuICAgIGZvciAobmlkIGluIHRoaXMubm9kZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzW25pZF07XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0RvY3VtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRUeXBlO1xuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIExlYWYgPSByZXF1aXJlKCcuL0xlYWYnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBDaGlsZE5vZGUgPSByZXF1aXJlKCcuL0NoaWxkTm9kZScpO1xuXG5mdW5jdGlvbiBEb2N1bWVudFR5cGUobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gIC8vIFVubGlrZSBvdGhlciBub2RlcywgZG9jdHlwZSBub2RlcyBhbHdheXMgc3RhcnQgb2ZmIHVub3duZWRcbiAgLy8gdW50aWwgaW5zZXJ0ZWRcbiAgdGhpcy5ub2RlVHlwZSA9IE5vZGUuRE9DVU1FTlRfVFlQRV9OT0RFO1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBudWxsO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLnB1YmxpY0lkID0gcHVibGljSWQgfHwgXCJcIjtcbiAgdGhpcy5zeXN0ZW1JZCA9IHN5c3RlbUlkIHx8IFwiXCI7XG59XG5cbkRvY3VtZW50VHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExlYWYucHJvdG90eXBlLCB7XG4gIG5vZGVOYW1lOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLm5hbWU7IH19LFxuICBub2RlVmFsdWU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKCkge31cbiAgfSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHNcbiAgY2xvbmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHV0aWxzLkRhdGFDbG9uZUVycm9yKCk7XG4gIH19LFxuXG4gIGlzRXF1YWw6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwobikge1xuICAgIHJldHVybiB0aGlzLm5hbWUgPT09IG4ubmFtZSAmJlxuICAgICAgdGhpcy5wdWJsaWNJZCA9PT0gbi5wdWJsaWNJZCAmJlxuICAgICAgdGhpcy5zeXN0ZW1JZCA9PT0gbi5zeXN0ZW1JZDtcbiAgfX1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhEb2N1bWVudFR5cGUucHJvdG90eXBlLCBDaGlsZE5vZGUpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvRG9jdW1lbnRUeXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gSFRNTFBhcnNlcjtcblxudmFyIERvY3VtZW50ID0gcmVxdWlyZSgnLi9Eb2N1bWVudCcpO1xudmFyIERvY3VtZW50VHlwZSA9IHJlcXVpcmUoJy4vRG9jdW1lbnRUeXBlJyk7XG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIE5BTUVTUEFDRSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5OQU1FU1BBQ0U7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vaHRtbGVsdHMnKTtcbnZhciBpbXBsID0gaHRtbC5lbGVtZW50cztcblxudmFyIHB1c2hBbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYmluZChBcnJheS5wcm90b3R5cGUucHVzaCk7XG5cbi8qXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIEhUTUwgcGFyc2luZyBhbGdvcml0aG0uXG4gKiBUaGUgYWxnb3JpdGhtIGFuZCB0aGUgaW1wbGVtZW50YXRpb24gYXJlIGNvbXBsZXggYmVjYXVzZSBIVE1MXG4gKiBleHBsaWNpdGx5IGRlZmluZXMgaG93IHRoZSBwYXJzZXIgc2hvdWxkIGJlaGF2ZSBmb3IgYWxsIHBvc3NpYmxlXG4gKiB2YWxpZCBhbmQgaW52YWxpZCBpbnB1dHMuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogVGhlIGZpbGUgZGVmaW5lcyBhIHNpbmdsZSBIVE1MUGFyc2VyKCkgZnVuY3Rpb24sIHdoaWNoIGRvbS5qcyBleHBvc2VzXG4gKiBwdWJsaWNseSBhcyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5tb3pIVE1MUGFyc2VyKCkuIFRoaXMgaXMgYVxuICogZmFjdG9yeSBmdW5jdGlvbiwgbm90IGEgY29uc3RydWN0b3IuXG4gKlxuICogV2hlbiB5b3UgY2FsbCBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5tb3pIVE1MUGFyc2VyKCksIGl0IHJldHVybnNcbiAqIGFuIG9iamVjdCB0aGF0IGhhcyBwYXJzZSgpIGFuZCBkb2N1bWVudCgpIG1ldGhvZHMuIFRvIHBhcnNlIEhUTUwgdGV4dCxcbiAqIHBhc3MgdGhlIHRleHQgKGluIG9uZSBvciBtb3JlIGNodW5rcykgdG8gdGhlIHBhcnNlKCkgbWV0aG9kLiAgV2hlblxuICogeW91J3ZlIHBhc3NlZCBhbGwgdGhlIHRleHQgKG9uIHRoZSBsYXN0IGNodW5rLCBvciBhZnRlcndhcmQpIHBhc3NcbiAqIHRydWUgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBwYXJzZSgpIHRvIHRlbGwgdGhlIHBhcnNlciB0aGF0IHRoZXJlXG4gKiBpcyBubyBtb3JlIGNvbWluZy4gQ2FsbCBkb2N1bWVudCgpIHRvIGdldCB0aGUgZG9jdW1lbnQgb2JqZWN0IHRoYXRcbiAqIHRoZSBwYXJzZXIgaXMgcGFyc2luZyBpbnRvLiAgWW91IGNhbiBjYWxsIHRoaXMgYXQgYW55IHRpbWUsIGJlZm9yZVxuICogb3IgYWZ0ZXIgY2FsbGluZyBwYXJzZSgpLlxuICpcbiAqIFRoZSBmaXJzdCBhcmd1bWVudCB0byBtb3pIVE1MUGFyc2VyIGlzIHRoZSBhYnNvbHV0ZSBVUkwgb2YgdGhlIGRvY3VtZW50LlxuICpcbiAqIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seS4gIFBhc3MgYW5cbiAqIGVsZW1lbnQgYXMgdGhlIGZyYWdtZW50Q29udGV4dCB0byBkbyBpbm5lckhUTUwgcGFyc2luZyBmb3IgdGhlXG4gKiBlbGVtZW50LiAgVG8gZG8gaW5uZXJIVE1MIHBhcnNpbmcgb24gYSBkb2N1bWVudCwgcGFzcyBudWxsLiBPdGhlcndpc2UsXG4gKiBvbWl0IHRoZSAybmQgYXJndW1lbnQuIFNlZSBIVE1MRWxlbWVudC5pbm5lckhUTUwgZm9yIGFuIGV4YW1wbGUuICBOb3RlXG4gKiB0aGF0IGlmIHlvdSBwYXNzIGEgY29udGV4dCBlbGVtZW50LCB0aGUgZW5kKCkgbWV0aG9kIHdpbGwgcmV0dXJuIGFuXG4gKiB1bndyYXBwZWQgZG9jdW1lbnQgaW5zdGVhZCBvZiBhIHdyYXBwZWQgb25lLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGRldGFpbHM6XG4gKlxuICogVGhpcyBpcyBhIGxvbmcgZmlsZSBvZiBhbG1vc3QgNzAwMCBsaW5lcy4gSXQgaXMgc3RydWN0dXJlZCBhcyBvbmVcbiAqIGJpZyBmdW5jdGlvbiBuZXN0ZWQgd2l0aGluIGFub3RoZXIgYmlnIGZ1bmN0aW9uLiAgVGhlIG91dGVyXG4gKiBmdW5jdGlvbiBkZWZpbmVzIGEgYnVuY2ggb2YgY29uc3RhbnQgZGF0YSwgdXRpbGl0eSBmdW5jdGlvbnNcbiAqIHRoYXQgdXNlIHRoYXQgZGF0YSwgYW5kIGEgY291cGxlIG9mIGNsYXNzZXMgdXNlZCBieSB0aGUgcGFyc2VyLlxuICogVGhlIG91dGVyIGZ1bmN0aW9uIGFsc28gZGVmaW5lcyBhbmQgcmV0dXJucyB0aGVcbiAqIGlubmVyIGZ1bmN0aW9uLiBUaGlzIGlubmVyIGZ1bmN0aW9uIGlzIHRoZSBIVE1MUGFyc2VyIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIHRoYXQgaW1wbGVtZW50cyB0aGUgcGFyc2VyIGFuZCBob2xkcyBhbGwgdGhlIHBhcnNlciBzdGF0ZVxuICogYXMgbG9jYWwgdmFyaWFibGVzLiAgVGhlIEhUTUxQYXJzZXIgZnVuY3Rpb24gaXMgcXVpdGUgYmlnIGJlY2F1c2VcbiAqIGl0IGRlZmluZXMgbWFueSBuZXN0ZWQgZnVuY3Rpb25zIHRoYXQgdXNlIHRob3NlIGxvY2FsIHZhcmlhYmxlcy5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUgdGlnaHRseSBjb3VwbGVkIHBhcnNlciBzdGFnZXM6IGEgc2Nhbm5lciwgYVxuICogdG9rZW5pemVyIGFuZCBhIHRyZWUgYnVpbGRlci4gSW4gYSAocG9zc2libHkgbWlzZ3VpZGVkKSBhdHRlbXB0IGF0XG4gKiBlZmZpY2llbmN5LCB0aGUgc3RhZ2VzIGFyZSBub3QgaW1wbGVtZW50ZWQgYXMgc2VwYXJhdGUgY2xhc3NlczpcbiAqIGV2ZXJ5dGhpbmcgc2hhcmVzIHN0YXRlIGFuZCBpcyAobW9zdGx5KSBpbXBsZW1lbnRlZCBpbiBpbXBlcmF0aXZlXG4gKiAocmF0aGVyIHRoYW4gT08pIHN0eWxlLlxuICpcbiAqIFRoZSBzdGFnZXMgb2YgdGhlIHBhcnNlciB3b3JrIGxpa2UgdGhpczogV2hlbiB0aGUgY2xpZW50IGNvZGUgY2FsbHNcbiAqIHRoZSBwYXJzZXIncyBwYXJzZSgpIG1ldGhvZCwgdGhlIHNwZWNpZmllZCBzdHJpbmcgaXMgcGFzc2VkIHRvXG4gKiBzY2FuQ2hhcnMoKS4gVGhlIHNjYW5uZXIgbG9vcHMgdGhyb3VnaCB0aGF0IHN0cmluZyBhbmQgcGFzc2VzIGNoYXJhY3RlcnNcbiAqIChzb21ldGltZXMgb25lIGF0IGEgdGltZSwgc29tZXRpbWVzIGluIGNodW5rcykgdG8gdGhlIHRva2VuaXplciBzdGFnZS5cbiAqIFRoZSB0b2tlbml6ZXIgZ3JvdXBzIHRoZSBjaGFyYWN0ZXJzIGludG8gdG9rZW5zOiB0YWdzLCBlbmR0YWdzLCBydW5zXG4gKiBvZiB0ZXh0LCBjb21tZW50cywgZG9jdHlwZSBkZWNsYXJhdGlvbnMsIGFuZCB0aGUgZW5kLW9mLWZpbGUgKEVPRilcbiAqIHRva2VuLiAgVGhlc2UgdG9rZW5zIGFyZSB0aGVuIHBhc3NlZCB0byB0aGUgdHJlZSBidWlsZGluZyBzdGFnZSB2aWFcbiAqIHRoZSBpbnNlcnRUb2tlbigpIGZ1bmN0aW9uLiAgVGhlIHRyZWUgYnVpbGRpbmcgc3RhZ2UgYnVpbGRzIHVwIHRoZVxuICogZG9jdW1lbnQgdHJlZS5cbiAqXG4gKiBUaGUgdG9rZW5pemVyIHN0YWdlIGlzIGEgZmluaXRlIHN0YXRlIG1hY2hpbmUuICBFYWNoIHN0YXRlIGlzXG4gKiBpbXBsZW1lbnRlZCBhcyBhIGZ1bmN0aW9uIHdpdGggYSBuYW1lIHRoYXQgZW5kcyBpbiBcIl9zdGF0ZVwiLiAgVGhlXG4gKiBpbml0aWFsIHN0YXRlIGlzIGRhdGFfc3RhdGUoKS4gVGhlIGN1cnJlbnQgdG9rZW5pemVyIHN0YXRlIGlzIHN0b3JlZFxuICogaW4gdGhlIHZhcmlhYmxlICd0b2tlbml6ZXInLiAgTW9zdCBzdGF0ZSBmdW5jdGlvbnMgZXhwZWN0IGEgc2luZ2xlXG4gKiBpbnRlZ2VyIGFyZ3VtZW50IHdoaWNoIHJlcHJlc2VudHMgYSBzaW5nbGUgVVRGLTE2IGNvZGVwb2ludC4gIFNvbWVcbiAqIHN0YXRlcyB3YW50IG1vcmUgY2hhcmFjdGVycyBhbmQgc2V0IGEgbG9va2FoZWFkIHByb3BlcnR5IG9uXG4gKiB0aGVtc2VsdmVzLiAgVGhlIHNjYW5DaGFycygpIGZ1bmN0aW9uIGluIHRoZSBzY2FubmVyIGNoZWNrcyBmb3IgdGhpc1xuICogbG9va2FoZWFkIHByb3BlcnR5LiAgSWYgaXQgZG9lc24ndCBleGlzdCwgdGhlbiBzY2FuQ2hhcnMoKSBqdXN0IHBhc3Nlc1xuICogdGhlIG5leHQgaW5wdXQgY2hhcmFjdGVyIHRvIHRoZSBjdXJyZW50IHRva2VuaXplciBzdGF0ZSBmdW5jdGlvbi5cbiAqIE90aGVyd2lzZSwgc2NhbkNoYXJzKCkgbG9va3MgYWhlYWQgKGEgZ2l2ZW4gIyBvZiBjaGFyYWN0ZXJzLCBvciBmb3IgYVxuICogbWF0Y2hpbmcgc3RyaW5nLCBvciBmb3IgYSBtYXRjaGluZyByZWdleHApIGFuZCBwYXNzZXMgYSBzdHJpbmcgb2ZcbiAqIGNoYXJhY3RlcnMgdG8gdGhlIGN1cnJlbnQgdG9rZW5pemVyIHN0YXRlIGZ1bmN0aW9uLlxuICpcbiAqIEFzIGEgc2hvcnRjdXQsIGNlcnRhaW4gc3RhdGVzIG9mIHRoZSB0b2tlbml6ZXIgdXNlIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAqIHRvIGxvb2sgYWhlYWQgaW4gdGhlIHNjYW5uZXIncyBpbnB1dCBidWZmZXIgZm9yIHJ1bnMgb2YgdGV4dCwgc2ltcGxlXG4gKiB0YWdzIGFuZCBhdHRyaWJ1dGVzLiAgRm9yIHdlbGwtZm9ybWVkIGlucHV0LCB0aGVzZSBzaG9ydGN1dHMgc2tpcCBhXG4gKiBsb3Qgb2Ygc3RhdGUgdHJhbnNpdGlvbnMgYW5kIHNwZWVkIHRoaW5ncyB1cCBhIGJpdC5cbiAqXG4gKiBXaGVuIGEgdG9rZW5pemVyIHN0YXRlIGZ1bmN0aW9uIGhhcyBjb25zdW1lZCBhIGNvbXBsZXRlIHRva2VuLCBpdFxuICogZW1pdHMgdGhhdCB0b2tlbiwgYnkgY2FsbGluZyBpbnNlcnRUb2tlbigpLCBvciBieSBjYWxsaW5nIGEgdXRpbGl0eVxuICogZnVuY3Rpb24gdGhhdCBpdHNlbGYgY2FsbHMgaW5zZXJ0VG9rZW4oKS4gIFRoZXNlIHRva2VucyBhcmUgcGFzc2VkIHRvXG4gKiB0aGUgdHJlZSBidWlsZGluZyBzdGFnZSwgd2hpY2ggaXMgYWxzbyBhIHN0YXRlIG1hY2hpbmUuICBMaWtlIHRoZVxuICogdG9rZW5pemVyLCB0aGUgdHJlZSBidWlsZGluZyBzdGF0ZXMgYXJlIGltcGxlbWVudGVkIGFzIGZ1bmN0aW9ucywgYW5kXG4gKiB0aGVzZSBmdW5jdGlvbnMgaGF2ZSBuYW1lcyB0aGF0IGVuZCB3aXRoIF9tb2RlIChiZWNhdXNlIHRoZSBIVE1MIHNwZWNcbiAqIHJlZmVycyB0byB0aGVtIGFzIGluc2VydGlvbiBtb2RlcykuIFRoZSBjdXJyZW50IGluc2VydGlvbiBtb2RlIGlzIGhlbGRcbiAqIGJ5IHRoZSAncGFyc2VyJyB2YXJpYWJsZS4gIEVhY2ggaW5zZXJ0aW9uIG1vZGUgZnVuY3Rpb24gdGFrZXMgdXAgdG8gNFxuICogYXJndW1lbnRzLiAgVGhlIGZpcnN0IGlzIGEgdG9rZW4gdHlwZSwgcmVwcmVzZW50ZWQgYnkgdGhlIGNvbnN0YW50c1xuICogVEFHLCBFTkRUQUcsIFRFWFQsIENPTU1FTlQsIERPQ1RZUEUgYW5kIEVPRi4gIFRoZSBzZWNvbmQgYXJndW1lbnQgaXNcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgdG9rZW46IHRoZSB0ZXh0IG9yIGNvbW1lbnQgZGF0YSwgb3IgdGFnbmFtZSBvclxuICogZG9jdHlwZS4gIEZvciB0YWdzLCB0aGUgM3JkIGFyZ3VtZW50IGlzIGFuIGFycmF5IG9mIGF0dHJpYnV0ZXMuICBGb3JcbiAqIERPQ1RZUEVTIGl0IGlzIHRoZSBvcHRpb25hbCBwdWJsaWMgaWQuICBGb3IgdGFncywgdGhlIDR0aCBhcmd1bWVudCBpc1xuICogdHJ1ZSBpZiB0aGUgdGFnIGlzIHNlbGYtY2xvc2luZy4gRm9yIGRvY3R5cGVzLCB0aGUgNHRoIGFyZ3VtZW50IGlzIHRoZVxuICogb3B0aW9uYWwgc3lzdGVtIGlkLlxuICpcbiAqIFNlYXJjaCBmb3IgXCIqKipcIiB0byBmaW5kIHRoZSBtYWpvciBzdWItZGl2aXNpb25zIGluIHRoZSBjb2RlLlxuICovXG5cblxuLyoqKlxuICogRGF0YSBwcm9sb2cuICBMb3RzIG9mIGNvbnN0YW50cyBkZWNsYXJlZCBoZXJlLCBpbmNsdWRpbmcgc29tZVxuICogdmVyeSBsYXJnZSBvYmplY3RzLiAgVGhleSdyZSB1c2VkIHRocm91Z2hvdXQgdGhlIGNvZGUgdGhhdCBmb2xsb3dzXG4gKi9cbi8vIFRva2VuIHR5cGVzIGZvciB0aGUgdHJlZSBidWlsZGVyLlxudmFyIEVPRiA9IC0xO1xudmFyIFRFWFQgPSAxO1xudmFyIFRBRyA9IDI7XG52YXIgRU5EVEFHID0gMztcbnZhciBDT01NRU5UID0gNDtcbnZhciBET0NUWVBFID0gNTtcblxuLy8gQSByZS11c2FibGUgZW1wdHkgYXJyYXlcbnZhciBOT0FUVFJTID0gW107XG5cbi8vIFRoZXNlIERURCBwdWJsaWMgaWRzIHB1dCB0aGUgYnJvd3NlciBpbiBxdWlya3MgbW9kZVxudmFyIHF1aXJreVB1YmxpY0lkcyA9IC9eSFRNTCR8Xi1cXC9cXC9XM09cXC9cXC9EVEQgVzMgSFRNTCBTdHJpY3QgM1xcLjBcXC9cXC9FTlxcL1xcLyR8Xi1cXC9XM0NcXC9EVEQgSFRNTCA0XFwuMCBUcmFuc2l0aW9uYWxcXC9FTiR8XlxcK1xcL1xcL1NpbG1hcmlsXFwvXFwvZHRkIGh0bWwgUHJvIHYwcjExIDE5OTcwMTAxXFwvXFwvfF4tXFwvXFwvQWR2YVNvZnQgTHRkXFwvXFwvRFREIEhUTUwgM1xcLjAgYXNXZWRpdCBcXCsgZXh0ZW5zaW9uc1xcL1xcL3xeLVxcL1xcL0FTXFwvXFwvRFREIEhUTUwgM1xcLjAgYXNXZWRpdCBcXCsgZXh0ZW5zaW9uc1xcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCAyXFwuMCBMZXZlbCAxXFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MIDJcXC4wIExldmVsIDJcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgMlxcLjAgU3RyaWN0IExldmVsIDFcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgMlxcLjAgU3RyaWN0IExldmVsIDJcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgMlxcLjAgU3RyaWN0XFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MIDJcXC4wXFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MIDJcXC4xRVxcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCAzXFwuMFxcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCAzXFwuMiBGaW5hbFxcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCAzXFwuMlxcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCAzXFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MIExldmVsIDBcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgTGV2ZWwgMVxcL1xcL3xeLVxcL1xcL0lFVEZcXC9cXC9EVEQgSFRNTCBMZXZlbCAyXFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MIExldmVsIDNcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgU3RyaWN0IExldmVsIDBcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgU3RyaWN0IExldmVsIDFcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgU3RyaWN0IExldmVsIDJcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgU3RyaWN0IExldmVsIDNcXC9cXC98Xi1cXC9cXC9JRVRGXFwvXFwvRFREIEhUTUwgU3RyaWN0XFwvXFwvfF4tXFwvXFwvSUVURlxcL1xcL0RURCBIVE1MXFwvXFwvfF4tXFwvXFwvTWV0cml1c1xcL1xcL0RURCBNZXRyaXVzIFByZXNlbnRhdGlvbmFsXFwvXFwvfF4tXFwvXFwvTWljcm9zb2Z0XFwvXFwvRFREIEludGVybmV0IEV4cGxvcmVyIDJcXC4wIEhUTUwgU3RyaWN0XFwvXFwvfF4tXFwvXFwvTWljcm9zb2Z0XFwvXFwvRFREIEludGVybmV0IEV4cGxvcmVyIDJcXC4wIEhUTUxcXC9cXC98Xi1cXC9cXC9NaWNyb3NvZnRcXC9cXC9EVEQgSW50ZXJuZXQgRXhwbG9yZXIgMlxcLjAgVGFibGVzXFwvXFwvfF4tXFwvXFwvTWljcm9zb2Z0XFwvXFwvRFREIEludGVybmV0IEV4cGxvcmVyIDNcXC4wIEhUTUwgU3RyaWN0XFwvXFwvfF4tXFwvXFwvTWljcm9zb2Z0XFwvXFwvRFREIEludGVybmV0IEV4cGxvcmVyIDNcXC4wIEhUTUxcXC9cXC98Xi1cXC9cXC9NaWNyb3NvZnRcXC9cXC9EVEQgSW50ZXJuZXQgRXhwbG9yZXIgM1xcLjAgVGFibGVzXFwvXFwvfF4tXFwvXFwvTmV0c2NhcGUgQ29tbVxcLiBDb3JwXFwuXFwvXFwvRFREIEhUTUxcXC9cXC98Xi1cXC9cXC9OZXRzY2FwZSBDb21tXFwuIENvcnBcXC5cXC9cXC9EVEQgU3RyaWN0IEhUTUxcXC9cXC98Xi1cXC9cXC9PJ1JlaWxseSBhbmQgQXNzb2NpYXRlc1xcL1xcL0RURCBIVE1MIDJcXC4wXFwvXFwvfF4tXFwvXFwvTydSZWlsbHkgYW5kIEFzc29jaWF0ZXNcXC9cXC9EVEQgSFRNTCBFeHRlbmRlZCAxXFwuMFxcL1xcL3xeLVxcL1xcL08nUmVpbGx5IGFuZCBBc3NvY2lhdGVzXFwvXFwvRFREIEhUTUwgRXh0ZW5kZWQgUmVsYXhlZCAxXFwuMFxcL1xcL3xeLVxcL1xcL1NvZnRRdWFkIFNvZnR3YXJlXFwvXFwvRFREIEhvVE1ldGFMIFBSTyA2XFwuMDo6MTk5OTA2MDE6OmV4dGVuc2lvbnMgdG8gSFRNTCA0XFwuMFxcL1xcL3xeLVxcL1xcL1NvZnRRdWFkXFwvXFwvRFREIEhvVE1ldGFMIFBSTyA0XFwuMDo6MTk5NzEwMTA6OmV4dGVuc2lvbnMgdG8gSFRNTCA0XFwuMFxcL1xcL3xeLVxcL1xcL1NweWdsYXNzXFwvXFwvRFREIEhUTUwgMlxcLjAgRXh0ZW5kZWRcXC9cXC98Xi1cXC9cXC9TUVxcL1xcL0RURCBIVE1MIDJcXC4wIEhvVE1ldGFMIFxcKyBleHRlbnNpb25zXFwvXFwvfF4tXFwvXFwvU3VuIE1pY3Jvc3lzdGVtcyBDb3JwXFwuXFwvXFwvRFREIEhvdEphdmEgSFRNTFxcL1xcL3xeLVxcL1xcL1N1biBNaWNyb3N5c3RlbXMgQ29ycFxcLlxcL1xcL0RURCBIb3RKYXZhIFN0cmljdCBIVE1MXFwvXFwvfF4tXFwvXFwvVzNDXFwvXFwvRFREIEhUTUwgMyAxOTk1LTAzLTI0XFwvXFwvfF4tXFwvXFwvVzNDXFwvXFwvRFREIEhUTUwgM1xcLjIgRHJhZnRcXC9cXC98Xi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCAzXFwuMiBGaW5hbFxcL1xcL3xeLVxcL1xcL1czQ1xcL1xcL0RURCBIVE1MIDNcXC4yXFwvXFwvfF4tXFwvXFwvVzNDXFwvXFwvRFREIEhUTUwgM1xcLjJTIERyYWZ0XFwvXFwvfF4tXFwvXFwvVzNDXFwvXFwvRFREIEhUTUwgNFxcLjAgRnJhbWVzZXRcXC9cXC98Xi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCA0XFwuMCBUcmFuc2l0aW9uYWxcXC9cXC98Xi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCBFeHBlcmltZW50YWwgMTk5NjA3MTJcXC9cXC98Xi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCBFeHBlcmltZW50YWwgOTcwNDIxXFwvXFwvfF4tXFwvXFwvVzNDXFwvXFwvRFREIFczIEhUTUxcXC9cXC98Xi1cXC9cXC9XM09cXC9cXC9EVEQgVzMgSFRNTCAzXFwuMFxcL1xcL3xeLVxcL1xcL1dlYlRlY2hzXFwvXFwvRFREIE1vemlsbGEgSFRNTCAyXFwuMFxcL1xcL3xeLVxcL1xcL1dlYlRlY2hzXFwvXFwvRFREIE1vemlsbGEgSFRNTFxcL1xcLy9pO1xuXG52YXIgcXVpcmt5U3lzdGVtSWQgPSBcImh0dHA6Ly93d3cuaWJtLmNvbS9kYXRhL2R0ZC92MTEvaWJteGh0bWwxLXRyYW5zaXRpb25hbC5kdGRcIjtcblxudmFyIGNvbmRpdGlvbmFsbHlRdWlya3lQdWJsaWNJZHMgPSAvXi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCA0XFwuMDEgRnJhbWVzZXRcXC9cXC98Xi1cXC9cXC9XM0NcXC9cXC9EVEQgSFRNTCA0XFwuMDEgVHJhbnNpdGlvbmFsXFwvXFwvL2k7XG5cbi8vIFRoZXNlIERURCBwdWJsaWMgaWRzIHB1dCB0aGUgYnJvd3NlciBpbiBsaW1pdGVkIHF1aXJrcyBtb2RlXG52YXIgbGltaXRlZFF1aXJreVB1YmxpY0lkcyA9IC9eLVxcL1xcL1czQ1xcL1xcL0RURCBYSFRNTCAxXFwuMCBGcmFtZXNldFxcL1xcL3xeLVxcL1xcL1czQ1xcL1xcL0RURCBYSFRNTCAxXFwuMCBUcmFuc2l0aW9uYWxcXC9cXC8vaTtcblxuXG4vLyBFbGVtZW50IHNldHMgYmVsb3cuIFNlZSB0aGUgaXNBKCkgZnVuY3Rpb24gZm9yIGEgd2F5IHRvIHRlc3Rcbi8vIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBhIG1lbWJlciBvZiBhIHNldFxudmFyIHNwZWNpYWxTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuc3BlY2lhbFNldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJhZGRyZXNzXCI6dHJ1ZSwgXCJhcHBsZXRcIjp0cnVlLCBcImFyZWFcIjp0cnVlLCBcImFydGljbGVcIjp0cnVlLFxuICBcImFzaWRlXCI6dHJ1ZSwgXCJiYXNlXCI6dHJ1ZSwgXCJiYXNlZm9udFwiOnRydWUsIFwiYmdzb3VuZFwiOnRydWUsXG4gIFwiYmxvY2txdW90ZVwiOnRydWUsIFwiYm9keVwiOnRydWUsIFwiYnJcIjp0cnVlLCBcImJ1dHRvblwiOnRydWUsXG4gIFwiY2FwdGlvblwiOnRydWUsIFwiY2VudGVyXCI6dHJ1ZSwgXCJjb2xcIjp0cnVlLCBcImNvbGdyb3VwXCI6dHJ1ZSxcbiAgXCJkZFwiOnRydWUsIFwiZGV0YWlsc1wiOnRydWUsIFwiZGlyXCI6dHJ1ZSxcbiAgXCJkaXZcIjp0cnVlLCBcImRsXCI6dHJ1ZSwgXCJkdFwiOnRydWUsIFwiZW1iZWRcIjp0cnVlLFxuICBcImZpZWxkc2V0XCI6dHJ1ZSwgXCJmaWdjYXB0aW9uXCI6dHJ1ZSwgXCJmaWd1cmVcIjp0cnVlLCBcImZvb3RlclwiOnRydWUsXG4gIFwiZm9ybVwiOnRydWUsIFwiZnJhbWVcIjp0cnVlLCBcImZyYW1lc2V0XCI6dHJ1ZSwgXCJoMVwiOnRydWUsXG4gIFwiaDJcIjp0cnVlLCBcImgzXCI6dHJ1ZSwgXCJoNFwiOnRydWUsIFwiaDVcIjp0cnVlLFxuICBcImg2XCI6dHJ1ZSwgXCJoZWFkXCI6dHJ1ZSwgXCJoZWFkZXJcIjp0cnVlLCBcImhncm91cFwiOnRydWUsXG4gIFwiaHJcIjp0cnVlLCBcImh0bWxcIjp0cnVlLCBcImlmcmFtZVwiOnRydWUsIFwiaW1nXCI6dHJ1ZSxcbiAgXCJpbnB1dFwiOnRydWUsIFwibGlcIjp0cnVlLCBcImxpbmtcIjp0cnVlLFxuICBcImxpc3RpbmdcIjp0cnVlLCBcIm1haW5cIjp0cnVlLCBcIm1hcnF1ZWVcIjp0cnVlLCBcIm1lbnVcIjp0cnVlLCBcIm1ldGFcIjp0cnVlLFxuICBcIm5hdlwiOnRydWUsIFwibm9lbWJlZFwiOnRydWUsIFwibm9mcmFtZXNcIjp0cnVlLCBcIm5vc2NyaXB0XCI6dHJ1ZSxcbiAgXCJvYmplY3RcIjp0cnVlLCBcIm9sXCI6dHJ1ZSwgXCJwXCI6dHJ1ZSwgXCJwYXJhbVwiOnRydWUsXG4gIFwicGxhaW50ZXh0XCI6dHJ1ZSwgXCJwcmVcIjp0cnVlLCBcInNjcmlwdFwiOnRydWUsIFwic2VjdGlvblwiOnRydWUsXG4gIFwic2VsZWN0XCI6dHJ1ZSwgXCJzb3VyY2VcIjp0cnVlLCBcInN0eWxlXCI6dHJ1ZSwgXCJzdW1tYXJ5XCI6dHJ1ZSwgXCJ0YWJsZVwiOnRydWUsXG4gIFwidGJvZHlcIjp0cnVlLCBcInRkXCI6dHJ1ZSwgXCJ0ZW1wbGF0ZVwiOnRydWUsIFwidGV4dGFyZWFcIjp0cnVlLCBcInRmb290XCI6dHJ1ZSxcbiAgXCJ0aFwiOnRydWUsIFwidGhlYWRcIjp0cnVlLCBcInRpdGxlXCI6dHJ1ZSwgXCJ0clwiOnRydWUsIFwidHJhY2tcIjp0cnVlLFxuICAvLyBOb3RlIHRoYXQgXCJ4bXBcIiB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBcInNwZWNpYWxcIiBzZXQgaW4gdGhlIGxhdGVzdFxuICAvLyBzcGVjLCBhcHBhcmVudGx5IGJ5IGFjY2lkZW50OyBzZWVcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL3B1bGwvMTkxOVxuICBcInVsXCI6dHJ1ZSwgXCJ3YnJcIjp0cnVlLCBcInhtcFwiOnRydWVcbn07XG5zcGVjaWFsU2V0W05BTUVTUEFDRS5TVkddID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwiZm9yZWlnbk9iamVjdFwiOiB0cnVlLCBcImRlc2NcIjogdHJ1ZSwgXCJ0aXRsZVwiOiB0cnVlXG59O1xuc3BlY2lhbFNldFtOQU1FU1BBQ0UuTUFUSE1MXSA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBcIm1pXCI6dHJ1ZSwgXCJtb1wiOnRydWUsIFwibW5cIjp0cnVlLCBcIm1zXCI6dHJ1ZSxcbiAgXCJtdGV4dFwiOnRydWUsIFwiYW5ub3RhdGlvbi14bWxcIjp0cnVlXG59O1xuXG4vLyBUaGUgc2V0IG9mIGFkZHJlc3MsIGRpdiwgYW5kIHAgSFRNTCB0YWdzXG52YXIgYWRkcmVzc2RpdnBTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuYWRkcmVzc2RpdnBTZXRbTkFNRVNQQUNFLkhUTUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwiYWRkcmVzc1wiOnRydWUsIFwiZGl2XCI6dHJ1ZSwgXCJwXCI6dHJ1ZVxufTtcblxudmFyIGRkZHRTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZGRkdFNldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJkZFwiOnRydWUsIFwiZHRcIjp0cnVlXG59O1xuXG52YXIgdGFibGVzZWN0aW9ucm93U2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnRhYmxlc2VjdGlvbnJvd1NldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJ0YWJsZVwiOnRydWUsIFwidGhlYWRcIjp0cnVlLCBcInRib2R5XCI6dHJ1ZSwgXCJ0Zm9vdFwiOnRydWUsIFwidHJcIjp0cnVlXG59O1xuXG52YXIgaW1wbGllZEVuZFRhZ3NTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuaW1wbGllZEVuZFRhZ3NTZXRbTkFNRVNQQUNFLkhUTUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwiZGRcIjogdHJ1ZSwgXCJkdFwiOiB0cnVlLCBcImxpXCI6IHRydWUsIFwibWVudWl0ZW1cIjogdHJ1ZSwgXCJvcHRncm91cFwiOiB0cnVlLFxuICBcIm9wdGlvblwiOiB0cnVlLCBcInBcIjogdHJ1ZSwgXCJyYlwiOiB0cnVlLCBcInJwXCI6IHRydWUsIFwicnRcIjogdHJ1ZSwgXCJydGNcIjogdHJ1ZVxufTtcblxudmFyIHRob3JvdWdoSW1wbGllZEVuZFRhZ3NTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudGhvcm91Z2hJbXBsaWVkRW5kVGFnc1NldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJjYXB0aW9uXCI6IHRydWUsIFwiY29sZ3JvdXBcIjogdHJ1ZSwgXCJkZFwiOiB0cnVlLCBcImR0XCI6IHRydWUsIFwibGlcIjogdHJ1ZSxcbiAgXCJvcHRncm91cFwiOiB0cnVlLCBcIm9wdGlvblwiOiB0cnVlLCBcInBcIjogdHJ1ZSwgXCJyYlwiOiB0cnVlLCBcInJwXCI6IHRydWUsXG4gIFwicnRcIjogdHJ1ZSwgXCJydGNcIjogdHJ1ZSwgXCJ0Ym9keVwiOiB0cnVlLCBcInRkXCI6IHRydWUsIFwidGZvb3RcIjogdHJ1ZSxcbiAgXCJ0aFwiOiB0cnVlLCBcInRoZWFkXCI6IHRydWUsIFwidHJcIjogdHJ1ZVxufTtcblxudmFyIHRhYmxlQ29udGV4dFNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG50YWJsZUNvbnRleHRTZXRbTkFNRVNQQUNFLkhUTUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwidGFibGVcIjogdHJ1ZSwgXCJ0ZW1wbGF0ZVwiOiB0cnVlLCBcImh0bWxcIjogdHJ1ZVxufTtcblxudmFyIHRhYmxlQm9keUNvbnRleHRTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudGFibGVCb2R5Q29udGV4dFNldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJ0Ym9keVwiOiB0cnVlLCBcInRmb290XCI6IHRydWUsIFwidGhlYWRcIjogdHJ1ZSwgXCJ0ZW1wbGF0ZVwiOiB0cnVlLCBcImh0bWxcIjogdHJ1ZVxufTtcblxudmFyIHRhYmxlUm93Q29udGV4dFNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG50YWJsZVJvd0NvbnRleHRTZXRbTkFNRVNQQUNFLkhUTUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwidHJcIjogdHJ1ZSwgXCJ0ZW1wbGF0ZVwiOiB0cnVlLCBcImh0bWxcIjogdHJ1ZVxufTtcblxuLy8gU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjZm9ybS1hc3NvY2lhdGVkLWVsZW1lbnRcbnZhciBmb3JtYXNzb2NpYXRlZFNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mb3JtYXNzb2NpYXRlZFNldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJidXR0b25cIjogdHJ1ZSwgXCJmaWVsZHNldFwiOiB0cnVlLCBcImlucHV0XCI6IHRydWUsIFwia2V5Z2VuXCI6IHRydWUsXG4gIFwib2JqZWN0XCI6IHRydWUsIFwib3V0cHV0XCI6IHRydWUsIFwic2VsZWN0XCI6IHRydWUsIFwidGV4dGFyZWFcIjogdHJ1ZSxcbiAgXCJpbWdcIjogdHJ1ZVxufTtcblxudmFyIGluU2NvcGVTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuaW5TY29wZVNldFtOQU1FU1BBQ0UuSFRNTF09IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBcImFwcGxldFwiOnRydWUsIFwiY2FwdGlvblwiOnRydWUsIFwiaHRtbFwiOnRydWUsIFwidGFibGVcIjp0cnVlLFxuICBcInRkXCI6dHJ1ZSwgXCJ0aFwiOnRydWUsIFwibWFycXVlZVwiOnRydWUsIFwib2JqZWN0XCI6dHJ1ZSxcbiAgXCJ0ZW1wbGF0ZVwiOnRydWVcbn07XG5pblNjb3BlU2V0W05BTUVTUEFDRS5NQVRITUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwibWlcIjp0cnVlLCBcIm1vXCI6dHJ1ZSwgXCJtblwiOnRydWUsIFwibXNcIjp0cnVlLFxuICBcIm10ZXh0XCI6dHJ1ZSwgXCJhbm5vdGF0aW9uLXhtbFwiOnRydWVcbn07XG5pblNjb3BlU2V0W05BTUVTUEFDRS5TVkddID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwiZm9yZWlnbk9iamVjdFwiOnRydWUsIFwiZGVzY1wiOnRydWUsIFwidGl0bGVcIjp0cnVlXG59O1xuXG52YXIgaW5MaXN0SXRlbVNjb3BlU2V0ID0gT2JqZWN0LmNyZWF0ZShpblNjb3BlU2V0KTtcbmluTGlzdEl0ZW1TY29wZVNldFtOQU1FU1BBQ0UuSFRNTF0gPVxuICBPYmplY3QuY3JlYXRlKGluU2NvcGVTZXRbTkFNRVNQQUNFLkhUTUxdKTtcbmluTGlzdEl0ZW1TY29wZVNldFtOQU1FU1BBQ0UuSFRNTF0ub2wgPSB0cnVlO1xuaW5MaXN0SXRlbVNjb3BlU2V0W05BTUVTUEFDRS5IVE1MXS51bCA9IHRydWU7XG5cbnZhciBpbkJ1dHRvblNjb3BlU2V0ID0gT2JqZWN0LmNyZWF0ZShpblNjb3BlU2V0KTtcbmluQnV0dG9uU2NvcGVTZXRbTkFNRVNQQUNFLkhUTUxdID1cbiAgT2JqZWN0LmNyZWF0ZShpblNjb3BlU2V0W05BTUVTUEFDRS5IVE1MXSk7XG5pbkJ1dHRvblNjb3BlU2V0W05BTUVTUEFDRS5IVE1MXS5idXR0b24gPSB0cnVlO1xuXG52YXIgaW5UYWJsZVNjb3BlU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmluVGFibGVTY29wZVNldFtOQU1FU1BBQ0UuSFRNTF0gPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJodG1sXCI6dHJ1ZSwgXCJ0YWJsZVwiOnRydWUsIFwidGVtcGxhdGVcIjp0cnVlXG59O1xuXG4vLyBUaGUgc2V0IG9mIGVsZW1lbnRzIGZvciBzZWxlY3Qgc2NvcGUgaXMgdGhlIGV2ZXJ5dGhpbmcgKmV4Y2VwdCogdGhlc2VcbnZhciBpbnZlcnRlZFNlbGVjdFNjb3BlU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmludmVydGVkU2VsZWN0U2NvcGVTZXRbTkFNRVNQQUNFLkhUTUxdID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwib3B0Z3JvdXBcIjp0cnVlLCBcIm9wdGlvblwiOnRydWVcbn07XG5cbnZhciBtYXRobWxUZXh0SW50ZWdyYXRpb25Qb2ludFNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5tYXRobWxUZXh0SW50ZWdyYXRpb25Qb2ludFNldFtOQU1FU1BBQ0UuTUFUSE1MXSA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBtaTogdHJ1ZSxcbiAgbW86IHRydWUsXG4gIG1uOiB0cnVlLFxuICBtczogdHJ1ZSxcbiAgbXRleHQ6IHRydWVcbn07XG5cbnZhciBodG1sSW50ZWdyYXRpb25Qb2ludFNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5odG1sSW50ZWdyYXRpb25Qb2ludFNldFtOQU1FU1BBQ0UuU1ZHXSA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBmb3JlaWduT2JqZWN0OiB0cnVlLFxuICBkZXNjOiB0cnVlLFxuICB0aXRsZTogdHJ1ZVxufTtcblxudmFyIGZvcmVpZ25BdHRyaWJ1dGVzID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIFwieGxpbms6YWN0dWF0ZVwiOiBOQU1FU1BBQ0UuWExJTkssIFwieGxpbms6YXJjcm9sZVwiOiBOQU1FU1BBQ0UuWExJTkssXG4gIFwieGxpbms6aHJlZlwiOiAgIE5BTUVTUEFDRS5YTElOSywgIFwieGxpbms6cm9sZVwiOiAgICBOQU1FU1BBQ0UuWExJTkssXG4gIFwieGxpbms6c2hvd1wiOiAgIE5BTUVTUEFDRS5YTElOSywgIFwieGxpbms6dGl0bGVcIjogICBOQU1FU1BBQ0UuWExJTkssXG4gIFwieGxpbms6dHlwZVwiOiAgIE5BTUVTUEFDRS5YTElOSywgIFwieG1sOmJhc2VcIjogICAgICBOQU1FU1BBQ0UuWE1MLFxuICBcInhtbDpsYW5nXCI6ICAgICBOQU1FU1BBQ0UuWE1MLCAgICBcInhtbDpzcGFjZVwiOiAgICAgTkFNRVNQQUNFLlhNTCxcbiAgXCJ4bWxuc1wiOiAgICAgICAgTkFNRVNQQUNFLlhNTE5TLCAgXCJ4bWxuczp4bGlua1wiOiAgIE5BTUVTUEFDRS5YTUxOU1xufTtcblxuXG4vLyBMb3dlcmNhc2UgdG8gbWl4ZWQgY2FzZSBtYXBwaW5nIGZvciBTVkcgYXR0cmlidXRlcyBhbmQgdGFnbmFtZXNcbnZhciBzdmdBdHRyQWRqdXN0bWVudHMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYXR0cmlidXRlbmFtZTogXCJhdHRyaWJ1dGVOYW1lXCIsIGF0dHJpYnV0ZXR5cGU6IFwiYXR0cmlidXRlVHlwZVwiLFxuICBiYXNlZnJlcXVlbmN5OiBcImJhc2VGcmVxdWVuY3lcIiwgYmFzZXByb2ZpbGU6IFwiYmFzZVByb2ZpbGVcIixcbiAgY2FsY21vZGU6IFwiY2FsY01vZGVcIiwgY2xpcHBhdGh1bml0czogXCJjbGlwUGF0aFVuaXRzXCIsXG4gIGRpZmZ1c2Vjb25zdGFudDogXCJkaWZmdXNlQ29uc3RhbnRcIixcbiAgZWRnZW1vZGU6IFwiZWRnZU1vZGVcIixcbiAgZmlsdGVydW5pdHM6IFwiZmlsdGVyVW5pdHNcIixcbiAgZ2x5cGhyZWY6IFwiZ2x5cGhSZWZcIiwgZ3JhZGllbnR0cmFuc2Zvcm06IFwiZ3JhZGllbnRUcmFuc2Zvcm1cIixcbiAgZ3JhZGllbnR1bml0czogXCJncmFkaWVudFVuaXRzXCIsIGtlcm5lbG1hdHJpeDogXCJrZXJuZWxNYXRyaXhcIixcbiAga2VybmVsdW5pdGxlbmd0aDogXCJrZXJuZWxVbml0TGVuZ3RoXCIsIGtleXBvaW50czogXCJrZXlQb2ludHNcIixcbiAga2V5c3BsaW5lczogXCJrZXlTcGxpbmVzXCIsIGtleXRpbWVzOiBcImtleVRpbWVzXCIsXG4gIGxlbmd0aGFkanVzdDogXCJsZW5ndGhBZGp1c3RcIiwgbGltaXRpbmdjb25lYW5nbGU6IFwibGltaXRpbmdDb25lQW5nbGVcIixcbiAgbWFya2VyaGVpZ2h0OiBcIm1hcmtlckhlaWdodFwiLCBtYXJrZXJ1bml0czogXCJtYXJrZXJVbml0c1wiLFxuICBtYXJrZXJ3aWR0aDogXCJtYXJrZXJXaWR0aFwiLCBtYXNrY29udGVudHVuaXRzOiBcIm1hc2tDb250ZW50VW5pdHNcIixcbiAgbWFza3VuaXRzOiBcIm1hc2tVbml0c1wiLCBudW1vY3RhdmVzOiBcIm51bU9jdGF2ZXNcIixcbiAgcGF0aGxlbmd0aDogXCJwYXRoTGVuZ3RoXCIsIHBhdHRlcm5jb250ZW50dW5pdHM6IFwicGF0dGVybkNvbnRlbnRVbml0c1wiLFxuICBwYXR0ZXJudHJhbnNmb3JtOiBcInBhdHRlcm5UcmFuc2Zvcm1cIiwgcGF0dGVybnVuaXRzOiBcInBhdHRlcm5Vbml0c1wiLFxuICBwb2ludHNhdHg6IFwicG9pbnRzQXRYXCIsIHBvaW50c2F0eTogXCJwb2ludHNBdFlcIixcbiAgcG9pbnRzYXR6OiBcInBvaW50c0F0WlwiLCBwcmVzZXJ2ZWFscGhhOiBcInByZXNlcnZlQWxwaGFcIixcbiAgcHJlc2VydmVhc3BlY3RyYXRpbzogXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsXG4gIHByaW1pdGl2ZXVuaXRzOiBcInByaW1pdGl2ZVVuaXRzXCIsIHJlZng6IFwicmVmWFwiLFxuICByZWZ5OiBcInJlZllcIiwgcmVwZWF0Y291bnQ6IFwicmVwZWF0Q291bnRcIixcbiAgcmVwZWF0ZHVyOiBcInJlcGVhdER1clwiLCByZXF1aXJlZGV4dGVuc2lvbnM6IFwicmVxdWlyZWRFeHRlbnNpb25zXCIsXG4gIHJlcXVpcmVkZmVhdHVyZXM6IFwicmVxdWlyZWRGZWF0dXJlc1wiLFxuICBzcGVjdWxhcmNvbnN0YW50OiBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgc3BlY3VsYXJleHBvbmVudDogXCJzcGVjdWxhckV4cG9uZW50XCIsIHNwcmVhZG1ldGhvZDogXCJzcHJlYWRNZXRob2RcIixcbiAgc3RhcnRvZmZzZXQ6IFwic3RhcnRPZmZzZXRcIiwgc3RkZGV2aWF0aW9uOiBcInN0ZERldmlhdGlvblwiLFxuICBzdGl0Y2h0aWxlczogXCJzdGl0Y2hUaWxlc1wiLCBzdXJmYWNlc2NhbGU6IFwic3VyZmFjZVNjYWxlXCIsXG4gIHN5c3RlbWxhbmd1YWdlOiBcInN5c3RlbUxhbmd1YWdlXCIsIHRhYmxldmFsdWVzOiBcInRhYmxlVmFsdWVzXCIsXG4gIHRhcmdldHg6IFwidGFyZ2V0WFwiLCB0YXJnZXR5OiBcInRhcmdldFlcIixcbiAgdGV4dGxlbmd0aDogXCJ0ZXh0TGVuZ3RoXCIsIHZpZXdib3g6IFwidmlld0JveFwiLFxuICB2aWV3dGFyZ2V0OiBcInZpZXdUYXJnZXRcIiwgeGNoYW5uZWxzZWxlY3RvcjogXCJ4Q2hhbm5lbFNlbGVjdG9yXCIsXG4gIHljaGFubmVsc2VsZWN0b3I6IFwieUNoYW5uZWxTZWxlY3RvclwiLCB6b29tYW5kcGFuOiBcInpvb21BbmRQYW5cIlxufTtcblxudmFyIHN2Z1RhZ05hbWVBZGp1c3RtZW50cyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhbHRnbHlwaDogXCJhbHRHbHlwaFwiLCBhbHRnbHlwaGRlZjogXCJhbHRHbHlwaERlZlwiLFxuICBhbHRnbHlwaGl0ZW06IFwiYWx0R2x5cGhJdGVtXCIsIGFuaW1hdGVjb2xvcjogXCJhbmltYXRlQ29sb3JcIixcbiAgYW5pbWF0ZW1vdGlvbjogXCJhbmltYXRlTW90aW9uXCIsIGFuaW1hdGV0cmFuc2Zvcm06IFwiYW5pbWF0ZVRyYW5zZm9ybVwiLFxuICBjbGlwcGF0aDogXCJjbGlwUGF0aFwiLCBmZWJsZW5kOiBcImZlQmxlbmRcIixcbiAgZmVjb2xvcm1hdHJpeDogXCJmZUNvbG9yTWF0cml4XCIsXG4gIGZlY29tcG9uZW50dHJhbnNmZXI6IFwiZmVDb21wb25lbnRUcmFuc2ZlclwiLCBmZWNvbXBvc2l0ZTogXCJmZUNvbXBvc2l0ZVwiLFxuICBmZWNvbnZvbHZlbWF0cml4OiBcImZlQ29udm9sdmVNYXRyaXhcIixcbiAgZmVkaWZmdXNlbGlnaHRpbmc6IFwiZmVEaWZmdXNlTGlnaHRpbmdcIixcbiAgZmVkaXNwbGFjZW1lbnRtYXA6IFwiZmVEaXNwbGFjZW1lbnRNYXBcIixcbiAgZmVkaXN0YW50bGlnaHQ6IFwiZmVEaXN0YW50TGlnaHRcIiwgZmVmbG9vZDogXCJmZUZsb29kXCIsXG4gIGZlZnVuY2E6IFwiZmVGdW5jQVwiLCBmZWZ1bmNiOiBcImZlRnVuY0JcIixcbiAgZmVmdW5jZzogXCJmZUZ1bmNHXCIsIGZlZnVuY3I6IFwiZmVGdW5jUlwiLFxuICBmZWdhdXNzaWFuYmx1cjogXCJmZUdhdXNzaWFuQmx1clwiLCBmZWltYWdlOiBcImZlSW1hZ2VcIixcbiAgZmVtZXJnZTogXCJmZU1lcmdlXCIsIGZlbWVyZ2Vub2RlOiBcImZlTWVyZ2VOb2RlXCIsXG4gIGZlbW9ycGhvbG9neTogXCJmZU1vcnBob2xvZ3lcIiwgZmVvZmZzZXQ6IFwiZmVPZmZzZXRcIixcbiAgZmVwb2ludGxpZ2h0OiBcImZlUG9pbnRMaWdodFwiLCBmZXNwZWN1bGFybGlnaHRpbmc6IFwiZmVTcGVjdWxhckxpZ2h0aW5nXCIsXG4gIGZlc3BvdGxpZ2h0OiBcImZlU3BvdExpZ2h0XCIsIGZldGlsZTogXCJmZVRpbGVcIixcbiAgZmV0dXJidWxlbmNlOiBcImZlVHVyYnVsZW5jZVwiLCBmb3JlaWdub2JqZWN0OiBcImZvcmVpZ25PYmplY3RcIixcbiAgZ2x5cGhyZWY6IFwiZ2x5cGhSZWZcIiwgbGluZWFyZ3JhZGllbnQ6IFwibGluZWFyR3JhZGllbnRcIixcbiAgcmFkaWFsZ3JhZGllbnQ6IFwicmFkaWFsR3JhZGllbnRcIiwgdGV4dHBhdGg6IFwidGV4dFBhdGhcIlxufTtcblxuXG4vLyBEYXRhIGZvciBwYXJzaW5nIG51bWVyaWMgYW5kIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzXG4vLyBUaGVzZSBuZXh0IDMgb2JqZWN0cyBhcmUgZGlyZWN0IHRyYW5zbGF0aW9ucyBvZiB0YWJsZXNcbi8vIGluIHRoZSBIVE1MIHNwZWMgaW50byBKYXZhU2NyaXB0IG9iamVjdCBmb3JtYXRcbnZhciBudW1lcmljQ2hhclJlZlJlcGxhY2VtZW50cyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICAweDAwOjB4RkZGRCwgMHg4MDoweDIwQUMsIDB4ODI6MHgyMDFBLCAweDgzOjB4MDE5MiwgMHg4NDoweDIwMUUsXG4gIDB4ODU6MHgyMDI2LCAweDg2OjB4MjAyMCwgMHg4NzoweDIwMjEsIDB4ODg6MHgwMkM2LCAweDg5OjB4MjAzMCxcbiAgMHg4QToweDAxNjAsIDB4OEI6MHgyMDM5LCAweDhDOjB4MDE1MiwgMHg4RToweDAxN0QsIDB4OTE6MHgyMDE4LFxuICAweDkyOjB4MjAxOSwgMHg5MzoweDIwMUMsIDB4OTQ6MHgyMDFELCAweDk1OjB4MjAyMiwgMHg5NjoweDIwMTMsXG4gIDB4OTc6MHgyMDE0LCAweDk4OjB4MDJEQywgMHg5OToweDIxMjIsIDB4OUE6MHgwMTYxLCAweDlCOjB4MjAzQSxcbiAgMHg5QzoweDAxNTMsIDB4OUU6MHgwMTdFLCAweDlGOjB4MDE3OFxufTtcblxuLypcbiAqIFRoaXMgdGFibGUgaXMgZ2VuZXJhdGVkIHdpdGggdGVzdC90b29scy91cGRhdGUtZW50aXRpZXMuanNcbiAqL1xudmFyIG5hbWVkQ2hhclJlZnMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgXCJBRWxpZ1wiOjB4YzYsIFwiQUVsaWc7XCI6MHhjNixcbiAgXCJBTVBcIjoweDI2LCBcIkFNUDtcIjoweDI2LFxuICBcIkFhY3V0ZVwiOjB4YzEsIFwiQWFjdXRlO1wiOjB4YzEsXG4gIFwiQWJyZXZlO1wiOjB4MTAyLCBcIkFjaXJjXCI6MHhjMixcbiAgXCJBY2lyYztcIjoweGMyLCBcIkFjeTtcIjoweDQxMCxcbiAgXCJBZnI7XCI6WzB4ZDgzNSwweGRkMDRdLCBcIkFncmF2ZVwiOjB4YzAsXG4gIFwiQWdyYXZlO1wiOjB4YzAsIFwiQWxwaGE7XCI6MHgzOTEsXG4gIFwiQW1hY3I7XCI6MHgxMDAsIFwiQW5kO1wiOjB4MmE1MyxcbiAgXCJBb2dvbjtcIjoweDEwNCwgXCJBb3BmO1wiOlsweGQ4MzUsMHhkZDM4XSxcbiAgXCJBcHBseUZ1bmN0aW9uO1wiOjB4MjA2MSwgXCJBcmluZ1wiOjB4YzUsXG4gIFwiQXJpbmc7XCI6MHhjNSwgXCJBc2NyO1wiOlsweGQ4MzUsMHhkYzljXSxcbiAgXCJBc3NpZ247XCI6MHgyMjU0LCBcIkF0aWxkZVwiOjB4YzMsXG4gIFwiQXRpbGRlO1wiOjB4YzMsIFwiQXVtbFwiOjB4YzQsXG4gIFwiQXVtbDtcIjoweGM0LCBcIkJhY2tzbGFzaDtcIjoweDIyMTYsXG4gIFwiQmFydjtcIjoweDJhZTcsIFwiQmFyd2VkO1wiOjB4MjMwNixcbiAgXCJCY3k7XCI6MHg0MTEsIFwiQmVjYXVzZTtcIjoweDIyMzUsXG4gIFwiQmVybm91bGxpcztcIjoweDIxMmMsIFwiQmV0YTtcIjoweDM5MixcbiAgXCJCZnI7XCI6WzB4ZDgzNSwweGRkMDVdLCBcIkJvcGY7XCI6WzB4ZDgzNSwweGRkMzldLFxuICBcIkJyZXZlO1wiOjB4MmQ4LCBcIkJzY3I7XCI6MHgyMTJjLFxuICBcIkJ1bXBlcTtcIjoweDIyNGUsIFwiQ0hjeTtcIjoweDQyNyxcbiAgXCJDT1BZXCI6MHhhOSwgXCJDT1BZO1wiOjB4YTksXG4gIFwiQ2FjdXRlO1wiOjB4MTA2LCBcIkNhcDtcIjoweDIyZDIsXG4gIFwiQ2FwaXRhbERpZmZlcmVudGlhbEQ7XCI6MHgyMTQ1LCBcIkNheWxleXM7XCI6MHgyMTJkLFxuICBcIkNjYXJvbjtcIjoweDEwYywgXCJDY2VkaWxcIjoweGM3LFxuICBcIkNjZWRpbDtcIjoweGM3LCBcIkNjaXJjO1wiOjB4MTA4LFxuICBcIkNjb25pbnQ7XCI6MHgyMjMwLCBcIkNkb3Q7XCI6MHgxMGEsXG4gIFwiQ2VkaWxsYTtcIjoweGI4LCBcIkNlbnRlckRvdDtcIjoweGI3LFxuICBcIkNmcjtcIjoweDIxMmQsIFwiQ2hpO1wiOjB4M2E3LFxuICBcIkNpcmNsZURvdDtcIjoweDIyOTksIFwiQ2lyY2xlTWludXM7XCI6MHgyMjk2LFxuICBcIkNpcmNsZVBsdXM7XCI6MHgyMjk1LCBcIkNpcmNsZVRpbWVzO1wiOjB4MjI5NyxcbiAgXCJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6MHgyMjMyLCBcIkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIjoweDIwMWQsXG4gIFwiQ2xvc2VDdXJseVF1b3RlO1wiOjB4MjAxOSwgXCJDb2xvbjtcIjoweDIyMzcsXG4gIFwiQ29sb25lO1wiOjB4MmE3NCwgXCJDb25ncnVlbnQ7XCI6MHgyMjYxLFxuICBcIkNvbmludDtcIjoweDIyMmYsIFwiQ29udG91ckludGVncmFsO1wiOjB4MjIyZSxcbiAgXCJDb3BmO1wiOjB4MjEwMiwgXCJDb3Byb2R1Y3Q7XCI6MHgyMjEwLFxuICBcIkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6MHgyMjMzLCBcIkNyb3NzO1wiOjB4MmEyZixcbiAgXCJDc2NyO1wiOlsweGQ4MzUsMHhkYzllXSwgXCJDdXA7XCI6MHgyMmQzLFxuICBcIkN1cENhcDtcIjoweDIyNGQsIFwiREQ7XCI6MHgyMTQ1LFxuICBcIkREb3RyYWhkO1wiOjB4MjkxMSwgXCJESmN5O1wiOjB4NDAyLFxuICBcIkRTY3k7XCI6MHg0MDUsIFwiRFpjeTtcIjoweDQwZixcbiAgXCJEYWdnZXI7XCI6MHgyMDIxLCBcIkRhcnI7XCI6MHgyMWExLFxuICBcIkRhc2h2O1wiOjB4MmFlNCwgXCJEY2Fyb247XCI6MHgxMGUsXG4gIFwiRGN5O1wiOjB4NDE0LCBcIkRlbDtcIjoweDIyMDcsXG4gIFwiRGVsdGE7XCI6MHgzOTQsIFwiRGZyO1wiOlsweGQ4MzUsMHhkZDA3XSxcbiAgXCJEaWFjcml0aWNhbEFjdXRlO1wiOjB4YjQsIFwiRGlhY3JpdGljYWxEb3Q7XCI6MHgyZDksXG4gIFwiRGlhY3JpdGljYWxEb3VibGVBY3V0ZTtcIjoweDJkZCwgXCJEaWFjcml0aWNhbEdyYXZlO1wiOjB4NjAsXG4gIFwiRGlhY3JpdGljYWxUaWxkZTtcIjoweDJkYywgXCJEaWFtb25kO1wiOjB4MjJjNCxcbiAgXCJEaWZmZXJlbnRpYWxEO1wiOjB4MjE0NiwgXCJEb3BmO1wiOlsweGQ4MzUsMHhkZDNiXSxcbiAgXCJEb3Q7XCI6MHhhOCwgXCJEb3REb3Q7XCI6MHgyMGRjLFxuICBcIkRvdEVxdWFsO1wiOjB4MjI1MCwgXCJEb3VibGVDb250b3VySW50ZWdyYWw7XCI6MHgyMjJmLFxuICBcIkRvdWJsZURvdDtcIjoweGE4LCBcIkRvdWJsZURvd25BcnJvdztcIjoweDIxZDMsXG4gIFwiRG91YmxlTGVmdEFycm93O1wiOjB4MjFkMCwgXCJEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjoweDIxZDQsXG4gIFwiRG91YmxlTGVmdFRlZTtcIjoweDJhZTQsIFwiRG91YmxlTG9uZ0xlZnRBcnJvdztcIjoweDI3ZjgsXG4gIFwiRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOjB4MjdmYSwgXCJEb3VibGVMb25nUmlnaHRBcnJvdztcIjoweDI3ZjksXG4gIFwiRG91YmxlUmlnaHRBcnJvdztcIjoweDIxZDIsIFwiRG91YmxlUmlnaHRUZWU7XCI6MHgyMmE4LFxuICBcIkRvdWJsZVVwQXJyb3c7XCI6MHgyMWQxLCBcIkRvdWJsZVVwRG93bkFycm93O1wiOjB4MjFkNSxcbiAgXCJEb3VibGVWZXJ0aWNhbEJhcjtcIjoweDIyMjUsIFwiRG93bkFycm93O1wiOjB4MjE5MyxcbiAgXCJEb3duQXJyb3dCYXI7XCI6MHgyOTEzLCBcIkRvd25BcnJvd1VwQXJyb3c7XCI6MHgyMWY1LFxuICBcIkRvd25CcmV2ZTtcIjoweDMxMSwgXCJEb3duTGVmdFJpZ2h0VmVjdG9yO1wiOjB4Mjk1MCxcbiAgXCJEb3duTGVmdFRlZVZlY3RvcjtcIjoweDI5NWUsIFwiRG93bkxlZnRWZWN0b3I7XCI6MHgyMWJkLFxuICBcIkRvd25MZWZ0VmVjdG9yQmFyO1wiOjB4Mjk1NiwgXCJEb3duUmlnaHRUZWVWZWN0b3I7XCI6MHgyOTVmLFxuICBcIkRvd25SaWdodFZlY3RvcjtcIjoweDIxYzEsIFwiRG93blJpZ2h0VmVjdG9yQmFyO1wiOjB4Mjk1NyxcbiAgXCJEb3duVGVlO1wiOjB4MjJhNCwgXCJEb3duVGVlQXJyb3c7XCI6MHgyMWE3LFxuICBcIkRvd25hcnJvdztcIjoweDIxZDMsIFwiRHNjcjtcIjpbMHhkODM1LDB4ZGM5Zl0sXG4gIFwiRHN0cm9rO1wiOjB4MTEwLCBcIkVORztcIjoweDE0YSxcbiAgXCJFVEhcIjoweGQwLCBcIkVUSDtcIjoweGQwLFxuICBcIkVhY3V0ZVwiOjB4YzksIFwiRWFjdXRlO1wiOjB4YzksXG4gIFwiRWNhcm9uO1wiOjB4MTFhLCBcIkVjaXJjXCI6MHhjYSxcbiAgXCJFY2lyYztcIjoweGNhLCBcIkVjeTtcIjoweDQyZCxcbiAgXCJFZG90O1wiOjB4MTE2LCBcIkVmcjtcIjpbMHhkODM1LDB4ZGQwOF0sXG4gIFwiRWdyYXZlXCI6MHhjOCwgXCJFZ3JhdmU7XCI6MHhjOCxcbiAgXCJFbGVtZW50O1wiOjB4MjIwOCwgXCJFbWFjcjtcIjoweDExMixcbiAgXCJFbXB0eVNtYWxsU3F1YXJlO1wiOjB4MjVmYiwgXCJFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIjoweDI1YWIsXG4gIFwiRW9nb247XCI6MHgxMTgsIFwiRW9wZjtcIjpbMHhkODM1LDB4ZGQzY10sXG4gIFwiRXBzaWxvbjtcIjoweDM5NSwgXCJFcXVhbDtcIjoweDJhNzUsXG4gIFwiRXF1YWxUaWxkZTtcIjoweDIyNDIsIFwiRXF1aWxpYnJpdW07XCI6MHgyMWNjLFxuICBcIkVzY3I7XCI6MHgyMTMwLCBcIkVzaW07XCI6MHgyYTczLFxuICBcIkV0YTtcIjoweDM5NywgXCJFdW1sXCI6MHhjYixcbiAgXCJFdW1sO1wiOjB4Y2IsIFwiRXhpc3RzO1wiOjB4MjIwMyxcbiAgXCJFeHBvbmVudGlhbEU7XCI6MHgyMTQ3LCBcIkZjeTtcIjoweDQyNCxcbiAgXCJGZnI7XCI6WzB4ZDgzNSwweGRkMDldLCBcIkZpbGxlZFNtYWxsU3F1YXJlO1wiOjB4MjVmYyxcbiAgXCJGaWxsZWRWZXJ5U21hbGxTcXVhcmU7XCI6MHgyNWFhLCBcIkZvcGY7XCI6WzB4ZDgzNSwweGRkM2RdLFxuICBcIkZvckFsbDtcIjoweDIyMDAsIFwiRm91cmllcnRyZjtcIjoweDIxMzEsXG4gIFwiRnNjcjtcIjoweDIxMzEsIFwiR0pjeTtcIjoweDQwMyxcbiAgXCJHVFwiOjB4M2UsIFwiR1Q7XCI6MHgzZSxcbiAgXCJHYW1tYTtcIjoweDM5MywgXCJHYW1tYWQ7XCI6MHgzZGMsXG4gIFwiR2JyZXZlO1wiOjB4MTFlLCBcIkdjZWRpbDtcIjoweDEyMixcbiAgXCJHY2lyYztcIjoweDExYywgXCJHY3k7XCI6MHg0MTMsXG4gIFwiR2RvdDtcIjoweDEyMCwgXCJHZnI7XCI6WzB4ZDgzNSwweGRkMGFdLFxuICBcIkdnO1wiOjB4MjJkOSwgXCJHb3BmO1wiOlsweGQ4MzUsMHhkZDNlXSxcbiAgXCJHcmVhdGVyRXF1YWw7XCI6MHgyMjY1LCBcIkdyZWF0ZXJFcXVhbExlc3M7XCI6MHgyMmRiLFxuICBcIkdyZWF0ZXJGdWxsRXF1YWw7XCI6MHgyMjY3LCBcIkdyZWF0ZXJHcmVhdGVyO1wiOjB4MmFhMixcbiAgXCJHcmVhdGVyTGVzcztcIjoweDIyNzcsIFwiR3JlYXRlclNsYW50RXF1YWw7XCI6MHgyYTdlLFxuICBcIkdyZWF0ZXJUaWxkZTtcIjoweDIyNzMsIFwiR3NjcjtcIjpbMHhkODM1LDB4ZGNhMl0sXG4gIFwiR3Q7XCI6MHgyMjZiLCBcIkhBUkRjeTtcIjoweDQyYSxcbiAgXCJIYWNlaztcIjoweDJjNywgXCJIYXQ7XCI6MHg1ZSxcbiAgXCJIY2lyYztcIjoweDEyNCwgXCJIZnI7XCI6MHgyMTBjLFxuICBcIkhpbGJlcnRTcGFjZTtcIjoweDIxMGIsIFwiSG9wZjtcIjoweDIxMGQsXG4gIFwiSG9yaXpvbnRhbExpbmU7XCI6MHgyNTAwLCBcIkhzY3I7XCI6MHgyMTBiLFxuICBcIkhzdHJvaztcIjoweDEyNiwgXCJIdW1wRG93bkh1bXA7XCI6MHgyMjRlLFxuICBcIkh1bXBFcXVhbDtcIjoweDIyNGYsIFwiSUVjeTtcIjoweDQxNSxcbiAgXCJJSmxpZztcIjoweDEzMiwgXCJJT2N5O1wiOjB4NDAxLFxuICBcIklhY3V0ZVwiOjB4Y2QsIFwiSWFjdXRlO1wiOjB4Y2QsXG4gIFwiSWNpcmNcIjoweGNlLCBcIkljaXJjO1wiOjB4Y2UsXG4gIFwiSWN5O1wiOjB4NDE4LCBcIklkb3Q7XCI6MHgxMzAsXG4gIFwiSWZyO1wiOjB4MjExMSwgXCJJZ3JhdmVcIjoweGNjLFxuICBcIklncmF2ZTtcIjoweGNjLCBcIkltO1wiOjB4MjExMSxcbiAgXCJJbWFjcjtcIjoweDEyYSwgXCJJbWFnaW5hcnlJO1wiOjB4MjE0OCxcbiAgXCJJbXBsaWVzO1wiOjB4MjFkMiwgXCJJbnQ7XCI6MHgyMjJjLFxuICBcIkludGVncmFsO1wiOjB4MjIyYiwgXCJJbnRlcnNlY3Rpb247XCI6MHgyMmMyLFxuICBcIkludmlzaWJsZUNvbW1hO1wiOjB4MjA2MywgXCJJbnZpc2libGVUaW1lcztcIjoweDIwNjIsXG4gIFwiSW9nb247XCI6MHgxMmUsIFwiSW9wZjtcIjpbMHhkODM1LDB4ZGQ0MF0sXG4gIFwiSW90YTtcIjoweDM5OSwgXCJJc2NyO1wiOjB4MjExMCxcbiAgXCJJdGlsZGU7XCI6MHgxMjgsIFwiSXVrY3k7XCI6MHg0MDYsXG4gIFwiSXVtbFwiOjB4Y2YsIFwiSXVtbDtcIjoweGNmLFxuICBcIkpjaXJjO1wiOjB4MTM0LCBcIkpjeTtcIjoweDQxOSxcbiAgXCJKZnI7XCI6WzB4ZDgzNSwweGRkMGRdLCBcIkpvcGY7XCI6WzB4ZDgzNSwweGRkNDFdLFxuICBcIkpzY3I7XCI6WzB4ZDgzNSwweGRjYTVdLCBcIkpzZXJjeTtcIjoweDQwOCxcbiAgXCJKdWtjeTtcIjoweDQwNCwgXCJLSGN5O1wiOjB4NDI1LFxuICBcIktKY3k7XCI6MHg0MGMsIFwiS2FwcGE7XCI6MHgzOWEsXG4gIFwiS2NlZGlsO1wiOjB4MTM2LCBcIktjeTtcIjoweDQxYSxcbiAgXCJLZnI7XCI6WzB4ZDgzNSwweGRkMGVdLCBcIktvcGY7XCI6WzB4ZDgzNSwweGRkNDJdLFxuICBcIktzY3I7XCI6WzB4ZDgzNSwweGRjYTZdLCBcIkxKY3k7XCI6MHg0MDksXG4gIFwiTFRcIjoweDNjLCBcIkxUO1wiOjB4M2MsXG4gIFwiTGFjdXRlO1wiOjB4MTM5LCBcIkxhbWJkYTtcIjoweDM5YixcbiAgXCJMYW5nO1wiOjB4MjdlYSwgXCJMYXBsYWNldHJmO1wiOjB4MjExMixcbiAgXCJMYXJyO1wiOjB4MjE5ZSwgXCJMY2Fyb247XCI6MHgxM2QsXG4gIFwiTGNlZGlsO1wiOjB4MTNiLCBcIkxjeTtcIjoweDQxYixcbiAgXCJMZWZ0QW5nbGVCcmFja2V0O1wiOjB4MjdlOCwgXCJMZWZ0QXJyb3c7XCI6MHgyMTkwLFxuICBcIkxlZnRBcnJvd0JhcjtcIjoweDIxZTQsIFwiTGVmdEFycm93UmlnaHRBcnJvdztcIjoweDIxYzYsXG4gIFwiTGVmdENlaWxpbmc7XCI6MHgyMzA4LCBcIkxlZnREb3VibGVCcmFja2V0O1wiOjB4MjdlNixcbiAgXCJMZWZ0RG93blRlZVZlY3RvcjtcIjoweDI5NjEsIFwiTGVmdERvd25WZWN0b3I7XCI6MHgyMWMzLFxuICBcIkxlZnREb3duVmVjdG9yQmFyO1wiOjB4Mjk1OSwgXCJMZWZ0Rmxvb3I7XCI6MHgyMzBhLFxuICBcIkxlZnRSaWdodEFycm93O1wiOjB4MjE5NCwgXCJMZWZ0UmlnaHRWZWN0b3I7XCI6MHgyOTRlLFxuICBcIkxlZnRUZWU7XCI6MHgyMmEzLCBcIkxlZnRUZWVBcnJvdztcIjoweDIxYTQsXG4gIFwiTGVmdFRlZVZlY3RvcjtcIjoweDI5NWEsIFwiTGVmdFRyaWFuZ2xlO1wiOjB4MjJiMixcbiAgXCJMZWZ0VHJpYW5nbGVCYXI7XCI6MHgyOWNmLCBcIkxlZnRUcmlhbmdsZUVxdWFsO1wiOjB4MjJiNCxcbiAgXCJMZWZ0VXBEb3duVmVjdG9yO1wiOjB4Mjk1MSwgXCJMZWZ0VXBUZWVWZWN0b3I7XCI6MHgyOTYwLFxuICBcIkxlZnRVcFZlY3RvcjtcIjoweDIxYmYsIFwiTGVmdFVwVmVjdG9yQmFyO1wiOjB4Mjk1OCxcbiAgXCJMZWZ0VmVjdG9yO1wiOjB4MjFiYywgXCJMZWZ0VmVjdG9yQmFyO1wiOjB4Mjk1MixcbiAgXCJMZWZ0YXJyb3c7XCI6MHgyMWQwLCBcIkxlZnRyaWdodGFycm93O1wiOjB4MjFkNCxcbiAgXCJMZXNzRXF1YWxHcmVhdGVyO1wiOjB4MjJkYSwgXCJMZXNzRnVsbEVxdWFsO1wiOjB4MjI2NixcbiAgXCJMZXNzR3JlYXRlcjtcIjoweDIyNzYsIFwiTGVzc0xlc3M7XCI6MHgyYWExLFxuICBcIkxlc3NTbGFudEVxdWFsO1wiOjB4MmE3ZCwgXCJMZXNzVGlsZGU7XCI6MHgyMjcyLFxuICBcIkxmcjtcIjpbMHhkODM1LDB4ZGQwZl0sIFwiTGw7XCI6MHgyMmQ4LFxuICBcIkxsZWZ0YXJyb3c7XCI6MHgyMWRhLCBcIkxtaWRvdDtcIjoweDEzZixcbiAgXCJMb25nTGVmdEFycm93O1wiOjB4MjdmNSwgXCJMb25nTGVmdFJpZ2h0QXJyb3c7XCI6MHgyN2Y3LFxuICBcIkxvbmdSaWdodEFycm93O1wiOjB4MjdmNiwgXCJMb25nbGVmdGFycm93O1wiOjB4MjdmOCxcbiAgXCJMb25nbGVmdHJpZ2h0YXJyb3c7XCI6MHgyN2ZhLCBcIkxvbmdyaWdodGFycm93O1wiOjB4MjdmOSxcbiAgXCJMb3BmO1wiOlsweGQ4MzUsMHhkZDQzXSwgXCJMb3dlckxlZnRBcnJvdztcIjoweDIxOTksXG4gIFwiTG93ZXJSaWdodEFycm93O1wiOjB4MjE5OCwgXCJMc2NyO1wiOjB4MjExMixcbiAgXCJMc2g7XCI6MHgyMWIwLCBcIkxzdHJvaztcIjoweDE0MSxcbiAgXCJMdDtcIjoweDIyNmEsIFwiTWFwO1wiOjB4MjkwNSxcbiAgXCJNY3k7XCI6MHg0MWMsIFwiTWVkaXVtU3BhY2U7XCI6MHgyMDVmLFxuICBcIk1lbGxpbnRyZjtcIjoweDIxMzMsIFwiTWZyO1wiOlsweGQ4MzUsMHhkZDEwXSxcbiAgXCJNaW51c1BsdXM7XCI6MHgyMjEzLCBcIk1vcGY7XCI6WzB4ZDgzNSwweGRkNDRdLFxuICBcIk1zY3I7XCI6MHgyMTMzLCBcIk11O1wiOjB4MzljLFxuICBcIk5KY3k7XCI6MHg0MGEsIFwiTmFjdXRlO1wiOjB4MTQzLFxuICBcIk5jYXJvbjtcIjoweDE0NywgXCJOY2VkaWw7XCI6MHgxNDUsXG4gIFwiTmN5O1wiOjB4NDFkLCBcIk5lZ2F0aXZlTWVkaXVtU3BhY2U7XCI6MHgyMDBiLFxuICBcIk5lZ2F0aXZlVGhpY2tTcGFjZTtcIjoweDIwMGIsIFwiTmVnYXRpdmVUaGluU3BhY2U7XCI6MHgyMDBiLFxuICBcIk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcIjoweDIwMGIsIFwiTmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6MHgyMjZiLFxuICBcIk5lc3RlZExlc3NMZXNzO1wiOjB4MjI2YSwgXCJOZXdMaW5lO1wiOjB4YSxcbiAgXCJOZnI7XCI6WzB4ZDgzNSwweGRkMTFdLCBcIk5vQnJlYWs7XCI6MHgyMDYwLFxuICBcIk5vbkJyZWFraW5nU3BhY2U7XCI6MHhhMCwgXCJOb3BmO1wiOjB4MjExNSxcbiAgXCJOb3Q7XCI6MHgyYWVjLCBcIk5vdENvbmdydWVudDtcIjoweDIyNjIsXG4gIFwiTm90Q3VwQ2FwO1wiOjB4MjI2ZCwgXCJOb3REb3VibGVWZXJ0aWNhbEJhcjtcIjoweDIyMjYsXG4gIFwiTm90RWxlbWVudDtcIjoweDIyMDksIFwiTm90RXF1YWw7XCI6MHgyMjYwLFxuICBcIk5vdEVxdWFsVGlsZGU7XCI6WzB4MjI0MiwweDMzOF0sIFwiTm90RXhpc3RzO1wiOjB4MjIwNCxcbiAgXCJOb3RHcmVhdGVyO1wiOjB4MjI2ZiwgXCJOb3RHcmVhdGVyRXF1YWw7XCI6MHgyMjcxLFxuICBcIk5vdEdyZWF0ZXJGdWxsRXF1YWw7XCI6WzB4MjI2NywweDMzOF0sIFwiTm90R3JlYXRlckdyZWF0ZXI7XCI6WzB4MjI2YiwweDMzOF0sXG4gIFwiTm90R3JlYXRlckxlc3M7XCI6MHgyMjc5LCBcIk5vdEdyZWF0ZXJTbGFudEVxdWFsO1wiOlsweDJhN2UsMHgzMzhdLFxuICBcIk5vdEdyZWF0ZXJUaWxkZTtcIjoweDIyNzUsIFwiTm90SHVtcERvd25IdW1wO1wiOlsweDIyNGUsMHgzMzhdLFxuICBcIk5vdEh1bXBFcXVhbDtcIjpbMHgyMjRmLDB4MzM4XSwgXCJOb3RMZWZ0VHJpYW5nbGU7XCI6MHgyMmVhLFxuICBcIk5vdExlZnRUcmlhbmdsZUJhcjtcIjpbMHgyOWNmLDB4MzM4XSwgXCJOb3RMZWZ0VHJpYW5nbGVFcXVhbDtcIjoweDIyZWMsXG4gIFwiTm90TGVzcztcIjoweDIyNmUsIFwiTm90TGVzc0VxdWFsO1wiOjB4MjI3MCxcbiAgXCJOb3RMZXNzR3JlYXRlcjtcIjoweDIyNzgsIFwiTm90TGVzc0xlc3M7XCI6WzB4MjI2YSwweDMzOF0sXG4gIFwiTm90TGVzc1NsYW50RXF1YWw7XCI6WzB4MmE3ZCwweDMzOF0sIFwiTm90TGVzc1RpbGRlO1wiOjB4MjI3NCxcbiAgXCJOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpbMHgyYWEyLDB4MzM4XSwgXCJOb3ROZXN0ZWRMZXNzTGVzcztcIjpbMHgyYWExLDB4MzM4XSxcbiAgXCJOb3RQcmVjZWRlcztcIjoweDIyODAsIFwiTm90UHJlY2VkZXNFcXVhbDtcIjpbMHgyYWFmLDB4MzM4XSxcbiAgXCJOb3RQcmVjZWRlc1NsYW50RXF1YWw7XCI6MHgyMmUwLCBcIk5vdFJldmVyc2VFbGVtZW50O1wiOjB4MjIwYyxcbiAgXCJOb3RSaWdodFRyaWFuZ2xlO1wiOjB4MjJlYiwgXCJOb3RSaWdodFRyaWFuZ2xlQmFyO1wiOlsweDI5ZDAsMHgzMzhdLFxuICBcIk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIjoweDIyZWQsIFwiTm90U3F1YXJlU3Vic2V0O1wiOlsweDIyOGYsMHgzMzhdLFxuICBcIk5vdFNxdWFyZVN1YnNldEVxdWFsO1wiOjB4MjJlMiwgXCJOb3RTcXVhcmVTdXBlcnNldDtcIjpbMHgyMjkwLDB4MzM4XSxcbiAgXCJOb3RTcXVhcmVTdXBlcnNldEVxdWFsO1wiOjB4MjJlMywgXCJOb3RTdWJzZXQ7XCI6WzB4MjI4MiwweDIwZDJdLFxuICBcIk5vdFN1YnNldEVxdWFsO1wiOjB4MjI4OCwgXCJOb3RTdWNjZWVkcztcIjoweDIyODEsXG4gIFwiTm90U3VjY2VlZHNFcXVhbDtcIjpbMHgyYWIwLDB4MzM4XSwgXCJOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6MHgyMmUxLFxuICBcIk5vdFN1Y2NlZWRzVGlsZGU7XCI6WzB4MjI3ZiwweDMzOF0sIFwiTm90U3VwZXJzZXQ7XCI6WzB4MjI4MywweDIwZDJdLFxuICBcIk5vdFN1cGVyc2V0RXF1YWw7XCI6MHgyMjg5LCBcIk5vdFRpbGRlO1wiOjB4MjI0MSxcbiAgXCJOb3RUaWxkZUVxdWFsO1wiOjB4MjI0NCwgXCJOb3RUaWxkZUZ1bGxFcXVhbDtcIjoweDIyNDcsXG4gIFwiTm90VGlsZGVUaWxkZTtcIjoweDIyNDksIFwiTm90VmVydGljYWxCYXI7XCI6MHgyMjI0LFxuICBcIk5zY3I7XCI6WzB4ZDgzNSwweGRjYTldLCBcIk50aWxkZVwiOjB4ZDEsXG4gIFwiTnRpbGRlO1wiOjB4ZDEsIFwiTnU7XCI6MHgzOWQsXG4gIFwiT0VsaWc7XCI6MHgxNTIsIFwiT2FjdXRlXCI6MHhkMyxcbiAgXCJPYWN1dGU7XCI6MHhkMywgXCJPY2lyY1wiOjB4ZDQsXG4gIFwiT2NpcmM7XCI6MHhkNCwgXCJPY3k7XCI6MHg0MWUsXG4gIFwiT2RibGFjO1wiOjB4MTUwLCBcIk9mcjtcIjpbMHhkODM1LDB4ZGQxMl0sXG4gIFwiT2dyYXZlXCI6MHhkMiwgXCJPZ3JhdmU7XCI6MHhkMixcbiAgXCJPbWFjcjtcIjoweDE0YywgXCJPbWVnYTtcIjoweDNhOSxcbiAgXCJPbWljcm9uO1wiOjB4MzlmLCBcIk9vcGY7XCI6WzB4ZDgzNSwweGRkNDZdLFxuICBcIk9wZW5DdXJseURvdWJsZVF1b3RlO1wiOjB4MjAxYywgXCJPcGVuQ3VybHlRdW90ZTtcIjoweDIwMTgsXG4gIFwiT3I7XCI6MHgyYTU0LCBcIk9zY3I7XCI6WzB4ZDgzNSwweGRjYWFdLFxuICBcIk9zbGFzaFwiOjB4ZDgsIFwiT3NsYXNoO1wiOjB4ZDgsXG4gIFwiT3RpbGRlXCI6MHhkNSwgXCJPdGlsZGU7XCI6MHhkNSxcbiAgXCJPdGltZXM7XCI6MHgyYTM3LCBcIk91bWxcIjoweGQ2LFxuICBcIk91bWw7XCI6MHhkNiwgXCJPdmVyQmFyO1wiOjB4MjAzZSxcbiAgXCJPdmVyQnJhY2U7XCI6MHgyM2RlLCBcIk92ZXJCcmFja2V0O1wiOjB4MjNiNCxcbiAgXCJPdmVyUGFyZW50aGVzaXM7XCI6MHgyM2RjLCBcIlBhcnRpYWxEO1wiOjB4MjIwMixcbiAgXCJQY3k7XCI6MHg0MWYsIFwiUGZyO1wiOlsweGQ4MzUsMHhkZDEzXSxcbiAgXCJQaGk7XCI6MHgzYTYsIFwiUGk7XCI6MHgzYTAsXG4gIFwiUGx1c01pbnVzO1wiOjB4YjEsIFwiUG9pbmNhcmVwbGFuZTtcIjoweDIxMGMsXG4gIFwiUG9wZjtcIjoweDIxMTksIFwiUHI7XCI6MHgyYWJiLFxuICBcIlByZWNlZGVzO1wiOjB4MjI3YSwgXCJQcmVjZWRlc0VxdWFsO1wiOjB4MmFhZixcbiAgXCJQcmVjZWRlc1NsYW50RXF1YWw7XCI6MHgyMjdjLCBcIlByZWNlZGVzVGlsZGU7XCI6MHgyMjdlLFxuICBcIlByaW1lO1wiOjB4MjAzMywgXCJQcm9kdWN0O1wiOjB4MjIwZixcbiAgXCJQcm9wb3J0aW9uO1wiOjB4MjIzNywgXCJQcm9wb3J0aW9uYWw7XCI6MHgyMjFkLFxuICBcIlBzY3I7XCI6WzB4ZDgzNSwweGRjYWJdLCBcIlBzaTtcIjoweDNhOCxcbiAgXCJRVU9UXCI6MHgyMiwgXCJRVU9UO1wiOjB4MjIsXG4gIFwiUWZyO1wiOlsweGQ4MzUsMHhkZDE0XSwgXCJRb3BmO1wiOjB4MjExYSxcbiAgXCJRc2NyO1wiOlsweGQ4MzUsMHhkY2FjXSwgXCJSQmFycjtcIjoweDI5MTAsXG4gIFwiUkVHXCI6MHhhZSwgXCJSRUc7XCI6MHhhZSxcbiAgXCJSYWN1dGU7XCI6MHgxNTQsIFwiUmFuZztcIjoweDI3ZWIsXG4gIFwiUmFycjtcIjoweDIxYTAsIFwiUmFycnRsO1wiOjB4MjkxNixcbiAgXCJSY2Fyb247XCI6MHgxNTgsIFwiUmNlZGlsO1wiOjB4MTU2LFxuICBcIlJjeTtcIjoweDQyMCwgXCJSZTtcIjoweDIxMWMsXG4gIFwiUmV2ZXJzZUVsZW1lbnQ7XCI6MHgyMjBiLCBcIlJldmVyc2VFcXVpbGlicml1bTtcIjoweDIxY2IsXG4gIFwiUmV2ZXJzZVVwRXF1aWxpYnJpdW07XCI6MHgyOTZmLCBcIlJmcjtcIjoweDIxMWMsXG4gIFwiUmhvO1wiOjB4M2ExLCBcIlJpZ2h0QW5nbGVCcmFja2V0O1wiOjB4MjdlOSxcbiAgXCJSaWdodEFycm93O1wiOjB4MjE5MiwgXCJSaWdodEFycm93QmFyO1wiOjB4MjFlNSxcbiAgXCJSaWdodEFycm93TGVmdEFycm93O1wiOjB4MjFjNCwgXCJSaWdodENlaWxpbmc7XCI6MHgyMzA5LFxuICBcIlJpZ2h0RG91YmxlQnJhY2tldDtcIjoweDI3ZTcsIFwiUmlnaHREb3duVGVlVmVjdG9yO1wiOjB4Mjk1ZCxcbiAgXCJSaWdodERvd25WZWN0b3I7XCI6MHgyMWMyLCBcIlJpZ2h0RG93blZlY3RvckJhcjtcIjoweDI5NTUsXG4gIFwiUmlnaHRGbG9vcjtcIjoweDIzMGIsIFwiUmlnaHRUZWU7XCI6MHgyMmEyLFxuICBcIlJpZ2h0VGVlQXJyb3c7XCI6MHgyMWE2LCBcIlJpZ2h0VGVlVmVjdG9yO1wiOjB4Mjk1YixcbiAgXCJSaWdodFRyaWFuZ2xlO1wiOjB4MjJiMywgXCJSaWdodFRyaWFuZ2xlQmFyO1wiOjB4MjlkMCxcbiAgXCJSaWdodFRyaWFuZ2xlRXF1YWw7XCI6MHgyMmI1LCBcIlJpZ2h0VXBEb3duVmVjdG9yO1wiOjB4Mjk0ZixcbiAgXCJSaWdodFVwVGVlVmVjdG9yO1wiOjB4Mjk1YywgXCJSaWdodFVwVmVjdG9yO1wiOjB4MjFiZSxcbiAgXCJSaWdodFVwVmVjdG9yQmFyO1wiOjB4Mjk1NCwgXCJSaWdodFZlY3RvcjtcIjoweDIxYzAsXG4gIFwiUmlnaHRWZWN0b3JCYXI7XCI6MHgyOTUzLCBcIlJpZ2h0YXJyb3c7XCI6MHgyMWQyLFxuICBcIlJvcGY7XCI6MHgyMTFkLCBcIlJvdW5kSW1wbGllcztcIjoweDI5NzAsXG4gIFwiUnJpZ2h0YXJyb3c7XCI6MHgyMWRiLCBcIlJzY3I7XCI6MHgyMTFiLFxuICBcIlJzaDtcIjoweDIxYjEsIFwiUnVsZURlbGF5ZWQ7XCI6MHgyOWY0LFxuICBcIlNIQ0hjeTtcIjoweDQyOSwgXCJTSGN5O1wiOjB4NDI4LFxuICBcIlNPRlRjeTtcIjoweDQyYywgXCJTYWN1dGU7XCI6MHgxNWEsXG4gIFwiU2M7XCI6MHgyYWJjLCBcIlNjYXJvbjtcIjoweDE2MCxcbiAgXCJTY2VkaWw7XCI6MHgxNWUsIFwiU2NpcmM7XCI6MHgxNWMsXG4gIFwiU2N5O1wiOjB4NDIxLCBcIlNmcjtcIjpbMHhkODM1LDB4ZGQxNl0sXG4gIFwiU2hvcnREb3duQXJyb3c7XCI6MHgyMTkzLCBcIlNob3J0TGVmdEFycm93O1wiOjB4MjE5MCxcbiAgXCJTaG9ydFJpZ2h0QXJyb3c7XCI6MHgyMTkyLCBcIlNob3J0VXBBcnJvdztcIjoweDIxOTEsXG4gIFwiU2lnbWE7XCI6MHgzYTMsIFwiU21hbGxDaXJjbGU7XCI6MHgyMjE4LFxuICBcIlNvcGY7XCI6WzB4ZDgzNSwweGRkNGFdLCBcIlNxcnQ7XCI6MHgyMjFhLFxuICBcIlNxdWFyZTtcIjoweDI1YTEsIFwiU3F1YXJlSW50ZXJzZWN0aW9uO1wiOjB4MjI5MyxcbiAgXCJTcXVhcmVTdWJzZXQ7XCI6MHgyMjhmLCBcIlNxdWFyZVN1YnNldEVxdWFsO1wiOjB4MjI5MSxcbiAgXCJTcXVhcmVTdXBlcnNldDtcIjoweDIyOTAsIFwiU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjoweDIyOTIsXG4gIFwiU3F1YXJlVW5pb247XCI6MHgyMjk0LCBcIlNzY3I7XCI6WzB4ZDgzNSwweGRjYWVdLFxuICBcIlN0YXI7XCI6MHgyMmM2LCBcIlN1YjtcIjoweDIyZDAsXG4gIFwiU3Vic2V0O1wiOjB4MjJkMCwgXCJTdWJzZXRFcXVhbDtcIjoweDIyODYsXG4gIFwiU3VjY2VlZHM7XCI6MHgyMjdiLCBcIlN1Y2NlZWRzRXF1YWw7XCI6MHgyYWIwLFxuICBcIlN1Y2NlZWRzU2xhbnRFcXVhbDtcIjoweDIyN2QsIFwiU3VjY2VlZHNUaWxkZTtcIjoweDIyN2YsXG4gIFwiU3VjaFRoYXQ7XCI6MHgyMjBiLCBcIlN1bTtcIjoweDIyMTEsXG4gIFwiU3VwO1wiOjB4MjJkMSwgXCJTdXBlcnNldDtcIjoweDIyODMsXG4gIFwiU3VwZXJzZXRFcXVhbDtcIjoweDIyODcsIFwiU3Vwc2V0O1wiOjB4MjJkMSxcbiAgXCJUSE9STlwiOjB4ZGUsIFwiVEhPUk47XCI6MHhkZSxcbiAgXCJUUkFERTtcIjoweDIxMjIsIFwiVFNIY3k7XCI6MHg0MGIsXG4gIFwiVFNjeTtcIjoweDQyNiwgXCJUYWI7XCI6MHg5LFxuICBcIlRhdTtcIjoweDNhNCwgXCJUY2Fyb247XCI6MHgxNjQsXG4gIFwiVGNlZGlsO1wiOjB4MTYyLCBcIlRjeTtcIjoweDQyMixcbiAgXCJUZnI7XCI6WzB4ZDgzNSwweGRkMTddLCBcIlRoZXJlZm9yZTtcIjoweDIyMzQsXG4gIFwiVGhldGE7XCI6MHgzOTgsIFwiVGhpY2tTcGFjZTtcIjpbMHgyMDVmLDB4MjAwYV0sXG4gIFwiVGhpblNwYWNlO1wiOjB4MjAwOSwgXCJUaWxkZTtcIjoweDIyM2MsXG4gIFwiVGlsZGVFcXVhbDtcIjoweDIyNDMsIFwiVGlsZGVGdWxsRXF1YWw7XCI6MHgyMjQ1LFxuICBcIlRpbGRlVGlsZGU7XCI6MHgyMjQ4LCBcIlRvcGY7XCI6WzB4ZDgzNSwweGRkNGJdLFxuICBcIlRyaXBsZURvdDtcIjoweDIwZGIsIFwiVHNjcjtcIjpbMHhkODM1LDB4ZGNhZl0sXG4gIFwiVHN0cm9rO1wiOjB4MTY2LCBcIlVhY3V0ZVwiOjB4ZGEsXG4gIFwiVWFjdXRlO1wiOjB4ZGEsIFwiVWFycjtcIjoweDIxOWYsXG4gIFwiVWFycm9jaXI7XCI6MHgyOTQ5LCBcIlVicmN5O1wiOjB4NDBlLFxuICBcIlVicmV2ZTtcIjoweDE2YywgXCJVY2lyY1wiOjB4ZGIsXG4gIFwiVWNpcmM7XCI6MHhkYiwgXCJVY3k7XCI6MHg0MjMsXG4gIFwiVWRibGFjO1wiOjB4MTcwLCBcIlVmcjtcIjpbMHhkODM1LDB4ZGQxOF0sXG4gIFwiVWdyYXZlXCI6MHhkOSwgXCJVZ3JhdmU7XCI6MHhkOSxcbiAgXCJVbWFjcjtcIjoweDE2YSwgXCJVbmRlckJhcjtcIjoweDVmLFxuICBcIlVuZGVyQnJhY2U7XCI6MHgyM2RmLCBcIlVuZGVyQnJhY2tldDtcIjoweDIzYjUsXG4gIFwiVW5kZXJQYXJlbnRoZXNpcztcIjoweDIzZGQsIFwiVW5pb247XCI6MHgyMmMzLFxuICBcIlVuaW9uUGx1cztcIjoweDIyOGUsIFwiVW9nb247XCI6MHgxNzIsXG4gIFwiVW9wZjtcIjpbMHhkODM1LDB4ZGQ0Y10sIFwiVXBBcnJvdztcIjoweDIxOTEsXG4gIFwiVXBBcnJvd0JhcjtcIjoweDI5MTIsIFwiVXBBcnJvd0Rvd25BcnJvdztcIjoweDIxYzUsXG4gIFwiVXBEb3duQXJyb3c7XCI6MHgyMTk1LCBcIlVwRXF1aWxpYnJpdW07XCI6MHgyOTZlLFxuICBcIlVwVGVlO1wiOjB4MjJhNSwgXCJVcFRlZUFycm93O1wiOjB4MjFhNSxcbiAgXCJVcGFycm93O1wiOjB4MjFkMSwgXCJVcGRvd25hcnJvdztcIjoweDIxZDUsXG4gIFwiVXBwZXJMZWZ0QXJyb3c7XCI6MHgyMTk2LCBcIlVwcGVyUmlnaHRBcnJvdztcIjoweDIxOTcsXG4gIFwiVXBzaTtcIjoweDNkMiwgXCJVcHNpbG9uO1wiOjB4M2E1LFxuICBcIlVyaW5nO1wiOjB4MTZlLCBcIlVzY3I7XCI6WzB4ZDgzNSwweGRjYjBdLFxuICBcIlV0aWxkZTtcIjoweDE2OCwgXCJVdW1sXCI6MHhkYyxcbiAgXCJVdW1sO1wiOjB4ZGMsIFwiVkRhc2g7XCI6MHgyMmFiLFxuICBcIlZiYXI7XCI6MHgyYWViLCBcIlZjeTtcIjoweDQxMixcbiAgXCJWZGFzaDtcIjoweDIyYTksIFwiVmRhc2hsO1wiOjB4MmFlNixcbiAgXCJWZWU7XCI6MHgyMmMxLCBcIlZlcmJhcjtcIjoweDIwMTYsXG4gIFwiVmVydDtcIjoweDIwMTYsIFwiVmVydGljYWxCYXI7XCI6MHgyMjIzLFxuICBcIlZlcnRpY2FsTGluZTtcIjoweDdjLCBcIlZlcnRpY2FsU2VwYXJhdG9yO1wiOjB4Mjc1OCxcbiAgXCJWZXJ0aWNhbFRpbGRlO1wiOjB4MjI0MCwgXCJWZXJ5VGhpblNwYWNlO1wiOjB4MjAwYSxcbiAgXCJWZnI7XCI6WzB4ZDgzNSwweGRkMTldLCBcIlZvcGY7XCI6WzB4ZDgzNSwweGRkNGRdLFxuICBcIlZzY3I7XCI6WzB4ZDgzNSwweGRjYjFdLCBcIlZ2ZGFzaDtcIjoweDIyYWEsXG4gIFwiV2NpcmM7XCI6MHgxNzQsIFwiV2VkZ2U7XCI6MHgyMmMwLFxuICBcIldmcjtcIjpbMHhkODM1LDB4ZGQxYV0sIFwiV29wZjtcIjpbMHhkODM1LDB4ZGQ0ZV0sXG4gIFwiV3NjcjtcIjpbMHhkODM1LDB4ZGNiMl0sIFwiWGZyO1wiOlsweGQ4MzUsMHhkZDFiXSxcbiAgXCJYaTtcIjoweDM5ZSwgXCJYb3BmO1wiOlsweGQ4MzUsMHhkZDRmXSxcbiAgXCJYc2NyO1wiOlsweGQ4MzUsMHhkY2IzXSwgXCJZQWN5O1wiOjB4NDJmLFxuICBcIllJY3k7XCI6MHg0MDcsIFwiWVVjeTtcIjoweDQyZSxcbiAgXCJZYWN1dGVcIjoweGRkLCBcIllhY3V0ZTtcIjoweGRkLFxuICBcIlljaXJjO1wiOjB4MTc2LCBcIlljeTtcIjoweDQyYixcbiAgXCJZZnI7XCI6WzB4ZDgzNSwweGRkMWNdLCBcIllvcGY7XCI6WzB4ZDgzNSwweGRkNTBdLFxuICBcIllzY3I7XCI6WzB4ZDgzNSwweGRjYjRdLCBcIll1bWw7XCI6MHgxNzgsXG4gIFwiWkhjeTtcIjoweDQxNiwgXCJaYWN1dGU7XCI6MHgxNzksXG4gIFwiWmNhcm9uO1wiOjB4MTdkLCBcIlpjeTtcIjoweDQxNyxcbiAgXCJaZG90O1wiOjB4MTdiLCBcIlplcm9XaWR0aFNwYWNlO1wiOjB4MjAwYixcbiAgXCJaZXRhO1wiOjB4Mzk2LCBcIlpmcjtcIjoweDIxMjgsXG4gIFwiWm9wZjtcIjoweDIxMjQsIFwiWnNjcjtcIjpbMHhkODM1LDB4ZGNiNV0sXG4gIFwiYWFjdXRlXCI6MHhlMSwgXCJhYWN1dGU7XCI6MHhlMSxcbiAgXCJhYnJldmU7XCI6MHgxMDMsIFwiYWM7XCI6MHgyMjNlLFxuICBcImFjRTtcIjpbMHgyMjNlLDB4MzMzXSwgXCJhY2Q7XCI6MHgyMjNmLFxuICBcImFjaXJjXCI6MHhlMiwgXCJhY2lyYztcIjoweGUyLFxuICBcImFjdXRlXCI6MHhiNCwgXCJhY3V0ZTtcIjoweGI0LFxuICBcImFjeTtcIjoweDQzMCwgXCJhZWxpZ1wiOjB4ZTYsXG4gIFwiYWVsaWc7XCI6MHhlNiwgXCJhZjtcIjoweDIwNjEsXG4gIFwiYWZyO1wiOlsweGQ4MzUsMHhkZDFlXSwgXCJhZ3JhdmVcIjoweGUwLFxuICBcImFncmF2ZTtcIjoweGUwLCBcImFsZWZzeW07XCI6MHgyMTM1LFxuICBcImFsZXBoO1wiOjB4MjEzNSwgXCJhbHBoYTtcIjoweDNiMSxcbiAgXCJhbWFjcjtcIjoweDEwMSwgXCJhbWFsZztcIjoweDJhM2YsXG4gIFwiYW1wXCI6MHgyNiwgXCJhbXA7XCI6MHgyNixcbiAgXCJhbmQ7XCI6MHgyMjI3LCBcImFuZGFuZDtcIjoweDJhNTUsXG4gIFwiYW5kZDtcIjoweDJhNWMsIFwiYW5kc2xvcGU7XCI6MHgyYTU4LFxuICBcImFuZHY7XCI6MHgyYTVhLCBcImFuZztcIjoweDIyMjAsXG4gIFwiYW5nZTtcIjoweDI5YTQsIFwiYW5nbGU7XCI6MHgyMjIwLFxuICBcImFuZ21zZDtcIjoweDIyMjEsIFwiYW5nbXNkYWE7XCI6MHgyOWE4LFxuICBcImFuZ21zZGFiO1wiOjB4MjlhOSwgXCJhbmdtc2RhYztcIjoweDI5YWEsXG4gIFwiYW5nbXNkYWQ7XCI6MHgyOWFiLCBcImFuZ21zZGFlO1wiOjB4MjlhYyxcbiAgXCJhbmdtc2RhZjtcIjoweDI5YWQsIFwiYW5nbXNkYWc7XCI6MHgyOWFlLFxuICBcImFuZ21zZGFoO1wiOjB4MjlhZiwgXCJhbmdydDtcIjoweDIyMWYsXG4gIFwiYW5ncnR2YjtcIjoweDIyYmUsIFwiYW5ncnR2YmQ7XCI6MHgyOTlkLFxuICBcImFuZ3NwaDtcIjoweDIyMjIsIFwiYW5nc3Q7XCI6MHhjNSxcbiAgXCJhbmd6YXJyO1wiOjB4MjM3YywgXCJhb2dvbjtcIjoweDEwNSxcbiAgXCJhb3BmO1wiOlsweGQ4MzUsMHhkZDUyXSwgXCJhcDtcIjoweDIyNDgsXG4gIFwiYXBFO1wiOjB4MmE3MCwgXCJhcGFjaXI7XCI6MHgyYTZmLFxuICBcImFwZTtcIjoweDIyNGEsIFwiYXBpZDtcIjoweDIyNGIsXG4gIFwiYXBvcztcIjoweDI3LCBcImFwcHJveDtcIjoweDIyNDgsXG4gIFwiYXBwcm94ZXE7XCI6MHgyMjRhLCBcImFyaW5nXCI6MHhlNSxcbiAgXCJhcmluZztcIjoweGU1LCBcImFzY3I7XCI6WzB4ZDgzNSwweGRjYjZdLFxuICBcImFzdDtcIjoweDJhLCBcImFzeW1wO1wiOjB4MjI0OCxcbiAgXCJhc3ltcGVxO1wiOjB4MjI0ZCwgXCJhdGlsZGVcIjoweGUzLFxuICBcImF0aWxkZTtcIjoweGUzLCBcImF1bWxcIjoweGU0LFxuICBcImF1bWw7XCI6MHhlNCwgXCJhd2NvbmludDtcIjoweDIyMzMsXG4gIFwiYXdpbnQ7XCI6MHgyYTExLCBcImJOb3Q7XCI6MHgyYWVkLFxuICBcImJhY2tjb25nO1wiOjB4MjI0YywgXCJiYWNrZXBzaWxvbjtcIjoweDNmNixcbiAgXCJiYWNrcHJpbWU7XCI6MHgyMDM1LCBcImJhY2tzaW07XCI6MHgyMjNkLFxuICBcImJhY2tzaW1lcTtcIjoweDIyY2QsIFwiYmFydmVlO1wiOjB4MjJiZCxcbiAgXCJiYXJ3ZWQ7XCI6MHgyMzA1LCBcImJhcndlZGdlO1wiOjB4MjMwNSxcbiAgXCJiYnJrO1wiOjB4MjNiNSwgXCJiYnJrdGJyaztcIjoweDIzYjYsXG4gIFwiYmNvbmc7XCI6MHgyMjRjLCBcImJjeTtcIjoweDQzMSxcbiAgXCJiZHF1bztcIjoweDIwMWUsIFwiYmVjYXVzO1wiOjB4MjIzNSxcbiAgXCJiZWNhdXNlO1wiOjB4MjIzNSwgXCJiZW1wdHl2O1wiOjB4MjliMCxcbiAgXCJiZXBzaTtcIjoweDNmNiwgXCJiZXJub3U7XCI6MHgyMTJjLFxuICBcImJldGE7XCI6MHgzYjIsIFwiYmV0aDtcIjoweDIxMzYsXG4gIFwiYmV0d2VlbjtcIjoweDIyNmMsIFwiYmZyO1wiOlsweGQ4MzUsMHhkZDFmXSxcbiAgXCJiaWdjYXA7XCI6MHgyMmMyLCBcImJpZ2NpcmM7XCI6MHgyNWVmLFxuICBcImJpZ2N1cDtcIjoweDIyYzMsIFwiYmlnb2RvdDtcIjoweDJhMDAsXG4gIFwiYmlnb3BsdXM7XCI6MHgyYTAxLCBcImJpZ290aW1lcztcIjoweDJhMDIsXG4gIFwiYmlnc3FjdXA7XCI6MHgyYTA2LCBcImJpZ3N0YXI7XCI6MHgyNjA1LFxuICBcImJpZ3RyaWFuZ2xlZG93bjtcIjoweDI1YmQsIFwiYmlndHJpYW5nbGV1cDtcIjoweDI1YjMsXG4gIFwiYmlndXBsdXM7XCI6MHgyYTA0LCBcImJpZ3ZlZTtcIjoweDIyYzEsXG4gIFwiYmlnd2VkZ2U7XCI6MHgyMmMwLCBcImJrYXJvdztcIjoweDI5MGQsXG4gIFwiYmxhY2tsb3plbmdlO1wiOjB4MjllYiwgXCJibGFja3NxdWFyZTtcIjoweDI1YWEsXG4gIFwiYmxhY2t0cmlhbmdsZTtcIjoweDI1YjQsIFwiYmxhY2t0cmlhbmdsZWRvd247XCI6MHgyNWJlLFxuICBcImJsYWNrdHJpYW5nbGVsZWZ0O1wiOjB4MjVjMiwgXCJibGFja3RyaWFuZ2xlcmlnaHQ7XCI6MHgyNWI4LFxuICBcImJsYW5rO1wiOjB4MjQyMywgXCJibGsxMjtcIjoweDI1OTIsXG4gIFwiYmxrMTQ7XCI6MHgyNTkxLCBcImJsazM0O1wiOjB4MjU5MyxcbiAgXCJibG9jaztcIjoweDI1ODgsIFwiYm5lO1wiOlsweDNkLDB4MjBlNV0sXG4gIFwiYm5lcXVpdjtcIjpbMHgyMjYxLDB4MjBlNV0sIFwiYm5vdDtcIjoweDIzMTAsXG4gIFwiYm9wZjtcIjpbMHhkODM1LDB4ZGQ1M10sIFwiYm90O1wiOjB4MjJhNSxcbiAgXCJib3R0b207XCI6MHgyMmE1LCBcImJvd3RpZTtcIjoweDIyYzgsXG4gIFwiYm94REw7XCI6MHgyNTU3LCBcImJveERSO1wiOjB4MjU1NCxcbiAgXCJib3hEbDtcIjoweDI1NTYsIFwiYm94RHI7XCI6MHgyNTUzLFxuICBcImJveEg7XCI6MHgyNTUwLCBcImJveEhEO1wiOjB4MjU2NixcbiAgXCJib3hIVTtcIjoweDI1NjksIFwiYm94SGQ7XCI6MHgyNTY0LFxuICBcImJveEh1O1wiOjB4MjU2NywgXCJib3hVTDtcIjoweDI1NWQsXG4gIFwiYm94VVI7XCI6MHgyNTVhLCBcImJveFVsO1wiOjB4MjU1YyxcbiAgXCJib3hVcjtcIjoweDI1NTksIFwiYm94VjtcIjoweDI1NTEsXG4gIFwiYm94Vkg7XCI6MHgyNTZjLCBcImJveFZMO1wiOjB4MjU2MyxcbiAgXCJib3hWUjtcIjoweDI1NjAsIFwiYm94Vmg7XCI6MHgyNTZiLFxuICBcImJveFZsO1wiOjB4MjU2MiwgXCJib3hWcjtcIjoweDI1NWYsXG4gIFwiYm94Ym94O1wiOjB4MjljOSwgXCJib3hkTDtcIjoweDI1NTUsXG4gIFwiYm94ZFI7XCI6MHgyNTUyLCBcImJveGRsO1wiOjB4MjUxMCxcbiAgXCJib3hkcjtcIjoweDI1MGMsIFwiYm94aDtcIjoweDI1MDAsXG4gIFwiYm94aEQ7XCI6MHgyNTY1LCBcImJveGhVO1wiOjB4MjU2OCxcbiAgXCJib3hoZDtcIjoweDI1MmMsIFwiYm94aHU7XCI6MHgyNTM0LFxuICBcImJveG1pbnVzO1wiOjB4MjI5ZiwgXCJib3hwbHVzO1wiOjB4MjI5ZSxcbiAgXCJib3h0aW1lcztcIjoweDIyYTAsIFwiYm94dUw7XCI6MHgyNTViLFxuICBcImJveHVSO1wiOjB4MjU1OCwgXCJib3h1bDtcIjoweDI1MTgsXG4gIFwiYm94dXI7XCI6MHgyNTE0LCBcImJveHY7XCI6MHgyNTAyLFxuICBcImJveHZIO1wiOjB4MjU2YSwgXCJib3h2TDtcIjoweDI1NjEsXG4gIFwiYm94dlI7XCI6MHgyNTVlLCBcImJveHZoO1wiOjB4MjUzYyxcbiAgXCJib3h2bDtcIjoweDI1MjQsIFwiYm94dnI7XCI6MHgyNTFjLFxuICBcImJwcmltZTtcIjoweDIwMzUsIFwiYnJldmU7XCI6MHgyZDgsXG4gIFwiYnJ2YmFyXCI6MHhhNiwgXCJicnZiYXI7XCI6MHhhNixcbiAgXCJic2NyO1wiOlsweGQ4MzUsMHhkY2I3XSwgXCJic2VtaTtcIjoweDIwNGYsXG4gIFwiYnNpbTtcIjoweDIyM2QsIFwiYnNpbWU7XCI6MHgyMmNkLFxuICBcImJzb2w7XCI6MHg1YywgXCJic29sYjtcIjoweDI5YzUsXG4gIFwiYnNvbGhzdWI7XCI6MHgyN2M4LCBcImJ1bGw7XCI6MHgyMDIyLFxuICBcImJ1bGxldDtcIjoweDIwMjIsIFwiYnVtcDtcIjoweDIyNGUsXG4gIFwiYnVtcEU7XCI6MHgyYWFlLCBcImJ1bXBlO1wiOjB4MjI0ZixcbiAgXCJidW1wZXE7XCI6MHgyMjRmLCBcImNhY3V0ZTtcIjoweDEwNyxcbiAgXCJjYXA7XCI6MHgyMjI5LCBcImNhcGFuZDtcIjoweDJhNDQsXG4gIFwiY2FwYnJjdXA7XCI6MHgyYTQ5LCBcImNhcGNhcDtcIjoweDJhNGIsXG4gIFwiY2FwY3VwO1wiOjB4MmE0NywgXCJjYXBkb3Q7XCI6MHgyYTQwLFxuICBcImNhcHM7XCI6WzB4MjIyOSwweGZlMDBdLCBcImNhcmV0O1wiOjB4MjA0MSxcbiAgXCJjYXJvbjtcIjoweDJjNywgXCJjY2FwcztcIjoweDJhNGQsXG4gIFwiY2Nhcm9uO1wiOjB4MTBkLCBcImNjZWRpbFwiOjB4ZTcsXG4gIFwiY2NlZGlsO1wiOjB4ZTcsIFwiY2NpcmM7XCI6MHgxMDksXG4gIFwiY2N1cHM7XCI6MHgyYTRjLCBcImNjdXBzc207XCI6MHgyYTUwLFxuICBcImNkb3Q7XCI6MHgxMGIsIFwiY2VkaWxcIjoweGI4LFxuICBcImNlZGlsO1wiOjB4YjgsIFwiY2VtcHR5djtcIjoweDI5YjIsXG4gIFwiY2VudFwiOjB4YTIsIFwiY2VudDtcIjoweGEyLFxuICBcImNlbnRlcmRvdDtcIjoweGI3LCBcImNmcjtcIjpbMHhkODM1LDB4ZGQyMF0sXG4gIFwiY2hjeTtcIjoweDQ0NywgXCJjaGVjaztcIjoweDI3MTMsXG4gIFwiY2hlY2ttYXJrO1wiOjB4MjcxMywgXCJjaGk7XCI6MHgzYzcsXG4gIFwiY2lyO1wiOjB4MjVjYiwgXCJjaXJFO1wiOjB4MjljMyxcbiAgXCJjaXJjO1wiOjB4MmM2LCBcImNpcmNlcTtcIjoweDIyNTcsXG4gIFwiY2lyY2xlYXJyb3dsZWZ0O1wiOjB4MjFiYSwgXCJjaXJjbGVhcnJvd3JpZ2h0O1wiOjB4MjFiYixcbiAgXCJjaXJjbGVkUjtcIjoweGFlLCBcImNpcmNsZWRTO1wiOjB4MjRjOCxcbiAgXCJjaXJjbGVkYXN0O1wiOjB4MjI5YiwgXCJjaXJjbGVkY2lyYztcIjoweDIyOWEsXG4gIFwiY2lyY2xlZGRhc2g7XCI6MHgyMjlkLCBcImNpcmU7XCI6MHgyMjU3LFxuICBcImNpcmZuaW50O1wiOjB4MmExMCwgXCJjaXJtaWQ7XCI6MHgyYWVmLFxuICBcImNpcnNjaXI7XCI6MHgyOWMyLCBcImNsdWJzO1wiOjB4MjY2MyxcbiAgXCJjbHVic3VpdDtcIjoweDI2NjMsIFwiY29sb247XCI6MHgzYSxcbiAgXCJjb2xvbmU7XCI6MHgyMjU0LCBcImNvbG9uZXE7XCI6MHgyMjU0LFxuICBcImNvbW1hO1wiOjB4MmMsIFwiY29tbWF0O1wiOjB4NDAsXG4gIFwiY29tcDtcIjoweDIyMDEsIFwiY29tcGZuO1wiOjB4MjIxOCxcbiAgXCJjb21wbGVtZW50O1wiOjB4MjIwMSwgXCJjb21wbGV4ZXM7XCI6MHgyMTAyLFxuICBcImNvbmc7XCI6MHgyMjQ1LCBcImNvbmdkb3Q7XCI6MHgyYTZkLFxuICBcImNvbmludDtcIjoweDIyMmUsIFwiY29wZjtcIjpbMHhkODM1LDB4ZGQ1NF0sXG4gIFwiY29wcm9kO1wiOjB4MjIxMCwgXCJjb3B5XCI6MHhhOSxcbiAgXCJjb3B5O1wiOjB4YTksIFwiY29weXNyO1wiOjB4MjExNyxcbiAgXCJjcmFycjtcIjoweDIxYjUsIFwiY3Jvc3M7XCI6MHgyNzE3LFxuICBcImNzY3I7XCI6WzB4ZDgzNSwweGRjYjhdLCBcImNzdWI7XCI6MHgyYWNmLFxuICBcImNzdWJlO1wiOjB4MmFkMSwgXCJjc3VwO1wiOjB4MmFkMCxcbiAgXCJjc3VwZTtcIjoweDJhZDIsIFwiY3Rkb3Q7XCI6MHgyMmVmLFxuICBcImN1ZGFycmw7XCI6MHgyOTM4LCBcImN1ZGFycnI7XCI6MHgyOTM1LFxuICBcImN1ZXByO1wiOjB4MjJkZSwgXCJjdWVzYztcIjoweDIyZGYsXG4gIFwiY3VsYXJyO1wiOjB4MjFiNiwgXCJjdWxhcnJwO1wiOjB4MjkzZCxcbiAgXCJjdXA7XCI6MHgyMjJhLCBcImN1cGJyY2FwO1wiOjB4MmE0OCxcbiAgXCJjdXBjYXA7XCI6MHgyYTQ2LCBcImN1cGN1cDtcIjoweDJhNGEsXG4gIFwiY3VwZG90O1wiOjB4MjI4ZCwgXCJjdXBvcjtcIjoweDJhNDUsXG4gIFwiY3VwcztcIjpbMHgyMjJhLDB4ZmUwMF0sIFwiY3VyYXJyO1wiOjB4MjFiNyxcbiAgXCJjdXJhcnJtO1wiOjB4MjkzYywgXCJjdXJseWVxcHJlYztcIjoweDIyZGUsXG4gIFwiY3VybHllcXN1Y2M7XCI6MHgyMmRmLCBcImN1cmx5dmVlO1wiOjB4MjJjZSxcbiAgXCJjdXJseXdlZGdlO1wiOjB4MjJjZiwgXCJjdXJyZW5cIjoweGE0LFxuICBcImN1cnJlbjtcIjoweGE0LCBcImN1cnZlYXJyb3dsZWZ0O1wiOjB4MjFiNixcbiAgXCJjdXJ2ZWFycm93cmlnaHQ7XCI6MHgyMWI3LCBcImN1dmVlO1wiOjB4MjJjZSxcbiAgXCJjdXdlZDtcIjoweDIyY2YsIFwiY3djb25pbnQ7XCI6MHgyMjMyLFxuICBcImN3aW50O1wiOjB4MjIzMSwgXCJjeWxjdHk7XCI6MHgyMzJkLFxuICBcImRBcnI7XCI6MHgyMWQzLCBcImRIYXI7XCI6MHgyOTY1LFxuICBcImRhZ2dlcjtcIjoweDIwMjAsIFwiZGFsZXRoO1wiOjB4MjEzOCxcbiAgXCJkYXJyO1wiOjB4MjE5MywgXCJkYXNoO1wiOjB4MjAxMCxcbiAgXCJkYXNodjtcIjoweDIyYTMsIFwiZGJrYXJvdztcIjoweDI5MGYsXG4gIFwiZGJsYWM7XCI6MHgyZGQsIFwiZGNhcm9uO1wiOjB4MTBmLFxuICBcImRjeTtcIjoweDQzNCwgXCJkZDtcIjoweDIxNDYsXG4gIFwiZGRhZ2dlcjtcIjoweDIwMjEsIFwiZGRhcnI7XCI6MHgyMWNhLFxuICBcImRkb3RzZXE7XCI6MHgyYTc3LCBcImRlZ1wiOjB4YjAsXG4gIFwiZGVnO1wiOjB4YjAsIFwiZGVsdGE7XCI6MHgzYjQsXG4gIFwiZGVtcHR5djtcIjoweDI5YjEsIFwiZGZpc2h0O1wiOjB4Mjk3ZixcbiAgXCJkZnI7XCI6WzB4ZDgzNSwweGRkMjFdLCBcImRoYXJsO1wiOjB4MjFjMyxcbiAgXCJkaGFycjtcIjoweDIxYzIsIFwiZGlhbTtcIjoweDIyYzQsXG4gIFwiZGlhbW9uZDtcIjoweDIyYzQsIFwiZGlhbW9uZHN1aXQ7XCI6MHgyNjY2LFxuICBcImRpYW1zO1wiOjB4MjY2NiwgXCJkaWU7XCI6MHhhOCxcbiAgXCJkaWdhbW1hO1wiOjB4M2RkLCBcImRpc2luO1wiOjB4MjJmMixcbiAgXCJkaXY7XCI6MHhmNywgXCJkaXZpZGVcIjoweGY3LFxuICBcImRpdmlkZTtcIjoweGY3LCBcImRpdmlkZW9udGltZXM7XCI6MHgyMmM3LFxuICBcImRpdm9ueDtcIjoweDIyYzcsIFwiZGpjeTtcIjoweDQ1MixcbiAgXCJkbGNvcm47XCI6MHgyMzFlLCBcImRsY3JvcDtcIjoweDIzMGQsXG4gIFwiZG9sbGFyO1wiOjB4MjQsIFwiZG9wZjtcIjpbMHhkODM1LDB4ZGQ1NV0sXG4gIFwiZG90O1wiOjB4MmQ5LCBcImRvdGVxO1wiOjB4MjI1MCxcbiAgXCJkb3RlcWRvdDtcIjoweDIyNTEsIFwiZG90bWludXM7XCI6MHgyMjM4LFxuICBcImRvdHBsdXM7XCI6MHgyMjE0LCBcImRvdHNxdWFyZTtcIjoweDIyYTEsXG4gIFwiZG91YmxlYmFyd2VkZ2U7XCI6MHgyMzA2LCBcImRvd25hcnJvdztcIjoweDIxOTMsXG4gIFwiZG93bmRvd25hcnJvd3M7XCI6MHgyMWNhLCBcImRvd25oYXJwb29ubGVmdDtcIjoweDIxYzMsXG4gIFwiZG93bmhhcnBvb25yaWdodDtcIjoweDIxYzIsIFwiZHJia2Fyb3c7XCI6MHgyOTEwLFxuICBcImRyY29ybjtcIjoweDIzMWYsIFwiZHJjcm9wO1wiOjB4MjMwYyxcbiAgXCJkc2NyO1wiOlsweGQ4MzUsMHhkY2I5XSwgXCJkc2N5O1wiOjB4NDU1LFxuICBcImRzb2w7XCI6MHgyOWY2LCBcImRzdHJvaztcIjoweDExMSxcbiAgXCJkdGRvdDtcIjoweDIyZjEsIFwiZHRyaTtcIjoweDI1YmYsXG4gIFwiZHRyaWY7XCI6MHgyNWJlLCBcImR1YXJyO1wiOjB4MjFmNSxcbiAgXCJkdWhhcjtcIjoweDI5NmYsIFwiZHdhbmdsZTtcIjoweDI5YTYsXG4gIFwiZHpjeTtcIjoweDQ1ZiwgXCJkemlncmFycjtcIjoweDI3ZmYsXG4gIFwiZUREb3Q7XCI6MHgyYTc3LCBcImVEb3Q7XCI6MHgyMjUxLFxuICBcImVhY3V0ZVwiOjB4ZTksIFwiZWFjdXRlO1wiOjB4ZTksXG4gIFwiZWFzdGVyO1wiOjB4MmE2ZSwgXCJlY2Fyb247XCI6MHgxMWIsXG4gIFwiZWNpcjtcIjoweDIyNTYsIFwiZWNpcmNcIjoweGVhLFxuICBcImVjaXJjO1wiOjB4ZWEsIFwiZWNvbG9uO1wiOjB4MjI1NSxcbiAgXCJlY3k7XCI6MHg0NGQsIFwiZWRvdDtcIjoweDExNyxcbiAgXCJlZTtcIjoweDIxNDcsIFwiZWZEb3Q7XCI6MHgyMjUyLFxuICBcImVmcjtcIjpbMHhkODM1LDB4ZGQyMl0sIFwiZWc7XCI6MHgyYTlhLFxuICBcImVncmF2ZVwiOjB4ZTgsIFwiZWdyYXZlO1wiOjB4ZTgsXG4gIFwiZWdzO1wiOjB4MmE5NiwgXCJlZ3Nkb3Q7XCI6MHgyYTk4LFxuICBcImVsO1wiOjB4MmE5OSwgXCJlbGludGVycztcIjoweDIzZTcsXG4gIFwiZWxsO1wiOjB4MjExMywgXCJlbHM7XCI6MHgyYTk1LFxuICBcImVsc2RvdDtcIjoweDJhOTcsIFwiZW1hY3I7XCI6MHgxMTMsXG4gIFwiZW1wdHk7XCI6MHgyMjA1LCBcImVtcHR5c2V0O1wiOjB4MjIwNSxcbiAgXCJlbXB0eXY7XCI6MHgyMjA1LCBcImVtc3AxMztcIjoweDIwMDQsXG4gIFwiZW1zcDE0O1wiOjB4MjAwNSwgXCJlbXNwO1wiOjB4MjAwMyxcbiAgXCJlbmc7XCI6MHgxNGIsIFwiZW5zcDtcIjoweDIwMDIsXG4gIFwiZW9nb247XCI6MHgxMTksIFwiZW9wZjtcIjpbMHhkODM1LDB4ZGQ1Nl0sXG4gIFwiZXBhcjtcIjoweDIyZDUsIFwiZXBhcnNsO1wiOjB4MjllMyxcbiAgXCJlcGx1cztcIjoweDJhNzEsIFwiZXBzaTtcIjoweDNiNSxcbiAgXCJlcHNpbG9uO1wiOjB4M2I1LCBcImVwc2l2O1wiOjB4M2Y1LFxuICBcImVxY2lyYztcIjoweDIyNTYsIFwiZXFjb2xvbjtcIjoweDIyNTUsXG4gIFwiZXFzaW07XCI6MHgyMjQyLCBcImVxc2xhbnRndHI7XCI6MHgyYTk2LFxuICBcImVxc2xhbnRsZXNzO1wiOjB4MmE5NSwgXCJlcXVhbHM7XCI6MHgzZCxcbiAgXCJlcXVlc3Q7XCI6MHgyMjVmLCBcImVxdWl2O1wiOjB4MjI2MSxcbiAgXCJlcXVpdkREO1wiOjB4MmE3OCwgXCJlcXZwYXJzbDtcIjoweDI5ZTUsXG4gIFwiZXJEb3Q7XCI6MHgyMjUzLCBcImVyYXJyO1wiOjB4Mjk3MSxcbiAgXCJlc2NyO1wiOjB4MjEyZiwgXCJlc2RvdDtcIjoweDIyNTAsXG4gIFwiZXNpbTtcIjoweDIyNDIsIFwiZXRhO1wiOjB4M2I3LFxuICBcImV0aFwiOjB4ZjAsIFwiZXRoO1wiOjB4ZjAsXG4gIFwiZXVtbFwiOjB4ZWIsIFwiZXVtbDtcIjoweGViLFxuICBcImV1cm87XCI6MHgyMGFjLCBcImV4Y2w7XCI6MHgyMSxcbiAgXCJleGlzdDtcIjoweDIyMDMsIFwiZXhwZWN0YXRpb247XCI6MHgyMTMwLFxuICBcImV4cG9uZW50aWFsZTtcIjoweDIxNDcsIFwiZmFsbGluZ2RvdHNlcTtcIjoweDIyNTIsXG4gIFwiZmN5O1wiOjB4NDQ0LCBcImZlbWFsZTtcIjoweDI2NDAsXG4gIFwiZmZpbGlnO1wiOjB4ZmIwMywgXCJmZmxpZztcIjoweGZiMDAsXG4gIFwiZmZsbGlnO1wiOjB4ZmIwNCwgXCJmZnI7XCI6WzB4ZDgzNSwweGRkMjNdLFxuICBcImZpbGlnO1wiOjB4ZmIwMSwgXCJmamxpZztcIjpbMHg2NiwweDZhXSxcbiAgXCJmbGF0O1wiOjB4MjY2ZCwgXCJmbGxpZztcIjoweGZiMDIsXG4gIFwiZmx0bnM7XCI6MHgyNWIxLCBcImZub2Y7XCI6MHgxOTIsXG4gIFwiZm9wZjtcIjpbMHhkODM1LDB4ZGQ1N10sIFwiZm9yYWxsO1wiOjB4MjIwMCxcbiAgXCJmb3JrO1wiOjB4MjJkNCwgXCJmb3JrdjtcIjoweDJhZDksXG4gIFwiZnBhcnRpbnQ7XCI6MHgyYTBkLCBcImZyYWMxMlwiOjB4YmQsXG4gIFwiZnJhYzEyO1wiOjB4YmQsIFwiZnJhYzEzO1wiOjB4MjE1MyxcbiAgXCJmcmFjMTRcIjoweGJjLCBcImZyYWMxNDtcIjoweGJjLFxuICBcImZyYWMxNTtcIjoweDIxNTUsIFwiZnJhYzE2O1wiOjB4MjE1OSxcbiAgXCJmcmFjMTg7XCI6MHgyMTViLCBcImZyYWMyMztcIjoweDIxNTQsXG4gIFwiZnJhYzI1O1wiOjB4MjE1NiwgXCJmcmFjMzRcIjoweGJlLFxuICBcImZyYWMzNDtcIjoweGJlLCBcImZyYWMzNTtcIjoweDIxNTcsXG4gIFwiZnJhYzM4O1wiOjB4MjE1YywgXCJmcmFjNDU7XCI6MHgyMTU4LFxuICBcImZyYWM1NjtcIjoweDIxNWEsIFwiZnJhYzU4O1wiOjB4MjE1ZCxcbiAgXCJmcmFjNzg7XCI6MHgyMTVlLCBcImZyYXNsO1wiOjB4MjA0NCxcbiAgXCJmcm93bjtcIjoweDIzMjIsIFwiZnNjcjtcIjpbMHhkODM1LDB4ZGNiYl0sXG4gIFwiZ0U7XCI6MHgyMjY3LCBcImdFbDtcIjoweDJhOGMsXG4gIFwiZ2FjdXRlO1wiOjB4MWY1LCBcImdhbW1hO1wiOjB4M2IzLFxuICBcImdhbW1hZDtcIjoweDNkZCwgXCJnYXA7XCI6MHgyYTg2LFxuICBcImdicmV2ZTtcIjoweDExZiwgXCJnY2lyYztcIjoweDExZCxcbiAgXCJnY3k7XCI6MHg0MzMsIFwiZ2RvdDtcIjoweDEyMSxcbiAgXCJnZTtcIjoweDIyNjUsIFwiZ2VsO1wiOjB4MjJkYixcbiAgXCJnZXE7XCI6MHgyMjY1LCBcImdlcXE7XCI6MHgyMjY3LFxuICBcImdlcXNsYW50O1wiOjB4MmE3ZSwgXCJnZXM7XCI6MHgyYTdlLFxuICBcImdlc2NjO1wiOjB4MmFhOSwgXCJnZXNkb3Q7XCI6MHgyYTgwLFxuICBcImdlc2RvdG87XCI6MHgyYTgyLCBcImdlc2RvdG9sO1wiOjB4MmE4NCxcbiAgXCJnZXNsO1wiOlsweDIyZGIsMHhmZTAwXSwgXCJnZXNsZXM7XCI6MHgyYTk0LFxuICBcImdmcjtcIjpbMHhkODM1LDB4ZGQyNF0sIFwiZ2c7XCI6MHgyMjZiLFxuICBcImdnZztcIjoweDIyZDksIFwiZ2ltZWw7XCI6MHgyMTM3LFxuICBcImdqY3k7XCI6MHg0NTMsIFwiZ2w7XCI6MHgyMjc3LFxuICBcImdsRTtcIjoweDJhOTIsIFwiZ2xhO1wiOjB4MmFhNSxcbiAgXCJnbGo7XCI6MHgyYWE0LCBcImduRTtcIjoweDIyNjksXG4gIFwiZ25hcDtcIjoweDJhOGEsIFwiZ25hcHByb3g7XCI6MHgyYThhLFxuICBcImduZTtcIjoweDJhODgsIFwiZ25lcTtcIjoweDJhODgsXG4gIFwiZ25lcXE7XCI6MHgyMjY5LCBcImduc2ltO1wiOjB4MjJlNyxcbiAgXCJnb3BmO1wiOlsweGQ4MzUsMHhkZDU4XSwgXCJncmF2ZTtcIjoweDYwLFxuICBcImdzY3I7XCI6MHgyMTBhLCBcImdzaW07XCI6MHgyMjczLFxuICBcImdzaW1lO1wiOjB4MmE4ZSwgXCJnc2ltbDtcIjoweDJhOTAsXG4gIFwiZ3RcIjoweDNlLCBcImd0O1wiOjB4M2UsXG4gIFwiZ3RjYztcIjoweDJhYTcsIFwiZ3RjaXI7XCI6MHgyYTdhLFxuICBcImd0ZG90O1wiOjB4MjJkNywgXCJndGxQYXI7XCI6MHgyOTk1LFxuICBcImd0cXVlc3Q7XCI6MHgyYTdjLCBcImd0cmFwcHJveDtcIjoweDJhODYsXG4gIFwiZ3RyYXJyO1wiOjB4Mjk3OCwgXCJndHJkb3Q7XCI6MHgyMmQ3LFxuICBcImd0cmVxbGVzcztcIjoweDIyZGIsIFwiZ3RyZXFxbGVzcztcIjoweDJhOGMsXG4gIFwiZ3RybGVzcztcIjoweDIyNzcsIFwiZ3Ryc2ltO1wiOjB4MjI3MyxcbiAgXCJndmVydG5lcXE7XCI6WzB4MjI2OSwweGZlMDBdLCBcImd2bkU7XCI6WzB4MjI2OSwweGZlMDBdLFxuICBcImhBcnI7XCI6MHgyMWQ0LCBcImhhaXJzcDtcIjoweDIwMGEsXG4gIFwiaGFsZjtcIjoweGJkLCBcImhhbWlsdDtcIjoweDIxMGIsXG4gIFwiaGFyZGN5O1wiOjB4NDRhLCBcImhhcnI7XCI6MHgyMTk0LFxuICBcImhhcnJjaXI7XCI6MHgyOTQ4LCBcImhhcnJ3O1wiOjB4MjFhZCxcbiAgXCJoYmFyO1wiOjB4MjEwZiwgXCJoY2lyYztcIjoweDEyNSxcbiAgXCJoZWFydHM7XCI6MHgyNjY1LCBcImhlYXJ0c3VpdDtcIjoweDI2NjUsXG4gIFwiaGVsbGlwO1wiOjB4MjAyNiwgXCJoZXJjb247XCI6MHgyMmI5LFxuICBcImhmcjtcIjpbMHhkODM1LDB4ZGQyNV0sIFwiaGtzZWFyb3c7XCI6MHgyOTI1LFxuICBcImhrc3dhcm93O1wiOjB4MjkyNiwgXCJob2FycjtcIjoweDIxZmYsXG4gIFwiaG9tdGh0O1wiOjB4MjIzYiwgXCJob29rbGVmdGFycm93O1wiOjB4MjFhOSxcbiAgXCJob29rcmlnaHRhcnJvdztcIjoweDIxYWEsIFwiaG9wZjtcIjpbMHhkODM1LDB4ZGQ1OV0sXG4gIFwiaG9yYmFyO1wiOjB4MjAxNSwgXCJoc2NyO1wiOlsweGQ4MzUsMHhkY2JkXSxcbiAgXCJoc2xhc2g7XCI6MHgyMTBmLCBcImhzdHJvaztcIjoweDEyNyxcbiAgXCJoeWJ1bGw7XCI6MHgyMDQzLCBcImh5cGhlbjtcIjoweDIwMTAsXG4gIFwiaWFjdXRlXCI6MHhlZCwgXCJpYWN1dGU7XCI6MHhlZCxcbiAgXCJpYztcIjoweDIwNjMsIFwiaWNpcmNcIjoweGVlLFxuICBcImljaXJjO1wiOjB4ZWUsIFwiaWN5O1wiOjB4NDM4LFxuICBcImllY3k7XCI6MHg0MzUsIFwiaWV4Y2xcIjoweGExLFxuICBcImlleGNsO1wiOjB4YTEsIFwiaWZmO1wiOjB4MjFkNCxcbiAgXCJpZnI7XCI6WzB4ZDgzNSwweGRkMjZdLCBcImlncmF2ZVwiOjB4ZWMsXG4gIFwiaWdyYXZlO1wiOjB4ZWMsIFwiaWk7XCI6MHgyMTQ4LFxuICBcImlpaWludDtcIjoweDJhMGMsIFwiaWlpbnQ7XCI6MHgyMjJkLFxuICBcImlpbmZpbjtcIjoweDI5ZGMsIFwiaWlvdGE7XCI6MHgyMTI5LFxuICBcImlqbGlnO1wiOjB4MTMzLCBcImltYWNyO1wiOjB4MTJiLFxuICBcImltYWdlO1wiOjB4MjExMSwgXCJpbWFnbGluZTtcIjoweDIxMTAsXG4gIFwiaW1hZ3BhcnQ7XCI6MHgyMTExLCBcImltYXRoO1wiOjB4MTMxLFxuICBcImltb2Y7XCI6MHgyMmI3LCBcImltcGVkO1wiOjB4MWI1LFxuICBcImluO1wiOjB4MjIwOCwgXCJpbmNhcmU7XCI6MHgyMTA1LFxuICBcImluZmluO1wiOjB4MjIxZSwgXCJpbmZpbnRpZTtcIjoweDI5ZGQsXG4gIFwiaW5vZG90O1wiOjB4MTMxLCBcImludDtcIjoweDIyMmIsXG4gIFwiaW50Y2FsO1wiOjB4MjJiYSwgXCJpbnRlZ2VycztcIjoweDIxMjQsXG4gIFwiaW50ZXJjYWw7XCI6MHgyMmJhLCBcImludGxhcmhrO1wiOjB4MmExNyxcbiAgXCJpbnRwcm9kO1wiOjB4MmEzYywgXCJpb2N5O1wiOjB4NDUxLFxuICBcImlvZ29uO1wiOjB4MTJmLCBcImlvcGY7XCI6WzB4ZDgzNSwweGRkNWFdLFxuICBcImlvdGE7XCI6MHgzYjksIFwiaXByb2Q7XCI6MHgyYTNjLFxuICBcImlxdWVzdFwiOjB4YmYsIFwiaXF1ZXN0O1wiOjB4YmYsXG4gIFwiaXNjcjtcIjpbMHhkODM1LDB4ZGNiZV0sIFwiaXNpbjtcIjoweDIyMDgsXG4gIFwiaXNpbkU7XCI6MHgyMmY5LCBcImlzaW5kb3Q7XCI6MHgyMmY1LFxuICBcImlzaW5zO1wiOjB4MjJmNCwgXCJpc2luc3Y7XCI6MHgyMmYzLFxuICBcImlzaW52O1wiOjB4MjIwOCwgXCJpdDtcIjoweDIwNjIsXG4gIFwiaXRpbGRlO1wiOjB4MTI5LCBcIml1a2N5O1wiOjB4NDU2LFxuICBcIml1bWxcIjoweGVmLCBcIml1bWw7XCI6MHhlZixcbiAgXCJqY2lyYztcIjoweDEzNSwgXCJqY3k7XCI6MHg0MzksXG4gIFwiamZyO1wiOlsweGQ4MzUsMHhkZDI3XSwgXCJqbWF0aDtcIjoweDIzNyxcbiAgXCJqb3BmO1wiOlsweGQ4MzUsMHhkZDViXSwgXCJqc2NyO1wiOlsweGQ4MzUsMHhkY2JmXSxcbiAgXCJqc2VyY3k7XCI6MHg0NTgsIFwianVrY3k7XCI6MHg0NTQsXG4gIFwia2FwcGE7XCI6MHgzYmEsIFwia2FwcGF2O1wiOjB4M2YwLFxuICBcImtjZWRpbDtcIjoweDEzNywgXCJrY3k7XCI6MHg0M2EsXG4gIFwia2ZyO1wiOlsweGQ4MzUsMHhkZDI4XSwgXCJrZ3JlZW47XCI6MHgxMzgsXG4gIFwia2hjeTtcIjoweDQ0NSwgXCJramN5O1wiOjB4NDVjLFxuICBcImtvcGY7XCI6WzB4ZDgzNSwweGRkNWNdLCBcImtzY3I7XCI6WzB4ZDgzNSwweGRjYzBdLFxuICBcImxBYXJyO1wiOjB4MjFkYSwgXCJsQXJyO1wiOjB4MjFkMCxcbiAgXCJsQXRhaWw7XCI6MHgyOTFiLCBcImxCYXJyO1wiOjB4MjkwZSxcbiAgXCJsRTtcIjoweDIyNjYsIFwibEVnO1wiOjB4MmE4YixcbiAgXCJsSGFyO1wiOjB4Mjk2MiwgXCJsYWN1dGU7XCI6MHgxM2EsXG4gIFwibGFlbXB0eXY7XCI6MHgyOWI0LCBcImxhZ3JhbjtcIjoweDIxMTIsXG4gIFwibGFtYmRhO1wiOjB4M2JiLCBcImxhbmc7XCI6MHgyN2U4LFxuICBcImxhbmdkO1wiOjB4Mjk5MSwgXCJsYW5nbGU7XCI6MHgyN2U4LFxuICBcImxhcDtcIjoweDJhODUsIFwibGFxdW9cIjoweGFiLFxuICBcImxhcXVvO1wiOjB4YWIsIFwibGFycjtcIjoweDIxOTAsXG4gIFwibGFycmI7XCI6MHgyMWU0LCBcImxhcnJiZnM7XCI6MHgyOTFmLFxuICBcImxhcnJmcztcIjoweDI5MWQsIFwibGFycmhrO1wiOjB4MjFhOSxcbiAgXCJsYXJybHA7XCI6MHgyMWFiLCBcImxhcnJwbDtcIjoweDI5MzksXG4gIFwibGFycnNpbTtcIjoweDI5NzMsIFwibGFycnRsO1wiOjB4MjFhMixcbiAgXCJsYXQ7XCI6MHgyYWFiLCBcImxhdGFpbDtcIjoweDI5MTksXG4gIFwibGF0ZTtcIjoweDJhYWQsIFwibGF0ZXM7XCI6WzB4MmFhZCwweGZlMDBdLFxuICBcImxiYXJyO1wiOjB4MjkwYywgXCJsYmJyaztcIjoweDI3NzIsXG4gIFwibGJyYWNlO1wiOjB4N2IsIFwibGJyYWNrO1wiOjB4NWIsXG4gIFwibGJya2U7XCI6MHgyOThiLCBcImxicmtzbGQ7XCI6MHgyOThmLFxuICBcImxicmtzbHU7XCI6MHgyOThkLCBcImxjYXJvbjtcIjoweDEzZSxcbiAgXCJsY2VkaWw7XCI6MHgxM2MsIFwibGNlaWw7XCI6MHgyMzA4LFxuICBcImxjdWI7XCI6MHg3YiwgXCJsY3k7XCI6MHg0M2IsXG4gIFwibGRjYTtcIjoweDI5MzYsIFwibGRxdW87XCI6MHgyMDFjLFxuICBcImxkcXVvcjtcIjoweDIwMWUsIFwibGRyZGhhcjtcIjoweDI5NjcsXG4gIFwibGRydXNoYXI7XCI6MHgyOTRiLCBcImxkc2g7XCI6MHgyMWIyLFxuICBcImxlO1wiOjB4MjI2NCwgXCJsZWZ0YXJyb3c7XCI6MHgyMTkwLFxuICBcImxlZnRhcnJvd3RhaWw7XCI6MHgyMWEyLCBcImxlZnRoYXJwb29uZG93bjtcIjoweDIxYmQsXG4gIFwibGVmdGhhcnBvb251cDtcIjoweDIxYmMsIFwibGVmdGxlZnRhcnJvd3M7XCI6MHgyMWM3LFxuICBcImxlZnRyaWdodGFycm93O1wiOjB4MjE5NCwgXCJsZWZ0cmlnaHRhcnJvd3M7XCI6MHgyMWM2LFxuICBcImxlZnRyaWdodGhhcnBvb25zO1wiOjB4MjFjYiwgXCJsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiOjB4MjFhZCxcbiAgXCJsZWZ0dGhyZWV0aW1lcztcIjoweDIyY2IsIFwibGVnO1wiOjB4MjJkYSxcbiAgXCJsZXE7XCI6MHgyMjY0LCBcImxlcXE7XCI6MHgyMjY2LFxuICBcImxlcXNsYW50O1wiOjB4MmE3ZCwgXCJsZXM7XCI6MHgyYTdkLFxuICBcImxlc2NjO1wiOjB4MmFhOCwgXCJsZXNkb3Q7XCI6MHgyYTdmLFxuICBcImxlc2RvdG87XCI6MHgyYTgxLCBcImxlc2RvdG9yO1wiOjB4MmE4MyxcbiAgXCJsZXNnO1wiOlsweDIyZGEsMHhmZTAwXSwgXCJsZXNnZXM7XCI6MHgyYTkzLFxuICBcImxlc3NhcHByb3g7XCI6MHgyYTg1LCBcImxlc3Nkb3Q7XCI6MHgyMmQ2LFxuICBcImxlc3NlcWd0cjtcIjoweDIyZGEsIFwibGVzc2VxcWd0cjtcIjoweDJhOGIsXG4gIFwibGVzc2d0cjtcIjoweDIyNzYsIFwibGVzc3NpbTtcIjoweDIyNzIsXG4gIFwibGZpc2h0O1wiOjB4Mjk3YywgXCJsZmxvb3I7XCI6MHgyMzBhLFxuICBcImxmcjtcIjpbMHhkODM1LDB4ZGQyOV0sIFwibGc7XCI6MHgyMjc2LFxuICBcImxnRTtcIjoweDJhOTEsIFwibGhhcmQ7XCI6MHgyMWJkLFxuICBcImxoYXJ1O1wiOjB4MjFiYywgXCJsaGFydWw7XCI6MHgyOTZhLFxuICBcImxoYmxrO1wiOjB4MjU4NCwgXCJsamN5O1wiOjB4NDU5LFxuICBcImxsO1wiOjB4MjI2YSwgXCJsbGFycjtcIjoweDIxYzcsXG4gIFwibGxjb3JuZXI7XCI6MHgyMzFlLCBcImxsaGFyZDtcIjoweDI5NmIsXG4gIFwibGx0cmk7XCI6MHgyNWZhLCBcImxtaWRvdDtcIjoweDE0MCxcbiAgXCJsbW91c3Q7XCI6MHgyM2IwLCBcImxtb3VzdGFjaGU7XCI6MHgyM2IwLFxuICBcImxuRTtcIjoweDIyNjgsIFwibG5hcDtcIjoweDJhODksXG4gIFwibG5hcHByb3g7XCI6MHgyYTg5LCBcImxuZTtcIjoweDJhODcsXG4gIFwibG5lcTtcIjoweDJhODcsIFwibG5lcXE7XCI6MHgyMjY4LFxuICBcImxuc2ltO1wiOjB4MjJlNiwgXCJsb2FuZztcIjoweDI3ZWMsXG4gIFwibG9hcnI7XCI6MHgyMWZkLCBcImxvYnJrO1wiOjB4MjdlNixcbiAgXCJsb25nbGVmdGFycm93O1wiOjB4MjdmNSwgXCJsb25nbGVmdHJpZ2h0YXJyb3c7XCI6MHgyN2Y3LFxuICBcImxvbmdtYXBzdG87XCI6MHgyN2ZjLCBcImxvbmdyaWdodGFycm93O1wiOjB4MjdmNixcbiAgXCJsb29wYXJyb3dsZWZ0O1wiOjB4MjFhYiwgXCJsb29wYXJyb3dyaWdodDtcIjoweDIxYWMsXG4gIFwibG9wYXI7XCI6MHgyOTg1LCBcImxvcGY7XCI6WzB4ZDgzNSwweGRkNWRdLFxuICBcImxvcGx1cztcIjoweDJhMmQsIFwibG90aW1lcztcIjoweDJhMzQsXG4gIFwibG93YXN0O1wiOjB4MjIxNywgXCJsb3diYXI7XCI6MHg1ZixcbiAgXCJsb3o7XCI6MHgyNWNhLCBcImxvemVuZ2U7XCI6MHgyNWNhLFxuICBcImxvemY7XCI6MHgyOWViLCBcImxwYXI7XCI6MHgyOCxcbiAgXCJscGFybHQ7XCI6MHgyOTkzLCBcImxyYXJyO1wiOjB4MjFjNixcbiAgXCJscmNvcm5lcjtcIjoweDIzMWYsIFwibHJoYXI7XCI6MHgyMWNiLFxuICBcImxyaGFyZDtcIjoweDI5NmQsIFwibHJtO1wiOjB4MjAwZSxcbiAgXCJscnRyaTtcIjoweDIyYmYsIFwibHNhcXVvO1wiOjB4MjAzOSxcbiAgXCJsc2NyO1wiOlsweGQ4MzUsMHhkY2MxXSwgXCJsc2g7XCI6MHgyMWIwLFxuICBcImxzaW07XCI6MHgyMjcyLCBcImxzaW1lO1wiOjB4MmE4ZCxcbiAgXCJsc2ltZztcIjoweDJhOGYsIFwibHNxYjtcIjoweDViLFxuICBcImxzcXVvO1wiOjB4MjAxOCwgXCJsc3F1b3I7XCI6MHgyMDFhLFxuICBcImxzdHJvaztcIjoweDE0MiwgXCJsdFwiOjB4M2MsXG4gIFwibHQ7XCI6MHgzYywgXCJsdGNjO1wiOjB4MmFhNixcbiAgXCJsdGNpcjtcIjoweDJhNzksIFwibHRkb3Q7XCI6MHgyMmQ2LFxuICBcImx0aHJlZTtcIjoweDIyY2IsIFwibHRpbWVzO1wiOjB4MjJjOSxcbiAgXCJsdGxhcnI7XCI6MHgyOTc2LCBcImx0cXVlc3Q7XCI6MHgyYTdiLFxuICBcImx0clBhcjtcIjoweDI5OTYsIFwibHRyaTtcIjoweDI1YzMsXG4gIFwibHRyaWU7XCI6MHgyMmI0LCBcImx0cmlmO1wiOjB4MjVjMixcbiAgXCJsdXJkc2hhcjtcIjoweDI5NGEsIFwibHVydWhhcjtcIjoweDI5NjYsXG4gIFwibHZlcnRuZXFxO1wiOlsweDIyNjgsMHhmZTAwXSwgXCJsdm5FO1wiOlsweDIyNjgsMHhmZTAwXSxcbiAgXCJtRERvdDtcIjoweDIyM2EsIFwibWFjclwiOjB4YWYsXG4gIFwibWFjcjtcIjoweGFmLCBcIm1hbGU7XCI6MHgyNjQyLFxuICBcIm1hbHQ7XCI6MHgyNzIwLCBcIm1hbHRlc2U7XCI6MHgyNzIwLFxuICBcIm1hcDtcIjoweDIxYTYsIFwibWFwc3RvO1wiOjB4MjFhNixcbiAgXCJtYXBzdG9kb3duO1wiOjB4MjFhNywgXCJtYXBzdG9sZWZ0O1wiOjB4MjFhNCxcbiAgXCJtYXBzdG91cDtcIjoweDIxYTUsIFwibWFya2VyO1wiOjB4MjVhZSxcbiAgXCJtY29tbWE7XCI6MHgyYTI5LCBcIm1jeTtcIjoweDQzYyxcbiAgXCJtZGFzaDtcIjoweDIwMTQsIFwibWVhc3VyZWRhbmdsZTtcIjoweDIyMjEsXG4gIFwibWZyO1wiOlsweGQ4MzUsMHhkZDJhXSwgXCJtaG87XCI6MHgyMTI3LFxuICBcIm1pY3JvXCI6MHhiNSwgXCJtaWNybztcIjoweGI1LFxuICBcIm1pZDtcIjoweDIyMjMsIFwibWlkYXN0O1wiOjB4MmEsXG4gIFwibWlkY2lyO1wiOjB4MmFmMCwgXCJtaWRkb3RcIjoweGI3LFxuICBcIm1pZGRvdDtcIjoweGI3LCBcIm1pbnVzO1wiOjB4MjIxMixcbiAgXCJtaW51c2I7XCI6MHgyMjlmLCBcIm1pbnVzZDtcIjoweDIyMzgsXG4gIFwibWludXNkdTtcIjoweDJhMmEsIFwibWxjcDtcIjoweDJhZGIsXG4gIFwibWxkcjtcIjoweDIwMjYsIFwibW5wbHVzO1wiOjB4MjIxMyxcbiAgXCJtb2RlbHM7XCI6MHgyMmE3LCBcIm1vcGY7XCI6WzB4ZDgzNSwweGRkNWVdLFxuICBcIm1wO1wiOjB4MjIxMywgXCJtc2NyO1wiOlsweGQ4MzUsMHhkY2MyXSxcbiAgXCJtc3Rwb3M7XCI6MHgyMjNlLCBcIm11O1wiOjB4M2JjLFxuICBcIm11bHRpbWFwO1wiOjB4MjJiOCwgXCJtdW1hcDtcIjoweDIyYjgsXG4gIFwibkdnO1wiOlsweDIyZDksMHgzMzhdLCBcIm5HdDtcIjpbMHgyMjZiLDB4MjBkMl0sXG4gIFwibkd0djtcIjpbMHgyMjZiLDB4MzM4XSwgXCJuTGVmdGFycm93O1wiOjB4MjFjZCxcbiAgXCJuTGVmdHJpZ2h0YXJyb3c7XCI6MHgyMWNlLCBcIm5MbDtcIjpbMHgyMmQ4LDB4MzM4XSxcbiAgXCJuTHQ7XCI6WzB4MjI2YSwweDIwZDJdLCBcIm5MdHY7XCI6WzB4MjI2YSwweDMzOF0sXG4gIFwiblJpZ2h0YXJyb3c7XCI6MHgyMWNmLCBcIm5WRGFzaDtcIjoweDIyYWYsXG4gIFwiblZkYXNoO1wiOjB4MjJhZSwgXCJuYWJsYTtcIjoweDIyMDcsXG4gIFwibmFjdXRlO1wiOjB4MTQ0LCBcIm5hbmc7XCI6WzB4MjIyMCwweDIwZDJdLFxuICBcIm5hcDtcIjoweDIyNDksIFwibmFwRTtcIjpbMHgyYTcwLDB4MzM4XSxcbiAgXCJuYXBpZDtcIjpbMHgyMjRiLDB4MzM4XSwgXCJuYXBvcztcIjoweDE0OSxcbiAgXCJuYXBwcm94O1wiOjB4MjI0OSwgXCJuYXR1cjtcIjoweDI2NmUsXG4gIFwibmF0dXJhbDtcIjoweDI2NmUsIFwibmF0dXJhbHM7XCI6MHgyMTE1LFxuICBcIm5ic3BcIjoweGEwLCBcIm5ic3A7XCI6MHhhMCxcbiAgXCJuYnVtcDtcIjpbMHgyMjRlLDB4MzM4XSwgXCJuYnVtcGU7XCI6WzB4MjI0ZiwweDMzOF0sXG4gIFwibmNhcDtcIjoweDJhNDMsIFwibmNhcm9uO1wiOjB4MTQ4LFxuICBcIm5jZWRpbDtcIjoweDE0NiwgXCJuY29uZztcIjoweDIyNDcsXG4gIFwibmNvbmdkb3Q7XCI6WzB4MmE2ZCwweDMzOF0sIFwibmN1cDtcIjoweDJhNDIsXG4gIFwibmN5O1wiOjB4NDNkLCBcIm5kYXNoO1wiOjB4MjAxMyxcbiAgXCJuZTtcIjoweDIyNjAsIFwibmVBcnI7XCI6MHgyMWQ3LFxuICBcIm5lYXJoaztcIjoweDI5MjQsIFwibmVhcnI7XCI6MHgyMTk3LFxuICBcIm5lYXJyb3c7XCI6MHgyMTk3LCBcIm5lZG90O1wiOlsweDIyNTAsMHgzMzhdLFxuICBcIm5lcXVpdjtcIjoweDIyNjIsIFwibmVzZWFyO1wiOjB4MjkyOCxcbiAgXCJuZXNpbTtcIjpbMHgyMjQyLDB4MzM4XSwgXCJuZXhpc3Q7XCI6MHgyMjA0LFxuICBcIm5leGlzdHM7XCI6MHgyMjA0LCBcIm5mcjtcIjpbMHhkODM1LDB4ZGQyYl0sXG4gIFwibmdFO1wiOlsweDIyNjcsMHgzMzhdLCBcIm5nZTtcIjoweDIyNzEsXG4gIFwibmdlcTtcIjoweDIyNzEsIFwibmdlcXE7XCI6WzB4MjI2NywweDMzOF0sXG4gIFwibmdlcXNsYW50O1wiOlsweDJhN2UsMHgzMzhdLCBcIm5nZXM7XCI6WzB4MmE3ZSwweDMzOF0sXG4gIFwibmdzaW07XCI6MHgyMjc1LCBcIm5ndDtcIjoweDIyNmYsXG4gIFwibmd0cjtcIjoweDIyNmYsIFwibmhBcnI7XCI6MHgyMWNlLFxuICBcIm5oYXJyO1wiOjB4MjFhZSwgXCJuaHBhcjtcIjoweDJhZjIsXG4gIFwibmk7XCI6MHgyMjBiLCBcIm5pcztcIjoweDIyZmMsXG4gIFwibmlzZDtcIjoweDIyZmEsIFwibml2O1wiOjB4MjIwYixcbiAgXCJuamN5O1wiOjB4NDVhLCBcIm5sQXJyO1wiOjB4MjFjZCxcbiAgXCJubEU7XCI6WzB4MjI2NiwweDMzOF0sIFwibmxhcnI7XCI6MHgyMTlhLFxuICBcIm5sZHI7XCI6MHgyMDI1LCBcIm5sZTtcIjoweDIyNzAsXG4gIFwibmxlZnRhcnJvdztcIjoweDIxOWEsIFwibmxlZnRyaWdodGFycm93O1wiOjB4MjFhZSxcbiAgXCJubGVxO1wiOjB4MjI3MCwgXCJubGVxcTtcIjpbMHgyMjY2LDB4MzM4XSxcbiAgXCJubGVxc2xhbnQ7XCI6WzB4MmE3ZCwweDMzOF0sIFwibmxlcztcIjpbMHgyYTdkLDB4MzM4XSxcbiAgXCJubGVzcztcIjoweDIyNmUsIFwibmxzaW07XCI6MHgyMjc0LFxuICBcIm5sdDtcIjoweDIyNmUsIFwibmx0cmk7XCI6MHgyMmVhLFxuICBcIm5sdHJpZTtcIjoweDIyZWMsIFwibm1pZDtcIjoweDIyMjQsXG4gIFwibm9wZjtcIjpbMHhkODM1LDB4ZGQ1Zl0sIFwibm90XCI6MHhhYyxcbiAgXCJub3Q7XCI6MHhhYywgXCJub3RpbjtcIjoweDIyMDksXG4gIFwibm90aW5FO1wiOlsweDIyZjksMHgzMzhdLCBcIm5vdGluZG90O1wiOlsweDIyZjUsMHgzMzhdLFxuICBcIm5vdGludmE7XCI6MHgyMjA5LCBcIm5vdGludmI7XCI6MHgyMmY3LFxuICBcIm5vdGludmM7XCI6MHgyMmY2LCBcIm5vdG5pO1wiOjB4MjIwYyxcbiAgXCJub3RuaXZhO1wiOjB4MjIwYywgXCJub3RuaXZiO1wiOjB4MjJmZSxcbiAgXCJub3RuaXZjO1wiOjB4MjJmZCwgXCJucGFyO1wiOjB4MjIyNixcbiAgXCJucGFyYWxsZWw7XCI6MHgyMjI2LCBcIm5wYXJzbDtcIjpbMHgyYWZkLDB4MjBlNV0sXG4gIFwibnBhcnQ7XCI6WzB4MjIwMiwweDMzOF0sIFwibnBvbGludDtcIjoweDJhMTQsXG4gIFwibnByO1wiOjB4MjI4MCwgXCJucHJjdWU7XCI6MHgyMmUwLFxuICBcIm5wcmU7XCI6WzB4MmFhZiwweDMzOF0sIFwibnByZWM7XCI6MHgyMjgwLFxuICBcIm5wcmVjZXE7XCI6WzB4MmFhZiwweDMzOF0sIFwibnJBcnI7XCI6MHgyMWNmLFxuICBcIm5yYXJyO1wiOjB4MjE5YiwgXCJucmFycmM7XCI6WzB4MjkzMywweDMzOF0sXG4gIFwibnJhcnJ3O1wiOlsweDIxOWQsMHgzMzhdLCBcIm5yaWdodGFycm93O1wiOjB4MjE5YixcbiAgXCJucnRyaTtcIjoweDIyZWIsIFwibnJ0cmllO1wiOjB4MjJlZCxcbiAgXCJuc2M7XCI6MHgyMjgxLCBcIm5zY2N1ZTtcIjoweDIyZTEsXG4gIFwibnNjZTtcIjpbMHgyYWIwLDB4MzM4XSwgXCJuc2NyO1wiOlsweGQ4MzUsMHhkY2MzXSxcbiAgXCJuc2hvcnRtaWQ7XCI6MHgyMjI0LCBcIm5zaG9ydHBhcmFsbGVsO1wiOjB4MjIyNixcbiAgXCJuc2ltO1wiOjB4MjI0MSwgXCJuc2ltZTtcIjoweDIyNDQsXG4gIFwibnNpbWVxO1wiOjB4MjI0NCwgXCJuc21pZDtcIjoweDIyMjQsXG4gIFwibnNwYXI7XCI6MHgyMjI2LCBcIm5zcXN1YmU7XCI6MHgyMmUyLFxuICBcIm5zcXN1cGU7XCI6MHgyMmUzLCBcIm5zdWI7XCI6MHgyMjg0LFxuICBcIm5zdWJFO1wiOlsweDJhYzUsMHgzMzhdLCBcIm5zdWJlO1wiOjB4MjI4OCxcbiAgXCJuc3Vic2V0O1wiOlsweDIyODIsMHgyMGQyXSwgXCJuc3Vic2V0ZXE7XCI6MHgyMjg4LFxuICBcIm5zdWJzZXRlcXE7XCI6WzB4MmFjNSwweDMzOF0sIFwibnN1Y2M7XCI6MHgyMjgxLFxuICBcIm5zdWNjZXE7XCI6WzB4MmFiMCwweDMzOF0sIFwibnN1cDtcIjoweDIyODUsXG4gIFwibnN1cEU7XCI6WzB4MmFjNiwweDMzOF0sIFwibnN1cGU7XCI6MHgyMjg5LFxuICBcIm5zdXBzZXQ7XCI6WzB4MjI4MywweDIwZDJdLCBcIm5zdXBzZXRlcTtcIjoweDIyODksXG4gIFwibnN1cHNldGVxcTtcIjpbMHgyYWM2LDB4MzM4XSwgXCJudGdsO1wiOjB4MjI3OSxcbiAgXCJudGlsZGVcIjoweGYxLCBcIm50aWxkZTtcIjoweGYxLFxuICBcIm50bGc7XCI6MHgyMjc4LCBcIm50cmlhbmdsZWxlZnQ7XCI6MHgyMmVhLFxuICBcIm50cmlhbmdsZWxlZnRlcTtcIjoweDIyZWMsIFwibnRyaWFuZ2xlcmlnaHQ7XCI6MHgyMmViLFxuICBcIm50cmlhbmdsZXJpZ2h0ZXE7XCI6MHgyMmVkLCBcIm51O1wiOjB4M2JkLFxuICBcIm51bTtcIjoweDIzLCBcIm51bWVybztcIjoweDIxMTYsXG4gIFwibnVtc3A7XCI6MHgyMDA3LCBcIm52RGFzaDtcIjoweDIyYWQsXG4gIFwibnZIYXJyO1wiOjB4MjkwNCwgXCJudmFwO1wiOlsweDIyNGQsMHgyMGQyXSxcbiAgXCJudmRhc2g7XCI6MHgyMmFjLCBcIm52Z2U7XCI6WzB4MjI2NSwweDIwZDJdLFxuICBcIm52Z3Q7XCI6WzB4M2UsMHgyMGQyXSwgXCJudmluZmluO1wiOjB4MjlkZSxcbiAgXCJudmxBcnI7XCI6MHgyOTAyLCBcIm52bGU7XCI6WzB4MjI2NCwweDIwZDJdLFxuICBcIm52bHQ7XCI6WzB4M2MsMHgyMGQyXSwgXCJudmx0cmllO1wiOlsweDIyYjQsMHgyMGQyXSxcbiAgXCJudnJBcnI7XCI6MHgyOTAzLCBcIm52cnRyaWU7XCI6WzB4MjJiNSwweDIwZDJdLFxuICBcIm52c2ltO1wiOlsweDIyM2MsMHgyMGQyXSwgXCJud0FycjtcIjoweDIxZDYsXG4gIFwibndhcmhrO1wiOjB4MjkyMywgXCJud2FycjtcIjoweDIxOTYsXG4gIFwibndhcnJvdztcIjoweDIxOTYsIFwibnduZWFyO1wiOjB4MjkyNyxcbiAgXCJvUztcIjoweDI0YzgsIFwib2FjdXRlXCI6MHhmMyxcbiAgXCJvYWN1dGU7XCI6MHhmMywgXCJvYXN0O1wiOjB4MjI5YixcbiAgXCJvY2lyO1wiOjB4MjI5YSwgXCJvY2lyY1wiOjB4ZjQsXG4gIFwib2NpcmM7XCI6MHhmNCwgXCJvY3k7XCI6MHg0M2UsXG4gIFwib2Rhc2g7XCI6MHgyMjlkLCBcIm9kYmxhYztcIjoweDE1MSxcbiAgXCJvZGl2O1wiOjB4MmEzOCwgXCJvZG90O1wiOjB4MjI5OSxcbiAgXCJvZHNvbGQ7XCI6MHgyOWJjLCBcIm9lbGlnO1wiOjB4MTUzLFxuICBcIm9mY2lyO1wiOjB4MjliZiwgXCJvZnI7XCI6WzB4ZDgzNSwweGRkMmNdLFxuICBcIm9nb247XCI6MHgyZGIsIFwib2dyYXZlXCI6MHhmMixcbiAgXCJvZ3JhdmU7XCI6MHhmMiwgXCJvZ3Q7XCI6MHgyOWMxLFxuICBcIm9oYmFyO1wiOjB4MjliNSwgXCJvaG07XCI6MHgzYTksXG4gIFwib2ludDtcIjoweDIyMmUsIFwib2xhcnI7XCI6MHgyMWJhLFxuICBcIm9sY2lyO1wiOjB4MjliZSwgXCJvbGNyb3NzO1wiOjB4MjliYixcbiAgXCJvbGluZTtcIjoweDIwM2UsIFwib2x0O1wiOjB4MjljMCxcbiAgXCJvbWFjcjtcIjoweDE0ZCwgXCJvbWVnYTtcIjoweDNjOSxcbiAgXCJvbWljcm9uO1wiOjB4M2JmLCBcIm9taWQ7XCI6MHgyOWI2LFxuICBcIm9taW51cztcIjoweDIyOTYsIFwib29wZjtcIjpbMHhkODM1LDB4ZGQ2MF0sXG4gIFwib3BhcjtcIjoweDI5YjcsIFwib3BlcnA7XCI6MHgyOWI5LFxuICBcIm9wbHVzO1wiOjB4MjI5NSwgXCJvcjtcIjoweDIyMjgsXG4gIFwib3JhcnI7XCI6MHgyMWJiLCBcIm9yZDtcIjoweDJhNWQsXG4gIFwib3JkZXI7XCI6MHgyMTM0LCBcIm9yZGVyb2Y7XCI6MHgyMTM0LFxuICBcIm9yZGZcIjoweGFhLCBcIm9yZGY7XCI6MHhhYSxcbiAgXCJvcmRtXCI6MHhiYSwgXCJvcmRtO1wiOjB4YmEsXG4gIFwib3JpZ29mO1wiOjB4MjJiNiwgXCJvcm9yO1wiOjB4MmE1NixcbiAgXCJvcnNsb3BlO1wiOjB4MmE1NywgXCJvcnY7XCI6MHgyYTViLFxuICBcIm9zY3I7XCI6MHgyMTM0LCBcIm9zbGFzaFwiOjB4ZjgsXG4gIFwib3NsYXNoO1wiOjB4ZjgsIFwib3NvbDtcIjoweDIyOTgsXG4gIFwib3RpbGRlXCI6MHhmNSwgXCJvdGlsZGU7XCI6MHhmNSxcbiAgXCJvdGltZXM7XCI6MHgyMjk3LCBcIm90aW1lc2FzO1wiOjB4MmEzNixcbiAgXCJvdW1sXCI6MHhmNiwgXCJvdW1sO1wiOjB4ZjYsXG4gIFwib3ZiYXI7XCI6MHgyMzNkLCBcInBhcjtcIjoweDIyMjUsXG4gIFwicGFyYVwiOjB4YjYsIFwicGFyYTtcIjoweGI2LFxuICBcInBhcmFsbGVsO1wiOjB4MjIyNSwgXCJwYXJzaW07XCI6MHgyYWYzLFxuICBcInBhcnNsO1wiOjB4MmFmZCwgXCJwYXJ0O1wiOjB4MjIwMixcbiAgXCJwY3k7XCI6MHg0M2YsIFwicGVyY250O1wiOjB4MjUsXG4gIFwicGVyaW9kO1wiOjB4MmUsIFwicGVybWlsO1wiOjB4MjAzMCxcbiAgXCJwZXJwO1wiOjB4MjJhNSwgXCJwZXJ0ZW5rO1wiOjB4MjAzMSxcbiAgXCJwZnI7XCI6WzB4ZDgzNSwweGRkMmRdLCBcInBoaTtcIjoweDNjNixcbiAgXCJwaGl2O1wiOjB4M2Q1LCBcInBobW1hdDtcIjoweDIxMzMsXG4gIFwicGhvbmU7XCI6MHgyNjBlLCBcInBpO1wiOjB4M2MwLFxuICBcInBpdGNoZm9yaztcIjoweDIyZDQsIFwicGl2O1wiOjB4M2Q2LFxuICBcInBsYW5jaztcIjoweDIxMGYsIFwicGxhbmNraDtcIjoweDIxMGUsXG4gIFwicGxhbmt2O1wiOjB4MjEwZiwgXCJwbHVzO1wiOjB4MmIsXG4gIFwicGx1c2FjaXI7XCI6MHgyYTIzLCBcInBsdXNiO1wiOjB4MjI5ZSxcbiAgXCJwbHVzY2lyO1wiOjB4MmEyMiwgXCJwbHVzZG87XCI6MHgyMjE0LFxuICBcInBsdXNkdTtcIjoweDJhMjUsIFwicGx1c2U7XCI6MHgyYTcyLFxuICBcInBsdXNtblwiOjB4YjEsIFwicGx1c21uO1wiOjB4YjEsXG4gIFwicGx1c3NpbTtcIjoweDJhMjYsIFwicGx1c3R3bztcIjoweDJhMjcsXG4gIFwicG07XCI6MHhiMSwgXCJwb2ludGludDtcIjoweDJhMTUsXG4gIFwicG9wZjtcIjpbMHhkODM1LDB4ZGQ2MV0sIFwicG91bmRcIjoweGEzLFxuICBcInBvdW5kO1wiOjB4YTMsIFwicHI7XCI6MHgyMjdhLFxuICBcInByRTtcIjoweDJhYjMsIFwicHJhcDtcIjoweDJhYjcsXG4gIFwicHJjdWU7XCI6MHgyMjdjLCBcInByZTtcIjoweDJhYWYsXG4gIFwicHJlYztcIjoweDIyN2EsIFwicHJlY2FwcHJveDtcIjoweDJhYjcsXG4gIFwicHJlY2N1cmx5ZXE7XCI6MHgyMjdjLCBcInByZWNlcTtcIjoweDJhYWYsXG4gIFwicHJlY25hcHByb3g7XCI6MHgyYWI5LCBcInByZWNuZXFxO1wiOjB4MmFiNSxcbiAgXCJwcmVjbnNpbTtcIjoweDIyZTgsIFwicHJlY3NpbTtcIjoweDIyN2UsXG4gIFwicHJpbWU7XCI6MHgyMDMyLCBcInByaW1lcztcIjoweDIxMTksXG4gIFwicHJuRTtcIjoweDJhYjUsIFwicHJuYXA7XCI6MHgyYWI5LFxuICBcInBybnNpbTtcIjoweDIyZTgsIFwicHJvZDtcIjoweDIyMGYsXG4gIFwicHJvZmFsYXI7XCI6MHgyMzJlLCBcInByb2ZsaW5lO1wiOjB4MjMxMixcbiAgXCJwcm9mc3VyZjtcIjoweDIzMTMsIFwicHJvcDtcIjoweDIyMWQsXG4gIFwicHJvcHRvO1wiOjB4MjIxZCwgXCJwcnNpbTtcIjoweDIyN2UsXG4gIFwicHJ1cmVsO1wiOjB4MjJiMCwgXCJwc2NyO1wiOlsweGQ4MzUsMHhkY2M1XSxcbiAgXCJwc2k7XCI6MHgzYzgsIFwicHVuY3NwO1wiOjB4MjAwOCxcbiAgXCJxZnI7XCI6WzB4ZDgzNSwweGRkMmVdLCBcInFpbnQ7XCI6MHgyYTBjLFxuICBcInFvcGY7XCI6WzB4ZDgzNSwweGRkNjJdLCBcInFwcmltZTtcIjoweDIwNTcsXG4gIFwicXNjcjtcIjpbMHhkODM1LDB4ZGNjNl0sIFwicXVhdGVybmlvbnM7XCI6MHgyMTBkLFxuICBcInF1YXRpbnQ7XCI6MHgyYTE2LCBcInF1ZXN0O1wiOjB4M2YsXG4gIFwicXVlc3RlcTtcIjoweDIyNWYsIFwicXVvdFwiOjB4MjIsXG4gIFwicXVvdDtcIjoweDIyLCBcInJBYXJyO1wiOjB4MjFkYixcbiAgXCJyQXJyO1wiOjB4MjFkMiwgXCJyQXRhaWw7XCI6MHgyOTFjLFxuICBcInJCYXJyO1wiOjB4MjkwZiwgXCJySGFyO1wiOjB4Mjk2NCxcbiAgXCJyYWNlO1wiOlsweDIyM2QsMHgzMzFdLCBcInJhY3V0ZTtcIjoweDE1NSxcbiAgXCJyYWRpYztcIjoweDIyMWEsIFwicmFlbXB0eXY7XCI6MHgyOWIzLFxuICBcInJhbmc7XCI6MHgyN2U5LCBcInJhbmdkO1wiOjB4Mjk5MixcbiAgXCJyYW5nZTtcIjoweDI5YTUsIFwicmFuZ2xlO1wiOjB4MjdlOSxcbiAgXCJyYXF1b1wiOjB4YmIsIFwicmFxdW87XCI6MHhiYixcbiAgXCJyYXJyO1wiOjB4MjE5MiwgXCJyYXJyYXA7XCI6MHgyOTc1LFxuICBcInJhcnJiO1wiOjB4MjFlNSwgXCJyYXJyYmZzO1wiOjB4MjkyMCxcbiAgXCJyYXJyYztcIjoweDI5MzMsIFwicmFycmZzO1wiOjB4MjkxZSxcbiAgXCJyYXJyaGs7XCI6MHgyMWFhLCBcInJhcnJscDtcIjoweDIxYWMsXG4gIFwicmFycnBsO1wiOjB4Mjk0NSwgXCJyYXJyc2ltO1wiOjB4Mjk3NCxcbiAgXCJyYXJydGw7XCI6MHgyMWEzLCBcInJhcnJ3O1wiOjB4MjE5ZCxcbiAgXCJyYXRhaWw7XCI6MHgyOTFhLCBcInJhdGlvO1wiOjB4MjIzNixcbiAgXCJyYXRpb25hbHM7XCI6MHgyMTFhLCBcInJiYXJyO1wiOjB4MjkwZCxcbiAgXCJyYmJyaztcIjoweDI3NzMsIFwicmJyYWNlO1wiOjB4N2QsXG4gIFwicmJyYWNrO1wiOjB4NWQsIFwicmJya2U7XCI6MHgyOThjLFxuICBcInJicmtzbGQ7XCI6MHgyOThlLCBcInJicmtzbHU7XCI6MHgyOTkwLFxuICBcInJjYXJvbjtcIjoweDE1OSwgXCJyY2VkaWw7XCI6MHgxNTcsXG4gIFwicmNlaWw7XCI6MHgyMzA5LCBcInJjdWI7XCI6MHg3ZCxcbiAgXCJyY3k7XCI6MHg0NDAsIFwicmRjYTtcIjoweDI5MzcsXG4gIFwicmRsZGhhcjtcIjoweDI5NjksIFwicmRxdW87XCI6MHgyMDFkLFxuICBcInJkcXVvcjtcIjoweDIwMWQsIFwicmRzaDtcIjoweDIxYjMsXG4gIFwicmVhbDtcIjoweDIxMWMsIFwicmVhbGluZTtcIjoweDIxMWIsXG4gIFwicmVhbHBhcnQ7XCI6MHgyMTFjLCBcInJlYWxzO1wiOjB4MjExZCxcbiAgXCJyZWN0O1wiOjB4MjVhZCwgXCJyZWdcIjoweGFlLFxuICBcInJlZztcIjoweGFlLCBcInJmaXNodDtcIjoweDI5N2QsXG4gIFwicmZsb29yO1wiOjB4MjMwYiwgXCJyZnI7XCI6WzB4ZDgzNSwweGRkMmZdLFxuICBcInJoYXJkO1wiOjB4MjFjMSwgXCJyaGFydTtcIjoweDIxYzAsXG4gIFwicmhhcnVsO1wiOjB4Mjk2YywgXCJyaG87XCI6MHgzYzEsXG4gIFwicmhvdjtcIjoweDNmMSwgXCJyaWdodGFycm93O1wiOjB4MjE5MixcbiAgXCJyaWdodGFycm93dGFpbDtcIjoweDIxYTMsIFwicmlnaHRoYXJwb29uZG93bjtcIjoweDIxYzEsXG4gIFwicmlnaHRoYXJwb29udXA7XCI6MHgyMWMwLCBcInJpZ2h0bGVmdGFycm93cztcIjoweDIxYzQsXG4gIFwicmlnaHRsZWZ0aGFycG9vbnM7XCI6MHgyMWNjLCBcInJpZ2h0cmlnaHRhcnJvd3M7XCI6MHgyMWM5LFxuICBcInJpZ2h0c3F1aWdhcnJvdztcIjoweDIxOWQsIFwicmlnaHR0aHJlZXRpbWVzO1wiOjB4MjJjYyxcbiAgXCJyaW5nO1wiOjB4MmRhLCBcInJpc2luZ2RvdHNlcTtcIjoweDIyNTMsXG4gIFwicmxhcnI7XCI6MHgyMWM0LCBcInJsaGFyO1wiOjB4MjFjYyxcbiAgXCJybG07XCI6MHgyMDBmLCBcInJtb3VzdDtcIjoweDIzYjEsXG4gIFwicm1vdXN0YWNoZTtcIjoweDIzYjEsIFwicm5taWQ7XCI6MHgyYWVlLFxuICBcInJvYW5nO1wiOjB4MjdlZCwgXCJyb2FycjtcIjoweDIxZmUsXG4gIFwicm9icms7XCI6MHgyN2U3LCBcInJvcGFyO1wiOjB4Mjk4NixcbiAgXCJyb3BmO1wiOlsweGQ4MzUsMHhkZDYzXSwgXCJyb3BsdXM7XCI6MHgyYTJlLFxuICBcInJvdGltZXM7XCI6MHgyYTM1LCBcInJwYXI7XCI6MHgyOSxcbiAgXCJycGFyZ3Q7XCI6MHgyOTk0LCBcInJwcG9saW50O1wiOjB4MmExMixcbiAgXCJycmFycjtcIjoweDIxYzksIFwicnNhcXVvO1wiOjB4MjAzYSxcbiAgXCJyc2NyO1wiOlsweGQ4MzUsMHhkY2M3XSwgXCJyc2g7XCI6MHgyMWIxLFxuICBcInJzcWI7XCI6MHg1ZCwgXCJyc3F1bztcIjoweDIwMTksXG4gIFwicnNxdW9yO1wiOjB4MjAxOSwgXCJydGhyZWU7XCI6MHgyMmNjLFxuICBcInJ0aW1lcztcIjoweDIyY2EsIFwicnRyaTtcIjoweDI1YjksXG4gIFwicnRyaWU7XCI6MHgyMmI1LCBcInJ0cmlmO1wiOjB4MjViOCxcbiAgXCJydHJpbHRyaTtcIjoweDI5Y2UsIFwicnVsdWhhcjtcIjoweDI5NjgsXG4gIFwicng7XCI6MHgyMTFlLCBcInNhY3V0ZTtcIjoweDE1YixcbiAgXCJzYnF1bztcIjoweDIwMWEsIFwic2M7XCI6MHgyMjdiLFxuICBcInNjRTtcIjoweDJhYjQsIFwic2NhcDtcIjoweDJhYjgsXG4gIFwic2Nhcm9uO1wiOjB4MTYxLCBcInNjY3VlO1wiOjB4MjI3ZCxcbiAgXCJzY2U7XCI6MHgyYWIwLCBcInNjZWRpbDtcIjoweDE1ZixcbiAgXCJzY2lyYztcIjoweDE1ZCwgXCJzY25FO1wiOjB4MmFiNixcbiAgXCJzY25hcDtcIjoweDJhYmEsIFwic2Nuc2ltO1wiOjB4MjJlOSxcbiAgXCJzY3BvbGludDtcIjoweDJhMTMsIFwic2NzaW07XCI6MHgyMjdmLFxuICBcInNjeTtcIjoweDQ0MSwgXCJzZG90O1wiOjB4MjJjNSxcbiAgXCJzZG90YjtcIjoweDIyYTEsIFwic2RvdGU7XCI6MHgyYTY2LFxuICBcInNlQXJyO1wiOjB4MjFkOCwgXCJzZWFyaGs7XCI6MHgyOTI1LFxuICBcInNlYXJyO1wiOjB4MjE5OCwgXCJzZWFycm93O1wiOjB4MjE5OCxcbiAgXCJzZWN0XCI6MHhhNywgXCJzZWN0O1wiOjB4YTcsXG4gIFwic2VtaTtcIjoweDNiLCBcInNlc3dhcjtcIjoweDI5MjksXG4gIFwic2V0bWludXM7XCI6MHgyMjE2LCBcInNldG1uO1wiOjB4MjIxNixcbiAgXCJzZXh0O1wiOjB4MjczNiwgXCJzZnI7XCI6WzB4ZDgzNSwweGRkMzBdLFxuICBcInNmcm93bjtcIjoweDIzMjIsIFwic2hhcnA7XCI6MHgyNjZmLFxuICBcInNoY2hjeTtcIjoweDQ0OSwgXCJzaGN5O1wiOjB4NDQ4LFxuICBcInNob3J0bWlkO1wiOjB4MjIyMywgXCJzaG9ydHBhcmFsbGVsO1wiOjB4MjIyNSxcbiAgXCJzaHlcIjoweGFkLCBcInNoeTtcIjoweGFkLFxuICBcInNpZ21hO1wiOjB4M2MzLCBcInNpZ21hZjtcIjoweDNjMixcbiAgXCJzaWdtYXY7XCI6MHgzYzIsIFwic2ltO1wiOjB4MjIzYyxcbiAgXCJzaW1kb3Q7XCI6MHgyYTZhLCBcInNpbWU7XCI6MHgyMjQzLFxuICBcInNpbWVxO1wiOjB4MjI0MywgXCJzaW1nO1wiOjB4MmE5ZSxcbiAgXCJzaW1nRTtcIjoweDJhYTAsIFwic2ltbDtcIjoweDJhOWQsXG4gIFwic2ltbEU7XCI6MHgyYTlmLCBcInNpbW5lO1wiOjB4MjI0NixcbiAgXCJzaW1wbHVzO1wiOjB4MmEyNCwgXCJzaW1yYXJyO1wiOjB4Mjk3MixcbiAgXCJzbGFycjtcIjoweDIxOTAsIFwic21hbGxzZXRtaW51cztcIjoweDIyMTYsXG4gIFwic21hc2hwO1wiOjB4MmEzMywgXCJzbWVwYXJzbDtcIjoweDI5ZTQsXG4gIFwic21pZDtcIjoweDIyMjMsIFwic21pbGU7XCI6MHgyMzIzLFxuICBcInNtdDtcIjoweDJhYWEsIFwic210ZTtcIjoweDJhYWMsXG4gIFwic210ZXM7XCI6WzB4MmFhYywweGZlMDBdLCBcInNvZnRjeTtcIjoweDQ0YyxcbiAgXCJzb2w7XCI6MHgyZiwgXCJzb2xiO1wiOjB4MjljNCxcbiAgXCJzb2xiYXI7XCI6MHgyMzNmLCBcInNvcGY7XCI6WzB4ZDgzNSwweGRkNjRdLFxuICBcInNwYWRlcztcIjoweDI2NjAsIFwic3BhZGVzdWl0O1wiOjB4MjY2MCxcbiAgXCJzcGFyO1wiOjB4MjIyNSwgXCJzcWNhcDtcIjoweDIyOTMsXG4gIFwic3FjYXBzO1wiOlsweDIyOTMsMHhmZTAwXSwgXCJzcWN1cDtcIjoweDIyOTQsXG4gIFwic3FjdXBzO1wiOlsweDIyOTQsMHhmZTAwXSwgXCJzcXN1YjtcIjoweDIyOGYsXG4gIFwic3FzdWJlO1wiOjB4MjI5MSwgXCJzcXN1YnNldDtcIjoweDIyOGYsXG4gIFwic3FzdWJzZXRlcTtcIjoweDIyOTEsIFwic3FzdXA7XCI6MHgyMjkwLFxuICBcInNxc3VwZTtcIjoweDIyOTIsIFwic3FzdXBzZXQ7XCI6MHgyMjkwLFxuICBcInNxc3Vwc2V0ZXE7XCI6MHgyMjkyLCBcInNxdTtcIjoweDI1YTEsXG4gIFwic3F1YXJlO1wiOjB4MjVhMSwgXCJzcXVhcmY7XCI6MHgyNWFhLFxuICBcInNxdWY7XCI6MHgyNWFhLCBcInNyYXJyO1wiOjB4MjE5MixcbiAgXCJzc2NyO1wiOlsweGQ4MzUsMHhkY2M4XSwgXCJzc2V0bW47XCI6MHgyMjE2LFxuICBcInNzbWlsZTtcIjoweDIzMjMsIFwic3N0YXJmO1wiOjB4MjJjNixcbiAgXCJzdGFyO1wiOjB4MjYwNiwgXCJzdGFyZjtcIjoweDI2MDUsXG4gIFwic3RyYWlnaHRlcHNpbG9uO1wiOjB4M2Y1LCBcInN0cmFpZ2h0cGhpO1wiOjB4M2Q1LFxuICBcInN0cm5zO1wiOjB4YWYsIFwic3ViO1wiOjB4MjI4MixcbiAgXCJzdWJFO1wiOjB4MmFjNSwgXCJzdWJkb3Q7XCI6MHgyYWJkLFxuICBcInN1YmU7XCI6MHgyMjg2LCBcInN1YmVkb3Q7XCI6MHgyYWMzLFxuICBcInN1Ym11bHQ7XCI6MHgyYWMxLCBcInN1Ym5FO1wiOjB4MmFjYixcbiAgXCJzdWJuZTtcIjoweDIyOGEsIFwic3VicGx1cztcIjoweDJhYmYsXG4gIFwic3VicmFycjtcIjoweDI5NzksIFwic3Vic2V0O1wiOjB4MjI4MixcbiAgXCJzdWJzZXRlcTtcIjoweDIyODYsIFwic3Vic2V0ZXFxO1wiOjB4MmFjNSxcbiAgXCJzdWJzZXRuZXE7XCI6MHgyMjhhLCBcInN1YnNldG5lcXE7XCI6MHgyYWNiLFxuICBcInN1YnNpbTtcIjoweDJhYzcsIFwic3Vic3ViO1wiOjB4MmFkNSxcbiAgXCJzdWJzdXA7XCI6MHgyYWQzLCBcInN1Y2M7XCI6MHgyMjdiLFxuICBcInN1Y2NhcHByb3g7XCI6MHgyYWI4LCBcInN1Y2NjdXJseWVxO1wiOjB4MjI3ZCxcbiAgXCJzdWNjZXE7XCI6MHgyYWIwLCBcInN1Y2NuYXBwcm94O1wiOjB4MmFiYSxcbiAgXCJzdWNjbmVxcTtcIjoweDJhYjYsIFwic3VjY25zaW07XCI6MHgyMmU5LFxuICBcInN1Y2NzaW07XCI6MHgyMjdmLCBcInN1bTtcIjoweDIyMTEsXG4gIFwic3VuZztcIjoweDI2NmEsIFwic3VwMVwiOjB4YjksXG4gIFwic3VwMTtcIjoweGI5LCBcInN1cDJcIjoweGIyLFxuICBcInN1cDI7XCI6MHhiMiwgXCJzdXAzXCI6MHhiMyxcbiAgXCJzdXAzO1wiOjB4YjMsIFwic3VwO1wiOjB4MjI4MyxcbiAgXCJzdXBFO1wiOjB4MmFjNiwgXCJzdXBkb3Q7XCI6MHgyYWJlLFxuICBcInN1cGRzdWI7XCI6MHgyYWQ4LCBcInN1cGU7XCI6MHgyMjg3LFxuICBcInN1cGVkb3Q7XCI6MHgyYWM0LCBcInN1cGhzb2w7XCI6MHgyN2M5LFxuICBcInN1cGhzdWI7XCI6MHgyYWQ3LCBcInN1cGxhcnI7XCI6MHgyOTdiLFxuICBcInN1cG11bHQ7XCI6MHgyYWMyLCBcInN1cG5FO1wiOjB4MmFjYyxcbiAgXCJzdXBuZTtcIjoweDIyOGIsIFwic3VwcGx1cztcIjoweDJhYzAsXG4gIFwic3Vwc2V0O1wiOjB4MjI4MywgXCJzdXBzZXRlcTtcIjoweDIyODcsXG4gIFwic3Vwc2V0ZXFxO1wiOjB4MmFjNiwgXCJzdXBzZXRuZXE7XCI6MHgyMjhiLFxuICBcInN1cHNldG5lcXE7XCI6MHgyYWNjLCBcInN1cHNpbTtcIjoweDJhYzgsXG4gIFwic3Vwc3ViO1wiOjB4MmFkNCwgXCJzdXBzdXA7XCI6MHgyYWQ2LFxuICBcInN3QXJyO1wiOjB4MjFkOSwgXCJzd2FyaGs7XCI6MHgyOTI2LFxuICBcInN3YXJyO1wiOjB4MjE5OSwgXCJzd2Fycm93O1wiOjB4MjE5OSxcbiAgXCJzd253YXI7XCI6MHgyOTJhLCBcInN6bGlnXCI6MHhkZixcbiAgXCJzemxpZztcIjoweGRmLCBcInRhcmdldDtcIjoweDIzMTYsXG4gIFwidGF1O1wiOjB4M2M0LCBcInRicms7XCI6MHgyM2I0LFxuICBcInRjYXJvbjtcIjoweDE2NSwgXCJ0Y2VkaWw7XCI6MHgxNjMsXG4gIFwidGN5O1wiOjB4NDQyLCBcInRkb3Q7XCI6MHgyMGRiLFxuICBcInRlbHJlYztcIjoweDIzMTUsIFwidGZyO1wiOlsweGQ4MzUsMHhkZDMxXSxcbiAgXCJ0aGVyZTQ7XCI6MHgyMjM0LCBcInRoZXJlZm9yZTtcIjoweDIyMzQsXG4gIFwidGhldGE7XCI6MHgzYjgsIFwidGhldGFzeW07XCI6MHgzZDEsXG4gIFwidGhldGF2O1wiOjB4M2QxLCBcInRoaWNrYXBwcm94O1wiOjB4MjI0OCxcbiAgXCJ0aGlja3NpbTtcIjoweDIyM2MsIFwidGhpbnNwO1wiOjB4MjAwOSxcbiAgXCJ0aGthcDtcIjoweDIyNDgsIFwidGhrc2ltO1wiOjB4MjIzYyxcbiAgXCJ0aG9yblwiOjB4ZmUsIFwidGhvcm47XCI6MHhmZSxcbiAgXCJ0aWxkZTtcIjoweDJkYywgXCJ0aW1lc1wiOjB4ZDcsXG4gIFwidGltZXM7XCI6MHhkNywgXCJ0aW1lc2I7XCI6MHgyMmEwLFxuICBcInRpbWVzYmFyO1wiOjB4MmEzMSwgXCJ0aW1lc2Q7XCI6MHgyYTMwLFxuICBcInRpbnQ7XCI6MHgyMjJkLCBcInRvZWE7XCI6MHgyOTI4LFxuICBcInRvcDtcIjoweDIyYTQsIFwidG9wYm90O1wiOjB4MjMzNixcbiAgXCJ0b3BjaXI7XCI6MHgyYWYxLCBcInRvcGY7XCI6WzB4ZDgzNSwweGRkNjVdLFxuICBcInRvcGZvcms7XCI6MHgyYWRhLCBcInRvc2E7XCI6MHgyOTI5LFxuICBcInRwcmltZTtcIjoweDIwMzQsIFwidHJhZGU7XCI6MHgyMTIyLFxuICBcInRyaWFuZ2xlO1wiOjB4MjViNSwgXCJ0cmlhbmdsZWRvd247XCI6MHgyNWJmLFxuICBcInRyaWFuZ2xlbGVmdDtcIjoweDI1YzMsIFwidHJpYW5nbGVsZWZ0ZXE7XCI6MHgyMmI0LFxuICBcInRyaWFuZ2xlcTtcIjoweDIyNWMsIFwidHJpYW5nbGVyaWdodDtcIjoweDI1YjksXG4gIFwidHJpYW5nbGVyaWdodGVxO1wiOjB4MjJiNSwgXCJ0cmlkb3Q7XCI6MHgyNWVjLFxuICBcInRyaWU7XCI6MHgyMjVjLCBcInRyaW1pbnVzO1wiOjB4MmEzYSxcbiAgXCJ0cmlwbHVzO1wiOjB4MmEzOSwgXCJ0cmlzYjtcIjoweDI5Y2QsXG4gIFwidHJpdGltZTtcIjoweDJhM2IsIFwidHJwZXppdW07XCI6MHgyM2UyLFxuICBcInRzY3I7XCI6WzB4ZDgzNSwweGRjYzldLCBcInRzY3k7XCI6MHg0NDYsXG4gIFwidHNoY3k7XCI6MHg0NWIsIFwidHN0cm9rO1wiOjB4MTY3LFxuICBcInR3aXh0O1wiOjB4MjI2YywgXCJ0d29oZWFkbGVmdGFycm93O1wiOjB4MjE5ZSxcbiAgXCJ0d29oZWFkcmlnaHRhcnJvdztcIjoweDIxYTAsIFwidUFycjtcIjoweDIxZDEsXG4gIFwidUhhcjtcIjoweDI5NjMsIFwidWFjdXRlXCI6MHhmYSxcbiAgXCJ1YWN1dGU7XCI6MHhmYSwgXCJ1YXJyO1wiOjB4MjE5MSxcbiAgXCJ1YnJjeTtcIjoweDQ1ZSwgXCJ1YnJldmU7XCI6MHgxNmQsXG4gIFwidWNpcmNcIjoweGZiLCBcInVjaXJjO1wiOjB4ZmIsXG4gIFwidWN5O1wiOjB4NDQzLCBcInVkYXJyO1wiOjB4MjFjNSxcbiAgXCJ1ZGJsYWM7XCI6MHgxNzEsIFwidWRoYXI7XCI6MHgyOTZlLFxuICBcInVmaXNodDtcIjoweDI5N2UsIFwidWZyO1wiOlsweGQ4MzUsMHhkZDMyXSxcbiAgXCJ1Z3JhdmVcIjoweGY5LCBcInVncmF2ZTtcIjoweGY5LFxuICBcInVoYXJsO1wiOjB4MjFiZiwgXCJ1aGFycjtcIjoweDIxYmUsXG4gIFwidWhibGs7XCI6MHgyNTgwLCBcInVsY29ybjtcIjoweDIzMWMsXG4gIFwidWxjb3JuZXI7XCI6MHgyMzFjLCBcInVsY3JvcDtcIjoweDIzMGYsXG4gIFwidWx0cmk7XCI6MHgyNWY4LCBcInVtYWNyO1wiOjB4MTZiLFxuICBcInVtbFwiOjB4YTgsIFwidW1sO1wiOjB4YTgsXG4gIFwidW9nb247XCI6MHgxNzMsIFwidW9wZjtcIjpbMHhkODM1LDB4ZGQ2Nl0sXG4gIFwidXBhcnJvdztcIjoweDIxOTEsIFwidXBkb3duYXJyb3c7XCI6MHgyMTk1LFxuICBcInVwaGFycG9vbmxlZnQ7XCI6MHgyMWJmLCBcInVwaGFycG9vbnJpZ2h0O1wiOjB4MjFiZSxcbiAgXCJ1cGx1cztcIjoweDIyOGUsIFwidXBzaTtcIjoweDNjNSxcbiAgXCJ1cHNpaDtcIjoweDNkMiwgXCJ1cHNpbG9uO1wiOjB4M2M1LFxuICBcInVwdXBhcnJvd3M7XCI6MHgyMWM4LCBcInVyY29ybjtcIjoweDIzMWQsXG4gIFwidXJjb3JuZXI7XCI6MHgyMzFkLCBcInVyY3JvcDtcIjoweDIzMGUsXG4gIFwidXJpbmc7XCI6MHgxNmYsIFwidXJ0cmk7XCI6MHgyNWY5LFxuICBcInVzY3I7XCI6WzB4ZDgzNSwweGRjY2FdLCBcInV0ZG90O1wiOjB4MjJmMCxcbiAgXCJ1dGlsZGU7XCI6MHgxNjksIFwidXRyaTtcIjoweDI1YjUsXG4gIFwidXRyaWY7XCI6MHgyNWI0LCBcInV1YXJyO1wiOjB4MjFjOCxcbiAgXCJ1dW1sXCI6MHhmYywgXCJ1dW1sO1wiOjB4ZmMsXG4gIFwidXdhbmdsZTtcIjoweDI5YTcsIFwidkFycjtcIjoweDIxZDUsXG4gIFwidkJhcjtcIjoweDJhZTgsIFwidkJhcnY7XCI6MHgyYWU5LFxuICBcInZEYXNoO1wiOjB4MjJhOCwgXCJ2YW5ncnQ7XCI6MHgyOTljLFxuICBcInZhcmVwc2lsb247XCI6MHgzZjUsIFwidmFya2FwcGE7XCI6MHgzZjAsXG4gIFwidmFybm90aGluZztcIjoweDIyMDUsIFwidmFycGhpO1wiOjB4M2Q1LFxuICBcInZhcnBpO1wiOjB4M2Q2LCBcInZhcnByb3B0bztcIjoweDIyMWQsXG4gIFwidmFycjtcIjoweDIxOTUsIFwidmFycmhvO1wiOjB4M2YxLFxuICBcInZhcnNpZ21hO1wiOjB4M2MyLCBcInZhcnN1YnNldG5lcTtcIjpbMHgyMjhhLDB4ZmUwMF0sXG4gIFwidmFyc3Vic2V0bmVxcTtcIjpbMHgyYWNiLDB4ZmUwMF0sIFwidmFyc3Vwc2V0bmVxO1wiOlsweDIyOGIsMHhmZTAwXSxcbiAgXCJ2YXJzdXBzZXRuZXFxO1wiOlsweDJhY2MsMHhmZTAwXSwgXCJ2YXJ0aGV0YTtcIjoweDNkMSxcbiAgXCJ2YXJ0cmlhbmdsZWxlZnQ7XCI6MHgyMmIyLCBcInZhcnRyaWFuZ2xlcmlnaHQ7XCI6MHgyMmIzLFxuICBcInZjeTtcIjoweDQzMiwgXCJ2ZGFzaDtcIjoweDIyYTIsXG4gIFwidmVlO1wiOjB4MjIyOCwgXCJ2ZWViYXI7XCI6MHgyMmJiLFxuICBcInZlZWVxO1wiOjB4MjI1YSwgXCJ2ZWxsaXA7XCI6MHgyMmVlLFxuICBcInZlcmJhcjtcIjoweDdjLCBcInZlcnQ7XCI6MHg3YyxcbiAgXCJ2ZnI7XCI6WzB4ZDgzNSwweGRkMzNdLCBcInZsdHJpO1wiOjB4MjJiMixcbiAgXCJ2bnN1YjtcIjpbMHgyMjgyLDB4MjBkMl0sIFwidm5zdXA7XCI6WzB4MjI4MywweDIwZDJdLFxuICBcInZvcGY7XCI6WzB4ZDgzNSwweGRkNjddLCBcInZwcm9wO1wiOjB4MjIxZCxcbiAgXCJ2cnRyaTtcIjoweDIyYjMsIFwidnNjcjtcIjpbMHhkODM1LDB4ZGNjYl0sXG4gIFwidnN1Ym5FO1wiOlsweDJhY2IsMHhmZTAwXSwgXCJ2c3VibmU7XCI6WzB4MjI4YSwweGZlMDBdLFxuICBcInZzdXBuRTtcIjpbMHgyYWNjLDB4ZmUwMF0sIFwidnN1cG5lO1wiOlsweDIyOGIsMHhmZTAwXSxcbiAgXCJ2emlnemFnO1wiOjB4Mjk5YSwgXCJ3Y2lyYztcIjoweDE3NSxcbiAgXCJ3ZWRiYXI7XCI6MHgyYTVmLCBcIndlZGdlO1wiOjB4MjIyNyxcbiAgXCJ3ZWRnZXE7XCI6MHgyMjU5LCBcIndlaWVycDtcIjoweDIxMTgsXG4gIFwid2ZyO1wiOlsweGQ4MzUsMHhkZDM0XSwgXCJ3b3BmO1wiOlsweGQ4MzUsMHhkZDY4XSxcbiAgXCJ3cDtcIjoweDIxMTgsIFwid3I7XCI6MHgyMjQwLFxuICBcIndyZWF0aDtcIjoweDIyNDAsIFwid3NjcjtcIjpbMHhkODM1LDB4ZGNjY10sXG4gIFwieGNhcDtcIjoweDIyYzIsIFwieGNpcmM7XCI6MHgyNWVmLFxuICBcInhjdXA7XCI6MHgyMmMzLCBcInhkdHJpO1wiOjB4MjViZCxcbiAgXCJ4ZnI7XCI6WzB4ZDgzNSwweGRkMzVdLCBcInhoQXJyO1wiOjB4MjdmYSxcbiAgXCJ4aGFycjtcIjoweDI3ZjcsIFwieGk7XCI6MHgzYmUsXG4gIFwieGxBcnI7XCI6MHgyN2Y4LCBcInhsYXJyO1wiOjB4MjdmNSxcbiAgXCJ4bWFwO1wiOjB4MjdmYywgXCJ4bmlzO1wiOjB4MjJmYixcbiAgXCJ4b2RvdDtcIjoweDJhMDAsIFwieG9wZjtcIjpbMHhkODM1LDB4ZGQ2OV0sXG4gIFwieG9wbHVzO1wiOjB4MmEwMSwgXCJ4b3RpbWU7XCI6MHgyYTAyLFxuICBcInhyQXJyO1wiOjB4MjdmOSwgXCJ4cmFycjtcIjoweDI3ZjYsXG4gIFwieHNjcjtcIjpbMHhkODM1LDB4ZGNjZF0sIFwieHNxY3VwO1wiOjB4MmEwNixcbiAgXCJ4dXBsdXM7XCI6MHgyYTA0LCBcInh1dHJpO1wiOjB4MjViMyxcbiAgXCJ4dmVlO1wiOjB4MjJjMSwgXCJ4d2VkZ2U7XCI6MHgyMmMwLFxuICBcInlhY3V0ZVwiOjB4ZmQsIFwieWFjdXRlO1wiOjB4ZmQsXG4gIFwieWFjeTtcIjoweDQ0ZiwgXCJ5Y2lyYztcIjoweDE3NyxcbiAgXCJ5Y3k7XCI6MHg0NGIsIFwieWVuXCI6MHhhNSxcbiAgXCJ5ZW47XCI6MHhhNSwgXCJ5ZnI7XCI6WzB4ZDgzNSwweGRkMzZdLFxuICBcInlpY3k7XCI6MHg0NTcsIFwieW9wZjtcIjpbMHhkODM1LDB4ZGQ2YV0sXG4gIFwieXNjcjtcIjpbMHhkODM1LDB4ZGNjZV0sIFwieXVjeTtcIjoweDQ0ZSxcbiAgXCJ5dW1sXCI6MHhmZiwgXCJ5dW1sO1wiOjB4ZmYsXG4gIFwiemFjdXRlO1wiOjB4MTdhLCBcInpjYXJvbjtcIjoweDE3ZSxcbiAgXCJ6Y3k7XCI6MHg0MzcsIFwiemRvdDtcIjoweDE3YyxcbiAgXCJ6ZWV0cmY7XCI6MHgyMTI4LCBcInpldGE7XCI6MHgzYjYsXG4gIFwiemZyO1wiOlsweGQ4MzUsMHhkZDM3XSwgXCJ6aGN5O1wiOjB4NDM2LFxuICBcInppZ3JhcnI7XCI6MHgyMWRkLCBcInpvcGY7XCI6WzB4ZDgzNSwweGRkNmJdLFxuICBcInpzY3I7XCI6WzB4ZDgzNSwweGRjY2ZdLCBcInp3ajtcIjoweDIwMGQsXG4gIFwienduajtcIjoweDIwMGMsXG59O1xuLypcbiAqIFRoaXMgcmVnZXhwIGlzIGdlbmVyYXRlZCB3aXRoIHRlc3QvdG9vbHMvdXBkYXRlLWVudGl0aWVzLmpzXG4gKiBJdCB3aWxsIGFsd2F5cyBtYXRjaCBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIC0tIGJ1dCBub3RlIHRoYXQgdGhlcmVcbiAqIGFyZSBubyBlbnRpdGllcyB3aG9zZSBuYW1lcyBhcmUgYSBzaW5nbGUgY2hhcmFjdGVyIGxvbmcuXG4gKi9cbnZhciBOQU1FRENIQVJSRUYgPSAvKEEoPzpFbGlnOz98TVA7P3xhY3V0ZTs/fGJyZXZlO3xjKD86aXJjOz98eTspfGZyO3xncmF2ZTs/fGxwaGE7fG1hY3I7fG5kO3xvKD86Z29uO3xwZjspfHBwbHlGdW5jdGlvbjt8cmluZzs/fHMoPzpjcjt8c2lnbjspfHRpbGRlOz98dW1sOz8pfEIoPzphKD86Y2tzbGFzaDt8cig/OnY7fHdlZDspKXxjeTt8ZSg/OmNhdXNlO3xybm91bGxpczt8dGE7KXxmcjt8b3BmO3xyZXZlO3xzY3I7fHVtcGVxOyl8Qyg/OkhjeTt8T1BZOz98YSg/OmN1dGU7fHAoPzo7fGl0YWxEaWZmZXJlbnRpYWxEOyl8eWxleXM7KXxjKD86YXJvbjt8ZWRpbDs/fGlyYzt8b25pbnQ7KXxkb3Q7fGUoPzpkaWxsYTt8bnRlckRvdDspfGZyO3xoaTt8aXJjbGUoPzpEb3Q7fE1pbnVzO3xQbHVzO3xUaW1lczspfGxvKD86Y2t3aXNlQ29udG91ckludGVncmFsO3xzZUN1cmx5KD86RG91YmxlUXVvdGU7fFF1b3RlOykpfG8oPzpsb24oPzo7fGU7KXxuKD86Z3J1ZW50O3xpbnQ7fHRvdXJJbnRlZ3JhbDspfHAoPzpmO3xyb2R1Y3Q7KXx1bnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDspfHJvc3M7fHNjcjt8dXAoPzo7fENhcDspKXxEKD86RCg/Ojt8b3RyYWhkOyl8SmN5O3xTY3k7fFpjeTt8YSg/OmdnZXI7fHJyO3xzaHY7KXxjKD86YXJvbjt8eTspfGVsKD86O3x0YTspfGZyO3xpKD86YSg/OmNyaXRpY2FsKD86QWN1dGU7fERvKD86dDt8dWJsZUFjdXRlOyl8R3JhdmU7fFRpbGRlOyl8bW9uZDspfGZmZXJlbnRpYWxEOyl8byg/OnBmO3x0KD86O3xEb3Q7fEVxdWFsOyl8dWJsZSg/OkNvbnRvdXJJbnRlZ3JhbDt8RG8oPzp0O3x3bkFycm93Oyl8TCg/OmVmdCg/OkFycm93O3xSaWdodEFycm93O3xUZWU7KXxvbmcoPzpMZWZ0KD86QXJyb3c7fFJpZ2h0QXJyb3c7KXxSaWdodEFycm93OykpfFJpZ2h0KD86QXJyb3c7fFRlZTspfFVwKD86QXJyb3c7fERvd25BcnJvdzspfFZlcnRpY2FsQmFyOyl8d24oPzpBcnJvdyg/Ojt8QmFyO3xVcEFycm93Oyl8QnJldmU7fExlZnQoPzpSaWdodFZlY3Rvcjt8VGVlVmVjdG9yO3xWZWN0b3IoPzo7fEJhcjspKXxSaWdodCg/OlRlZVZlY3Rvcjt8VmVjdG9yKD86O3xCYXI7KSl8VGVlKD86O3xBcnJvdzspfGFycm93OykpfHMoPzpjcjt8dHJvazspKXxFKD86Tkc7fFRIOz98YWN1dGU7P3xjKD86YXJvbjt8aXJjOz98eTspfGRvdDt8ZnI7fGdyYXZlOz98bGVtZW50O3xtKD86YWNyO3xwdHkoPzpTbWFsbFNxdWFyZTt8VmVyeVNtYWxsU3F1YXJlOykpfG8oPzpnb247fHBmOyl8cHNpbG9uO3xxdSg/OmFsKD86O3xUaWxkZTspfGlsaWJyaXVtOyl8cyg/OmNyO3xpbTspfHRhO3x1bWw7P3x4KD86aXN0czt8cG9uZW50aWFsRTspKXxGKD86Y3k7fGZyO3xpbGxlZCg/OlNtYWxsU3F1YXJlO3xWZXJ5U21hbGxTcXVhcmU7KXxvKD86cGY7fHJBbGw7fHVyaWVydHJmOyl8c2NyOyl8Ryg/OkpjeTt8VDs/fGFtbWEoPzo7fGQ7KXxicmV2ZTt8Yyg/OmVkaWw7fGlyYzt8eTspfGRvdDt8ZnI7fGc7fG9wZjt8cmVhdGVyKD86RXF1YWwoPzo7fExlc3M7KXxGdWxsRXF1YWw7fEdyZWF0ZXI7fExlc3M7fFNsYW50RXF1YWw7fFRpbGRlOyl8c2NyO3x0Oyl8SCg/OkFSRGN5O3xhKD86Y2VrO3x0Oyl8Y2lyYzt8ZnI7fGlsYmVydFNwYWNlO3xvKD86cGY7fHJpem9udGFsTGluZTspfHMoPzpjcjt8dHJvazspfHVtcCg/OkRvd25IdW1wO3xFcXVhbDspKXxJKD86RWN5O3xKbGlnO3xPY3k7fGFjdXRlOz98Yyg/OmlyYzs/fHk7KXxkb3Q7fGZyO3xncmF2ZTs/fG0oPzo7fGEoPzpjcjt8Z2luYXJ5STspfHBsaWVzOyl8big/OnQoPzo7fGUoPzpncmFsO3xyc2VjdGlvbjspKXx2aXNpYmxlKD86Q29tbWE7fFRpbWVzOykpfG8oPzpnb247fHBmO3x0YTspfHNjcjt8dGlsZGU7fHUoPzprY3k7fG1sOz8pKXxKKD86Yyg/OmlyYzt8eTspfGZyO3xvcGY7fHMoPzpjcjt8ZXJjeTspfHVrY3k7KXxLKD86SGN5O3xKY3k7fGFwcGE7fGMoPzplZGlsO3x5Oyl8ZnI7fG9wZjt8c2NyOyl8TCg/OkpjeTt8VDs/fGEoPzpjdXRlO3xtYmRhO3xuZzt8cGxhY2V0cmY7fHJyOyl8Yyg/OmFyb247fGVkaWw7fHk7KXxlKD86ZnQoPzpBKD86bmdsZUJyYWNrZXQ7fHJyb3coPzo7fEJhcjt8UmlnaHRBcnJvdzspKXxDZWlsaW5nO3xEbyg/OnVibGVCcmFja2V0O3x3big/OlRlZVZlY3Rvcjt8VmVjdG9yKD86O3xCYXI7KSkpfEZsb29yO3xSaWdodCg/OkFycm93O3xWZWN0b3I7KXxUKD86ZWUoPzo7fEFycm93O3xWZWN0b3I7KXxyaWFuZ2xlKD86O3xCYXI7fEVxdWFsOykpfFVwKD86RG93blZlY3Rvcjt8VGVlVmVjdG9yO3xWZWN0b3IoPzo7fEJhcjspKXxWZWN0b3IoPzo7fEJhcjspfGFycm93O3xyaWdodGFycm93Oyl8c3MoPzpFcXVhbEdyZWF0ZXI7fEZ1bGxFcXVhbDt8R3JlYXRlcjt8TGVzczt8U2xhbnRFcXVhbDt8VGlsZGU7KSl8ZnI7fGwoPzo7fGVmdGFycm93Oyl8bWlkb3Q7fG8oPzpuZyg/OkxlZnQoPzpBcnJvdzt8UmlnaHRBcnJvdzspfFJpZ2h0QXJyb3c7fGxlZnQoPzphcnJvdzt8cmlnaHRhcnJvdzspfHJpZ2h0YXJyb3c7KXxwZjt8d2VyKD86TGVmdEFycm93O3xSaWdodEFycm93OykpfHMoPzpjcjt8aDt8dHJvazspfHQ7KXxNKD86YXA7fGN5O3xlKD86ZGl1bVNwYWNlO3xsbGludHJmOyl8ZnI7fGludXNQbHVzO3xvcGY7fHNjcjt8dTspfE4oPzpKY3k7fGFjdXRlO3xjKD86YXJvbjt8ZWRpbDt8eTspfGUoPzpnYXRpdmUoPzpNZWRpdW1TcGFjZTt8VGhpKD86Y2tTcGFjZTt8blNwYWNlOyl8VmVyeVRoaW5TcGFjZTspfHN0ZWQoPzpHcmVhdGVyR3JlYXRlcjt8TGVzc0xlc3M7KXx3TGluZTspfGZyO3xvKD86QnJlYWs7fG5CcmVha2luZ1NwYWNlO3xwZjt8dCg/Ojt8Qyg/Om9uZ3J1ZW50O3x1cENhcDspfERvdWJsZVZlcnRpY2FsQmFyO3xFKD86bGVtZW50O3xxdWFsKD86O3xUaWxkZTspfHhpc3RzOyl8R3JlYXRlcig/Ojt8RXF1YWw7fEZ1bGxFcXVhbDt8R3JlYXRlcjt8TGVzczt8U2xhbnRFcXVhbDt8VGlsZGU7KXxIdW1wKD86RG93bkh1bXA7fEVxdWFsOyl8TGUoPzpmdFRyaWFuZ2xlKD86O3xCYXI7fEVxdWFsOyl8c3MoPzo7fEVxdWFsO3xHcmVhdGVyO3xMZXNzO3xTbGFudEVxdWFsO3xUaWxkZTspKXxOZXN0ZWQoPzpHcmVhdGVyR3JlYXRlcjt8TGVzc0xlc3M7KXxQcmVjZWRlcyg/Ojt8RXF1YWw7fFNsYW50RXF1YWw7KXxSKD86ZXZlcnNlRWxlbWVudDt8aWdodFRyaWFuZ2xlKD86O3xCYXI7fEVxdWFsOykpfFMoPzpxdWFyZVN1KD86YnNldCg/Ojt8RXF1YWw7KXxwZXJzZXQoPzo7fEVxdWFsOykpfHUoPzpic2V0KD86O3xFcXVhbDspfGNjZWVkcyg/Ojt8RXF1YWw7fFNsYW50RXF1YWw7fFRpbGRlOyl8cGVyc2V0KD86O3xFcXVhbDspKSl8VGlsZGUoPzo7fEVxdWFsO3xGdWxsRXF1YWw7fFRpbGRlOyl8VmVydGljYWxCYXI7KSl8c2NyO3x0aWxkZTs/fHU7KXxPKD86RWxpZzt8YWN1dGU7P3xjKD86aXJjOz98eTspfGRibGFjO3xmcjt8Z3JhdmU7P3xtKD86YWNyO3xlZ2E7fGljcm9uOyl8b3BmO3xwZW5DdXJseSg/OkRvdWJsZVF1b3RlO3xRdW90ZTspfHI7fHMoPzpjcjt8bGFzaDs/KXx0aSg/OmxkZTs/fG1lczspfHVtbDs/fHZlcig/OkIoPzphcjt8cmFjKD86ZTt8a2V0OykpfFBhcmVudGhlc2lzOykpfFAoPzphcnRpYWxEO3xjeTt8ZnI7fGhpO3xpO3xsdXNNaW51czt8byg/OmluY2FyZXBsYW5lO3xwZjspfHIoPzo7fGVjZWRlcyg/Ojt8RXF1YWw7fFNsYW50RXF1YWw7fFRpbGRlOyl8aW1lO3xvKD86ZHVjdDt8cG9ydGlvbig/Ojt8YWw7KSkpfHMoPzpjcjt8aTspKXxRKD86VU9UOz98ZnI7fG9wZjt8c2NyOyl8Uig/OkJhcnI7fEVHOz98YSg/OmN1dGU7fG5nO3xycig/Ojt8dGw7KSl8Yyg/OmFyb247fGVkaWw7fHk7KXxlKD86O3x2ZXJzZSg/OkUoPzpsZW1lbnQ7fHF1aWxpYnJpdW07KXxVcEVxdWlsaWJyaXVtOykpfGZyO3xobzt8aWdodCg/OkEoPzpuZ2xlQnJhY2tldDt8cnJvdyg/Ojt8QmFyO3xMZWZ0QXJyb3c7KSl8Q2VpbGluZzt8RG8oPzp1YmxlQnJhY2tldDt8d24oPzpUZWVWZWN0b3I7fFZlY3Rvcig/Ojt8QmFyOykpKXxGbG9vcjt8VCg/OmVlKD86O3xBcnJvdzt8VmVjdG9yOyl8cmlhbmdsZSg/Ojt8QmFyO3xFcXVhbDspKXxVcCg/OkRvd25WZWN0b3I7fFRlZVZlY3Rvcjt8VmVjdG9yKD86O3xCYXI7KSl8VmVjdG9yKD86O3xCYXI7KXxhcnJvdzspfG8oPzpwZjt8dW5kSW1wbGllczspfHJpZ2h0YXJyb3c7fHMoPzpjcjt8aDspfHVsZURlbGF5ZWQ7KXxTKD86SCg/OkNIY3k7fGN5Oyl8T0ZUY3k7fGFjdXRlO3xjKD86O3xhcm9uO3xlZGlsO3xpcmM7fHk7KXxmcjt8aG9ydCg/OkRvd25BcnJvdzt8TGVmdEFycm93O3xSaWdodEFycm93O3xVcEFycm93Oyl8aWdtYTt8bWFsbENpcmNsZTt8b3BmO3xxKD86cnQ7fHVhcmUoPzo7fEludGVyc2VjdGlvbjt8U3UoPzpic2V0KD86O3xFcXVhbDspfHBlcnNldCg/Ojt8RXF1YWw7KSl8VW5pb247KSl8c2NyO3x0YXI7fHUoPzpiKD86O3xzZXQoPzo7fEVxdWFsOykpfGMoPzpjZWVkcyg/Ojt8RXF1YWw7fFNsYW50RXF1YWw7fFRpbGRlOyl8aFRoYXQ7KXxtO3xwKD86O3xlcnNldCg/Ojt8RXF1YWw7KXxzZXQ7KSkpfFQoPzpIT1JOOz98UkFERTt8Uyg/OkhjeTt8Y3k7KXxhKD86Yjt8dTspfGMoPzphcm9uO3xlZGlsO3x5Oyl8ZnI7fGgoPzplKD86cmVmb3JlO3x0YTspfGkoPzpja1NwYWNlO3xuU3BhY2U7KSl8aWxkZSg/Ojt8RXF1YWw7fEZ1bGxFcXVhbDt8VGlsZGU7KXxvcGY7fHJpcGxlRG90O3xzKD86Y3I7fHRyb2s7KSl8VSg/OmEoPzpjdXRlOz98cnIoPzo7fG9jaXI7KSl8YnIoPzpjeTt8ZXZlOyl8Yyg/OmlyYzs/fHk7KXxkYmxhYzt8ZnI7fGdyYXZlOz98bWFjcjt8big/OmRlcig/OkIoPzphcjt8cmFjKD86ZTt8a2V0OykpfFBhcmVudGhlc2lzOyl8aW9uKD86O3xQbHVzOykpfG8oPzpnb247fHBmOyl8cCg/OkFycm93KD86O3xCYXI7fERvd25BcnJvdzspfERvd25BcnJvdzt8RXF1aWxpYnJpdW07fFRlZSg/Ojt8QXJyb3c7KXxhcnJvdzt8ZG93bmFycm93O3xwZXIoPzpMZWZ0QXJyb3c7fFJpZ2h0QXJyb3c7KXxzaSg/Ojt8bG9uOykpfHJpbmc7fHNjcjt8dGlsZGU7fHVtbDs/KXxWKD86RGFzaDt8YmFyO3xjeTt8ZGFzaCg/Ojt8bDspfGUoPzplO3xyKD86YmFyO3x0KD86O3xpY2FsKD86QmFyO3xMaW5lO3xTZXBhcmF0b3I7fFRpbGRlOykpfHlUaGluU3BhY2U7KSl8ZnI7fG9wZjt8c2NyO3x2ZGFzaDspfFcoPzpjaXJjO3xlZGdlO3xmcjt8b3BmO3xzY3I7KXxYKD86ZnI7fGk7fG9wZjt8c2NyOyl8WSg/OkFjeTt8SWN5O3xVY3k7fGFjdXRlOz98Yyg/OmlyYzt8eTspfGZyO3xvcGY7fHNjcjt8dW1sOyl8Wig/OkhjeTt8YWN1dGU7fGMoPzphcm9uO3x5Oyl8ZG90O3xlKD86cm9XaWR0aFNwYWNlO3x0YTspfGZyO3xvcGY7fHNjcjspfGEoPzphY3V0ZTs/fGJyZXZlO3xjKD86O3xFO3xkO3xpcmM7P3x1dGU7P3x5Oyl8ZWxpZzs/fGYoPzo7fHI7KXxncmF2ZTs/fGwoPzplKD86ZnN5bTt8cGg7KXxwaGE7KXxtKD86YSg/OmNyO3xsZzspfHA7Pyl8big/OmQoPzo7fGFuZDt8ZDt8c2xvcGU7fHY7KXxnKD86O3xlO3xsZTt8bXNkKD86O3xhKD86YTt8Yjt8Yzt8ZDt8ZTt8Zjt8Zzt8aDspKXxydCg/Ojt8dmIoPzo7fGQ7KSl8cyg/OnBoO3x0Oyl8emFycjspKXxvKD86Z29uO3xwZjspfHAoPzo7fEU7fGFjaXI7fGU7fGlkO3xvczt8cHJveCg/Ojt8ZXE7KSl8cmluZzs/fHMoPzpjcjt8dDt8eW1wKD86O3xlcTspKXx0aWxkZTs/fHVtbDs/fHcoPzpjb25pbnQ7fGludDspKXxiKD86Tm90O3xhKD86Y2soPzpjb25nO3xlcHNpbG9uO3xwcmltZTt8c2ltKD86O3xlcTspKXxyKD86dmVlO3x3ZWQoPzo7fGdlOykpKXxicmsoPzo7fHRicms7KXxjKD86b25nO3x5Oyl8ZHF1bzt8ZSg/OmNhdXMoPzo7fGU7KXxtcHR5djt8cHNpO3xybm91O3x0KD86YTt8aDt8d2VlbjspKXxmcjt8aWcoPzpjKD86YXA7fGlyYzt8dXA7KXxvKD86ZG90O3xwbHVzO3x0aW1lczspfHMoPzpxY3VwO3x0YXI7KXx0cmlhbmdsZSg/OmRvd247fHVwOyl8dXBsdXM7fHZlZTt8d2VkZ2U7KXxrYXJvdzt8bCg/OmEoPzpjayg/OmxvemVuZ2U7fHNxdWFyZTt8dHJpYW5nbGUoPzo7fGRvd247fGxlZnQ7fHJpZ2h0OykpfG5rOyl8ayg/OjEoPzoyO3w0Oyl8MzQ7KXxvY2s7KXxuKD86ZSg/Ojt8cXVpdjspfG90Oyl8byg/OnBmO3x0KD86O3x0b207KXx3dGllO3x4KD86RCg/Okw7fFI7fGw7fHI7KXxIKD86O3xEO3xVO3xkO3x1Oyl8VSg/Okw7fFI7fGw7fHI7KXxWKD86O3xIO3xMO3xSO3xoO3xsO3xyOyl8Ym94O3xkKD86TDt8Ujt8bDt8cjspfGgoPzo7fEQ7fFU7fGQ7fHU7KXxtaW51czt8cGx1czt8dGltZXM7fHUoPzpMO3xSO3xsO3xyOyl8dig/Ojt8SDt8TDt8Ujt8aDt8bDt8cjspKSl8cHJpbWU7fHIoPzpldmU7fHZiYXI7Pyl8cyg/OmNyO3xlbWk7fGltKD86O3xlOyl8b2woPzo7fGI7fGhzdWI7KSl8dSg/OmxsKD86O3xldDspfG1wKD86O3xFO3xlKD86O3xxOykpKSl8Yyg/OmEoPzpjdXRlO3xwKD86O3xhbmQ7fGJyY3VwO3xjKD86YXA7fHVwOyl8ZG90O3xzOyl8cig/OmV0O3xvbjspKXxjKD86YSg/OnBzO3xyb247KXxlZGlsOz98aXJjO3x1cHMoPzo7fHNtOykpfGRvdDt8ZSg/OmRpbDs/fG1wdHl2O3xudCg/Ojt8ZXJkb3Q7fCkpfGZyO3xoKD86Y3k7fGVjayg/Ojt8bWFyazspfGk7KXxpcig/Ojt8RTt8Yyg/Ojt8ZXE7fGxlKD86YXJyb3coPzpsZWZ0O3xyaWdodDspfGQoPzpSO3xTO3xhc3Q7fGNpcmM7fGRhc2g7KSkpfGU7fGZuaW50O3xtaWQ7fHNjaXI7KXxsdWJzKD86O3x1aXQ7KXxvKD86bG9uKD86O3xlKD86O3xxOykpfG0oPzptYSg/Ojt8dDspfHAoPzo7fGZuO3xsZSg/Om1lbnQ7fHhlczspKSl8big/OmcoPzo7fGRvdDspfGludDspfHAoPzpmO3xyb2Q7fHkoPzo7fHNyO3wpKSl8cig/OmFycjt8b3NzOyl8cyg/OmNyO3x1KD86Yig/Ojt8ZTspfHAoPzo7fGU7KSkpfHRkb3Q7fHUoPzpkYXJyKD86bDt8cjspfGUoPzpwcjt8c2M7KXxsYXJyKD86O3xwOyl8cCg/Ojt8YnJjYXA7fGMoPzphcDt8dXA7KXxkb3Q7fG9yO3xzOyl8cig/OmFycig/Ojt8bTspfGx5KD86ZXEoPzpwcmVjO3xzdWNjOyl8dmVlO3x3ZWRnZTspfHJlbjs/fHZlYXJyb3coPzpsZWZ0O3xyaWdodDspKXx2ZWU7fHdlZDspfHcoPzpjb25pbnQ7fGludDspfHlsY3R5Oyl8ZCg/OkFycjt8SGFyO3xhKD86Z2dlcjt8bGV0aDt8cnI7fHNoKD86O3x2OykpfGIoPzprYXJvdzt8bGFjOyl8Yyg/OmFyb247fHk7KXxkKD86O3xhKD86Z2dlcjt8cnI7KXxvdHNlcTspfGUoPzpnOz98bHRhO3xtcHR5djspfGYoPzppc2h0O3xyOyl8aGFyKD86bDt8cjspfGkoPzphbSg/Ojt8b25kKD86O3xzdWl0Oyl8czspfGU7fGdhbW1hO3xzaW47fHYoPzo7fGlkZSg/Ojt8b250aW1lczt8KXxvbng7KSl8amN5O3xsYyg/Om9ybjt8cm9wOyl8byg/OmxsYXI7fHBmO3x0KD86O3xlcSg/Ojt8ZG90Oyl8bWludXM7fHBsdXM7fHNxdWFyZTspfHVibGViYXJ3ZWRnZTt8d24oPzphcnJvdzt8ZG93bmFycm93czt8aGFycG9vbig/OmxlZnQ7fHJpZ2h0OykpKXxyKD86Ymthcm93O3xjKD86b3JuO3xyb3A7KSl8cyg/OmMoPzpyO3x5Oyl8b2w7fHRyb2s7KXx0KD86ZG90O3xyaSg/Ojt8ZjspKXx1KD86YXJyO3xoYXI7KXx3YW5nbGU7fHooPzpjeTt8aWdyYXJyOykpfGUoPzpEKD86RG90O3xvdDspfGEoPzpjdXRlOz98c3RlcjspfGMoPzphcm9uO3xpcig/Ojt8Yzs/KXxvbG9uO3x5Oyl8ZG90O3xlO3xmKD86RG90O3xyOyl8Zyg/Ojt8cmF2ZTs/fHMoPzo7fGRvdDspKXxsKD86O3xpbnRlcnM7fGw7fHMoPzo7fGRvdDspKXxtKD86YWNyO3xwdHkoPzo7fHNldDt8djspfHNwKD86MSg/OjM7fDQ7KXw7KSl8big/Omc7fHNwOyl8byg/Omdvbjt8cGY7KXxwKD86YXIoPzo7fHNsOyl8bHVzO3xzaSg/Ojt8bG9uO3x2OykpfHEoPzpjKD86aXJjO3xvbG9uOyl8cyg/OmltO3xsYW50KD86Z3RyO3xsZXNzOykpfHUoPzphbHM7fGVzdDt8aXYoPzo7fEREOykpfHZwYXJzbDspfHIoPzpEb3Q7fGFycjspfHMoPzpjcjt8ZG90O3xpbTspfHQoPzphO3xoOz8pfHUoPzptbDs/fHJvOyl8eCg/OmNsO3xpc3Q7fHAoPzplY3RhdGlvbjt8b25lbnRpYWxlOykpKXxmKD86YWxsaW5nZG90c2VxO3xjeTt8ZW1hbGU7fGYoPzppbGlnO3xsKD86aWc7fGxpZzspfHI7KXxpbGlnO3xqbGlnO3xsKD86YXQ7fGxpZzt8dG5zOyl8bm9mO3xvKD86cGY7fHIoPzphbGw7fGsoPzo7fHY7KSkpfHBhcnRpbnQ7fHIoPzphKD86Yyg/OjEoPzoyOz98Mzt8NDs/fDU7fDY7fDg7KXwyKD86Mzt8NTspfDMoPzo0Oz98NTt8ODspfDQ1O3w1KD86Njt8ODspfDc4Oyl8c2w7KXxvd247KXxzY3I7KXxnKD86RSg/Ojt8bDspfGEoPzpjdXRlO3xtbWEoPzo7fGQ7KXxwOyl8YnJldmU7fGMoPzppcmM7fHk7KXxkb3Q7fGUoPzo7fGw7fHEoPzo7fHE7fHNsYW50Oyl8cyg/Ojt8Y2M7fGRvdCg/Ojt8byg/Ojt8bDspKXxsKD86O3xlczspKSl8ZnI7fGcoPzo7fGc7KXxpbWVsO3xqY3k7fGwoPzo7fEU7fGE7fGo7KXxuKD86RTt8YXAoPzo7fHByb3g7KXxlKD86O3xxKD86O3xxOykpfHNpbTspfG9wZjt8cmF2ZTt8cyg/OmNyO3xpbSg/Ojt8ZTt8bDspKXx0KD86O3xjKD86Yzt8aXI7KXxkb3Q7fGxQYXI7fHF1ZXN0O3xyKD86YSg/OnBwcm94O3xycjspfGRvdDt8ZXEoPzpsZXNzO3xxbGVzczspfGxlc3M7fHNpbTspfCl8dig/OmVydG5lcXE7fG5FOykpfGgoPzpBcnI7fGEoPzppcnNwO3xsZjt8bWlsdDt8cig/OmRjeTt8cig/Ojt8Y2lyO3x3OykpKXxiYXI7fGNpcmM7fGUoPzphcnRzKD86O3x1aXQ7KXxsbGlwO3xyY29uOyl8ZnI7fGtzKD86ZWFyb3c7fHdhcm93Oyl8byg/OmFycjt8bXRodDt8b2soPzpsZWZ0YXJyb3c7fHJpZ2h0YXJyb3c7KXxwZjt8cmJhcjspfHMoPzpjcjt8bGFzaDt8dHJvazspfHkoPzpidWxsO3xwaGVuOykpfGkoPzphY3V0ZTs/fGMoPzo7fGlyYzs/fHk7KXxlKD86Y3k7fHhjbDs/KXxmKD86Zjt8cjspfGdyYXZlOz98aSg/Ojt8aSg/OmludDt8bnQ7KXxuZmluO3xvdGE7KXxqbGlnO3xtKD86YSg/OmNyO3xnKD86ZTt8bGluZTt8cGFydDspfHRoOyl8b2Y7fHBlZDspfG4oPzo7fGNhcmU7fGZpbig/Ojt8dGllOyl8b2RvdDt8dCg/Ojt8Y2FsO3xlKD86Z2Vyczt8cmNhbDspfGxhcmhrO3xwcm9kOykpfG8oPzpjeTt8Z29uO3xwZjt8dGE7KXxwcm9kO3xxdWVzdDs/fHMoPzpjcjt8aW4oPzo7fEU7fGRvdDt8cyg/Ojt8djspfHY7KSl8dCg/Ojt8aWxkZTspfHUoPzprY3k7fG1sOz8pKXxqKD86Yyg/OmlyYzt8eTspfGZyO3xtYXRoO3xvcGY7fHMoPzpjcjt8ZXJjeTspfHVrY3k7KXxrKD86YXBwYSg/Ojt8djspfGMoPzplZGlsO3x5Oyl8ZnI7fGdyZWVuO3xoY3k7fGpjeTt8b3BmO3xzY3I7KXxsKD86QSg/OmFycjt8cnI7fHRhaWw7KXxCYXJyO3xFKD86O3xnOyl8SGFyO3xhKD86Y3V0ZTt8ZW1wdHl2O3xncmFuO3xtYmRhO3xuZyg/Ojt8ZDt8bGU7KXxwO3xxdW87P3xycig/Ojt8Yig/Ojt8ZnM7KXxmczt8aGs7fGxwO3xwbDt8c2ltO3x0bDspfHQoPzo7fGFpbDt8ZSg/Ojt8czspKSl8Yig/OmFycjt8YnJrO3xyKD86YWMoPzplO3xrOyl8ayg/OmU7fHNsKD86ZDt8dTspKSkpfGMoPzphcm9uO3xlKD86ZGlsO3xpbDspfHViO3x5Oyl8ZCg/OmNhO3xxdW8oPzo7fHI7KXxyKD86ZGhhcjt8dXNoYXI7KXxzaDspfGUoPzo7fGZ0KD86YXJyb3coPzo7fHRhaWw7KXxoYXJwb29uKD86ZG93bjt8dXA7KXxsZWZ0YXJyb3dzO3xyaWdodCg/OmFycm93KD86O3xzOyl8aGFycG9vbnM7fHNxdWlnYXJyb3c7KXx0aHJlZXRpbWVzOyl8Zzt8cSg/Ojt8cTt8c2xhbnQ7KXxzKD86O3xjYzt8ZG90KD86O3xvKD86O3xyOykpfGcoPzo7fGVzOyl8cyg/OmFwcHJveDt8ZG90O3xlcSg/Omd0cjt8cWd0cjspfGd0cjt8c2ltOykpKXxmKD86aXNodDt8bG9vcjt8cjspfGcoPzo7fEU7KXxoKD86YXIoPzpkO3x1KD86O3xsOykpfGJsazspfGpjeTt8bCg/Ojt8YXJyO3xjb3JuZXI7fGhhcmQ7fHRyaTspfG0oPzppZG90O3xvdXN0KD86O3xhY2hlOykpfG4oPzpFO3xhcCg/Ojt8cHJveDspfGUoPzo7fHEoPzo7fHE7KSl8c2ltOyl8byg/OmEoPzpuZzt8cnI7KXxicms7fG5nKD86bGVmdCg/OmFycm93O3xyaWdodGFycm93Oyl8bWFwc3RvO3xyaWdodGFycm93Oyl8b3BhcnJvdyg/OmxlZnQ7fHJpZ2h0Oyl8cCg/OmFyO3xmO3xsdXM7KXx0aW1lczt8dyg/OmFzdDt8YmFyOyl8eig/Ojt8ZW5nZTt8ZjspKXxwYXIoPzo7fGx0Oyl8cig/OmFycjt8Y29ybmVyO3xoYXIoPzo7fGQ7KXxtO3x0cmk7KXxzKD86YXF1bzt8Y3I7fGg7fGltKD86O3xlO3xnOyl8cSg/OmI7fHVvKD86O3xyOykpfHRyb2s7KXx0KD86O3xjKD86Yzt8aXI7KXxkb3Q7fGhyZWU7fGltZXM7fGxhcnI7fHF1ZXN0O3xyKD86UGFyO3xpKD86O3xlO3xmOykpfCl8dXIoPzpkc2hhcjt8dWhhcjspfHYoPzplcnRuZXFxO3xuRTspKXxtKD86RERvdDt8YSg/OmNyOz98bCg/OmU7fHQoPzo7fGVzZTspKXxwKD86O3xzdG8oPzo7fGRvd247fGxlZnQ7fHVwOykpfHJrZXI7KXxjKD86b21tYTt8eTspfGRhc2g7fGVhc3VyZWRhbmdsZTt8ZnI7fGhvO3xpKD86Y3JvOz98ZCg/Ojt8YXN0O3xjaXI7fGRvdDs/KXxudXMoPzo7fGI7fGQoPzo7fHU7KSkpfGwoPzpjcDt8ZHI7KXxucGx1czt8byg/OmRlbHM7fHBmOyl8cDt8cyg/OmNyO3x0cG9zOyl8dSg/Ojt8bHRpbWFwO3xtYXA7KSl8big/OkcoPzpnO3x0KD86O3x2OykpfEwoPzplZnQoPzphcnJvdzt8cmlnaHRhcnJvdzspfGw7fHQoPzo7fHY7KSl8UmlnaHRhcnJvdzt8Vig/OkRhc2g7fGRhc2g7KXxhKD86YmxhO3xjdXRlO3xuZzt8cCg/Ojt8RTt8aWQ7fG9zO3xwcm94Oyl8dHVyKD86O3xhbCg/Ojt8czspKSl8Yig/OnNwOz98dW1wKD86O3xlOykpfGMoPzphKD86cDt8cm9uOyl8ZWRpbDt8b25nKD86O3xkb3Q7KXx1cDt8eTspfGRhc2g7fGUoPzo7fEFycjt8YXIoPzpoazt8cig/Ojt8b3c7KSl8ZG90O3xxdWl2O3xzKD86ZWFyO3xpbTspfHhpc3QoPzo7fHM7KSl8ZnI7fGcoPzpFO3xlKD86O3xxKD86O3xxO3xzbGFudDspfHM7KXxzaW07fHQoPzo7fHI7KSl8aCg/OkFycjt8YXJyO3xwYXI7KXxpKD86O3xzKD86O3xkOyl8djspfGpjeTt8bCg/OkFycjt8RTt8YXJyO3xkcjt8ZSg/Ojt8ZnQoPzphcnJvdzt8cmlnaHRhcnJvdzspfHEoPzo7fHE7fHNsYW50Oyl8cyg/Ojt8czspKXxzaW07fHQoPzo7fHJpKD86O3xlOykpKXxtaWQ7fG8oPzpwZjt8dCg/Ojt8aW4oPzo7fEU7fGRvdDt8dig/OmE7fGI7fGM7KSl8bmkoPzo7fHYoPzphO3xiO3xjOykpfCkpfHAoPzphcig/Ojt8YWxsZWw7fHNsO3x0Oyl8b2xpbnQ7fHIoPzo7fGN1ZTt8ZSg/Ojt8Yyg/Ojt8ZXE7KSkpKXxyKD86QXJyO3xhcnIoPzo7fGM7fHc7KXxpZ2h0YXJyb3c7fHRyaSg/Ojt8ZTspKXxzKD86Yyg/Ojt8Y3VlO3xlO3xyOyl8aG9ydCg/Om1pZDt8cGFyYWxsZWw7KXxpbSg/Ojt8ZSg/Ojt8cTspKXxtaWQ7fHBhcjt8cXN1KD86YmU7fHBlOyl8dSg/OmIoPzo7fEU7fGU7fHNldCg/Ojt8ZXEoPzo7fHE7KSkpfGNjKD86O3xlcTspfHAoPzo7fEU7fGU7fHNldCg/Ojt8ZXEoPzo7fHE7KSkpKSl8dCg/OmdsO3xpbGRlOz98bGc7fHJpYW5nbGUoPzpsZWZ0KD86O3xlcTspfHJpZ2h0KD86O3xlcTspKSl8dSg/Ojt8bSg/Ojt8ZXJvO3xzcDspKXx2KD86RGFzaDt8SGFycjt8YXA7fGRhc2g7fGcoPzplO3x0Oyl8aW5maW47fGwoPzpBcnI7fGU7fHQoPzo7fHJpZTspKXxyKD86QXJyO3x0cmllOyl8c2ltOyl8dyg/OkFycjt8YXIoPzpoazt8cig/Ojt8b3c7KSl8bmVhcjspKXxvKD86Uzt8YSg/OmN1dGU7P3xzdDspfGMoPzppcig/Ojt8Yzs/KXx5Oyl8ZCg/OmFzaDt8YmxhYzt8aXY7fG90O3xzb2xkOyl8ZWxpZzt8Zig/OmNpcjt8cjspfGcoPzpvbjt8cmF2ZTs/fHQ7KXxoKD86YmFyO3xtOyl8aW50O3xsKD86YXJyO3xjKD86aXI7fHJvc3M7KXxpbmU7fHQ7KXxtKD86YWNyO3xlZ2E7fGkoPzpjcm9uO3xkO3xudXM7KSl8b3BmO3xwKD86YXI7fGVycDt8bHVzOyl8cig/Ojt8YXJyO3xkKD86O3xlcig/Ojt8b2Y7KXxmOz98bTs/KXxpZ29mO3xvcjt8c2xvcGU7fHY7KXxzKD86Y3I7fGxhc2g7P3xvbDspfHRpKD86bGRlOz98bWVzKD86O3xhczspKXx1bWw7P3x2YmFyOyl8cCg/OmFyKD86O3xhKD86O3xsbGVsO3wpfHMoPzppbTt8bDspfHQ7KXxjeTt8ZXIoPzpjbnQ7fGlvZDt8bWlsO3xwO3x0ZW5rOyl8ZnI7fGgoPzppKD86O3x2Oyl8bW1hdDt8b25lOyl8aSg/Ojt8dGNoZm9yazt8djspfGwoPzphbig/OmNrKD86O3xoOyl8a3Y7KXx1cyg/Ojt8YWNpcjt8Yjt8Y2lyO3xkKD86bzt8dTspfGU7fG1uOz98c2ltO3x0d287KSl8bTt8byg/OmludGludDt8cGY7fHVuZDs/KXxyKD86O3xFO3xhcDt8Y3VlO3xlKD86O3xjKD86O3xhcHByb3g7fGN1cmx5ZXE7fGVxO3xuKD86YXBwcm94O3xlcXE7fHNpbTspfHNpbTspKXxpbWUoPzo7fHM7KXxuKD86RTt8YXA7fHNpbTspfG8oPzpkO3xmKD86YWxhcjt8bGluZTt8c3VyZjspfHAoPzo7fHRvOykpfHNpbTt8dXJlbDspfHMoPzpjcjt8aTspfHVuY3NwOyl8cSg/OmZyO3xpbnQ7fG9wZjt8cHJpbWU7fHNjcjt8dSg/OmF0KD86ZXJuaW9uczt8aW50Oyl8ZXN0KD86O3xlcTspfG90Oz8pKXxyKD86QSg/OmFycjt8cnI7fHRhaWw7KXxCYXJyO3xIYXI7fGEoPzpjKD86ZTt8dXRlOyl8ZGljO3xlbXB0eXY7fG5nKD86O3xkO3xlO3xsZTspfHF1bzs/fHJyKD86O3xhcDt8Yig/Ojt8ZnM7KXxjO3xmczt8aGs7fGxwO3xwbDt8c2ltO3x0bDt8dzspfHQoPzphaWw7fGlvKD86O3xuYWxzOykpKXxiKD86YXJyO3xicms7fHIoPzphYyg/OmU7fGs7KXxrKD86ZTt8c2woPzpkO3x1OykpKSl8Yyg/OmFyb247fGUoPzpkaWw7fGlsOyl8dWI7fHk7KXxkKD86Y2E7fGxkaGFyO3xxdW8oPzo7fHI7KXxzaDspfGUoPzphbCg/Ojt8aW5lO3xwYXJ0O3xzOyl8Y3Q7fGc7Pyl8Zig/OmlzaHQ7fGxvb3I7fHI7KXxoKD86YXIoPzpkO3x1KD86O3xsOykpfG8oPzo7fHY7KSl8aSg/OmdodCg/OmFycm93KD86O3x0YWlsOyl8aGFycG9vbig/OmRvd247fHVwOyl8bGVmdCg/OmFycm93czt8aGFycG9vbnM7KXxyaWdodGFycm93czt8c3F1aWdhcnJvdzt8dGhyZWV0aW1lczspfG5nO3xzaW5nZG90c2VxOyl8bCg/OmFycjt8aGFyO3xtOyl8bW91c3QoPzo7fGFjaGU7KXxubWlkO3xvKD86YSg/Om5nO3xycjspfGJyazt8cCg/OmFyO3xmO3xsdXM7KXx0aW1lczspfHAoPzphcig/Ojt8Z3Q7KXxwb2xpbnQ7KXxyYXJyO3xzKD86YXF1bzt8Y3I7fGg7fHEoPzpiO3x1byg/Ojt8cjspKSl8dCg/OmhyZWU7fGltZXM7fHJpKD86O3xlO3xmO3xsdHJpOykpfHVsdWhhcjt8eDspfHMoPzphY3V0ZTt8YnF1bzt8Yyg/Ojt8RTt8YSg/OnA7fHJvbjspfGN1ZTt8ZSg/Ojt8ZGlsOyl8aXJjO3xuKD86RTt8YXA7fHNpbTspfHBvbGludDt8c2ltO3x5Oyl8ZG90KD86O3xiO3xlOyl8ZSg/OkFycjt8YXIoPzpoazt8cig/Ojt8b3c7KSl8Y3Q7P3xtaTt8c3dhcjt8dG0oPzppbnVzO3xuOyl8eHQ7KXxmcig/Ojt8b3duOyl8aCg/OmFycDt8Yyg/OmhjeTt8eTspfG9ydCg/Om1pZDt8cGFyYWxsZWw7KXx5Oz8pfGkoPzpnbWEoPzo7fGY7fHY7KXxtKD86O3xkb3Q7fGUoPzo7fHE7KXxnKD86O3xFOyl8bCg/Ojt8RTspfG5lO3xwbHVzO3xyYXJyOykpfGxhcnI7fG0oPzphKD86bGxzZXRtaW51czt8c2hwOyl8ZXBhcnNsO3xpKD86ZDt8bGU7KXx0KD86O3xlKD86O3xzOykpKXxvKD86ZnRjeTt8bCg/Ojt8Yig/Ojt8YXI7KSl8cGY7KXxwYSg/OmRlcyg/Ojt8dWl0Oyl8cjspfHEoPzpjKD86YXAoPzo7fHM7KXx1cCg/Ojt8czspKXxzdSg/OmIoPzo7fGU7fHNldCg/Ojt8ZXE7KSl8cCg/Ojt8ZTt8c2V0KD86O3xlcTspKSl8dSg/Ojt8YXIoPzplO3xmOyl8ZjspKXxyYXJyO3xzKD86Y3I7fGV0bW47fG1pbGU7fHRhcmY7KXx0KD86YXIoPzo7fGY7KXxyKD86YWlnaHQoPzplcHNpbG9uO3xwaGk7KXxuczspKXx1KD86Yig/Ojt8RTt8ZG90O3xlKD86O3xkb3Q7KXxtdWx0O3xuKD86RTt8ZTspfHBsdXM7fHJhcnI7fHMoPzpldCg/Ojt8ZXEoPzo7fHE7KXxuZXEoPzo7fHE7KSl8aW07fHUoPzpiO3xwOykpKXxjYyg/Ojt8YXBwcm94O3xjdXJseWVxO3xlcTt8big/OmFwcHJveDt8ZXFxO3xzaW07KXxzaW07KXxtO3xuZzt8cCg/OjE7P3wyOz98Mzs/fDt8RTt8ZCg/Om90O3xzdWI7KXxlKD86O3xkb3Q7KXxocyg/Om9sO3x1YjspfGxhcnI7fG11bHQ7fG4oPzpFO3xlOyl8cGx1czt8cyg/OmV0KD86O3xlcSg/Ojt8cTspfG5lcSg/Ojt8cTspKXxpbTt8dSg/OmI7fHA7KSkpKXx3KD86QXJyO3xhcig/OmhrO3xyKD86O3xvdzspKXxud2FyOyl8emxpZzs/KXx0KD86YSg/OnJnZXQ7fHU7KXxicms7fGMoPzphcm9uO3xlZGlsO3x5Oyl8ZG90O3xlbHJlYzt8ZnI7fGgoPzplKD86cmUoPzo0O3xmb3JlOyl8dGEoPzo7fHN5bTt8djspKXxpKD86Y2soPzphcHByb3g7fHNpbTspfG5zcDspfGsoPzphcDt8c2ltOyl8b3JuOz8pfGkoPzpsZGU7fG1lcyg/Ojt8Yig/Ojt8YXI7KXxkO3wpfG50Oyl8byg/OmVhO3xwKD86O3xib3Q7fGNpcjt8Zig/Ojt8b3JrOykpfHNhOyl8cHJpbWU7fHIoPzphZGU7fGkoPzphbmdsZSg/Ojt8ZG93bjt8bGVmdCg/Ojt8ZXE7KXxxO3xyaWdodCg/Ojt8ZXE7KSl8ZG90O3xlO3xtaW51czt8cGx1czt8c2I7fHRpbWU7KXxwZXppdW07KXxzKD86Yyg/OnI7fHk7KXxoY3k7fHRyb2s7KXx3KD86aXh0O3xvaGVhZCg/OmxlZnRhcnJvdzt8cmlnaHRhcnJvdzspKSl8dSg/OkFycjt8SGFyO3xhKD86Y3V0ZTs/fHJyOyl8YnIoPzpjeTt8ZXZlOyl8Yyg/OmlyYzs/fHk7KXxkKD86YXJyO3xibGFjO3xoYXI7KXxmKD86aXNodDt8cjspfGdyYXZlOz98aCg/OmFyKD86bDt8cjspfGJsazspfGwoPzpjKD86b3JuKD86O3xlcjspfHJvcDspfHRyaTspfG0oPzphY3I7fGw7Pyl8byg/Omdvbjt8cGY7KXxwKD86YXJyb3c7fGRvd25hcnJvdzt8aGFycG9vbig/OmxlZnQ7fHJpZ2h0Oyl8bHVzO3xzaSg/Ojt8aDt8bG9uOyl8dXBhcnJvd3M7KXxyKD86Yyg/Om9ybig/Ojt8ZXI7KXxyb3A7KXxpbmc7fHRyaTspfHNjcjt8dCg/OmRvdDt8aWxkZTt8cmkoPzo7fGY7KSl8dSg/OmFycjt8bWw7Pyl8d2FuZ2xlOyl8dig/OkFycjt8QmFyKD86O3x2Oyl8RGFzaDt8YSg/Om5ncnQ7fHIoPzplcHNpbG9uO3xrYXBwYTt8bm90aGluZzt8cCg/OmhpO3xpO3xyb3B0bzspfHIoPzo7fGhvOyl8cyg/OmlnbWE7fHUoPzpic2V0bmVxKD86O3xxOyl8cHNldG5lcSg/Ojt8cTspKSl8dCg/OmhldGE7fHJpYW5nbGUoPzpsZWZ0O3xyaWdodDspKSkpfGN5O3xkYXNoO3xlKD86ZSg/Ojt8YmFyO3xlcTspfGxsaXA7fHIoPzpiYXI7fHQ7KSl8ZnI7fGx0cmk7fG5zdSg/OmI7fHA7KXxvcGY7fHByb3A7fHJ0cmk7fHMoPzpjcjt8dSg/OmJuKD86RTt8ZTspfHBuKD86RTt8ZTspKSl8emlnemFnOyl8dyg/OmNpcmM7fGUoPzpkKD86YmFyO3xnZSg/Ojt8cTspKXxpZXJwOyl8ZnI7fG9wZjt8cDt8cig/Ojt8ZWF0aDspfHNjcjspfHgoPzpjKD86YXA7fGlyYzt8dXA7KXxkdHJpO3xmcjt8aCg/OkFycjt8YXJyOyl8aTt8bCg/OkFycjt8YXJyOyl8bWFwO3xuaXM7fG8oPzpkb3Q7fHAoPzpmO3xsdXM7KXx0aW1lOyl8cig/OkFycjt8YXJyOyl8cyg/OmNyO3xxY3VwOyl8dSg/OnBsdXM7fHRyaTspfHZlZTt8d2VkZ2U7KXx5KD86YWMoPzp1dGU7P3x5Oyl8Yyg/OmlyYzt8eTspfGVuOz98ZnI7fGljeTt8b3BmO3xzY3I7fHUoPzpjeTt8bWw7PykpfHooPzphY3V0ZTt8Yyg/OmFyb247fHk7KXxkb3Q7fGUoPzpldHJmO3x0YTspfGZyO3xoY3k7fGlncmFycjt8b3BmO3xzY3I7fHcoPzpqO3xuajspKSl8W1xcc1xcU10vZztcblxudmFyIE5BTUVEQ0hBUlJFRl9NQVhMRU4gPSAzMjtcblxuLy8gUmVndWxhciBleHByZXNzaW9uIGNvbnN0YW50cyB1c2VkIGJ5IHRoZSB0b2tlbml6ZXIgYW5kIHBhcnNlclxuXG4vLyBOb3RlIHRoYXQgXFxyIGlzIGluY2x1ZGVkIGluIGFsbCBvZiB0aGVzZSByZWdleHBzIGJlY2F1c2UgaXQgd2lsbCBuZWVkXG4vLyB0byBiZSBjb252ZXJ0ZWQgdG8gTEYgYnkgdGhlIHNjYW5DaGFycygpIGZ1bmN0aW9uLlxudmFyIERCTFFVT1RFQVRUUlZBTCA9IC9bXlxcclwiJlxcdTAwMDBdKy9nO1xudmFyIFNJTkdMRVFVT1RFQVRUUlZBTCA9IC9bXlxccicmXFx1MDAwMF0rL2c7XG52YXIgVU5RVU9URURBVFRSVkFMID0gL1teXFxyXFx0XFxuXFxmICY+XFx1MDAwMF0rL2c7XG52YXIgVEFHTkFNRSA9IC9bXlxcclxcdFxcblxcZiBcXC8+QS1aXFx1MDAwMF0rL2c7XG52YXIgQVRUUk5BTUUgPSAvW15cXHJcXHRcXG5cXGYgXFwvPT5BLVpcXHUwMDAwXSsvZztcblxudmFyIENEQVRBVEVYVCA9IC9bXlxcXVxcclxcdTAwMDBcXHVmZmZmXSovZztcbnZhciBEQVRBVEVYVCA9IC9bXiY8XFxyXFx1MDAwMFxcdWZmZmZdKi9nO1xudmFyIFJBV1RFWFQgPSAvW148XFxyXFx1MDAwMFxcdWZmZmZdKi9nO1xudmFyIFBMQUlOVEVYVCA9IC9bXlxcclxcdTAwMDBcXHVmZmZmXSovZztcbi8vIFNpbmNlIHdlIGRvbid0IGhhdmUgdGhlICdzdGlja3kgdGFnJywgYWRkICd8LicgdG8gdGhlIGVuZCBvZiBTSU1QTEVUQUdcbi8vIGFuZCBTSU1QTEVBVFRSIHNvIHRoYXQgd2UgYXJlIGd1YXJhbnRlZWQgdG8gYWx3YXlzIG1hdGNoLiAgVGhpcyBwcmV2ZW50c1xuLy8gdXMgZnJvbSBzY2FubmluZyBwYXN0IHRoZSBsYXN0SW5kZXggc2V0LiAoTm90ZSB0aGF0IHRoZSBkZXNpcmVkIG1hdGNoZXNcbi8vIGFyZSBhbHdheXMgZ3JlYXRlciB0aGFuIDEgY2hhciBsb25nLCBzbyBsb25nZXN0LW1hdGNoIHdpbGwgZW5zdXJlIHRoYXQgLlxuLy8gaXMgbm90IG1hdGNoZWQgdW5sZXNzIHRoZSBkZXNpcmVkIG1hdGNoIGZhaWxzLilcbnZhciBTSU1QTEVUQUcgPSAvKD86KFxcLyk/KFthLXpdKyk+KXxbXFxzXFxTXS9nO1xudmFyIFNJTVBMRUFUVFIgPSAvKD86KFstYS16XSspWyBcXHRcXG5cXGZdKj1bIFxcdFxcblxcZl0qKCdbXicmXFxyXFx1MDAwMF0qJ3xcIlteXCImXFxyXFx1MDAwMF0qXCJ8W15cXHRcXG5cXHJcXGYgXCImJ1xcdTAwMDA+XVteJj4gXFx0XFxuXFxyXFxmXFx1MDAwMF0qWyBcXHRcXG5cXGZdKSl8W1xcc1xcU10vZztcblxudmFyIE5PTldTID0gL1teXFx4MDlcXHgwQVxceDBDXFx4MERcXHgyMF0vO1xudmFyIEFMTE5PTldTID0gL1teXFx4MDlcXHgwQVxceDBDXFx4MERcXHgyMF0vZzsgLy8gbGlrZSBhYm92ZSwgd2l0aCBnIGZsYWdcbnZhciBOT05XU05PTk5VTCA9IC9bXlxceDAwXFx4MDlcXHgwQVxceDBDXFx4MERcXHgyMF0vOyAvLyBkb24ndCBhbGxvdyBOVUwgZWl0aGVyXG52YXIgTEVBRElOR1dTID0gL15bXFx4MDlcXHgwQVxceDBDXFx4MERcXHgyMF0rLztcbnZhciBOVUxDSEFSUyA9IC9cXHgwMC9nO1xuXG4vKioqXG4gKiBUaGVzZSBhcmUgdXRpbGl0eSBmdW5jdGlvbnMgdGhhdCBkb24ndCB1c2UgYW55IG9mIHRoZSBwYXJzZXInc1xuICogaW50ZXJuYWwgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIGJ1ZjJzdHIoYnVmKSB7XG4gIHZhciBDSFVOS1NJWkU9MTYzODQ7XG4gIGlmIChidWYubGVuZ3RoIDwgQ0hVTktTSVpFKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBidWYpO1xuICB9XG4gIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGFyZ2Ugc3RyaW5ncywgdG8gYXZvaWQgYnVzdGluZyB0aGUgc3RhY2suXG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IENIVU5LU0laRSkge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgYnVmLnNsaWNlKGksIGkrQ0hVTktTSVpFKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3RyMmJ1ZihzKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaT0wOyBpPHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBzLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgYSBtZW1iZXIgb2YgdGhlIHNldC5cbi8vIFRoZSBzZXQgaXMgYW4gb2JqZWN0IHRoYXQgbWFwcyBuYW1lc3BhY2VzIHRvIG9iamVjdHMuIFRoZSBvYmplY3RzXG4vLyB0aGVuIG1hcCBsb2NhbCB0YWduYW1lcyB0byB0aGUgdmFsdWUgdHJ1ZSBpZiB0aGF0IHRhZyBpcyBwYXJ0IG9mIHRoZSBzZXRcbmZ1bmN0aW9uIGlzQShlbHQsIHNldCkge1xuICBpZiAodHlwZW9mIHNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBjb252ZW5pZW5jZSBjYXNlIGZvciB0ZXN0aW5nIGEgcGFydGljdWxhciBIVE1MIGVsZW1lbnRcbiAgICByZXR1cm4gZWx0Lm5hbWVzcGFjZVVSSSA9PT0gTkFNRVNQQUNFLkhUTUwgJiZcbiAgICAgIGVsdC5sb2NhbE5hbWUgPT09IHNldDtcbiAgfVxuICB2YXIgdGFnbmFtZXMgPSBzZXRbZWx0Lm5hbWVzcGFjZVVSSV07XG4gIHJldHVybiB0YWduYW1lcyAmJiB0YWduYW1lc1tlbHQubG9jYWxOYW1lXTtcbn1cblxuZnVuY3Rpb24gaXNNYXRobWxUZXh0SW50ZWdyYXRpb25Qb2ludChuKSB7XG4gIHJldHVybiBpc0EobiwgbWF0aG1sVGV4dEludGVncmF0aW9uUG9pbnRTZXQpO1xufVxuXG5mdW5jdGlvbiBpc0hUTUxJbnRlZ3JhdGlvblBvaW50KG4pIHtcbiAgaWYgKGlzQShuLCBodG1sSW50ZWdyYXRpb25Qb2ludFNldCkpIHJldHVybiB0cnVlO1xuICBpZiAobi5uYW1lc3BhY2VVUkkgPT09IE5BTUVTUEFDRS5NQVRITUwgJiZcbiAgICBuLmxvY2FsTmFtZSA9PT0gXCJhbm5vdGF0aW9uLXhtbFwiKSB7XG4gICAgdmFyIGVuY29kaW5nID0gbi5nZXRBdHRyaWJ1dGUoXCJlbmNvZGluZ1wiKTtcbiAgICBpZiAoZW5jb2RpbmcpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZW5jb2RpbmcgPT09IFwidGV4dC9odG1sXCIgfHxcbiAgICAgIGVuY29kaW5nID09PSBcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RTVkdUYWdOYW1lKG5hbWUpIHtcbiAgaWYgKG5hbWUgaW4gc3ZnVGFnTmFtZUFkanVzdG1lbnRzKVxuICAgIHJldHVybiBzdmdUYWdOYW1lQWRqdXN0bWVudHNbbmFtZV07XG4gIGVsc2VcbiAgICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gYWRqdXN0U1ZHQXR0cmlidXRlcyhhdHRycykge1xuICBmb3IodmFyIGkgPSAwLCBuID0gYXR0cnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgaWYgKGF0dHJzW2ldWzBdIGluIHN2Z0F0dHJBZGp1c3RtZW50cykge1xuICAgICAgYXR0cnNbaV1bMF0gPSBzdmdBdHRyQWRqdXN0bWVudHNbYXR0cnNbaV1bMF1dO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGp1c3RNYXRoTUxBdHRyaWJ1dGVzKGF0dHJzKSB7XG4gIGZvcih2YXIgaSA9IDAsIG4gPSBhdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBpZiAoYXR0cnNbaV1bMF0gPT09IFwiZGVmaW5pdGlvbnVybFwiKSB7XG4gICAgICBhdHRyc1tpXVswXSA9IFwiZGVmaW5pdGlvblVSTFwiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkanVzdEZvcmVpZ25BdHRyaWJ1dGVzKGF0dHJzKSB7XG4gIGZvcih2YXIgaSA9IDAsIG4gPSBhdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBpZiAoYXR0cnNbaV1bMF0gaW4gZm9yZWlnbkF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vIEF0dHJpYnV0ZXMgd2l0aCBuYW1lc3BhY2VzIGdldCBhIDNyZCBlbGVtZW50OlxuICAgICAgLy8gW1FuYW1lLCB2YWx1ZSwgbmFtZXNwYWNlXVxuICAgICAgYXR0cnNbaV0ucHVzaChmb3JlaWduQXR0cmlidXRlc1thdHRyc1tpXVswXV0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBGb3IgZWFjaCBhdHRyaWJ1dGUgaW4gYXR0cnMsIGlmIGVsdCBkb2Vzbid0IGhhdmUgYW4gYXR0cmlidXRlXG4vLyBieSB0aGF0IG5hbWUsIGFkZCB0aGUgYXR0cmlidXRlIHRvIGVsdFxuLy8gWFhYOiBJJ20gaWdub3JpbmcgbmFtZXNwYWNlcyBmb3Igbm93XG5mdW5jdGlvbiB0cmFuc2ZlckF0dHJpYnV0ZXMoYXR0cnMsIGVsdCkge1xuICBmb3IodmFyIGkgPSAwLCBuID0gYXR0cnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSBhdHRyc1tpXVswXSwgdmFsdWUgPSBhdHRyc1tpXVsxXTtcbiAgICBpZiAoZWx0Lmhhc0F0dHJpYnV0ZShuYW1lKSkgY29udGludWU7XG4gICAgZWx0Ll9zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKipcbiAqIFRoZSBFbGVtZW50U3RhY2sgY2xhc3NcbiAqL1xuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sgPSBmdW5jdGlvbiBFbGVtZW50U3RhY2soKSB7XG4gIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgdGhpcy50b3AgPSBudWxsOyAvLyBzdGFjay50b3AgaXMgdGhlIFwiY3VycmVudCBub2RlXCIgaW4gdGhlIHNwZWNcbn07XG5cbi8qXG4vLyBUaGlzIGlzIGZvciBkZWJ1Z2dpbmcgb25seVxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oZSkge1xuICByZXR1cm4gXCJTVEFDSzogXCIgK1xuICB0aGlzLmVsZW1lbnRzLm1hcChmdW5jdGlvbihlKSB7cmV0dXJuIGUubG9jYWxOYW1lO30pLmpvaW4oXCItXCIpO1xufVxuKi9cblxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMuZWxlbWVudHMucHVzaChlKTtcbiAgdGhpcy50b3AgPSBlO1xufTtcblxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5lbGVtZW50cy5wb3AoKTtcbiAgdGhpcy50b3AgPSB0aGlzLmVsZW1lbnRzW3RoaXMuZWxlbWVudHMubGVuZ3RoLTFdO1xufTtcblxuLy8gUG9wIGVsZW1lbnRzIG9mZiB0aGUgc3RhY2sgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZmlyc3Rcbi8vIGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIChIVE1MKSB0YWduYW1lXG5IVE1MUGFyc2VyLkVsZW1lbnRTdGFjay5wcm90b3R5cGUucG9wVGFnID0gZnVuY3Rpb24odGFnKSB7XG4gIGZvcih2YXIgaSA9IHRoaXMuZWxlbWVudHMubGVuZ3RoLTE7IGkgPiAwOyBpLS0pIHtcbiAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgaWYgKGlzQShlLCB0YWcpKSBicmVhaztcbiAgfVxuICB0aGlzLmVsZW1lbnRzLmxlbmd0aCA9IGk7XG4gIHRoaXMudG9wID0gdGhpcy5lbGVtZW50c1tpLTFdO1xufTtcblxuLy8gUG9wIGVsZW1lbnRzIG9mZiB0aGUgc3RhY2sgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZmlyc3Rcbi8vIGVsZW1lbnQgdGhhdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVcbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5wb3BFbGVtZW50VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+IDA7IGktLSkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldIGluc3RhbmNlb2YgdHlwZSkgYnJlYWs7XG4gIH1cbiAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSBpO1xuICB0aGlzLnRvcCA9IHRoaXMuZWxlbWVudHNbaS0xXTtcbn07XG5cbi8vIFBvcCBlbGVtZW50cyBvZmYgdGhlIHN0YWNrIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgZS5cbi8vIE5vdGUgdGhhdCB0aGlzIGlzIHZlcnkgZGlmZmVyZW50IGZyb20gcmVtb3ZlRWxlbWVudCgpXG4vLyBUaGlzIHJlcXVpcmVzIHRoYXQgZSBpcyBvbiB0aGUgc3RhY2suXG5IVE1MUGFyc2VyLkVsZW1lbnRTdGFjay5wcm90b3R5cGUucG9wRWxlbWVudCA9IGZ1bmN0aW9uKGUpIHtcbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+IDA7IGktLSkge1xuICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldID09PSBlKSBicmVhaztcbiAgfVxuICB0aGlzLmVsZW1lbnRzLmxlbmd0aCA9IGk7XG4gIHRoaXMudG9wID0gdGhpcy5lbGVtZW50c1tpLTFdO1xufTtcblxuLy8gUmVtb3ZlIGEgc3BlY2lmaWMgZWxlbWVudCBmcm9tIHRoZSBzdGFjay5cbi8vIERvIG5vdGhpbmcgaWYgdGhlIGVsZW1lbnQgaXMgbm90IG9uIHRoZSBzdGFja1xuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLnJlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbihlKSB7XG4gIGlmICh0aGlzLnRvcCA9PT0gZSkgdGhpcy5wb3AoKTtcbiAgZWxzZSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuZWxlbWVudHMubGFzdEluZGV4T2YoZSk7XG4gICAgaWYgKGlkeCAhPT0gLTEpXG4gICAgICB0aGlzLmVsZW1lbnRzLnNwbGljZShpZHgsIDEpO1xuICB9XG59O1xuXG5IVE1MUGFyc2VyLkVsZW1lbnRTdGFjay5wcm90b3R5cGUuY2xlYXJUb0NvbnRleHQgPSBmdW5jdGlvbihzZXQpIHtcbiAgLy8gTm90ZSB0aGF0IHdlIGRvbid0IGxvb3AgdG8gMC4gTmV2ZXIgcG9wIHRoZSA8aHRtbD4gZWx0IG9mZi5cbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+IDA7IGktLSkge1xuICAgIGlmIChpc0EodGhpcy5lbGVtZW50c1tpXSwgc2V0KSkgYnJlYWs7XG4gIH1cbiAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSBpKzE7XG4gIHRoaXMudG9wID0gdGhpcy5lbGVtZW50c1tpXTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKHRhZykge1xuICByZXR1cm4gdGhpcy5pblNwZWNpZmljU2NvcGUodGFnLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5pblNwZWNpZmljU2NvcGUgPSBmdW5jdGlvbih0YWcsIHNldCkge1xuICBmb3IodmFyIGkgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgIHZhciBlbHQgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgIGlmIChpc0EoZWx0LCB0YWcpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBKGVsdCwgc2V0KSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIExpa2UgdGhlIGFib3ZlLCBidXQgZm9yIGEgc3BlY2lmaWMgZWxlbWVudCwgbm90IGEgdGFnbmFtZVxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLmVsZW1lbnRJblNwZWNpZmljU2NvcGUgPSBmdW5jdGlvbih0YXJnZXQsIHNldCkge1xuICBmb3IodmFyIGkgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgIHZhciBlbHQgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgIGlmIChlbHQgPT09IHRhcmdldCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGlzQShlbHQsIHNldCkpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBMaWtlIHRoZSBhYm92ZSwgYnV0IGZvciBhbiBlbGVtZW50IGludGVyZmFjZSwgbm90IGEgdGFnbmFtZVxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLmVsZW1lbnRUeXBlSW5TcGVjaWZpY1Njb3BlID0gZnVuY3Rpb24odGFyZ2V0LCBzZXQpIHtcbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZWx0ID0gdGhpcy5lbGVtZW50c1tpXTtcbiAgICBpZiAoZWx0IGluc3RhbmNlb2YgdGFyZ2V0KSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBKGVsdCwgc2V0KSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5pblNjb3BlID0gZnVuY3Rpb24odGFnKSB7XG4gIHJldHVybiB0aGlzLmluU3BlY2lmaWNTY29wZSh0YWcsIGluU2NvcGVTZXQpO1xufTtcblxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLmVsZW1lbnRJblNjb3BlID0gZnVuY3Rpb24oZSkge1xuICByZXR1cm4gdGhpcy5lbGVtZW50SW5TcGVjaWZpY1Njb3BlKGUsIGluU2NvcGVTZXQpO1xufTtcblxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLmVsZW1lbnRUeXBlSW5TY29wZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudFR5cGVJblNwZWNpZmljU2NvcGUodHlwZSwgaW5TY29wZVNldCk7XG59O1xuXG5IVE1MUGFyc2VyLkVsZW1lbnRTdGFjay5wcm90b3R5cGUuaW5CdXR0b25TY29wZSA9IGZ1bmN0aW9uKHRhZykge1xuICByZXR1cm4gdGhpcy5pblNwZWNpZmljU2NvcGUodGFnLCBpbkJ1dHRvblNjb3BlU2V0KTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5pbkxpc3RJdGVtU2NvcGUgPSBmdW5jdGlvbih0YWcpIHtcbiAgcmV0dXJuIHRoaXMuaW5TcGVjaWZpY1Njb3BlKHRhZywgaW5MaXN0SXRlbVNjb3BlU2V0KTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5pblRhYmxlU2NvcGUgPSBmdW5jdGlvbih0YWcpIHtcbiAgcmV0dXJuIHRoaXMuaW5TcGVjaWZpY1Njb3BlKHRhZywgaW5UYWJsZVNjb3BlU2V0KTtcbn07XG5cbkhUTUxQYXJzZXIuRWxlbWVudFN0YWNrLnByb3RvdHlwZS5pblNlbGVjdFNjb3BlID0gZnVuY3Rpb24odGFnKSB7XG4gIC8vIENhbid0IGltcGxlbWVudCB0aGlzIG9uZSB3aXRoIGluU3BlY2lmaWNTY29wZSwgc2luY2UgaXQgaW52b2x2ZXNcbiAgLy8gYSBzZXQgZGVmaW5lZCBieSBpbnZlcnRpbmcgYW5vdGhlciBzZXQuIFNvIGltcGxlbWVudCBtYW51YWxseS5cbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZWx0ID0gdGhpcy5lbGVtZW50c1tpXTtcbiAgICBpZiAoZWx0Lm5hbWVzcGFjZVVSSSAhPT0gTkFNRVNQQUNFLkhUTUwpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgbG9jYWxuYW1lID0gZWx0LmxvY2FsTmFtZTtcbiAgICBpZiAobG9jYWxuYW1lID09PSB0YWcpIHJldHVybiB0cnVlO1xuICAgIGlmIChsb2NhbG5hbWUgIT09IFwib3B0Z3JvdXBcIiAmJiBsb2NhbG5hbWUgIT09IFwib3B0aW9uXCIpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuSFRNTFBhcnNlci5FbGVtZW50U3RhY2sucHJvdG90eXBlLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MgPSBmdW5jdGlvbihidXRub3QsIHRob3JvdWdoKSB7XG4gIHZhciBlbmRUYWdTZXQgPSB0aG9yb3VnaCA/IHRob3JvdWdoSW1wbGllZEVuZFRhZ3NTZXQgOiBpbXBsaWVkRW5kVGFnc1NldDtcbiAgZm9yKHZhciBpID0gdGhpcy5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgaWYgKGJ1dG5vdCAmJiBpc0EoZSwgYnV0bm90KSkgYnJlYWs7XG4gICAgaWYgKCFpc0EodGhpcy5lbGVtZW50c1tpXSwgZW5kVGFnU2V0KSkgYnJlYWs7XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzLmxlbmd0aCA9IGkrMTtcbiAgdGhpcy50b3AgPSB0aGlzLmVsZW1lbnRzW2ldO1xufTtcblxuLyoqKlxuICogVGhlIEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cyBjbGFzc1xuICovXG5IVE1MUGFyc2VyLkFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cyA9IGZ1bmN0aW9uIEFGRSgpIHtcbiAgdGhpcy5saXN0ID0gW107IC8vIGVsZW1lbnRzXG4gIHRoaXMuYXR0cnMgPSBbXTsgLy8gYXR0cmlidXRlIHRva2VucyBmb3IgY2xvbmluZ1xufTtcblxuSFRNTFBhcnNlci5BY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHJvdG90eXBlLk1BUktFUiA9IHsgbG9jYWxOYW1lOiBcInxcIiB9O1xuXG4vKlxuLy8gRm9yIGRlYnVnZ2luZ1xuSFRNTFBhcnNlci5BY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBcIkFGRTogXCIgK1xuICB0aGlzLmxpc3QubWFwKGZ1bmN0aW9uKGUpIHsgcmV0dXJuIGUubG9jYWxOYW1lOyB9KS5qb2luKFwiLVwiKTtcbn1cbiovXG5cbkhUTUxQYXJzZXIuQWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnByb3RvdHlwZS5pbnNlcnRNYXJrZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5saXN0LnB1c2godGhpcy5NQVJLRVIpO1xuICB0aGlzLmF0dHJzLnB1c2godGhpcy5NQVJLRVIpO1xufTtcblxuSFRNTFBhcnNlci5BY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihlbHQsIGF0dHJzKSB7XG4gIC8vIFNjYW4gYmFja3dhcmRzOiBpZiB0aGVyZSBhcmUgYWxyZWFkeSAzIGNvcGllcyBvZiB0aGlzIGVsZW1lbnRcbiAgLy8gYmVmb3JlIHdlIGVuY291bnRlciBhIG1hcmtlciwgdGhlbiBkcm9wIHRoZSBsYXN0IG9uZVxuICB2YXIgY291bnQgPSAwO1xuICBmb3IodmFyIGkgPSB0aGlzLmxpc3QubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHRoaXMubGlzdFtpXSA9PT0gdGhpcy5NQVJLRVIpIGJyZWFrO1xuICAgIC8vIGVxdWFsKCkgaXMgZGVmaW5lZCBiZWxvd1xuICAgIGlmIChlcXVhbChlbHQsIHRoaXMubGlzdFtpXSwgdGhpcy5hdHRyc1tpXSkpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgICBpZiAoY291bnQgPT09IDMpIHtcbiAgICAgICAgdGhpcy5saXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5hdHRycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gTm93IHB1c2ggdGhlIGVsZW1lbnQgb250byB0aGUgbGlzdFxuICB0aGlzLmxpc3QucHVzaChlbHQpO1xuXG4gIC8vIENvcHkgdGhlIGF0dHJpYnV0ZXMgYW5kIHB1c2ggdGhvc2Ugb24sIHRvb1xuICB2YXIgYXR0cmNvcHkgPSBbXTtcbiAgZm9yKHZhciBpaSA9IDA7IGlpIDwgYXR0cnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgYXR0cmNvcHlbaWldID0gYXR0cnNbaWldO1xuICB9XG5cbiAgdGhpcy5hdHRycy5wdXNoKGF0dHJjb3B5KTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIGRlZmluZXMgZXF1YWxpdHkgb2YgdHdvIGVsZW1lbnRzIGZvciB0aGUgcHVycG9zZXNcbiAgLy8gb2YgdGhlIEFGRSBsaXN0LiAgTm90ZSB0aGF0IGl0IGNvbXBhcmVzIHRoZSBuZXcgZWxlbWVudHNcbiAgLy8gYXR0cmlidXRlcyB0byB0aGUgc2F2ZWQgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGhcbiAgLy8gdGhlIG9sZCBlbGVtZW50IGJlY2F1c2UgYSBzY3JpcHQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZVxuICAvLyBvbGQgZWxlbWVudCdzIHNldCBvZiBhdHRyaWJ1dGVzXG4gIGZ1bmN0aW9uIGVxdWFsKG5ld2VsdCwgb2xkZWx0LCBvbGRhdHRycykge1xuICAgIGlmIChuZXdlbHQubG9jYWxOYW1lICE9PSBvbGRlbHQubG9jYWxOYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG5ld2VsdC5fbnVtYXR0cnMgIT09IG9sZGF0dHJzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvcih2YXIgaSA9IDAsIG4gPSBvbGRhdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHZhciBvbGRuYW1lID0gb2xkYXR0cnNbaV1bMF07XG4gICAgICB2YXIgb2xkdmFsID0gb2xkYXR0cnNbaV1bMV07XG4gICAgICBpZiAoIW5ld2VsdC5oYXNBdHRyaWJ1dGUob2xkbmFtZSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChuZXdlbHQuZ2V0QXR0cmlidXRlKG9sZG5hbWUpICE9PSBvbGR2YWwpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbkhUTUxQYXJzZXIuQWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnByb3RvdHlwZS5jbGVhclRvTWFya2VyID0gZnVuY3Rpb24oKSB7XG4gIGZvcih2YXIgaSA9IHRoaXMubGlzdC5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAodGhpcy5saXN0W2ldID09PSB0aGlzLk1BUktFUikgYnJlYWs7XG4gIH1cbiAgaWYgKGkgPCAwKSBpID0gMDtcbiAgdGhpcy5saXN0Lmxlbmd0aCA9IGk7XG4gIHRoaXMuYXR0cnMubGVuZ3RoID0gaTtcbn07XG5cbi8vIEZpbmQgYW5kIHJldHVybiB0aGUgbGFzdCBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCB0YWcgYmV0d2VlbiB0aGVcbi8vIGVuZCBvZiB0aGUgbGlzdCBhbmQgdGhlIGxhc3QgbWFya2VyIG9uIHRoZSBsaXN0LlxuLy8gVXNlZCB3aGVuIHBhcnNpbmcgPGE+IGluX2JvZHlfbW9kZSgpXG5IVE1MUGFyc2VyLkFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5wcm90b3R5cGUuZmluZEVsZW1lbnRCeVRhZyA9IGZ1bmN0aW9uKHRhZykge1xuICBmb3IodmFyIGkgPSB0aGlzLmxpc3QubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGVsdCA9IHRoaXMubGlzdFtpXTtcbiAgICBpZiAoZWx0ID09PSB0aGlzLk1BUktFUikgYnJlYWs7XG4gICAgaWYgKGVsdC5sb2NhbE5hbWUgPT09IHRhZykgcmV0dXJuIGVsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbkhUTUxQYXJzZXIuQWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oZSkge1xuICByZXR1cm4gdGhpcy5saXN0Lmxhc3RJbmRleE9mKGUpO1xufTtcblxuLy8gRmluZCB0aGUgZWxlbWVudCBlIGluIHRoZSBsaXN0IGFuZCByZW1vdmUgaXRcbi8vIFVzZWQgd2hlbiBwYXJzaW5nIDxhPiBpbl9ib2R5KClcbkhUTUxQYXJzZXIuQWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihlKSB7XG4gIHZhciBpZHggPSB0aGlzLmxpc3QubGFzdEluZGV4T2YoZSk7XG4gIGlmIChpZHggIT09IC0xKSB7XG4gICAgdGhpcy5saXN0LnNwbGljZShpZHgsIDEpO1xuICAgIHRoaXMuYXR0cnMuc3BsaWNlKGlkeCwgMSk7XG4gIH1cbn07XG5cbi8vIEZpbmQgZWxlbWVudCBhIGluIHRoZSBsaXN0IGFuZCByZXBsYWNlIGl0IHdpdGggZWxlbWVudCBiXG4vLyBYWFg6IERvIEkgbmVlZCB0byBoYW5kbGUgYXR0cmlidXRlcyBoZXJlP1xuSFRNTFBhcnNlci5BY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihhLCBiLCBhdHRycykge1xuICB2YXIgaWR4ID0gdGhpcy5saXN0Lmxhc3RJbmRleE9mKGEpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIHRoaXMubGlzdFtpZHhdID0gYjtcbiAgICB0aGlzLmF0dHJzW2lkeF0gPSBhdHRycztcbiAgfVxufTtcblxuLy8gRmluZCBhIGluIHRoZSBsaXN0IGFuZCBpbnNlcnQgYiBhZnRlciBpdFxuLy8gVGhpcyBpcyBvbmx5IHVzZWQgZm9yIGluc2VydCBhIGJvb2ttYXJrIG9iamVjdCwgc28gdGhlXG4vLyBhdHRycyBhcnJheSBkb2Vzbid0IHJlYWxseSBtYXR0ZXJcbkhUTUxQYXJzZXIuQWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnByb3RvdHlwZS5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uKGEsYikge1xuICB2YXIgaWR4ID0gdGhpcy5saXN0Lmxhc3RJbmRleE9mKGEpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIHRoaXMubGlzdC5zcGxpY2UoaWR4LCAwLCBiKTtcbiAgICB0aGlzLmF0dHJzLnNwbGljZShpZHgsIDAsIGIpO1xuICB9XG59O1xuXG5cblxuXG4vKioqXG4gKiBUaGlzIGlzIHRoZSBwYXJzZXIgZmFjdG9yeSBmdW5jdGlvbi4gSXQgaXMgdGhlIHJldHVybiB2YWx1ZSBvZlxuICogdGhlIG91dGVyIGNsb3N1cmUgdGhhdCBpdCBpcyBkZWZpbmVkIHdpdGhpbi4gIE1vc3Qgb2YgdGhlIHBhcnNlclxuICogaW1wbGVtZW50YXRpb24gZGV0YWlscyBhcmUgaW5zaWRlIHRoaXMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEhUTUxQYXJzZXIoYWRkcmVzcywgZnJhZ21lbnRDb250ZXh0LCBvcHRpb25zKSB7XG4gIC8qKipcbiAgICogVGhlc2UgYXJlIHRoZSBwYXJzZXIncyBzdGF0ZSB2YXJpYWJsZXNcbiAgICovXG4gIC8vIFNjYW5uZXIgc3RhdGVcbiAgdmFyIGNoYXJzID0gbnVsbDtcbiAgdmFyIG51bWNoYXJzID0gMDsgLy8gTGVuZ3RoIG9mIGNoYXJzXG4gIHZhciBuZXh0Y2hhciA9IDA7IC8vIEluZGV4IG9mIG5leHQgY2hhclxuICB2YXIgaW5wdXRfY29tcGxldGUgPSBmYWxzZTsgLy8gQmVjb21lcyB0cnVlIHdoZW4gZW5kKCkgY2FsbGVkLlxuICB2YXIgc2Nhbm5lcl9za2lwX25ld2xpbmUgPSBmYWxzZTsgLy8gSWYgcHJldmlvdXMgY2hhciB3YXMgQ1JcbiAgdmFyIHJlZW50cmFudF9pbnZvY2F0aW9ucyA9IDA7XG4gIHZhciBzYXZlZF9zY2FubmVyX3N0YXRlID0gW107XG4gIHZhciBsZWZ0b3ZlcnMgPSBcIlwiO1xuICB2YXIgZmlyc3RfYmF0Y2ggPSB0cnVlO1xuICB2YXIgcGF1c2VkID0gMDsgLy8gQmVjb21lcyBub24temVybyB3aGlsZSBsb2FkaW5nIHNjcmlwdHNcblxuXG4gIC8vIFRva2VuaXplciBzdGF0ZVxuICB2YXIgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTsgLy8gQ3VycmVudCB0b2tlbml6ZXIgc3RhdGVcbiAgdmFyIHJldHVybl9zdGF0ZTtcbiAgdmFyIGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZTtcbiAgdmFyIHRhZ25hbWVidWYgPSBcIlwiO1xuICB2YXIgbGFzdHRhZ25hbWUgPSBcIlwiOyAvLyBob2xkcyB0aGUgdGFyZ2V0IGVuZCB0YWcgZm9yIHRleHQgc3RhdGVzXG4gIHZhciB0ZW1wYnVmID0gW107XG4gIHZhciBhdHRybmFtZWJ1ZiA9IFwiXCI7XG4gIHZhciBhdHRydmFsdWVidWYgPSBcIlwiO1xuICB2YXIgY29tbWVudGJ1ZiA9IFtdO1xuICB2YXIgZG9jdHlwZW5hbWVidWYgPSBbXTtcbiAgdmFyIGRvY3R5cGVwdWJsaWNidWYgPSBbXTtcbiAgdmFyIGRvY3R5cGVzeXN0ZW1idWYgPSBbXTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBbXTtcbiAgdmFyIGlzX2VuZF90YWcgPSBmYWxzZTtcblxuICAvLyBUcmVlIGJ1aWxkZXIgc3RhdGVcbiAgdmFyIHBhcnNlciA9IGluaXRpYWxfbW9kZTsgLy8gQ3VycmVudCBpbnNlcnRpb24gbW9kZVxuICB2YXIgb3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gbnVsbDsgLy8gQSBzYXZlZCBpbnNlcnRpb24gbW9kZVxuICB2YXIgdGVtcGxhdGVJbnNlcnRpb25Nb2RlcyA9IFtdOyAvLyBTdGFjayBvZiB0ZW1wbGF0ZSBpbnNlcnRpb24gbW9kZXMuXG4gIHZhciBzdGFjayA9IG5ldyBIVE1MUGFyc2VyLkVsZW1lbnRTdGFjaygpOyAvLyBTdGFjayBvZiBvcGVuIGVsZW1lbnRzXG4gIHZhciBhZmUgPSBuZXcgSFRNTFBhcnNlci5BY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTsgLy8gbWlzLW5lc3RlZCB0YWdzXG4gIHZhciBmcmFnbWVudCA9IChmcmFnbWVudENvbnRleHQhPT11bmRlZmluZWQpOyAvLyBGb3IgaW5uZXJIVE1MLCBldGMuXG4gIHZhciBoZWFkX2VsZW1lbnRfcG9pbnRlciA9IG51bGw7XG4gIHZhciBmb3JtX2VsZW1lbnRfcG9pbnRlciA9IG51bGw7XG4gIHZhciBzY3JpcHRpbmdfZW5hYmxlZCA9IHRydWU7XG4gIGlmIChmcmFnbWVudENvbnRleHQpIHtcblx0c2NyaXB0aW5nX2VuYWJsZWQgPSBmcmFnbWVudENvbnRleHQub3duZXJEb2N1bWVudC5fc2NyaXB0aW5nX2VuYWJsZWQ7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zY3JpcHRpbmdfZW5hYmxlZCA9PT0gZmFsc2UpXG4gICAgc2NyaXB0aW5nX2VuYWJsZWQgPSBmYWxzZTtcbiAgdmFyIGZyYW1lc2V0X29rID0gdHJ1ZTtcbiAgdmFyIGZvcmNlX3F1aXJrcyA9IGZhbHNlO1xuICB2YXIgcGVuZGluZ190YWJsZV90ZXh0O1xuICB2YXIgdGV4dF9pbnRlZ3JhdGlvbl9tb2RlOyAvLyBYWFggYSBzcGVjIGJ1ZyB3b3JrYXJvdW5kP1xuXG4gIC8vIEEgc2luZ2xlIHJ1biBvZiBjaGFyYWN0ZXJzLCBidWZmZXJlZCB1cCB0byBiZSBzZW50IHRvXG4gIC8vIHRoZSBwYXJzZXIgYXMgYSBzaW5nbGUgc3RyaW5nLlxuICB2YXIgdGV4dHJ1biA9IFtdO1xuICB2YXIgdGV4dEluY2x1ZGVzTlVMID0gZmFsc2U7XG4gIHZhciBpZ25vcmVfbGluZWZlZWQgPSBmYWxzZTtcblxuICAvKioqXG4gICAqIFRoaXMgaXMgdGhlIHBhcnNlciBvYmplY3QgdGhhdCB3aWxsIGJlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpc1xuICAgKiBmYWN0b3J5IGZ1bmN0aW9uLCB3aGljaCBpcyBzb21lIDUwMDAgbGluZXMgYmVsb3cuXG4gICAqIE5vdGUgdGhhdCB0aGUgdmFyaWFibGUgXCJwYXJzZXJcIiBpcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGVcbiAgICogcGFyc2VyJ3Mgc3RhdGUgbWFjaGluZS4gIFRoaXMgdmFyaWFibGUgXCJodG1scGFyc2VyXCIgaXMgdGhlXG4gICAqIHJldHVybiB2YWx1ZSBhbmQgZGVmaW5lcyB0aGUgcHVibGljIEFQSSBvZiB0aGUgcGFyc2VyXG4gICAqL1xuICB2YXIgaHRtbHBhcnNlciA9IHtcbiAgICBkb2N1bWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZG9jO1xuICAgIH0sXG5cbiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZyb20gSFRNTFNjcmlwdEVsZW1lbnQgdG8gcGF1c2UgdGhlXG4gICAgLy8gcGFyc2VyIHdoaWxlIGEgc2NyaXB0IGlzIGJlaW5nIGxvYWRlZCBmcm9tIHRoZSBuZXR3b3JrXG4gICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gcHJpbnQoXCJwYXVzaW5nIHBhcnNlclwiKTtcbiAgICAgIHBhdXNlZCsrO1xuICAgIH0sXG5cbiAgICAvLyBDYWxsZWQgd2hlbiBhIHNjcmlwdCBmaW5pc2hlcyBsb2FkaW5nXG4gICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHByaW50KFwicmVzdW1pbmcgcGFyc2VyXCIpO1xuICAgICAgcGF1c2VkLS07XG4gICAgICAvLyBYWFg6IGFkZGVkIHRoaXMgdG8gZm9yY2UgYSByZXN1bXB0aW9uLlxuICAgICAgLy8gSXMgdGhpcyB0aGUgcmlnaHQgdGhpbmcgdG8gZG8/XG4gICAgICB0aGlzLnBhcnNlKFwiXCIpO1xuICAgIH0sXG5cbiAgICAvLyBQYXJzZSB0aGUgSFRNTCB0ZXh0IHMuXG4gICAgLy8gVGhlIHNlY29uZCBhcmd1bWVudCBzaG91bGQgYmUgdHJ1ZSBpZiB0aGVyZSBpcyBubyBtb3JlXG4gICAgLy8gdGV4dCB0byBiZSBwYXJzZWQsIGFuZCBzaG91bGQgYmUgZmFsc2Ugb3Igb21pdHRlZCBvdGhlcndpc2UuXG4gICAgLy8gVGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IG5vdCBiZSBzZXQgZm9yIHJlY3Vyc2l2ZSBpbnZvY2F0aW9uc1xuICAgIC8vIGZyb20gZG9jdW1lbnQud3JpdGUoKVxuICAgIHBhcnNlOiBmdW5jdGlvbihzLCBlbmQpIHtcblxuICAgICAgLy8gSWYgd2UncmUgcGF1c2VkLCByZW1lbWJlciB0aGUgdGV4dCB0byBwYXJzZSwgYnV0XG4gICAgICAvLyBkb24ndCBwYXJzZSBpdCBub3cuXG4gICAgICBpZiAocGF1c2VkID4gMCkge1xuICAgICAgICBsZWZ0b3ZlcnMgKz0gcztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG5cbiAgICAgIGlmIChyZWVudHJhbnRfaW52b2NhdGlvbnMgPT09IDApIHtcbiAgICAgICAgLy8gQSBub3JtYWwsIHRvcC1sZXZlbCBpbnZvY2F0aW9uXG4gICAgICAgIGlmIChsZWZ0b3ZlcnMpIHtcbiAgICAgICAgICBzID0gbGVmdG92ZXJzICsgcztcbiAgICAgICAgICBsZWZ0b3ZlcnMgPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGEgc3BlY2lhbCBtYXJrZXIgY2hhcmFjdGVyIHRvIHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlci4gIElmIHRoZSBzY2FubmVyIGlzIGF0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlciBhbmQgaW5wdXRfY29tcGxldGUgaXMgc2V0LCB0aGVuIHRoaXNcbiAgICAgICAgLy8gY2hhcmFjdGVyIHdpbGwgdHJhbnNmb3JtIGludG8gYW4gRU9GIHRva2VuLlxuICAgICAgICAvLyBIYXZpbmcgYW4gYWN0dWFsIGNoYXJhY3RlciB0aGF0IHJlcHJlc2VudHMgRU9GXG4gICAgICAgIC8vIGluIHRoZSBjaGFyYWN0ZXIgYnVmZmVyIG1ha2VzIGxvb2thaGVhZCByZWdleHBcbiAgICAgICAgLy8gbWF0Y2hpbmcgd29yayBtb3JlIGVhc2lseSwgYW5kIHRoaXMgaXNcbiAgICAgICAgLy8gaW1wb3J0YW50IGZvciBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cbiAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgIHMgKz0gXCJcXHVGRkZGXCI7XG4gICAgICAgICAgaW5wdXRfY29tcGxldGUgPSB0cnVlOyAvLyBNYWtlcyBzY2FuQ2hhcnMoKSBzZW5kIEVPRlxuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnMgPSBzO1xuICAgICAgICBudW1jaGFycyA9IHMubGVuZ3RoO1xuICAgICAgICBuZXh0Y2hhciA9IDA7XG5cbiAgICAgICAgaWYgKGZpcnN0X2JhdGNoKSB7XG4gICAgICAgICAgLy8gV2Ugc2tpcCBhIGxlYWRpbmcgQnl0ZSBPcmRlciBNYXJrIChcXHVGRUZGKVxuICAgICAgICAgIC8vIG9uIGZpcnN0IGJhdGNoIG9mIHRleHQgd2UncmUgZ2l2ZW5cbiAgICAgICAgICBmaXJzdF9iYXRjaCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChjaGFycy5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIG5leHRjaGFyID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZW50cmFudF9pbnZvY2F0aW9ucysrO1xuICAgICAgICBzY2FuQ2hhcnMoKTtcbiAgICAgICAgbGVmdG92ZXJzID0gY2hhcnMuc3Vic3RyaW5nKG5leHRjaGFyLCBudW1jaGFycyk7XG4gICAgICAgIHJlZW50cmFudF9pbnZvY2F0aW9ucy0tO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIHJlLWVudHJhbnQgY2FzZSwgd2hpY2ggd2UgaGF2ZSB0b1xuICAgICAgICAvLyBoYW5kbGUgYSBsaXR0bGUgZGlmZmVyZW50bHkuXG4gICAgICAgIHJlZW50cmFudF9pbnZvY2F0aW9ucysrO1xuXG4gICAgICAgIC8vIFNhdmUgY3VycmVudCBzY2FubmVyIHN0YXRlXG4gICAgICAgIHNhdmVkX3NjYW5uZXJfc3RhdGUucHVzaChjaGFycywgbnVtY2hhcnMsIG5leHRjaGFyKTtcblxuICAgICAgICAvLyBTZXQgbmV3IHNjYW5uZXIgc3RhdGVcbiAgICAgICAgY2hhcnMgPSBzO1xuICAgICAgICBudW1jaGFycyA9IHMubGVuZ3RoO1xuICAgICAgICBuZXh0Y2hhciA9IDA7XG5cbiAgICAgICAgLy8gTm93IHNjYW4gYXMgbWFueSBvZiB0aGVzZSBuZXcgY2hhcnMgYXMgd2UgY2FuXG4gICAgICAgIHNjYW5DaGFycygpO1xuXG4gICAgICAgIGxlZnRvdmVycyA9IGNoYXJzLnN1YnN0cmluZyhuZXh0Y2hhciwgbnVtY2hhcnMpO1xuXG4gICAgICAgIC8vIHJlc3RvcmUgb2xkIHNjYW5uZXIgc3RhdGVcbiAgICAgICAgbmV4dGNoYXIgPSBzYXZlZF9zY2FubmVyX3N0YXRlLnBvcCgpO1xuICAgICAgICBudW1jaGFycyA9IHNhdmVkX3NjYW5uZXJfc3RhdGUucG9wKCk7XG4gICAgICAgIGNoYXJzID0gc2F2ZWRfc2Nhbm5lcl9zdGF0ZS5wb3AoKTtcblxuICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIGxlZnRvdmVyIGNoYXJzIGZyb20gdGhpcyBpbnZvY2F0aW9uXG4gICAgICAgIC8vIGluc2VydCB0aGVtIGludG8gdGhlIHBlbmRpbmcgaW52b2NhdGlvbidzIGJ1ZmZlclxuICAgICAgICAvLyBhbmQgdHJpbSBhbHJlYWR5IHByb2Nlc3NlZCBjaGFycyBhdCB0aGUgc2FtZSB0aW1lXG4gICAgICAgIGlmIChsZWZ0b3ZlcnMpIHtcbiAgICAgICAgICBjaGFycyA9IGxlZnRvdmVycyArIGNoYXJzLnN1YnN0cmluZyhuZXh0Y2hhcik7XG4gICAgICAgICAgbnVtY2hhcnMgPSBjaGFycy5sZW5ndGg7XG4gICAgICAgICAgbmV4dGNoYXIgPSAwO1xuICAgICAgICAgIGxlZnRvdmVycyA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWNyZW1lbnQgdGhlIGNvdW50ZXJcbiAgICAgICAgcmVlbnRyYW50X2ludm9jYXRpb25zLS07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVGhpcyBpcyB0aGUgZG9jdW1lbnQgd2UnbGwgYmUgYnVpbGRpbmcgdXBcbiAgdmFyIGRvYyA9IG5ldyBEb2N1bWVudCh0cnVlLCBhZGRyZXNzKTtcblxuICAvLyBUaGUgZG9jdW1lbnQgbmVlZHMgdG8ga25vdyBhYm91dCB0aGUgcGFyc2VyLCBmb3IgZG9jdW1lbnQud3JpdGUoKS5cbiAgLy8gVGhpcyBfcGFyc2VyIHByb3BlcnR5IHdpbGwgYmUgZGVsZXRlZCB3aGVuIHdlJ3JlIGRvbmUgcGFyc2luZy5cbiAgZG9jLl9wYXJzZXIgPSBodG1scGFyc2VyO1xuXG4gIC8vIFhYWCBJIHRoaW5rIHRoYXQgYW55IGRvY3VtZW50IHdlIHVzZSB0aGlzIHBhcnNlciBvbiBzaG91bGQgc3VwcG9ydFxuICAvLyBzY3JpcHRzLiBCdXQgSSBtYXkgbmVlZCB0byBjb25maWd1cmUgdGhhdCB0aHJvdWdoIGEgcGFyc2VyIHBhcmFtZXRlclxuICAvLyBPbmx5IGRvY3VtZW50cyB3aXRoIHdpbmRvd3MgKFwiYnJvd3NpbmcgY29udGV4dHNcIiB0byBiZSBwcmVjaXNlKVxuICAvLyBhbGxvdyBzY3JpcHRpbmcuXG4gIGRvYy5fc2NyaXB0aW5nX2VuYWJsZWQgPSBzY3JpcHRpbmdfZW5hYmxlZDtcblxuXG4gIC8qKipcbiAgICogVGhlIGFjdHVhbCBjb2RlIG9mIHRoZSBIVE1MUGFyc2VyKCkgZmFjdG9yeSBmdW5jdGlvbiBiZWdpbnMgaGVyZS5cbiAgICovXG5cbiAgaWYgKGZyYWdtZW50Q29udGV4dCkgeyAvLyBmb3IgaW5uZXJIVE1MIHBhcnNpbmdcbiAgICBpZiAoZnJhZ21lbnRDb250ZXh0Lm93bmVyRG9jdW1lbnQuX3F1aXJrcylcbiAgICAgIGRvYy5fcXVpcmtzID0gdHJ1ZTtcbiAgICBpZiAoZnJhZ21lbnRDb250ZXh0Lm93bmVyRG9jdW1lbnQuX2xpbWl0ZWRRdWlya3MpXG4gICAgICBkb2MuX2xpbWl0ZWRRdWlya3MgPSB0cnVlO1xuXG4gICAgLy8gU2V0IHRoZSBpbml0aWFsIHRva2VuaXplciBzdGF0ZVxuICAgIGlmIChmcmFnbWVudENvbnRleHQubmFtZXNwYWNlVVJJID09PSBOQU1FU1BBQ0UuSFRNTCkge1xuICAgICAgc3dpdGNoKGZyYWdtZW50Q29udGV4dC5sb2NhbE5hbWUpIHtcbiAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHRva2VuaXplciA9IHJjZGF0YV9zdGF0ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIGNhc2UgXCJ4bXBcIjpcbiAgICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICAgIGNhc2UgXCJub2VtYmVkXCI6XG4gICAgICBjYXNlIFwibm9mcmFtZXNcIjpcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIGNhc2UgXCJwbGFpbnRleHRcIjpcbiAgICAgICAgdG9rZW5pemVyID0gcGxhaW50ZXh0X3N0YXRlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJub3NjcmlwdFwiOlxuICAgICAgICBpZiAoc2NyaXB0aW5nX2VuYWJsZWQpXG4gICAgICAgICAgdG9rZW5pemVyID0gcGxhaW50ZXh0X3N0YXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByb290ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJodG1sXCIpO1xuICAgIGRvYy5fYXBwZW5kQ2hpbGQocm9vdCk7XG4gICAgc3RhY2sucHVzaChyb290KTtcbiAgICBpZiAoZnJhZ21lbnRDb250ZXh0IGluc3RhbmNlb2YgaW1wbC5IVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICB0ZW1wbGF0ZUluc2VydGlvbk1vZGVzLnB1c2goaW5fdGVtcGxhdGVfbW9kZSk7XG4gICAgfVxuICAgIHJlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuXG4gICAgZm9yKHZhciBlID0gZnJhZ21lbnRDb250ZXh0OyBlICE9PSBudWxsOyBlID0gZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIGltcGwuSFRNTEZvcm1FbGVtZW50KSB7XG4gICAgICAgIGZvcm1fZWxlbWVudF9wb2ludGVyID0gZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqKlxuICAgKiBTY2FubmVyIGZ1bmN0aW9uc1xuICAgKi9cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjaGFyYWN0ZXJzIGluIGNoYXJzLCBhbmQgcGFzcyB0aGVtIG9uZSBhdCBhIHRpbWVcbiAgLy8gdG8gdGhlIHRva2VuaXplciBGU00uIFJldHVybiB3aGVuIG5vIG1vcmUgY2hhcmFjdGVycyBjYW4gYmUgcHJvY2Vzc2VkXG4gIC8vIChUaGlzIG1heSBsZWF2ZSAxIG9yIG1vcmUgY2hhcmFjdGVycyBpbiB0aGUgYnVmZmVyOiBsaWtlIGEgQ1JcbiAgLy8gd2FpdGluZyB0byBzZWUgaWYgdGhlIG5leHQgY2hhciBpcyBMRiwgb3IgZm9yIHN0YXRlcyB0aGF0IHJlcXVpcmVcbiAgLy8gbG9va2FoZWFkLi4uKVxuICBmdW5jdGlvbiBzY2FuQ2hhcnMoKSB7XG4gICAgdmFyIGNvZGVwb2ludCwgcywgcGF0dGVybiwgZW9mO1xuXG4gICAgd2hpbGUobmV4dGNoYXIgPCBudW1jaGFycykge1xuXG4gICAgICAvLyBJZiB3ZSBqdXN0IHRva2VuaXplZCBhIDwvc2NyaXB0PiB0YWcsIHRoZW4gdGhlIHBhdXNlZCBmbGFnXG4gICAgICAvLyBtYXkgaGF2ZSBiZWVuIHNldCB0byB0ZWxsIHVzIHRvIHN0b3AgdG9rZW5pemluZyB3aGlsZVxuICAgICAgLy8gdGhlIHNjcmlwdCBpcyBsb2FkaW5nXG4gICAgICBpZiAocGF1c2VkID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgc3dpdGNoKHR5cGVvZiB0b2tlbml6ZXIubG9va2FoZWFkKSB7XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICBjb2RlcG9pbnQgPSBjaGFycy5jaGFyQ29kZUF0KG5leHRjaGFyKyspO1xuICAgICAgICBpZiAoc2Nhbm5lcl9za2lwX25ld2xpbmUpIHtcbiAgICAgICAgICBzY2FubmVyX3NraXBfbmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChjb2RlcG9pbnQgPT09IDB4MDAwQSkge1xuICAgICAgICAgICAgbmV4dGNoYXIrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2goY29kZXBvaW50KSB7XG4gICAgICAgIGNhc2UgMHgwMDBEOlxuICAgICAgICAgIC8vIENSIGFsd2F5cyB0dXJucyBpbnRvIExGLCBidXQgaWYgdGhlIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgLy8gaXMgTEYsIHRoZW4gdGhhdCBzZWNvbmQgTEYgaXMgc2tpcHBlZC5cbiAgICAgICAgICBpZiAobmV4dGNoYXIgPCBudW1jaGFycykge1xuICAgICAgICAgICAgaWYgKGNoYXJzLmNoYXJDb2RlQXQobmV4dGNoYXIpID09PSAweDAwMEEpXG4gICAgICAgICAgICAgIG5leHRjaGFyKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3Qga25vdyB0aGUgbmV4dCBjaGFyIHJpZ2h0IG5vdywgc28gd2VcbiAgICAgICAgICAgIC8vIGNhbid0IGNoZWNrIGlmIGl0IGlzIGEgTEYuICBTbyBzZXQgYSBmbGFnXG4gICAgICAgICAgICBzY2FubmVyX3NraXBfbmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSW4gZWl0aGVyIGNhc2UsIGVtaXQgYSBMRlxuICAgICAgICAgIHRva2VuaXplcigweDAwMEEpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHhGRkZGOlxuICAgICAgICAgIGlmIChpbnB1dF9jb21wbGV0ZSAmJiBuZXh0Y2hhciA9PT0gbnVtY2hhcnMpIHtcbiAgICAgICAgICAgIHRva2VuaXplcihFT0YpOyAvLyBjb2RlcG9pbnQgd2lsbCBiZSAweEZGRkYgaGVyZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0b2tlbml6ZXIoY29kZXBvaW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgY29kZXBvaW50ID0gY2hhcnMuY2hhckNvZGVBdChuZXh0Y2hhcik7XG5cbiAgICAgICAgLy8gVGhlIG9ubHkgdG9rZW5pemVyIHN0YXRlcyB0aGF0IHJlcXVpcmUgZml4ZWQgbG9va2FoZWFkXG4gICAgICAgIC8vIG9ubHkgY29uc3VtZSBhbHBoYW51bSBjaGFyYWN0ZXJzLCBzbyB3ZSBkb24ndCBoYXZlXG4gICAgICAgIC8vIHRvIHdvcnJ5IGFib3V0IENSIGFuZCBMRiBpbiB0aGlzIGNhc2VcblxuICAgICAgICAvLyB0b2tlbml6ZXIgd2FudHMgbiBjaGFycyBvZiBsb29rYWhlYWRcbiAgICAgICAgdmFyIG4gPSB0b2tlbml6ZXIubG9va2FoZWFkO1xuICAgICAgICB2YXIgbmVlZHNTdHJpbmcgPSB0cnVlO1xuICAgICAgICBpZiAobiA8IDApIHtcbiAgICAgICAgICBuZWVkc1N0cmluZyA9IGZhbHNlO1xuICAgICAgICAgIG4gPSAtbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuIDwgbnVtY2hhcnMgLSBuZXh0Y2hhcikge1xuICAgICAgICAgIC8vIElmIHdlIGNhbiBsb29rIGFoZWFkIHRoYXQgZmFyXG4gICAgICAgICAgcyA9IG5lZWRzU3RyaW5nID8gY2hhcnMuc3Vic3RyaW5nKG5leHRjaGFyLCBuZXh0Y2hhcituKSA6IG51bGw7XG4gICAgICAgICAgZW9mID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIGlmIHdlIGRvbid0IGhhdmUgdGhhdCBtYW55IGNoYXJhY3RlcnNcbiAgICAgICAgICBpZiAoaW5wdXRfY29tcGxldGUpIHsgLy8gSWYgbm8gbW9yZSBhcmUgY29taW5nXG4gICAgICAgICAgICAvLyBKdXN0IHJldHVybiB3aGF0IHdlIGhhdmVcbiAgICAgICAgICAgIHMgPSBuZWVkc1N0cmluZyA/IGNoYXJzLnN1YnN0cmluZyhuZXh0Y2hhciwgbnVtY2hhcnMpIDogbnVsbDtcbiAgICAgICAgICAgIGVvZiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY29kZXBvaW50ID09PSAweEZGRkYgJiYgbmV4dGNoYXIgPT09IG51bWNoYXJzLTEpXG4gICAgICAgICAgICAgIGNvZGVwb2ludCA9IEVPRjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXR1cm4gbm93IGFuZCB3YWl0IGZvciBtb3JlIGNoYXJzIGxhdGVyXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRva2VuaXplcihjb2RlcG9pbnQsIHMsIGVvZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgY29kZXBvaW50ID0gY2hhcnMuY2hhckNvZGVBdChuZXh0Y2hhcik7XG5cbiAgICAgICAgLy8gdG9rZW5pemVyIHdhbnRzIGNoYXJhY3RlcnMgdXAgdG8gYSBtYXRjaGluZyBzdHJpbmdcbiAgICAgICAgcGF0dGVybiA9IHRva2VuaXplci5sb29rYWhlYWQ7XG4gICAgICAgIHZhciBwb3MgPSBjaGFycy5pbmRleE9mKHBhdHRlcm4sIG5leHRjaGFyKTtcbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICBzID0gY2hhcnMuc3Vic3RyaW5nKG5leHRjaGFyLCBwb3MgKyBwYXR0ZXJuLmxlbmd0aCk7XG4gICAgICAgICAgZW9mID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAvLyBObyBtYXRjaFxuICAgICAgICAgIC8vIElmIG1vcmUgY2hhcmFjdGVycyBjb21pbmcsIHdhaXQgZm9yIHRoZW1cbiAgICAgICAgICBpZiAoIWlucHV0X2NvbXBsZXRlKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlJ3ZlIGdvdCB0byByZXR1cm4gd2hhdCB3ZSd2ZSBnb3RcbiAgICAgICAgICBzID0gY2hhcnMuc3Vic3RyaW5nKG5leHRjaGFyLCBudW1jaGFycyk7XG4gICAgICAgICAgaWYgKGNvZGVwb2ludCA9PT0gMHhGRkZGICYmIG5leHRjaGFyID09PSBudW1jaGFycy0xKVxuICAgICAgICAgICAgY29kZXBvaW50ID0gRU9GO1xuICAgICAgICAgIGVvZiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgdG9rZW5pemVyIHN0YXRlcyB0aGF0IHJlcXVpcmUgdGhpcyBraW5kIG9mXG4gICAgICAgIC8vIGxvb2thaGVhZCBoYXZlIHRvIGJlIGNhcmVmdWwgdG8gaGFuZGxlIENSIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gY29ycmVjdGx5XG4gICAgICAgIHRva2VuaXplcihjb2RlcG9pbnQsIHMsIGVvZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqKlxuICAgKiBUb2tlbml6ZXIgdXRpbGl0eSBmdW5jdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIGFkZEF0dHJpYnV0ZShuYW1lLHZhbHVlKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRoZXJlIGlzbid0IGFscmVhZHkgYW4gYXR0cmlidXRlIHdpdGggdGhpcyBuYW1lXG4gICAgLy8gSWYgdGhlcmUgaXMsIGlnbm9yZSB0aGlzIG9uZS5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNbaV1bMF0gPT09IG5hbWUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXR0cmlidXRlcy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGF0dHJpYnV0ZXMucHVzaChbbmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBzaW1wbGUgYXR0cmlidXRlc1xuICBmdW5jdGlvbiBoYW5kbGVTaW1wbGVBdHRyaWJ1dGUoKSB7XG4gICAgU0lNUExFQVRUUi5sYXN0SW5kZXggPSBuZXh0Y2hhci0xO1xuICAgIHZhciBtYXRjaGVkID0gU0lNUExFQVRUUi5leGVjKGNoYXJzKTtcbiAgICBpZiAoIW1hdGNoZWQpIHRocm93IG5ldyBFcnJvcihcInNob3VsZCBuZXZlciBoYXBwZW5cIik7XG4gICAgdmFyIG5hbWUgPSBtYXRjaGVkWzFdO1xuICAgIGlmICghbmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciB2YWx1ZSA9IG1hdGNoZWRbMl07XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICBzd2l0Y2godmFsdWVbMF0pIHtcbiAgICBjYXNlICdcIic6XG4gICAgY2FzZSBcIidcIjpcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEsIGxlbi0xKTtcbiAgICAgIG5leHRjaGFyICs9IChtYXRjaGVkWzBdLmxlbmd0aC0xKTtcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2F0dHJpYnV0ZV92YWx1ZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlO1xuICAgICAgbmV4dGNoYXIgKz0gKG1hdGNoZWRbMF0ubGVuZ3RoLTEpO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgbGVuLTEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZXJlIGlzbid0IGFscmVhZHkgYW4gYXR0cmlidXRlIHdpdGggdGhpcyBuYW1lXG4gICAgLy8gSWYgdGhlcmUgaXMsIGlnbm9yZSB0aGlzIG9uZS5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNbaV1bMF0gPT09IG5hbWUpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZ2luVGFnTmFtZSgpIHtcbiAgICBpc19lbmRfdGFnID0gZmFsc2U7XG4gICAgdGFnbmFtZWJ1ZiA9IFwiXCI7XG4gICAgYXR0cmlidXRlcy5sZW5ndGggPSAwO1xuICB9XG4gIGZ1bmN0aW9uIGJlZ2luRW5kVGFnTmFtZSgpIHtcbiAgICBpc19lbmRfdGFnID0gdHJ1ZTtcbiAgICB0YWduYW1lYnVmID0gXCJcIjtcbiAgICBhdHRyaWJ1dGVzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBmdW5jdGlvbiBiZWdpblRlbXBCdWYoKSB7IHRlbXBidWYubGVuZ3RoID0gMDsgfVxuICBmdW5jdGlvbiBiZWdpbkF0dHJOYW1lKCkgeyBhdHRybmFtZWJ1ZiA9IFwiXCI7IH1cbiAgZnVuY3Rpb24gYmVnaW5BdHRyVmFsdWUoKSB7IGF0dHJ2YWx1ZWJ1ZiA9IFwiXCI7IH1cbiAgZnVuY3Rpb24gYmVnaW5Db21tZW50KCkgeyBjb21tZW50YnVmLmxlbmd0aCA9IDA7IH1cbiAgZnVuY3Rpb24gYmVnaW5Eb2N0eXBlKCkge1xuICAgIGRvY3R5cGVuYW1lYnVmLmxlbmd0aCA9IDA7XG4gICAgZG9jdHlwZXB1YmxpY2J1ZiA9IG51bGw7XG4gICAgZG9jdHlwZXN5c3RlbWJ1ZiA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gYmVnaW5Eb2N0eXBlUHVibGljSWQoKSB7IGRvY3R5cGVwdWJsaWNidWYgPSBbXTsgfVxuICBmdW5jdGlvbiBiZWdpbkRvY3R5cGVTeXN0ZW1JZCgpIHsgZG9jdHlwZXN5c3RlbWJ1ZiA9IFtdOyB9XG4gIGZ1bmN0aW9uIGZvcmNlcXVpcmtzKCkgeyBmb3JjZV9xdWlya3MgPSB0cnVlOyB9XG4gIGZ1bmN0aW9uIGNkYXRhQWxsb3dlZCgpIHtcbiAgICByZXR1cm4gc3RhY2sudG9wICYmXG4gICAgICBzdGFjay50b3AubmFtZXNwYWNlVVJJICE9PSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcbiAgfVxuXG4gIC8vIFJldHVybiB0cnVlIGlmIHRoZSBjb2RlcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgYnVmZmVyIG1hdGNoIHRoZVxuICAvLyBjaGFyYWN0ZXJzIG9mIGxhc3R0YWduYW1lXG4gIGZ1bmN0aW9uIGFwcHJvcHJpYXRlRW5kVGFnKGJ1Zikge1xuICAgIHJldHVybiBsYXN0dGFnbmFtZSA9PT0gYnVmO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hUZXh0KCkge1xuICAgIGlmICh0ZXh0cnVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBzID0gYnVmMnN0cih0ZXh0cnVuKTtcbiAgICAgIHRleHRydW4ubGVuZ3RoID0gMDtcblxuICAgICAgaWYgKGlnbm9yZV9saW5lZmVlZCkge1xuICAgICAgICBpZ25vcmVfbGluZWZlZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHNbMF0gPT09IFwiXFxuXCIpIHMgPSBzLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluc2VydFRva2VuKFRFWFQsIHMpO1xuICAgICAgdGV4dEluY2x1ZGVzTlVMID0gZmFsc2U7XG4gICAgfVxuICAgIGlnbm9yZV9saW5lZmVlZCA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQ29uc3VtZSBjaGFycyBtYXRjaGVkIGJ5IHRoZSBwYXR0ZXJuIGFuZCByZXR1cm4gdGhlbSBhcyBhIHN0cmluZy4gU3RhcnRzXG4gIC8vIG1hdGNoaW5nIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLCBzbyB1c2VycyBzaG91bGQgZHJvcCB0aGUgY3VycmVudCBjaGFyXG4gIC8vIG90aGVyd2lzZS5cbiAgZnVuY3Rpb24gZ2V0TWF0Y2hpbmdDaGFycyhwYXR0ZXJuKSB7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSBuZXh0Y2hhciAtIDE7XG4gICAgdmFyIG1hdGNoID0gcGF0dGVybi5leGVjKGNoYXJzKTtcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2guaW5kZXggPT09IG5leHRjaGFyIC0gMSkge1xuICAgICAgbWF0Y2ggPSBtYXRjaFswXTtcbiAgICAgIG5leHRjaGFyICs9IG1hdGNoLmxlbmd0aCAtIDE7XG4gICAgICAvKiBDYXJlZnVsISAgTWFrZSBzdXJlIHdlIGhhdmVuJ3QgbWF0Y2hlZCB0aGUgRU9GIGNoYXJhY3RlciEgKi9cbiAgICAgIGlmIChpbnB1dF9jb21wbGV0ZSAmJiBuZXh0Y2hhciA9PT0gbnVtY2hhcnMpIHtcbiAgICAgICAgLy8gT29wcywgYmFja3VwIG9uZS5cbiAgICAgICAgbWF0Y2ggPSBtYXRjaC5zbGljZSgwLCAtMSk7XG4gICAgICAgIG5leHRjaGFyLS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNob3VsZCBuZXZlciBoYXBwZW5cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gZW1pdCBhIHN0cmluZyBvZiBjaGFycyB0aGF0IG1hdGNoIGEgcmVnZXhwXG4gIC8vIFJldHVybnMgZmFsc2UgaWYgbm8gY2hhcnMgbWF0Y2hlZC5cbiAgZnVuY3Rpb24gZW1pdENoYXJzV2hpbGUocGF0dGVybikge1xuICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gbmV4dGNoYXItMTtcbiAgICB2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoY2hhcnMpWzBdO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICBlbWl0Q2hhclN0cmluZyhtYXRjaCk7XG4gICAgbmV4dGNoYXIgKz0gbWF0Y2gubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgdXNlZCBieSBDREFUQSBzZWN0aW9uc1xuICBmdW5jdGlvbiBlbWl0Q2hhclN0cmluZyhzKSB7XG4gICAgaWYgKHRleHRydW4ubGVuZ3RoID4gMCkgZmx1c2hUZXh0KCk7XG5cbiAgICBpZiAoaWdub3JlX2xpbmVmZWVkKSB7XG4gICAgICBpZ25vcmVfbGluZWZlZWQgPSBmYWxzZTtcbiAgICAgIGlmIChzWzBdID09PSBcIlxcblwiKSBzID0gcy5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAocy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnNlcnRUb2tlbihURVhULCBzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXRUYWcoKSB7XG4gICAgaWYgKGlzX2VuZF90YWcpIGluc2VydFRva2VuKEVORFRBRywgdGFnbmFtZWJ1Zik7XG4gICAgZWxzZSB7XG4gICAgICAvLyBSZW1lbWJlciB0aGUgbGFzdCBvcGVuIHRhZyB3ZSBlbWl0dGVkXG4gICAgICB2YXIgdGFnbmFtZSA9IHRhZ25hbWVidWY7XG4gICAgICB0YWduYW1lYnVmID0gXCJcIjtcbiAgICAgIGxhc3R0YWduYW1lID0gdGFnbmFtZTtcbiAgICAgIGluc2VydFRva2VuKFRBRywgdGFnbmFtZSwgYXR0cmlidXRlcyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBBIHNob3J0Y3V0OiBsb29rIGFoZWFkIGFuZCBpZiB0aGlzIGlzIGEgb3BlbiBvciBjbG9zZSB0YWdcbiAgLy8gaW4gbG93ZXJjYXNlIHdpdGggbm8gc3BhY2VzIGFuZCBubyBhdHRyaWJ1dGVzLCBqdXN0IGVtaXQgaXQgbm93LlxuICBmdW5jdGlvbiBlbWl0U2ltcGxlVGFnKCkge1xuICAgIFNJTVBMRVRBRy5sYXN0SW5kZXggPSBuZXh0Y2hhcjtcbiAgICB2YXIgbWF0Y2hlZCA9IFNJTVBMRVRBRy5leGVjKGNoYXJzKTtcbiAgICBpZiAoIW1hdGNoZWQpIHRocm93IG5ldyBFcnJvcihcInNob3VsZCBuZXZlciBoYXBwZW5cIik7XG4gICAgdmFyIHRhZ25hbWUgPSBtYXRjaGVkWzJdO1xuICAgIGlmICghdGFnbmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBlbmR0YWcgPSBtYXRjaGVkWzFdO1xuICAgIGlmIChlbmR0YWcpIHtcbiAgICAgIG5leHRjaGFyICs9ICh0YWduYW1lLmxlbmd0aCsyKTtcbiAgICAgIGluc2VydFRva2VuKEVORFRBRywgdGFnbmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbmV4dGNoYXIgKz0gKHRhZ25hbWUubGVuZ3RoKzEpO1xuICAgICAgbGFzdHRhZ25hbWUgPSB0YWduYW1lO1xuICAgICAgaW5zZXJ0VG9rZW4oVEFHLCB0YWduYW1lLCBOT0FUVFJTKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0U2VsZkNsb3NpbmdUYWcoKSB7XG4gICAgaWYgKGlzX2VuZF90YWcpIGluc2VydFRva2VuKEVORFRBRywgdGFnbmFtZWJ1ZiwgbnVsbCwgdHJ1ZSk7XG4gICAgZWxzZSB7XG4gICAgICBpbnNlcnRUb2tlbihUQUcsIHRhZ25hbWVidWYsIGF0dHJpYnV0ZXMsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXREb2N0eXBlKCkge1xuICAgIGluc2VydFRva2VuKERPQ1RZUEUsXG4gICAgICAgICAgYnVmMnN0cihkb2N0eXBlbmFtZWJ1ZiksXG4gICAgICAgICAgZG9jdHlwZXB1YmxpY2J1ZiA/IGJ1ZjJzdHIoZG9jdHlwZXB1YmxpY2J1ZikgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZG9jdHlwZXN5c3RlbWJ1ZiA/IGJ1ZjJzdHIoZG9jdHlwZXN5c3RlbWJ1ZikgOiB1bmRlZmluZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdEVPRigpIHtcbiAgICBmbHVzaFRleHQoKTtcbiAgICBwYXJzZXIoRU9GKTsgLy8gRU9GIG5ldmVyIGdvZXMgdG8gaW5zZXJ0Rm9yZWlnbkNvbnRlbnQoKVxuICAgIGRvYy5tb2RjbG9jayA9IDE7IC8vIFN0YXJ0IHRyYWNraW5nIG1vZGlmaWNhdGlvbnNcbiAgfVxuXG4gIC8vIEluc2VydCBhIHRva2VuLCBlaXRoZXIgdXNpbmcgdGhlIGN1cnJlbnQgcGFyc2VyIGluc2VydGlvbiBtb2RlXG4gIC8vIChmb3IgSFRNTCBzdHVmZikgb3IgdXNpbmcgdGhlIGluc2VydEZvcmVpZ25Ub2tlbigpIG1ldGhvZC5cbiAgdmFyIGluc2VydFRva2VuID0gaHRtbHBhcnNlci5pbnNlcnRUb2tlbiA9IGZ1bmN0aW9uIGluc2VydFRva2VuKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgZmx1c2hUZXh0KCk7XG4gICAgdmFyIGN1cnJlbnQgPSBzdGFjay50b3A7XG5cbiAgICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC5uYW1lc3BhY2VVUkkgPT09IE5BTUVTUEFDRS5IVE1MKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBjb21tb24gY2FzZVxuICAgICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgbWF5IG5lZWQgdG8gaW5zZXJ0IHRoaXMgdG9rZW4gYXMgZm9yZWlnbiBjb250ZW50XG4gICAgICBpZiAodCAhPT0gVEFHICYmIHQgIT09IFRFWFQpIHtcbiAgICAgICAgaW5zZXJ0Rm9yZWlnblRva2VuKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBCdXQgaW4gc29tZSBjYXNlcyB3ZSB0cmVhdCBpdCBhcyByZWd1bGFyIGNvbnRlbnRcbiAgICAgICAgaWYgKChpc01hdGhtbFRleHRJbnRlZ3JhdGlvblBvaW50KGN1cnJlbnQpICYmXG4gICAgICAgICAgICh0ID09PSBURVhUIHx8XG4gICAgICAgICAgICAodCA9PT0gVEFHICYmXG4gICAgICAgICAgICAgdmFsdWUgIT09IFwibWdseXBoXCIgJiYgdmFsdWUgIT09IFwibWFsaWdubWFya1wiKSkpIHx8XG4gICAgICAgICAgKHQgPT09IFRBRyAmJlxuICAgICAgICAgICB2YWx1ZSA9PT0gXCJzdmdcIiAmJlxuICAgICAgICAgICBjdXJyZW50Lm5hbWVzcGFjZVVSSSA9PT0gTkFNRVNQQUNFLk1BVEhNTCAmJlxuICAgICAgICAgICBjdXJyZW50LmxvY2FsTmFtZSA9PT0gXCJhbm5vdGF0aW9uLXhtbFwiKSB8fFxuICAgICAgICAgIGlzSFRNTEludGVncmF0aW9uUG9pbnQoY3VycmVudCkpIHtcblxuICAgICAgICAgIC8vIFhYWDogdGhlIHRleHRfaW50ZWdyYXRpb25fbW9kZSBzdHVmZiBpcyBhblxuICAgICAgICAgIC8vIGF0dGVtcHRlZCBidWcgd29ya2Fyb3VuZCBvZiBtaW5lXG4gICAgICAgICAgdGV4dF9pbnRlZ3JhdGlvbl9tb2RlID0gdHJ1ZTtcbiAgICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICAgIHRleHRfaW50ZWdyYXRpb25fbW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSBpdCBpcyBmb3JlaWduIGNvbnRlbnRcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaW5zZXJ0Rm9yZWlnblRva2VuKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIC8qKipcbiAgICogVHJlZSBidWlsZGluZyB1dGlsaXR5IGZ1bmN0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5zZXJ0Q29tbWVudChkYXRhKSB7XG4gICAgdmFyIHBhcmVudCA9IHN0YWNrLnRvcDtcbiAgICBpZiAoZm9zdGVyX3BhcmVudF9tb2RlICYmIGlzQShwYXJlbnQsIHRhYmxlc2VjdGlvbnJvd1NldCkpIHtcbiAgICAgIGZvc3RlclBhcmVudChmdW5jdGlvbihkb2MpIHsgcmV0dXJuIGRvYy5jcmVhdGVDb21tZW50KGRhdGEpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gXCJJZiB0aGUgYWRqdXN0ZWQgaW5zZXJ0aW9uIGxvY2F0aW9uIGlzIGluc2lkZSBhIHRlbXBsYXRlIGVsZW1lbnQsXG4gICAgICAvLyBsZXQgaXQgaW5zdGVhZCBiZSBpbnNpZGUgdGhlIHRlbXBsYXRlIGVsZW1lbnQncyB0ZW1wbGF0ZSBjb250ZW50c1wiXG4gICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgaW1wbC5IVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5jb250ZW50O1xuICAgICAgfVxuICAgICAgcGFyZW50Ll9hcHBlbmRDaGlsZChwYXJlbnQub3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnRUZXh0KHMpIHtcbiAgICB2YXIgcGFyZW50ID0gc3RhY2sudG9wO1xuICAgIGlmIChmb3N0ZXJfcGFyZW50X21vZGUgJiYgaXNBKHBhcmVudCwgdGFibGVzZWN0aW9ucm93U2V0KSkge1xuICAgICAgZm9zdGVyUGFyZW50KGZ1bmN0aW9uKGRvYykgeyByZXR1cm4gZG9jLmNyZWF0ZVRleHROb2RlKHMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gXCJJZiB0aGUgYWRqdXN0ZWQgaW5zZXJ0aW9uIGxvY2F0aW9uIGlzIGluc2lkZSBhIHRlbXBsYXRlIGVsZW1lbnQsXG4gICAgICAvLyBsZXQgaXQgaW5zdGVhZCBiZSBpbnNpZGUgdGhlIHRlbXBsYXRlIGVsZW1lbnQncyB0ZW1wbGF0ZSBjb250ZW50c1wiXG4gICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgaW1wbC5IVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5jb250ZW50O1xuICAgICAgfVxuICAgICAgLy8gXCJJZiB0aGVyZSBpcyBhIFRleHQgbm9kZSBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGFkanVzdGVkIGluc2VydGlvblxuICAgICAgLy8gbG9jYXRpb24sIHRoZW4gYXBwZW5kIGRhdGEgdG8gdGhhdCBUZXh0IG5vZGUncyBkYXRhLlwiXG4gICAgICB2YXIgbGFzdENoaWxkID0gcGFyZW50Lmxhc3RDaGlsZDtcbiAgICAgIGlmIChsYXN0Q2hpbGQgJiYgbGFzdENoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICBsYXN0Q2hpbGQuYXBwZW5kRGF0YShzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudC5fYXBwZW5kQ2hpbGQocGFyZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhUTUxFbHQoZG9jLCBuYW1lLCBhdHRycykge1xuICAgIC8vIENyZWF0ZSB0aGUgZWxlbWVudCB0aGlzIHdheSwgcmF0aGVyIHRoYW4gd2l0aFxuICAgIC8vIGRvYy5jcmVhdGVFbGVtZW50IGJlY2F1c2UgY3JlYXRlRWxlbWVudCgpIGRvZXMgZXJyb3JcbiAgICAvLyBjaGVja2luZyBvbiB0aGUgZWxlbWVudCBuYW1lIHRoYXQgd2UgbmVlZCB0byBhdm9pZCBoZXJlLlxuICAgIHZhciBlbHQgPSBodG1sLmNyZWF0ZUVsZW1lbnQoZG9jLCBuYW1lLCBudWxsKTtcblxuICAgIGlmIChhdHRycykge1xuICAgICAgZm9yKHZhciBpID0gMCwgbiA9IGF0dHJzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAvLyBVc2UgdGhlIF8gdmVyc2lvbiB0byBhdm9pZCB0ZXN0aW5nIHRoZSB2YWxpZGl0eVxuICAgICAgICAvLyBvZiB0aGUgYXR0cmlidXRlIG5hbWVcbiAgICAgICAgZWx0Ll9zZXRBdHRyaWJ1dGUoYXR0cnNbaV1bMF0sIGF0dHJzW2ldWzFdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gWFhYXG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgYSByZXNldHRhYmxlIGZvcm0gZWxlbWVudCxcbiAgICAvLyBydW4gaXRzIHJlc2V0IGFsZ29yaXRobSBub3dcbiAgICAvLyBYWFhcbiAgICAvLyBoYW5kbGUgY2FzZSB3aGVyZSBmb3JtLWVsZW1lbnQtcG9pbnRlciBpcyBub3QgbnVsbFxuICAgIHJldHVybiBlbHQ7XG4gIH1cblxuICAvLyBUaGUgaW5fdGFibGUgaW5zZXJ0aW9uIG1vZGUgdHVybnMgb24gdGhpcyBmbGFnLCBhbmQgdGhhdCBtYWtlc1xuICAvLyBpbnNlcnRIVE1MRWxlbWVudCB1c2UgdGhlIGZvc3RlciBwYXJlbnRpbmcgYWxnb3JpdGhtIGZvciBlbGVtZW50c1xuICAvLyB0YWdzIGluc2lkZSBhIHRhYmxlXG4gIHZhciBmb3N0ZXJfcGFyZW50X21vZGUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBpbnNlcnRIVE1MRWxlbWVudChuYW1lLCBhdHRycykge1xuICAgIHZhciBlbHQgPSBpbnNlcnRFbGVtZW50KGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhUTUxFbHQoZG9jLCBuYW1lLCBhdHRycyk7XG4gICAgfSk7XG5cbiAgICAvLyBYWFhcbiAgICAvLyBJZiB0aGlzIGlzIGEgZm9ybSBlbGVtZW50LCBzZXQgaXRzIGZvcm0gYXR0cmlidXRlIHByb3BlcnR5IGhlcmVcbiAgICBpZiAoaXNBKGVsdCwgZm9ybWFzc29jaWF0ZWRTZXQpKSB7XG4gICAgICBlbHQuX2Zvcm0gPSBmb3JtX2VsZW1lbnRfcG9pbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZWx0O1xuICB9XG5cbiAgLy8gSW5zZXJ0IHRoZSBlbGVtZW50IGludG8gdGhlIG9wZW4gZWxlbWVudCBvciBmb3N0ZXIgcGFyZW50IGl0XG4gIGZ1bmN0aW9uIGluc2VydEVsZW1lbnQoZWx0RnVuYykge1xuICAgIHZhciBlbHQ7XG4gICAgaWYgKGZvc3Rlcl9wYXJlbnRfbW9kZSAmJiBpc0Eoc3RhY2sudG9wLCB0YWJsZXNlY3Rpb25yb3dTZXQpKSB7XG4gICAgICBlbHQgPSBmb3N0ZXJQYXJlbnQoZWx0RnVuYyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTFRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgLy8gXCJJZiB0aGUgYWRqdXN0ZWQgaW5zZXJ0aW9uIGxvY2F0aW9uIGlzIGluc2lkZSBhIHRlbXBsYXRlIGVsZW1lbnQsXG4gICAgICAvLyBsZXQgaXQgaW5zdGVhZCBiZSBpbnNpZGUgdGhlIHRlbXBsYXRlIGVsZW1lbnQncyB0ZW1wbGF0ZSBjb250ZW50c1wiXG4gICAgICBlbHQgPSBlbHRGdW5jKHN0YWNrLnRvcC5jb250ZW50Lm93bmVyRG9jdW1lbnQpO1xuICAgICAgc3RhY2sudG9wLmNvbnRlbnQuX2FwcGVuZENoaWxkKGVsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsdCA9IGVsdEZ1bmMoc3RhY2sudG9wLm93bmVyRG9jdW1lbnQpO1xuICAgICAgc3RhY2sudG9wLl9hcHBlbmRDaGlsZChlbHQpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2goZWx0KTtcbiAgICByZXR1cm4gZWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0Rm9yZWlnbkVsZW1lbnQobmFtZSwgYXR0cnMsIG5zKSB7XG4gICAgcmV0dXJuIGluc2VydEVsZW1lbnQoZnVuY3Rpb24oZG9jKSB7XG4gICAgICB2YXIgZWx0ID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhucywgbmFtZSk7XG4gICAgICBpZiAoYXR0cnMpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbiA9IGF0dHJzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgICAgICAgaWYgKGF0dHIubGVuZ3RoID09PSAyKVxuICAgICAgICAgICAgZWx0Ll9zZXRBdHRyaWJ1dGUoYXR0clswXSwgYXR0clsxXSk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbHQuX3NldEF0dHJpYnV0ZU5TKGF0dHJbMl0sIGF0dHJbMF0sIGF0dHJbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsdDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhc3RFbGVtZW50T2ZUeXBlKHR5cGUpIHtcbiAgICBmb3IodmFyIGkgPSBzdGFjay5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmIChzdGFjay5lbGVtZW50c1tpXSBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvc3RlclBhcmVudChlbHRGdW5jKSB7XG4gICAgdmFyIHBhcmVudCwgYmVmb3JlLCBsYXN0VGFibGUgPSAtMSwgbGFzdFRlbXBsYXRlID0gLTEsIGVsdDtcblxuICAgIGxhc3RUYWJsZSA9IGxhc3RFbGVtZW50T2ZUeXBlKGltcGwuSFRNTFRhYmxlRWxlbWVudCk7XG4gICAgbGFzdFRlbXBsYXRlID0gbGFzdEVsZW1lbnRPZlR5cGUoaW1wbC5IVE1MVGVtcGxhdGVFbGVtZW50KTtcblxuICAgIGlmIChsYXN0VGVtcGxhdGUgPj0gMCAmJiAobGFzdFRhYmxlIDwgMCB8fCBsYXN0VGVtcGxhdGUgPiBsYXN0VGFibGUpKSB7XG4gICAgICBwYXJlbnQgPSBzdGFjay5lbGVtZW50c1tsYXN0VGVtcGxhdGVdO1xuICAgIH0gZWxzZSBpZiAobGFzdFRhYmxlID49IDApIHtcbiAgICAgIHBhcmVudCA9IHN0YWNrLmVsZW1lbnRzW2xhc3RUYWJsZV0ucGFyZW50Tm9kZTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgYmVmb3JlID0gc3RhY2suZWxlbWVudHNbbGFzdFRhYmxlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IHN0YWNrLmVsZW1lbnRzW2xhc3RUYWJsZSAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXBhcmVudCkgcGFyZW50ID0gc3RhY2suZWxlbWVudHNbMF07IC8vIHRoZSBgaHRtbGAgZWxlbWVudC5cblxuICAgIC8vIFwiSWYgdGhlIGFkanVzdGVkIGluc2VydGlvbiBsb2NhdGlvbiBpcyBpbnNpZGUgYSB0ZW1wbGF0ZSBlbGVtZW50LFxuICAgIC8vIGxldCBpdCBpbnN0ZWFkIGJlIGluc2lkZSB0aGUgdGVtcGxhdGUgZWxlbWVudCdzIHRlbXBsYXRlIGNvbnRlbnRzXCJcbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgaW1wbC5IVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuY29udGVudDtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGVsZW1lbnQgaW4gdGhlIGFwcHJvcHJpYXRlIGRvY3VtZW50LlxuICAgIGVsdCA9IGVsdEZ1bmMocGFyZW50Lm93bmVyRG9jdW1lbnQpO1xuXG4gICAgaWYgKGVsdC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgIHZhciBwcmV2O1xuICAgICAgaWYgKGJlZm9yZSkgcHJldiA9IGJlZm9yZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICBlbHNlIHByZXYgPSBwYXJlbnQubGFzdENoaWxkO1xuICAgICAgaWYgKHByZXYgJiYgcHJldi5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgcHJldi5hcHBlbmREYXRhKGVsdC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIGVsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJlZm9yZSlcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWx0LCBiZWZvcmUpO1xuICAgIGVsc2VcbiAgICAgIHBhcmVudC5fYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICByZXR1cm4gZWx0O1xuICB9XG5cblxuICBmdW5jdGlvbiByZXNldEluc2VydGlvbk1vZGUoKSB7XG4gICAgdmFyIGxhc3QgPSBmYWxzZTtcbiAgICBmb3IodmFyIGkgPSBzdGFjay5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBub2RlID0gc3RhY2suZWxlbWVudHNbaV07XG4gICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICBsYXN0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgbm9kZSA9IGZyYWdtZW50Q29udGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09PSBOQU1FU1BBQ0UuSFRNTCkge1xuICAgICAgICB2YXIgdGFnID0gbm9kZS5sb2NhbE5hbWU7XG4gICAgICAgIHN3aXRjaCh0YWcpIHtcbiAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgIGZvcih2YXIgaiA9IGk7IGogPiAwOyApIHtcbiAgICAgICAgICAgIHZhciBhbmNlc3RvciA9IHN0YWNrLmVsZW1lbnRzWy0tal07XG4gICAgICAgICAgICBpZiAoYW5jZXN0b3IgaW5zdGFuY2VvZiBpbXBsLkhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFuY2VzdG9yIGluc3RhbmNlb2YgaW1wbC5IVE1MVGFibGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgIHBhcnNlciA9IGluX3NlbGVjdF9pbl90YWJsZV9tb2RlO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnNlciA9IGluX3NlbGVjdF9tb2RlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgICAgcGFyc2VyID0gaW5fcm93X21vZGU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgICAgIHBhcnNlciA9IGluX3RhYmxlX2JvZHlfbW9kZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJjYXB0aW9uXCI6XG4gICAgICAgICAgcGFyc2VyID0gaW5fY2FwdGlvbl9tb2RlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICAgICAgcGFyc2VyID0gaW5fY29sdW1uX2dyb3VwX21vZGU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwidGFibGVcIjpcbiAgICAgICAgICBwYXJzZXIgPSBpbl90YWJsZV9tb2RlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgICAgcGFyc2VyID0gdGVtcGxhdGVJbnNlcnRpb25Nb2Rlc1t0ZW1wbGF0ZUluc2VydGlvbk1vZGVzLmxlbmd0aC0xXTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJib2R5XCI6XG4gICAgICAgICAgcGFyc2VyID0gaW5fYm9keV9tb2RlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcImZyYW1lc2V0XCI6XG4gICAgICAgICAgcGFyc2VyID0gaW5fZnJhbWVzZXRfbW9kZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgICAgaWYgKGhlYWRfZWxlbWVudF9wb2ludGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJzZXIgPSBiZWZvcmVfaGVhZF9tb2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIgPSBhZnRlcl9oZWFkX21vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgIGlmICh0YWcgPT09IFwiaGVhZFwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlciA9IGluX2hlYWRfbW9kZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhZyA9PT0gXCJ0ZFwiIHx8IHRhZyA9PT0gXCJ0aFwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlciA9IGluX2NlbGxfbW9kZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgcGFyc2VyID0gaW5fYm9keV9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBwYXJzZVJhd1RleHQobmFtZSwgYXR0cnMpIHtcbiAgICBpbnNlcnRIVE1MRWxlbWVudChuYW1lLCBhdHRycyk7XG4gICAgdG9rZW5pemVyID0gcmF3dGV4dF9zdGF0ZTtcbiAgICBvcmlnaW5hbEluc2VydGlvbk1vZGUgPSBwYXJzZXI7XG4gICAgcGFyc2VyID0gdGV4dF9tb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSQ0RBVEEobmFtZSwgYXR0cnMpIHtcbiAgICBpbnNlcnRIVE1MRWxlbWVudChuYW1lLCBhdHRycyk7XG4gICAgdG9rZW5pemVyID0gcmNkYXRhX3N0YXRlO1xuICAgIG9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHBhcnNlcjtcbiAgICBwYXJzZXIgPSB0ZXh0X21vZGU7XG4gIH1cblxuICAvLyBNYWtlIGEgY29weSBvZiBlbGVtZW50IGkgb24gdGhlIGxpc3Qgb2YgYWN0aXZlIGZvcm1hdHRpbmdcbiAgLy8gZWxlbWVudHMsIHVzaW5nIGl0cyBvcmlnaW5hbCBhdHRyaWJ1dGVzLCBub3QgY3VycmVudFxuICAvLyBhdHRyaWJ1dGVzICh3aGljaCBtYXkgaGF2ZSBiZWVuIG1vZGlmaWVkIGJ5IGEgc2NyaXB0KVxuICBmdW5jdGlvbiBhZmVjbG9uZShkb2MsIGkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWx0OiBjcmVhdGVIVE1MRWx0KGRvYywgYWZlLmxpc3RbaV0ubG9jYWxOYW1lLCBhZmUuYXR0cnNbaV0pLFxuICAgICAgYXR0cnM6IGFmZS5hdHRyc1tpXSxcbiAgICB9O1xuICB9XG5cblxuICBmdW5jdGlvbiBhZmVyZWNvbnN0cnVjdCgpIHtcbiAgICBpZiAoYWZlLmxpc3QubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIGVudHJ5ID0gYWZlLmxpc3RbYWZlLmxpc3QubGVuZ3RoLTFdO1xuICAgIC8vIElmIHRoZSBsYXN0IGlzIGEgbWFya2VyICwgZG8gbm90aGluZ1xuICAgIGlmIChlbnRyeSA9PT0gYWZlLk1BUktFUikgcmV0dXJuO1xuICAgIC8vIE9yIGlmIGl0IGlzIGFuIG9wZW4gZWxlbWVudCwgZG8gbm90aGluZ1xuICAgIGlmIChzdGFjay5lbGVtZW50cy5sYXN0SW5kZXhPZihlbnRyeSkgIT09IC0xKSByZXR1cm47XG5cbiAgICAvLyBMb29wIGJhY2t3YXJkIHRocm91Z2ggdGhlIGxpc3QgdW50aWwgd2UgZmluZCBhIG1hcmtlciBvciBhblxuICAgIC8vIG9wZW4gZWxlbWVudCwgYW5kIHRoZW4gbW92ZSBmb3J3YXJkIG9uZSBmcm9tIHRoZXJlLlxuICAgIGZvcih2YXIgaSA9IGFmZS5saXN0Lmxlbmd0aC0yOyBpID49IDA7IGktLSkge1xuICAgICAgZW50cnkgPSBhZmUubGlzdFtpXTtcbiAgICAgIGlmIChlbnRyeSA9PT0gYWZlLk1BUktFUikgYnJlYWs7XG4gICAgICBpZiAoc3RhY2suZWxlbWVudHMubGFzdEluZGV4T2YoZW50cnkpICE9PSAtMSkgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gTm93IGxvb3AgZm9yd2FyZCwgc3RhcnRpbmcgZnJvbSB0aGUgZWxlbWVudCBhZnRlciB0aGUgY3VycmVudFxuICAgIC8vIG9uZSwgcmVjcmVhdGluZyBmb3JtYXR0aW5nIGVsZW1lbnRzIGFuZCBwdXNoaW5nIHRoZW0gYmFjayBvbnRvXG4gICAgLy8gdGhlIGxpc3Qgb2Ygb3BlbiBlbGVtZW50c1xuICAgIGZvcihpID0gaSsxOyBpIDwgYWZlLmxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXdlbHQgPSBpbnNlcnRFbGVtZW50KGZ1bmN0aW9uKGRvYykgeyByZXR1cm4gYWZlY2xvbmUoZG9jLCBpKS5lbHQ7IH0pO1xuICAgICAgYWZlLmxpc3RbaV0gPSBuZXdlbHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXNlZCBieSB0aGUgYWRvcHRpb25BZ2VuY3koKSBmdW5jdGlvblxuICB2YXIgQk9PS01BUksgPSB7bG9jYWxOYW1lOlwiQk1cIn07XG5cbiAgZnVuY3Rpb24gYWRvcHRpb25BZ2VuY3kodGFnKSB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBhbiBIVE1MIGVsZW1lbnQgd2hvc2UgdGFnIG5hbWUgaXMgc3ViamVjdCxcbiAgICAvLyBhbmQgdGhlIGN1cnJlbnQgbm9kZSBpcyBub3QgaW4gdGhlIGxpc3Qgb2YgYWN0aXZlIGZvcm1hdHRpbmdcbiAgICAvLyBlbGVtZW50cywgdGhlbiBwb3AgdGhlIGN1cnJlbnQgbm9kZSBvZmYgdGhlIHN0YWNrIG9mIG9wZW5cbiAgICAvLyBlbGVtZW50cyBhbmQgYWJvcnQgdGhlc2Ugc3RlcHMuXG4gICAgaWYgKGlzQShzdGFjay50b3AsIHRhZykgJiYgYWZlLmluZGV4T2Yoc3RhY2sudG9wKSA9PT0gLTEpIHtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgcmV0dXJuIHRydWU7IC8vIG5vIG1vcmUgaGFuZGxpbmcgcmVxdWlyZWRcbiAgICB9XG5cbiAgICAvLyBMZXQgb3V0ZXIgbG9vcCBjb3VudGVyIGJlIHplcm8uXG4gICAgdmFyIG91dGVyID0gMDtcblxuICAgIC8vIE91dGVyIGxvb3A6IElmIG91dGVyIGxvb3AgY291bnRlciBpcyBncmVhdGVyIHRoYW4gb3JcbiAgICAvLyBlcXVhbCB0byBlaWdodCwgdGhlbiBhYm9ydCB0aGVzZSBzdGVwcy5cbiAgICB3aGlsZShvdXRlciA8IDgpIHtcbiAgICAgIC8vIEluY3JlbWVudCBvdXRlciBsb29wIGNvdW50ZXIgYnkgb25lLlxuICAgICAgb3V0ZXIrKztcblxuICAgICAgLy8gTGV0IHRoZSBmb3JtYXR0aW5nIGVsZW1lbnQgYmUgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgbGlzdFxuICAgICAgLy8gb2YgYWN0aXZlIGZvcm1hdHRpbmcgZWxlbWVudHMgdGhhdDogaXMgYmV0d2VlbiB0aGUgZW5kIG9mXG4gICAgICAvLyB0aGUgbGlzdCBhbmQgdGhlIGxhc3Qgc2NvcGUgbWFya2VyIGluIHRoZSBsaXN0LCBpZiBhbnksIG9yXG4gICAgICAvLyB0aGUgc3RhcnQgb2YgdGhlIGxpc3Qgb3RoZXJ3aXNlLCBhbmQgaGFzIHRoZSBzYW1lIHRhZyBuYW1lXG4gICAgICAvLyBhcyB0aGUgdG9rZW4uXG4gICAgICB2YXIgZm10ZWx0ID0gYWZlLmZpbmRFbGVtZW50QnlUYWcodGFnKTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gc3VjaCBub2RlLCB0aGVuIGFib3J0IHRoZXNlIHN0ZXBzIGFuZCBpbnN0ZWFkXG4gICAgICAvLyBhY3QgYXMgZGVzY3JpYmVkIGluIHRoZSBcImFueSBvdGhlciBlbmQgdGFnXCIgZW50cnkgYmVsb3cuXG4gICAgICBpZiAoIWZtdGVsdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIG1lYW5zIGhhbmRsZSBieSB0aGUgZGVmYXVsdCBjYXNlXG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgaWYgdGhlcmUgaXMgc3VjaCBhIG5vZGUsIGJ1dCB0aGF0IG5vZGUgaXMgbm90IGluXG4gICAgICAvLyB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cywgdGhlbiB0aGlzIGlzIGEgcGFyc2UgZXJyb3I7XG4gICAgICAvLyByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgbGlzdCwgYW5kIGFib3J0IHRoZXNlIHN0ZXBzLlxuICAgICAgdmFyIGluZGV4ID0gc3RhY2suZWxlbWVudHMubGFzdEluZGV4T2YoZm10ZWx0KTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWZlLnJlbW92ZShmbXRlbHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTsgICAvLyB0cnVlIG1lYW5zIG5vIG1vcmUgaGFuZGxpbmcgcmVxdWlyZWRcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGVyZSBpcyBzdWNoIGEgbm9kZSwgYW5kIHRoYXQgbm9kZSBpcyBhbHNvIGluXG4gICAgICAvLyB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cywgYnV0IHRoZSBlbGVtZW50IGlzIG5vdCBpbiBzY29wZSxcbiAgICAgIC8vIHRoZW4gdGhpcyBpcyBhIHBhcnNlIGVycm9yOyBpZ25vcmUgdGhlIHRva2VuLCBhbmQgYWJvcnRcbiAgICAgIC8vIHRoZXNlIHN0ZXBzLlxuICAgICAgaWYgKCFzdGFjay5lbGVtZW50SW5TY29wZShmbXRlbHQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBMZXQgdGhlIGZ1cnRoZXN0IGJsb2NrIGJlIHRoZSB0b3Btb3N0IG5vZGUgaW4gdGhlIHN0YWNrIG9mXG4gICAgICAvLyBvcGVuIGVsZW1lbnRzIHRoYXQgaXMgbG93ZXIgaW4gdGhlIHN0YWNrIHRoYW4gdGhlIGZvcm1hdHRpbmdcbiAgICAgIC8vIGVsZW1lbnQsIGFuZCBpcyBhbiBlbGVtZW50IGluIHRoZSBzcGVjaWFsIGNhdGVnb3J5LiBUaGVyZVxuICAgICAgLy8gbWlnaHQgbm90IGJlIG9uZS5cbiAgICAgIHZhciBmdXJ0aGVzdGJsb2NrID0gbnVsbCwgZnVydGhlc3RibG9ja2luZGV4O1xuICAgICAgZm9yKHZhciBpID0gaW5kZXgrMTsgaSA8IHN0YWNrLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0Eoc3RhY2suZWxlbWVudHNbaV0sIHNwZWNpYWxTZXQpKSB7XG4gICAgICAgICAgZnVydGhlc3RibG9jayA9IHN0YWNrLmVsZW1lbnRzW2ldO1xuICAgICAgICAgIGZ1cnRoZXN0YmxvY2tpbmRleCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gZnVydGhlc3QgYmxvY2ssIHRoZW4gdGhlIFVBIG11c3Qgc2tpcCB0aGVcbiAgICAgIC8vIHN1YnNlcXVlbnQgc3RlcHMgYW5kIGluc3RlYWQganVzdCBwb3AgYWxsIHRoZSBub2RlcyBmcm9tIHRoZVxuICAgICAgLy8gYm90dG9tIG9mIHRoZSBzdGFjayBvZiBvcGVuIGVsZW1lbnRzLCBmcm9tIHRoZSBjdXJyZW50IG5vZGVcbiAgICAgIC8vIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGZvcm1hdHRpbmcgZWxlbWVudCwgYW5kIHJlbW92ZSB0aGVcbiAgICAgIC8vIGZvcm1hdHRpbmcgZWxlbWVudCBmcm9tIHRoZSBsaXN0IG9mIGFjdGl2ZSBmb3JtYXR0aW5nXG4gICAgICAvLyBlbGVtZW50cy5cbiAgICAgIGlmICghZnVydGhlc3RibG9jaykge1xuICAgICAgICBzdGFjay5wb3BFbGVtZW50KGZtdGVsdCk7XG4gICAgICAgIGFmZS5yZW1vdmUoZm10ZWx0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gTGV0IHRoZSBjb21tb24gYW5jZXN0b3IgYmUgdGhlIGVsZW1lbnQgaW1tZWRpYXRlbHkgYWJvdmVcbiAgICAgICAgLy8gdGhlIGZvcm1hdHRpbmcgZWxlbWVudCBpbiB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cy5cbiAgICAgICAgdmFyIGFuY2VzdG9yID0gc3RhY2suZWxlbWVudHNbaW5kZXgtMV07XG5cbiAgICAgICAgLy8gTGV0IGEgYm9va21hcmsgbm90ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGZvcm1hdHRpbmdcbiAgICAgICAgLy8gZWxlbWVudCBpbiB0aGUgbGlzdCBvZiBhY3RpdmUgZm9ybWF0dGluZyBlbGVtZW50c1xuICAgICAgICAvLyByZWxhdGl2ZSB0byB0aGUgZWxlbWVudHMgb24gZWl0aGVyIHNpZGUgb2YgaXQgaW4gdGhlXG4gICAgICAgIC8vIGxpc3QuXG4gICAgICAgIGFmZS5pbnNlcnRBZnRlcihmbXRlbHQsIEJPT0tNQVJLKTtcblxuICAgICAgICAvLyBMZXQgbm9kZSBhbmQgbGFzdCBub2RlIGJlIHRoZSBmdXJ0aGVzdCBibG9jay5cbiAgICAgICAgdmFyIG5vZGUgPSBmdXJ0aGVzdGJsb2NrO1xuICAgICAgICB2YXIgbGFzdG5vZGUgPSBmdXJ0aGVzdGJsb2NrO1xuICAgICAgICB2YXIgbm9kZWluZGV4ID0gZnVydGhlc3RibG9ja2luZGV4O1xuICAgICAgICB2YXIgbm9kZWFmZWluZGV4O1xuXG4gICAgICAgIC8vIExldCBpbm5lciBsb29wIGNvdW50ZXIgYmUgemVyby5cbiAgICAgICAgdmFyIGlubmVyID0gMDtcblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXG4gICAgICAgICAgLy8gSW5jcmVtZW50IGlubmVyIGxvb3AgY291bnRlciBieSBvbmUuXG4gICAgICAgICAgaW5uZXIrKztcblxuICAgICAgICAgIC8vIExldCBub2RlIGJlIHRoZSBlbGVtZW50IGltbWVkaWF0ZWx5IGFib3ZlIG5vZGUgaW5cbiAgICAgICAgICAvLyB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cywgb3IgaWYgbm9kZSBpcyBubyBsb25nZXJcbiAgICAgICAgICAvLyBpbiB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cyAoZS5nLiBiZWNhdXNlIGl0IGdvdFxuICAgICAgICAgIC8vIHJlbW92ZWQgYnkgdGhpcyBhbGdvcml0aG0pLCB0aGUgZWxlbWVudCB0aGF0IHdhc1xuICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IGFib3ZlIG5vZGUgaW4gdGhlIHN0YWNrIG9mIG9wZW4gZWxlbWVudHNcbiAgICAgICAgICAvLyBiZWZvcmUgbm9kZSB3YXMgcmVtb3ZlZC5cbiAgICAgICAgICBub2RlID0gc3RhY2suZWxlbWVudHNbLS1ub2RlaW5kZXhdO1xuXG4gICAgICAgICAgLy8gSWYgbm9kZSBpcyB0aGUgZm9ybWF0dGluZyBlbGVtZW50LCB0aGVuIGdvXG4gICAgICAgICAgLy8gdG8gdGhlIG5leHQgc3RlcCBpbiB0aGUgb3ZlcmFsbCBhbGdvcml0aG0uXG4gICAgICAgICAgaWYgKG5vZGUgPT09IGZtdGVsdCkgYnJlYWs7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgaW5uZXIgbG9vcCBjb3VudGVyIGlzIGdyZWF0ZXIgdGhhbiB0aHJlZSBhbmQgbm9kZVxuICAgICAgICAgIC8vIGlzIGluIHRoZSBsaXN0IG9mIGFjdGl2ZSBmb3JtYXR0aW5nIGVsZW1lbnRzLCB0aGVuIHJlbW92ZVxuICAgICAgICAgIC8vIG5vZGUgZnJvbSB0aGUgbGlzdCBvZiBhY3RpdmUgZm9ybWF0dGluZyBlbGVtZW50cy5cbiAgICAgICAgICBub2RlYWZlaW5kZXggPSBhZmUuaW5kZXhPZihub2RlKTtcbiAgICAgICAgICBpZiAoaW5uZXIgPiAzICYmIG5vZGVhZmVpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFmZS5yZW1vdmUobm9kZSk7XG4gICAgICAgICAgICBub2RlYWZlaW5kZXggPSAtMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBub2RlIGlzIG5vdCBpbiB0aGUgbGlzdCBvZiBhY3RpdmUgZm9ybWF0dGluZ1xuICAgICAgICAgIC8vIGVsZW1lbnRzLCB0aGVuIHJlbW92ZSBub2RlIGZyb20gdGhlIHN0YWNrIG9mIG9wZW5cbiAgICAgICAgICAvLyBlbGVtZW50cyBhbmQgdGhlbiBnbyBiYWNrIHRvIHRoZSBzdGVwIGxhYmVsZWQgaW5uZXJcbiAgICAgICAgICAvLyBsb29wLlxuICAgICAgICAgIGlmIChub2RlYWZlaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBzdGFjay5yZW1vdmVFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIHRoZSB0b2tlbiBmb3Igd2hpY2ggdGhlXG4gICAgICAgICAgLy8gZWxlbWVudCBub2RlIHdhcyBjcmVhdGVkIHdpdGggY29tbW9uIGFuY2VzdG9yIGFzXG4gICAgICAgICAgLy8gdGhlIGludGVuZGVkIHBhcmVudCwgcmVwbGFjZSB0aGUgZW50cnkgZm9yIG5vZGVcbiAgICAgICAgICAvLyBpbiB0aGUgbGlzdCBvZiBhY3RpdmUgZm9ybWF0dGluZyBlbGVtZW50cyB3aXRoIGFuXG4gICAgICAgICAgLy8gZW50cnkgZm9yIHRoZSBuZXcgZWxlbWVudCwgcmVwbGFjZSB0aGUgZW50cnkgZm9yXG4gICAgICAgICAgLy8gbm9kZSBpbiB0aGUgc3RhY2sgb2Ygb3BlbiBlbGVtZW50cyB3aXRoIGFuIGVudHJ5IGZvclxuICAgICAgICAgIC8vIHRoZSBuZXcgZWxlbWVudCwgYW5kIGxldCBub2RlIGJlIHRoZSBuZXcgZWxlbWVudC5cbiAgICAgICAgICB2YXIgbmV3ZWx0ID0gYWZlY2xvbmUoYW5jZXN0b3Iub3duZXJEb2N1bWVudCwgbm9kZWFmZWluZGV4KTtcbiAgICAgICAgICBhZmUucmVwbGFjZShub2RlLCBuZXdlbHQuZWx0LCBuZXdlbHQuYXR0cnMpO1xuICAgICAgICAgIHN0YWNrLmVsZW1lbnRzW25vZGVpbmRleF0gPSBuZXdlbHQuZWx0O1xuICAgICAgICAgIG5vZGUgPSBuZXdlbHQuZWx0O1xuXG4gICAgICAgICAgLy8gSWYgbGFzdCBub2RlIGlzIHRoZSBmdXJ0aGVzdCBibG9jaywgdGhlbiBtb3ZlIHRoZVxuICAgICAgICAgIC8vIGFmb3JlbWVudGlvbmVkIGJvb2ttYXJrIHRvIGJlIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgICAgICAgIC8vIG5ldyBub2RlIGluIHRoZSBsaXN0IG9mIGFjdGl2ZSBmb3JtYXR0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgIGlmIChsYXN0bm9kZSA9PT0gZnVydGhlc3RibG9jaykge1xuICAgICAgICAgICAgYWZlLnJlbW92ZShCT09LTUFSSyk7XG4gICAgICAgICAgICBhZmUuaW5zZXJ0QWZ0ZXIobmV3ZWx0LmVsdCwgQk9PS01BUkspO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEluc2VydCBsYXN0IG5vZGUgaW50byBub2RlLCBmaXJzdCByZW1vdmluZyBpdCBmcm9tXG4gICAgICAgICAgLy8gaXRzIHByZXZpb3VzIHBhcmVudCBub2RlIGlmIGFueS5cbiAgICAgICAgICBub2RlLl9hcHBlbmRDaGlsZChsYXN0bm9kZSk7XG5cbiAgICAgICAgICAvLyBMZXQgbGFzdCBub2RlIGJlIG5vZGUuXG4gICAgICAgICAgbGFzdG5vZGUgPSBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGNvbW1vbiBhbmNlc3RvciBub2RlIGlzIGEgdGFibGUsIHRib2R5LCB0Zm9vdCxcbiAgICAgICAgLy8gdGhlYWQsIG9yIHRyIGVsZW1lbnQsIHRoZW4sIGZvc3RlciBwYXJlbnQgd2hhdGV2ZXIgbGFzdFxuICAgICAgICAvLyBub2RlIGVuZGVkIHVwIGJlaW5nIGluIHRoZSBwcmV2aW91cyBzdGVwLCBmaXJzdCByZW1vdmluZ1xuICAgICAgICAvLyBpdCBmcm9tIGl0cyBwcmV2aW91cyBwYXJlbnQgbm9kZSBpZiBhbnkuXG4gICAgICAgIGlmIChmb3N0ZXJfcGFyZW50X21vZGUgJiYgaXNBKGFuY2VzdG9yLCB0YWJsZXNlY3Rpb25yb3dTZXQpKSB7XG4gICAgICAgICAgZm9zdGVyUGFyZW50KGZ1bmN0aW9uKCkgeyByZXR1cm4gbGFzdG5vZGU7IH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgYXBwZW5kIHdoYXRldmVyIGxhc3Qgbm9kZSBlbmRlZCB1cCBiZWluZyBpblxuICAgICAgICAvLyB0aGUgcHJldmlvdXMgc3RlcCB0byB0aGUgY29tbW9uIGFuY2VzdG9yIG5vZGUsIGZpcnN0XG4gICAgICAgIC8vIHJlbW92aW5nIGl0IGZyb20gaXRzIHByZXZpb3VzIHBhcmVudCBub2RlIGlmIGFueS5cbiAgICAgICAgZWxzZSBpZiAoYW5jZXN0b3IgaW5zdGFuY2VvZiBpbXBsLkhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICBhbmNlc3Rvci5jb250ZW50Ll9hcHBlbmRDaGlsZChsYXN0bm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5jZXN0b3IuX2FwcGVuZENoaWxkKGxhc3Rub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBlbGVtZW50IGZvciB0aGUgdG9rZW4gZm9yIHdoaWNoIHRoZVxuICAgICAgICAvLyBmb3JtYXR0aW5nIGVsZW1lbnQgd2FzIGNyZWF0ZWQsIHdpdGggZnVydGhlc3QgYmxvY2tcbiAgICAgICAgLy8gYXMgdGhlIGludGVuZGVkIHBhcmVudC5cbiAgICAgICAgdmFyIG5ld2VsdDIgPSBhZmVjbG9uZShmdXJ0aGVzdGJsb2NrLm93bmVyRG9jdW1lbnQsIGFmZS5pbmRleE9mKGZtdGVsdCkpO1xuXG4gICAgICAgIC8vIFRha2UgYWxsIG9mIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZnVydGhlc3QgYmxvY2sgYW5kXG4gICAgICAgIC8vIGFwcGVuZCB0aGVtIHRvIHRoZSBlbGVtZW50IGNyZWF0ZWQgaW4gdGhlIGxhc3Qgc3RlcC5cbiAgICAgICAgd2hpbGUoZnVydGhlc3RibG9jay5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBuZXdlbHQyLmVsdC5fYXBwZW5kQ2hpbGQoZnVydGhlc3RibG9jay5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGVuZCB0aGF0IG5ldyBlbGVtZW50IHRvIHRoZSBmdXJ0aGVzdCBibG9jay5cbiAgICAgICAgZnVydGhlc3RibG9jay5fYXBwZW5kQ2hpbGQobmV3ZWx0Mi5lbHQpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZm9ybWF0dGluZyBlbGVtZW50IGZyb20gdGhlIGxpc3Qgb2YgYWN0aXZlXG4gICAgICAgIC8vIGZvcm1hdHRpbmcgZWxlbWVudHMsIGFuZCBpbnNlcnQgdGhlIG5ldyBlbGVtZW50IGludG8gdGhlXG4gICAgICAgIC8vIGxpc3Qgb2YgYWN0aXZlIGZvcm1hdHRpbmcgZWxlbWVudHMgYXQgdGhlIHBvc2l0aW9uIG9mXG4gICAgICAgIC8vIHRoZSBhZm9yZW1lbnRpb25lZCBib29rbWFyay5cbiAgICAgICAgYWZlLnJlbW92ZShmbXRlbHQpO1xuICAgICAgICBhZmUucmVwbGFjZShCT09LTUFSSywgbmV3ZWx0Mi5lbHQsIG5ld2VsdDIuYXR0cnMpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZm9ybWF0dGluZyBlbGVtZW50IGZyb20gdGhlIHN0YWNrIG9mIG9wZW5cbiAgICAgICAgLy8gZWxlbWVudHMsIGFuZCBpbnNlcnQgdGhlIG5ldyBlbGVtZW50IGludG8gdGhlIHN0YWNrIG9mXG4gICAgICAgIC8vIG9wZW4gZWxlbWVudHMgaW1tZWRpYXRlbHkgYmVsb3cgdGhlIHBvc2l0aW9uIG9mIHRoZVxuICAgICAgICAvLyBmdXJ0aGVzdCBibG9jayBpbiB0aGF0IHN0YWNrLlxuICAgICAgICBzdGFjay5yZW1vdmVFbGVtZW50KGZtdGVsdCk7XG4gICAgICAgIHZhciBwb3MgPSBzdGFjay5lbGVtZW50cy5sYXN0SW5kZXhPZihmdXJ0aGVzdGJsb2NrKTtcbiAgICAgICAgc3RhY2suZWxlbWVudHMuc3BsaWNlKHBvcysxLCAwLCBuZXdlbHQyLmVsdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBXZSBkbyB0aGlzIHdoZW4gd2UgZ2V0IC9zY3JpcHQgaW4gaW5fdGV4dF9tb2RlXG4gIGZ1bmN0aW9uIGhhbmRsZVNjcmlwdEVuZCgpIHtcbiAgICAvLyBYWFg6XG4gICAgLy8gVGhpcyBpcyBqdXN0IGEgc3R1YiBpbXBsZW1lbnRhdGlvbiByaWdodCBub3cgYW5kIGRvZXNuJ3QgcnVuIHNjcmlwdHMuXG4gICAgLy8gR2V0dGluZyB0aGlzIG1ldGhvZCByaWdodCBpbnZvbHZlcyB0aGUgZXZlbnQgbG9vcCwgVVJMIHJlc29sdXRpb25cbiAgICAvLyBzY3JpcHQgZmV0Y2hpbmcgZXRjLiBGb3Igbm93IEkganVzdCB3YW50IHRvIGJlIGFibGUgdG8gcGFyc2VcbiAgICAvLyBkb2N1bWVudHMgYW5kIHRlc3QgdGhlIHBhcnNlci5cblxuICAgIC8vdmFyIHNjcmlwdCA9IHN0YWNrLnRvcDtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBwYXJzZXIgPSBvcmlnaW5hbEluc2VydGlvbk1vZGU7XG4gICAgLy9zY3JpcHQuX3ByZXBhcmUoKTtcbiAgICByZXR1cm47XG5cbiAgICAvLyBYWFg6IGhlcmUgaXMgd2hhdCB0aGlzIG1ldGhvZCBpcyBzdXBwb3NlZCB0byBkb1xuXG4gICAgLy8gUHJvdmlkZSBhIHN0YWJsZSBzdGF0ZS5cblxuICAgIC8vIExldCBzY3JpcHQgYmUgdGhlIGN1cnJlbnQgbm9kZSAod2hpY2ggd2lsbCBiZSBhIHNjcmlwdFxuICAgIC8vIGVsZW1lbnQpLlxuXG4gICAgLy8gUG9wIHRoZSBjdXJyZW50IG5vZGUgb2ZmIHRoZSBzdGFjayBvZiBvcGVuIGVsZW1lbnRzLlxuXG4gICAgLy8gU3dpdGNoIHRoZSBpbnNlcnRpb24gbW9kZSB0byB0aGUgb3JpZ2luYWwgaW5zZXJ0aW9uIG1vZGUuXG5cbiAgICAvLyBMZXQgdGhlIG9sZCBpbnNlcnRpb24gcG9pbnQgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBhcyB0aGUgY3VycmVudFxuICAgIC8vIGluc2VydGlvbiBwb2ludC4gTGV0IHRoZSBpbnNlcnRpb24gcG9pbnQgYmUganVzdCBiZWZvcmUgdGhlXG4gICAgLy8gbmV4dCBpbnB1dCBjaGFyYWN0ZXIuXG5cbiAgICAvLyBJbmNyZW1lbnQgdGhlIHBhcnNlcidzIHNjcmlwdCBuZXN0aW5nIGxldmVsIGJ5IG9uZS5cblxuICAgIC8vIFByZXBhcmUgdGhlIHNjcmlwdC4gVGhpcyBtaWdodCBjYXVzZSBzb21lIHNjcmlwdCB0byBleGVjdXRlLFxuICAgIC8vIHdoaWNoIG1pZ2h0IGNhdXNlIG5ldyBjaGFyYWN0ZXJzIHRvIGJlIGluc2VydGVkIGludG8gdGhlXG4gICAgLy8gdG9rZW5pemVyLCBhbmQgbWlnaHQgY2F1c2UgdGhlIHRva2VuaXplciB0byBvdXRwdXQgbW9yZSB0b2tlbnMsXG4gICAgLy8gcmVzdWx0aW5nIGluIGEgcmVlbnRyYW50IGludm9jYXRpb24gb2YgdGhlIHBhcnNlci5cblxuICAgIC8vIERlY3JlbWVudCB0aGUgcGFyc2VyJ3Mgc2NyaXB0IG5lc3RpbmcgbGV2ZWwgYnkgb25lLiBJZiB0aGVcbiAgICAvLyBwYXJzZXIncyBzY3JpcHQgbmVzdGluZyBsZXZlbCBpcyB6ZXJvLCB0aGVuIHNldCB0aGUgcGFyc2VyXG4gICAgLy8gcGF1c2UgZmxhZyB0byBmYWxzZS5cblxuICAgIC8vIExldCB0aGUgaW5zZXJ0aW9uIHBvaW50IGhhdmUgdGhlIHZhbHVlIG9mIHRoZSBvbGQgaW5zZXJ0aW9uXG4gICAgLy8gcG9pbnQuIChJbiBvdGhlciB3b3JkcywgcmVzdG9yZSB0aGUgaW5zZXJ0aW9uIHBvaW50IHRvIGl0c1xuICAgIC8vIHByZXZpb3VzIHZhbHVlLiBUaGlzIHZhbHVlIG1pZ2h0IGJlIHRoZSBcInVuZGVmaW5lZFwiIHZhbHVlLilcblxuICAgIC8vIEF0IHRoaXMgc3RhZ2UsIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJzaW5nLWJsb2NraW5nIHNjcmlwdCxcbiAgICAvLyB0aGVuOlxuXG4gICAgLy8gSWYgdGhlIHNjcmlwdCBuZXN0aW5nIGxldmVsIGlzIG5vdCB6ZXJvOlxuXG4gICAgLy8gICBTZXQgdGhlIHBhcnNlciBwYXVzZSBmbGFnIHRvIHRydWUsIGFuZCBhYm9ydCB0aGUgcHJvY2Vzc2luZ1xuICAgIC8vICAgb2YgYW55IG5lc3RlZCBpbnZvY2F0aW9ucyBvZiB0aGUgdG9rZW5pemVyLCB5aWVsZGluZ1xuICAgIC8vICAgY29udHJvbCBiYWNrIHRvIHRoZSBjYWxsZXIuIChUb2tlbml6YXRpb24gd2lsbCByZXN1bWUgd2hlblxuICAgIC8vICAgdGhlIGNhbGxlciByZXR1cm5zIHRvIHRoZSBcIm91dGVyXCIgdHJlZSBjb25zdHJ1Y3Rpb24gc3RhZ2UuKVxuXG4gICAgLy8gICBUaGUgdHJlZSBjb25zdHJ1Y3Rpb24gc3RhZ2Ugb2YgdGhpcyBwYXJ0aWN1bGFyIHBhcnNlciBpc1xuICAgIC8vICAgYmVpbmcgY2FsbGVkIHJlZW50cmFudGx5LCBzYXkgZnJvbSBhIGNhbGwgdG9cbiAgICAvLyAgIGRvY3VtZW50LndyaXRlKCkuXG5cbiAgICAvLyBPdGhlcndpc2U6XG5cbiAgICAvLyAgICAgUnVuIHRoZXNlIHN0ZXBzOlxuXG4gICAgLy8gICAgICAgTGV0IHRoZSBzY3JpcHQgYmUgdGhlIHBlbmRpbmcgcGFyc2luZy1ibG9ja2luZ1xuICAgIC8vICAgICAgIHNjcmlwdC4gVGhlcmUgaXMgbm8gbG9uZ2VyIGEgcGVuZGluZ1xuICAgIC8vICAgICAgIHBhcnNpbmctYmxvY2tpbmcgc2NyaXB0LlxuXG4gICAgLy8gICAgICAgQmxvY2sgdGhlIHRva2VuaXplciBmb3IgdGhpcyBpbnN0YW5jZSBvZiB0aGUgSFRNTFxuICAgIC8vICAgICAgIHBhcnNlciwgc3VjaCB0aGF0IHRoZSBldmVudCBsb29wIHdpbGwgbm90IHJ1biB0YXNrc1xuICAgIC8vICAgICAgIHRoYXQgaW52b2tlIHRoZSB0b2tlbml6ZXIuXG5cbiAgICAvLyAgICAgICBJZiB0aGUgcGFyc2VyJ3MgRG9jdW1lbnQgaGFzIGEgc3R5bGUgc2hlZXQgdGhhdCBpc1xuICAgIC8vICAgICAgIGJsb2NraW5nIHNjcmlwdHMgb3IgdGhlIHNjcmlwdCdzIFwicmVhZHkgdG8gYmVcbiAgICAvLyAgICAgICBwYXJzZXItZXhlY3V0ZWRcIiBmbGFnIGlzIG5vdCBzZXQ6IHNwaW4gdGhlIGV2ZW50XG4gICAgLy8gICAgICAgbG9vcCB1bnRpbCB0aGUgcGFyc2VyJ3MgRG9jdW1lbnQgaGFzIG5vIHN0eWxlIHNoZWV0XG4gICAgLy8gICAgICAgdGhhdCBpcyBibG9ja2luZyBzY3JpcHRzIGFuZCB0aGUgc2NyaXB0J3MgXCJyZWFkeSB0b1xuICAgIC8vICAgICAgIGJlIHBhcnNlci1leGVjdXRlZFwiIGZsYWcgaXMgc2V0LlxuXG4gICAgLy8gICAgICAgVW5ibG9jayB0aGUgdG9rZW5pemVyIGZvciB0aGlzIGluc3RhbmNlIG9mIHRoZSBIVE1MXG4gICAgLy8gICAgICAgcGFyc2VyLCBzdWNoIHRoYXQgdGFza3MgdGhhdCBpbnZva2UgdGhlIHRva2VuaXplclxuICAgIC8vICAgICAgIGNhbiBhZ2FpbiBiZSBydW4uXG5cbiAgICAvLyAgICAgICBMZXQgdGhlIGluc2VydGlvbiBwb2ludCBiZSBqdXN0IGJlZm9yZSB0aGUgbmV4dFxuICAgIC8vICAgICAgIGlucHV0IGNoYXJhY3Rlci5cblxuICAgIC8vICAgICAgIEluY3JlbWVudCB0aGUgcGFyc2VyJ3Mgc2NyaXB0IG5lc3RpbmcgbGV2ZWwgYnkgb25lXG4gICAgLy8gICAgICAgKGl0IHNob3VsZCBiZSB6ZXJvIGJlZm9yZSB0aGlzIHN0ZXAsIHNvIHRoaXMgc2V0c1xuICAgIC8vICAgICAgIGl0IHRvIG9uZSkuXG5cbiAgICAvLyAgICAgICBFeGVjdXRlIHRoZSBzY3JpcHQuXG5cbiAgICAvLyAgICAgICBEZWNyZW1lbnQgdGhlIHBhcnNlcidzIHNjcmlwdCBuZXN0aW5nIGxldmVsIGJ5XG4gICAgLy8gICAgICAgb25lLiBJZiB0aGUgcGFyc2VyJ3Mgc2NyaXB0IG5lc3RpbmcgbGV2ZWwgaXMgemVyb1xuICAgIC8vICAgICAgICh3aGljaCBpdCBhbHdheXMgc2hvdWxkIGJlIGF0IHRoaXMgcG9pbnQpLCB0aGVuIHNldFxuICAgIC8vICAgICAgIHRoZSBwYXJzZXIgcGF1c2UgZmxhZyB0byBmYWxzZS5cblxuICAgIC8vICAgICAgIExldCB0aGUgaW5zZXJ0aW9uIHBvaW50IGJlIHVuZGVmaW5lZCBhZ2Fpbi5cblxuICAgIC8vICAgICAgIElmIHRoZXJlIGlzIG9uY2UgYWdhaW4gYSBwZW5kaW5nIHBhcnNpbmctYmxvY2tpbmdcbiAgICAvLyAgICAgICBzY3JpcHQsIHRoZW4gcmVwZWF0IHRoZXNlIHN0ZXBzIGZyb20gc3RlcCAxLlxuXG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3BQYXJzaW5nKCkge1xuICAgIC8vIFhYWCBUaGlzIGlzIGp1c3QgYSB0ZW1wb3JhcnkgaW1wbGVtZW50YXRpb24gdG8gZ2V0IHRoZSBwYXJzZXIgd29ya2luZy5cbiAgICAvLyBBIGZ1bGwgaW1wbGVtZW50YXRpb24gaW52b2x2ZXMgc2NyaXB0cyBhbmQgZXZlbnRzIGFuZCB0aGUgZXZlbnQgbG9vcC5cblxuICAgIC8vIFJlbW92ZSB0aGUgbGluayBmcm9tIGRvY3VtZW50IHRvIHBhcnNlci5cbiAgICAvLyBUaGlzIGlzIGluc3RlYWQgb2YgXCJzZXQgdGhlIGluc2VydGlvbiBwb2ludCB0byB1bmRlZmluZWRcIi5cbiAgICAvLyBJdCBtZWFucyB0aGF0IGRvY3VtZW50LndyaXRlKCkgY2FuJ3Qgd3JpdGUgaW50byB0aGUgZG9jIGFueW1vcmUuXG4gICAgZGVsZXRlIGRvYy5fcGFyc2VyO1xuXG4gICAgc3RhY2suZWxlbWVudHMubGVuZ3RoID0gMDsgLy8gcG9wIGV2ZXJ5dGhpbmcgb2ZmXG5cbiAgICAvLyBJZiB0aGVyZSBpcyBhIHdpbmRvdyBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBkb2N1bWVudFxuICAgIC8vIHRoZW4gdHJpZ2dlciBhbiBsb2FkIGV2ZW50IG9uIGl0XG4gICAgaWYgKGRvYy5kZWZhdWx0Vmlldykge1xuICAgICAgZG9jLmRlZmF1bHRWaWV3LmRpc3BhdGNoRXZlbnQobmV3IGltcGwuRXZlbnQoXCJsb2FkXCIse30pKTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKioqXG4gICAqIFRva2VuaXplciBzdGF0ZXNcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoaXMgZmlsZSB3YXMgcGFydGlhbGx5IG1lY2hhbmljYWxseSBnZW5lcmF0ZWQgZnJvbVxuICAgKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90b2tlbml6YXRpb24uaHRtbFxuICAgKlxuICAgKiBBZnRlciBtZWNoYW5pY2FsIGNvbnZlcnNpb24sIGl0IHdhcyBmdXJ0aGVyIGNvbnZlcnRlZCBmcm9tXG4gICAqIHByb3NlIHRvIEpTIGJ5IGhhbmQsIGJ1dCB0aGUgaW50ZW50IGlzIHRoYXQgaXQgaXMgYSB2ZXJ5XG4gICAqIGZhaXRoZnVsIHJlbmRlcmluZyBvZiB0aGUgSFRNTCB0b2tlbml6YXRpb24gc3BlYyBpblxuICAgKiBKYXZhU2NyaXB0LlxuICAgKlxuICAgKiBJdCBpcyBub3QgYSBnb2FsIG9mIHRoaXMgdG9rZW5pemVyIHRvIGRldGVjdCBvciByZXBvcnRcbiAgICogcGFyc2UgZXJyb3JzLlxuICAgKlxuICAgKiBYWFggVGhlIHRva2VuaXplciBpcyBzdXBwb3NlZCB0byB3b3JrIHdpdGggc3RyYWlnaHQgVVRGMzJcbiAgICogY29kZXBvaW50cy4gQnV0IEkgZG9uJ3QgdGhpbmsgaXQgaGFzIGFueSBkZXBlbmRlbmNpZXMgb25cbiAgICogYW55IGNoYXJhY3RlciBvdXRzaWRlIG9mIHRoZSBCTVAgc28gSSB0aGluayBpdCBpcyBzYWZlIHRvXG4gICAqIHBhc3MgaXQgVVRGMTYgY2hhcmFjdGVycy4gSSBkb24ndCB0aGluayBpdCB3aWxsIGV2ZXIgY2hhbmdlXG4gICAqIHN0YXRlIGluIHRoZSBtaWRkbGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICovXG5cbiAgLypcbiAgICogRWFjaCBzdGF0ZSBpcyByZXByZXNlbnRlZCBieSBhIGZ1bmN0aW9uLiAgRm9yIG1vc3Qgc3RhdGVzLCB0aGVcbiAgICogc2Nhbm5lciBzaW1wbHkgcGFzc2VzIHRoZSBuZXh0IGNoYXJhY3RlciAoYXMgYW4gaW50ZWdlclxuICAgKiBjb2RlcG9pbnQpIHRvIHRoZSBjdXJyZW50IHN0YXRlIGZ1bmN0aW9uIGFuZCBhdXRvbWF0aWNhbGx5XG4gICAqIGNvbnN1bWVzIHRoZSBjaGFyYWN0ZXIuICBJZiB0aGUgc3RhdGUgZnVuY3Rpb24gY2FuJ3QgcHJvY2Vzc1xuICAgKiB0aGUgY2hhcmFjdGVyIGl0IGNhbiBjYWxsIHB1c2hiYWNrKCkgdG8gcHVzaCBpdCBiYWNrIHRvIHRoZVxuICAgKiBzY2FubmVyLlxuICAgKlxuICAgKiBTb21lIHN0YXRlcyByZXF1aXJlIGxvb2thaGVhZCwgdGhvdWdoLiAgSWYgYSBzdGF0ZSBmdW5jdGlvbiBoYXNcbiAgICogYSBsb29rYWhlYWQgcHJvcGVydHksIHRoZW4gaXQgaXMgaW52b2tlZCBkaWZmZXJlbnRseS4gIEluIHRoaXNcbiAgICogY2FzZSwgdGhlIHNjYW5uZXIgaW52b2tlcyB0aGUgZnVuY3Rpb24gd2l0aCAzIGFyZ3VtZW50czogMSkgdGhlXG4gICAqIG5leHQgY29kZXBvaW50IDIpIGEgc3RyaW5nIG9mIGxvb2thaGVhZCB0ZXh0IDMpIGEgYm9vbGVhbiB0aGF0XG4gICAqIGlzIHRydWUgaWYgdGhlIGxvb2thaGVhZCBnb2VzIGFsbCB0aGUgd2F5IHRvIHRoZSBFT0YuIChYWFhcbiAgICogYWN0dWFsbHkgbWF5YmUgdGhpcyB0aGlyZCBpcyBub3QgbmVjZXNzYXJ5Li4uIHRoZSBsb29rYWhlYWRcbiAgICogY291bGQganVzdCBpbmNsdWRlIFxcdUZGRkY/KVxuICAgKlxuICAgKiBJZiB0aGUgbG9va2FoZWFkIHByb3BlcnR5IG9mIGEgc3RhdGUgZnVuY3Rpb24gaXMgYW4gaW50ZWdlciwgaXRcbiAgICogc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyByZXF1aXJlZC4gSWYgaXQgaXMgYSBzdHJpbmcsXG4gICAqIHRoZW4gdGhlIHNjYW5uZXIgd2lsbCBzY2FuIGZvciB0aGF0IHN0cmluZyBhbmQgcmV0dXJuIGFsbFxuICAgKiBjaGFyYWN0ZXJzIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhhdCBzZXF1ZW5jZSwgb3IgdXAgdG8gRU9GLiAgSWZcbiAgICogdGhlIGxvb2thaGVhZCBwcm9wZXJ0eSBpcyBhIHJlZ2V4cCwgdGhlbiB0aGUgc2Nhbm5lciB3aWxsIG1hdGNoXG4gICAqIHRoZSByZWdleHAgYXQgdGhlIGN1cnJlbnQgcG9pbnQgYW5kIHJldHVybiB0aGUgbWF0Y2hpbmcgc3RyaW5nLlxuICAgKlxuICAgKiBTdGF0ZXMgdGhhdCByZXF1aXJlIGxvb2thaGVhZCBhcmUgcmVzcG9uc2libGUgZm9yIGV4cGxpY2l0bHlcbiAgICogY29uc3VtaW5nIHRoZSBjaGFyYWN0ZXJzIHRoZXkgcHJvY2Vzcy4gVGhleSBkbyB0aGlzIGJ5XG4gICAqIGluY3JlbWVudGluZyBuZXh0Y2hhciBieSB0aGUgbnVtYmVyIG9mIHByb2Nlc3NlZCBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVjb25zdW1lKGMsIG5ld19zdGF0ZSkge1xuICAgIHRva2VuaXplciA9IG5ld19zdGF0ZTtcbiAgICBuZXh0Y2hhci0tOyAvLyBwdXNoYmFja1xuICB9XG5cbiAgZnVuY3Rpb24gZGF0YV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyNjogLy8gQU1QRVJTQU5EXG4gICAgICByZXR1cm5fc3RhdGUgPSBkYXRhX3N0YXRlO1xuICAgICAgdG9rZW5pemVyID0gY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgaWYgKGVtaXRTaW1wbGVUYWcoKSkgLy8gU2hvcnRjdXQgZm9yIDxwPiwgPGRsPiwgPC9kaXY+IGV0Yy5cbiAgICAgICAgYnJlYWs7XG4gICAgICB0b2tlbml6ZXIgPSB0YWdfb3Blbl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICAvLyBVc3VhbGx5IG51bGwgY2hhcmFjdGVycyBlbWl0dGVkIGJ5IHRoZSB0b2tlbml6ZXIgd2lsbCBiZVxuICAgICAgLy8gaWdub3JlZCBieSB0aGUgdHJlZSBidWlsZGVyLCBidXQgc29tZXRpbWVzIHRoZXknbGwgYmVcbiAgICAgIC8vIGNvbnZlcnRlZCB0byBcXHVGRkZELiAgSSBkb24ndCB3YW50IHRvIGhhdmUgdGhlIHNlYXJjaCBldmVyeVxuICAgICAgLy8gc3RyaW5nIGVtaXR0ZWQgdG8gcmVwbGFjZSBOVUxzLCBzbyBJJ2xsIHNldCBhIGZsYWdcbiAgICAgIC8vIGlmIEkndmUgZW1pdHRlZCBhIE5VTC5cbiAgICAgIHRleHRydW4ucHVzaChjKTtcbiAgICAgIHRleHRJbmNsdWRlc05VTCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBJbnN0ZWFkIG9mIGp1c3QgcHVzaGluZyBhIHNpbmdsZSBjaGFyYWN0ZXIgYW5kIHRoZW5cbiAgICAgIC8vIGNvbWluZyBiYWNrIHRvIHRoZSB2ZXJ5IHNhbWUgcGxhY2UsIGxvb2thaGVhZCBhbmRcbiAgICAgIC8vIGVtaXQgZXZlcnl0aGluZyB3ZSBjYW4gYXQgb25jZS5cbiAgICAgIC8qanNoaW50IC1XMDMwICovXG4gICAgICBlbWl0Q2hhcnNXaGlsZShEQVRBVEVYVCkgfHwgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmNkYXRhX3N0YXRlKGMpIHtcbiAgICAvLyBTYXZlIHRoZSBvcGVuIHRhZyBzbyB3ZSBjYW4gZmluZCBhIG1hdGNoaW5nIGNsb3NlIHRhZ1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMjY6IC8vIEFNUEVSU0FORFxuICAgICAgcmV0dXJuX3N0YXRlID0gcmNkYXRhX3N0YXRlO1xuICAgICAgdG9rZW5pemVyID0gY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gcmNkYXRhX2xlc3NfdGhhbl9zaWduX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIHRleHRydW4ucHVzaCgweEZGRkQpOyAvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVJcbiAgICAgIHRleHRJbmNsdWRlc05VTCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYXd0ZXh0X3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gcmF3dGV4dF9sZXNzX3RoYW5fc2lnbl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvKmpzaGludCAtVzAzMCAqL1xuICAgICAgZW1pdENoYXJzV2hpbGUoUkFXVEVYVCkgfHwgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwM0M6IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9sZXNzX3RoYW5fc2lnbl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvKmpzaGludCAtVzAzMCAqL1xuICAgICAgZW1pdENoYXJzV2hpbGUoUkFXVEVYVCkgfHwgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGxhaW50ZXh0X3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvKmpzaGludCAtVzAzMCAqL1xuICAgICAgZW1pdENoYXJzV2hpbGUoUExBSU5URVhUKSB8fCB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0YWdfb3Blbl9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyMTogLy8gRVhDTEFNQVRJT04gTUFSS1xuICAgICAgdG9rZW5pemVyID0gbWFya3VwX2RlY2xhcmF0aW9uX29wZW5fc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgICAgdG9rZW5pemVyID0gZW5kX3RhZ19vcGVuX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwNDE6ICAvLyBbQS1aXVxuICAgIGNhc2UgMHgwMDQyOmNhc2UgMHgwMDQzOmNhc2UgMHgwMDQ0OmNhc2UgMHgwMDQ1OmNhc2UgMHgwMDQ2OlxuICAgIGNhc2UgMHgwMDQ3OmNhc2UgMHgwMDQ4OmNhc2UgMHgwMDQ5OmNhc2UgMHgwMDRBOmNhc2UgMHgwMDRCOlxuICAgIGNhc2UgMHgwMDRDOmNhc2UgMHgwMDREOmNhc2UgMHgwMDRFOmNhc2UgMHgwMDRGOmNhc2UgMHgwMDUwOlxuICAgIGNhc2UgMHgwMDUxOmNhc2UgMHgwMDUyOmNhc2UgMHgwMDUzOmNhc2UgMHgwMDU0OmNhc2UgMHgwMDU1OlxuICAgIGNhc2UgMHgwMDU2OmNhc2UgMHgwMDU3OmNhc2UgMHgwMDU4OmNhc2UgMHgwMDU5OmNhc2UgMHgwMDVBOlxuICAgIGNhc2UgMHgwMDYxOiAgLy8gW2Etel1cbiAgICBjYXNlIDB4MDA2MjpjYXNlIDB4MDA2MzpjYXNlIDB4MDA2NDpjYXNlIDB4MDA2NTpjYXNlIDB4MDA2NjpcbiAgICBjYXNlIDB4MDA2NzpjYXNlIDB4MDA2ODpjYXNlIDB4MDA2OTpjYXNlIDB4MDA2QTpjYXNlIDB4MDA2QjpcbiAgICBjYXNlIDB4MDA2QzpjYXNlIDB4MDA2RDpjYXNlIDB4MDA2RTpjYXNlIDB4MDA2RjpjYXNlIDB4MDA3MDpcbiAgICBjYXNlIDB4MDA3MTpjYXNlIDB4MDA3MjpjYXNlIDB4MDA3MzpjYXNlIDB4MDA3NDpjYXNlIDB4MDA3NTpcbiAgICBjYXNlIDB4MDA3NjpjYXNlIDB4MDA3NzpjYXNlIDB4MDA3ODpjYXNlIDB4MDA3OTpjYXNlIDB4MDA3QTpcbiAgICAgIGJlZ2luVGFnTmFtZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIHRhZ19uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNGOiAvLyBRVUVTVElPTiBNQVJLXG4gICAgICByZWNvbnN1bWUoYywgYm9ndXNfY29tbWVudF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICByZWNvbnN1bWUoYywgZGF0YV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbmRfdGFnX29wZW5fc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwNDE6ICAvLyBbQS1aXVxuICAgIGNhc2UgMHgwMDQyOmNhc2UgMHgwMDQzOmNhc2UgMHgwMDQ0OmNhc2UgMHgwMDQ1OmNhc2UgMHgwMDQ2OlxuICAgIGNhc2UgMHgwMDQ3OmNhc2UgMHgwMDQ4OmNhc2UgMHgwMDQ5OmNhc2UgMHgwMDRBOmNhc2UgMHgwMDRCOlxuICAgIGNhc2UgMHgwMDRDOmNhc2UgMHgwMDREOmNhc2UgMHgwMDRFOmNhc2UgMHgwMDRGOmNhc2UgMHgwMDUwOlxuICAgIGNhc2UgMHgwMDUxOmNhc2UgMHgwMDUyOmNhc2UgMHgwMDUzOmNhc2UgMHgwMDU0OmNhc2UgMHgwMDU1OlxuICAgIGNhc2UgMHgwMDU2OmNhc2UgMHgwMDU3OmNhc2UgMHgwMDU4OmNhc2UgMHgwMDU5OmNhc2UgMHgwMDVBOlxuICAgIGNhc2UgMHgwMDYxOiAgLy8gW2Etel1cbiAgICBjYXNlIDB4MDA2MjpjYXNlIDB4MDA2MzpjYXNlIDB4MDA2NDpjYXNlIDB4MDA2NTpjYXNlIDB4MDA2NjpcbiAgICBjYXNlIDB4MDA2NzpjYXNlIDB4MDA2ODpjYXNlIDB4MDA2OTpjYXNlIDB4MDA2QTpjYXNlIDB4MDA2QjpcbiAgICBjYXNlIDB4MDA2QzpjYXNlIDB4MDA2RDpjYXNlIDB4MDA2RTpjYXNlIDB4MDA2RjpjYXNlIDB4MDA3MDpcbiAgICBjYXNlIDB4MDA3MTpjYXNlIDB4MDA3MjpjYXNlIDB4MDA3MzpjYXNlIDB4MDA3NDpjYXNlIDB4MDA3NTpcbiAgICBjYXNlIDB4MDA3NjpjYXNlIDB4MDA3NzpjYXNlIDB4MDA3ODpjYXNlIDB4MDA3OTpjYXNlIDB4MDA3QTpcbiAgICAgIGJlZ2luRW5kVGFnTmFtZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIHRhZ19uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDJGKTsgLy8gU09MSURVU1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY29uc3VtZShjLCBib2d1c19jb21tZW50X3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRhZ19uYW1lX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMkY6IC8vIFNPTElEVVNcbiAgICAgIHRva2VuaXplciA9IHNlbGZfY2xvc2luZ19zdGFydF90YWdfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0VGFnKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgICB0YWduYW1lYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyArIDB4MDAyMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgdGFnbmFtZWJ1ZiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCAvKiBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKi8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGFnbmFtZWJ1ZiArPSBnZXRNYXRjaGluZ0NoYXJzKFRBR05BTUUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmNkYXRhX2xlc3NfdGhhbl9zaWduX3N0YXRlKGMpIHtcbiAgICAvKiBpZGVudGljYWwgdG8gdGhlIFJBV1RFWFQgbGVzcy10aGFuIHNpZ24gc3RhdGUsIGV4Y2VwdCBzL1JBV1RFWFQvUkNEQVRBL2cgKi9cbiAgICBpZiAoYyA9PT0gMHgwMDJGKSB7ICAvLyBTT0xJRFVTXG4gICAgICBiZWdpblRlbXBCdWYoKTtcbiAgICAgIHRva2VuaXplciA9IHJjZGF0YV9lbmRfdGFnX29wZW5fc3RhdGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICByZWNvbnN1bWUoYywgcmNkYXRhX3N0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByY2RhdGFfZW5kX3RhZ19vcGVuX3N0YXRlKGMpIHtcbiAgICAvKiBpZGVudGljYWwgdG8gdGhlIFJBV1RFWFQgKGFuZCBTY3JpcHQgZGF0YSkgZW5kIHRhZyBvcGVuIHN0YXRlLCBleGNlcHQgcy9SQVdURVhUL1JDREFUQS9nICovXG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgY2FzZSAweDAwNjE6ICAvLyBbYS16XVxuICAgIGNhc2UgMHgwMDYyOmNhc2UgMHgwMDYzOmNhc2UgMHgwMDY0OmNhc2UgMHgwMDY1OmNhc2UgMHgwMDY2OlxuICAgIGNhc2UgMHgwMDY3OmNhc2UgMHgwMDY4OmNhc2UgMHgwMDY5OmNhc2UgMHgwMDZBOmNhc2UgMHgwMDZCOlxuICAgIGNhc2UgMHgwMDZDOmNhc2UgMHgwMDZEOmNhc2UgMHgwMDZFOmNhc2UgMHgwMDZGOmNhc2UgMHgwMDcwOlxuICAgIGNhc2UgMHgwMDcxOmNhc2UgMHgwMDcyOmNhc2UgMHgwMDczOmNhc2UgMHgwMDc0OmNhc2UgMHgwMDc1OlxuICAgIGNhc2UgMHgwMDc2OmNhc2UgMHgwMDc3OmNhc2UgMHgwMDc4OmNhc2UgMHgwMDc5OmNhc2UgMHgwMDdBOlxuICAgICAgYmVnaW5FbmRUYWdOYW1lKCk7XG4gICAgICByZWNvbnN1bWUoYywgcmNkYXRhX2VuZF90YWdfbmFtZV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDJGKTsgLy8gU09MSURVU1xuICAgICAgcmVjb25zdW1lKGMsIHJjZGF0YV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByY2RhdGFfZW5kX3RhZ19uYW1lX3N0YXRlKGMpIHtcbiAgICAvKiBpZGVudGljYWwgdG8gdGhlIFJBV1RFWFQgKGFuZCBTY3JpcHQgZGF0YSkgZW5kIHRhZyBuYW1lIHN0YXRlLCBleGNlcHQgcy9SQVdURVhUL1JDREFUQS9nICovXG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIGlmIChhcHByb3ByaWF0ZUVuZFRhZyh0YWduYW1lYnVmKSkge1xuICAgICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDJGOiAvLyBTT0xJRFVTXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgICAgZW1pdFRhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG5cbiAgICAgIHRhZ25hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICsgMHgwMDIwKTtcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDB4MDA2MTogIC8vIFthLXpdXG4gICAgY2FzZSAweDAwNjI6Y2FzZSAweDAwNjM6Y2FzZSAweDAwNjQ6Y2FzZSAweDAwNjU6Y2FzZSAweDAwNjY6XG4gICAgY2FzZSAweDAwNjc6Y2FzZSAweDAwNjg6Y2FzZSAweDAwNjk6Y2FzZSAweDAwNkE6Y2FzZSAweDAwNkI6XG4gICAgY2FzZSAweDAwNkM6Y2FzZSAweDAwNkQ6Y2FzZSAweDAwNkU6Y2FzZSAweDAwNkY6Y2FzZSAweDAwNzA6XG4gICAgY2FzZSAweDAwNzE6Y2FzZSAweDAwNzI6Y2FzZSAweDAwNzM6Y2FzZSAweDAwNzQ6Y2FzZSAweDAwNzU6XG4gICAgY2FzZSAweDAwNzY6Y2FzZSAweDAwNzc6Y2FzZSAweDAwNzg6Y2FzZSAweDAwNzk6Y2FzZSAweDAwN0E6XG5cbiAgICAgIHRhZ25hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZG9uJ3QgcmV0dXJuIGluIG9uZSBvZiB0aGUgY2FzZXMgYWJvdmUsIHRoZW4gdGhpcyB3YXMgbm90XG4gICAgLy8gYW4gYXBwcm9wcmlhdGVseSBtYXRjaGluZyBjbG9zZSB0YWcsIHNvIGJhY2sgb3V0IGJ5IGVtaXR0aW5nIGFsbFxuICAgIC8vIHRoZSBjaGFyYWN0ZXJzIGFzIHRleHRcbiAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICB0ZXh0cnVuLnB1c2goMHgwMDJGKTsgLy8gU09MSURVU1xuICAgIHB1c2hBbGwodGV4dHJ1biwgdGVtcGJ1Zik7XG4gICAgcmVjb25zdW1lKGMsIHJjZGF0YV9zdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByYXd0ZXh0X2xlc3NfdGhhbl9zaWduX3N0YXRlKGMpIHtcbiAgICAvKiBpZGVudGljYWwgdG8gdGhlIFJDREFUQSBsZXNzLXRoYW4gc2lnbiBzdGF0ZSwgZXhjZXB0IHMvUkNEQVRBL1JBV1RFWFQvZ1xuICAgICAqL1xuICAgIGlmIChjID09PSAweDAwMkYpIHsgLy8gU09MSURVU1xuICAgICAgYmVnaW5UZW1wQnVmKCk7XG4gICAgICB0b2tlbml6ZXIgPSByYXd0ZXh0X2VuZF90YWdfb3Blbl9zdGF0ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIHJlY29uc3VtZShjLCByYXd0ZXh0X3N0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYXd0ZXh0X2VuZF90YWdfb3Blbl9zdGF0ZShjKSB7XG4gICAgLyogaWRlbnRpY2FsIHRvIHRoZSBSQ0RBVEEgKGFuZCBTY3JpcHQgZGF0YSkgZW5kIHRhZyBvcGVuIHN0YXRlLCBleGNlcHQgcy9SQ0RBVEEvUkFXVEVYVC9nICovXG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgY2FzZSAweDAwNjE6ICAvLyBbYS16XVxuICAgIGNhc2UgMHgwMDYyOmNhc2UgMHgwMDYzOmNhc2UgMHgwMDY0OmNhc2UgMHgwMDY1OmNhc2UgMHgwMDY2OlxuICAgIGNhc2UgMHgwMDY3OmNhc2UgMHgwMDY4OmNhc2UgMHgwMDY5OmNhc2UgMHgwMDZBOmNhc2UgMHgwMDZCOlxuICAgIGNhc2UgMHgwMDZDOmNhc2UgMHgwMDZEOmNhc2UgMHgwMDZFOmNhc2UgMHgwMDZGOmNhc2UgMHgwMDcwOlxuICAgIGNhc2UgMHgwMDcxOmNhc2UgMHgwMDcyOmNhc2UgMHgwMDczOmNhc2UgMHgwMDc0OmNhc2UgMHgwMDc1OlxuICAgIGNhc2UgMHgwMDc2OmNhc2UgMHgwMDc3OmNhc2UgMHgwMDc4OmNhc2UgMHgwMDc5OmNhc2UgMHgwMDdBOlxuICAgICAgYmVnaW5FbmRUYWdOYW1lKCk7XG4gICAgICByZWNvbnN1bWUoYywgcmF3dGV4dF9lbmRfdGFnX25hbWVfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRleHRydW4ucHVzaCgweDAwM0MpOyAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAyRik7IC8vIFNPTElEVVNcbiAgICAgIHJlY29uc3VtZShjLCByYXd0ZXh0X3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJhd3RleHRfZW5kX3RhZ19uYW1lX3N0YXRlKGMpIHtcbiAgICAvKiBpZGVudGljYWwgdG8gdGhlIFJDREFUQSAoYW5kIFNjcmlwdCBkYXRhKSBlbmQgdGFnIG5hbWUgc3RhdGUsIGV4Y2VwdCBzL1JDREFUQS9SQVdURVhUL2cgKi9cbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgaWYgKGFwcHJvcHJpYXRlRW5kVGFnKHRhZ25hbWVidWYpKSB7XG4gICAgICAgIHRva2VuaXplciA9IGJlZm9yZV9hdHRyaWJ1dGVfbmFtZV9zdGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMkY6IC8vIFNPTElEVVNcbiAgICAgIGlmIChhcHByb3ByaWF0ZUVuZFRhZyh0YWduYW1lYnVmKSkge1xuICAgICAgICB0b2tlbml6ZXIgPSBzZWxmX2Nsb3Npbmdfc3RhcnRfdGFnX3N0YXRlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGlmIChhcHByb3ByaWF0ZUVuZFRhZyh0YWduYW1lYnVmKSkge1xuICAgICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgICBlbWl0VGFnKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDQxOiAgLy8gW0EtWl1cbiAgICBjYXNlIDB4MDA0MjpjYXNlIDB4MDA0MzpjYXNlIDB4MDA0NDpjYXNlIDB4MDA0NTpjYXNlIDB4MDA0NjpcbiAgICBjYXNlIDB4MDA0NzpjYXNlIDB4MDA0ODpjYXNlIDB4MDA0OTpjYXNlIDB4MDA0QTpjYXNlIDB4MDA0QjpcbiAgICBjYXNlIDB4MDA0QzpjYXNlIDB4MDA0RDpjYXNlIDB4MDA0RTpjYXNlIDB4MDA0RjpjYXNlIDB4MDA1MDpcbiAgICBjYXNlIDB4MDA1MTpjYXNlIDB4MDA1MjpjYXNlIDB4MDA1MzpjYXNlIDB4MDA1NDpjYXNlIDB4MDA1NTpcbiAgICBjYXNlIDB4MDA1NjpjYXNlIDB4MDA1NzpjYXNlIDB4MDA1ODpjYXNlIDB4MDA1OTpjYXNlIDB4MDA1QTpcbiAgICAgIHRhZ25hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICsgMHgwMDIwKTtcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDB4MDA2MTogIC8vIFthLXpdXG4gICAgY2FzZSAweDAwNjI6Y2FzZSAweDAwNjM6Y2FzZSAweDAwNjQ6Y2FzZSAweDAwNjU6Y2FzZSAweDAwNjY6XG4gICAgY2FzZSAweDAwNjc6Y2FzZSAweDAwNjg6Y2FzZSAweDAwNjk6Y2FzZSAweDAwNkE6Y2FzZSAweDAwNkI6XG4gICAgY2FzZSAweDAwNkM6Y2FzZSAweDAwNkQ6Y2FzZSAweDAwNkU6Y2FzZSAweDAwNkY6Y2FzZSAweDAwNzA6XG4gICAgY2FzZSAweDAwNzE6Y2FzZSAweDAwNzI6Y2FzZSAweDAwNzM6Y2FzZSAweDAwNzQ6Y2FzZSAweDAwNzU6XG4gICAgY2FzZSAweDAwNzY6Y2FzZSAweDAwNzc6Y2FzZSAweDAwNzg6Y2FzZSAweDAwNzk6Y2FzZSAweDAwN0E6XG4gICAgICB0YWduYW1lYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICB0ZW1wYnVmLnB1c2goYyk7XG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGRvbid0IHJldHVybiBpbiBvbmUgb2YgdGhlIGNhc2VzIGFib3ZlLCB0aGVuIHRoaXMgd2FzIG5vdFxuICAgIC8vIGFuIGFwcHJvcHJpYXRlbHkgbWF0Y2hpbmcgY2xvc2UgdGFnLCBzbyBiYWNrIG91dCBieSBlbWl0dGluZyBhbGxcbiAgICAvLyB0aGUgY2hhcmFjdGVycyBhcyB0ZXh0XG4gICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgdGV4dHJ1bi5wdXNoKDB4MDAyRik7IC8vIFNPTElEVVNcbiAgICBwdXNoQWxsKHRleHRydW4sdGVtcGJ1Zik7XG4gICAgcmVjb25zdW1lKGMsIHJhd3RleHRfc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfbGVzc190aGFuX3NpZ25fc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMkY6IC8vIFNPTElEVVNcbiAgICAgIGJlZ2luVGVtcEJ1ZigpO1xuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZW5kX3RhZ19vcGVuX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMjE6IC8vIEVYQ0xBTUFUSU9OIE1BUktcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZV9zdGFydF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwM0MpOyAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAyMSk7IC8vIEVYQ0xBTUFUSU9OIE1BUktcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIHJlY29uc3VtZShjLCBzY3JpcHRfZGF0YV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JpcHRfZGF0YV9lbmRfdGFnX29wZW5fc3RhdGUoYykge1xuICAgIC8qIGlkZW50aWNhbCB0byB0aGUgUkNEQVRBIChhbmQgUkFXVEVYVCkgZW5kIHRhZyBvcGVuIHN0YXRlLCBleGNlcHQgcy9SQ0RBVEEvU2NyaXB0IGRhdGEvZyAqL1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwNDE6ICAvLyBbQS1aXVxuICAgIGNhc2UgMHgwMDQyOmNhc2UgMHgwMDQzOmNhc2UgMHgwMDQ0OmNhc2UgMHgwMDQ1OmNhc2UgMHgwMDQ2OlxuICAgIGNhc2UgMHgwMDQ3OmNhc2UgMHgwMDQ4OmNhc2UgMHgwMDQ5OmNhc2UgMHgwMDRBOmNhc2UgMHgwMDRCOlxuICAgIGNhc2UgMHgwMDRDOmNhc2UgMHgwMDREOmNhc2UgMHgwMDRFOmNhc2UgMHgwMDRGOmNhc2UgMHgwMDUwOlxuICAgIGNhc2UgMHgwMDUxOmNhc2UgMHgwMDUyOmNhc2UgMHgwMDUzOmNhc2UgMHgwMDU0OmNhc2UgMHgwMDU1OlxuICAgIGNhc2UgMHgwMDU2OmNhc2UgMHgwMDU3OmNhc2UgMHgwMDU4OmNhc2UgMHgwMDU5OmNhc2UgMHgwMDVBOlxuICAgIGNhc2UgMHgwMDYxOiAgLy8gW2Etel1cbiAgICBjYXNlIDB4MDA2MjpjYXNlIDB4MDA2MzpjYXNlIDB4MDA2NDpjYXNlIDB4MDA2NTpjYXNlIDB4MDA2NjpcbiAgICBjYXNlIDB4MDA2NzpjYXNlIDB4MDA2ODpjYXNlIDB4MDA2OTpjYXNlIDB4MDA2QTpjYXNlIDB4MDA2QjpcbiAgICBjYXNlIDB4MDA2QzpjYXNlIDB4MDA2RDpjYXNlIDB4MDA2RTpjYXNlIDB4MDA2RjpjYXNlIDB4MDA3MDpcbiAgICBjYXNlIDB4MDA3MTpjYXNlIDB4MDA3MjpjYXNlIDB4MDA3MzpjYXNlIDB4MDA3NDpjYXNlIDB4MDA3NTpcbiAgICBjYXNlIDB4MDA3NjpjYXNlIDB4MDA3NzpjYXNlIDB4MDA3ODpjYXNlIDB4MDA3OTpjYXNlIDB4MDA3QTpcbiAgICAgIGJlZ2luRW5kVGFnTmFtZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2VuZF90YWdfbmFtZV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAzQyk7IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDJGKTsgLy8gU09MSURVU1xuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcmlwdF9kYXRhX2VuZF90YWdfbmFtZV9zdGF0ZShjKSB7XG4gICAgLyogaWRlbnRpY2FsIHRvIHRoZSBSQ0RBVEEgKGFuZCBSQVdURVhUKSBlbmQgdGFnIG5hbWUgc3RhdGUsIGV4Y2VwdCBzL1JDREFUQS9TY3JpcHQgZGF0YS9nICovXG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIGlmIChhcHByb3ByaWF0ZUVuZFRhZyh0YWduYW1lYnVmKSkge1xuICAgICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDJGOiAvLyBTT0xJRFVTXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgICAgZW1pdFRhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG5cbiAgICAgIHRhZ25hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICsgMHgwMDIwKTtcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDB4MDA2MTogIC8vIFthLXpdXG4gICAgY2FzZSAweDAwNjI6Y2FzZSAweDAwNjM6Y2FzZSAweDAwNjQ6Y2FzZSAweDAwNjU6Y2FzZSAweDAwNjY6XG4gICAgY2FzZSAweDAwNjc6Y2FzZSAweDAwNjg6Y2FzZSAweDAwNjk6Y2FzZSAweDAwNkE6Y2FzZSAweDAwNkI6XG4gICAgY2FzZSAweDAwNkM6Y2FzZSAweDAwNkQ6Y2FzZSAweDAwNkU6Y2FzZSAweDAwNkY6Y2FzZSAweDAwNzA6XG4gICAgY2FzZSAweDAwNzE6Y2FzZSAweDAwNzI6Y2FzZSAweDAwNzM6Y2FzZSAweDAwNzQ6Y2FzZSAweDAwNzU6XG4gICAgY2FzZSAweDAwNzY6Y2FzZSAweDAwNzc6Y2FzZSAweDAwNzg6Y2FzZSAweDAwNzk6Y2FzZSAweDAwN0E6XG5cbiAgICAgIHRhZ25hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZG9uJ3QgcmV0dXJuIGluIG9uZSBvZiB0aGUgY2FzZXMgYWJvdmUsIHRoZW4gdGhpcyB3YXMgbm90XG4gICAgLy8gYW4gYXBwcm9wcmlhdGVseSBtYXRjaGluZyBjbG9zZSB0YWcsIHNvIGJhY2sgb3V0IGJ5IGVtaXR0aW5nIGFsbFxuICAgIC8vIHRoZSBjaGFyYWN0ZXJzIGFzIHRleHRcbiAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICB0ZXh0cnVuLnB1c2goMHgwMDJGKTsgLy8gU09MSURVU1xuICAgIHB1c2hBbGwodGV4dHJ1bix0ZW1wYnVmKTtcbiAgICByZWNvbnN1bWUoYywgc2NyaXB0X2RhdGFfc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlX3N0YXJ0X3N0YXRlKGMpIHtcbiAgICBpZiAoYyA9PT0gMHgwMDJEKSB7IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZXNjYXBlX3N0YXJ0X2Rhc2hfc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDJEKTsgLy8gSFlQSEVOLU1JTlVTXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX3N0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JpcHRfZGF0YV9lc2NhcGVfc3RhcnRfZGFzaF9zdGF0ZShjKSB7XG4gICAgaWYgKGMgPT09IDB4MDAyRCkgeyAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfZGFzaF9kYXNoX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAyRCk7IC8vIEhZUEhFTi1NSU5VU1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlY29uc3VtZShjLCBzY3JpcHRfZGF0YV9zdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyRDogLy8gSFlQSEVOLU1JTlVTXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX2Rhc2hfc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDJEKTsgLy8gSFlQSEVOLU1JTlVTXG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzQzogLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfbGVzc190aGFuX3NpZ25fc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgdGV4dHJ1bi5wdXNoKDB4RkZGRCk7IC8vIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlZF9kYXNoX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfZGFzaF9kYXNoX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAyRCk7IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0M6IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX2xlc3NfdGhhbl9zaWduX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlZF9kYXNoX2Rhc2hfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMkQ6IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDAyRCk7IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0M6IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX2xlc3NfdGhhbl9zaWduX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwM0UpOyAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlZF9sZXNzX3RoYW5fc2lnbl9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgICAgYmVnaW5UZW1wQnVmKCk7XG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9lc2NhcGVkX2VuZF90YWdfb3Blbl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDQxOiAgLy8gW0EtWl1cbiAgICBjYXNlIDB4MDA0MjpjYXNlIDB4MDA0MzpjYXNlIDB4MDA0NDpjYXNlIDB4MDA0NTpjYXNlIDB4MDA0NjpcbiAgICBjYXNlIDB4MDA0NzpjYXNlIDB4MDA0ODpjYXNlIDB4MDA0OTpjYXNlIDB4MDA0QTpjYXNlIDB4MDA0QjpcbiAgICBjYXNlIDB4MDA0QzpjYXNlIDB4MDA0RDpjYXNlIDB4MDA0RTpjYXNlIDB4MDA0RjpjYXNlIDB4MDA1MDpcbiAgICBjYXNlIDB4MDA1MTpjYXNlIDB4MDA1MjpjYXNlIDB4MDA1MzpjYXNlIDB4MDA1NDpjYXNlIDB4MDA1NTpcbiAgICBjYXNlIDB4MDA1NjpjYXNlIDB4MDA1NzpjYXNlIDB4MDA1ODpjYXNlIDB4MDA1OTpjYXNlIDB4MDA1QTpcbiAgICBjYXNlIDB4MDA2MTogIC8vIFthLXpdXG4gICAgY2FzZSAweDAwNjI6Y2FzZSAweDAwNjM6Y2FzZSAweDAwNjQ6Y2FzZSAweDAwNjU6Y2FzZSAweDAwNjY6XG4gICAgY2FzZSAweDAwNjc6Y2FzZSAweDAwNjg6Y2FzZSAweDAwNjk6Y2FzZSAweDAwNkE6Y2FzZSAweDAwNkI6XG4gICAgY2FzZSAweDAwNkM6Y2FzZSAweDAwNkQ6Y2FzZSAweDAwNkU6Y2FzZSAweDAwNkY6Y2FzZSAweDAwNzA6XG4gICAgY2FzZSAweDAwNzE6Y2FzZSAweDAwNzI6Y2FzZSAweDAwNzM6Y2FzZSAweDAwNzQ6Y2FzZSAweDAwNzU6XG4gICAgY2FzZSAweDAwNzY6Y2FzZSAweDAwNzc6Y2FzZSAweDAwNzg6Y2FzZSAweDAwNzk6Y2FzZSAweDAwN0E6XG4gICAgICBiZWdpblRlbXBCdWYoKTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwM0MpOyAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVfc3RhcnRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRleHRydW4ucHVzaCgweDAwM0MpOyAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2VzY2FwZWRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZXNjYXBlZF9lbmRfdGFnX29wZW5fc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwNDE6ICAvLyBbQS1aXVxuICAgIGNhc2UgMHgwMDQyOmNhc2UgMHgwMDQzOmNhc2UgMHgwMDQ0OmNhc2UgMHgwMDQ1OmNhc2UgMHgwMDQ2OlxuICAgIGNhc2UgMHgwMDQ3OmNhc2UgMHgwMDQ4OmNhc2UgMHgwMDQ5OmNhc2UgMHgwMDRBOmNhc2UgMHgwMDRCOlxuICAgIGNhc2UgMHgwMDRDOmNhc2UgMHgwMDREOmNhc2UgMHgwMDRFOmNhc2UgMHgwMDRGOmNhc2UgMHgwMDUwOlxuICAgIGNhc2UgMHgwMDUxOmNhc2UgMHgwMDUyOmNhc2UgMHgwMDUzOmNhc2UgMHgwMDU0OmNhc2UgMHgwMDU1OlxuICAgIGNhc2UgMHgwMDU2OmNhc2UgMHgwMDU3OmNhc2UgMHgwMDU4OmNhc2UgMHgwMDU5OmNhc2UgMHgwMDVBOlxuICAgIGNhc2UgMHgwMDYxOiAgLy8gW2Etel1cbiAgICBjYXNlIDB4MDA2MjpjYXNlIDB4MDA2MzpjYXNlIDB4MDA2NDpjYXNlIDB4MDA2NTpjYXNlIDB4MDA2NjpcbiAgICBjYXNlIDB4MDA2NzpjYXNlIDB4MDA2ODpjYXNlIDB4MDA2OTpjYXNlIDB4MDA2QTpjYXNlIDB4MDA2QjpcbiAgICBjYXNlIDB4MDA2QzpjYXNlIDB4MDA2RDpjYXNlIDB4MDA2RTpjYXNlIDB4MDA2RjpjYXNlIDB4MDA3MDpcbiAgICBjYXNlIDB4MDA3MTpjYXNlIDB4MDA3MjpjYXNlIDB4MDA3MzpjYXNlIDB4MDA3NDpjYXNlIDB4MDA3NTpcbiAgICBjYXNlIDB4MDA3NjpjYXNlIDB4MDA3NzpjYXNlIDB4MDA3ODpjYXNlIDB4MDA3OTpjYXNlIDB4MDA3QTpcbiAgICAgIGJlZ2luRW5kVGFnTmFtZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2VzY2FwZWRfZW5kX3RhZ19uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIHRleHRydW4ucHVzaCgweDAwMkYpOyAvLyBTT0xJRFVTXG4gICAgICByZWNvbnN1bWUoYywgc2NyaXB0X2RhdGFfZXNjYXBlZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JpcHRfZGF0YV9lc2NhcGVkX2VuZF90YWdfbmFtZV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIGlmIChhcHByb3ByaWF0ZUVuZFRhZyh0YWduYW1lYnVmKSkge1xuICAgICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDJGOiAvLyBTT0xJRFVTXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBpZiAoYXBwcm9wcmlhdGVFbmRUYWcodGFnbmFtZWJ1ZikpIHtcbiAgICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgICAgZW1pdFRhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgICB0YWduYW1lYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyArIDB4MDAyMCk7XG4gICAgICB0ZW1wYnVmLnB1c2goYyk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAweDAwNjE6ICAvLyBbYS16XVxuICAgIGNhc2UgMHgwMDYyOmNhc2UgMHgwMDYzOmNhc2UgMHgwMDY0OmNhc2UgMHgwMDY1OmNhc2UgMHgwMDY2OlxuICAgIGNhc2UgMHgwMDY3OmNhc2UgMHgwMDY4OmNhc2UgMHgwMDY5OmNhc2UgMHgwMDZBOmNhc2UgMHgwMDZCOlxuICAgIGNhc2UgMHgwMDZDOmNhc2UgMHgwMDZEOmNhc2UgMHgwMDZFOmNhc2UgMHgwMDZGOmNhc2UgMHgwMDcwOlxuICAgIGNhc2UgMHgwMDcxOmNhc2UgMHgwMDcyOmNhc2UgMHgwMDczOmNhc2UgMHgwMDc0OmNhc2UgMHgwMDc1OlxuICAgIGNhc2UgMHgwMDc2OmNhc2UgMHgwMDc3OmNhc2UgMHgwMDc4OmNhc2UgMHgwMDc5OmNhc2UgMHgwMDdBOlxuICAgICAgdGFnbmFtZWJ1ZiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgdGVtcGJ1Zi5wdXNoKGMpO1xuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBXZSBnZXQgaGVyZSBpbiB0aGUgZGVmYXVsdCBjYXNlLCBhbmQgaWYgdGhlIGNsb3NpbmcgdGFnbmFtZVxuICAgIC8vIGlzIG5vdCBhbiBhcHByb3ByaWF0ZSB0YWduYW1lLlxuICAgIHRleHRydW4ucHVzaCgweDAwM0MpOyAvLyBMRVNTLVRIQU4gU0lHTlxuICAgIHRleHRydW4ucHVzaCgweDAwMkYpOyAvLyBTT0xJRFVTXG4gICAgcHVzaEFsbCh0ZXh0cnVuLHRlbXBidWYpO1xuICAgIHJlY29uc3VtZShjLCBzY3JpcHRfZGF0YV9lc2NhcGVkX3N0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVfc3RhcnRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFXG4gICAgY2FzZSAweDAwMkY6IC8vIFNPTElEVVNcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGlmIChidWYyc3RyKHRlbXBidWYpID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVkX3N0YXRlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2VzY2FwZWRfc3RhdGU7XG4gICAgICB9XG4gICAgICB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgICB0ZW1wYnVmLnB1c2goYyArIDB4MDAyMCk7XG4gICAgICB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA2MTogIC8vIFthLXpdXG4gICAgY2FzZSAweDAwNjI6Y2FzZSAweDAwNjM6Y2FzZSAweDAwNjQ6Y2FzZSAweDAwNjU6Y2FzZSAweDAwNjY6XG4gICAgY2FzZSAweDAwNjc6Y2FzZSAweDAwNjg6Y2FzZSAweDAwNjk6Y2FzZSAweDAwNkE6Y2FzZSAweDAwNkI6XG4gICAgY2FzZSAweDAwNkM6Y2FzZSAweDAwNkQ6Y2FzZSAweDAwNkU6Y2FzZSAweDAwNkY6Y2FzZSAweDAwNzA6XG4gICAgY2FzZSAweDAwNzE6Y2FzZSAweDAwNzI6Y2FzZSAweDAwNzM6Y2FzZSAweDAwNzQ6Y2FzZSAweDAwNzU6XG4gICAgY2FzZSAweDAwNzY6Y2FzZSAweDAwNzc6Y2FzZSAweDAwNzg6Y2FzZSAweDAwNzk6Y2FzZSAweDAwN0E6XG4gICAgICB0ZW1wYnVmLnB1c2goYyk7XG4gICAgICB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2VzY2FwZWRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMkQ6IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfZGFzaF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwMkQpOyAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfbGVzc190aGFuX3NpZ25fc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0ZXh0cnVuLnB1c2goMHhGRkZEKTsgLy8gUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0ZXh0cnVuLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlZF9kYXNoX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVkX2Rhc2hfZGFzaF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwMkQpOyAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfbGVzc190aGFuX3NpZ25fc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlZF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweEZGRkQpOyAvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVJcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVkX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfZGFzaF9kYXNoX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRleHRydW4ucHVzaCgweDAwMkQpOyAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfbGVzc190aGFuX3NpZ25fc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNDKTsgLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfc3RhdGU7XG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDNFKTsgLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlZF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweEZGRkQpOyAvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVJcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRva2VuaXplciA9IHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVkX3N0YXRlO1xuICAgICAgdGV4dHJ1bi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfbGVzc190aGFuX3NpZ25fc3RhdGUoYykge1xuICAgIGlmIChjID09PSAweDAwMkYpIHsgLy8gU09MSURVU1xuICAgICAgYmVnaW5UZW1wQnVmKCk7XG4gICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlX2VuZF9zdGF0ZTtcbiAgICAgIHRleHRydW4ucHVzaCgweDAwMkYpOyAvLyBTT0xJRFVTXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVjb25zdW1lKGMsIHNjcmlwdF9kYXRhX2RvdWJsZV9lc2NhcGVkX3N0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlX2VuZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgaWYgKGJ1ZjJzdHIodGVtcGJ1ZikgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfZXNjYXBlZF9zdGF0ZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0b2tlbml6ZXIgPSBzY3JpcHRfZGF0YV9kb3VibGVfZXNjYXBlZF9zdGF0ZTtcbiAgICAgIH1cbiAgICAgIHRleHRydW4ucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDQxOiAgLy8gW0EtWl1cbiAgICBjYXNlIDB4MDA0MjpjYXNlIDB4MDA0MzpjYXNlIDB4MDA0NDpjYXNlIDB4MDA0NTpjYXNlIDB4MDA0NjpcbiAgICBjYXNlIDB4MDA0NzpjYXNlIDB4MDA0ODpjYXNlIDB4MDA0OTpjYXNlIDB4MDA0QTpjYXNlIDB4MDA0QjpcbiAgICBjYXNlIDB4MDA0QzpjYXNlIDB4MDA0RDpjYXNlIDB4MDA0RTpjYXNlIDB4MDA0RjpjYXNlIDB4MDA1MDpcbiAgICBjYXNlIDB4MDA1MTpjYXNlIDB4MDA1MjpjYXNlIDB4MDA1MzpjYXNlIDB4MDA1NDpjYXNlIDB4MDA1NTpcbiAgICBjYXNlIDB4MDA1NjpjYXNlIDB4MDA1NzpjYXNlIDB4MDA1ODpjYXNlIDB4MDA1OTpjYXNlIDB4MDA1QTpcbiAgICAgIHRlbXBidWYucHVzaChjICsgMHgwMDIwKTtcbiAgICAgIHRleHRydW4ucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDYxOiAgLy8gW2Etel1cbiAgICBjYXNlIDB4MDA2MjpjYXNlIDB4MDA2MzpjYXNlIDB4MDA2NDpjYXNlIDB4MDA2NTpjYXNlIDB4MDA2NjpcbiAgICBjYXNlIDB4MDA2NzpjYXNlIDB4MDA2ODpjYXNlIDB4MDA2OTpjYXNlIDB4MDA2QTpjYXNlIDB4MDA2QjpcbiAgICBjYXNlIDB4MDA2QzpjYXNlIDB4MDA2RDpjYXNlIDB4MDA2RTpjYXNlIDB4MDA2RjpjYXNlIDB4MDA3MDpcbiAgICBjYXNlIDB4MDA3MTpjYXNlIDB4MDA3MjpjYXNlIDB4MDA3MzpjYXNlIDB4MDA3NDpjYXNlIDB4MDA3NTpcbiAgICBjYXNlIDB4MDA3NjpjYXNlIDB4MDA3NzpjYXNlIDB4MDA3ODpjYXNlIDB4MDA3OTpjYXNlIDB4MDA3QTpcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHRleHRydW4ucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgc2NyaXB0X2RhdGFfZG91YmxlX2VzY2FwZWRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgLyogSWdub3JlIHRoZSBjaGFyYWN0ZXIuICovXG4gICAgICBicmVhaztcbiAgICAvLyBGb3IgU09MSURVUywgR1JFQVRFUi1USEFOIFNJR04sIGFuZCBFT0YsIHNwZWMgc2F5cyBcInJlY29uc3VtZSBpblxuICAgIC8vIHRoZSBhZnRlciBhdHRyaWJ1dGUgbmFtZSBzdGF0ZVwiLCBidXQgaW4gb3VyIGltcGxlbWVudGF0aW9uIHRoYXRcbiAgICAvLyBzdGF0ZSBhbHdheXMgaGFzIGFuIGFjdGl2ZSBhdHRyaWJ1dGUgaW4gYXR0cm5hbWVidWYuICBKdXN0IGNsb25lXG4gICAgLy8gdGhlIHJ1bGVzIGhlcmUsIHdpdGhvdXQgdGhlIGFkZEF0dHJpYnV0ZSBidXNpbmVzcy5cbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgICAgdG9rZW5pemVyID0gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXRUYWcoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0Q6IC8vIEVRVUFMUyBTSUdOXG4gICAgICBiZWdpbkF0dHJOYW1lKCk7XG4gICAgICBhdHRybmFtZWJ1ZiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgdG9rZW5pemVyID0gYXR0cmlidXRlX25hbWVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGhhbmRsZVNpbXBsZUF0dHJpYnV0ZSgpKSBicmVhaztcbiAgICAgIGJlZ2luQXR0ck5hbWUoKTtcbiAgICAgIHJlY29uc3VtZShjLCBhdHRyaWJ1dGVfbmFtZV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBiZWdpbkF0dHJOYW1lKCkgbXVzdCBoYXZlIGJlZW4gY2FsbGVkIGJlZm9yZSB0aGlzIHBvaW50XG4gIC8vIFRoZXJlIGlzIGFuIGFjdGl2ZSBhdHRyaWJ1dGUgaW4gYXR0cm5hbWVidWYgKGJ1dCBub3QgYXR0cnZhbHVlYnVmKVxuICBmdW5jdGlvbiBhdHRyaWJ1dGVfbmFtZV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgcmVjb25zdW1lKGMsIGFmdGVyX2F0dHJpYnV0ZV9uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNEOiAvLyBFUVVBTFMgU0lHTlxuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2F0dHJpYnV0ZV92YWx1ZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDQxOiAgLy8gW0EtWl1cbiAgICBjYXNlIDB4MDA0MjpjYXNlIDB4MDA0MzpjYXNlIDB4MDA0NDpjYXNlIDB4MDA0NTpjYXNlIDB4MDA0NjpcbiAgICBjYXNlIDB4MDA0NzpjYXNlIDB4MDA0ODpjYXNlIDB4MDA0OTpjYXNlIDB4MDA0QTpjYXNlIDB4MDA0QjpcbiAgICBjYXNlIDB4MDA0QzpjYXNlIDB4MDA0RDpjYXNlIDB4MDA0RTpjYXNlIDB4MDA0RjpjYXNlIDB4MDA1MDpcbiAgICBjYXNlIDB4MDA1MTpjYXNlIDB4MDA1MjpjYXNlIDB4MDA1MzpjYXNlIDB4MDA1NDpjYXNlIDB4MDA1NTpcbiAgICBjYXNlIDB4MDA1NjpjYXNlIDB4MDA1NzpjYXNlIDB4MDA1ODpjYXNlIDB4MDA1OTpjYXNlIDB4MDA1QTpcbiAgICAgIGF0dHJuYW1lYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyArIDB4MDAyMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgYXR0cm5hbWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQgLyogUkVQTEFDRU1FTlQgQ0hBUkFDVEVSICovKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDIyOiAvLyBRVU9UQVRJT04gTUFSS1xuICAgIGNhc2UgMHgwMDI3OiAvLyBBUE9TVFJPUEhFXG4gICAgY2FzZSAweDAwM0M6IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgZGVmYXVsdDpcbiAgICAgIGF0dHJuYW1lYnVmICs9IGdldE1hdGNoaW5nQ2hhcnMoQVRUUk5BTUUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhlcmUgaXMgYW4gYWN0aXZlIGF0dHJpYnV0ZSBpbiBhdHRybmFtZWJ1ZiwgYnV0IG5vdCB5ZXQgaW4gYXR0cnZhbHVlYnVmLlxuICBmdW5jdGlvbiBhZnRlcl9hdHRyaWJ1dGVfbmFtZV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIC8qIElnbm9yZSB0aGUgY2hhcmFjdGVyLiAqL1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMkY6IC8vIFNPTElEVVNcbiAgICAgIC8vIEtlZXAgaW4gc3luYyB3aXRoIGJlZm9yZV9hdHRyaWJ1dGVfbmFtZV9zdGF0ZS5cbiAgICAgIGFkZEF0dHJpYnV0ZShhdHRybmFtZWJ1Zik7XG4gICAgICB0b2tlbml6ZXIgPSBzZWxmX2Nsb3Npbmdfc3RhcnRfdGFnX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0Q6IC8vIEVRVUFMUyBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfYXR0cmlidXRlX3ZhbHVlX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICAvLyBLZWVwIGluIHN5bmMgd2l0aCBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGUuXG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgYWRkQXR0cmlidXRlKGF0dHJuYW1lYnVmKTtcbiAgICAgIGVtaXRUYWcoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgLy8gS2VlcCBpbiBzeW5jIHdpdGggYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlLlxuICAgICAgYWRkQXR0cmlidXRlKGF0dHJuYW1lYnVmKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBhZGRBdHRyaWJ1dGUoYXR0cm5hbWVidWYpO1xuICAgICAgYmVnaW5BdHRyTmFtZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIGF0dHJpYnV0ZV9uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZV9hdHRyaWJ1dGVfdmFsdWVfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFXG4gICAgICAvKiBJZ25vcmUgdGhlIGNoYXJhY3Rlci4gKi9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDIyOiAvLyBRVU9UQVRJT04gTUFSS1xuICAgICAgYmVnaW5BdHRyVmFsdWUoKTtcbiAgICAgIHRva2VuaXplciA9IGF0dHJpYnV0ZV92YWx1ZV9kb3VibGVfcXVvdGVkX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMjc6IC8vIEFQT1NUUk9QSEVcbiAgICAgIGJlZ2luQXR0clZhbHVlKCk7XG4gICAgICB0b2tlbml6ZXIgPSBhdHRyaWJ1dGVfdmFsdWVfc2luZ2xlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICBiZWdpbkF0dHJWYWx1ZSgpO1xuICAgICAgcmVjb25zdW1lKGMsIGF0dHJpYnV0ZV92YWx1ZV91bnF1b3RlZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyaWJ1dGVfdmFsdWVfZG91YmxlX3F1b3RlZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICAgIGFkZEF0dHJpYnV0ZShhdHRybmFtZWJ1ZiwgYXR0cnZhbHVlYnVmKTtcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2F0dHJpYnV0ZV92YWx1ZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyNjogLy8gQU1QRVJTQU5EXG4gICAgICByZXR1cm5fc3RhdGUgPSBhdHRyaWJ1dGVfdmFsdWVfZG91YmxlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIHRva2VuaXplciA9IGNoYXJhY3Rlcl9yZWZlcmVuY2Vfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgYXR0cnZhbHVlYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEIC8qIFJFUExBQ0VNRU5UIENIQVJBQ1RFUiAqLyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDBBOiAvLyBMRlxuICAgICAgLy8gdGhpcyBjb3VsZCBiZSBhIGNvbnZlcnRlZCBcXHIsIHNvIGRvbid0IHVzZSBnZXRNYXRjaGluZ0NoYXJzXG4gICAgICBhdHRydmFsdWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBhdHRydmFsdWVidWYgKz0gZ2V0TWF0Y2hpbmdDaGFycyhEQkxRVU9URUFUVFJWQUwpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cmlidXRlX3ZhbHVlX3NpbmdsZV9xdW90ZWRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMjc6IC8vIEFQT1NUUk9QSEVcbiAgICAgIGFkZEF0dHJpYnV0ZShhdHRybmFtZWJ1ZiwgYXR0cnZhbHVlYnVmKTtcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2F0dHJpYnV0ZV92YWx1ZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyNjogLy8gQU1QRVJTQU5EXG4gICAgICByZXR1cm5fc3RhdGUgPSBhdHRyaWJ1dGVfdmFsdWVfc2luZ2xlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIHRva2VuaXplciA9IGNoYXJhY3Rlcl9yZWZlcmVuY2Vfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgYXR0cnZhbHVlYnVmICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEIC8qIFJFUExBQ0VNRU5UIENIQVJBQ1RFUiAqLyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDBBOiAvLyBMRlxuICAgICAgLy8gdGhpcyBjb3VsZCBiZSBhIGNvbnZlcnRlZCBcXHIsIHNvIGRvbid0IHVzZSBnZXRNYXRjaGluZ0NoYXJzXG4gICAgICBhdHRydmFsdWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBhdHRydmFsdWVidWYgKz0gZ2V0TWF0Y2hpbmdDaGFycyhTSU5HTEVRVU9URUFUVFJWQUwpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cmlidXRlX3ZhbHVlX3VucXVvdGVkX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgYWRkQXR0cmlidXRlKGF0dHJuYW1lYnVmLCBhdHRydmFsdWVidWYpO1xuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMjY6IC8vIEFNUEVSU0FORFxuICAgICAgcmV0dXJuX3N0YXRlID0gYXR0cmlidXRlX3ZhbHVlX3VucXVvdGVkX3N0YXRlO1xuICAgICAgdG9rZW5pemVyID0gY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgYWRkQXR0cmlidXRlKGF0dHJuYW1lYnVmLCBhdHRydmFsdWVidWYpO1xuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXRUYWcoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICBhdHRydmFsdWVidWYgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQgLyogUkVQTEFDRU1FTlQgQ0hBUkFDVEVSICovKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgbmV4dGNoYXItLTsgLy8gcHVzaGJhY2tcbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICBjYXNlIDB4MDAyNzogLy8gQVBPU1RST1BIRVxuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgIGNhc2UgMHgwMDNEOiAvLyBFUVVBTFMgU0lHTlxuICAgIGNhc2UgMHgwMDYwOiAvLyBHUkFWRSBBQ0NFTlRcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICBkZWZhdWx0OlxuICAgICAgYXR0cnZhbHVlYnVmICs9IGdldE1hdGNoaW5nQ2hhcnMoVU5RVU9URURBVFRSVkFMKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyX2F0dHJpYnV0ZV92YWx1ZV9xdW90ZWRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFXG4gICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyRjogLy8gU09MSURVU1xuICAgICAgdG9rZW5pemVyID0gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXRUYWcoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY29uc3VtZShjLCBiZWZvcmVfYXR0cmlidXRlX25hbWVfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2VsZl9jbG9zaW5nX3N0YXJ0X3RhZ19zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIC8vIFNldCB0aGUgPGk+c2VsZi1jbG9zaW5nIGZsYWc8L2k+IG9mIHRoZSBjdXJyZW50IHRhZyB0b2tlbi5cbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0U2VsZkNsb3NpbmdUYWcodHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgYmVmb3JlX2F0dHJpYnV0ZV9uYW1lX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJvZ3VzX2NvbW1lbnRfc3RhdGUoYywgbG9va2FoZWFkLCBlb2YpIHtcbiAgICB2YXIgbGVuID0gbG9va2FoZWFkLmxlbmd0aDtcblxuICAgIGlmIChlb2YpIHtcbiAgICAgIG5leHRjaGFyICs9IGxlbi0xOyAvLyBkb24ndCBjb25zdW1lIHRoZSBlb2ZcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBuZXh0Y2hhciArPSBsZW47XG4gICAgfVxuXG4gICAgdmFyIGNvbW1lbnQgPSBsb29rYWhlYWQuc3Vic3RyaW5nKDAsIGxlbi0xKTtcblxuICAgIGNvbW1lbnQgPSBjb21tZW50LnJlcGxhY2UoL1xcdTAwMDAvZyxcIlxcdUZGRkRcIik7XG4gICAgY29tbWVudCA9IGNvbW1lbnQucmVwbGFjZSgvXFx1MDAwRFxcdTAwMEEvZyxcIlxcdTAwMEFcIik7XG4gICAgY29tbWVudCA9IGNvbW1lbnQucmVwbGFjZSgvXFx1MDAwRC9nLFwiXFx1MDAwQVwiKTtcblxuICAgIGluc2VydFRva2VuKENPTU1FTlQsIGNvbW1lbnQpO1xuICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gIH1cbiAgYm9ndXNfY29tbWVudF9zdGF0ZS5sb29rYWhlYWQgPSBcIj5cIjtcblxuICBmdW5jdGlvbiBtYXJrdXBfZGVjbGFyYXRpb25fb3Blbl9zdGF0ZShjLCBsb29rYWhlYWQsIGVvZikge1xuICAgIGlmIChsb29rYWhlYWRbMF0gPT09IFwiLVwiICYmIGxvb2thaGVhZFsxXSA9PT0gXCItXCIpIHtcbiAgICAgIG5leHRjaGFyICs9IDI7XG4gICAgICBiZWdpbkNvbW1lbnQoKTtcbiAgICAgIHRva2VuaXplciA9IGNvbW1lbnRfc3RhcnRfc3RhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxvb2thaGVhZC50b1VwcGVyQ2FzZSgpID09PSBcIkRPQ1RZUEVcIikge1xuICAgICAgbmV4dGNoYXIgKz0gNztcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfc3RhdGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxvb2thaGVhZCA9PT0gXCJbQ0RBVEFbXCIgJiYgY2RhdGFBbGxvd2VkKCkpIHtcbiAgICAgIG5leHRjaGFyICs9IDc7XG4gICAgICB0b2tlbml6ZXIgPSBjZGF0YV9zZWN0aW9uX3N0YXRlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRva2VuaXplciA9IGJvZ3VzX2NvbW1lbnRfc3RhdGU7XG4gICAgfVxuICB9XG4gIG1hcmt1cF9kZWNsYXJhdGlvbl9vcGVuX3N0YXRlLmxvb2thaGVhZCA9IDc7XG5cbiAgZnVuY3Rpb24gY29tbWVudF9zdGFydF9zdGF0ZShjKSB7XG4gICAgYmVnaW5Db21tZW50KCk7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyRDogLy8gSFlQSEVOLU1JTlVTXG4gICAgICB0b2tlbml6ZXIgPSBjb21tZW50X3N0YXJ0X2Rhc2hfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBpbnNlcnRUb2tlbihDT01NRU5ULCBidWYyc3RyKGNvbW1lbnRidWYpKTtcbiAgICAgIGJyZWFrOyAvKiBzZWUgY29tbWVudCBpbiBjb21tZW50IGVuZCBzdGF0ZSAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgY29tbWVudF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21tZW50X3N0YXJ0X2Rhc2hfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMkQ6IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgdG9rZW5pemVyID0gY29tbWVudF9lbmRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBpbnNlcnRUb2tlbihDT01NRU5ULCBidWYyc3RyKGNvbW1lbnRidWYpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgaW5zZXJ0VG9rZW4oQ09NTUVOVCwgYnVmMnN0cihjb21tZW50YnVmKSk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhazsgLyogc2VlIGNvbW1lbnQgaW4gY29tbWVudCBlbmQgc3RhdGUgKi9cbiAgICBkZWZhdWx0OlxuICAgICAgY29tbWVudGJ1Zi5wdXNoKDB4MDAyRCAvKiBIWVBIRU4tTUlOVVMgKi8pO1xuICAgICAgcmVjb25zdW1lKGMsIGNvbW1lbnRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAzQzogLy8gTEVTUy1USEFOIFNJR05cbiAgICAgIGNvbW1lbnRidWYucHVzaChjKTtcbiAgICAgIHRva2VuaXplciA9IGNvbW1lbnRfbGVzc190aGFuX3NpZ25fc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyRDogLy8gSFlQSEVOLU1JTlVTXG4gICAgICB0b2tlbml6ZXIgPSBjb21tZW50X2VuZF9kYXNoX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIGNvbW1lbnRidWYucHVzaCgweEZGRkQgLyogUkVQTEFDRU1FTlQgQ0hBUkFDVEVSICovKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgaW5zZXJ0VG9rZW4oQ09NTUVOVCwgYnVmMnN0cihjb21tZW50YnVmKSk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhazsgLyogc2VlIGNvbW1lbnQgaW4gY29tbWVudCBlbmQgc3RhdGUgKi9cbiAgICBkZWZhdWx0OlxuICAgICAgY29tbWVudGJ1Zi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudF9sZXNzX3RoYW5fc2lnbl9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyMTogLy8gRVhDTEFNQVRJT04gTUFSS1xuICAgICAgY29tbWVudGJ1Zi5wdXNoKGMpO1xuICAgICAgdG9rZW5pemVyID0gY29tbWVudF9sZXNzX3RoYW5fc2lnbl9iYW5nX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0M6IC8vIExFU1MtVEhBTiBTSUdOXG4gICAgICBjb21tZW50YnVmLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjb25zdW1lKGMsIGNvbW1lbnRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudF9sZXNzX3RoYW5fc2lnbl9iYW5nX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IGNvbW1lbnRfbGVzc190aGFuX3NpZ25fYmFuZ19kYXNoX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY29uc3VtZShjLCBjb21tZW50X3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1lbnRfbGVzc190aGFuX3NpZ25fYmFuZ19kYXNoX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IGNvbW1lbnRfbGVzc190aGFuX3NpZ25fYmFuZ19kYXNoX2Rhc2hfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjb25zdW1lKGMsIGNvbW1lbnRfZW5kX2Rhc2hfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudF9sZXNzX3RoYW5fc2lnbl9iYW5nX2Rhc2hfZGFzaF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIHJlY29uc3VtZShjLCBjb21tZW50X2VuZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gcGFyc2UgZXJyb3JcbiAgICAgIHJlY29uc3VtZShjLCBjb21tZW50X2VuZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21tZW50X2VuZF9kYXNoX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDJEOiAvLyBIWVBIRU4tTUlOVVNcbiAgICAgIHRva2VuaXplciA9IGNvbW1lbnRfZW5kX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBpbnNlcnRUb2tlbihDT01NRU5ULCBidWYyc3RyKGNvbW1lbnRidWYpKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrOyAvKiBzZWUgY29tbWVudCBpbiBjb21tZW50IGVuZCBzdGF0ZSAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb21tZW50YnVmLnB1c2goMHgwMDJEIC8qIEhZUEhFTi1NSU5VUyAqLyk7XG4gICAgICByZWNvbnN1bWUoYywgY29tbWVudF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21tZW50X2VuZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBpbnNlcnRUb2tlbihDT01NRU5ULCBidWYyc3RyKGNvbW1lbnRidWYpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDIxOiAvLyBFWENMQU1BVElPTiBNQVJLXG4gICAgICB0b2tlbml6ZXIgPSBjb21tZW50X2VuZF9iYW5nX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMkQ6IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgY29tbWVudGJ1Zi5wdXNoKDB4MDAyRCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGluc2VydFRva2VuKENPTU1FTlQsIGJ1ZjJzdHIoY29tbWVudGJ1ZikpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7IC8qIEZvciBzZWN1cml0eSByZWFzb25zOiBvdGhlcndpc2UsIGhvc3RpbGUgdXNlciBjb3VsZCBwdXQgYSBzY3JpcHQgaW4gYSBjb21tZW50IGUuZy4gaW4gYSBibG9nIGNvbW1lbnQgYW5kIHRoZW4gRE9TIHRoZSBzZXJ2ZXIgc28gdGhhdCB0aGUgZW5kIHRhZyBpc24ndCByZWFkLCBhbmQgdGhlbiB0aGUgY29tbWVudGVkIHNjcmlwdCB0YWcgd291bGQgYmUgdHJlYXRlZCBhcyBsaXZlIGNvZGUgKi9cbiAgICBkZWZhdWx0OlxuICAgICAgY29tbWVudGJ1Zi5wdXNoKDB4MDAyRCk7XG4gICAgICBjb21tZW50YnVmLnB1c2goMHgwMDJEKTtcbiAgICAgIHJlY29uc3VtZShjLCBjb21tZW50X3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1lbnRfZW5kX2Jhbmdfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMkQ6IC8vIEhZUEhFTi1NSU5VU1xuICAgICAgY29tbWVudGJ1Zi5wdXNoKDB4MDAyRCk7XG4gICAgICBjb21tZW50YnVmLnB1c2goMHgwMDJEKTtcbiAgICAgIGNvbW1lbnRidWYucHVzaCgweDAwMjEpO1xuICAgICAgdG9rZW5pemVyID0gY29tbWVudF9lbmRfZGFzaF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGluc2VydFRva2VuKENPTU1FTlQsIGJ1ZjJzdHIoY29tbWVudGJ1ZikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBpbnNlcnRUb2tlbihDT01NRU5ULCBidWYyc3RyKGNvbW1lbnRidWYpKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrOyAvKiBzZWUgY29tbWVudCBpbiBjb21tZW50IGVuZCBzdGF0ZSAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb21tZW50YnVmLnB1c2goMHgwMDJEKTtcbiAgICAgIGNvbW1lbnRidWYucHVzaCgweDAwMkQpO1xuICAgICAgY29tbWVudGJ1Zi5wdXNoKDB4MDAyMSk7XG4gICAgICByZWNvbnN1bWUoYywgY29tbWVudF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb2N0eXBlX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2RvY3R5cGVfbmFtZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgYmVnaW5Eb2N0eXBlKCk7XG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgYmVmb3JlX2RvY3R5cGVfbmFtZV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVfZG9jdHlwZV9uYW1lX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgLyogSWdub3JlIHRoZSBjaGFyYWN0ZXIuICovXG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgICBiZWdpbkRvY3R5cGUoKTtcbiAgICAgIGRvY3R5cGVuYW1lYnVmLnB1c2goYyArIDB4MDAyMCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX25hbWVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgYmVnaW5Eb2N0eXBlKCk7XG4gICAgICBkb2N0eXBlbmFtZWJ1Zi5wdXNoKDB4RkZGRCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX25hbWVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGJlZ2luRG9jdHlwZSgpO1xuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBiZWdpbkRvY3R5cGUoKTtcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJlZ2luRG9jdHlwZSgpO1xuICAgICAgZG9jdHlwZW5hbWVidWYucHVzaChjKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfbmFtZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3R5cGVfbmFtZV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2RvY3R5cGVfbmFtZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDA0MTogIC8vIFtBLVpdXG4gICAgY2FzZSAweDAwNDI6Y2FzZSAweDAwNDM6Y2FzZSAweDAwNDQ6Y2FzZSAweDAwNDU6Y2FzZSAweDAwNDY6XG4gICAgY2FzZSAweDAwNDc6Y2FzZSAweDAwNDg6Y2FzZSAweDAwNDk6Y2FzZSAweDAwNEE6Y2FzZSAweDAwNEI6XG4gICAgY2FzZSAweDAwNEM6Y2FzZSAweDAwNEQ6Y2FzZSAweDAwNEU6Y2FzZSAweDAwNEY6Y2FzZSAweDAwNTA6XG4gICAgY2FzZSAweDAwNTE6Y2FzZSAweDAwNTI6Y2FzZSAweDAwNTM6Y2FzZSAweDAwNTQ6Y2FzZSAweDAwNTU6XG4gICAgY2FzZSAweDAwNTY6Y2FzZSAweDAwNTc6Y2FzZSAweDAwNTg6Y2FzZSAweDAwNTk6Y2FzZSAweDAwNUE6XG4gICAgICBkb2N0eXBlbmFtZWJ1Zi5wdXNoKGMgKyAweDAwMjApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIGRvY3R5cGVuYW1lYnVmLnB1c2goMHhGRkZEIC8qIFJFUExBQ0VNRU5UIENIQVJBQ1RFUiAqLyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRvY3R5cGVuYW1lYnVmLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZnRlcl9kb2N0eXBlX25hbWVfc3RhdGUoYywgbG9va2FoZWFkLCBlb2YpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgLyogSWdub3JlIHRoZSBjaGFyYWN0ZXIuICovXG4gICAgICBuZXh0Y2hhciArPSAxO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgbmV4dGNoYXIgKz0gMTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvb2thaGVhZCA9IGxvb2thaGVhZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgaWYgKGxvb2thaGVhZCA9PT0gXCJQVUJMSUNcIikge1xuICAgICAgICBuZXh0Y2hhciArPSA2O1xuICAgICAgICB0b2tlbml6ZXIgPSBhZnRlcl9kb2N0eXBlX3B1YmxpY19rZXl3b3JkX3N0YXRlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobG9va2FoZWFkID09PSBcIlNZU1RFTVwiKSB7XG4gICAgICAgIG5leHRjaGFyICs9IDY7XG4gICAgICAgIHRva2VuaXplciA9IGFmdGVyX2RvY3R5cGVfc3lzdGVtX2tleXdvcmRfc3RhdGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgICAgdG9rZW5pemVyID0gYm9ndXNfZG9jdHlwZV9zdGF0ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBhZnRlcl9kb2N0eXBlX25hbWVfc3RhdGUubG9va2FoZWFkID0gNjtcblxuICBmdW5jdGlvbiBhZnRlcl9kb2N0eXBlX3B1YmxpY19rZXl3b3JkX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgdG9rZW5pemVyID0gYmVmb3JlX2RvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICAgIGJlZ2luRG9jdHlwZVB1YmxpY0lkKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX3B1YmxpY19pZGVudGlmaWVyX2RvdWJsZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyNzogLy8gQVBPU1RST1BIRVxuICAgICAgYmVnaW5Eb2N0eXBlUHVibGljSWQoKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfc2luZ2xlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gYm9ndXNfZG9jdHlwZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZV9kb2N0eXBlX3B1YmxpY19pZGVudGlmaWVyX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBDSEFSQUNURVIgVEFCVUxBVElPTiAodGFiKVxuICAgIGNhc2UgMHgwMDBBOiAvLyBMSU5FIEZFRUQgKExGKVxuICAgIGNhc2UgMHgwMDBDOiAvLyBGT1JNIEZFRUQgKEZGKVxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgICAgLyogSWdub3JlIHRoZSBjaGFyYWN0ZXIuICovXG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICAgIGJlZ2luRG9jdHlwZVB1YmxpY0lkKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX3B1YmxpY19pZGVudGlmaWVyX2RvdWJsZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyNzogLy8gQVBPU1RST1BIRVxuICAgICAgYmVnaW5Eb2N0eXBlUHVibGljSWQoKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfc2luZ2xlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gYm9ndXNfZG9jdHlwZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfZG91YmxlX3F1b3RlZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2RvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgZG9jdHlwZXB1YmxpY2J1Zi5wdXNoKDB4RkZGRCAvKiBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKi8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRvY3R5cGVwdWJsaWNidWYucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3R5cGVfcHVibGljX2lkZW50aWZpZXJfc2luZ2xlX3F1b3RlZF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAyNzogLy8gQVBPU1RST1BIRVxuICAgICAgdG9rZW5pemVyID0gYWZ0ZXJfZG9jdHlwZV9wdWJsaWNfaWRlbnRpZmllcl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDAwOiAvLyBOVUxMXG4gICAgICBkb2N0eXBlcHVibGljYnVmLnB1c2goMHhGRkZEIC8qIFJFUExBQ0VNRU5UIENIQVJBQ1RFUiAqLyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZG9jdHlwZXB1YmxpY2J1Zi5wdXNoKGMpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJfZG9jdHlwZV9wdWJsaWNfaWRlbnRpZmllcl9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT04gKHRhYilcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEIChMRilcbiAgICBjYXNlIDB4MDAwQzogLy8gRk9STSBGRUVEIChGRilcbiAgICBjYXNlIDB4MDAyMDogLy8gU1BBQ0VcbiAgICAgIHRva2VuaXplciA9IGJldHdlZW5fZG9jdHlwZV9wdWJsaWNfYW5kX3N5c3RlbV9pZGVudGlmaWVyc19zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyMjogLy8gUVVPVEFUSU9OIE1BUktcbiAgICAgIGJlZ2luRG9jdHlwZVN5c3RlbUlkKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX3N5c3RlbV9pZGVudGlmaWVyX2RvdWJsZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyNzogLy8gQVBPU1RST1BIRVxuICAgICAgYmVnaW5Eb2N0eXBlU3lzdGVtSWQoKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfc2luZ2xlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGJvZ3VzX2RvY3R5cGVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuX2RvY3R5cGVfcHVibGljX2FuZF9zeXN0ZW1faWRlbnRpZmllcnNfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFIElnbm9yZSB0aGUgY2hhcmFjdGVyLlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDIyOiAvLyBRVU9UQVRJT04gTUFSS1xuICAgICAgYmVnaW5Eb2N0eXBlU3lzdGVtSWQoKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfZG91YmxlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDI3OiAvLyBBUE9TVFJPUEhFXG4gICAgICBiZWdpbkRvY3R5cGVTeXN0ZW1JZCgpO1xuICAgICAgdG9rZW5pemVyID0gZG9jdHlwZV9zeXN0ZW1faWRlbnRpZmllcl9zaW5nbGVfcXVvdGVkX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gYm9ndXNfZG9jdHlwZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyX2RvY3R5cGVfc3lzdGVtX2tleXdvcmRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFXG4gICAgICB0b2tlbml6ZXIgPSBiZWZvcmVfZG9jdHlwZV9zeXN0ZW1faWRlbnRpZmllcl9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDIyOiAvLyBRVU9UQVRJT04gTUFSS1xuICAgICAgYmVnaW5Eb2N0eXBlU3lzdGVtSWQoKTtcbiAgICAgIHRva2VuaXplciA9IGRvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfZG91YmxlX3F1b3RlZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDI3OiAvLyBBUE9TVFJPUEhFXG4gICAgICBiZWdpbkRvY3R5cGVTeXN0ZW1JZCgpO1xuICAgICAgdG9rZW5pemVyID0gZG9jdHlwZV9zeXN0ZW1faWRlbnRpZmllcl9zaW5nbGVfcXVvdGVkX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICB0b2tlbml6ZXIgPSBib2d1c19kb2N0eXBlX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3JlX2RvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFIElnbm9yZSB0aGUgY2hhcmFjdGVyLlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMjI6IC8vIFFVT1RBVElPTiBNQVJLXG4gICAgICBiZWdpbkRvY3R5cGVTeXN0ZW1JZCgpO1xuICAgICAgdG9rZW5pemVyID0gZG9jdHlwZV9zeXN0ZW1faWRlbnRpZmllcl9kb3VibGVfcXVvdGVkX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMjc6IC8vIEFQT1NUUk9QSEVcbiAgICAgIGJlZ2luRG9jdHlwZVN5c3RlbUlkKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkb2N0eXBlX3N5c3RlbV9pZGVudGlmaWVyX3NpbmdsZV9xdW90ZWRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzRTogLy8gR1JFQVRFUi1USEFOIFNJR05cbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGJvZ3VzX2RvY3R5cGVfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb2N0eXBlX3N5c3RlbV9pZGVudGlmaWVyX2RvdWJsZV9xdW90ZWRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMjI6IC8vIFFVT1RBVElPTiBNQVJLXG4gICAgICB0b2tlbml6ZXIgPSBhZnRlcl9kb2N0eXBlX3N5c3RlbV9pZGVudGlmaWVyX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwMDA6IC8vIE5VTExcbiAgICAgIGRvY3R5cGVzeXN0ZW1idWYucHVzaCgweEZGRkQgLyogUkVQTEFDRU1FTlQgQ0hBUkFDVEVSICovKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgZm9yY2VxdWlya3MoKTtcbiAgICAgIHRva2VuaXplciA9IGRhdGFfc3RhdGU7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgZW1pdERvY3R5cGUoKTtcbiAgICAgIGVtaXRFT0YoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBkb2N0eXBlc3lzdGVtYnVmLnB1c2goYyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb2N0eXBlX3N5c3RlbV9pZGVudGlmaWVyX3NpbmdsZV9xdW90ZWRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMjc6IC8vIEFQT1NUUk9QSEVcbiAgICAgIHRva2VuaXplciA9IGFmdGVyX2RvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgZG9jdHlwZXN5c3RlbWJ1Zi5wdXNoKDB4RkZGRCAvKiBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKi8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0U6IC8vIEdSRUFURVItVEhBTiBTSUdOXG4gICAgICBmb3JjZXF1aXJrcygpO1xuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRvY3R5cGVzeXN0ZW1idWYucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyX2RvY3R5cGVfc3lzdGVtX2lkZW50aWZpZXJfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMDk6IC8vIENIQVJBQ1RFUiBUQUJVTEFUSU9OICh0YWIpXG4gICAgY2FzZSAweDAwMEE6IC8vIExJTkUgRkVFRCAoTEYpXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRCAoRkYpXG4gICAgY2FzZSAweDAwMjA6IC8vIFNQQUNFXG4gICAgICAvKiBJZ25vcmUgdGhlIGNoYXJhY3Rlci4gKi9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGZvcmNlcXVpcmtzKCk7XG4gICAgICBlbWl0RG9jdHlwZSgpO1xuICAgICAgZW1pdEVPRigpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRva2VuaXplciA9IGJvZ3VzX2RvY3R5cGVfc3RhdGU7XG4gICAgICAvKiBUaGlzIGRvZXMgKm5vdCogc2V0IHRoZSBET0NUWVBFIHRva2VuJ3MgZm9yY2UtcXVpcmtzIGZsYWcuICovXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBib2d1c19kb2N0eXBlX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGVtaXREb2N0eXBlKCk7XG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLyogSWdub3JlIHRoZSBjaGFyYWN0ZXIuICovXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjZGF0YV9zZWN0aW9uX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDVEOiAvLyBSSUdIVCBTUVVBUkUgQlJBQ0tFVFxuICAgICAgdG9rZW5pemVyID0gY2RhdGFfc2VjdGlvbl9icmFja2V0X3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBlbWl0RU9GKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAwMDogLy8gTlVMTFxuICAgICAgdGV4dEluY2x1ZGVzTlVMID0gdHJ1ZTtcbiAgICAgIC8qIGZhbGwgdGhyb3VnaCAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBJbnN0ZWFkIG9mIGp1c3QgcHVzaGluZyBhIHNpbmdsZSBjaGFyYWN0ZXIgYW5kIHRoZW5cbiAgICAgIC8vIGNvbWluZyBiYWNrIHRvIHRoZSB2ZXJ5IHNhbWUgcGxhY2UsIGxvb2thaGVhZCBhbmRcbiAgICAgIC8vIGVtaXQgZXZlcnl0aGluZyB3ZSBjYW4gYXQgb25jZS5cbiAgICAgIC8qanNoaW50IC1XMDMwICovXG4gICAgICBlbWl0Q2hhcnNXaGlsZShDREFUQVRFWFQpIHx8IHRleHRydW4ucHVzaChjKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNkYXRhX3NlY3Rpb25fYnJhY2tldF9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDA1RDogLy8gUklHSFQgU1FVQVJFIEJSQUNLRVRcbiAgICAgIHRva2VuaXplciA9IGNkYXRhX3NlY3Rpb25fZW5kX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRleHRydW4ucHVzaCgweDAwNUQpO1xuICAgICAgcmVjb25zdW1lKGMsIGNkYXRhX3NlY3Rpb25fc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2RhdGFfc2VjdGlvbl9lbmRfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwNUQ6IC8vIFJJR0hUIFNRVUFSRSBCUkFDS0VUXG4gICAgICB0ZXh0cnVuLnB1c2goMHgwMDVEKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDNFOiAvLyBHUkVBVEVSLVRIQU4gU0lHTlxuICAgICAgZmx1c2hUZXh0KCk7XG4gICAgICB0b2tlbml6ZXIgPSBkYXRhX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRleHRydW4ucHVzaCgweDAwNUQpO1xuICAgICAgdGV4dHJ1bi5wdXNoKDB4MDA1RCk7XG4gICAgICByZWNvbnN1bWUoYywgY2RhdGFfc2VjdGlvbl9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXRlKGMpIHtcbiAgICBiZWdpblRlbXBCdWYoKTtcbiAgICB0ZW1wYnVmLnB1c2goMHgwMDI2KTtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDA5OiAvLyBUQUJcbiAgICBjYXNlIDB4MDAwQTogLy8gTElORSBGRUVEXG4gICAgY2FzZSAweDAwMEM6IC8vIEZPUk0gRkVFRFxuICAgIGNhc2UgMHgwMDIwOiAvLyBTUEFDRVxuICAgIGNhc2UgMHgwMDNDOiAvLyBMRVNTLVRIQU4gU0lHTlxuICAgIGNhc2UgMHgwMDI2OiAvLyBBTVBFUlNBTkRcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIHJlY29uc3VtZShjLCBjaGFyYWN0ZXJfcmVmZXJlbmNlX2VuZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAyMzogLy8gTlVNQkVSIFNJR05cbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHRva2VuaXplciA9IG51bWVyaWNfY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgbmFtZWRfY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuYW1lZF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXRlKGMpIHtcbiAgICBOQU1FRENIQVJSRUYubGFzdEluZGV4ID0gbmV4dGNoYXI7IC8vIHcvIGxvb2thaGVhZCBubyBjaGFyIGhhcyBiZWVuIGNvbnN1bWVkXG4gICAgdmFyIG1hdGNoZWQgPSBOQU1FRENIQVJSRUYuZXhlYyhjaGFycyk7XG4gICAgaWYgKCFtYXRjaGVkKSB0aHJvdyBuZXcgRXJyb3IoXCJzaG91bGQgbmV2ZXIgaGFwcGVuXCIpO1xuICAgIHZhciBuYW1lID0gbWF0Y2hlZFsxXTtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIC8vIElmIG5vIG1hdGNoIGNhbiBiZSBtYWRlLCBzd2l0Y2ggdG8gdGhlIGNoYXJhY3RlciByZWZlcmVuY2UgZW5kIHN0YXRlXG4gICAgICB0b2tlbml6ZXIgPSBjaGFyYWN0ZXJfcmVmZXJlbmNlX2VuZF9zdGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDb25zdW1lIHRoZSBtYXRjaGVkIGNoYXJhY3RlcnMgYW5kIGFwcGVuZCB0aGVtIHRvIHRlbXBvcmFyeSBidWZmZXJcbiAgICBuZXh0Y2hhciArPSBuYW1lLmxlbmd0aDtcbiAgICBwdXNoQWxsKHRlbXBidWYsIHN0cjJidWYobmFtZSkpO1xuXG4gICAgc3dpdGNoKHJldHVybl9zdGF0ZSkge1xuICAgIGNhc2UgYXR0cmlidXRlX3ZhbHVlX2RvdWJsZV9xdW90ZWRfc3RhdGU6XG4gICAgY2FzZSBhdHRyaWJ1dGVfdmFsdWVfc2luZ2xlX3F1b3RlZF9zdGF0ZTpcbiAgICBjYXNlIGF0dHJpYnV0ZV92YWx1ZV91bnF1b3RlZF9zdGF0ZTpcbiAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhcyBjb25zdW1lZCBhcyBwYXJ0IG9mIGFuIGF0dHJpYnV0ZS4uLlxuICAgICAgaWYgKG5hbWVbbmFtZS5sZW5ndGgtMV0gIT09ICc7JykgeyAvLyAuLi5hbmQgdGhlIGxhc3QgY2hhciBpcyBub3QgO1xuICAgICAgICBpZiAoL1s9QS1aYS16MC05XS8udGVzdChjaGFyc1tuZXh0Y2hhcl0pKSB7XG4gICAgICAgICAgdG9rZW5pemVyID0gY2hhcmFjdGVyX3JlZmVyZW5jZV9lbmRfc3RhdGU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYmVnaW5UZW1wQnVmKCk7XG4gICAgdmFyIHJ2ID0gbmFtZWRDaGFyUmVmc1tuYW1lXTtcbiAgICBpZiAodHlwZW9mIHJ2ID09PSAnbnVtYmVyJykge1xuICAgICAgdGVtcGJ1Zi5wdXNoKHJ2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaEFsbCh0ZW1wYnVmLCBydik7XG4gICAgfVxuICAgIHRva2VuaXplciA9IGNoYXJhY3Rlcl9yZWZlcmVuY2VfZW5kX3N0YXRlO1xuICB9XG4gIC8vIFdlIG1pZ2h0IG5lZWQgdG8gcGF1c2UgdG9rZW5pemF0aW9uIHVudGlsIHdlIGhhdmUgZW5vdWdoIGNoYXJhY3RlcnNcbiAgLy8gaW4gdGhlIGJ1ZmZlciBmb3IgbG9uZ2VzdCBwb3NzaWJsZSBjaGFyYWN0ZXIgcmVmZXJlbmNlLlxuICBuYW1lZF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXRlLmxvb2thaGVhZCA9IC1OQU1FRENIQVJSRUZfTUFYTEVOO1xuXG4gIGZ1bmN0aW9uIG51bWVyaWNfY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZShjKSB7XG4gICAgY2hhcmFjdGVyX3JlZmVyZW5jZV9jb2RlID0gMDtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDc4OiAvLyB4XG4gICAgY2FzZSAweDAwNTg6IC8vIFhcbiAgICAgIHRlbXBidWYucHVzaChjKTtcbiAgICAgIHRva2VuaXplciA9IGhleGFkZWNpbWFsX2NoYXJhY3Rlcl9yZWZlcmVuY2Vfc3RhcnRfc3RhdGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjb25zdW1lKGMsIGRlY2ltYWxfY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGFydF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoZXhhZGVjaW1hbF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXJ0X3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDMwOiBjYXNlIDB4MDAzMTogY2FzZSAweDAwMzI6IGNhc2UgMHgwMDMzOiBjYXNlIDB4MDAzNDpcbiAgICBjYXNlIDB4MDAzNTogY2FzZSAweDAwMzY6IGNhc2UgMHgwMDM3OiBjYXNlIDB4MDAzODogY2FzZSAweDAwMzk6IC8vIFswLTldXG4gICAgY2FzZSAweDAwNDE6IGNhc2UgMHgwMDQyOiBjYXNlIDB4MDA0MzogY2FzZSAweDAwNDQ6IGNhc2UgMHgwMDQ1OlxuICAgIGNhc2UgMHgwMDQ2OiAvLyBbQS1GXVxuICAgIGNhc2UgMHgwMDYxOiBjYXNlIDB4MDA2MjogY2FzZSAweDAwNjM6IGNhc2UgMHgwMDY0OiBjYXNlIDB4MDA2NTpcbiAgICBjYXNlIDB4MDA2NjogLy8gW2EtZl1cbiAgICAgIHJlY29uc3VtZShjLCBoZXhhZGVjaW1hbF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgY2hhcmFjdGVyX3JlZmVyZW5jZV9lbmRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjaW1hbF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXJ0X3N0YXRlKGMpIHtcbiAgICBzd2l0Y2goYykge1xuICAgIGNhc2UgMHgwMDMwOiBjYXNlIDB4MDAzMTogY2FzZSAweDAwMzI6IGNhc2UgMHgwMDMzOiBjYXNlIDB4MDAzNDpcbiAgICBjYXNlIDB4MDAzNTogY2FzZSAweDAwMzY6IGNhc2UgMHgwMDM3OiBjYXNlIDB4MDAzODogY2FzZSAweDAwMzk6IC8vIFswLTldXG4gICAgICByZWNvbnN1bWUoYywgZGVjaW1hbF9jaGFyYWN0ZXJfcmVmZXJlbmNlX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgY2hhcmFjdGVyX3JlZmVyZW5jZV9lbmRfc3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGV4YWRlY2ltYWxfY2hhcmFjdGVyX3JlZmVyZW5jZV9zdGF0ZShjKSB7XG4gICAgc3dpdGNoKGMpIHtcbiAgICBjYXNlIDB4MDA0MTogY2FzZSAweDAwNDI6IGNhc2UgMHgwMDQzOiBjYXNlIDB4MDA0NDogY2FzZSAweDAwNDU6XG4gICAgY2FzZSAweDAwNDY6IC8vIFtBLUZdXG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgKj0gMTY7XG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgKz0gKGMgLSAweDAwMzcpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwNjE6IGNhc2UgMHgwMDYyOiBjYXNlIDB4MDA2MzogY2FzZSAweDAwNjQ6IGNhc2UgMHgwMDY1OlxuICAgIGNhc2UgMHgwMDY2OiAvLyBbYS1mXVxuICAgICAgY2hhcmFjdGVyX3JlZmVyZW5jZV9jb2RlICo9IDE2O1xuICAgICAgY2hhcmFjdGVyX3JlZmVyZW5jZV9jb2RlICs9IChjIC0gMHgwMDU3KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMHgwMDMwOiBjYXNlIDB4MDAzMTogY2FzZSAweDAwMzI6IGNhc2UgMHgwMDMzOiBjYXNlIDB4MDAzNDpcbiAgICBjYXNlIDB4MDAzNTogY2FzZSAweDAwMzY6IGNhc2UgMHgwMDM3OiBjYXNlIDB4MDAzODogY2FzZSAweDAwMzk6IC8vIFswLTldXG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgKj0gMTY7XG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgKz0gKGMgLSAweDAwMzApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDAwM0I6IC8vIFNFTUlDT0xPTlxuICAgICAgdG9rZW5pemVyID0gbnVtZXJpY19jaGFyYWN0ZXJfcmVmZXJlbmNlX2VuZF9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWNvbnN1bWUoYywgbnVtZXJpY19jaGFyYWN0ZXJfcmVmZXJlbmNlX2VuZF9zdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWNpbWFsX2NoYXJhY3Rlcl9yZWZlcmVuY2Vfc3RhdGUoYykge1xuICAgIHN3aXRjaChjKSB7XG4gICAgY2FzZSAweDAwMzA6IGNhc2UgMHgwMDMxOiBjYXNlIDB4MDAzMjogY2FzZSAweDAwMzM6IGNhc2UgMHgwMDM0OlxuICAgIGNhc2UgMHgwMDM1OiBjYXNlIDB4MDAzNjogY2FzZSAweDAwMzc6IGNhc2UgMHgwMDM4OiBjYXNlIDB4MDAzOTogLy8gWzAtOV1cbiAgICAgIGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZSAqPSAxMDtcbiAgICAgIGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZSArPSAoYyAtIDB4MDAzMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDAzQjogLy8gU0VNSUNPTE9OXG4gICAgICB0b2tlbml6ZXIgPSBudW1lcmljX2NoYXJhY3Rlcl9yZWZlcmVuY2VfZW5kX3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY29uc3VtZShjLCBudW1lcmljX2NoYXJhY3Rlcl9yZWZlcmVuY2VfZW5kX3N0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWVyaWNfY2hhcmFjdGVyX3JlZmVyZW5jZV9lbmRfc3RhdGUoYykge1xuICAgIGlmIChjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgaW4gbnVtZXJpY0NoYXJSZWZSZXBsYWNlbWVudHMpIHtcbiAgICAgIGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZSA9IG51bWVyaWNDaGFyUmVmUmVwbGFjZW1lbnRzW2NoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZV07XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgPiAweDEwRkZGRiB8fCAoY2hhcmFjdGVyX3JlZmVyZW5jZV9jb2RlID49IDB4RDgwMCAmJiBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgPCAweEUwMDApKSB7XG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgPSAweEZGRkQ7XG4gICAgfVxuXG4gICAgYmVnaW5UZW1wQnVmKCk7XG4gICAgaWYgKGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZSA8PSAweEZGRkYpIHtcbiAgICAgIHRlbXBidWYucHVzaChjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgPSBjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgLSAweDEwMDAwO1xuICAgICAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gICAgICB0ZW1wYnVmLnB1c2goMHhEODAwICsgKGNoYXJhY3Rlcl9yZWZlcmVuY2VfY29kZSA+PiAxMCkpO1xuICAgICAgdGVtcGJ1Zi5wdXNoKDB4REMwMCArIChjaGFyYWN0ZXJfcmVmZXJlbmNlX2NvZGUgJiAweDAzRkYpKTtcbiAgICB9XG4gICAgcmVjb25zdW1lKGMsIGNoYXJhY3Rlcl9yZWZlcmVuY2VfZW5kX3N0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYXJhY3Rlcl9yZWZlcmVuY2VfZW5kX3N0YXRlKGMpIHtcbiAgICBzd2l0Y2gocmV0dXJuX3N0YXRlKSB7XG4gICAgY2FzZSBhdHRyaWJ1dGVfdmFsdWVfZG91YmxlX3F1b3RlZF9zdGF0ZTpcbiAgICBjYXNlIGF0dHJpYnV0ZV92YWx1ZV9zaW5nbGVfcXVvdGVkX3N0YXRlOlxuICAgIGNhc2UgYXR0cmlidXRlX3ZhbHVlX3VucXVvdGVkX3N0YXRlOlxuICAgICAgLy8gYXBwZW5kIGVhY2ggY2hhcmFjdGVyIHRvIHRoZSBjdXJyZW50IGF0dHJpYnV0ZSdzIHZhbHVlXG4gICAgICBhdHRydmFsdWVidWYgKz0gYnVmMnN0cih0ZW1wYnVmKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwdXNoQWxsKHRleHRydW4sIHRlbXBidWYpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlY29uc3VtZShjLCByZXR1cm5fc3RhdGUpO1xuICB9XG5cbiAgLyoqKlxuICAgKiBUaGUgdHJlZSBidWlsZGVyIGluc2VydGlvbiBtb2Rlc1xuICAgKi9cblxuICAvLyAxMS4yLjUuNC4xIFRoZSBcImluaXRpYWxcIiBpbnNlcnRpb24gbW9kZVxuICBmdW5jdGlvbiBpbml0aWFsX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKExFQURJTkdXUywgXCJcIik7IC8vIElnbm9yZSBzcGFjZXNcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gQXJlIHdlIGRvbmU/XG4gICAgICBicmVhazsgLy8gSGFuZGxlIGFueXRoaW5nIG5vbi1zcGFjZSB0ZXh0IGJlbG93XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBkb2MuX2FwcGVuZENoaWxkKGRvYy5jcmVhdGVDb21tZW50KHZhbHVlKSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICB2YXIgbmFtZSA9IHZhbHVlO1xuICAgICAgdmFyIHB1YmxpY2lkID0gYXJnMztcbiAgICAgIHZhciBzeXN0ZW1pZCA9IGFyZzQ7XG4gICAgICAvLyBVc2UgdGhlIGNvbnN0cnVjdG9yIGRpcmVjdGx5IGluc3RlYWQgb2ZcbiAgICAgIC8vIGltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50VHlwZSBiZWNhdXNlIHRoZSBjcmVhdGVcbiAgICAgIC8vIGZ1bmN0aW9uIHRocm93cyBlcnJvcnMgb24gaW52YWxpZCBjaGFyYWN0ZXJzLCBhbmRcbiAgICAgIC8vIHdlIGRvbid0IHdhbnQgdGhlIHBhcnNlciB0byB0aHJvdyB0aGVtLlxuICAgICAgZG9jLmFwcGVuZENoaWxkKG5ldyBEb2N1bWVudFR5cGUobmFtZSxwdWJsaWNpZCwgc3lzdGVtaWQpKTtcblxuICAgICAgLy8gTm90ZSB0aGF0IHRoZXJlIGlzIG5vIHB1YmxpYyBBUEkgZm9yIHNldHRpbmcgcXVpcmtzIG1vZGUgV2UgY2FuXG4gICAgICAvLyBkbyB0aGlzIGhlcmUgYmVjYXVzZSB3ZSBoYXZlIGFjY2VzcyB0byBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzXG4gICAgICBpZiAoZm9yY2VfcXVpcmtzIHx8XG4gICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJodG1sXCIgfHxcbiAgICAgICAgcXVpcmt5UHVibGljSWRzLnRlc3QocHVibGljaWQpIHx8XG4gICAgICAgIChzeXN0ZW1pZCAmJiBzeXN0ZW1pZC50b0xvd2VyQ2FzZSgpID09PSBxdWlya3lTeXN0ZW1JZCkgfHxcbiAgICAgICAgKHN5c3RlbWlkID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIGNvbmRpdGlvbmFsbHlRdWlya3lQdWJsaWNJZHMudGVzdChwdWJsaWNpZCkpKVxuICAgICAgICBkb2MuX3F1aXJrcyA9IHRydWU7XG4gICAgICBlbHNlIGlmIChsaW1pdGVkUXVpcmt5UHVibGljSWRzLnRlc3QocHVibGljaWQpIHx8XG4gICAgICAgICAgIChzeXN0ZW1pZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBjb25kaXRpb25hbGx5UXVpcmt5UHVibGljSWRzLnRlc3QocHVibGljaWQpKSlcbiAgICAgICAgZG9jLl9saW1pdGVkUXVpcmtzID0gdHJ1ZTtcbiAgICAgIHBhcnNlciA9IGJlZm9yZV9odG1sX21vZGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdGFncyBvciBub24td2hpdGVzcGFjZSB0ZXh0XG4gICAgZG9jLl9xdWlya3MgPSB0cnVlO1xuICAgIHBhcnNlciA9IGJlZm9yZV9odG1sX21vZGU7XG4gICAgcGFyc2VyKHQsdmFsdWUsYXJnMyxhcmc0KTtcbiAgfVxuXG4gIC8vIDExLjIuNS40LjIgVGhlIFwiYmVmb3JlIGh0bWxcIiBpbnNlcnRpb24gbW9kZVxuICBmdW5jdGlvbiBiZWZvcmVfaHRtbF9tb2RlKHQsdmFsdWUsYXJnMyxhcmc0KSB7XG4gICAgdmFyIGVsdDtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKExFQURJTkdXUywgXCJcIik7IC8vIElnbm9yZSBzcGFjZXNcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gQXJlIHdlIGRvbmU/XG4gICAgICBicmVhazsgLy8gSGFuZGxlIGFueXRoaW5nIG5vbi1zcGFjZSB0ZXh0IGJlbG93XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICAvKiBpZ25vcmUgdGhlIHRva2VuICovXG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBkb2MuX2FwcGVuZENoaWxkKGRvYy5jcmVhdGVDb21tZW50KHZhbHVlKSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIGlmICh2YWx1ZSA9PT0gXCJodG1sXCIpIHtcbiAgICAgICAgZWx0ID0gY3JlYXRlSFRNTEVsdChkb2MsIHZhbHVlLCBhcmczKTtcbiAgICAgICAgc3RhY2sucHVzaChlbHQpO1xuICAgICAgICBkb2MuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgICAgLy8gWFhYOiBoYW5kbGUgYXBwbGljYXRpb24gY2FjaGUgaGVyZVxuICAgICAgICBwYXJzZXIgPSBiZWZvcmVfaGVhZF9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgY2FzZSBcImhlYWRcIjpcbiAgICAgIGNhc2UgXCJib2R5XCI6XG4gICAgICBjYXNlIFwiYnJcIjpcbiAgICAgICAgYnJlYWs7ICAvLyBmYWxsIHRocm91Z2ggb24gdGhlc2VcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjsgLy8gaWdub3JlIG1vc3QgZW5kIHRhZ3NcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbnl0aGluZyB0aGF0IGRpZG4ndCBnZXQgaGFuZGxlZCBhYm92ZSBpcyBoYW5kbGVkIGxpa2UgdGhpczpcbiAgICBlbHQgPSBjcmVhdGVIVE1MRWx0KGRvYywgXCJodG1sXCIsIG51bGwpO1xuICAgIHN0YWNrLnB1c2goZWx0KTtcbiAgICBkb2MuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAvLyBYWFg6IGhhbmRsZSBhcHBsaWNhdGlvbiBjYWNoZSBoZXJlXG4gICAgcGFyc2VyID0gYmVmb3JlX2hlYWRfbW9kZTtcbiAgICBwYXJzZXIodCx2YWx1ZSxhcmczLGFyZzQpO1xuICB9XG5cbiAgLy8gMTEuMi41LjQuMyBUaGUgXCJiZWZvcmUgaGVhZFwiIGluc2VydGlvbiBtb2RlXG4gIGZ1bmN0aW9uIGJlZm9yZV9oZWFkX21vZGUodCx2YWx1ZSxhcmczLGFyZzQpIHtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKExFQURJTkdXUywgXCJcIik7ICAvLyBJZ25vcmUgc3BhY2VzXG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIEFyZSB3ZSBkb25lP1xuICAgICAgYnJlYWs7ICAvLyBIYW5kbGUgYW55dGhpbmcgbm9uLXNwYWNlIHRleHQgYmVsb3dcbiAgICBjYXNlIDU6IC8vIERPQ1RZUEVcbiAgICAgIC8qIGlnbm9yZSB0aGUgdG9rZW4gKi9cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgIGluc2VydENvbW1lbnQodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgIGluX2JvZHlfbW9kZSh0LHZhbHVlLGFyZzMsYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJoZWFkXCI6XG4gICAgICAgIHZhciBlbHQgPSBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIGhlYWRfZWxlbWVudF9wb2ludGVyID0gZWx0O1xuICAgICAgICBwYXJzZXIgPSBpbl9oZWFkX21vZGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzogLy8gRU5EVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjsgLy8gaWdub3JlIG1vc3QgZW5kIHRhZ3NcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgaGFuZGxlZCBleHBsaWNpdGx5IGFib3ZlXG4gICAgYmVmb3JlX2hlYWRfbW9kZShUQUcsIFwiaGVhZFwiLCBudWxsKTsgLy8gY3JlYXRlIGEgaGVhZCB0YWdcbiAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpOyAvLyB0aGVuIHRyeSBhZ2FpbiB3aXRoIHRoaXMgdG9rZW5cbiAgfVxuXG4gIGZ1bmN0aW9uIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAxOiAvLyBURVhUXG4gICAgICB2YXIgd3MgPSB2YWx1ZS5tYXRjaChMRUFESU5HV1MpO1xuICAgICAgaWYgKHdzKSB7XG4gICAgICAgIGluc2VydFRleHQod3NbMF0pO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyh3c1swXS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgYnJlYWs7IC8vIEhhbmRsZSBub24td2hpdGVzcGFjZSBiZWxvd1xuICAgIGNhc2UgNDogLy8gQ09NTUVOVFxuICAgICAgaW5zZXJ0Q29tbWVudCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgLy8gWFhYOlxuICAgICAgICAvLyBNYXkgbmVlZCB0byBjaGFuZ2UgdGhlIGVuY29kaW5nIGJhc2VkIG9uIHRoaXMgdGFnXG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgICBjYXNlIFwiYmFzZWZvbnRcIjpcbiAgICAgIGNhc2UgXCJiZ3NvdW5kXCI6XG4gICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgcGFyc2VSQ0RBVEEodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwibm9zY3JpcHRcIjpcbiAgICAgICAgaWYgKCFzY3JpcHRpbmdfZW5hYmxlZCkge1xuICAgICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLCBhcmczKTtcbiAgICAgICAgICBwYXJzZXIgPSBpbl9oZWFkX25vc2NyaXB0X21vZGU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgaWYgc2NyaXB0aW5nIGlzIGVuYWJsZWQuLi5cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBcIm5vZnJhbWVzXCI6XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgcGFyc2VSYXdUZXh0KHZhbHVlLGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGluc2VydEVsZW1lbnQoZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgdmFyIGVsdCA9IGNyZWF0ZUhUTUxFbHQoZG9jLCB2YWx1ZSwgYXJnMyk7XG4gICAgICAgICAgZWx0Ll9wYXJzZXJfaW5zZXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIGVsdC5fZm9yY2VfYXN5bmMgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoZnJhZ21lbnQpIGVsdC5fYWxyZWFkeV9zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBmbHVzaFRleHQoKTtcbiAgICAgICAgICByZXR1cm4gZWx0O1xuICAgICAgICB9KTtcbiAgICAgICAgdG9rZW5pemVyID0gc2NyaXB0X2RhdGFfc3RhdGU7XG4gICAgICAgIG9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHBhcnNlcjtcbiAgICAgICAgcGFyc2VyID0gdGV4dF9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGVtcGxhdGVcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICBhZmUuaW5zZXJ0TWFya2VyKCk7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHBhcnNlciA9IGluX3RlbXBsYXRlX21vZGU7XG4gICAgICAgIHRlbXBsYXRlSW5zZXJ0aW9uTW9kZXMucHVzaChwYXJzZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgICByZXR1cm47IC8vIGlnbm9yZSBpdFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImhlYWRcIjpcbiAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIHBhcnNlciA9IGFmdGVyX2hlYWRfbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwiYnJcIjpcbiAgICAgICAgYnJlYWs7IC8vIGhhbmRsZSB0aGVzZSBhdCB0aGUgYm90dG9tIG9mIHRoZSBmdW5jdGlvblxuICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgIGlmICghc3RhY2suY29udGFpbnMoXCJ0ZW1wbGF0ZVwiKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKG51bGwsIFwidGhvcm91Z2hcIik7XG4gICAgICAgIHN0YWNrLnBvcFRhZyhcInRlbXBsYXRlXCIpO1xuICAgICAgICBhZmUuY2xlYXJUb01hcmtlcigpO1xuICAgICAgICB0ZW1wbGF0ZUluc2VydGlvbk1vZGVzLnBvcCgpO1xuICAgICAgICByZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gaWdub3JlIGFueSBvdGhlciBlbmQgdGFnXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIElmIG5vdCBoYW5kbGVkIGFib3ZlXG4gICAgaW5faGVhZF9tb2RlKEVORFRBRywgXCJoZWFkXCIsIG51bGwpOyAgIC8vIHN5bnRoZXRpYyA8L2hlYWQ+XG4gICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTsgICAvLyBUaGVuIHJlZG8gdGhpcyBvbmVcbiAgfVxuXG4gIC8vIDEzLjIuNS40LjUgVGhlIFwiaW4gaGVhZCBub3NjcmlwdFwiIGluc2VydGlvbiBtb2RlXG4gIGZ1bmN0aW9uIGluX2hlYWRfbm9zY3JpcHRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgdmFyIHdzID0gdmFsdWUubWF0Y2goTEVBRElOR1dTKTtcbiAgICAgIGlmICh3cykge1xuICAgICAgICBpbl9oZWFkX21vZGUodCwgd3NbMF0pO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyh3c1swXS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBubyBtb3JlIHRleHRcbiAgICAgIGJyZWFrOyAvLyBIYW5kbGUgbm9uLXdoaXRlc3BhY2UgYmVsb3dcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiYmFzZWZvbnRcIjpcbiAgICAgIGNhc2UgXCJiZ3NvdW5kXCI6XG4gICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgIGNhc2UgXCJub2ZyYW1lc1wiOlxuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJoZWFkXCI6XG4gICAgICBjYXNlIFwibm9zY3JpcHRcIjpcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcIm5vc2NyaXB0XCI6XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICBwYXJzZXIgPSBpbl9oZWFkX21vZGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgICBicmVhazsgIC8vIGdvZXMgdG8gdGhlIG91dGVyIGRlZmF1bHRcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjsgLy8gaWdub3JlIG90aGVyIGVuZCB0YWdzXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBJZiBub3QgaGFuZGxlZCBhYm92ZVxuICAgIGluX2hlYWRfbm9zY3JpcHRfbW9kZShFTkRUQUcsIFwibm9zY3JpcHRcIiwgbnVsbCk7XG4gICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAxOiAvLyBURVhUXG4gICAgICB2YXIgd3MgPSB2YWx1ZS5tYXRjaChMRUFESU5HV1MpO1xuICAgICAgaWYgKHdzKSB7XG4gICAgICAgIGluc2VydFRleHQod3NbMF0pO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyh3c1swXS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgYnJlYWs7IC8vIEhhbmRsZSBub24td2hpdGVzcGFjZSBiZWxvd1xuICAgIGNhc2UgNDogLy8gQ09NTUVOVFxuICAgICAgaW5zZXJ0Q29tbWVudCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICBmcmFtZXNldF9vayA9IGZhbHNlO1xuICAgICAgICBwYXJzZXIgPSBpbl9ib2R5X21vZGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJmcmFtZXNldFwiOlxuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHBhcnNlciA9IGluX2ZyYW1lc2V0X21vZGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgICBjYXNlIFwiYmFzZWZvbnRcIjpcbiAgICAgIGNhc2UgXCJiZ3NvdW5kXCI6XG4gICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgIGNhc2UgXCJub2ZyYW1lc1wiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBjYXNlIFwidGVtcGxhdGVcIjpcbiAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICBzdGFjay5wdXNoKGhlYWRfZWxlbWVudF9wb2ludGVyKTtcbiAgICAgICAgaW5faGVhZF9tb2RlKFRBRywgdmFsdWUsIGFyZzMpO1xuICAgICAgICBzdGFjay5yZW1vdmVFbGVtZW50KGhlYWRfZWxlbWVudF9wb2ludGVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImhlYWRcIjpcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgIHJldHVybiBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwiYnJcIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47ICAvLyBpZ25vcmUgYW55IG90aGVyIGVuZCB0YWdcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFmdGVyX2hlYWRfbW9kZShUQUcsIFwiYm9keVwiLCBudWxsKTtcbiAgICBmcmFtZXNldF9vayA9IHRydWU7XG4gICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgfVxuXG4gIC8vIDEzLjIuNS40LjcgVGhlIFwiaW4gYm9keVwiIGluc2VydGlvbiBtb2RlXG4gIGZ1bmN0aW9uIGluX2JvZHlfbW9kZSh0LHZhbHVlLGFyZzMsYXJnNCkge1xuICAgIHZhciBib2R5LCBpLCBub2RlLCBlbHQ7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDE6IC8vIFRFWFRcbiAgICAgIGlmICh0ZXh0SW5jbHVkZXNOVUwpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKE5VTENIQVJTLCBcIlwiKTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gSWYgYW55IG5vbi1zcGFjZSBjaGFyYWN0ZXJzXG4gICAgICBpZiAoZnJhbWVzZXRfb2sgJiYgTk9OV1MudGVzdCh2YWx1ZSkpXG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICBhZmVyZWNvbnN0cnVjdCgpO1xuICAgICAgaW5zZXJ0VGV4dCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBpbnNlcnRDb21tZW50KHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGlmICh0ZW1wbGF0ZUluc2VydGlvbk1vZGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaW5fdGVtcGxhdGVfbW9kZSh0KTtcbiAgICAgIH1cbiAgICAgIHN0b3BQYXJzaW5nKCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaWYgKHN0YWNrLmNvbnRhaW5zKFwidGVtcGxhdGVcIikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNmZXJBdHRyaWJ1dGVzKGFyZzMsIHN0YWNrLmVsZW1lbnRzWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJhc2VcIjpcbiAgICAgIGNhc2UgXCJiYXNlZm9udFwiOlxuICAgICAgY2FzZSBcImJnc291bmRcIjpcbiAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBjYXNlIFwibWV0YVwiOlxuICAgICAgY2FzZSBcIm5vZnJhbWVzXCI6XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIGNhc2UgXCJ0ZW1wbGF0ZVwiOlxuICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZShUQUcsIHZhbHVlLCBhcmczKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgICAgYm9keSA9IHN0YWNrLmVsZW1lbnRzWzFdO1xuICAgICAgICBpZiAoIWJvZHkgfHwgIShib2R5IGluc3RhbmNlb2YgaW1wbC5IVE1MQm9keUVsZW1lbnQpIHx8XG4gICAgICAgICAgICBzdGFjay5jb250YWlucyhcInRlbXBsYXRlXCIpKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZnJhbWVzZXRfb2sgPSBmYWxzZTtcbiAgICAgICAgdHJhbnNmZXJBdHRyaWJ1dGVzKGFyZzMsIGJvZHkpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiZnJhbWVzZXRcIjpcbiAgICAgICAgaWYgKCFmcmFtZXNldF9vaykgcmV0dXJuO1xuICAgICAgICBib2R5ID0gc3RhY2suZWxlbWVudHNbMV07XG4gICAgICAgIGlmICghYm9keSB8fCAhKGJvZHkgaW5zdGFuY2VvZiBpbXBsLkhUTUxCb2R5RWxlbWVudCkpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoYm9keS5wYXJlbnROb2RlKSBib2R5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYm9keSk7XG4gICAgICAgIHdoaWxlKCEoc3RhY2sudG9wIGluc3RhbmNlb2YgaW1wbC5IVE1MSHRtbEVsZW1lbnQpKVxuICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHBhcnNlciA9IGluX2ZyYW1lc2V0X21vZGU7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgIGNhc2UgXCJhcnRpY2xlXCI6XG4gICAgICBjYXNlIFwiYXNpZGVcIjpcbiAgICAgIGNhc2UgXCJibG9ja3F1b3RlXCI6XG4gICAgICBjYXNlIFwiY2VudGVyXCI6XG4gICAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgY2FzZSBcImRpclwiOlxuICAgICAgY2FzZSBcImRpdlwiOlxuICAgICAgY2FzZSBcImRsXCI6XG4gICAgICBjYXNlIFwiZmllbGRzZXRcIjpcbiAgICAgIGNhc2UgXCJmaWdjYXB0aW9uXCI6XG4gICAgICBjYXNlIFwiZmlndXJlXCI6XG4gICAgICBjYXNlIFwiZm9vdGVyXCI6XG4gICAgICBjYXNlIFwiaGVhZGVyXCI6XG4gICAgICBjYXNlIFwiaGdyb3VwXCI6XG4gICAgICBjYXNlIFwibWFpblwiOlxuICAgICAgY2FzZSBcIm5hdlwiOlxuICAgICAgY2FzZSBcIm9sXCI6XG4gICAgICBjYXNlIFwicFwiOlxuICAgICAgY2FzZSBcInNlY3Rpb25cIjpcbiAgICAgIGNhc2UgXCJzdW1tYXJ5XCI6XG4gICAgICBjYXNlIFwidWxcIjpcbiAgICAgICAgaWYgKHN0YWNrLmluQnV0dG9uU2NvcGUoXCJwXCIpKSBpbl9ib2R5X21vZGUoRU5EVEFHLCBcInBcIik7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLCBhcmczKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwibWVudVwiOlxuICAgICAgICBpZiAoc3RhY2suaW5CdXR0b25TY29wZShcInBcIikpIGluX2JvZHlfbW9kZShFTkRUQUcsIFwicFwiKTtcbiAgICAgICAgaWYgKGlzQShzdGFjay50b3AsICdtZW51aXRlbScpKSB7XG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJoMVwiOlxuICAgICAgY2FzZSBcImgyXCI6XG4gICAgICBjYXNlIFwiaDNcIjpcbiAgICAgIGNhc2UgXCJoNFwiOlxuICAgICAgY2FzZSBcImg1XCI6XG4gICAgICBjYXNlIFwiaDZcIjpcbiAgICAgICAgaWYgKHN0YWNrLmluQnV0dG9uU2NvcGUoXCJwXCIpKSBpbl9ib2R5X21vZGUoRU5EVEFHLCBcInBcIik7XG4gICAgICAgIGlmIChzdGFjay50b3AgaW5zdGFuY2VvZiBpbXBsLkhUTUxIZWFkaW5nRWxlbWVudClcbiAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJwcmVcIjpcbiAgICAgIGNhc2UgXCJsaXN0aW5nXCI6XG4gICAgICAgIGlmIChzdGFjay5pbkJ1dHRvblNjb3BlKFwicFwiKSkgaW5fYm9keV9tb2RlKEVORFRBRywgXCJwXCIpO1xuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIGlnbm9yZV9saW5lZmVlZCA9IHRydWU7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImZvcm1cIjpcbiAgICAgICAgaWYgKGZvcm1fZWxlbWVudF9wb2ludGVyICYmICFzdGFjay5jb250YWlucyhcInRlbXBsYXRlXCIpKSByZXR1cm47XG4gICAgICAgIGlmIChzdGFjay5pbkJ1dHRvblNjb3BlKFwicFwiKSkgaW5fYm9keV9tb2RlKEVORFRBRywgXCJwXCIpO1xuICAgICAgICBlbHQgPSBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIGlmICghc3RhY2suY29udGFpbnMoXCJ0ZW1wbGF0ZVwiKSlcbiAgICAgICAgICBmb3JtX2VsZW1lbnRfcG9pbnRlciA9IGVsdDtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwibGlcIjpcbiAgICAgICAgZnJhbWVzZXRfb2sgPSBmYWxzZTtcbiAgICAgICAgZm9yKGkgPSBzdGFjay5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBub2RlID0gc3RhY2suZWxlbWVudHNbaV07XG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBpbXBsLkhUTUxMSUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGluX2JvZHlfbW9kZShFTkRUQUcsIFwibGlcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzQShub2RlLCBzcGVjaWFsU2V0KSAmJiAhaXNBKG5vZGUsIGFkZHJlc3NkaXZwU2V0KSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFjay5pbkJ1dHRvblNjb3BlKFwicFwiKSkgaW5fYm9keV9tb2RlKEVORFRBRywgXCJwXCIpO1xuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImRkXCI6XG4gICAgICBjYXNlIFwiZHRcIjpcbiAgICAgICAgZnJhbWVzZXRfb2sgPSBmYWxzZTtcbiAgICAgICAgZm9yKGkgPSBzdGFjay5lbGVtZW50cy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBub2RlID0gc3RhY2suZWxlbWVudHNbaV07XG4gICAgICAgICAgaWYgKGlzQShub2RlLCBkZGR0U2V0KSkge1xuICAgICAgICAgICAgaW5fYm9keV9tb2RlKEVORFRBRywgbm9kZS5sb2NhbE5hbWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0Eobm9kZSwgc3BlY2lhbFNldCkgJiYgIWlzQShub2RlLCBhZGRyZXNzZGl2cFNldCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhY2suaW5CdXR0b25TY29wZShcInBcIikpIGluX2JvZHlfbW9kZShFTkRUQUcsIFwicFwiKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJwbGFpbnRleHRcIjpcbiAgICAgICAgaWYgKHN0YWNrLmluQnV0dG9uU2NvcGUoXCJwXCIpKSBpbl9ib2R5X21vZGUoRU5EVEFHLCBcInBcIik7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLCBhcmczKTtcbiAgICAgICAgdG9rZW5pemVyID0gcGxhaW50ZXh0X3N0YXRlO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgaWYgKHN0YWNrLmluU2NvcGUoXCJidXR0b25cIikpIHtcbiAgICAgICAgICBpbl9ib2R5X21vZGUoRU5EVEFHLCBcImJ1dHRvblwiKTtcbiAgICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG4gICAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiYVwiOlxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGFmZS5maW5kRWxlbWVudEJ5VGFnKFwiYVwiKTtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICBpbl9ib2R5X21vZGUoRU5EVEFHLCB2YWx1ZSk7XG4gICAgICAgICAgYWZlLnJlbW92ZShhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICBzdGFjay5yZW1vdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmlnXCI6XG4gICAgICBjYXNlIFwiY29kZVwiOlxuICAgICAgY2FzZSBcImVtXCI6XG4gICAgICBjYXNlIFwiZm9udFwiOlxuICAgICAgY2FzZSBcImlcIjpcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgIGNhc2UgXCJzdHJpa2VcIjpcbiAgICAgIGNhc2UgXCJzdHJvbmdcIjpcbiAgICAgIGNhc2UgXCJ0dFwiOlxuICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgYWZlLnB1c2goaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyksIGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJub2JyXCI6XG4gICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG5cbiAgICAgICAgaWYgKHN0YWNrLmluU2NvcGUodmFsdWUpKSB7XG4gICAgICAgICAgaW5fYm9keV9tb2RlKEVORFRBRywgdmFsdWUpO1xuICAgICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYWZlLnB1c2goaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyksIGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJhcHBsZXRcIjpcbiAgICAgIGNhc2UgXCJtYXJxdWVlXCI6XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLGFyZzMpO1xuICAgICAgICBhZmUuaW5zZXJ0TWFya2VyKCk7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInRhYmxlXCI6XG4gICAgICAgIGlmICghZG9jLl9xdWlya3MgJiYgc3RhY2suaW5CdXR0b25TY29wZShcInBcIikpIHtcbiAgICAgICAgICBpbl9ib2R5X21vZGUoRU5EVEFHLCBcInBcIik7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHBhcnNlciA9IGluX3RhYmxlX21vZGU7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImFyZWFcIjpcbiAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgY2FzZSBcImVtYmVkXCI6XG4gICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgICBjYXNlIFwid2JyXCI6XG4gICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLGFyZzMpO1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgZnJhbWVzZXRfb2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgZWx0ID0gaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgdHlwZSA9IGVsdC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICBpZiAoIXR5cGUgfHwgdHlwZS50b0xvd2VyQ2FzZSgpICE9PSBcImhpZGRlblwiKVxuICAgICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInBhcmFtXCI6XG4gICAgICBjYXNlIFwic291cmNlXCI6XG4gICAgICBjYXNlIFwidHJhY2tcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJoclwiOlxuICAgICAgICBpZiAoc3RhY2suaW5CdXR0b25TY29wZShcInBcIikpIGluX2JvZHlfbW9kZShFTkRUQUcsIFwicFwiKTtcbiAgICAgICAgaWYgKGlzQShzdGFjay50b3AsICdtZW51aXRlbScpKSB7XG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICBmcmFtZXNldF9vayA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJpbWFnZVwiOlxuICAgICAgICBpbl9ib2R5X21vZGUoVEFHLCBcImltZ1wiLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIGlnbm9yZV9saW5lZmVlZCA9IHRydWU7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHRva2VuaXplciA9IHJjZGF0YV9zdGF0ZTtcbiAgICAgICAgb3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gcGFyc2VyO1xuICAgICAgICBwYXJzZXIgPSB0ZXh0X21vZGU7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInhtcFwiOlxuICAgICAgICBpZiAoc3RhY2suaW5CdXR0b25TY29wZShcInBcIikpIGluX2JvZHlfbW9kZShFTkRUQUcsIFwicFwiKTtcbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgZnJhbWVzZXRfb2sgPSBmYWxzZTtcbiAgICAgICAgcGFyc2VSYXdUZXh0KHZhbHVlLCBhcmczKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIHBhcnNlUmF3VGV4dCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm5vZW1iZWRcIjpcbiAgICAgICAgcGFyc2VSYXdUZXh0KHZhbHVlLGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJub3NjcmlwdFwiOlxuICAgICAgICBpZiAoc2NyaXB0aW5nX2VuYWJsZWQpIHtcbiAgICAgICAgICBwYXJzZVJhd1RleHQodmFsdWUsYXJnMyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgLy8gWFhYIE90aGVyd2lzZSB0cmVhdCBpdCBhcyBhbnkgb3RoZXIgb3BlbiB0YWc/XG5cbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICAgIGlmIChwYXJzZXIgPT09IGluX3RhYmxlX21vZGUgfHxcbiAgICAgICAgICBwYXJzZXIgPT09IGluX2NhcHRpb25fbW9kZSB8fFxuICAgICAgICAgIHBhcnNlciA9PT0gaW5fdGFibGVfYm9keV9tb2RlIHx8XG4gICAgICAgICAgcGFyc2VyID09PSBpbl9yb3dfbW9kZSB8fFxuICAgICAgICAgIHBhcnNlciA9PT0gaW5fY2VsbF9tb2RlKVxuICAgICAgICAgIHBhcnNlciA9IGluX3NlbGVjdF9pbl90YWJsZV9tb2RlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcGFyc2VyID0gaW5fc2VsZWN0X21vZGU7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm9wdGdyb3VwXCI6XG4gICAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICAgIGlmIChzdGFjay50b3AgaW5zdGFuY2VvZiBpbXBsLkhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgaW5fYm9keV9tb2RlKEVORFRBRywgXCJvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICAgIGlmIChpc0Eoc3RhY2sudG9wLCAnbWVudWl0ZW0nKSkge1xuICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGFmZXJlY29uc3RydWN0KCk7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLCBhcmczKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwicmJcIjpcbiAgICAgIGNhc2UgXCJydGNcIjpcbiAgICAgICAgaWYgKHN0YWNrLmluU2NvcGUoXCJydWJ5XCIpKSB7XG4gICAgICAgICAgc3RhY2suZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLGFyZzMpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJycFwiOlxuICAgICAgY2FzZSBcInJ0XCI6XG4gICAgICAgIGlmIChzdGFjay5pblNjb3BlKFwicnVieVwiKSkge1xuICAgICAgICAgIHN0YWNrLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoXCJydGNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgYWZlcmVjb25zdHJ1Y3QoKTtcbiAgICAgICAgYWRqdXN0TWF0aE1MQXR0cmlidXRlcyhhcmczKTtcbiAgICAgICAgYWRqdXN0Rm9yZWlnbkF0dHJpYnV0ZXMoYXJnMyk7XG4gICAgICAgIGluc2VydEZvcmVpZ25FbGVtZW50KHZhbHVlLCBhcmczLCBOQU1FU1BBQ0UuTUFUSE1MKTtcbiAgICAgICAgaWYgKGFyZzQpIC8vIHNlbGYtY2xvc2luZyBmbGFnXG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICBhZmVyZWNvbnN0cnVjdCgpO1xuICAgICAgICBhZGp1c3RTVkdBdHRyaWJ1dGVzKGFyZzMpO1xuICAgICAgICBhZGp1c3RGb3JlaWduQXR0cmlidXRlcyhhcmczKTtcbiAgICAgICAgaW5zZXJ0Rm9yZWlnbkVsZW1lbnQodmFsdWUsIGFyZzMsIE5BTUVTUEFDRS5TVkcpO1xuICAgICAgICBpZiAoYXJnNCkgLy8gc2VsZi1jbG9zaW5nIGZsYWdcbiAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwiZnJhbWVcIjpcbiAgICAgIGNhc2UgXCJoZWFkXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIC8vIElnbm9yZSB0YWJsZSB0YWdzIGlmIHdlJ3JlIG5vdCBpbl90YWJsZSBtb2RlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIGFueSBvdGhlciBzdGFydCB0YWcgaGVyZVxuICAgICAgLy8gKGFuZCBhbHNvIG5vc2NyaXB0IHRhZ3Mgd2hlbiBzY3JpcHRpbmcgaXMgZGlzYWJsZWQpXG4gICAgICBhZmVyZWNvbnN0cnVjdCgpO1xuICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICByZXR1cm47XG5cbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwidGVtcGxhdGVcIjpcbiAgICAgICAgaW5faGVhZF9tb2RlKEVORFRBRywgdmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluU2NvcGUoXCJib2R5XCIpKSByZXR1cm47XG4gICAgICAgIHBhcnNlciA9IGFmdGVyX2JvZHlfbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaWYgKCFzdGFjay5pblNjb3BlKFwiYm9keVwiKSkgcmV0dXJuO1xuICAgICAgICBwYXJzZXIgPSBhZnRlcl9ib2R5X21vZGU7XG4gICAgICAgIHBhcnNlcih0LCB2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgIGNhc2UgXCJhcnRpY2xlXCI6XG4gICAgICBjYXNlIFwiYXNpZGVcIjpcbiAgICAgIGNhc2UgXCJibG9ja3F1b3RlXCI6XG4gICAgICBjYXNlIFwiYnV0dG9uXCI6XG4gICAgICBjYXNlIFwiY2VudGVyXCI6XG4gICAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgY2FzZSBcImRpclwiOlxuICAgICAgY2FzZSBcImRpdlwiOlxuICAgICAgY2FzZSBcImRsXCI6XG4gICAgICBjYXNlIFwiZmllbGRzZXRcIjpcbiAgICAgIGNhc2UgXCJmaWdjYXB0aW9uXCI6XG4gICAgICBjYXNlIFwiZmlndXJlXCI6XG4gICAgICBjYXNlIFwiZm9vdGVyXCI6XG4gICAgICBjYXNlIFwiaGVhZGVyXCI6XG4gICAgICBjYXNlIFwiaGdyb3VwXCI6XG4gICAgICBjYXNlIFwibGlzdGluZ1wiOlxuICAgICAgY2FzZSBcIm1haW5cIjpcbiAgICAgIGNhc2UgXCJtZW51XCI6XG4gICAgICBjYXNlIFwibmF2XCI6XG4gICAgICBjYXNlIFwib2xcIjpcbiAgICAgIGNhc2UgXCJwcmVcIjpcbiAgICAgIGNhc2UgXCJzZWN0aW9uXCI6XG4gICAgICBjYXNlIFwic3VtbWFyeVwiOlxuICAgICAgY2FzZSBcInVsXCI6XG4gICAgICAgIC8vIElnbm9yZSBpZiB0aGVyZSBpcyBub3QgYSBtYXRjaGluZyBvcGVuIHRhZ1xuICAgICAgICBpZiAoIXN0YWNrLmluU2NvcGUodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHN0YWNrLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgc3RhY2sucG9wVGFnKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiZm9ybVwiOlxuICAgICAgICBpZiAoIXN0YWNrLmNvbnRhaW5zKFwidGVtcGxhdGVcIikpIHtcbiAgICAgICAgICB2YXIgb3BlbmZvcm0gPSBmb3JtX2VsZW1lbnRfcG9pbnRlcjtcbiAgICAgICAgICBmb3JtX2VsZW1lbnRfcG9pbnRlciA9IG51bGw7XG4gICAgICAgICAgaWYgKCFvcGVuZm9ybSB8fCAhc3RhY2suZWxlbWVudEluU2NvcGUob3BlbmZvcm0pKSByZXR1cm47XG4gICAgICAgICAgc3RhY2suZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICAgIHN0YWNrLnJlbW92ZUVsZW1lbnQob3BlbmZvcm0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghc3RhY2suaW5TY29wZShcImZvcm1cIikpIHJldHVybjtcbiAgICAgICAgICBzdGFjay5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgICAgc3RhY2sucG9wVGFnKFwiZm9ybVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJwXCI6XG4gICAgICAgIGlmICghc3RhY2suaW5CdXR0b25TY29wZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpbl9ib2R5X21vZGUoVEFHLCB2YWx1ZSwgbnVsbCk7XG4gICAgICAgICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzdGFjay5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKHZhbHVlKTtcbiAgICAgICAgICBzdGFjay5wb3BUYWcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImxpXCI6XG4gICAgICAgIGlmICghc3RhY2suaW5MaXN0SXRlbVNjb3BlKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBzdGFjay5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKHZhbHVlKTtcbiAgICAgICAgc3RhY2sucG9wVGFnKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiZGRcIjpcbiAgICAgIGNhc2UgXCJkdFwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluU2NvcGUodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHN0YWNrLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3ModmFsdWUpO1xuICAgICAgICBzdGFjay5wb3BUYWcodmFsdWUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJoMVwiOlxuICAgICAgY2FzZSBcImgyXCI6XG4gICAgICBjYXNlIFwiaDNcIjpcbiAgICAgIGNhc2UgXCJoNFwiOlxuICAgICAgY2FzZSBcImg1XCI6XG4gICAgICBjYXNlIFwiaDZcIjpcbiAgICAgICAgaWYgKCFzdGFjay5lbGVtZW50VHlwZUluU2NvcGUoaW1wbC5IVE1MSGVhZGluZ0VsZW1lbnQpKSByZXR1cm47XG4gICAgICAgIHN0YWNrLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgc3RhY2sucG9wRWxlbWVudFR5cGUoaW1wbC5IVE1MSGVhZGluZ0VsZW1lbnQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJzYXJjYXNtXCI6XG4gICAgICAgIC8vIFRha2UgYSBkZWVwIGJyZWF0aCwgYW5kIHRoZW46XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiYVwiOlxuICAgICAgY2FzZSBcImJcIjpcbiAgICAgIGNhc2UgXCJiaWdcIjpcbiAgICAgIGNhc2UgXCJjb2RlXCI6XG4gICAgICBjYXNlIFwiZW1cIjpcbiAgICAgIGNhc2UgXCJmb250XCI6XG4gICAgICBjYXNlIFwiaVwiOlxuICAgICAgY2FzZSBcIm5vYnJcIjpcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgIGNhc2UgXCJzdHJpa2VcIjpcbiAgICAgIGNhc2UgXCJzdHJvbmdcIjpcbiAgICAgIGNhc2UgXCJ0dFwiOlxuICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgdmFyIHJlc3VsdCA9IGFkb3B0aW9uQWdlbmN5KHZhbHVlKTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmV0dXJuOyAgLy8gSWYgd2UgZGlkIHNvbWV0aGluZyB3ZSdyZSBkb25lXG4gICAgICAgIGJyZWFrOyAgICAgICAgIC8vIEdvIHRvIHRoZSBcImFueSBvdGhlciBlbmQgdGFnXCIgY2FzZVxuXG4gICAgICBjYXNlIFwiYXBwbGV0XCI6XG4gICAgICBjYXNlIFwibWFycXVlZVwiOlxuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluU2NvcGUodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHN0YWNrLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgc3RhY2sucG9wVGFnKHZhbHVlKTtcbiAgICAgICAgYWZlLmNsZWFyVG9NYXJrZXIoKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiYnJcIjpcbiAgICAgICAgaW5fYm9keV9tb2RlKFRBRywgdmFsdWUsIG51bGwpOyAgLy8gVHVybiA8L2JyPiBpbnRvIDxicj5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBBbnkgb3RoZXIgZW5kIHRhZyBnb2VzIGhlcmVcbiAgICAgIGZvcihpID0gc3RhY2suZWxlbWVudHMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIG5vZGUgPSBzdGFjay5lbGVtZW50c1tpXTtcbiAgICAgICAgaWYgKGlzQShub2RlLCB2YWx1ZSkpIHtcbiAgICAgICAgICBzdGFjay5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKHZhbHVlKTtcbiAgICAgICAgICBzdGFjay5wb3BFbGVtZW50KG5vZGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQShub2RlLCBzcGVjaWFsU2V0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGV4dF9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDE6IC8vIFRFWFRcbiAgICAgIGluc2VydFRleHQodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTFNjcmlwdEVsZW1lbnQpXG4gICAgICAgIHN0YWNrLnRvcC5fYWxyZWFkeV9zdGFydGVkID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgcGFyc2VyID0gb3JpZ2luYWxJbnNlcnRpb25Nb2RlO1xuICAgICAgcGFyc2VyKHQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMzogLy8gRU5EVEFHXG4gICAgICBpZiAodmFsdWUgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgaGFuZGxlU2NyaXB0RW5kKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIHBhcnNlciA9IG9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGdldCBhbnkgb3RoZXIgdG9rZW4gdHlwZXNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbl90YWJsZV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgZnVuY3Rpb24gZ2V0VHlwZUF0dHIoYXR0cnMpIHtcbiAgICAgIGZvcih2YXIgaSA9IDAsIG4gPSBhdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGF0dHJzW2ldWzBdID09PSBcInR5cGVcIilcbiAgICAgICAgICByZXR1cm4gYXR0cnNbaV1bMV0udG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAxOiAvLyBURVhUXG4gICAgICAvLyBYWFggdGhlIHRleHRfaW50ZWdyYXRpb25fbW9kZSBzdHVmZiBpc1xuICAgICAgLy8ganVzdCBhIGhhY2sgSSBtYWRlIHVwXG4gICAgICBpZiAodGV4dF9pbnRlZ3JhdGlvbl9tb2RlKSB7XG4gICAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQShzdGFjay50b3AsIHRhYmxlc2VjdGlvbnJvd1NldCkpIHtcbiAgICAgICAgcGVuZGluZ190YWJsZV90ZXh0ID0gW107XG4gICAgICAgIG9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHBhcnNlcjtcbiAgICAgICAgcGFyc2VyID0gaW5fdGFibGVfdGV4dF9tb2RlO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgIGluc2VydENvbW1lbnQodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgNTogLy8gRE9DVFlQRVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJjYXB0aW9uXCI6XG4gICAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlQ29udGV4dFNldCk7XG4gICAgICAgIGFmZS5pbnNlcnRNYXJrZXIoKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHBhcnNlciA9IGluX2NhcHRpb25fbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlQ29udGV4dFNldCk7XG4gICAgICAgIGluc2VydEhUTUxFbGVtZW50KHZhbHVlLGFyZzMpO1xuICAgICAgICBwYXJzZXIgPSBpbl9jb2x1bW5fZ3JvdXBfbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgICBpbl90YWJsZV9tb2RlKFRBRywgXCJjb2xncm91cFwiLCBudWxsKTtcbiAgICAgICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcInRib2R5XCI6XG4gICAgICBjYXNlIFwidGZvb3RcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgICBzdGFjay5jbGVhclRvQ29udGV4dCh0YWJsZUNvbnRleHRTZXQpO1xuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSxhcmczKTtcbiAgICAgICAgcGFyc2VyID0gaW5fdGFibGVfYm9keV9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGRcIjpcbiAgICAgIGNhc2UgXCJ0aFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIGluX3RhYmxlX21vZGUoVEFHLCBcInRib2R5XCIsIG51bGwpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJ0YWJsZVwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluVGFibGVTY29wZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm47IC8vIElnbm9yZSB0aGUgdG9rZW5cbiAgICAgICAgfVxuICAgICAgICBpbl90YWJsZV9tb2RlKEVORFRBRywgdmFsdWUpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZUF0dHIoYXJnMyk7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImhpZGRlblwiKSBicmVhazsgIC8vIHRvIHRoZSBhbnl0aGluZyBlbHNlIGNhc2VcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJmb3JtXCI6XG4gICAgICAgIGlmIChmb3JtX2VsZW1lbnRfcG9pbnRlciB8fCBzdGFjay5jb250YWlucyhcInRlbXBsYXRlXCIpKSByZXR1cm47XG4gICAgICAgIGZvcm1fZWxlbWVudF9wb2ludGVyID0gaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICBzdGFjay5wb3BFbGVtZW50KGZvcm1fZWxlbWVudF9wb2ludGVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRhYmxlXCI6XG4gICAgICAgIGlmICghc3RhY2suaW5UYWJsZVNjb3BlKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBzdGFjay5wb3BUYWcodmFsdWUpO1xuICAgICAgICByZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJjYXB0aW9uXCI6XG4gICAgICBjYXNlIFwiY29sXCI6XG4gICAgICBjYXNlIFwiY29sZ3JvdXBcIjpcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJ0ZW1wbGF0ZVwiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIHRoZSBhbnl0aGluZyBlbHNlIGNhc2VcbiAgICBmb3N0ZXJfcGFyZW50X21vZGUgPSB0cnVlO1xuICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgZm9zdGVyX3BhcmVudF9tb2RlID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBpbl90YWJsZV90ZXh0X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBpZiAodCA9PT0gVEVYVCkge1xuICAgICAgaWYgKHRleHRJbmNsdWRlc05VTCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoTlVMQ0hBUlMsIFwiXCIpO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nX3RhYmxlX3RleHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHMgPSBwZW5kaW5nX3RhYmxlX3RleHQuam9pbihcIlwiKTtcbiAgICAgIHBlbmRpbmdfdGFibGVfdGV4dC5sZW5ndGggPSAwO1xuICAgICAgaWYgKE5PTldTLnRlc3QocykpIHsgLy8gSWYgYW55IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gVGhpcyBtdXN0IGJlIHRoZSBzYW1lIGNvZGUgYXMgdGhlIFwiYW55dGhpbmcgZWxzZVwiXG4gICAgICAgIC8vIGNhc2Ugb2YgdGhlIGluX3RhYmxlIG1vZGUgYWJvdmUuXG4gICAgICAgIGZvc3Rlcl9wYXJlbnRfbW9kZSA9IHRydWU7XG4gICAgICAgIGluX2JvZHlfbW9kZShURVhULCBzKTtcbiAgICAgICAgZm9zdGVyX3BhcmVudF9tb2RlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaW5zZXJ0VGV4dChzKTtcbiAgICAgIH1cbiAgICAgIHBhcnNlciA9IG9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICAgIHBhcnNlcih0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBpbl9jYXB0aW9uX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBmdW5jdGlvbiBlbmRfY2FwdGlvbigpIHtcbiAgICAgIGlmICghc3RhY2suaW5UYWJsZVNjb3BlKFwiY2FwdGlvblwiKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgc3RhY2suZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgc3RhY2sucG9wVGFnKFwiY2FwdGlvblwiKTtcbiAgICAgIGFmZS5jbGVhclRvTWFya2VyKCk7XG4gICAgICBwYXJzZXIgPSBpbl90YWJsZV9tb2RlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIGlmIChlbmRfY2FwdGlvbigpKSBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgICBlbmRfY2FwdGlvbigpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGFibGVcIjpcbiAgICAgICAgaWYgKGVuZF9jYXB0aW9uKCkpIHBhcnNlcih0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJib2R5XCI6XG4gICAgICBjYXNlIFwiY29sXCI6XG4gICAgICBjYXNlIFwiY29sZ3JvdXBcIjpcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIFRoZSBBbnl0aGluZyBFbHNlIGNhc2VcbiAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5fY29sdW1uX2dyb3VwX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgdmFyIHdzID0gdmFsdWUubWF0Y2goTEVBRElOR1dTKTtcbiAgICAgIGlmICh3cykge1xuICAgICAgICBpbnNlcnRUZXh0KHdzWzBdKTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcod3NbMF0ubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGJyZWFrOyAvLyBIYW5kbGUgbm9uLXdoaXRlc3BhY2UgYmVsb3dcblxuICAgIGNhc2UgNDogLy8gQ09NTUVOVFxuICAgICAgaW5zZXJ0Q29tbWVudCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGVtcGxhdGVcIjpcbiAgICAgICAgaW5faGVhZF9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICAgIGlmICghaXNBKHN0YWNrLnRvcCwgJ2NvbGdyb3VwJykpIHtcbiAgICAgICAgICByZXR1cm47IC8vIElnbm9yZSB0aGUgdG9rZW4uXG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIHBhcnNlciA9IGluX3RhYmxlX21vZGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJjb2xcIjpcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBbnl0aGluZyBlbHNlXG4gICAgaWYgKCFpc0Eoc3RhY2sudG9wLCAnY29sZ3JvdXAnKSkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgdGhlIHRva2VuLlxuICAgIH1cbiAgICBpbl9jb2x1bW5fZ3JvdXBfbW9kZShFTkRUQUcsIFwiY29sZ3JvdXBcIik7XG4gICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluX3RhYmxlX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIGZ1bmN0aW9uIGVuZHNlY3QoKSB7XG4gICAgICBpZiAoIXN0YWNrLmluVGFibGVTY29wZShcInRib2R5XCIpICYmXG4gICAgICAgICFzdGFjay5pblRhYmxlU2NvcGUoXCJ0aGVhZFwiKSAmJlxuICAgICAgICAhc3RhY2suaW5UYWJsZVNjb3BlKFwidGZvb3RcIikpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlQm9keUNvbnRleHRTZXQpO1xuICAgICAgaW5fdGFibGVfYm9keV9tb2RlKEVORFRBRywgc3RhY2sudG9wLmxvY2FsTmFtZSwgbnVsbCk7XG4gICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgIH1cblxuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlQm9keUNvbnRleHRTZXQpO1xuICAgICAgICBpbnNlcnRIVE1MRWxlbWVudCh2YWx1ZSwgYXJnMyk7XG4gICAgICAgIHBhcnNlciA9IGluX3Jvd19tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgICBpbl90YWJsZV9ib2R5X21vZGUoVEFHLCBcInRyXCIsIG51bGwpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0Zm9vdFwiOlxuICAgICAgY2FzZSBcInRoZWFkXCI6XG4gICAgICAgIGVuZHNlY3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRhYmxlXCI6XG4gICAgICAgIGVuZHNlY3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcInRib2R5XCI6XG4gICAgICBjYXNlIFwidGZvb3RcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgICBpZiAoc3RhY2suaW5UYWJsZVNjb3BlKHZhbHVlKSkge1xuICAgICAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlQm9keUNvbnRleHRTZXQpO1xuICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgIHBhcnNlciA9IGluX3RhYmxlX21vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJjYXB0aW9uXCI6XG4gICAgICBjYXNlIFwiY29sXCI6XG4gICAgICBjYXNlIFwiY29sZ3JvdXBcIjpcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICBjYXNlIFwidGRcIjpcbiAgICAgIGNhc2UgXCJ0aFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIEFueXRoaW5nIGVsc2U6XG4gICAgaW5fdGFibGVfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbl9yb3dfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIGZ1bmN0aW9uIGVuZHJvdygpIHtcbiAgICAgIGlmICghc3RhY2suaW5UYWJsZVNjb3BlKFwidHJcIikpIHJldHVybiBmYWxzZTtcbiAgICAgIHN0YWNrLmNsZWFyVG9Db250ZXh0KHRhYmxlUm93Q29udGV4dFNldCk7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICAgIHBhcnNlciA9IGluX3RhYmxlX2JvZHlfbW9kZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRoXCI6XG4gICAgICBjYXNlIFwidGRcIjpcbiAgICAgICAgc3RhY2suY2xlYXJUb0NvbnRleHQodGFibGVSb3dDb250ZXh0U2V0KTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICBwYXJzZXIgPSBpbl9jZWxsX21vZGU7XG4gICAgICAgIGFmZS5pbnNlcnRNYXJrZXIoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImNhcHRpb25cIjpcbiAgICAgIGNhc2UgXCJjb2xcIjpcbiAgICAgIGNhc2UgXCJjb2xncm91cFwiOlxuICAgICAgY2FzZSBcInRib2R5XCI6XG4gICAgICBjYXNlIFwidGZvb3RcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIGlmIChlbmRyb3coKSkgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIGVuZHJvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGFibGVcIjpcbiAgICAgICAgaWYgKGVuZHJvdygpKSBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0Zm9vdFwiOlxuICAgICAgY2FzZSBcInRoZWFkXCI6XG4gICAgICAgIGlmIChzdGFjay5pblRhYmxlU2NvcGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGVuZHJvdygpKSBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJib2R5XCI6XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgY2FzZSBcInRkXCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gYW55dGhpbmcgZWxzZVxuICAgIGluX3RhYmxlX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5fY2VsbF9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbFwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhcIjpcbiAgICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgICAgY2FzZSBcInRyXCI6XG4gICAgICAgIGlmIChzdGFjay5pblRhYmxlU2NvcGUoXCJ0ZFwiKSkge1xuICAgICAgICAgIGluX2NlbGxfbW9kZShFTkRUQUcsIFwidGRcIik7XG4gICAgICAgICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGFjay5pblRhYmxlU2NvcGUoXCJ0aFwiKSkge1xuICAgICAgICAgIGluX2NlbGxfbW9kZShFTkRUQUcsIFwidGhcIik7XG4gICAgICAgICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwidGRcIjpcbiAgICAgIGNhc2UgXCJ0aFwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluVGFibGVTY29wZSh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgc3RhY2suZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICBzdGFjay5wb3BUYWcodmFsdWUpO1xuICAgICAgICBhZmUuY2xlYXJUb01hcmtlcigpO1xuICAgICAgICBwYXJzZXIgPSBpbl9yb3dfbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgY2FzZSBcImNhcHRpb25cIjpcbiAgICAgIGNhc2UgXCJjb2xcIjpcbiAgICAgIGNhc2UgXCJjb2xncm91cFwiOlxuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwidGFibGVcIjpcbiAgICAgIGNhc2UgXCJ0Ym9keVwiOlxuICAgICAgY2FzZSBcInRmb290XCI6XG4gICAgICBjYXNlIFwidGhlYWRcIjpcbiAgICAgIGNhc2UgXCJ0clwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluVGFibGVTY29wZSh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgaW5fY2VsbF9tb2RlKEVORFRBRywgc3RhY2suaW5UYWJsZVNjb3BlKFwidGRcIikgPyBcInRkXCIgOiBcInRoXCIpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBhbnl0aGluZyBlbHNlXG4gICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluX3NlbGVjdF9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDE6IC8vIFRFWFRcbiAgICAgIGlmICh0ZXh0SW5jbHVkZXNOVUwpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKE5VTENIQVJTLCBcIlwiKTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5zZXJ0VGV4dCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBpbnNlcnRDb21tZW50KHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDU6IC8vIERPQ1RZUEVcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAyOiAvLyBUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICBpZiAoc3RhY2sudG9wIGluc3RhbmNlb2YgaW1wbC5IVE1MT3B0aW9uRWxlbWVudClcbiAgICAgICAgICBpbl9zZWxlY3RfbW9kZShFTkRUQUcsIHZhbHVlKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwib3B0Z3JvdXBcIjpcbiAgICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTE9wdGlvbkVsZW1lbnQpXG4gICAgICAgICAgaW5fc2VsZWN0X21vZGUoRU5EVEFHLCBcIm9wdGlvblwiKTtcbiAgICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTE9wdEdyb3VwRWxlbWVudClcbiAgICAgICAgICBpbl9zZWxlY3RfbW9kZShFTkRUQUcsIHZhbHVlKTtcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIGluX3NlbGVjdF9tb2RlKEVORFRBRywgdmFsdWUpOyAvLyB0cmVhdCBpdCBhcyBhIGNsb3NlIHRhZ1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgY2FzZSBcImtleWdlblwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIGlmICghc3RhY2suaW5TZWxlY3RTY29wZShcInNlbGVjdFwiKSkgcmV0dXJuO1xuICAgICAgICBpbl9zZWxlY3RfbW9kZShFTkRUQUcsIFwic2VsZWN0XCIpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIGNhc2UgXCJ0ZW1wbGF0ZVwiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwib3B0Z3JvdXBcIjpcbiAgICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTE9wdGlvbkVsZW1lbnQgJiZcbiAgICAgICAgICBzdGFjay5lbGVtZW50c1tzdGFjay5lbGVtZW50cy5sZW5ndGgtMl0gaW5zdGFuY2VvZlxuICAgICAgICAgIGltcGwuSFRNTE9wdEdyb3VwRWxlbWVudCkge1xuICAgICAgICAgIGluX3NlbGVjdF9tb2RlKEVORFRBRywgXCJvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTE9wdEdyb3VwRWxlbWVudClcbiAgICAgICAgICBzdGFjay5wb3AoKTtcblxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgaWYgKHN0YWNrLnRvcCBpbnN0YW5jZW9mIGltcGwuSFRNTE9wdGlvbkVsZW1lbnQpXG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICBpZiAoIXN0YWNrLmluU2VsZWN0U2NvcGUodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHN0YWNrLnBvcFRhZyh2YWx1ZSk7XG4gICAgICAgIHJlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJ0ZW1wbGF0ZVwiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIGFueXRoaW5nIGVsc2U6IGp1c3QgaWdub3JlIHRoZSB0b2tlblxuICB9XG5cbiAgZnVuY3Rpb24gaW5fc2VsZWN0X2luX3RhYmxlX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBzd2l0Y2godmFsdWUpIHtcbiAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgIGNhc2UgXCJ0YWJsZVwiOlxuICAgIGNhc2UgXCJ0Ym9keVwiOlxuICAgIGNhc2UgXCJ0Zm9vdFwiOlxuICAgIGNhc2UgXCJ0aGVhZFwiOlxuICAgIGNhc2UgXCJ0clwiOlxuICAgIGNhc2UgXCJ0ZFwiOlxuICAgIGNhc2UgXCJ0aFwiOlxuICAgICAgc3dpdGNoKHQpIHtcbiAgICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICAgIGluX3NlbGVjdF9pbl90YWJsZV9tb2RlKEVORFRBRywgXCJzZWxlY3RcIik7XG4gICAgICAgIHBhcnNlcih0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgMzogLy8gRU5EVEFHXG4gICAgICAgIGlmIChzdGFjay5pblRhYmxlU2NvcGUodmFsdWUpKSB7XG4gICAgICAgICAgaW5fc2VsZWN0X2luX3RhYmxlX21vZGUoRU5EVEFHLCBcInNlbGVjdFwiKTtcbiAgICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbnl0aGluZyBlbHNlXG4gICAgaW5fc2VsZWN0X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5fdGVtcGxhdGVfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIGZ1bmN0aW9uIHN3aXRjaE1vZGVBbmRSZXByb2Nlc3MobW9kZSkge1xuICAgICAgcGFyc2VyID0gbW9kZTtcbiAgICAgIHRlbXBsYXRlSW5zZXJ0aW9uTW9kZXNbdGVtcGxhdGVJbnNlcnRpb25Nb2Rlcy5sZW5ndGgtMV0gPSBwYXJzZXI7XG4gICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgIH1cbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgIGNhc2UgNDogLy8gQ09NTUVOVFxuICAgIGNhc2UgNTogLy8gRE9DVFlQRVxuICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIC0xOiAvLyBFT0ZcbiAgICAgIGlmICghc3RhY2suY29udGFpbnMoXCJ0ZW1wbGF0ZVwiKSkge1xuICAgICAgICBzdG9wUGFyc2luZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhY2sucG9wVGFnKFwidGVtcGxhdGVcIik7XG4gICAgICAgIGFmZS5jbGVhclRvTWFya2VyKCk7XG4gICAgICAgIHRlbXBsYXRlSW5zZXJ0aW9uTW9kZXMucG9wKCk7XG4gICAgICAgIHJlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwYXJzZXIodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgICBjYXNlIFwiYmFzZWZvbnRcIjpcbiAgICAgIGNhc2UgXCJiZ3NvdW5kXCI6XG4gICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgIGNhc2UgXCJub2ZyYW1lc1wiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBjYXNlIFwidGVtcGxhdGVcIjpcbiAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiY2FwdGlvblwiOlxuICAgICAgY2FzZSBcImNvbGdyb3VwXCI6XG4gICAgICBjYXNlIFwidGJvZHlcIjpcbiAgICAgIGNhc2UgXCJ0Zm9vdFwiOlxuICAgICAgY2FzZSBcInRoZWFkXCI6XG4gICAgICAgIHN3aXRjaE1vZGVBbmRSZXByb2Nlc3MoaW5fdGFibGVfbW9kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJjb2xcIjpcbiAgICAgICAgc3dpdGNoTW9kZUFuZFJlcHJvY2Vzcyhpbl9jb2x1bW5fZ3JvdXBfbW9kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJ0clwiOlxuICAgICAgICBzd2l0Y2hNb2RlQW5kUmVwcm9jZXNzKGluX3RhYmxlX2JvZHlfbW9kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJ0ZFwiOlxuICAgICAgY2FzZSBcInRoXCI6XG4gICAgICAgIHN3aXRjaE1vZGVBbmRSZXByb2Nlc3MoaW5fcm93X21vZGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2hNb2RlQW5kUmVwcm9jZXNzKGluX2JvZHlfbW9kZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIHN3aXRjaCh2YWx1ZSkge1xuICAgICAgY2FzZSBcInRlbXBsYXRlXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZnRlcl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgLy8gSWYgYW55IG5vbi1zcGFjZSBjaGFycywgaGFuZGxlIGJlbG93XG4gICAgICBpZiAoTk9OV1MudGVzdCh2YWx1ZSkpIGJyZWFrO1xuICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgIC8vIEFwcGVuZCBpdCB0byB0aGUgPGh0bWw+IGVsZW1lbnRcbiAgICAgIHN0YWNrLmVsZW1lbnRzWzBdLl9hcHBlbmRDaGlsZChkb2MuY3JlYXRlQ29tbWVudCh2YWx1ZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgNTogLy8gRE9DVFlQRVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgc3RvcFBhcnNpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgaWYgKHZhbHVlID09PSBcImh0bWxcIikge1xuICAgICAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhazsgLy8gZm9yIGFueSBvdGhlciB0YWdzXG4gICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgIGlmICh2YWx1ZSA9PT0gXCJodG1sXCIpIHtcbiAgICAgICAgaWYgKGZyYWdtZW50KSByZXR1cm47XG4gICAgICAgIHBhcnNlciA9IGFmdGVyX2FmdGVyX2JvZHlfbW9kZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJlYWs7IC8vIGZvciBhbnkgb3RoZXIgdGFnc1xuICAgIH1cblxuICAgIC8vIGFueXRoaW5nIGVsc2VcbiAgICBwYXJzZXIgPSBpbl9ib2R5X21vZGU7XG4gICAgcGFyc2VyKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluX2ZyYW1lc2V0X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpIHtcbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgLy8gSWdub3JlIGFueSBub24tc3BhY2UgY2hhcmFjdGVyc1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEFMTE5PTldTLCBcIlwiKTtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSBpbnNlcnRUZXh0KHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgIGluc2VydENvbW1lbnQodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgNTogLy8gRE9DVFlQRVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgc3RvcFBhcnNpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiZnJhbWVzZXRcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIFwiZnJhbWVcIjpcbiAgICAgICAgaW5zZXJ0SFRNTEVsZW1lbnQodmFsdWUsIGFyZzMpO1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcIm5vZnJhbWVzXCI6XG4gICAgICAgIGluX2hlYWRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzogLy8gRU5EVEFHXG4gICAgICBpZiAodmFsdWUgPT09IFwiZnJhbWVzZXRcIikge1xuICAgICAgICBpZiAoZnJhZ21lbnQgJiYgc3RhY2sudG9wIGluc3RhbmNlb2YgaW1wbC5IVE1MSHRtbEVsZW1lbnQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFmcmFnbWVudCAmJlxuICAgICAgICAgICEoc3RhY2sudG9wIGluc3RhbmNlb2YgaW1wbC5IVE1MRnJhbWVTZXRFbGVtZW50KSlcbiAgICAgICAgICBwYXJzZXIgPSBhZnRlcl9mcmFtZXNldF9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgYW55dGhpbmcgZWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJfZnJhbWVzZXRfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgIHN3aXRjaCh0KSB7XG4gICAgY2FzZSAxOiAvLyBURVhUXG4gICAgICAvLyBJZ25vcmUgYW55IG5vbi1zcGFjZSBjaGFyYWN0ZXJzXG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoQUxMTk9OV1MsIFwiXCIpO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIGluc2VydFRleHQodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgNDogLy8gQ09NTUVOVFxuICAgICAgaW5zZXJ0Q29tbWVudCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICByZXR1cm47XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBzdG9wUGFyc2luZygpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJub2ZyYW1lc1wiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IC8vIEVORFRBR1xuICAgICAgaWYgKHZhbHVlID09PSBcImh0bWxcIikge1xuICAgICAgICBwYXJzZXIgPSBhZnRlcl9hZnRlcl9mcmFtZXNldF9tb2RlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgYW55dGhpbmcgZWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJfYWZ0ZXJfYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDE6IC8vIFRFWFRcbiAgICAgIC8vIElmIGFueSBub24tc3BhY2UgY2hhcnMsIGhhbmRsZSBiZWxvd1xuICAgICAgaWYgKE5PTldTLnRlc3QodmFsdWUpKSBicmVhaztcbiAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBkb2MuX2FwcGVuZENoaWxkKGRvYy5jcmVhdGVDb21tZW50KHZhbHVlKSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA1OiAvLyBET0NUWVBFXG4gICAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgLTE6IC8vIEVPRlxuICAgICAgc3RvcFBhcnNpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgaWYgKHZhbHVlID09PSBcImh0bWxcIikge1xuICAgICAgICBpbl9ib2R5X21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBhbnl0aGluZyBlbHNlXG4gICAgcGFyc2VyID0gaW5fYm9keV9tb2RlO1xuICAgIHBhcnNlcih0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZnRlcl9hZnRlcl9mcmFtZXNldF9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgc3dpdGNoKHQpIHtcbiAgICBjYXNlIDE6IC8vIFRFWFRcbiAgICAgIC8vIElnbm9yZSBhbnkgbm9uLXNwYWNlIGNoYXJhY3RlcnNcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShBTExOT05XUywgXCJcIik7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gMClcbiAgICAgICAgaW5fYm9keV9tb2RlKHQsIHZhbHVlLCBhcmczLCBhcmc0KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgIGRvYy5fYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZUNvbW1lbnQodmFsdWUpKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDU6IC8vIERPQ1RZUEVcbiAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICBzdG9wUGFyc2luZygpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgIGluX2JvZHlfbW9kZSh0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJub2ZyYW1lc1wiOlxuICAgICAgICBpbl9oZWFkX21vZGUodCwgdmFsdWUsIGFyZzMsIGFyZzQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgYW55dGhpbmcgZWxzZVxuICB9XG5cblxuICAvLyAxMy4yLjUuNSBUaGUgcnVsZXMgZm9yIHBhcnNpbmcgdG9rZW5zIGluIGZvcmVpZ24gY29udGVudFxuICAvL1xuICAvLyBUaGlzIGlzIGxpa2Ugb25lIG9mIHRoZSBpbnNlcnRpb24gbW9kZXMgYWJvdmUsIGJ1dCBpc1xuICAvLyBpbnZva2VkIHNvbWV3aGF0IGRpZmZlcmVudGx5IHdoZW4gdGhlIGN1cnJlbnQgdG9rZW4gaXMgbm90IEhUTUwuXG4gIC8vIFNlZSB0aGUgaW5zZXJ0VG9rZW4oKSBmdW5jdGlvbi5cbiAgZnVuY3Rpb24gaW5zZXJ0Rm9yZWlnblRva2VuKHQsIHZhbHVlLCBhcmczLCBhcmc0KSB7XG4gICAgLy8gQSA8Zm9udD4gdGFnIGlzIGFuIEhUTUwgZm9udCB0YWcgaWYgaXQgaGFzIGEgY29sb3IsIGZvbnQsIG9yIHNpemVcbiAgICAvLyBhdHRyaWJ1dGUuICBPdGhlcndpc2Ugd2UgYXNzdW1lIGl0IGlzIGZvcmVpZ24gY29udGVudFxuICAgIGZ1bmN0aW9uIGlzSFRNTEZvbnQoYXR0cnMpIHtcbiAgICAgIGZvcih2YXIgaSA9IDAsIG4gPSBhdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgc3dpdGNoKGF0dHJzW2ldWzBdKSB7XG4gICAgICAgIGNhc2UgXCJjb2xvclwiOlxuICAgICAgICBjYXNlIFwiZmFjZVwiOlxuICAgICAgICBjYXNlIFwic2l6ZVwiOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnQ7XG5cbiAgICBzd2l0Y2godCkge1xuICAgIGNhc2UgMTogLy8gVEVYVFxuICAgICAgLy8gSWYgYW55IG5vbi1zcGFjZSwgbm9uLW51bCBjaGFyYWN0ZXJzXG4gICAgICBpZiAoZnJhbWVzZXRfb2sgJiYgTk9OV1NOT05OVUwudGVzdCh2YWx1ZSkpXG4gICAgICAgIGZyYW1lc2V0X29rID0gZmFsc2U7XG4gICAgICBpZiAodGV4dEluY2x1ZGVzTlVMKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShOVUxDSEFSUywgXCJcXHVGRkZEXCIpO1xuICAgICAgfVxuICAgICAgaW5zZXJ0VGV4dCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSA0OiAvLyBDT01NRU5UXG4gICAgICBpbnNlcnRDb21tZW50KHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIDU6IC8vIERPQ1RZUEVcbiAgICAgIC8vIGlnbm9yZSBpdFxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgMjogLy8gVEFHXG4gICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgIGNhc2UgXCJmb250XCI6XG4gICAgICAgIGlmICghaXNIVE1MRm9udChhcmczKSkgYnJlYWs7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmlnXCI6XG4gICAgICBjYXNlIFwiYmxvY2txdW90ZVwiOlxuICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIGNhc2UgXCJiclwiOlxuICAgICAgY2FzZSBcImNlbnRlclwiOlxuICAgICAgY2FzZSBcImNvZGVcIjpcbiAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgY2FzZSBcImRpdlwiOlxuICAgICAgY2FzZSBcImRsXCI6XG4gICAgICBjYXNlIFwiZHRcIjpcbiAgICAgIGNhc2UgXCJlbVwiOlxuICAgICAgY2FzZSBcImVtYmVkXCI6XG4gICAgICBjYXNlIFwiaDFcIjpcbiAgICAgIGNhc2UgXCJoMlwiOlxuICAgICAgY2FzZSBcImgzXCI6XG4gICAgICBjYXNlIFwiaDRcIjpcbiAgICAgIGNhc2UgXCJoNVwiOlxuICAgICAgY2FzZSBcImg2XCI6XG4gICAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgY2FzZSBcImhyXCI6XG4gICAgICBjYXNlIFwiaVwiOlxuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgY2FzZSBcImxpXCI6XG4gICAgICBjYXNlIFwibGlzdGluZ1wiOlxuICAgICAgY2FzZSBcIm1lbnVcIjpcbiAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICBjYXNlIFwibm9iclwiOlxuICAgICAgY2FzZSBcIm9sXCI6XG4gICAgICBjYXNlIFwicFwiOlxuICAgICAgY2FzZSBcInByZVwiOlxuICAgICAgY2FzZSBcInJ1YnlcIjpcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgICBjYXNlIFwic3Ryb25nXCI6XG4gICAgICBjYXNlIFwic3RyaWtlXCI6XG4gICAgICBjYXNlIFwic3ViXCI6XG4gICAgICBjYXNlIFwic3VwXCI6XG4gICAgICBjYXNlIFwidGFibGVcIjpcbiAgICAgIGNhc2UgXCJ0dFwiOlxuICAgICAgY2FzZSBcInVcIjpcbiAgICAgIGNhc2UgXCJ1bFwiOlxuICAgICAgY2FzZSBcInZhclwiOlxuICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgY3VycmVudCA9IHN0YWNrLnRvcDtcbiAgICAgICAgfSB3aGlsZShjdXJyZW50Lm5hbWVzcGFjZVVSSSAhPT0gTkFNRVNQQUNFLkhUTUwgJiZcbiAgICAgICAgICAgICFpc01hdGhtbFRleHRJbnRlZ3JhdGlvblBvaW50KGN1cnJlbnQpICYmXG4gICAgICAgICAgICAhaXNIVE1MSW50ZWdyYXRpb25Qb2ludChjdXJyZW50KSk7XG5cbiAgICAgICAgaW5zZXJ0VG9rZW4odCwgdmFsdWUsIGFyZzMsIGFyZzQpOyAgLy8gcmVwcm9jZXNzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQW55IG90aGVyIHN0YXJ0IHRhZyBjYXNlIGdvZXMgaGVyZVxuICAgICAgY3VycmVudCA9IChzdGFjay5lbGVtZW50cy5sZW5ndGg9PT0xICYmIGZyYWdtZW50KSA/IGZyYWdtZW50Q29udGV4dCA6XG4gICAgICAgIHN0YWNrLnRvcDtcbiAgICAgIGlmIChjdXJyZW50Lm5hbWVzcGFjZVVSSSA9PT0gTkFNRVNQQUNFLk1BVEhNTCkge1xuICAgICAgICBhZGp1c3RNYXRoTUxBdHRyaWJ1dGVzKGFyZzMpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY3VycmVudC5uYW1lc3BhY2VVUkkgPT09IE5BTUVTUEFDRS5TVkcpIHtcbiAgICAgICAgdmFsdWUgPSBhZGp1c3RTVkdUYWdOYW1lKHZhbHVlKTtcbiAgICAgICAgYWRqdXN0U1ZHQXR0cmlidXRlcyhhcmczKTtcbiAgICAgIH1cbiAgICAgIGFkanVzdEZvcmVpZ25BdHRyaWJ1dGVzKGFyZzMpO1xuXG4gICAgICBpbnNlcnRGb3JlaWduRWxlbWVudCh2YWx1ZSwgYXJnMywgY3VycmVudC5uYW1lc3BhY2VVUkkpO1xuICAgICAgaWYgKGFyZzQpIHsgLy8gdGhlIHNlbGYtY2xvc2luZyBmbGFnXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ3NjcmlwdCcgJiYgY3VycmVudC5uYW1lc3BhY2VVUkkgPT09IE5BTUVTUEFDRS5TVkcpIHtcbiAgICAgICAgICAvLyBYWFggZGVhbCB3aXRoIFNWRyBzY3JpcHRzIGhlcmVcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcblxuICAgIGNhc2UgMzogLy8gRU5EVEFHXG4gICAgICBjdXJyZW50ID0gc3RhY2sudG9wO1xuICAgICAgaWYgKHZhbHVlID09PSBcInNjcmlwdFwiICYmXG4gICAgICAgIGN1cnJlbnQubmFtZXNwYWNlVVJJID09PSBOQU1FU1BBQ0UuU1ZHICYmXG4gICAgICAgIGN1cnJlbnQubG9jYWxOYW1lID09PSBcInNjcmlwdFwiKSB7XG5cbiAgICAgICAgc3RhY2sucG9wKCk7XG5cbiAgICAgICAgLy8gWFhYXG4gICAgICAgIC8vIERlYWwgd2l0aCBTVkcgc2NyaXB0cyBoZXJlXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhlIGFueSBvdGhlciBlbmQgdGFnIGNhc2VcbiAgICAgICAgdmFyIGkgPSBzdGFjay5lbGVtZW50cy5sZW5ndGgtMTtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5lbGVtZW50c1tpXTtcbiAgICAgICAgZm9yKDs7KSB7XG4gICAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFjay5wb3BFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBzdGFjay5lbGVtZW50c1stLWldO1xuICAgICAgICAgIC8vIElmIG5vbi1odG1sLCBrZWVwIGxvb3BpbmdcbiAgICAgICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IE5BTUVTUEFDRS5IVE1MKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIHByb2Nlc3MgdGhlIGVuZCB0YWcgYXMgaHRtbFxuICAgICAgICAgIHBhcnNlcih0LCB2YWx1ZSwgYXJnMywgYXJnNCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICAvKioqXG4gICAqIEZpbmFsbHksIHRoaXMgaXMgdGhlIGVuZCBvZiB0aGUgSFRNTFBhcnNlcigpIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAqIEl0IHJldHVybnMgdGhlIGh0bWxwYXJzZXIgb2JqZWN0IHdpdGggdGhlIGFwcGVuZCgpIGFuZCBlbmQoKSBtZXRob2RzLlxuICAgKi9cblxuICAvLyBTbmVhayBhbm90aGVyIG1ldGhvZCBpbnRvIHRoZSBodG1scGFyc2VyIG9iamVjdCB0byBhbGxvdyB1cyB0byBydW5cbiAgLy8gdG9rZW5pemVyIHRlc3RzLiAgVGhpcyBjYW4gYmUgY29tbWVudGVkIG91dCBpbiBwcm9kdWN0aW9uIGNvZGUuXG4gIC8vIFRoaXMgaXMgYSBob29rIGZvciB0ZXN0aW5nIHRoZSB0b2tlbml6ZXIuIEl0IGhhcyB0byBiZSBoZXJlXG4gIC8vIGJlY2F1c2UgdGhlIHRva2VuaXplciBkZXRhaWxzIGFyZSBhbGwgaGlkZGVuIGF3YXkgd2l0aGluIHRoZSBjbG9zdXJlLlxuICAvLyBJdCBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIHRva2VucyBnZW5lcmF0ZWQgd2hpbGUgcGFyc2luZyB0aGVcbiAgLy8gaW5wdXQgc3RyaW5nLlxuICBodG1scGFyc2VyLnRlc3RUb2tlbml6ZXIgPSBmdW5jdGlvbihpbnB1dCwgaW5pdGlhbFN0YXRlLCBsYXN0U3RhcnRUYWcsIGNoYXJieWNoYXIpIHtcbiAgICB2YXIgdG9rZW5zID0gW107XG5cbiAgICBzd2l0Y2goaW5pdGlhbFN0YXRlKSB7XG4gICAgY2FzZSBcIlBDREFUQSBzdGF0ZVwiOlxuICAgICAgdG9rZW5pemVyID0gZGF0YV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJSQ0RBVEEgc3RhdGVcIjpcbiAgICAgIHRva2VuaXplciA9IHJjZGF0YV9zdGF0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJSQVdURVhUIHN0YXRlXCI6XG4gICAgICB0b2tlbml6ZXIgPSByYXd0ZXh0X3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBMQUlOVEVYVCBzdGF0ZVwiOlxuICAgICAgdG9rZW5pemVyID0gcGxhaW50ZXh0X3N0YXRlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RTdGFydFRhZykge1xuICAgICAgbGFzdHRhZ25hbWUgPSBsYXN0U3RhcnRUYWc7XG4gICAgfVxuXG4gICAgaW5zZXJ0VG9rZW4gPSBmdW5jdGlvbih0LCB2YWx1ZSwgYXJnMywgYXJnNCkge1xuICAgICAgZmx1c2hUZXh0KCk7XG4gICAgICBzd2l0Y2godCkge1xuICAgICAgY2FzZSAxOiAvLyBURVhUXG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgIHRva2Vuc1t0b2tlbnMubGVuZ3RoLTFdWzBdID09PSBcIkNoYXJhY3RlclwiKSB7XG4gICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGgtMV1bMV0gKz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB0b2tlbnMucHVzaChbXCJDaGFyYWN0ZXJcIiwgdmFsdWVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6IC8vIENPTU1FTlRcbiAgICAgICAgdG9rZW5zLnB1c2goW1wiQ29tbWVudFwiLCB2YWx1ZV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTogLy8gRE9DVFlQRVxuICAgICAgICB0b2tlbnMucHVzaChbXCJET0NUWVBFXCIsIHZhbHVlLFxuICAgICAgICAgICAgICAgYXJnMyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZzMsXG4gICAgICAgICAgICAgICBhcmc0ID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJnNCxcbiAgICAgICAgICAgICAgICFmb3JjZV9xdWlya3NdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6IC8vIFRBR1xuICAgICAgICB2YXIgYXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJnMy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIFhYWDogZG9lcyBhdHRyaWJ1dGUgb3JkZXIgbWF0dGVyP1xuICAgICAgICAgIHZhciBhID0gYXJnM1tpXTtcbiAgICAgICAgICBpZiAoYS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGF0dHJzW2FbMF1dID0gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyc1thWzBdXSA9IGFbMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0b2tlbiA9IFtcIlN0YXJ0VGFnXCIsIHZhbHVlLCBhdHRyc107XG4gICAgICAgIGlmIChhcmc0KSB0b2tlbi5wdXNoKHRydWUpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOiAvLyBFTkRUQUdcbiAgICAgICAgdG9rZW5zLnB1c2goW1wiRW5kVGFnXCIsIHZhbHVlXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAtMTogLy8gRU9GXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWNoYXJieWNoYXIpIHtcbiAgICAgIHRoaXMucGFyc2UoaW5wdXQsIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnBhcnNlKGlucHV0W2ldKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFyc2UoXCJcIiwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbnM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBwYXJzZXIgb2JqZWN0IGZyb20gdGhlIEhUTUxQYXJzZXIoKSBmYWN0b3J5IGZ1bmN0aW9uXG4gIHJldHVybiBodG1scGFyc2VyO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvSFRNTFBhcnNlci5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFVSTDtcblxuZnVuY3Rpb24gVVJMKHVybCkge1xuICBpZiAoIXVybCkgcmV0dXJuIE9iamVjdC5jcmVhdGUoVVJMLnByb3RvdHlwZSk7XG4gIC8vIENhbid0IHVzZSBTdHJpbmcudHJpbSgpIHNpbmNlIGl0IGRlZmluZXMgd2hpdGVzcGFjZSBkaWZmZXJlbnRseSB0aGFuIEhUTUxcbiAgdGhpcy51cmwgPSB1cmwucmVwbGFjZSgvXlsgXFx0XFxuXFxyXFxmXSt8WyBcXHRcXG5cXHJcXGZdKyQvZywgXCJcIik7XG5cbiAgLy8gU2VlIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICAvLyBhbmQgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNwYXJzaW5nXG4gIHZhciBtYXRjaCA9IFVSTC5wYXR0ZXJuLmV4ZWModGhpcy51cmwpO1xuICBpZiAobWF0Y2gpIHtcbiAgICBpZiAobWF0Y2hbMl0pIHRoaXMuc2NoZW1lID0gbWF0Y2hbMl07XG4gICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAvLyBwYXJzZSB1c2VybmFtZS9wYXNzd29yZFxuICAgICAgdmFyIHVzZXJpbmZvID0gbWF0Y2hbNF0ubWF0Y2goVVJMLnVzZXJpbmZvUGF0dGVybik7XG4gICAgICBpZiAodXNlcmluZm8pIHtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHVzZXJpbmZvWzFdO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gdXNlcmluZm9bM107XG4gICAgICAgIG1hdGNoWzRdID0gbWF0Y2hbNF0uc3Vic3RyaW5nKHVzZXJpbmZvWzBdLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hbNF0ubWF0Y2goVVJMLnBvcnRQYXR0ZXJuKSkge1xuICAgICAgICB2YXIgcG9zID0gbWF0Y2hbNF0ubGFzdEluZGV4T2YoJzonKTtcbiAgICAgICAgdGhpcy5ob3N0ID0gbWF0Y2hbNF0uc3Vic3RyaW5nKDAsIHBvcyk7XG4gICAgICAgIHRoaXMucG9ydCA9IG1hdGNoWzRdLnN1YnN0cmluZyhwb3MrMSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gbWF0Y2hbNF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYXRjaFs1XSkgdGhpcy5wYXRoID0gbWF0Y2hbNV07XG4gICAgaWYgKG1hdGNoWzZdKSB0aGlzLnF1ZXJ5ID0gbWF0Y2hbN107XG4gICAgaWYgKG1hdGNoWzhdKSB0aGlzLmZyYWdtZW50ID0gbWF0Y2hbOV07XG4gIH1cbn1cblxuVVJMLnBhdHRlcm4gPSAvXigoW146XFwvPyNdKyk6KT8oXFwvXFwvKFteXFwvPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC87XG5VUkwudXNlcmluZm9QYXR0ZXJuID0gL14oW15AOl0qKSg6KFteQF0qKSk/QC87XG5VUkwucG9ydFBhdHRlcm4gPSAvOlxcZCskLztcblVSTC5hdXRob3JpdHlQYXR0ZXJuID0gL15bXjpcXC8/I10rOlxcL1xcLy87XG5VUkwuaGllcmFyY2h5UGF0dGVybiA9IC9eW146XFwvPyNdKzpcXC8vO1xuXG4vLyBSZXR1cm4gYSBwZXJjZW50RW5jb2RlZCB2ZXJzaW9uIG9mIHMuXG4vLyBTIHNob3VsZCBiZSBhIHNpbmdsZS1jaGFyYWN0ZXIgc3RyaW5nXG4vLyBYWFg6IG5lZWRzIHRvIGRvIHV0Zi04IGVuY29kaW5nP1xuVVJMLnBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiBwZXJjZW50RW5jb2RlKHMpIHtcbiAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoMCk7XG4gIGlmIChjIDwgMjU2KSByZXR1cm4gXCIlXCIgKyBjLnRvU3RyaW5nKDE2KTtcbiAgZWxzZSB0aHJvdyBFcnJvcihcImNhbid0IHBlcmNlbnQtZW5jb2RlIGNvZGVwb2ludHMgPiAyNTUgeWV0XCIpO1xufTtcblxuVVJMLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFVSTCxcblxuICAvLyBYWFg6IG5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIHByZWNpc2UgZGVmaW5pdGlvbiBvZiBhYnNvbHV0ZVxuICBpc0Fic29sdXRlOiBmdW5jdGlvbigpIHsgcmV0dXJuICEhdGhpcy5zY2hlbWU7IH0sXG4gIGlzQXV0aG9yaXR5QmFzZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVUkwuYXV0aG9yaXR5UGF0dGVybi50ZXN0KHRoaXMudXJsKTtcbiAgfSxcbiAgaXNIaWVyYXJjaGljYWw6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVUkwuaGllcmFyY2h5UGF0dGVybi50ZXN0KHRoaXMudXJsKTtcbiAgfSxcblxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHMgPSBcIlwiO1xuICAgIGlmICh0aGlzLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSBzICs9IHRoaXMuc2NoZW1lICsgXCI6XCI7XG4gICAgaWYgKHRoaXMuaXNBYnNvbHV0ZSgpKSB7XG4gICAgICBzICs9ICcvLyc7XG4gICAgICBpZiAodGhpcy51c2VybmFtZSB8fCB0aGlzLnBhc3N3b3JkKSB7XG4gICAgICAgIHMgKz0gdGhpcy51c2VybmFtZSB8fCAnJztcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQpIHtcbiAgICAgICAgICBzICs9ICc6JyArIHRoaXMucGFzc3dvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSAnQCc7XG4gICAgICB9XG4gICAgICBzICs9IHRoaXMuaG9zdDtcbiAgICB9XG4gICAgaWYgKHRoaXMucG9ydCAhPT0gdW5kZWZpbmVkKSBzICs9IFwiOlwiICsgdGhpcy5wb3J0O1xuICAgIGlmICh0aGlzLnBhdGggIT09IHVuZGVmaW5lZCkgcyArPSB0aGlzLnBhdGg7XG4gICAgaWYgKHRoaXMucXVlcnkgIT09IHVuZGVmaW5lZCkgcyArPSBcIj9cIiArIHRoaXMucXVlcnk7XG4gICAgaWYgKHRoaXMuZnJhZ21lbnQgIT09IHVuZGVmaW5lZCkgcyArPSBcIiNcIiArIHRoaXMuZnJhZ21lbnQ7XG4gICAgcmV0dXJuIHM7XG4gIH0sXG5cbiAgLy8gU2VlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNS4yXG4gIC8vIGFuZCBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbnN0cnVjdG9yc1xuICByZXNvbHZlOiBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICAgIHZhciBiYXNlID0gdGhpczsgICAgICAgICAgIC8vIFRoZSBiYXNlIHVybCB3ZSdyZSByZXNvbHZpbmcgYWdhaW5zdFxuICAgIHZhciByID0gbmV3IFVSTChyZWxhdGl2ZSk7IC8vIFRoZSByZWxhdGl2ZSByZWZlcmVuY2UgdXJsIHRvIHJlc29sdmVcbiAgICB2YXIgdCA9IG5ldyBVUkwoKTsgICAgICAgICAvLyBUaGUgYWJzb2x1dGUgdGFyZ2V0IHVybCB3ZSB3aWxsIHJldHVyblxuXG4gICAgaWYgKHIuc2NoZW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHQuc2NoZW1lID0gci5zY2hlbWU7XG4gICAgICB0LnVzZXJuYW1lID0gci51c2VybmFtZTtcbiAgICAgIHQucGFzc3dvcmQgPSByLnBhc3N3b3JkO1xuICAgICAgdC5ob3N0ID0gci5ob3N0O1xuICAgICAgdC5wb3J0ID0gci5wb3J0O1xuICAgICAgdC5wYXRoID0gcmVtb3ZlX2RvdF9zZWdtZW50cyhyLnBhdGgpO1xuICAgICAgdC5xdWVyeSA9IHIucXVlcnk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgIGlmIChyLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0LnVzZXJuYW1lID0gci51c2VybmFtZTtcbiAgICAgICAgdC5wYXNzd29yZCA9IHIucGFzc3dvcmQ7XG4gICAgICAgIHQuaG9zdCA9IHIuaG9zdDtcbiAgICAgICAgdC5wb3J0ID0gci5wb3J0O1xuICAgICAgICB0LnBhdGggPSByZW1vdmVfZG90X3NlZ21lbnRzKHIucGF0aCk7XG4gICAgICAgIHQucXVlcnkgPSByLnF1ZXJ5O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHQudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICB0LnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgdC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICB0LnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgIGlmICghci5wYXRoKSB7IC8vIHVuZGVmaW5lZCBvciBlbXB0eVxuICAgICAgICAgIHQucGF0aCA9IGJhc2UucGF0aDtcbiAgICAgICAgICBpZiAoci5xdWVyeSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdC5xdWVyeSA9IHIucXVlcnk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgdC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHIucGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICB0LnBhdGggPSByZW1vdmVfZG90X3NlZ21lbnRzKHIucGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdC5wYXRoID0gbWVyZ2UoYmFzZS5wYXRoLCByLnBhdGgpO1xuICAgICAgICAgICAgdC5wYXRoID0gcmVtb3ZlX2RvdF9zZWdtZW50cyh0LnBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0LnF1ZXJ5ID0gci5xdWVyeTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0LmZyYWdtZW50ID0gci5mcmFnbWVudDtcblxuICAgIHJldHVybiB0LnRvU3RyaW5nKCk7XG5cblxuICAgIGZ1bmN0aW9uIG1lcmdlKGJhc2VwYXRoLCByZWZwYXRoKSB7XG4gICAgICBpZiAoYmFzZS5ob3N0ICE9PSB1bmRlZmluZWQgJiYgIWJhc2UucGF0aClcbiAgICAgICAgcmV0dXJuIFwiL1wiICsgcmVmcGF0aDtcblxuICAgICAgdmFyIGxhc3RzbGFzaCA9IGJhc2VwYXRoLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICAgIGlmIChsYXN0c2xhc2ggPT09IC0xKVxuICAgICAgICByZXR1cm4gcmVmcGF0aDtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGJhc2VwYXRoLnN1YnN0cmluZygwLCBsYXN0c2xhc2grMSkgKyByZWZwYXRoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZV9kb3Rfc2VnbWVudHMocGF0aCkge1xuICAgICAgaWYgKCFwYXRoKSByZXR1cm4gcGF0aDsgLy8gRm9yIFwiXCIgb3IgdW5kZWZpbmVkXG5cbiAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgICAgd2hpbGUocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChwYXRoID09PSBcIi5cIiB8fCBwYXRoID09PSBcIi4uXCIpIHtcbiAgICAgICAgICBwYXRoID0gXCJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0d29jaGFycyA9IHBhdGguc3Vic3RyaW5nKDAsMik7XG4gICAgICAgIHZhciB0aHJlZWNoYXJzID0gcGF0aC5zdWJzdHJpbmcoMCwzKTtcbiAgICAgICAgdmFyIGZvdXJjaGFycyA9IHBhdGguc3Vic3RyaW5nKDAsNCk7XG4gICAgICAgIGlmICh0aHJlZWNoYXJzID09PSBcIi4uL1wiKSB7XG4gICAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR3b2NoYXJzID09PSBcIi4vXCIpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhyZWVjaGFycyA9PT0gXCIvLi9cIikge1xuICAgICAgICAgIHBhdGggPSBcIi9cIiArIHBhdGguc3Vic3RyaW5nKDMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR3b2NoYXJzID09PSBcIi8uXCIgJiYgcGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBwYXRoID0gXCIvXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm91cmNoYXJzID09PSBcIi8uLi9cIiB8fFxuICAgICAgICAgICAgICh0aHJlZWNoYXJzID09PSBcIi8uLlwiICYmIHBhdGgubGVuZ3RoID09PSAzKSkge1xuICAgICAgICAgIHBhdGggPSBcIi9cIiArIHBhdGguc3Vic3RyaW5nKDQpO1xuXG4gICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1xcLz9bXlxcL10qJC8sIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBzZWdtZW50ID0gcGF0aC5tYXRjaCgvKFxcLz8oW15cXC9dKikpLylbMF07XG4gICAgICAgICAgb3V0cHV0ICs9IHNlZ21lbnQ7XG4gICAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKHNlZ21lbnQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgfSxcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9VUkwuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9ET01JbXBsZW1lbnRhdGlvbicpO1xudmFyIEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9FdmVudFRhcmdldCcpO1xudmFyIExvY2F0aW9uID0gcmVxdWlyZSgnLi9Mb2NhdGlvbicpO1xudmFyIHNsb3BweSA9IHJlcXVpcmUoJy4vc2xvcHB5Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2luZG93O1xuXG5mdW5jdGlvbiBXaW5kb3coZG9jdW1lbnQpIHtcbiAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50IHx8IG5ldyBET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTtcbiAgdGhpcy5kb2N1bWVudC5fc2NyaXB0aW5nX2VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3ID0gdGhpcztcbiAgdGhpcy5sb2NhdGlvbiA9IG5ldyBMb2NhdGlvbih0aGlzLCB0aGlzLmRvY3VtZW50Ll9hZGRyZXNzIHx8ICdhYm91dDpibGFuaycpO1xufVxuXG5XaW5kb3cucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudFRhcmdldC5wcm90b3R5cGUsIHtcbiAgX3J1bjogeyB2YWx1ZTogc2xvcHB5LldpbmRvd19ydW4gfSxcbiAgY29uc29sZTogeyB2YWx1ZTogY29uc29sZSB9LFxuICBoaXN0b3J5OiB7IHZhbHVlOiB7XG4gICAgYmFjazogdXRpbHMubnlpLFxuICAgIGZvcndhcmQ6IHV0aWxzLm55aSxcbiAgICBnbzogdXRpbHMubnlpXG4gIH19LFxuICBuYXZpZ2F0b3I6IHsgdmFsdWU6IHJlcXVpcmUoXCIuL05hdmlnYXRvcklEXCIpIH0sXG5cbiAgLy8gU2VsZi1yZWZlcmVudGlhbCBwcm9wZXJ0aWVzXG4gIHdpbmRvdzogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXG4gIHNlbGY6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxuICBmcmFtZXM6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxuXG4gIC8vIFNlbGYtcmVmZXJlbnRpYWwgcHJvcGVydGllcyBmb3IgYSB0b3AtbGV2ZWwgd2luZG93XG4gIHBhcmVudDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXG4gIHRvcDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXG5cbiAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBhbnkgb3RoZXIgd2luZG93cyBmb3Igbm93XG4gIGxlbmd0aDogeyB2YWx1ZTogMCB9LCAgICAgICAgICAgLy8gbm8gZnJhbWVzXG4gIGZyYW1lRWxlbWVudDogeyB2YWx1ZTogbnVsbCB9LCAgLy8gbm90IHBhcnQgb2YgYSBmcmFtZVxuICBvcGVuZXI6IHsgdmFsdWU6IG51bGwgfSwgICAgICAgIC8vIG5vdCBvcGVuZWQgYnkgYW5vdGhlciB3aW5kb3dcblxuICAvLyBUaGUgb25sb2FkIGV2ZW50IGhhbmRsZXIuXG4gIC8vIFhYWDogbmVlZCB0byBzdXBwb3J0IGEgYnVuY2ggb2Ygb3RoZXIgZXZlbnQgdHlwZXMsIHRvbyxcbiAgLy8gYW5kIGhhdmUgdGhlbSBpbnRlcm9wZXJhdGUgd2l0aCBkb2N1bWVudC5ib2R5LlxuXG4gIG9ubG9hZDoge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0RXZlbnRIYW5kbGVyKFwibG9hZFwiKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKFwibG9hZFwiLCB2KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gWFhYIFRoaXMgaXMgYSBjb21wbGV0ZWx5IGJyb2tlbiBpbXBsZW1lbnRhdGlvblxuICBnZXRDb21wdXRlZFN0eWxlOiB7IHZhbHVlOiBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsdCkge1xuICAgIHJldHVybiBlbHQuc3R5bGU7XG4gIH19XG5cbn0pO1xuXG51dGlscy5leHBvc2UocmVxdWlyZSgnLi9XaW5kb3dUaW1lcnMnKSwgV2luZG93KTtcbnV0aWxzLmV4cG9zZShyZXF1aXJlKCcuL2ltcGwnKSwgV2luZG93KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL1dpbmRvdy5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuL0VsZW1lbnQnKTtcbnZhciBDU1NTdHlsZURlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9DU1NTdHlsZURlY2xhcmF0aW9uJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgVVJMVXRpbHMgPSByZXF1aXJlKCcuL1VSTFV0aWxzJyk7XG52YXIgZGVmaW5lRWxlbWVudCA9IHJlcXVpcmUoJy4vZGVmaW5lRWxlbWVudCcpO1xuXG52YXIgaHRtbEVsZW1lbnRzID0gZXhwb3J0cy5lbGVtZW50cyA9IHt9O1xudmFyIGh0bWxOYW1lVG9JbXBsID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24oZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICB2YXIgaW1wbCA9IGh0bWxOYW1lVG9JbXBsW2xvY2FsTmFtZV0gfHwgSFRNTFVua25vd25FbGVtZW50O1xuICByZXR1cm4gbmV3IGltcGwoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG59O1xuXG5mdW5jdGlvbiBkZWZpbmUoc3BlYykge1xuICByZXR1cm4gZGVmaW5lRWxlbWVudChzcGVjLCBIVE1MRWxlbWVudCwgaHRtbEVsZW1lbnRzLCBodG1sTmFtZVRvSW1wbCk7XG59XG5cbmZ1bmN0aW9uIFVSTChhdHRyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdGhpcy5fZ2V0YXR0cihhdHRyKTtcbiAgICAgIGlmICh2ID09PSBudWxsKSB7IHJldHVybiAnJzsgfVxuICAgICAgdmFyIHVybCA9IHRoaXMuZG9jLl9yZXNvbHZlKHYpO1xuICAgICAgcmV0dXJuICh1cmwgPT09IG51bGwpID8gdiA6IHVybDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHRoaXMuX3NldGF0dHIoYXR0ciwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gQ09SUyhhdHRyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdGhpcy5fZ2V0YXR0cihhdHRyKTtcbiAgICAgIGlmICh2ID09PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgICBpZiAodi50b0xvd2VyQ2FzZSgpID09PSAndXNlLWNyZWRlbnRpYWxzJykgeyByZXR1cm4gJ3VzZS1jcmVkZW50aWFscyc7IH1cbiAgICAgIHJldHVybiAnYW5vbnltb3VzJztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZT09PW51bGwgfHwgdmFsdWU9PT11bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZXRhdHRyKGF0dHIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbnZhciBSRUZFUlJFUiA9IHtcbiAgdHlwZTogW1wiXCIsIFwibm8tcmVmZXJyZXJcIiwgXCJuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZVwiLCBcInNhbWUtb3JpZ2luXCIsIFwib3JpZ2luXCIsIFwic3RyaWN0LW9yaWdpblwiLCBcIm9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiLCBcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIiwgXCJ1bnNhZmUtdXJsXCJdLFxuICBtaXNzaW5nOiAnJyxcbn07XG5cblxuLy8gWFhYOiB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGFiSW5kZXggc2hvdWxkIGJlIDAgaWYgdGhlIGVsZW1lbnQgaXNcbi8vIGZvY3VzYWJsZSBhbmQgLTEgaWYgaXQgaXMgbm90LiAgQnV0IHRoZSBmdWxsIGRlZmluaXRpb24gb2YgZm9jdXNhYmxlXG4vLyBpcyBhY3R1YWxseSBoYXJkIHRvIGNvbXB1dGUsIHNvIGZvciBub3csIEknbGwgZm9sbG93IEZpcmVmb3ggYW5kXG4vLyBqdXN0IGJhc2UgdGhlIGRlZmF1bHQgdmFsdWUgb24gdGhlIHR5cGUgb2YgdGhlIGVsZW1lbnQuXG52YXIgZm9jdXNhYmxlRWxlbWVudHMgPSB7XG4gIFwiQVwiOnRydWUsIFwiTElOS1wiOnRydWUsIFwiQlVUVE9OXCI6dHJ1ZSwgXCJJTlBVVFwiOnRydWUsXG4gIFwiU0VMRUNUXCI6dHJ1ZSwgXCJURVhUQVJFQVwiOnRydWUsIFwiQ09NTUFORFwiOnRydWVcbn07XG5cbnZhciBIVE1MRm9ybUVsZW1lbnQgPSBmdW5jdGlvbihkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIHRoaXMuX2Zvcm0gPSBudWxsOyAvLyBQcmV2ZW50IGxhdGVyIGRlb3B0aW1pemF0aW9uXG59O1xuXG52YXIgSFRNTEVsZW1lbnQgPSBleHBvcnRzLkhUTUxFbGVtZW50ID0gZGVmaW5lKHtcbiAgc3VwZXJjbGFzczogRWxlbWVudCxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgdXRpbHMuTkFNRVNQQUNFLkhUTUwsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgaW5uZXJIVE1MOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgdmFyIHBhcnNlciA9IHRoaXMub3duZXJEb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5tb3pIVE1MUGFyc2VyKFxuICAgICAgICAgIHRoaXMub3duZXJEb2N1bWVudC5fYWRkcmVzcyxcbiAgICAgICAgICB0aGlzKTtcbiAgICAgICAgcGFyc2VyLnBhcnNlKHYsIHRydWUpO1xuICAgICAgICB2YXIgdG1wZG9jID0gcGFyc2VyLmRvY3VtZW50KCk7XG4gICAgICAgIHZhciByb290ID0gdG1wZG9jLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHZhciB0YXJnZXQgPSAodGhpcyBpbnN0YW5jZW9mIGh0bWxOYW1lVG9JbXBsLnRlbXBsYXRlKSA/XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgOiB0aGlzO1xuXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgY2hpbGRyZW4gb2YgdGhpcyBub2RlXG4gICAgICAgIHdoaWxlKHRhcmdldC5oYXNDaGlsZE5vZGVzKCkpXG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKHRhcmdldC5maXJzdENoaWxkKTtcblxuICAgICAgICAvLyBOb3cgY29weSBuZXdseSBwYXJzZWQgY2hpbGRyZW4gZnJvbSB0aGUgcm9vdCB0byB0aGlzIG5vZGVcbiAgICAgICAgdGFyZ2V0LmRvYy5hZG9wdE5vZGUocm9vdCk7XG4gICAgICAgIHdoaWxlKHJvb3QuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKHJvb3QuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHN0eWxlOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX3N0eWxlKVxuICAgICAgICB0aGlzLl9zdHlsZSA9IG5ldyBDU1NTdHlsZURlY2xhcmF0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlO1xuICAgIH19LFxuXG4gICAgY2xpY2s6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2NsaWNrX2luX3Byb2dyZXNzKSByZXR1cm47XG4gICAgICB0aGlzLl9jbGlja19pbl9wcm9ncmVzcyA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5fcHJlX2NsaWNrX2FjdGl2YXRpb25fc3RlcHMpXG4gICAgICAgICAgdGhpcy5fcHJlX2NsaWNrX2FjdGl2YXRpb25fc3RlcHMoKTtcblxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpO1xuICAgICAgICBldmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsXG4gICAgICAgICAgdGhpcy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LCAxLFxuICAgICAgICAgIDAsIDAsIDAsIDAsXG4gICAgICAgICAgLy8gVGhlc2UgNCBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgd2l0aFxuICAgICAgICAgIC8vIHRoZSBhY3R1YWxseSBjdXJyZW50IGtleWJvYXJkIHN0YXRlXG4gICAgICAgICAgLy8gc29tZWhvdy4uLlxuICAgICAgICAgIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLFxuICAgICAgICAgIDAsIG51bGxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBEaXNwYXRjaCB0aGlzIGFzIGFuIHVudHJ1c3RlZCBldmVudCBzaW5jZSBpdCBpcyBzeW50aGV0aWNcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3Bvc3RfY2xpY2tfYWN0aXZhdGlvbl9zdGVwcylcbiAgICAgICAgICAgIHRoaXMuX3Bvc3RfY2xpY2tfYWN0aXZhdGlvbl9zdGVwcyhldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2NhbmNlbGxlZF9hY3RpdmF0aW9uX3N0ZXBzKVxuICAgICAgICAgICAgdGhpcy5fY2FuY2VsbGVkX2FjdGl2YXRpb25fc3RlcHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2NsaWNrX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfX1cbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgbGFuZzogU3RyaW5nLFxuICAgIGRpcjoge3R5cGU6IFtcImx0clwiLCBcInJ0bFwiLCBcImF1dG9cIl0sIG1pc3Npbmc6ICcnfSxcbiAgICBhY2Nlc3NLZXk6IFN0cmluZyxcbiAgICBoaWRkZW46IEJvb2xlYW4sXG4gICAgdGFiSW5kZXg6IHt0eXBlOiBcImxvbmdcIiwgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy50YWdOYW1lIGluIGZvY3VzYWJsZUVsZW1lbnRzIHx8XG4gICAgICAgIHRoaXMuY29udGVudEVkaXRhYmxlKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH19XG4gIH0sXG4gIGV2ZW50czogW1xuICAgIFwiYWJvcnRcIiwgXCJjYW5wbGF5XCIsIFwiY2FucGxheXRocm91Z2hcIiwgXCJjaGFuZ2VcIiwgXCJjbGlja1wiLCBcImNvbnRleHRtZW51XCIsXG4gICAgXCJjdWVjaGFuZ2VcIiwgXCJkYmxjbGlja1wiLCBcImRyYWdcIiwgXCJkcmFnZW5kXCIsIFwiZHJhZ2VudGVyXCIsIFwiZHJhZ2xlYXZlXCIsXG4gICAgXCJkcmFnb3ZlclwiLCBcImRyYWdzdGFydFwiLCBcImRyb3BcIiwgXCJkdXJhdGlvbmNoYW5nZVwiLCBcImVtcHRpZWRcIiwgXCJlbmRlZFwiLFxuICAgIFwiaW5wdXRcIiwgXCJpbnZhbGlkXCIsIFwia2V5ZG93blwiLCBcImtleXByZXNzXCIsIFwia2V5dXBcIiwgXCJsb2FkZWRkYXRhXCIsXG4gICAgXCJsb2FkZWRtZXRhZGF0YVwiLCBcImxvYWRzdGFydFwiLCBcIm1vdXNlZG93blwiLCBcIm1vdXNlbW92ZVwiLCBcIm1vdXNlb3V0XCIsXG4gICAgXCJtb3VzZW92ZXJcIiwgXCJtb3VzZXVwXCIsIFwibW91c2V3aGVlbFwiLCBcInBhdXNlXCIsIFwicGxheVwiLCBcInBsYXlpbmdcIixcbiAgICBcInByb2dyZXNzXCIsIFwicmF0ZWNoYW5nZVwiLCBcInJlYWR5c3RhdGVjaGFuZ2VcIiwgXCJyZXNldFwiLCBcInNlZWtlZFwiLFxuICAgIFwic2Vla2luZ1wiLCBcInNlbGVjdFwiLCBcInNob3dcIiwgXCJzdGFsbGVkXCIsIFwic3VibWl0XCIsIFwic3VzcGVuZFwiLFxuICAgIFwidGltZXVwZGF0ZVwiLCBcInZvbHVtZWNoYW5nZVwiLCBcIndhaXRpbmdcIixcblxuICAgIC8vIFRoZXNlIGxhc3QgNSBldmVudCB0eXBlcyB3aWxsIGJlIG92ZXJyaWRlbiBieSBIVE1MQm9keUVsZW1lbnRcbiAgICBcImJsdXJcIiwgXCJlcnJvclwiLCBcImZvY3VzXCIsIFwibG9hZFwiLCBcInNjcm9sbFwiXG4gIF1cbn0pO1xuXG5cbi8vIFhYWDogcmVmbGVjdCBjb250ZXh0bWVudSBhcyBjb250ZXh0TWVudSwgd2l0aCBlbGVtZW50IHR5cGVcblxuXG4vLyBzdHlsZTogdGhlIHNwZWMgZG9lc24ndCBjYWxsIHRoaXMgYSByZWZsZWN0ZWQgYXR0cmlidXRlLlxuLy8gICBtYXkgd2FudCB0byBoYW5kbGUgaXQgbWFudWFsbHkuXG5cbi8vIGNvbnRlbnRFZGl0YWJsZTogZW51bWVyYXRlZCwgbm90IGNsZWFyIGlmIGl0IGlzIGFjdHVhbGx5XG4vLyByZWZsZWN0ZWQgb3IgcmVxdWlyZXMgY3VzdG9tIGdldHRlci9zZXR0ZXIuIE5vdCBsaXN0ZWQgYXNcbi8vIFwibGltaXRlZCB0byBrbm93biB2YWx1ZXNcIi4gIFJhaXNlcyBzeW50YXhfZXJyIG9uIGJhZCBzZXR0aW5nLFxuLy8gc28gSSB0aGluayB0aGlzIGlzIGN1c3RvbS5cblxuLy8gY29udGV4dG1lbnU6IGNvbnRlbnQgaXMgZWxlbWVudCBpZCwgaWRsIHR5cGUgaXMgYW4gZWxlbWVudFxuLy8gZHJhZ2dhYmxlOiBib29sZWFuLCBidXQgbm90IGEgcmVmbGVjdGVkIGF0dHJpYnV0ZVxuLy8gZHJvcHpvbmU6IHJlZmxlY3RlZCBTZXR0YWJsZVRva2VuTGlzdCwgZXhwZXJpbWVudGFsLCBzbyBkb24ndFxuLy8gICBpbXBsZW1lbnQgaXQgcmlnaHQgYXdheS5cblxuLy8gZGF0YS0qIGF0dHJpYnV0ZXM6IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBpbiBzZXRBdHRyaWJ1dGU/XG4vLyBPciBtYXliZSB0aGF0IGlzbid0IG5lY2Vzc2FyeS4gQ2FuIEkganVzdCBzY2FuIHRoZSBhdHRyaWJ1dGUgbGlzdFxuLy8gd2hlbiBidWlsZGluZyB0aGUgZGF0YXNldD8gIExpdmVuZXNzIGFuZCBjYWNoaW5nIGlzc3Vlcz9cblxuLy8gbWljcm9kYXRhIGF0dHJpYnV0ZXM6IG1hbnkgYXJlIHNpbXBsZSByZWZsZWN0ZWQgYXR0cmlidXRlcywgYnV0XG4vLyBJJ20gbm90IGdvaW5nIHRvIGltcGxlbWVudCB0aGlzIG5vdy5cblxuXG52YXIgSFRNTFVua25vd25FbGVtZW50ID0gZGVmaW5lKHtcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFVua25vd25FbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9XG59KTtcblxuXG52YXIgZm9ybUFzc29jaWF0ZWRQcm9wcyA9IHtcbiAgLy8gU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Fzc29jaWF0aW9uLW9mLWNvbnRyb2xzLWFuZC1mb3Jtcy5odG1sI2Zvcm0tb3duZXJcbiAgZm9ybTogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9mb3JtO1xuICB9fVxufTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnYScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxBbmNob3JFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczoge1xuICAgIF9wb3N0X2NsaWNrX2FjdGl2YXRpb25fc3RlcHM6IHsgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLmhyZWYpIHtcbiAgICAgICAgLy8gRm9sbG93IHRoZSBsaW5rXG4gICAgICAgIC8vIFhYWDogdGhpcyBpcyBqdXN0IGEgcXVpY2sgaGFja1xuICAgICAgICAvLyBYWFg6IHRoZSBIVE1MIHNwZWMgcHJvYmFibHkgcmVxdWlyZXMgbW9yZSB0aGFuIHRoaXNcbiAgICAgICAgdGhpcy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmxvY2F0aW9uID0gdGhpcy5ocmVmO1xuICAgICAgfVxuICAgIH19LFxuICAgIGJsdXI6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge319LFxuICAgIGZvY3VzOiB7IHZhbHVlOiBmdW5jdGlvbigpIHt9fVxuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgaHJlZjogVVJMLFxuICAgIHBpbmc6IFN0cmluZyxcbiAgICBkb3dubG9hZDogU3RyaW5nLFxuICAgIHRhcmdldDogU3RyaW5nLFxuICAgIHJlbDogU3RyaW5nLFxuICAgIG1lZGlhOiBTdHJpbmcsXG4gICAgaHJlZmxhbmc6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVmZXJyZXJQb2xpY3k6IFJFRkVSUkVSLFxuICAgIC8vIE9ic29sZXRlXG4gICAgY29vcmRzOiBTdHJpbmcsXG4gICAgY2hhcnNldDogU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICByZXY6IFN0cmluZyxcbiAgICBzaGFwZTogU3RyaW5nLFxuICB9XG59KTtcblVSTFV0aWxzLl9pbmhlcml0KGh0bWxOYW1lVG9JbXBsLmEucHJvdG90eXBlKTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnYXJlYScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxBcmVhRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIGFsdDogU3RyaW5nLFxuICAgIHRhcmdldDogU3RyaW5nLFxuICAgIGRvd25sb2FkOiBTdHJpbmcsXG4gICAgcmVsOiBTdHJpbmcsXG4gICAgbWVkaWE6IFN0cmluZyxcbiAgICBocmVmOiBVUkwsXG4gICAgaHJlZmxhbmc6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgc2hhcGU6IFN0cmluZyxcbiAgICBjb29yZHM6IFN0cmluZyxcbiAgICBwaW5nOiBTdHJpbmcsXG4gICAgLy8gWFhYOiBhbHNvIHJlZmxlY3QgcmVsTGlzdFxuICAgIHJlZmVycmVyUG9saWN5OiBSRUZFUlJFUixcbiAgICAvLyBPYnNvbGV0ZVxuICAgIG5vSHJlZjogQm9vbGVhbixcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2JyJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTEJSRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIE9ic29sZXRlXG4gICAgY2xlYXI6IFN0cmluZ1xuICB9LFxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2Jhc2UnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MQmFzZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBcInRhcmdldFwiOiBTdHJpbmdcbiAgfVxufSk7XG5cblxuZGVmaW5lKHtcbiAgdGFnOiAnYm9keScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxCb2R5RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgLy8gQ2VydGFpbiBldmVudCBoYW5kbGVyIGF0dHJpYnV0ZXMgb24gYSA8Ym9keT4gdGFnIGFjdHVhbGx5IHNldFxuICAvLyBoYW5kbGVycyBmb3IgdGhlIHdpbmRvdyByYXRoZXIgdGhhbiBqdXN0IHRoYXQgZWxlbWVudC4gIERlZmluZVxuICAvLyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGZvciB0aG9zZSBoZXJlLiAgTm90ZSB0aGF0IHNvbWUgb2YgdGhlc2Ugb3ZlcnJpZGVcbiAgLy8gcHJvcGVydGllcyBvbiBIVE1MRWxlbWVudC5wcm90b3R5cGUuXG4gIC8vIFhYWDogSWYgSSBhZGQgc3VwcG9ydCBmb3IgPGZyYW1lc2V0PiwgdGhlc2UgaGF2ZSB0byBnbyB0aGVyZSwgdG9vXG4gIC8vIFhYWFxuICAvLyBXaGVuIHRoZSBXaW5kb3cgb2JqZWN0IGlzIGltcGxlbWVudGVkLCB0aGVzZSBhdHRyaWJ1dGUgd2lsbCBoYXZlXG4gIC8vIHRvIHdvcmsgd2l0aCB0aGUgc2FtZS1uYW1lZCBhdHRyaWJ1dGVzIG9uIHRoZSBXaW5kb3cuXG4gIGV2ZW50czogW1xuICAgIFwiYWZ0ZXJwcmludFwiLCBcImJlZm9yZXByaW50XCIsIFwiYmVmb3JldW5sb2FkXCIsIFwiYmx1clwiLCBcImVycm9yXCIsXG4gICAgXCJmb2N1c1wiLFwiaGFzaGNoYW5nZVwiLCBcImxvYWRcIiwgXCJtZXNzYWdlXCIsIFwib2ZmbGluZVwiLCBcIm9ubGluZVwiLFxuICAgIFwicGFnZWhpZGVcIiwgXCJwYWdlc2hvd1wiLFwicG9wc3RhdGVcIixcInJlc2l6ZVwiLFwic2Nyb2xsXCIsXCJzdG9yYWdlXCIsXCJ1bmxvYWRcIixcbiAgXSxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIE9ic29sZXRlXG4gICAgdGV4dDogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgICBsaW5rOiB7IHR5cGU6IFN0cmluZywgdHJlYXROdWxsQXNFbXB0eVN0cmluZzogdHJ1ZSB9LFxuICAgIHZMaW5rOiB7IHR5cGU6IFN0cmluZywgdHJlYXROdWxsQXNFbXB0eVN0cmluZzogdHJ1ZSB9LFxuICAgIGFMaW5rOiB7IHR5cGU6IFN0cmluZywgdHJlYXROdWxsQXNFbXB0eVN0cmluZzogdHJ1ZSB9LFxuICAgIGJnQ29sb3I6IHsgdHlwZTogU3RyaW5nLCB0cmVhdE51bGxBc0VtcHR5U3RyaW5nOiB0cnVlIH0sXG4gICAgYmFja2dyb3VuZDogU3RyaW5nLFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnYnV0dG9uJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTEJ1dHRvbkVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxGb3JtRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczogZm9ybUFzc29jaWF0ZWRQcm9wcyxcbiAgYXR0cmlidXRlczoge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICB2YWx1ZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGF1dG9mb2N1czogQm9vbGVhbixcbiAgICB0eXBlOiB7IHR5cGU6W1wic3VibWl0XCIsIFwicmVzZXRcIiwgXCJidXR0b25cIiwgXCJtZW51XCJdLCBtaXNzaW5nOiAnc3VibWl0JyB9LFxuICAgIGZvcm1UYXJnZXQ6IFN0cmluZyxcbiAgICBmb3JtTm9WYWxpZGF0ZTogQm9vbGVhbixcbiAgICBmb3JtTWV0aG9kOiB7IHR5cGU6IFtcImdldFwiLCBcInBvc3RcIiwgXCJkaWFsb2dcIl0sIGludmFsaWQ6ICdnZXQnLCBtaXNzaW5nOiAnJyB9LFxuICAgIGZvcm1FbmN0eXBlOiB7IHR5cGU6IFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdLCBpbnZhbGlkOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBtaXNzaW5nOiAnJyB9LFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnZGwnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MRExpc3RFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gT2Jzb2xldGVcbiAgICBjb21wYWN0OiBCb29sZWFuLFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnZGF0YScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxEYXRhRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIHZhbHVlOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdkYXRhbGlzdCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxEYXRhTGlzdEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdkZXRhaWxzJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTERldGFpbHNFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgXCJvcGVuXCI6IEJvb2xlYW5cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2RpdicsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxEaXZFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gT2Jzb2xldGVcbiAgICBhbGlnbjogU3RyaW5nXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdlbWJlZCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxFbWJlZEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBzcmM6IFVSTCxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgd2lkdGg6IFN0cmluZyxcbiAgICBoZWlnaHQ6IFN0cmluZyxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgbmFtZTogU3RyaW5nLFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnZmllbGRzZXQnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MRmllbGRTZXRFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRm9ybUVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IGZvcm1Bc3NvY2lhdGVkUHJvcHMsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBuYW1lOiBTdHJpbmdcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2Zvcm0nLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MRm9ybUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhY3Rpb246IFN0cmluZyxcbiAgICBhdXRvY29tcGxldGU6IHt0eXBlOlsnb24nLCAnb2ZmJ10sIG1pc3Npbmc6ICdvbid9LFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICBhY2NlcHRDaGFyc2V0OiB7bmFtZTogXCJhY2NlcHQtY2hhcnNldFwifSxcbiAgICB0YXJnZXQ6IFN0cmluZyxcbiAgICBub1ZhbGlkYXRlOiBCb29sZWFuLFxuICAgIG1ldGhvZDogeyB0eXBlOiBbXCJnZXRcIiwgXCJwb3N0XCIsIFwiZGlhbG9nXCJdLCBpbnZhbGlkOiAnZ2V0JywgbWlzc2luZzogJ2dldCcgfSxcbiAgICAvLyBCb3RoIGVuY3R5cGUgYW5kIGVuY29kaW5nIHJlZmxlY3QgdGhlIGVuY3R5cGUgY29udGVudCBhdHRyaWJ1dGVcbiAgICBlbmN0eXBlOiB7IHR5cGU6IFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdLCBpbnZhbGlkOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBtaXNzaW5nOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiIH0sXG4gICAgZW5jb2Rpbmc6IHtuYW1lOiAnZW5jdHlwZScsIHR5cGU6IFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdLCBpbnZhbGlkOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBtaXNzaW5nOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiIH0sXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdocicsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxIUkVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgY29sb3I6IFN0cmluZyxcbiAgICBub1NoYWRlOiBCb29sZWFuLFxuICAgIHNpemU6IFN0cmluZyxcbiAgICB3aWR0aDogU3RyaW5nLFxuICB9LFxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2hlYWQnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MSGVhZEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWdzOiBbJ2gxJywnaDInLCdoMycsJ2g0JywnaDUnLCdoNiddLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MSGVhZGluZ0VsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gIH0sXG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnaHRtbCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxIdG1sRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIE9ic29sZXRlXG4gICAgdmVyc2lvbjogU3RyaW5nXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdpZnJhbWUnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MSUZyYW1lRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgICB2YXIgV2luZG93ID0gcmVxdWlyZSgnLi9XaW5kb3cnKTsgLy8gQXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIHRoaXMuX2NvbnRlbnRXaW5kb3cgPSBuZXcgV2luZG93KCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgY29udGVudFdpbmRvdzogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRXaW5kb3c7XG4gICAgfSB9LFxuICAgIGNvbnRlbnREb2N1bWVudDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICB9IH0sXG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBzcmM6IFVSTCxcbiAgICBzcmNkb2M6IFN0cmluZyxcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgd2lkdGg6IFN0cmluZyxcbiAgICBoZWlnaHQ6IFN0cmluZyxcbiAgICAvLyBYWFg6IHNhbmRib3ggaXMgYSByZWZsZWN0ZWQgc2V0dGFibGUgdG9rZW4gbGlzdFxuICAgIHNlYW1sZXNzOiBCb29sZWFuLFxuICAgIGFsbG93RnVsbHNjcmVlbjogQm9vbGVhbixcbiAgICBhbGxvd1VzZXJNZWRpYTogQm9vbGVhbixcbiAgICBhbGxvd1BheW1lbnRSZXF1ZXN0OiBCb29sZWFuLFxuICAgIHJlZmVycmVyUG9saWN5OiBSRUZFUlJFUixcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgc2Nyb2xsaW5nOiBTdHJpbmcsXG4gICAgZnJhbWVCb3JkZXI6IFN0cmluZyxcbiAgICBsb25nRGVzYzogVVJMLFxuICAgIG1hcmdpbkhlaWdodDogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgICBtYXJnaW5XaWR0aDogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2ltZycsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxJbWFnZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhbHQ6IFN0cmluZyxcbiAgICBzcmM6IFVSTCxcbiAgICBzcmNzZXQ6IFN0cmluZyxcbiAgICBjcm9zc09yaWdpbjogQ09SUyxcbiAgICB1c2VNYXA6IFN0cmluZyxcbiAgICBpc01hcDogQm9vbGVhbixcbiAgICBoZWlnaHQ6IHsgdHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDAgfSxcbiAgICB3aWR0aDogeyB0eXBlOiBcInVuc2lnbmVkIGxvbmdcIiwgZGVmYXVsdDogMCB9LFxuICAgIHJlZmVycmVyUG9saWN5OiBSRUZFUlJFUixcbiAgICAvLyBPYnNvbGV0ZTpcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgbG93c3JjOiBVUkwsXG4gICAgYWxpZ246IFN0cmluZyxcbiAgICBoc3BhY2U6IHsgdHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDAgfSxcbiAgICB2c3BhY2U6IHsgdHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDAgfSxcbiAgICBsb25nRGVzYzogVVJMLFxuICAgIGJvcmRlcjogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2lucHV0JyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTElucHV0RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEZvcm1FbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgZm9ybTogZm9ybUFzc29jaWF0ZWRQcm9wcy5mb3JtLFxuICAgIF9wb3N0X2NsaWNrX2FjdGl2YXRpb25fc3RlcHM6IHsgdmFsdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICB2YXIgZ3JvdXAgPSB0aGlzLmZvcm0uZ2V0RWxlbWVudHNCeU5hbWUodGhpcy5uYW1lKTtcbiAgICAgICAgZm9yICh2YXIgaT1ncm91cC5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgZWwgPSBncm91cFtpXTtcbiAgICAgICAgICBlbC5jaGVja2VkID0gKGVsID09PSB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH19LFxuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGF1dG9mb2N1czogQm9vbGVhbixcbiAgICBhY2NlcHQ6IFN0cmluZyxcbiAgICBhbHQ6IFN0cmluZyxcbiAgICBtYXg6IFN0cmluZyxcbiAgICBtaW46IFN0cmluZyxcbiAgICBwYXR0ZXJuOiBTdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICBzdGVwOiBTdHJpbmcsXG4gICAgZGlyTmFtZTogU3RyaW5nLFxuICAgIGRlZmF1bHRWYWx1ZToge25hbWU6ICd2YWx1ZSd9LFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIHJlcXVpcmVkOiBCb29sZWFuLFxuICAgIHJlYWRPbmx5OiBCb29sZWFuLFxuICAgIGNoZWNrZWQ6IEJvb2xlYW4sXG4gICAgdmFsdWU6IFN0cmluZyxcbiAgICBzcmM6IFVSTCxcbiAgICBkZWZhdWx0Q2hlY2tlZDoge25hbWU6ICdjaGVja2VkJywgdHlwZTogQm9vbGVhbn0sXG4gICAgc2l6ZToge3R5cGU6ICd1bnNpZ25lZCBsb25nJywgZGVmYXVsdDogMjAsIG1pbjogMSwgc2V0bWluOiAxfSxcbiAgICBtYXhMZW5ndGg6IHt0eXBlOiAndW5zaWduZWQgbG9uZycsIG1pbjogMCwgc2V0bWluOiAwLCBkZWZhdWx0OiAtMX0sXG4gICAgYXV0b2NvbXBsZXRlOiBTdHJpbmcsIC8vIEl0J3MgY29tcGxpY2F0ZWRcbiAgICB0eXBlOiB7IHR5cGU6XG4gICAgICAgICAgICBbXCJ0ZXh0XCIsIFwiaGlkZGVuXCIsIFwic2VhcmNoXCIsIFwidGVsXCIsIFwidXJsXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgIFwiZGF0ZXRpbWVcIiwgXCJkYXRlXCIsIFwibW9udGhcIiwgXCJ3ZWVrXCIsIFwidGltZVwiLCBcImRhdGV0aW1lLWxvY2FsXCIsXG4gICAgICAgICAgICAgXCJudW1iZXJcIiwgXCJyYW5nZVwiLCBcImNvbG9yXCIsIFwiY2hlY2tib3hcIiwgXCJyYWRpb1wiLCBcImZpbGVcIiwgXCJzdWJtaXRcIixcbiAgICAgICAgICAgICBcImltYWdlXCIsIFwicmVzZXRcIiwgXCJidXR0b25cIl0sXG4gICAgICAgICAgICBtaXNzaW5nOiAndGV4dCcgfSxcbiAgICBmb3JtVGFyZ2V0OiBTdHJpbmcsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEJvb2xlYW4sXG4gICAgZm9ybU1ldGhvZDogeyB0eXBlOiBbXCJnZXRcIiwgXCJwb3N0XCJdLCBpbnZhbGlkOiAnZ2V0JywgbWlzc2luZzogJycgfSxcbiAgICBmb3JtRW5jdHlwZTogeyB0eXBlOiBbXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsIFwidGV4dC9wbGFpblwiXSwgaW52YWxpZDogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgbWlzc2luZzogJycgfSxcbiAgICBpbnB1dE1vZGU6IHsgdHlwZTogWyBcInZlcmJhdGltXCIsIFwibGF0aW5cIiwgXCJsYXRpbi1uYW1lXCIsIFwibGF0aW4tcHJvc2VcIiwgXCJmdWxsLXdpZHRoLWxhdGluXCIsIFwia2FuYVwiLCBcImthbmEtbmFtZVwiLCBcImthdGFrYW5hXCIsIFwibnVtZXJpY1wiLCBcInRlbFwiLCBcImVtYWlsXCIsIFwidXJsXCIgXSwgbWlzc2luZzogJycgfSxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgdXNlTWFwOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdrZXlnZW4nLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MS2V5Z2VuRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEZvcm1FbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiBmb3JtQXNzb2NpYXRlZFByb3BzLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGF1dG9mb2N1czogQm9vbGVhbixcbiAgICBjaGFsbGVuZ2U6IFN0cmluZyxcbiAgICBrZXl0eXBlOiB7IHR5cGU6W1wicnNhXCJdLCBtaXNzaW5nOiAnJyB9LFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnbGknLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MTElFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgdmFsdWU6IHt0eXBlOiBcImxvbmdcIiwgZGVmYXVsdDogMH0sXG4gICAgLy8gT2Jzb2xldGVcbiAgICB0eXBlOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdsYWJlbCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxMYWJlbEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxGb3JtRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczogZm9ybUFzc29jaWF0ZWRQcm9wcyxcbiAgYXR0cmlidXRlczoge1xuICAgIGh0bWxGb3I6IHtuYW1lOiAnZm9yJywgdHlwZTogU3RyaW5nfVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnbGVnZW5kJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTExlZ2VuZEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmdcbiAgfSxcbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdsaW5rJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTExpbmtFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gWFhYIFJlZmxlY3QgRE9NU2V0dGFibGVUb2tlbkxpc3Qgc2l6ZXMgYWxzbyBET01Ub2tlbkxpc3QgcmVsTGlzdFxuICAgIGhyZWY6IFVSTCxcbiAgICByZWw6IFN0cmluZyxcbiAgICBtZWRpYTogU3RyaW5nLFxuICAgIGhyZWZsYW5nOiBTdHJpbmcsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGNyb3NzT3JpZ2luOiBDT1JTLFxuICAgIG5vbmNlOiBTdHJpbmcsXG4gICAgaW50ZWdyaXR5OiBTdHJpbmcsXG4gICAgcmVmZXJyZXJQb2xpY3k6IFJFRkVSUkVSLFxuICAgIC8vIE9ic29sZXRlXG4gICAgY2hhcnNldDogU3RyaW5nLFxuICAgIHJldjogU3RyaW5nLFxuICAgIHRhcmdldDogU3RyaW5nLFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnbWFwJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE1hcEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBuYW1lOiBTdHJpbmdcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ21lbnUnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MTWVudUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICAvLyBYWFg6IG5vdCBxdWl0ZSByaWdodCwgZGVmYXVsdCBzaG91bGQgYmUgcG9wdXAgaWYgcGFyZW50IGVsZW1lbnQgaXNcbiAgICAvLyBwb3B1cC5cbiAgICB0eXBlOiB7IHR5cGU6IFsgJ2NvbnRleHQnLCAncG9wdXAnLCAndG9vbGJhcicgXSwgbWlzc2luZzogJ3Rvb2xiYXInIH0sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGNvbXBhY3Q6IEJvb2xlYW4sXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdtZXRhJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE1ldGFFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGNvbnRlbnQ6IFN0cmluZyxcbiAgICBodHRwRXF1aXY6IHtuYW1lOiAnaHR0cC1lcXVpdicsIHR5cGU6IFN0cmluZ30sXG4gICAgLy8gT2Jzb2xldGVcbiAgICBzY2hlbWU6IFN0cmluZyxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ21ldGVyJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE1ldGVyRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEZvcm1FbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiBmb3JtQXNzb2NpYXRlZFByb3BzXG59KTtcblxuZGVmaW5lKHtcbiAgdGFnczogWydpbnMnLCAnZGVsJ10sXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxNb2RFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgY2l0ZTogVVJMLFxuICAgIGRhdGVUaW1lOiBTdHJpbmdcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ29sJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE9MaXN0RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICAvLyBVdGlsaXR5IGZ1bmN0aW9uIChzZWUgdGhlIHN0YXJ0IGF0dHJpYnV0ZSBkZWZhdWx0IHZhbHVlKS4gUmV0dXJuc1xuICAgIC8vIHRoZSBudW1iZXIgb2YgPGxpPiBjaGlsZHJlbiBvZiB0aGlzIGVsZW1lbnRcbiAgICBfbnVtaXRlbXM6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpdGVtcyA9IDA7XG4gICAgICB0aGlzLmNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgICAgIGlmIChuLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBuLnRhZ05hbWUgPT09IFwiTElcIilcbiAgICAgICAgICBpdGVtcysrO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlbXM7XG4gICAgfX1cbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXZlcnNlZDogQm9vbGVhbixcbiAgICBzdGFydDoge1xuICAgICAgdHlwZTogXCJsb25nXCIsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc3RhcnQgYXR0cmlidXRlIGlzIDEgdW5sZXNzIHRoZSBsaXN0IGlzXG4gICAgICAgLy8gcmV2ZXJzZWQuIFRoZW4gaXQgaXMgdGhlICMgb2YgbGkgY2hpbGRyZW5cbiAgICAgICBpZiAodGhpcy5yZXZlcnNlZClcbiAgICAgICAgIHJldHVybiB0aGlzLl9udW1pdGVtcztcbiAgICAgICBlbHNlXG4gICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIE9ic29sZXRlXG4gICAgY29tcGFjdDogQm9vbGVhbixcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ29iamVjdCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxPYmplY3RFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRm9ybUVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IGZvcm1Bc3NvY2lhdGVkUHJvcHMsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBkYXRhOiBVUkwsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICB1c2VNYXA6IFN0cmluZyxcbiAgICB0eXBlTXVzdE1hdGNoOiBCb29sZWFuLFxuICAgIHdpZHRoOiBTdHJpbmcsXG4gICAgaGVpZ2h0OiBTdHJpbmcsXG4gICAgLy8gT2Jzb2xldGVcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIGFyY2hpdmU6IFN0cmluZyxcbiAgICBjb2RlOiBTdHJpbmcsXG4gICAgZGVjbGFyZTogQm9vbGVhbixcbiAgICBoc3BhY2U6IHsgdHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDAgfSxcbiAgICBzdGFuZGJ5OiBTdHJpbmcsXG4gICAgdnNwYWNlOiB7IHR5cGU6IFwidW5zaWduZWQgbG9uZ1wiLCBkZWZhdWx0OiAwIH0sXG4gICAgY29kZUJhc2U6IFVSTCxcbiAgICBjb2RlVHlwZTogU3RyaW5nLFxuICAgIGJvcmRlcjogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ29wdGdyb3VwJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE9wdEdyb3VwRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGxhYmVsOiBTdHJpbmdcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ29wdGlvbicsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxPcHRpb25FbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczoge1xuICAgIGZvcm06IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgd2hpbGUgKHAgJiYgcC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgaWYgKHAubG9jYWxOYW1lID09PSAnc2VsZWN0JykgcmV0dXJuIHAuZm9ybTtcbiAgICAgICAgcCA9IHAucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9fVxuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgZGVmYXVsdFNlbGVjdGVkOiB7bmFtZTogJ3NlbGVjdGVkJywgdHlwZTogQm9vbGVhbn0sXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICB2YWx1ZTogU3RyaW5nLFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnb3V0cHV0JyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE91dHB1dEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxGb3JtRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczogZm9ybUFzc29jaWF0ZWRQcm9wcyxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIFhYWCBSZWZsZWN0IGZvci9odG1sRm9yIGFzIGEgc2V0dGFibGUgdG9rZW4gbGlzdFxuICAgIG5hbWU6IFN0cmluZ1xuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAncCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxQYXJhZ3JhcGhFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gT2Jzb2xldGVcbiAgICBhbGlnbjogU3RyaW5nXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdwYXJhbScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxQYXJhbUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgdmFsdWU6IFN0cmluZyxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWx1ZVR5cGU6IFN0cmluZyxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZ3M6IFsncHJlJywvKmxlZ2FjeSBlbGVtZW50czoqLydsaXN0aW5nJywneG1wJ10sXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxQcmVFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gT2Jzb2xldGVcbiAgICB3aWR0aDogeyB0eXBlOiBcImxvbmdcIiwgZGVmYXVsdDogMCB9LFxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAncHJvZ3Jlc3MnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MUHJvZ3Jlc3NFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRm9ybUVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IGZvcm1Bc3NvY2lhdGVkUHJvcHMsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBtYXg6IHt0eXBlOiBOdW1iZXIsIGZsb2F0OiB0cnVlLCBkZWZhdWx0OiAxLjAsIG1pbjogMH1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZ3M6IFsncScsICdibG9ja3F1b3RlJ10sXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxRdW90ZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjaXRlOiBVUkxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3NjcmlwdCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxTY3JpcHRFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczoge1xuICAgIHRleHQ6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzID0gXCJcIjtcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbiA9IHRoaXMuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSlcbiAgICAgICAgICAgIHMgKz0gY2hpbGQuX2RhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKCk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gXCJcIikge1xuICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBzcmM6IFVSTCxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hhcnNldDogU3RyaW5nLFxuICAgIGRlZmVyOiBCb29sZWFuLFxuICAgIGFzeW5jOiBCb29sZWFuLFxuICAgIGNyb3NzT3JpZ2luOiBDT1JTLFxuICAgIG5vbmNlOiBTdHJpbmcsXG4gICAgaW50ZWdyaXR5OiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdzZWxlY3QnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MU2VsZWN0RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEZvcm1FbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgZm9ybTogZm9ybUFzc29jaWF0ZWRQcm9wcy5mb3JtLFxuICAgIG9wdGlvbnM6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcHRpb24nKTtcbiAgICB9fVxuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGF1dG9mb2N1czogQm9vbGVhbixcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICByZXF1aXJlZDogQm9vbGVhbixcbiAgICBzaXplOiB7dHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDB9XG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdzb3VyY2UnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MU291cmNlRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIHNyYzogVVJMLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBtZWRpYTogU3RyaW5nXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdzcGFuJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFNwYW5FbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnc3R5bGUnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MU3R5bGVFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgbWVkaWE6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgc2NvcGVkOiBCb29sZWFuXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdjYXB0aW9uJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFRhYmxlQ2FwdGlvbkVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5cbmRlZmluZSh7XG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUYWJsZUNlbGxFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgY29sU3Bhbjoge3R5cGU6IFwidW5zaWduZWQgbG9uZ1wiLCBkZWZhdWx0OiAxfSxcbiAgICByb3dTcGFuOiB7dHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDF9LFxuICAgIC8vWFhYIEFsc28gcmVmbGVjdCBzZXR0YWJsZSB0b2tlbiBsaXN0IGhlYWRlcnNcbiAgICBzY29wZTogeyB0eXBlOiBbJ3JvdycsJ2NvbCcsJ3Jvd2dyb3VwJywnY29sZ3JvdXAnXSwgbWlzc2luZzogJycgfSxcbiAgICBhYmJyOiBTdHJpbmcsXG4gICAgLy8gT2Jzb2xldGVcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIGF4aXM6IFN0cmluZyxcbiAgICBoZWlnaHQ6IFN0cmluZyxcbiAgICB3aWR0aDogU3RyaW5nLFxuICAgIGNoOiB7IG5hbWU6ICdjaGFyJywgdHlwZTogU3RyaW5nIH0sXG4gICAgY2hPZmY6IHsgbmFtZTogJ2NoYXJvZmYnLCB0eXBlOiBTdHJpbmcgfSxcbiAgICBub1dyYXA6IEJvb2xlYW4sXG4gICAgdkFsaWduOiBTdHJpbmcsXG4gICAgYmdDb2xvcjogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZ3M6IFsnY29sJywgJ2NvbGdyb3VwJ10sXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUYWJsZUNvbEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBzcGFuOiB7dHlwZTogJ2xpbWl0ZWQgdW5zaWduZWQgbG9uZyB3aXRoIGZhbGxiYWNrJywgZGVmYXVsdDogMSwgbWluOiAxfSxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGFsaWduOiBTdHJpbmcsXG4gICAgY2g6IHsgbmFtZTogJ2NoYXInLCB0eXBlOiBTdHJpbmcgfSxcbiAgICBjaE9mZjogeyBuYW1lOiAnY2hhcm9mZicsIHR5cGU6IFN0cmluZyB9LFxuICAgIHZBbGlnbjogU3RyaW5nLFxuICAgIHdpZHRoOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICd0YWJsZScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUYWJsZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcm93czogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJyk7XG4gICAgfX1cbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIE9ic29sZXRlXG4gICAgYWxpZ246IFN0cmluZyxcbiAgICBib3JkZXI6IFN0cmluZyxcbiAgICBmcmFtZTogU3RyaW5nLFxuICAgIHJ1bGVzOiBTdHJpbmcsXG4gICAgc3VtbWFyeTogU3RyaW5nLFxuICAgIHdpZHRoOiBTdHJpbmcsXG4gICAgYmdDb2xvcjogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgICBjZWxsUGFkZGluZzogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgICBjZWxsU3BhY2luZzogeyB0eXBlOiBTdHJpbmcsIHRyZWF0TnVsbEFzRW1wdHlTdHJpbmc6IHRydWUgfSxcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3RlbXBsYXRlJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFRlbXBsYXRlRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgICB0aGlzLl9jb250ZW50RnJhZ21lbnQgPSBkb2MuX3RlbXBsYXRlRG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBjb250ZW50OiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9jb250ZW50RnJhZ21lbnQ7IH0gfSxcbiAgICBzZXJpYWxpemU6IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5jb250ZW50LnNlcmlhbGl6ZSgpOyB9IH1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3RyJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFRhYmxlUm93RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBjZWxsczogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbCgndGQsdGgnKTtcbiAgICB9fVxuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgLy8gT2Jzb2xldGVcbiAgICBhbGlnbjogU3RyaW5nLFxuICAgIGNoOiB7IG5hbWU6ICdjaGFyJywgdHlwZTogU3RyaW5nIH0sXG4gICAgY2hPZmY6IHsgbmFtZTogJ2NoYXJvZmYnLCB0eXBlOiBTdHJpbmcgfSxcbiAgICB2QWxpZ246IFN0cmluZyxcbiAgICBiZ0NvbG9yOiB7IHR5cGU6IFN0cmluZywgdHJlYXROdWxsQXNFbXB0eVN0cmluZzogdHJ1ZSB9LFxuICB9LFxufSk7XG5cbmRlZmluZSh7XG4gIHRhZ3M6IFsndGhlYWQnLCAndGZvb3QnLCAndGJvZHknXSxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcm93czogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJyk7XG4gICAgfX1cbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIC8vIE9ic29sZXRlXG4gICAgYWxpZ246IFN0cmluZyxcbiAgICBjaDogeyBuYW1lOiAnY2hhcicsIHR5cGU6IFN0cmluZyB9LFxuICAgIGNoT2ZmOiB7IG5hbWU6ICdjaGFyb2ZmJywgdHlwZTogU3RyaW5nIH0sXG4gICAgdkFsaWduOiBTdHJpbmcsXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICd0ZXh0YXJlYScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUZXh0QXJlYUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxGb3JtRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczogZm9ybUFzc29jaWF0ZWRQcm9wcyxcbiAgYXR0cmlidXRlczoge1xuICAgIGF1dG9jb21wbGV0ZTogU3RyaW5nLCAvLyBJdCdzIGNvbXBsaWNhdGVkXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGF1dG9mb2N1czogQm9vbGVhbixcbiAgICBwbGFjZWhvbGRlcjogU3RyaW5nLFxuICAgIHdyYXA6IFN0cmluZyxcbiAgICBkaXJOYW1lOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IEJvb2xlYW4sXG4gICAgcmVhZE9ubHk6IEJvb2xlYW4sXG4gICAgcm93czoge3R5cGU6ICdsaW1pdGVkIHVuc2lnbmVkIGxvbmcgd2l0aCBmYWxsYmFjaycsIGRlZmF1bHQ6IDIgfSxcbiAgICBjb2xzOiB7dHlwZTogJ2xpbWl0ZWQgdW5zaWduZWQgbG9uZyB3aXRoIGZhbGxiYWNrJywgZGVmYXVsdDogMjAgfSxcbiAgICBtYXhMZW5ndGg6IHt0eXBlOiAndW5zaWduZWQgbG9uZycsIG1pbjogMCwgc2V0bWluOiAwLCBkZWZhdWx0OiAtMX0sXG4gICAgaW5wdXRNb2RlOiB7IHR5cGU6IFsgXCJ2ZXJiYXRpbVwiLCBcImxhdGluXCIsIFwibGF0aW4tbmFtZVwiLCBcImxhdGluLXByb3NlXCIsIFwiZnVsbC13aWR0aC1sYXRpblwiLCBcImthbmFcIiwgXCJrYW5hLW5hbWVcIiwgXCJrYXRha2FuYVwiLCBcIm51bWVyaWNcIiwgXCJ0ZWxcIiwgXCJlbWFpbFwiLCBcInVybFwiIF0sIG1pc3Npbmc6ICcnIH0sXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICd0aW1lJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFRpbWVFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgZGF0ZVRpbWU6IFN0cmluZyxcbiAgICBwdWJEYXRlOiBCb29sZWFuXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICd0aXRsZScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUaXRsZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgdGV4dDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7XG4gICAgfX1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3VsJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTFVMaXN0RWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgYXR0cmlidXRlczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICAvLyBPYnNvbGV0ZVxuICAgIGNvbXBhY3Q6IEJvb2xlYW4sXG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICBjdG9yOiBmdW5jdGlvbiBIVE1MTWVkaWFFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgc3JjOiBVUkwsXG4gICAgY3Jvc3NPcmlnaW46IENPUlMsXG4gICAgcHJlbG9hZDogeyB0eXBlOltcIm1ldGFkYXRhXCIsIFwibm9uZVwiLCBcImF1dG9cIiwge3ZhbHVlOiBcIlwiLCBhbGlhczogXCJhdXRvXCJ9XSwgbWlzc2luZzogJ2F1dG8nIH0sXG4gICAgbG9vcDogQm9vbGVhbixcbiAgICBhdXRvcGxheTogQm9vbGVhbixcbiAgICBtZWRpYUdyb3VwOiBTdHJpbmcsXG4gICAgY29udHJvbHM6IEJvb2xlYW4sXG4gICAgZGVmYXVsdE11dGVkOiB7bmFtZTogXCJtdXRlZFwiLCB0eXBlOiBCb29sZWFufVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAnYXVkaW8nLFxuICBzdXBlcmNsYXNzOiBodG1sRWxlbWVudHMuSFRNTE1lZGlhRWxlbWVudCxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTEF1ZGlvRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgaHRtbEVsZW1lbnRzLkhUTUxNZWRpYUVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3ZpZGVvJyxcbiAgc3VwZXJjbGFzczogaHRtbEVsZW1lbnRzLkhUTUxNZWRpYUVsZW1lbnQsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxWaWRlb0VsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIGh0bWxFbGVtZW50cy5IVE1MTWVkaWFFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBwb3N0ZXI6IFVSTCxcbiAgICB3aWR0aDoge3R5cGU6IFwidW5zaWduZWQgbG9uZ1wiLCBtaW46IDAsIGRlZmF1bHQ6IDAgfSxcbiAgICBoZWlnaHQ6IHt0eXBlOiBcInVuc2lnbmVkIGxvbmdcIiwgbWluOiAwLCBkZWZhdWx0OiAwIH1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3RkJyxcbiAgc3VwZXJjbGFzczogaHRtbEVsZW1lbnRzLkhUTUxUYWJsZUNlbGxFbGVtZW50LFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MVGFibGVEYXRhQ2VsbEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIGh0bWxFbGVtZW50cy5IVE1MVGFibGVDZWxsRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAndGgnLFxuICBzdXBlcmNsYXNzOiBodG1sRWxlbWVudHMuSFRNTFRhYmxlQ2VsbEVsZW1lbnQsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxUYWJsZUhlYWRlckNlbGxFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBodG1sRWxlbWVudHMuSFRNTFRhYmxlQ2VsbEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdmcmFtZXNldCcsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxGcmFtZVNldEVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdmcmFtZScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxGcmFtZUVsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEhUTUxFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XG4gIH1cbn0pO1xuXG5kZWZpbmUoe1xuICB0YWc6ICdjYW52YXMnLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MQ2FudmFzRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBnZXRDb250ZXh0OiB7IHZhbHVlOiB1dGlscy5ueWkgfSxcbiAgICBwcm9iYWJseVN1cHBvcnRzQ29udGV4dDogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG4gICAgc2V0Q29udGV4dDogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG4gICAgdHJhbnNmZXJDb250cm9sVG9Qcm94eTogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG4gICAgdG9EYXRhVVJMOiB7IHZhbHVlOiB1dGlscy5ueWkgfSxcbiAgICB0b0Jsb2I6IHsgdmFsdWU6IHV0aWxzLm55aSB9XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICB3aWR0aDogeyB0eXBlOiBcInVuc2lnbmVkIGxvbmdcIiwgZGVmYXVsdDogMzAwfSxcbiAgICBoZWlnaHQ6IHsgdHlwZTogXCJ1bnNpZ25lZCBsb25nXCIsIGRlZmF1bHQ6IDE1MH1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ2RpYWxvZycsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxEaWFsb2dFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBwcm9wczoge1xuICAgIHNob3c6IHsgdmFsdWU6IHV0aWxzLm55aSB9LFxuICAgIHNob3dNb2RhbDogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG4gICAgY2xvc2U6IHsgdmFsdWU6IHV0aWxzLm55aSB9XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBvcGVuOiBCb29sZWFuLFxuICAgIHJldHVyblZhbHVlOiBTdHJpbmdcbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ21lbnVpdGVtJyxcbiAgY3RvcjogZnVuY3Rpb24gSFRNTE1lbnVJdGVtRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgSFRNTEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICAvLyBUaGUgbWVudWl0ZW0ncyBsYWJlbFxuICAgIF9sYWJlbDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMuX2dldGF0dHIoJ2xhYmVsJyk7XG4gICAgICAgIGlmICh2YWwgIT09IG51bGwgJiYgdmFsICE9PSAnJykgeyByZXR1cm4gdmFsOyB9XG4gICAgICAgIHZhbCA9IHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICAgIC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG4gICAgICAgIHJldHVybiB2YWwucmVwbGFjZSgvWyBcXHRcXG5cXGZcXHJdKy9nLCAnICcpLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIFRoZSBtZW51aXRlbSBsYWJlbCBJREwgYXR0cmlidXRlXG4gICAgbGFiZWw6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgPSB0aGlzLl9nZXRhdHRyKCdsYWJlbCcpO1xuICAgICAgICBpZiAodmFsICE9PSBudWxsKSB7IHJldHVybiB2YWw7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICB0aGlzLl9zZXRhdHRyKCdsYWJlbCcsIHYpO1xuICAgICAgfSxcbiAgICB9XG4gIH0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICB0eXBlOiB7IHR5cGU6IFtcImNvbW1hbmRcIixcImNoZWNrYm94XCIsXCJyYWRpb1wiXSwgbWlzc2luZzogJ2NvbW1hbmQnIH0sXG4gICAgaWNvbjogVVJMLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGNoZWNrZWQ6IEJvb2xlYW4sXG4gICAgcmFkaW9ncm91cDogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IEJvb2xlYW5cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZzogJ3NvdXJjZScsXG4gIGN0b3I6IGZ1bmN0aW9uIEhUTUxTb3VyY2VFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgc3Jjc2V0OiBTdHJpbmcsXG4gICAgc2l6ZXM6IFN0cmluZyxcbiAgICBtZWRpYTogU3RyaW5nLFxuICAgIHNyYzogVVJMLFxuICAgIHR5cGU6IFN0cmluZ1xuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnOiAndHJhY2snLFxuICBjdG9yOiBmdW5jdGlvbiBIVE1MVHJhY2tFbGVtZW50KGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgICBIVE1MRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgc3JjOiBVUkwsXG4gICAgc3JjbGFuZzogU3RyaW5nLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogQm9vbGVhbixcbiAgICBraW5kOiB7IHR5cGU6IFtcInN1YnRpdGxlc1wiLCBcImNhcHRpb25zXCIsIFwiZGVzY3JpcHRpb25zXCIsIFwiY2hhcHRlcnNcIiwgXCJtZXRhZGF0YVwiXSwgbWlzc2luZzogJ3N1YnRpdGxlcycsIGludmFsaWQ6ICdtZXRhZGF0YScgfSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBOT05FOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9IH0sXG4gICAgTE9BRElORzogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gMTsgfSB9LFxuICAgIExPQURFRDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gMjsgfSB9LFxuICAgIEVSUk9SOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiAzOyB9IH0sXG4gICAgcmVhZHlTdGF0ZTogeyBnZXQ6IHV0aWxzLm55aSB9LFxuICAgIHRyYWNrOiB7IGdldDogdXRpbHMubnlpIH1cbiAgfVxufSk7XG5cbmRlZmluZSh7XG4gIHRhZ3M6IFtcbiAgICBcImFiYnJcIiwgXCJhZGRyZXNzXCIsIFwiYXJ0aWNsZVwiLCBcImFzaWRlXCIsIFwiYlwiLCBcImJkaVwiLCBcImJkb1wiLFxuICAgIFwiY2l0ZVwiLCBcImNvZGVcIiwgXCJkZFwiLCBcImRmblwiLCBcImR0XCIsIFwiZW1cIiwgXCJmaWdjYXB0aW9uXCIsIFwiZmlndXJlXCIsXG4gICAgXCJmb290ZXJcIiwgXCJoZWFkZXJcIiwgXCJoZ3JvdXBcIiwgXCJpXCIsIFwia2JkXCIsIFwibWFpblwiLCBcIm1hcmtcIiwgXCJuYXZcIiwgXCJub3NjcmlwdFwiLFxuICAgIFwicmJcIiwgXCJycFwiLCBcInJ0XCIsIFwicnRjXCIsIFwicnVieVwiLCBcInNcIiwgXCJzYW1wXCIsIFwic2VjdGlvblwiLCBcInNtYWxsXCIsIFwic3Ryb25nXCIsXG4gICAgXCJzdWJcIiwgXCJzdW1tYXJ5XCIsIFwic3VwXCIsIFwidVwiLCBcInZhclwiLCBcIndiclwiLFxuICAgIC8vIExlZ2FjeSBlbGVtZW50c1xuICAgIFwiYWNyb255bVwiLCBcImJhc2Vmb250XCIsIFwiYmlnXCIsIFwiY2VudGVyXCIsIFwibm9iclwiLCBcIm5vZW1iZWRcIiwgXCJub2ZyYW1lc1wiLFxuICAgIFwicGxhaW50ZXh0XCIsIFwic3RyaWtlXCIsIFwidHRcIlxuICBdXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL2h0bWxlbHRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbi8qIGpzaGludCBlcW51bGw6IHRydWUgKi9cbi8qKlxuICogWmVzdCAoaHR0cHM6Ly9naXRodWIuY29tL2NoamovemVzdClcbiAqIEEgY3NzIHNlbGVjdG9yIGVuZ2luZS5cbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDEyLCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKVxuICovXG5cbi8qKlxuICogSGVscGVyc1xuICovXG5cbnZhciB3aW5kb3cgPSBPYmplY3QuY3JlYXRlKG51bGwsIHtcbiAgbG9jYXRpb246IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpbmRvdy5sb2NhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9IH1cbn0pO1xuXG52YXIgY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKTtcbn07XG5cbnZhciBvcmRlciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gIHJldHVybiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhLCBiKSAmIDIgPyAxIDogLTE7XG59O1xuXG52YXIgbmV4dCA9IGZ1bmN0aW9uKGVsKSB7XG4gIHdoaWxlICgoZWwgPSBlbC5uZXh0U2libGluZylcbiAgICAgICAgICYmIGVsLm5vZGVUeXBlICE9PSAxKTtcbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIHByZXYgPSBmdW5jdGlvbihlbCkge1xuICB3aGlsZSAoKGVsID0gZWwucHJldmlvdXNTaWJsaW5nKVxuICAgICAgICAgJiYgZWwubm9kZVR5cGUgIT09IDEpO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgY2hpbGQgPSBmdW5jdGlvbihlbCkge1xuICAvKmpzaGludCAtVzA4NCAqL1xuICBpZiAoZWwgPSBlbC5maXJzdENoaWxkKSB7XG4gICAgd2hpbGUgKGVsLm5vZGVUeXBlICE9PSAxXG4gICAgICAgICAgICYmIChlbCA9IGVsLm5leHRTaWJsaW5nKSk7XG4gIH1cbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIGxhc3RDaGlsZCA9IGZ1bmN0aW9uKGVsKSB7XG4gIC8qanNoaW50IC1XMDg0ICovXG4gIGlmIChlbCA9IGVsLmxhc3RDaGlsZCkge1xuICAgIHdoaWxlIChlbC5ub2RlVHlwZSAhPT0gMVxuICAgICAgICAgICAmJiAoZWwgPSBlbC5wcmV2aW91c1NpYmxpbmcpKTtcbiAgfVxuICByZXR1cm4gZWw7XG59O1xuXG52YXIgdW5xdW90ZSA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAoIXN0cikgcmV0dXJuIHN0cjtcbiAgdmFyIGNoID0gc3RyWzBdO1xuICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09ICdcXCcnKSB7XG4gICAgaWYgKHN0cltzdHIubGVuZ3RoLTFdID09PSBjaCkge1xuICAgICAgc3RyID0gc3RyLnNsaWNlKDEsIC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYmFkIHN0cmluZy5cbiAgICAgIHN0ciA9IHN0ci5zbGljZSgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHJ1bGVzLnN0cl9lc2NhcGUsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIHZhciBtID0gL15cXFxcKD86KFswLTlBLUZhLWZdKyl8KFtcXHJcXG5cXGZdKykpLy5leGVjKHMpO1xuICAgICAgaWYgKCFtKSB7IHJldHVybiBzLnNsaWNlKDEpOyB9XG4gICAgICBpZiAobVsyXSkgeyByZXR1cm4gJyc7IC8qIGVzY2FwZWQgbmV3bGluZXMgYXJlIGlnbm9yZWQgaW4gc3RyaW5ncy4gKi8gfVxuICAgICAgdmFyIGNwID0gcGFyc2VJbnQobVsxXSwgMTYpO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50ID8gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApIDpcbiAgICAgICAgLy8gTm90IGFsbCBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9ucyBoYXZlIFN0cmluZy5mcm9tQ29kZVBvaW50IHlldC5cbiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShjcCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocnVsZXMuaWRlbnQudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIGRlY29kZWlkKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTlVNQkVSLCBQRVJDRU5UQUdFLCBESU1FTlNJT04sIGV0Y1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn07XG5cbnZhciBkZWNvZGVpZCA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocnVsZXMuZXNjYXBlLCBmdW5jdGlvbihzKSB7XG4gICAgdmFyIG0gPSAvXlxcXFwoWzAtOUEtRmEtZl0rKS8uZXhlYyhzKTtcbiAgICBpZiAoIW0pIHsgcmV0dXJuIHNbMV07IH1cbiAgICB2YXIgY3AgPSBwYXJzZUludChtWzFdLCAxNik7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50ID8gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApIDpcbiAgICAgIC8vIE5vdCBhbGwgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbnMgaGF2ZSBTdHJpbmcuZnJvbUNvZGVQb2ludCB5ZXQuXG4gICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGNwKTtcbiAgfSk7XG59O1xuXG52YXIgaW5kZXhPZiA9IChmdW5jdGlvbigpIHtcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZW0pIHtcbiAgICB2YXIgaSA9IHRoaXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xufSkoKTtcblxudmFyIG1ha2VJbnNpZGUgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHZhciByZWdleCA9IHJ1bGVzLmluc2lkZS5zb3VyY2VcbiAgICAucmVwbGFjZSgvPC9nLCBzdGFydClcbiAgICAucmVwbGFjZSgvPi9nLCBlbmQpO1xuXG4gIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4KTtcbn07XG5cbnZhciByZXBsYWNlID0gZnVuY3Rpb24ocmVnZXgsIG5hbWUsIHZhbCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZTtcbiAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbC5zb3VyY2UgfHwgdmFsKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpO1xufTtcblxudmFyIHRydW5jYXRlVXJsID0gZnVuY3Rpb24odXJsLCBudW0pIHtcbiAgcmV0dXJuIHVybFxuICAgIC5yZXBsYWNlKC9eKD86XFx3KzpcXC9cXC98XFwvKykvLCAnJylcbiAgICAucmVwbGFjZSgvKD86XFwvK3xcXC8qIy4qPykkLywgJycpXG4gICAgLnNwbGl0KCcvJywgbnVtKVxuICAgIC5qb2luKCcvJyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBgbnRoYCBTZWxlY3RvcnNcbiAqL1xuXG52YXIgcGFyc2VOdGggPSBmdW5jdGlvbihwYXJhbV8sIHRlc3QpIHtcbiAgdmFyIHBhcmFtID0gcGFyYW1fLnJlcGxhY2UoL1xccysvZywgJycpXG4gICAgLCBjYXA7XG5cbiAgaWYgKHBhcmFtID09PSAnZXZlbicpIHtcbiAgICBwYXJhbSA9ICcybiswJztcbiAgfSBlbHNlIGlmIChwYXJhbSA9PT0gJ29kZCcpIHtcbiAgICBwYXJhbSA9ICcybisxJztcbiAgfSBlbHNlIGlmIChwYXJhbS5pbmRleE9mKCduJykgPT09IC0xKSB7XG4gICAgcGFyYW0gPSAnMG4nICsgcGFyYW07XG4gIH1cblxuICBjYXAgPSAvXihbKy1dKT8oXFxkKyk/bihbKy1dKT8oXFxkKyk/JC8uZXhlYyhwYXJhbSk7XG5cbiAgcmV0dXJuIHtcbiAgICBncm91cDogY2FwWzFdID09PSAnLSdcbiAgICAgID8gLShjYXBbMl0gfHwgMSlcbiAgICAgIDogKyhjYXBbMl0gfHwgMSksXG4gICAgb2Zmc2V0OiBjYXBbNF1cbiAgICAgID8gKGNhcFszXSA9PT0gJy0nID8gLWNhcFs0XSA6ICtjYXBbNF0pXG4gICAgICA6IDBcbiAgfTtcbn07XG5cbnZhciBudGggPSBmdW5jdGlvbihwYXJhbV8sIHRlc3QsIGxhc3QpIHtcbiAgdmFyIHBhcmFtID0gcGFyc2VOdGgocGFyYW1fKVxuICAgICwgZ3JvdXAgPSBwYXJhbS5ncm91cFxuICAgICwgb2Zmc2V0ID0gcGFyYW0ub2Zmc2V0XG4gICAgLCBmaW5kID0gIWxhc3QgPyBjaGlsZCA6IGxhc3RDaGlsZFxuICAgICwgYWR2YW5jZSA9ICFsYXN0ID8gbmV4dCA6IHByZXY7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUubm9kZVR5cGUgIT09IDEpIHJldHVybjtcblxuICAgIHZhciByZWwgPSBmaW5kKGVsLnBhcmVudE5vZGUpXG4gICAgICAsIHBvcyA9IDA7XG5cbiAgICB3aGlsZSAocmVsKSB7XG4gICAgICBpZiAodGVzdChyZWwsIGVsKSkgcG9zKys7XG4gICAgICBpZiAocmVsID09PSBlbCkge1xuICAgICAgICBwb3MgLT0gb2Zmc2V0O1xuICAgICAgICByZXR1cm4gZ3JvdXAgJiYgcG9zXG4gICAgICAgICAgPyAocG9zICUgZ3JvdXApID09PSAwICYmIChwb3MgPCAwID09PSBncm91cCA8IDApXG4gICAgICAgICAgOiAhcG9zO1xuICAgICAgfVxuICAgICAgcmVsID0gYWR2YW5jZShyZWwpO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogU2ltcGxlIFNlbGVjdG9yc1xuICovXG5cbnZhciBzZWxlY3RvcnMgPSB7XG4gICcqJzogKGZ1bmN0aW9uKCkge1xuICAgIGlmIChmYWxzZS8qZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpKTtcbiAgICAgIHJldHVybiAhIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJylbMF07XG4gICAgfSgpKi8pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKSxcbiAgJ3R5cGUnOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0eXBlO1xuICAgIH07XG4gIH0sXG4gICdhdHRyJzogZnVuY3Rpb24oa2V5LCBvcCwgdmFsLCBpKSB7XG4gICAgb3AgPSBvcGVyYXRvcnNbb3BdO1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgdmFyIGF0dHI7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdmb3InOlxuICAgICAgICAgIGF0dHIgPSBlbC5odG1sRm9yO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgLy8gY2xhc3NOYW1lIGlzICcnIHdoZW4gbm9uLWV4aXN0ZW50XG4gICAgICAgICAgLy8gZ2V0QXR0cmlidXRlKCdjbGFzcycpIGlzIG51bGxcbiAgICAgICAgICBhdHRyID0gZWwuY2xhc3NOYW1lO1xuICAgICAgICAgIGlmIChhdHRyID09PSAnJyAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXR0ciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdocmVmJzpcbiAgICAgICAgICBhdHRyID0gZWwuZ2V0QXR0cmlidXRlKCdocmVmJywgMik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgICAvLyBnZXRBdHRyaWJ1dGUoJ3RpdGxlJykgY2FuIGJlICcnIHdoZW4gbm9uLWV4aXN0ZW50IHNvbWV0aW1lcz9cbiAgICAgICAgICBhdHRyID0gZWwuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIGNhcmVmdWwgd2l0aCBhdHRyaWJ1dGVzIHdpdGggc3BlY2lhbCBnZXR0ZXIgZnVuY3Rpb25zXG4gICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgY2FzZSAnbGFuZyc6XG4gICAgICAgIGNhc2UgJ2Rpcic6XG4gICAgICAgIGNhc2UgJ2FjY2Vzc0tleSc6XG4gICAgICAgIGNhc2UgJ2hpZGRlbic6XG4gICAgICAgIGNhc2UgJ3RhYkluZGV4JzpcbiAgICAgICAgY2FzZSAnc3R5bGUnOlxuICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIGF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUgJiYgIWVsLmhhc0F0dHJpYnV0ZShrZXkpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYXR0ciA9IGVsW2tleV0gIT0gbnVsbFxuICAgICAgICAgICAgPyBlbFtrZXldXG4gICAgICAgICAgICA6IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybjtcbiAgICAgIGF0dHIgPSBhdHRyICsgJyc7XG4gICAgICBpZiAoaSkge1xuICAgICAgICBhdHRyID0gYXR0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YWwgPSB2YWwudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcChhdHRyLCB2YWwpO1xuICAgIH07XG4gIH0sXG4gICc6Zmlyc3QtY2hpbGQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhcHJldihlbCkgJiYgZWwucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTtcbiAgfSxcbiAgJzpsYXN0LWNoaWxkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIW5leHQoZWwpICYmIGVsLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDE7XG4gIH0sXG4gICc6b25seS1jaGlsZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICFwcmV2KGVsKSAmJiAhbmV4dChlbClcbiAgICAgICYmIGVsLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDE7XG4gIH0sXG4gICc6bnRoLWNoaWxkJzogZnVuY3Rpb24ocGFyYW0sIGxhc3QpIHtcbiAgICByZXR1cm4gbnRoKHBhcmFtLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIGxhc3QpO1xuICB9LFxuICAnOm50aC1sYXN0LWNoaWxkJzogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzWyc6bnRoLWNoaWxkJ10ocGFyYW0sIHRydWUpO1xuICB9LFxuICAnOnJvb3QnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA9PT0gZWw7XG4gIH0sXG4gICc6ZW1wdHknOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhZWwuZmlyc3RDaGlsZDtcbiAgfSxcbiAgJzpub3QnOiBmdW5jdGlvbihzZWwpIHtcbiAgICB2YXIgdGVzdCA9IGNvbXBpbGVHcm91cChzZWwpO1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuICF0ZXN0KGVsKTtcbiAgICB9O1xuICB9LFxuICAnOmZpcnN0LW9mLXR5cGUnOiBmdW5jdGlvbihlbCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSAxKSByZXR1cm47XG4gICAgdmFyIHR5cGUgPSBlbC5ub2RlTmFtZTtcbiAgICAvKmpzaGludCAtVzA4NCAqL1xuICAgIHdoaWxlIChlbCA9IHByZXYoZWwpKSB7XG4gICAgICBpZiAoZWwubm9kZU5hbWUgPT09IHR5cGUpIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gICc6bGFzdC1vZi10eXBlJzogZnVuY3Rpb24oZWwpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gMSkgcmV0dXJuO1xuICAgIHZhciB0eXBlID0gZWwubm9kZU5hbWU7XG4gICAgLypqc2hpbnQgLVcwODQgKi9cbiAgICB3aGlsZSAoZWwgPSBuZXh0KGVsKSkge1xuICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSB0eXBlKSByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICAnOm9ubHktb2YtdHlwZSc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1snOmZpcnN0LW9mLXR5cGUnXShlbClcbiAgICAgICAgJiYgc2VsZWN0b3JzWyc6bGFzdC1vZi10eXBlJ10oZWwpO1xuICB9LFxuICAnOm50aC1vZi10eXBlJzogZnVuY3Rpb24ocGFyYW0sIGxhc3QpIHtcbiAgICByZXR1cm4gbnRoKHBhcmFtLCBmdW5jdGlvbihyZWwsIGVsKSB7XG4gICAgICByZXR1cm4gcmVsLm5vZGVOYW1lID09PSBlbC5ub2RlTmFtZTtcbiAgICB9LCBsYXN0KTtcbiAgfSxcbiAgJzpudGgtbGFzdC1vZi10eXBlJzogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzWyc6bnRoLW9mLXR5cGUnXShwYXJhbSwgdHJ1ZSk7XG4gIH0sXG4gICc6Y2hlY2tlZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICEhKGVsLmNoZWNrZWQgfHwgZWwuc2VsZWN0ZWQpO1xuICB9LFxuICAnOmluZGV0ZXJtaW5hdGUnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhc2VsZWN0b3JzWyc6Y2hlY2tlZCddKGVsKTtcbiAgfSxcbiAgJzplbmFibGVkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIWVsLmRpc2FibGVkICYmIGVsLnR5cGUgIT09ICdoaWRkZW4nO1xuICB9LFxuICAnOmRpc2FibGVkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gISFlbC5kaXNhYmxlZDtcbiAgfSxcbiAgJzp0YXJnZXQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbC5pZCA9PT0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xuICB9LFxuICAnOmZvY3VzJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwgPT09IGVsLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfSxcbiAgJzptYXRjaGVzJzogZnVuY3Rpb24oc2VsKSB7XG4gICAgcmV0dXJuIGNvbXBpbGVHcm91cChzZWwpO1xuICB9LFxuICAnOm50aC1tYXRjaCc6IGZ1bmN0aW9uKHBhcmFtLCBsYXN0KSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJhbS5zcGxpdCgvXFxzKixcXHMqLylcbiAgICAgICwgYXJnID0gYXJncy5zaGlmdCgpXG4gICAgICAsIHRlc3QgPSBjb21waWxlR3JvdXAoYXJncy5qb2luKCcsJykpO1xuXG4gICAgcmV0dXJuIG50aChhcmcsIHRlc3QsIGxhc3QpO1xuICB9LFxuICAnOm50aC1sYXN0LW1hdGNoJzogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzWyc6bnRoLW1hdGNoJ10ocGFyYW0sIHRydWUpO1xuICB9LFxuICAnOmxpbmtzLWhlcmUnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbCArICcnID09PSB3aW5kb3cubG9jYXRpb24gKyAnJztcbiAgfSxcbiAgJzpsYW5nJzogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICBpZiAoZWwubGFuZykgcmV0dXJuIGVsLmxhbmcuaW5kZXhPZihwYXJhbSkgPT09IDA7XG4gICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnOmRpcic6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICB3aGlsZSAoZWwpIHtcbiAgICAgICAgaWYgKGVsLmRpcikgcmV0dXJuIGVsLmRpciA9PT0gcGFyYW07XG4gICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnOnNjb3BlJzogZnVuY3Rpb24oZWwsIGNvbikge1xuICAgIHZhciBjb250ZXh0ID0gY29uIHx8IGVsLm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKGNvbnRleHQubm9kZVR5cGUgPT09IDkpIHtcbiAgICAgIHJldHVybiBlbCA9PT0gY29udGV4dC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBlbCA9PT0gY29udGV4dDtcbiAgfSxcbiAgJzphbnktbGluayc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbC5ocmVmID09PSAnc3RyaW5nJztcbiAgfSxcbiAgJzpsb2NhbC1saW5rJzogZnVuY3Rpb24oZWwpIHtcbiAgICBpZiAoZWwubm9kZU5hbWUpIHtcbiAgICAgIHJldHVybiBlbC5ocmVmICYmIGVsLmhvc3QgPT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgIH1cbiAgICB2YXIgcGFyYW0gPSArZWwgKyAxO1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgaWYgKCFlbC5ocmVmKSByZXR1cm47XG5cbiAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24gKyAnJ1xuICAgICAgICAsIGhyZWYgPSBlbCArICcnO1xuXG4gICAgICByZXR1cm4gdHJ1bmNhdGVVcmwodXJsLCBwYXJhbSkgPT09IHRydW5jYXRlVXJsKGhyZWYsIHBhcmFtKTtcbiAgICB9O1xuICB9LFxuICAnOmRlZmF1bHQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhIWVsLmRlZmF1bHRTZWxlY3RlZDtcbiAgfSxcbiAgJzp2YWxpZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIGVsLndpbGxWYWxpZGF0ZSB8fCAoZWwudmFsaWRpdHkgJiYgZWwudmFsaWRpdHkudmFsaWQpO1xuICB9LFxuICAnOmludmFsaWQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhc2VsZWN0b3JzWyc6dmFsaWQnXShlbCk7XG4gIH0sXG4gICc6aW4tcmFuZ2UnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbC52YWx1ZSA+IGVsLm1pbiAmJiBlbC52YWx1ZSA8PSBlbC5tYXg7XG4gIH0sXG4gICc6b3V0LW9mLXJhbmdlJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIXNlbGVjdG9yc1snOmluLXJhbmdlJ10oZWwpO1xuICB9LFxuICAnOnJlcXVpcmVkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gISFlbC5yZXF1aXJlZDtcbiAgfSxcbiAgJzpvcHRpb25hbCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICFlbC5yZXF1aXJlZDtcbiAgfSxcbiAgJzpyZWFkLW9ubHknOiBmdW5jdGlvbihlbCkge1xuICAgIGlmIChlbC5yZWFkT25seSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgYXR0ciA9IGVsLmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJylcbiAgICAgICwgcHJvcCA9IGVsLmNvbnRlbnRFZGl0YWJsZVxuICAgICAgLCBuYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIG5hbWUgPSBuYW1lICE9PSAnaW5wdXQnICYmIG5hbWUgIT09ICd0ZXh0YXJlYSc7XG5cbiAgICByZXR1cm4gKG5hbWUgfHwgZWwuZGlzYWJsZWQpICYmIGF0dHIgPT0gbnVsbCAmJiBwcm9wICE9PSAndHJ1ZSc7XG4gIH0sXG4gICc6cmVhZC13cml0ZSc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICFzZWxlY3RvcnNbJzpyZWFkLW9ubHknXShlbCk7XG4gIH0sXG4gICc6aG92ZXInOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpob3ZlciBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOmFjdGl2ZSc6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignOmFjdGl2ZSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOmxpbmsnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpsaW5rIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gICc6dmlzaXRlZCc6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignOnZpc2l0ZWQgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpjb2x1bW4nOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpjb2x1bW4gaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpudGgtY29sdW1uJzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6bnRoLWNvbHVtbiBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOm50aC1sYXN0LWNvbHVtbic6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignOm50aC1sYXN0LWNvbHVtbiBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOmN1cnJlbnQnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpjdXJyZW50IGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gICc6cGFzdCc6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignOnBhc3QgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpmdXR1cmUnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpmdXR1cmUgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgLy8gTm9uLXN0YW5kYXJkLCBmb3IgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbiAgJzpjb250YWlucyc6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgdGV4dCA9IGVsLmlubmVyVGV4dCB8fCBlbC50ZXh0Q29udGVudCB8fCBlbC52YWx1ZSB8fCAnJztcbiAgICAgIHJldHVybiB0ZXh0LmluZGV4T2YocGFyYW0pICE9PSAtMTtcbiAgICB9O1xuICB9LFxuICAnOmhhcyc6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gZmluZChwYXJhbSwgZWwpLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgfVxuICAvLyBQb3RlbnRpYWxseSBhZGQgbW9yZSBwc2V1ZG8gc2VsZWN0b3JzIGZvclxuICAvLyBjb21wYXRpYmlsaXR5IHdpdGggc2l6emxlIGFuZCBtb3N0IG90aGVyXG4gIC8vIHNlbGVjdG9yIGVuZ2luZXMgKD8pLlxufTtcblxuLyoqXG4gKiBBdHRyaWJ1dGUgT3BlcmF0b3JzXG4gKi9cblxudmFyIG9wZXJhdG9ycyA9IHtcbiAgJy0nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgJz0nOiBmdW5jdGlvbihhdHRyLCB2YWwpIHtcbiAgICByZXR1cm4gYXR0ciA9PT0gdmFsO1xuICB9LFxuICAnKj0nOiBmdW5jdGlvbihhdHRyLCB2YWwpIHtcbiAgICByZXR1cm4gYXR0ci5pbmRleE9mKHZhbCkgIT09IC0xO1xuICB9LFxuICAnfj0nOiBmdW5jdGlvbihhdHRyLCB2YWwpIHtcbiAgICB2YXIgaSA9IGF0dHIuaW5kZXhPZih2YWwpXG4gICAgICAsIGZcbiAgICAgICwgbDtcblxuICAgIGlmIChpID09PSAtMSkgcmV0dXJuO1xuICAgIGYgPSBhdHRyW2kgLSAxXTtcbiAgICBsID0gYXR0cltpICsgdmFsLmxlbmd0aF07XG5cbiAgICByZXR1cm4gKCFmIHx8IGYgPT09ICcgJykgJiYgKCFsIHx8IGwgPT09ICcgJyk7XG4gIH0sXG4gICd8PSc6IGZ1bmN0aW9uKGF0dHIsIHZhbCkge1xuICAgIHZhciBpID0gYXR0ci5pbmRleE9mKHZhbClcbiAgICAgICwgbDtcblxuICAgIGlmIChpICE9PSAwKSByZXR1cm47XG4gICAgbCA9IGF0dHJbaSArIHZhbC5sZW5ndGhdO1xuXG4gICAgcmV0dXJuIGwgPT09ICctJyB8fCAhbDtcbiAgfSxcbiAgJ149JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgcmV0dXJuIGF0dHIuaW5kZXhPZih2YWwpID09PSAwO1xuICB9LFxuICAnJD0nOiBmdW5jdGlvbihhdHRyLCB2YWwpIHtcbiAgICByZXR1cm4gYXR0ci5pbmRleE9mKHZhbCkgKyB2YWwubGVuZ3RoID09PSBhdHRyLmxlbmd0aDtcbiAgfSxcbiAgLy8gbm9uLXN0YW5kYXJkXG4gICchPSc6IGZ1bmN0aW9uKGF0dHIsIHZhbCkge1xuICAgIHJldHVybiBhdHRyICE9PSB2YWw7XG4gIH1cbn07XG5cbi8qKlxuICogQ29tYmluYXRvciBMb2dpY1xuICovXG5cbnZhciBjb21iaW5hdG9ycyA9IHtcbiAgJyAnOiBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAvKmpzaGludCAtVzA4NCAqL1xuICAgICAgd2hpbGUgKGVsID0gZWwucGFyZW50Tm9kZSkge1xuICAgICAgICBpZiAodGVzdChlbCkpIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnPic6IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICBpZiAoZWwgPSBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHJldHVybiB0ZXN0KGVsKSAmJiBlbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnKyc6IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICBpZiAoZWwgPSBwcmV2KGVsKSkge1xuICAgICAgICByZXR1cm4gdGVzdChlbCkgJiYgZWw7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgJ34nOiBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAvKmpzaGludCAtVzA4NCAqL1xuICAgICAgd2hpbGUgKGVsID0gcHJldihlbCkpIHtcbiAgICAgICAgaWYgKHRlc3QoZWwpKSByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgJ25vb3AnOiBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gdGVzdChlbCkgJiYgZWw7XG4gICAgfTtcbiAgfSxcbiAgJ3JlZic6IGZ1bmN0aW9uKHRlc3QsIG5hbWUpIHtcbiAgICB2YXIgbm9kZTtcblxuICAgIGZ1bmN0aW9uIHJlZihlbCkge1xuICAgICAgdmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnRcbiAgICAgICAgLCBub2RlcyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpXG4gICAgICAgICwgaSA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChyZWYudGVzdChlbCkpIHtcbiAgICAgICAgICBub2RlID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBub2RlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZWYuY29tYmluYXRvciA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICBpZiAoIW5vZGUgfHwgIW5vZGUuZ2V0QXR0cmlidXRlKSByZXR1cm47XG5cbiAgICAgIHZhciBhdHRyID0gbm9kZS5nZXRBdHRyaWJ1dGUobmFtZSkgfHwgJyc7XG4gICAgICBpZiAoYXR0clswXSA9PT0gJyMnKSBhdHRyID0gYXR0ci5zdWJzdHJpbmcoMSk7XG5cbiAgICAgIGlmIChhdHRyID09PSBlbC5pZCAmJiB0ZXN0KG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gcmVmO1xuICB9XG59O1xuXG4vKipcbiAqIEdyYW1tYXJcbiAqL1xuXG52YXIgcnVsZXMgPSB7XG4gIGVzY2FwZTogL1xcXFwoPzpbXjAtOUEtRmEtZlxcclxcbl18WzAtOUEtRmEtZl17MSw2fVtcXHJcXG5cXHQgXT8pL2csXG4gIHN0cl9lc2NhcGU6IC8oZXNjYXBlKXxcXFxcKFxcbnxcXHJcXG4/fFxcZikvZyxcbiAgbm9uYXNjaWk6IC9bXFx1MDBBMC1cXHVGRkZGXS8sXG4gIGNzc2lkOiAvKD86KD8hLT9bMC05XSkoPzplc2NhcGV8bm9uYXNjaWl8Wy1fYS16QS1aMC05XSkrKS8sXG4gIHFuYW1lOiAvXiAqKGNzc2lkfFxcKikvLFxuICBzaW1wbGU6IC9eKD86KFsuI11jc3NpZCl8cHNldWRvfGF0dHIpLyxcbiAgcmVmOiAvXiAqXFwvKGNzc2lkKVxcLyAqLyxcbiAgY29tYmluYXRvcjogL14oPzogKyhbXiBcXHcqLiNcXFxcXSkgK3woICkrfChbXiBcXHcqLiNcXFxcXSkpKD8hICokKS8sXG4gIGF0dHI6IC9eXFxbKGNzc2lkKSg/OihbXlxcd10/PSkoaW5zaWRlKSk/XFxdLyxcbiAgcHNldWRvOiAvXig6Y3NzaWQpKD86XFwoKGluc2lkZSlcXCkpPy8sXG4gIGluc2lkZTogLyg/OlwiKD86XFxcXFwifFteXCJdKSpcInwnKD86XFxcXCd8W14nXSkqJ3w8W15cIic+XSo+fFxcXFxbXCInPl18W15cIic+XSkqLyxcbiAgaWRlbnQ6IC9eKGNzc2lkKSQvXG59O1xuXG5ydWxlcy5jc3NpZCA9IHJlcGxhY2UocnVsZXMuY3NzaWQsICdub25hc2NpaScsIHJ1bGVzLm5vbmFzY2lpKTtcbnJ1bGVzLmNzc2lkID0gcmVwbGFjZShydWxlcy5jc3NpZCwgJ2VzY2FwZScsIHJ1bGVzLmVzY2FwZSk7XG5ydWxlcy5xbmFtZSA9IHJlcGxhY2UocnVsZXMucW5hbWUsICdjc3NpZCcsIHJ1bGVzLmNzc2lkKTtcbnJ1bGVzLnNpbXBsZSA9IHJlcGxhY2UocnVsZXMuc2ltcGxlLCAnY3NzaWQnLCBydWxlcy5jc3NpZCk7XG5ydWxlcy5yZWYgPSByZXBsYWNlKHJ1bGVzLnJlZiwgJ2Nzc2lkJywgcnVsZXMuY3NzaWQpO1xucnVsZXMuYXR0ciA9IHJlcGxhY2UocnVsZXMuYXR0ciwgJ2Nzc2lkJywgcnVsZXMuY3NzaWQpO1xucnVsZXMucHNldWRvID0gcmVwbGFjZShydWxlcy5wc2V1ZG8sICdjc3NpZCcsIHJ1bGVzLmNzc2lkKTtcbnJ1bGVzLmluc2lkZSA9IHJlcGxhY2UocnVsZXMuaW5zaWRlLCAnW15cIlxcJz5dKicsIHJ1bGVzLmluc2lkZSk7XG5ydWxlcy5hdHRyID0gcmVwbGFjZShydWxlcy5hdHRyLCAnaW5zaWRlJywgbWFrZUluc2lkZSgnXFxcXFsnLCAnXFxcXF0nKSk7XG5ydWxlcy5wc2V1ZG8gPSByZXBsYWNlKHJ1bGVzLnBzZXVkbywgJ2luc2lkZScsIG1ha2VJbnNpZGUoJ1xcXFwoJywgJ1xcXFwpJykpO1xucnVsZXMuc2ltcGxlID0gcmVwbGFjZShydWxlcy5zaW1wbGUsICdwc2V1ZG8nLCBydWxlcy5wc2V1ZG8pO1xucnVsZXMuc2ltcGxlID0gcmVwbGFjZShydWxlcy5zaW1wbGUsICdhdHRyJywgcnVsZXMuYXR0cik7XG5ydWxlcy5pZGVudCA9IHJlcGxhY2UocnVsZXMuaWRlbnQsICdjc3NpZCcsIHJ1bGVzLmNzc2lkKTtcbnJ1bGVzLnN0cl9lc2NhcGUgPSByZXBsYWNlKHJ1bGVzLnN0cl9lc2NhcGUsICdlc2NhcGUnLCBydWxlcy5lc2NhcGUpO1xuXG4vKipcbiAqIENvbXBpbGluZ1xuICovXG5cbnZhciBjb21waWxlID0gZnVuY3Rpb24oc2VsXykge1xuICB2YXIgc2VsID0gc2VsXy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbiAgICAsIHRlc3RcbiAgICAsIGZpbHRlciA9IFtdXG4gICAgLCBidWZmID0gW11cbiAgICAsIHN1YmplY3RcbiAgICAsIHFuYW1lXG4gICAgLCBjYXBcbiAgICAsIG9wXG4gICAgLCByZWY7XG5cbiAgLypqc2hpbnQgLVcwODQgKi9cbiAgd2hpbGUgKHNlbCkge1xuICAgIGlmIChjYXAgPSBydWxlcy5xbmFtZS5leGVjKHNlbCkpIHtcbiAgICAgIHNlbCA9IHNlbC5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBxbmFtZSA9IGNhcFsxXTtcbiAgICAgIGJ1ZmYucHVzaCh0b2socW5hbWUsIHRydWUpKTtcbiAgICB9IGVsc2UgaWYgKGNhcCA9IHJ1bGVzLnNpbXBsZS5leGVjKHNlbCkpIHtcbiAgICAgIHNlbCA9IHNlbC5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBxbmFtZSA9ICcqJztcbiAgICAgIGJ1ZmYucHVzaCh0b2socW5hbWUsIHRydWUpKTtcbiAgICAgIGJ1ZmYucHVzaCh0b2soY2FwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBzZWxlY3Rvci4nKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2FwID0gcnVsZXMuc2ltcGxlLmV4ZWMoc2VsKSkge1xuICAgICAgc2VsID0gc2VsLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGJ1ZmYucHVzaCh0b2soY2FwKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbFswXSA9PT0gJyEnKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKDEpO1xuICAgICAgc3ViamVjdCA9IG1ha2VTdWJqZWN0KCk7XG4gICAgICBzdWJqZWN0LnFuYW1lID0gcW5hbWU7XG4gICAgICBidWZmLnB1c2goc3ViamVjdC5zaW1wbGUpO1xuICAgIH1cblxuICAgIGlmIChjYXAgPSBydWxlcy5yZWYuZXhlYyhzZWwpKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgcmVmID0gY29tYmluYXRvcnMucmVmKG1ha2VTaW1wbGUoYnVmZiksIGRlY29kZWlkKGNhcFsxXSkpO1xuICAgICAgZmlsdGVyLnB1c2gocmVmLmNvbWJpbmF0b3IpO1xuICAgICAgYnVmZiA9IFtdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNhcCA9IHJ1bGVzLmNvbWJpbmF0b3IuZXhlYyhzZWwpKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3AgPSBjYXBbMV0gfHwgY2FwWzJdIHx8IGNhcFszXTtcbiAgICAgIGlmIChvcCA9PT0gJywnKSB7XG4gICAgICAgIGZpbHRlci5wdXNoKGNvbWJpbmF0b3JzLm5vb3AobWFrZVNpbXBsZShidWZmKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3AgPSAnbm9vcCc7XG4gICAgfVxuXG4gICAgaWYgKCFjb21iaW5hdG9yc1tvcF0pIHsgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdCYWQgY29tYmluYXRvci4nKTsgfVxuICAgIGZpbHRlci5wdXNoKGNvbWJpbmF0b3JzW29wXShtYWtlU2ltcGxlKGJ1ZmYpKSk7XG4gICAgYnVmZiA9IFtdO1xuICB9XG5cbiAgdGVzdCA9IG1ha2VUZXN0KGZpbHRlcik7XG4gIHRlc3QucW5hbWUgPSBxbmFtZTtcbiAgdGVzdC5zZWwgPSBzZWw7XG5cbiAgaWYgKHN1YmplY3QpIHtcbiAgICBzdWJqZWN0LmxuYW1lID0gdGVzdC5xbmFtZTtcblxuICAgIHN1YmplY3QudGVzdCA9IHRlc3Q7XG4gICAgc3ViamVjdC5xbmFtZSA9IHN1YmplY3QucW5hbWU7XG4gICAgc3ViamVjdC5zZWwgPSB0ZXN0LnNlbDtcbiAgICB0ZXN0ID0gc3ViamVjdDtcbiAgfVxuXG4gIGlmIChyZWYpIHtcbiAgICByZWYudGVzdCA9IHRlc3Q7XG4gICAgcmVmLnFuYW1lID0gdGVzdC5xbmFtZTtcbiAgICByZWYuc2VsID0gdGVzdC5zZWw7XG4gICAgdGVzdCA9IHJlZjtcbiAgfVxuXG4gIHJldHVybiB0ZXN0O1xufTtcblxudmFyIHRvayA9IGZ1bmN0aW9uKGNhcCwgcW5hbWUpIHtcbiAgLy8gcW5hbWVcbiAgaWYgKHFuYW1lKSB7XG4gICAgcmV0dXJuIGNhcCA9PT0gJyonXG4gICAgICA/IHNlbGVjdG9yc1snKiddXG4gICAgICA6IHNlbGVjdG9ycy50eXBlKGRlY29kZWlkKGNhcCkpO1xuICB9XG5cbiAgLy8gY2xhc3MvaWRcbiAgaWYgKGNhcFsxXSkge1xuICAgIHJldHVybiBjYXBbMV1bMF0gPT09ICcuJ1xuXHQgIC8vIFhYWCB1bmVzY2FwZSBoZXJlPyAgb3IgaW4gYXR0cj9cbiAgICAgID8gc2VsZWN0b3JzLmF0dHIoJ2NsYXNzJywgJ349JywgZGVjb2RlaWQoY2FwWzFdLnN1YnN0cmluZygxKSkpXG4gICAgICA6IHNlbGVjdG9ycy5hdHRyKCdpZCcsICc9JywgZGVjb2RlaWQoY2FwWzFdLnN1YnN0cmluZygxKSkpO1xuICB9XG5cbiAgLy8gcHNldWRvLW5hbWVcbiAgLy8gaW5zaWRlLXBzZXVkb1xuICBpZiAoY2FwWzJdKSB7XG4gICAgcmV0dXJuIGNhcFszXVxuICAgICAgPyBzZWxlY3RvcnNbZGVjb2RlaWQoY2FwWzJdKV0odW5xdW90ZShjYXBbM10pKVxuICAgICAgOiBzZWxlY3RvcnNbZGVjb2RlaWQoY2FwWzJdKV07XG4gIH1cblxuICAvLyBhdHRyIG5hbWVcbiAgLy8gYXR0ciBvcFxuICAvLyBhdHRyIHZhbHVlXG4gIGlmIChjYXBbNF0pIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzLmF0dHIoZGVjb2RlaWQoY2FwWzRdKSwgY2FwWzVdIHx8ICctJywgdW5xdW90ZShjYXBbNl0pLCBmYWxzZSk7XG4gIH1cblxuICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1Vua25vd24gU2VsZWN0b3IuJyk7XG59O1xuXG52YXIgbWFrZVNpbXBsZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgdmFyIGwgPSBmdW5jLmxlbmd0aFxuICAgICwgaTtcblxuICAvLyBQb3RlbnRpYWxseSBtYWtlIHN1cmVcbiAgLy8gYGVsYCBpcyB0cnV0aHkuXG4gIGlmIChsIDwgMikgcmV0dXJuIGZ1bmNbMF07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICghZnVuY1tpXShlbCkpIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuXG52YXIgbWFrZVRlc3QgPSBmdW5jdGlvbihmdW5jKSB7XG4gIGlmIChmdW5jLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiAhIWZ1bmNbMF0oZWwpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgdmFyIGkgPSBmdW5jLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoIShlbCA9IGZ1bmNbaV0oZWwpKSkgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn07XG5cbnZhciBtYWtlU3ViamVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGFyZ2V0O1xuXG4gIGZ1bmN0aW9uIHN1YmplY3QoZWwpIHtcbiAgICB2YXIgbm9kZSA9IGVsLm93bmVyRG9jdW1lbnRcbiAgICAgICwgc2NvcGUgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHN1YmplY3QubG5hbWUpXG4gICAgICAsIGkgPSBzY29wZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoc3ViamVjdC50ZXN0KHNjb3BlW2ldKSAmJiB0YXJnZXQgPT09IGVsKSB7XG4gICAgICAgIHRhcmdldCA9IG51bGw7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRhcmdldCA9IG51bGw7XG4gIH1cblxuICBzdWJqZWN0LnNpbXBsZSA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgdGFyZ2V0ID0gZWw7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIHN1YmplY3Q7XG59O1xuXG52YXIgY29tcGlsZUdyb3VwID0gZnVuY3Rpb24oc2VsKSB7XG4gIHZhciB0ZXN0ID0gY29tcGlsZShzZWwpXG4gICAgLCB0ZXN0cyA9IFsgdGVzdCBdO1xuXG4gIHdoaWxlICh0ZXN0LnNlbCkge1xuICAgIHRlc3QgPSBjb21waWxlKHRlc3Quc2VsKTtcbiAgICB0ZXN0cy5wdXNoKHRlc3QpO1xuICB9XG5cbiAgaWYgKHRlc3RzLmxlbmd0aCA8IDIpIHJldHVybiB0ZXN0O1xuXG4gIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgIHZhciBsID0gdGVzdHMubGVuZ3RoXG4gICAgICAsIGkgPSAwO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXN0c1tpXShlbCkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogU2VsZWN0aW9uXG4gKi9cblxudmFyIGZpbmQgPSBmdW5jdGlvbihzZWwsIG5vZGUpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXVxuICAgICwgdGVzdCA9IGNvbXBpbGUoc2VsKVxuICAgICwgc2NvcGUgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRlc3QucW5hbWUpXG4gICAgLCBpID0gMFxuICAgICwgZWw7XG5cbiAgLypqc2hpbnQgLVcwODQgKi9cbiAgd2hpbGUgKGVsID0gc2NvcGVbaSsrXSkge1xuICAgIGlmICh0ZXN0KGVsKSkgcmVzdWx0cy5wdXNoKGVsKTtcbiAgfVxuXG4gIGlmICh0ZXN0LnNlbCkge1xuICAgIHdoaWxlICh0ZXN0LnNlbCkge1xuICAgICAgdGVzdCA9IGNvbXBpbGUodGVzdC5zZWwpO1xuICAgICAgc2NvcGUgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRlc3QucW5hbWUpO1xuICAgICAgaSA9IDA7XG4gICAgICAvKmpzaGludCAtVzA4NCAqL1xuICAgICAgd2hpbGUgKGVsID0gc2NvcGVbaSsrXSkge1xuICAgICAgICBpZiAodGVzdChlbCkgJiYgaW5kZXhPZi5jYWxsKHJlc3VsdHMsIGVsKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdHMuc29ydChvcmRlcik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogRXhwb3NlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZnVuY3Rpb24oc2VsLCBjb250ZXh0KSB7XG4gIC8qIHdoZW4gY29udGV4dCBpc24ndCBhIERvY3VtZW50RnJhZ21lbnQgYW5kIHRoZSBzZWxlY3RvciBpcyBzaW1wbGU6ICovXG4gIHZhciBpZCwgcjtcbiAgaWYgKGNvbnRleHQubm9kZVR5cGUgIT09IDExICYmIHNlbC5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgaWYgKHNlbFswXSA9PT0gJyMnICYmIGNvbnRleHQucm9vdGVkICYmIC9eI1tBLVpfXVstQS1aMC05X10qJC9pLnRlc3Qoc2VsKSkge1xuICAgICAgaWYgKGNvbnRleHQuZG9jLl9oYXNNdWx0aXBsZUVsZW1lbnRzV2l0aElkKSB7XG4gICAgICAgIGlkID0gc2VsLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKCFjb250ZXh0LmRvYy5faGFzTXVsdGlwbGVFbGVtZW50c1dpdGhJZChpZCkpIHtcbiAgICAgICAgICByID0gY29udGV4dC5kb2MuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICAgIHJldHVybiByID8gW3JdIDogW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlbFswXSA9PT0gJy4nICYmIC9eXFwuXFx3KyQvLnRlc3Qoc2VsKSkge1xuICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShzZWwuc3Vic3RyaW5nKDEpKTtcbiAgICB9XG4gICAgaWYgKC9eXFx3KyQvLnRlc3Qoc2VsKSkge1xuICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsKTtcbiAgICB9XG4gIH1cbiAgLyogZG8gdGhpbmdzIHRoZSBoYXJkL3Nsb3cgd2F5ICovXG4gIHJldHVybiBmaW5kKHNlbCwgY29udGV4dCk7XG59O1xuXG5leHBvcnRzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcbmV4cG9ydHMub3BlcmF0b3JzID0gb3BlcmF0b3JzO1xuZXhwb3J0cy5jb21iaW5hdG9ycyA9IGNvbWJpbmF0b3JzO1xuXG5leHBvcnRzLm1hdGNoZXMgPSBmdW5jdGlvbihlbCwgc2VsKSB7XG4gIHZhciB0ZXN0ID0geyBzZWw6IHNlbCB9O1xuICBkbyB7XG4gICAgdGVzdCA9IGNvbXBpbGUodGVzdC5zZWwpO1xuICAgIGlmICh0ZXN0KGVsKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICB9IHdoaWxlICh0ZXN0LnNlbCk7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9zZWxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBncmFtbWFyIGlzIGZyb20gdGhlIFhNTCBhbmQgWE1MIE5hbWVzcGFjZSBzcGVjcy4gSXQgc3BlY2lmaWVzIHdoZXRoZXJcbi8vIGEgc3RyaW5nIChzdWNoIGFzIGFuIGVsZW1lbnQgb3IgYXR0cmlidXRlIG5hbWUpIGlzIGEgdmFsaWQgTmFtZSBvciBRTmFtZS5cbi8vXG4vLyBOYW1lICAgICAgICAgICA6Oj0gTmFtZVN0YXJ0Q2hhciAoTmFtZUNoYXIpKlxuLy8gTmFtZVN0YXJ0Q2hhciAgOjo9IFwiOlwiIHwgW0EtWl0gfCBcIl9cIiB8IFthLXpdIHxcbi8vICAgICAgICAgICAgICAgICAgICBbI3hDMC0jeEQ2XSB8IFsjeEQ4LSN4RjZdIHwgWyN4RjgtI3gyRkZdIHxcbi8vICAgICAgICAgICAgICAgICAgICBbI3gzNzAtI3gzN0RdIHwgWyN4MzdGLSN4MUZGRl0gfFxuLy8gICAgICAgICAgICAgICAgICAgIFsjeDIwMEMtI3gyMDBEXSB8IFsjeDIwNzAtI3gyMThGXSB8XG4vLyAgICAgICAgICAgICAgICAgICAgWyN4MkMwMC0jeDJGRUZdIHwgWyN4MzAwMS0jeEQ3RkZdIHxcbi8vICAgICAgICAgICAgICAgICAgICBbI3hGOTAwLSN4RkRDRl0gfCBbI3hGREYwLSN4RkZGRF0gfFxuLy8gICAgICAgICAgICAgICAgICAgIFsjeDEwMDAwLSN4RUZGRkZdXG4vL1xuLy8gTmFtZUNoYXIgICAgICAgOjo9IE5hbWVTdGFydENoYXIgfCBcIi1cIiB8IFwiLlwiIHwgWzAtOV0gfFxuLy8gICAgICAgICAgICAgICAgICAgICN4QjcgfCBbI3gwMzAwLSN4MDM2Rl0gfCBbI3gyMDNGLSN4MjA0MF1cbi8vXG4vLyBRTmFtZSAgICAgICAgICA6Oj0gUHJlZml4ZWROYW1lfCBVbnByZWZpeGVkTmFtZVxuLy8gUHJlZml4ZWROYW1lICAgOjo9IFByZWZpeCAnOicgTG9jYWxQYXJ0XG4vLyBVbnByZWZpeGVkTmFtZSA6Oj0gTG9jYWxQYXJ0XG4vLyBQcmVmaXggICAgICAgICA6Oj0gTkNOYW1lXG4vLyBMb2NhbFBhcnQgICAgICA6Oj0gTkNOYW1lXG4vLyBOQ05hbWUgICAgICAgICA6Oj0gTmFtZSAtIChDaGFyKiAnOicgQ2hhciopXG4vLyAgICAgICAgICAgICAgICAgICAgIyBBbiBYTUwgTmFtZSwgbWludXMgdGhlIFwiOlwiXG4vL1xuXG5leHBvcnRzLmlzVmFsaWROYW1lID0gaXNWYWxpZE5hbWU7XG5leHBvcnRzLmlzVmFsaWRRTmFtZSA9IGlzVmFsaWRRTmFtZTtcblxuLy8gTW9zdCBuYW1lcyB3aWxsIGJlIEFTQ0lJIG9ubHkuIFRyeSBtYXRjaGluZyBhZ2FpbnN0IHNpbXBsZSByZWdleHBzIGZpcnN0XG52YXIgc2ltcGxlbmFtZSA9IC9eW186QS1aYS16XVstLjpcXHddKyQvO1xudmFyIHNpbXBsZXFuYW1lID0gL14oW19BLVphLXpdWy0uXFx3XSt8W19BLVphLXpdWy0uXFx3XSs6W19BLVphLXpdWy0uXFx3XSspJC87XG5cbi8vIElmIHRoZSByZWd1bGFyIGV4cHJlc3Npb25zIGFib3ZlIGZhaWwsIHRyeSBtb3JlIGNvbXBsZXggb25lcyB0aGF0IHdvcmtcbi8vIGZvciBhbnkgaWRlbnRpZmllcnMgdXNpbmcgY29kZXBvaW50cyBmcm9tIHRoZSBVbmljb2RlIEJNUFxudmFyIG5jbmFtZXN0YXJ0Y2hhcnMgPSBcIl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyZmZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcIjtcbnZhciBuY25hbWVjaGFycyA9IFwiLS5fQS1aYS16MC05XFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJmZlxcdTAzMDAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcIjtcblxudmFyIG5jbmFtZSA9IFwiW1wiICsgbmNuYW1lc3RhcnRjaGFycyArIFwiXVtcIiArIG5jbmFtZWNoYXJzICsgXCJdKlwiO1xudmFyIG5hbWVzdGFydGNoYXJzID0gbmNuYW1lc3RhcnRjaGFycyArIFwiOlwiO1xudmFyIG5hbWVjaGFycyA9IG5jbmFtZWNoYXJzICsgXCI6XCI7XG52YXIgbmFtZSA9IG5ldyBSZWdFeHAoXCJeW1wiICsgbmFtZXN0YXJ0Y2hhcnMgKyBcIl1cIiArIFwiW1wiICsgbmFtZWNoYXJzICsgXCJdKiRcIik7XG52YXIgcW5hbWUgPSBuZXcgUmVnRXhwKFwiXihcIiArIG5jbmFtZSArIFwifFwiICsgbmNuYW1lICsgXCI6XCIgKyBuY25hbWUgKyBcIikkXCIpO1xuXG4vLyBYTUwgc2F5cyB0aGF0IHRoZXNlIGNoYXJhY3RlcnMgYXJlIGFsc28gbGVnYWw6XG4vLyBbI3gxMDAwMC0jeEVGRkZGXS4gIFNvIGlmIHRoZSBwYXR0ZXJucyBhYm92ZSBmYWlsLCBhbmQgdGhlXG4vLyB0YXJnZXQgc3RyaW5nIGluY2x1ZGVzIHN1cnJvZ2F0ZXMsIHRoZW4gdHJ5IHRoZSBmb2xsb3dpbmdcbi8vIHBhdHRlcm5zIHRoYXQgYWxsb3cgc3Vycm9nYXRlcyBhbmQgdGhlbiBydW4gYW4gZXh0cmEgdmFsaWRhdGlvblxuLy8gc3RlcCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgc3Vycm9nYXRlcyBhcmUgaW4gdmFsaWQgcGFpcnMgYW5kIGluXG4vLyB0aGUgcmlnaHQgcmFuZ2UuICBOb3RlIHRoYXQgc2luY2UgdGhlIGNoYXJhY3RlcnMgXFx1ZjAwMDAgdG8gXFx1MWYwMDAwXG4vLyBhcmUgbm90IGFsbG93ZWQsIGl0IG1lYW5zIHRoYXQgdGhlIGhpZ2ggc3Vycm9nYXRlIGNhbiBvbmx5IGdvIHVwIHRvXG4vLyBcXHVEQjdmIGluc3RlYWQgb2YgXFx1REJGRi5cbnZhciBoYXNzdXJyb2dhdGVzID0gL1tcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZdLztcbnZhciBzdXJyb2dhdGVjaGFycyA9IC9bXFx1RDgwMC1cXHVEQjdGXFx1REMwMC1cXHVERkZGXS9nO1xudmFyIHN1cnJvZ2F0ZXBhaXJzID0gL1tcXHVEODAwLVxcdURCN0ZdW1xcdURDMDAtXFx1REZGRl0vZztcblxuLy8gTW9kaWZ5IHRoZSB2YXJpYWJsZXMgYWJvdmUgdG8gYWxsb3cgc3Vycm9nYXRlc1xubmNuYW1lc3RhcnRjaGFycyArPSBcIlxcdUQ4MDAtXFx1REI3RlxcdURDMDAtXFx1REZGRlwiO1xubmNuYW1lY2hhcnMgKz0gXCJcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZcIjtcbm5jbmFtZSA9IFwiW1wiICsgbmNuYW1lc3RhcnRjaGFycyArIFwiXVtcIiArIG5jbmFtZWNoYXJzICsgXCJdKlwiO1xubmFtZXN0YXJ0Y2hhcnMgPSBuY25hbWVzdGFydGNoYXJzICsgXCI6XCI7XG5uYW1lY2hhcnMgPSBuY25hbWVjaGFycyArIFwiOlwiO1xuXG4vLyBCdWlsZCBhbm90aGVyIHNldCBvZiByZWdleHBzIHRoYXQgaW5jbHVkZSBzdXJyb2dhdGVzXG52YXIgc3Vycm9nYXRlbmFtZSA9IG5ldyBSZWdFeHAoXCJeW1wiICsgbmFtZXN0YXJ0Y2hhcnMgKyBcIl1cIiArIFwiW1wiICsgbmFtZWNoYXJzICsgXCJdKiRcIik7XG52YXIgc3Vycm9nYXRlcW5hbWUgPSBuZXcgUmVnRXhwKFwiXihcIiArIG5jbmFtZSArIFwifFwiICsgbmNuYW1lICsgXCI6XCIgKyBuY25hbWUgKyBcIikkXCIpO1xuXG5mdW5jdGlvbiBpc1ZhbGlkTmFtZShzKSB7XG4gIGlmIChzaW1wbGVuYW1lLnRlc3QocykpIHJldHVybiB0cnVlOyAvLyBQbGFpbiBBU0NJSVxuICBpZiAobmFtZS50ZXN0KHMpKSByZXR1cm4gdHJ1ZTsgLy8gVW5pY29kZSBCTVBcblxuICAvLyBNYXliZSB0aGUgdGVzdHMgYWJvdmUgZmFpbGVkIGJlY2F1c2UgcyBpbmNsdWRlcyBzdXJyb2dhdGUgcGFpcnNcbiAgLy8gTW9zdCBsaWtlbHksIHRob3VnaCwgdGhleSBmYWlsZWQgZm9yIHNvbWUgbW9yZSBiYXNpYyBzeW50YXggcHJvYmxlbVxuICBpZiAoIWhhc3N1cnJvZ2F0ZXMudGVzdChzKSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElzIHRoZSBzdHJpbmcgYSB2YWxpZCBuYW1lIGlmIHdlIGFsbG93IHN1cnJvZ2F0ZXM/XG4gIGlmICghc3Vycm9nYXRlbmFtZS50ZXN0KHMpKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gRmluYWxseSwgYXJlIHRoZSBzdXJyb2dhdGVzIGFsbCBjb3JyZWN0bHkgcGFpcmVkIHVwP1xuICB2YXIgY2hhcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZWNoYXJzKSwgcGFpcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZXBhaXJzKTtcbiAgcmV0dXJuIHBhaXJzICE9PSBudWxsICYmIDIqcGFpcnMubGVuZ3RoID09PSBjaGFycy5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRRTmFtZShzKSB7XG4gIGlmIChzaW1wbGVxbmFtZS50ZXN0KHMpKSByZXR1cm4gdHJ1ZTsgLy8gUGxhaW4gQVNDSUlcbiAgaWYgKHFuYW1lLnRlc3QocykpIHJldHVybiB0cnVlOyAvLyBVbmljb2RlIEJNUFxuXG4gIGlmICghaGFzc3Vycm9nYXRlcy50ZXN0KHMpKSByZXR1cm4gZmFsc2U7XG4gIGlmICghc3Vycm9nYXRlcW5hbWUudGVzdChzKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZWNoYXJzKSwgcGFpcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZXBhaXJzKTtcbiAgcmV0dXJuIHBhaXJzICE9PSBudWxsICYmIDIqcGFpcnMubGVuZ3RoID09PSBjaGFycy5sZW5ndGg7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi94bWxuYW1lcy5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHY1LjEuM1xuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cHM6Ly9hbmd1bGFyLmlvL1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnQGFuZ3VsYXIvYW5pbWF0aW9ucycpKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSgnQGFuZ3VsYXIvYW5pbWF0aW9ucy9icm93c2VyJywgWydleHBvcnRzJywgJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLm5nID0gZ2xvYmFsLm5nIHx8IHt9LCBnbG9iYWwubmcuYW5pbWF0aW9ucyA9IGdsb2JhbC5uZy5hbmltYXRpb25zIHx8IHt9LCBnbG9iYWwubmcuYW5pbWF0aW9ucy5icm93c2VyID0ge30pLGdsb2JhbC5uZy5hbmltYXRpb25zKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cyxfYW5ndWxhcl9hbmltYXRpb25zKSB7ICd1c2Ugc3RyaWN0JztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XG5cbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhciB2NS4xLjNcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30gcGxheWVyc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemVHcm91cFBsYXllcihwbGF5ZXJzKSB7XG4gICAgc3dpdGNoIChwbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9hbmd1bGFyX2FuaW1hdGlvbnMuTm9vcEFuaW1hdGlvblBsYXllcigpO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gcGxheWVyc1swXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgX2FuZ3VsYXJfYW5pbWF0aW9ucy7JtUFuaW1hdGlvbkdyb3VwUGxheWVyKHBsYXllcnMpO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBkcml2ZXJcbiAqIEBwYXJhbSB7P30gbm9ybWFsaXplclxuICogQHBhcmFtIHs/fSBlbGVtZW50XG4gKiBAcGFyYW0gez99IGtleWZyYW1lc1xuICogQHBhcmFtIHs/PX0gcHJlU3R5bGVzXG4gKiBAcGFyYW0gez89fSBwb3N0U3R5bGVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVLZXlmcmFtZXMoZHJpdmVyLCBub3JtYWxpemVyLCBlbGVtZW50LCBrZXlmcmFtZXMsIHByZVN0eWxlcywgcG9zdFN0eWxlcykge1xuICAgIGlmIChwcmVTdHlsZXMgPT09IHZvaWQgMCkgeyBwcmVTdHlsZXMgPSB7fTsgfVxuICAgIGlmIChwb3N0U3R5bGVzID09PSB2b2lkIDApIHsgcG9zdFN0eWxlcyA9IHt9OyB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzID0gW107XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9ybWFsaXplZEtleWZyYW1lcyA9IFtdO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZXZpb3VzT2Zmc2V0ID0gLTE7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldmlvdXNLZXlmcmFtZSA9IG51bGw7XG4gICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGtmKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9mZnNldCA9IC8qKiBAdHlwZSB7P30gKi8gKGtmWydvZmZzZXQnXSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlzU2FtZU9mZnNldCA9IG9mZnNldCA9PSBwcmV2aW91c09mZnNldDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9ybWFsaXplZEtleWZyYW1lID0gKGlzU2FtZU9mZnNldCAmJiBwcmV2aW91c0tleWZyYW1lKSB8fCB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoa2YpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vcm1hbGl6ZWRQcm9wID0gcHJvcDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vcm1hbGl6ZWRWYWx1ZSA9IGtmW3Byb3BdO1xuICAgICAgICAgICAgaWYgKHByb3AgIT09ICdvZmZzZXQnKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVyLm5vcm1hbGl6ZVByb3BlcnR5TmFtZShub3JtYWxpemVkUHJvcCwgZXJyb3JzKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vcm1hbGl6ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIF9hbmd1bGFyX2FuaW1hdGlvbnMuybVQUkVfU1RZTEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkVmFsdWUgPSBwcmVTdHlsZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBfYW5ndWxhcl9hbmltYXRpb25zLkFVVE9fU1RZTEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkVmFsdWUgPSBwb3N0U3R5bGVzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkVmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZXIubm9ybWFsaXplU3R5bGVWYWx1ZShwcm9wLCBub3JtYWxpemVkUHJvcCwgbm9ybWFsaXplZFZhbHVlLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsaXplZEtleWZyYW1lW25vcm1hbGl6ZWRQcm9wXSA9IG5vcm1hbGl6ZWRWYWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNTYW1lT2Zmc2V0KSB7XG4gICAgICAgICAgICBub3JtYWxpemVkS2V5ZnJhbWVzLnB1c2gobm9ybWFsaXplZEtleWZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c0tleWZyYW1lID0gbm9ybWFsaXplZEtleWZyYW1lO1xuICAgICAgICBwcmV2aW91c09mZnNldCA9IG9mZnNldDtcbiAgICB9KTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBMSU5FX1NUQVJUID0gJ1xcbiAtICc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBhbmltYXRlIGR1ZSB0byB0aGUgZm9sbG93aW5nIGVycm9yczpcIiArIExJTkVfU1RBUlQgKyBlcnJvcnMuam9pbihMSU5FX1NUQVJUKSk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkS2V5ZnJhbWVzO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHBsYXllclxuICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAqIEBwYXJhbSB7P30gZXZlbnRcbiAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbk9uUGxheWVyKHBsYXllciwgZXZlbnROYW1lLCBldmVudCwgY2FsbGJhY2spIHtcbiAgICBzd2l0Y2ggKGV2ZW50TmFtZSkge1xuICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICBwbGF5ZXIub25TdGFydChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhldmVudCAmJiBjb3B5QW5pbWF0aW9uRXZlbnQoZXZlbnQsICdzdGFydCcsIHBsYXllci50b3RhbFRpbWUpKTsgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG9uZSc6XG4gICAgICAgICAgICBwbGF5ZXIub25Eb25lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKGV2ZW50ICYmIGNvcHlBbmltYXRpb25FdmVudChldmVudCwgJ2RvbmUnLCBwbGF5ZXIudG90YWxUaW1lKSk7IH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Rlc3Ryb3knOlxuICAgICAgICAgICAgcGxheWVyLm9uRGVzdHJveShmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhldmVudCAmJiBjb3B5QW5pbWF0aW9uRXZlbnQoZXZlbnQsICdkZXN0cm95JywgcGxheWVyLnRvdGFsVGltZSkpOyB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlXG4gKiBAcGFyYW0gez89fSBwaGFzZU5hbWVcbiAqIEBwYXJhbSB7Pz19IHRvdGFsVGltZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY29weUFuaW1hdGlvbkV2ZW50KGUsIHBoYXNlTmFtZSwgdG90YWxUaW1lKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXZlbnQgPSBtYWtlQW5pbWF0aW9uRXZlbnQoZS5lbGVtZW50LCBlLnRyaWdnZXJOYW1lLCBlLmZyb21TdGF0ZSwgZS50b1N0YXRlLCBwaGFzZU5hbWUgfHwgZS5waGFzZU5hbWUsIHRvdGFsVGltZSA9PSB1bmRlZmluZWQgPyBlLnRvdGFsVGltZSA6IHRvdGFsVGltZSk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGF0YSA9ICgvKiogQHR5cGUgez99ICovIChlKSlbJ19kYXRhJ107XG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAoZXZlbnQpKVsnX2RhdGEnXSA9IGRhdGE7XG4gICAgfVxuICAgIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50XG4gKiBAcGFyYW0gez99IHRyaWdnZXJOYW1lXG4gKiBAcGFyYW0gez99IGZyb21TdGF0ZVxuICogQHBhcmFtIHs/fSB0b1N0YXRlXG4gKiBAcGFyYW0gez89fSBwaGFzZU5hbWVcbiAqIEBwYXJhbSB7Pz19IHRvdGFsVGltZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbWFrZUFuaW1hdGlvbkV2ZW50KGVsZW1lbnQsIHRyaWdnZXJOYW1lLCBmcm9tU3RhdGUsIHRvU3RhdGUsIHBoYXNlTmFtZSwgdG90YWxUaW1lKSB7XG4gICAgaWYgKHBoYXNlTmFtZSA9PT0gdm9pZCAwKSB7IHBoYXNlTmFtZSA9ICcnOyB9XG4gICAgaWYgKHRvdGFsVGltZSA9PT0gdm9pZCAwKSB7IHRvdGFsVGltZSA9IDA7IH1cbiAgICByZXR1cm4geyBlbGVtZW50OiBlbGVtZW50LCB0cmlnZ2VyTmFtZTogdHJpZ2dlck5hbWUsIGZyb21TdGF0ZTogZnJvbVN0YXRlLCB0b1N0YXRlOiB0b1N0YXRlLCBwaGFzZU5hbWU6IHBoYXNlTmFtZSwgdG90YWxUaW1lOiB0b3RhbFRpbWUgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBtYXBcbiAqIEBwYXJhbSB7P30ga2V5XG4gKiBAcGFyYW0gez99IGRlZmF1bHRWYWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0T3JTZXRBc0luTWFwKG1hcCwga2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZTtcbiAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgIHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUgPSBkZWZhdWx0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG1hcFtrZXldO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hcFtrZXldID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBjb21tYW5kXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwYXJzZVRpbWVsaW5lQ29tbWFuZChjb21tYW5kKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VwYXJhdG9yUG9zID0gY29tbWFuZC5pbmRleE9mKCc6Jyk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaWQgPSBjb21tYW5kLnN1YnN0cmluZygxLCBzZXBhcmF0b3JQb3MpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGFjdGlvbiA9IGNvbW1hbmQuc3Vic3RyKHNlcGFyYXRvclBvcyArIDEpO1xuICAgIHJldHVybiBbaWQsIGFjdGlvbl07XG59XG52YXIgX2NvbnRhaW5zID0gZnVuY3Rpb24gKGVsbTEsIGVsbTIpIHsgcmV0dXJuIGZhbHNlOyB9O1xudmFyIF9tYXRjaGVzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBfcXVlcnkgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IsIG11bHRpKSB7XG4gICAgcmV0dXJuIFtdO1xufTtcbmlmICh0eXBlb2YgRWxlbWVudCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIHRoaXMgaXMgd2VsbCBzdXBwb3J0ZWQgaW4gYWxsIGJyb3dzZXJzXG4gICAgX2NvbnRhaW5zID0gZnVuY3Rpb24gKGVsbTEsIGVsbTIpIHsgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKGVsbTEuY29udGFpbnMoZWxtMikpOyB9O1xuICAgIGlmIChFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gICAgICAgIF9tYXRjaGVzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7IHJldHVybiBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpOyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdG8gPSAvKiogQHR5cGUgez99ICovIChFbGVtZW50LnByb3RvdHlwZSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZuXzEgPSBwcm90by5tYXRjaGVzU2VsZWN0b3IgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICBwcm90by5vTWF0Y2hlc1NlbGVjdG9yIHx8IHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcbiAgICAgICAgaWYgKGZuXzEpIHtcbiAgICAgICAgICAgIF9tYXRjaGVzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7IHJldHVybiBmbl8xLmFwcGx5KGVsZW1lbnQsIFtzZWxlY3Rvcl0pOyB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9xdWVyeSA9IGZ1bmN0aW9uIChlbGVtZW50LCBzZWxlY3RvciwgbXVsdGkpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzdWx0cyA9IFtdO1xuICAgICAgICBpZiAobXVsdGkpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsbSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBwcm9wXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjb250YWluc1ZlbmRvclByZWZpeChwcm9wKSB7XG4gICAgLy8gV2Via2l0IGlzIHRoZSBvbmx5IHJlYWwgcG9wdWxhciB2ZW5kb3IgcHJlZml4IG5vd2FkYXlzXG4gICAgLy8gY2M6IGh0dHA6Ly9zaG91bGRpcHJlZml4LmNvbS9cbiAgICByZXR1cm4gcHJvcC5zdWJzdHJpbmcoMSwgNikgPT0gJ2Via2l0JzsgLy8gd2Via2l0IG9yIFdlYmtpdFxufVxudmFyIF9DQUNIRURfQk9EWSA9IG51bGw7XG52YXIgX0lTX1dFQktJVCA9IGZhbHNlO1xuLyoqXG4gKiBAcGFyYW0gez99IHByb3BcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGVQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKCFfQ0FDSEVEX0JPRFkpIHtcbiAgICAgICAgX0NBQ0hFRF9CT0RZID0gZ2V0Qm9keU5vZGUoKSB8fCB7fTtcbiAgICAgICAgX0lTX1dFQktJVCA9IC8qKiBAdHlwZSB7P30gKi8gKChfQ0FDSEVEX0JPRFkpKS5zdHlsZSA/ICgnV2Via2l0QXBwZWFyYW5jZScgaW4gLyoqIEB0eXBlIHs/fSAqLyAoKF9DQUNIRURfQk9EWSkpLnN0eWxlKSA6IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXN1bHQgPSB0cnVlO1xuICAgIGlmICgvKiogQHR5cGUgez99ICovICgoX0NBQ0hFRF9CT0RZKSkuc3R5bGUgJiYgIWNvbnRhaW5zVmVuZG9yUHJlZml4KHByb3ApKSB7XG4gICAgICAgIHJlc3VsdCA9IHByb3AgaW4gLyoqIEB0eXBlIHs/fSAqLyAoKF9DQUNIRURfQk9EWSkpLnN0eWxlO1xuICAgICAgICBpZiAoIXJlc3VsdCAmJiBfSVNfV0VCS0lUKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjYW1lbFByb3AgPSAnV2Via2l0JyArIHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnN1YnN0cigxKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbWVsUHJvcCBpbiAvKiogQHR5cGUgez99ICovICgoX0NBQ0hFRF9CT0RZKSkuc3R5bGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0Qm9keU5vZGUoKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG52YXIgbWF0Y2hlc0VsZW1lbnQgPSBfbWF0Y2hlcztcbnZhciBjb250YWluc0VsZW1lbnQgPSBfY29udGFpbnM7XG52YXIgaW52b2tlUXVlcnkgPSBfcXVlcnk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBOb29wQW5pbWF0aW9uRHJpdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BBbmltYXRpb25Ecml2ZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTm9vcEFuaW1hdGlvbkRyaXZlci5wcm90b3R5cGUudmFsaWRhdGVTdHlsZVByb3BlcnR5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm9wXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gdmFsaWRhdGVTdHlsZVByb3BlcnR5KHByb3ApOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BBbmltYXRpb25Ecml2ZXIucHJvdG90eXBlLm1hdGNoZXNFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzRWxlbWVudChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsbTFcbiAgICAgKiBAcGFyYW0gez99IGVsbTJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BBbmltYXRpb25Ecml2ZXIucHJvdG90eXBlLmNvbnRhaW5zRWxlbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxtMVxuICAgICAqIEBwYXJhbSB7P30gZWxtMlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsbTEsIGVsbTIpIHsgcmV0dXJuIGNvbnRhaW5zRWxlbWVudChlbG0xLCBlbG0yKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBtdWx0aVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTm9vcEFuaW1hdGlvbkRyaXZlci5wcm90b3R5cGUucXVlcnkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBtdWx0aVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yLCBtdWx0aSkge1xuICAgICAgICByZXR1cm4gaW52b2tlUXVlcnkoZWxlbWVudCwgc2VsZWN0b3IsIG11bHRpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gcHJvcFxuICAgICAqIEBwYXJhbSB7Pz19IGRlZmF1bHRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTm9vcEFuaW1hdGlvbkRyaXZlci5wcm90b3R5cGUuY29tcHV0ZVN0eWxlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwcm9wXG4gICAgICogQHBhcmFtIHs/PX0gZGVmYXVsdFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgcHJvcCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWUgfHwgJyc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGtleWZyYW1lc1xuICAgICAqIEBwYXJhbSB7P30gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0gez99IGRlbGF5XG4gICAgICogQHBhcmFtIHs/fSBlYXNpbmdcbiAgICAgKiBAcGFyYW0gez89fSBwcmV2aW91c1BsYXllcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BBbmltYXRpb25Ecml2ZXIucHJvdG90eXBlLmFuaW1hdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGtleWZyYW1lc1xuICAgICAqIEBwYXJhbSB7P30gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0gez99IGRlbGF5XG4gICAgICogQHBhcmFtIHs/fSBlYXNpbmdcbiAgICAgKiBAcGFyYW0gez89fSBwcmV2aW91c1BsYXllcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBrZXlmcmFtZXMsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBwcmV2aW91c1BsYXllcnMpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzUGxheWVycyA9PT0gdm9pZCAwKSB7IHByZXZpb3VzUGxheWVycyA9IFtdOyB9XG4gICAgICAgIHJldHVybiBuZXcgX2FuZ3VsYXJfYW5pbWF0aW9ucy5Ob29wQW5pbWF0aW9uUGxheWVyKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTm9vcEFuaW1hdGlvbkRyaXZlcjtcbn0oKSk7XG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQGFic3RyYWN0XG4gKi9cbnZhciBBbmltYXRpb25Ecml2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRHJpdmVyKCkge1xuICAgIH1cbiAgICBBbmltYXRpb25Ecml2ZXIuTk9PUCA9IG5ldyBOb29wQW5pbWF0aW9uRHJpdmVyKCk7XG4gICAgcmV0dXJuIEFuaW1hdGlvbkRyaXZlcjtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBPTkVfU0VDT05EID0gMTAwMDtcbnZhciBTVUJTVElUVVRJT05fRVhQUl9TVEFSVCA9ICd7eyc7XG52YXIgU1VCU1RJVFVUSU9OX0VYUFJfRU5EID0gJ319JztcbnZhciBFTlRFUl9DTEFTU05BTUUgPSAnbmctZW50ZXInO1xudmFyIExFQVZFX0NMQVNTTkFNRSA9ICduZy1sZWF2ZSc7XG5cblxudmFyIE5HX1RSSUdHRVJfQ0xBU1NOQU1FID0gJ25nLXRyaWdnZXInO1xudmFyIE5HX1RSSUdHRVJfU0VMRUNUT1IgPSAnLm5nLXRyaWdnZXInO1xudmFyIE5HX0FOSU1BVElOR19DTEFTU05BTUUgPSAnbmctYW5pbWF0aW5nJztcbnZhciBOR19BTklNQVRJTkdfU0VMRUNUT1IgPSAnLm5nLWFuaW1hdGluZyc7XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUaW1pbmdWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXRjaGVzID0gKC8qKiBAdHlwZSB7P30gKi8gKHZhbHVlKSkubWF0Y2goL14oLT9bXFwuXFxkXSspKG0/cykvKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPCAyKVxuICAgICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gX2NvbnZlcnRUaW1lVmFsdWVUb01TKHBhcnNlRmxvYXQobWF0Y2hlc1sxXSksIG1hdGNoZXNbMl0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcGFyYW0gez99IHVuaXRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9jb252ZXJ0VGltZVZhbHVlVG9NUyh2YWx1ZSwgdW5pdCkge1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIE9ORV9TRUNPTkQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBtcyBvciBzb21ldGhpbmcgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB0aW1pbmdzXG4gKiBAcGFyYW0gez99IGVycm9yc1xuICogQHBhcmFtIHs/PX0gYWxsb3dOZWdhdGl2ZVZhbHVlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRpbWluZyh0aW1pbmdzLCBlcnJvcnMsIGFsbG93TmVnYXRpdmVWYWx1ZXMpIHtcbiAgICByZXR1cm4gdGltaW5ncy5oYXNPd25Qcm9wZXJ0eSgnZHVyYXRpb24nKSA/IC8qKiBAdHlwZSB7P30gKi8gKHRpbWluZ3MpIDpcbiAgICAgICAgcGFyc2VUaW1lRXhwcmVzc2lvbigvKiogQHR5cGUgez99ICovICh0aW1pbmdzKSwgZXJyb3JzLCBhbGxvd05lZ2F0aXZlVmFsdWVzKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBleHBcbiAqIEBwYXJhbSB7P30gZXJyb3JzXG4gKiBAcGFyYW0gez89fSBhbGxvd05lZ2F0aXZlVmFsdWVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwYXJzZVRpbWVFeHByZXNzaW9uKGV4cCwgZXJyb3JzLCBhbGxvd05lZ2F0aXZlVmFsdWVzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVnZXggPSAvXigtP1tcXC5cXGRdKykobT9zKSg/OlxccysoLT9bXFwuXFxkXSspKG0/cykpPyg/OlxccysoWy1hLXpdKyg/OlxcKC4rP1xcKSk/KSk/JC9pO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGR1cmF0aW9uO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlbGF5ID0gMDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlYXNpbmcgPSAnJztcbiAgICBpZiAodHlwZW9mIGV4cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWF0Y2hlcyA9IGV4cC5tYXRjaChyZWdleCk7XG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChcIlRoZSBwcm92aWRlZCB0aW1pbmcgdmFsdWUgXFxcIlwiICsgZXhwICsgXCJcXFwiIGlzIGludmFsaWQuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZHVyYXRpb246IDAsIGRlbGF5OiAwLCBlYXNpbmc6ICcnIH07XG4gICAgICAgIH1cbiAgICAgICAgZHVyYXRpb24gPSBfY29udmVydFRpbWVWYWx1ZVRvTVMocGFyc2VGbG9hdChtYXRjaGVzWzFdKSwgbWF0Y2hlc1syXSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlbGF5TWF0Y2ggPSBtYXRjaGVzWzNdO1xuICAgICAgICBpZiAoZGVsYXlNYXRjaCAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZWxheSA9IF9jb252ZXJ0VGltZVZhbHVlVG9NUyhNYXRoLmZsb29yKHBhcnNlRmxvYXQoZGVsYXlNYXRjaCkpLCBtYXRjaGVzWzRdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlYXNpbmdWYWwgPSBtYXRjaGVzWzVdO1xuICAgICAgICBpZiAoZWFzaW5nVmFsKSB7XG4gICAgICAgICAgICBlYXNpbmcgPSBlYXNpbmdWYWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGR1cmF0aW9uID0gLyoqIEB0eXBlIHs/fSAqLyAoZXhwKTtcbiAgICB9XG4gICAgaWYgKCFhbGxvd05lZ2F0aXZlVmFsdWVzKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbnRhaW5zRXJyb3JzID0gZmFsc2U7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXJ0SW5kZXggPSBlcnJvcnMubGVuZ3RoO1xuICAgICAgICBpZiAoZHVyYXRpb24gPCAwKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChcIkR1cmF0aW9uIHZhbHVlcyBiZWxvdyAwIGFyZSBub3QgYWxsb3dlZCBmb3IgdGhpcyBhbmltYXRpb24gc3RlcC5cIik7XG4gICAgICAgICAgICBjb250YWluc0Vycm9ycyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5IDwgMCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goXCJEZWxheSB2YWx1ZXMgYmVsb3cgMCBhcmUgbm90IGFsbG93ZWQgZm9yIHRoaXMgYW5pbWF0aW9uIHN0ZXAuXCIpO1xuICAgICAgICAgICAgY29udGFpbnNFcnJvcnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluc0Vycm9ycykge1xuICAgICAgICAgICAgZXJyb3JzLnNwbGljZShzdGFydEluZGV4LCAwLCBcIlRoZSBwcm92aWRlZCB0aW1pbmcgdmFsdWUgXFxcIlwiICsgZXhwICsgXCJcXFwiIGlzIGludmFsaWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGR1cmF0aW9uOiBkdXJhdGlvbiwgZGVsYXk6IGRlbGF5LCBlYXNpbmc6IGVhc2luZyB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG9ialxuICogQHBhcmFtIHs/PX0gZGVzdGluYXRpb25cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmoob2JqLCBkZXN0aW5hdGlvbikge1xuICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gdm9pZCAwKSB7IGRlc3RpbmF0aW9uID0ge307IH1cbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgZGVzdGluYXRpb25bcHJvcF0gPSBvYmpbcHJvcF07IH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBzdHlsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlcyhzdHlsZXMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub3JtYWxpemVkU3R5bGVzID0ge307XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVzKSkge1xuICAgICAgICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gY29weVN0eWxlcyhkYXRhLCBmYWxzZSwgbm9ybWFsaXplZFN0eWxlcyk7IH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29weVN0eWxlcyhzdHlsZXMsIGZhbHNlLCBub3JtYWxpemVkU3R5bGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRTdHlsZXM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gc3R5bGVzXG4gKiBAcGFyYW0gez99IHJlYWRQcm90b3R5cGVcbiAqIEBwYXJhbSB7Pz19IGRlc3RpbmF0aW9uXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjb3B5U3R5bGVzKHN0eWxlcywgcmVhZFByb3RvdHlwZSwgZGVzdGluYXRpb24pIHtcbiAgICBpZiAoZGVzdGluYXRpb24gPT09IHZvaWQgMCkgeyBkZXN0aW5hdGlvbiA9IHt9OyB9XG4gICAgaWYgKHJlYWRQcm90b3R5cGUpIHtcbiAgICAgICAgLy8gd2UgbWFrZSB1c2Ugb2YgYSBmb3ItaW4gbG9vcCBzbyB0aGF0IHRoZVxuICAgICAgICAvLyBwcm90b3R5cGljYWxseSBpbmhlcml0ZWQgcHJvcGVydGllcyBhcmVcbiAgICAgICAgLy8gcmV2ZWFsZWQgZnJvbSB0aGUgYmFja0ZpbGwgbWFwXG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcCBpbiBzdHlsZXMpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BdID0gc3R5bGVzW3Byb3BdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb3B5T2JqKHN0eWxlcywgZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdGluYXRpb247XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZWxlbWVudFxuICogQHBhcmFtIHs/fSBzdHlsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgICBpZiAoZWxlbWVudFsnc3R5bGUnXSkge1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNhbWVsUHJvcCA9IGRhc2hDYXNlVG9DYW1lbENhc2UocHJvcCk7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW2NhbWVsUHJvcF0gPSBzdHlsZXNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50XG4gKiBAcGFyYW0gez99IHN0eWxlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZXJhc2VTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gICAgaWYgKGVsZW1lbnRbJ3N0eWxlJ10pIHtcbiAgICAgICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjYW1lbFByb3AgPSBkYXNoQ2FzZVRvQ2FtZWxDYXNlKHByb3ApO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtjYW1lbFByb3BdID0gJyc7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBzdGVwc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplQW5pbWF0aW9uRW50cnkoc3RlcHMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdGVwcykpIHtcbiAgICAgICAgaWYgKHN0ZXBzLmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHN0ZXBzWzBdO1xuICAgICAgICByZXR1cm4gX2FuZ3VsYXJfYW5pbWF0aW9ucy5zZXF1ZW5jZShzdGVwcyk7XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUgez99ICovIChzdGVwcyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICogQHBhcmFtIHs/fSBlcnJvcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGVQYXJhbXModmFsdWUsIG9wdGlvbnMsIGVycm9ycykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IHt9O1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hdGNoZXMgPSBleHRyYWN0U3R5bGVQYXJhbXModmFsdWUpO1xuICAgIGlmIChtYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKHZhck5hbWUpIHtcbiAgICAgICAgICAgIGlmICghcGFyYW1zLmhhc093blByb3BlcnR5KHZhck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goXCJVbmFibGUgdG8gcmVzb2x2ZSB0aGUgbG9jYWwgYW5pbWF0aW9uIHBhcmFtIFwiICsgdmFyTmFtZSArIFwiIGluIHRoZSBnaXZlbiBsaXN0IG9mIHZhbHVlc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxudmFyIFBBUkFNX1JFR0VYID0gbmV3IFJlZ0V4cChTVUJTVElUVVRJT05fRVhQUl9TVEFSVCArIFwiXFxcXHMqKC4rPylcXFxccypcIiArIFNVQlNUSVRVVElPTl9FWFBSX0VORCwgJ2cnKTtcbi8qKlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFN0eWxlUGFyYW1zKHZhbHVlKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1zID0gW107XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWF0Y2ggPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlIChtYXRjaCA9IFBBUkFNX1JFR0VYLmV4ZWModmFsKSkge1xuICAgICAgICAgICAgcGFyYW1zLnB1c2goLyoqIEB0eXBlIHs/fSAqLyAobWF0Y2hbMV0pKTtcbiAgICAgICAgfVxuICAgICAgICBQQVJBTV9SRUdFWC5sYXN0SW5kZXggPSAwO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcGFyYW0gez99IHBhcmFtc1xuICogQHBhcmFtIHs/fSBlcnJvcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRlUGFyYW1zKHZhbHVlLCBwYXJhbXMsIGVycm9ycykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG9yaWdpbmFsID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHIgPSBvcmlnaW5hbC5yZXBsYWNlKFBBUkFNX1JFR0VYLCBmdW5jdGlvbiAoXywgdmFyTmFtZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsb2NhbFZhbCA9IHBhcmFtc1t2YXJOYW1lXTtcbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSB2YWx1ZSB3YXMgbmV2ZXIgb3ZlcmlkZGVuIGJ5IHRoZSBkYXRhIHBhc3NlZCBpbiBieSB0aGUgdXNlclxuICAgICAgICBpZiAoIXBhcmFtcy5oYXNPd25Qcm9wZXJ0eSh2YXJOYW1lKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goXCJQbGVhc2UgcHJvdmlkZSBhIHZhbHVlIGZvciB0aGUgYW5pbWF0aW9uIHBhcmFtIFwiICsgdmFyTmFtZSk7XG4gICAgICAgICAgICBsb2NhbFZhbCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbFZhbC50b1N0cmluZygpO1xuICAgIH0pO1xuICAgIC8vIHdlIGRvIHRoaXMgdG8gYXNzZXJ0IHRoYXQgbnVtZXJpYyB2YWx1ZXMgc3RheSBhcyB0aGV5IGFyZVxuICAgIHJldHVybiBzdHIgPT0gb3JpZ2luYWwgPyB2YWx1ZSA6IHN0cjtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBpdGVyYXRvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXJyID0gW107XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICB3aGlsZSAoIWl0ZW0uZG9uZSkge1xuICAgICAgICBhcnIucHVzaChpdGVtLnZhbHVlKTtcbiAgICAgICAgaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBzb3VyY2VcbiAqIEBwYXJhbSB7P30gZGVzdGluYXRpb25cbiAqIEByZXR1cm4gez99XG4gKi9cblxudmFyIERBU0hfQ0FTRV9SRUdFWFAgPSAvLSsoW2EtejAtOV0pL2c7XG4vKipcbiAqIEBwYXJhbSB7P30gaW5wdXRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRhc2hDYXNlVG9DYW1lbENhc2UoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZShEQVNIX0NBU0VfUkVHRVhQLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1bMV0udG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBkdXJhdGlvblxuICogQHBhcmFtIHs/fSBkZWxheVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYWxsb3dQcmV2aW91c1BsYXllclN0eWxlc01lcmdlKGR1cmF0aW9uLCBkZWxheSkge1xuICAgIHJldHVybiBkdXJhdGlvbiA9PT0gMCB8fCBkZWxheSA9PT0gMDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aXNpdG9yXG4gKiBAcGFyYW0gez99IG5vZGVcbiAqIEBwYXJhbSB7P30gY29udGV4dFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdmlzaXREc2xOb2RlKHZpc2l0b3IsIG5vZGUsIGNvbnRleHQpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIDcgLyogVHJpZ2dlciAqLzpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0VHJpZ2dlcihub2RlLCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSAwIC8qIFN0YXRlICovOlxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRTdGF0ZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSAxIC8qIFRyYW5zaXRpb24gKi86XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFRyYW5zaXRpb24obm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgMiAvKiBTZXF1ZW5jZSAqLzpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0U2VxdWVuY2Uobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgMyAvKiBHcm91cCAqLzpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0R3JvdXAobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgNCAvKiBBbmltYXRlICovOlxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRBbmltYXRlKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIDUgLyogS2V5ZnJhbWVzICovOlxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRLZXlmcmFtZXMobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgNiAvKiBTdHlsZSAqLzpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0U3R5bGUobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgOCAvKiBSZWZlcmVuY2UgKi86XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFJlZmVyZW5jZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSA5IC8qIEFuaW1hdGVDaGlsZCAqLzpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QW5pbWF0ZUNoaWxkKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIDEwIC8qIEFuaW1hdGVSZWYgKi86XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdEFuaW1hdGVSZWYobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgMTEgLyogUXVlcnkgKi86XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFF1ZXJ5KG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIDEyIC8qIFN0YWdnZXIgKi86XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFN0YWdnZXIobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmVzb2x2ZSBhbmltYXRpb24gbWV0YWRhdGEgbm9kZSAjXCIgKyBub2RlLnR5cGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIEFOWV9TVEFURSA9ICcqJztcbi8qKlxuICogQHBhcmFtIHs/fSB0cmFuc2l0aW9uVmFsdWVcbiAqIEBwYXJhbSB7P30gZXJyb3JzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwYXJzZVRyYW5zaXRpb25FeHByKHRyYW5zaXRpb25WYWx1ZSwgZXJyb3JzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXhwcmVzc2lvbnMgPSBbXTtcbiAgICBpZiAodHlwZW9mIHRyYW5zaXRpb25WYWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAodHJhbnNpdGlvblZhbHVlKSlcbiAgICAgICAgICAgIC5zcGxpdCgvXFxzKixcXHMqLylcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHBhcnNlSW5uZXJUcmFuc2l0aW9uU3RyKHN0ciwgZXhwcmVzc2lvbnMsIGVycm9ycyk7IH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbnMucHVzaCgvKiogQHR5cGUgez99ICovICh0cmFuc2l0aW9uVmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGV2ZW50U3RyXG4gKiBAcGFyYW0gez99IGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gez99IGVycm9yc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcGFyc2VJbm5lclRyYW5zaXRpb25TdHIoZXZlbnRTdHIsIGV4cHJlc3Npb25zLCBlcnJvcnMpIHtcbiAgICBpZiAoZXZlbnRTdHJbMF0gPT0gJzonKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc3VsdCA9IHBhcnNlQW5pbWF0aW9uQWxpYXMoZXZlbnRTdHIsIGVycm9ycyk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudFN0ciA9IC8qKiBAdHlwZSB7P30gKi8gKHJlc3VsdCk7XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hdGNoID0gZXZlbnRTdHIubWF0Y2goL14oXFwqfFstXFx3XSspXFxzKig8P1s9LV0+KVxccyooXFwqfFstXFx3XSspJC8pO1xuICAgIGlmIChtYXRjaCA9PSBudWxsIHx8IG1hdGNoLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goXCJUaGUgcHJvdmlkZWQgdHJhbnNpdGlvbiBleHByZXNzaW9uIFxcXCJcIiArIGV2ZW50U3RyICsgXCJcXFwiIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIHJldHVybiBleHByZXNzaW9ucztcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZnJvbVN0YXRlID0gbWF0Y2hbMV07XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VwYXJhdG9yID0gbWF0Y2hbMl07XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdG9TdGF0ZSA9IG1hdGNoWzNdO1xuICAgIGV4cHJlc3Npb25zLnB1c2gobWFrZUxhbWJkYUZyb21TdGF0ZXMoZnJvbVN0YXRlLCB0b1N0YXRlKSk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNGdWxsQW55U3RhdGVFeHByID0gZnJvbVN0YXRlID09IEFOWV9TVEFURSAmJiB0b1N0YXRlID09IEFOWV9TVEFURTtcbiAgICBpZiAoc2VwYXJhdG9yWzBdID09ICc8JyAmJiAhaXNGdWxsQW55U3RhdGVFeHByKSB7XG4gICAgICAgIGV4cHJlc3Npb25zLnB1c2gobWFrZUxhbWJkYUZyb21TdGF0ZXModG9TdGF0ZSwgZnJvbVN0YXRlKSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IGFsaWFzXG4gKiBAcGFyYW0gez99IGVycm9yc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcGFyc2VBbmltYXRpb25BbGlhcyhhbGlhcywgZXJyb3JzKSB7XG4gICAgc3dpdGNoIChhbGlhcykge1xuICAgICAgICBjYXNlICc6ZW50ZXInOlxuICAgICAgICAgICAgcmV0dXJuICd2b2lkID0+IConO1xuICAgICAgICBjYXNlICc6bGVhdmUnOlxuICAgICAgICAgICAgcmV0dXJuICcqID0+IHZvaWQnO1xuICAgICAgICBjYXNlICc6aW5jcmVtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZnJvbVN0YXRlLCB0b1N0YXRlKSB7IHJldHVybiBwYXJzZUZsb2F0KHRvU3RhdGUpID4gcGFyc2VGbG9hdChmcm9tU3RhdGUpOyB9O1xuICAgICAgICBjYXNlICc6ZGVjcmVtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZnJvbVN0YXRlLCB0b1N0YXRlKSB7IHJldHVybiBwYXJzZUZsb2F0KHRvU3RhdGUpIDwgcGFyc2VGbG9hdChmcm9tU3RhdGUpOyB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZXJyb3JzLnB1c2goXCJUaGUgdHJhbnNpdGlvbiBhbGlhcyB2YWx1ZSBcXFwiXCIgKyBhbGlhcyArIFwiXFxcIiBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuICcqID0+IConO1xuICAgIH1cbn1cbi8vIERPIE5PVCBSRUZBQ1RPUiAuLi4ga2VlcCB0aGUgZm9sbG93IHNldCBpbnN0YW50aWF0aW9uc1xuLy8gd2l0aCB0aGUgdmFsdWVzIGludGFjdCAoY2xvc3VyZSBjb21waWxlciBmb3Igc29tZSByZWFzb25cbi8vIHJlbW92ZXMgZm9sbG93LXVwIGxpbmVzIHRoYXQgYWRkIHRoZSB2YWx1ZXMgb3V0c2lkZSBvZlxuLy8gdGhlIGNvbnN0cnVjdG9yLi4uXG52YXIgVFJVRV9CT09MRUFOX1ZBTFVFUyA9IG5ldyBTZXQoWyd0cnVlJywgJzEnXSk7XG52YXIgRkFMU0VfQk9PTEVBTl9WQUxVRVMgPSBuZXcgU2V0KFsnZmFsc2UnLCAnMCddKTtcbi8qKlxuICogQHBhcmFtIHs/fSBsaHNcbiAqIEBwYXJhbSB7P30gcmhzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYWtlTGFtYmRhRnJvbVN0YXRlcyhsaHMsIHJocykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIExIU19NQVRDSF9CT09MRUFOID0gVFJVRV9CT09MRUFOX1ZBTFVFUy5oYXMobGhzKSB8fCBGQUxTRV9CT09MRUFOX1ZBTFVFUy5oYXMobGhzKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBSSFNfTUFUQ0hfQk9PTEVBTiA9IFRSVUVfQk9PTEVBTl9WQUxVRVMuaGFzKHJocykgfHwgRkFMU0VfQk9PTEVBTl9WQUxVRVMuaGFzKHJocyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmcm9tU3RhdGUsIHRvU3RhdGUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGhzTWF0Y2ggPSBsaHMgPT0gQU5ZX1NUQVRFIHx8IGxocyA9PSBmcm9tU3RhdGU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJoc01hdGNoID0gcmhzID09IEFOWV9TVEFURSB8fCByaHMgPT0gdG9TdGF0ZTtcbiAgICAgICAgaWYgKCFsaHNNYXRjaCAmJiBMSFNfTUFUQ0hfQk9PTEVBTiAmJiB0eXBlb2YgZnJvbVN0YXRlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGxoc01hdGNoID0gZnJvbVN0YXRlID8gVFJVRV9CT09MRUFOX1ZBTFVFUy5oYXMobGhzKSA6IEZBTFNFX0JPT0xFQU5fVkFMVUVTLmhhcyhsaHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmhzTWF0Y2ggJiYgUkhTX01BVENIX0JPT0xFQU4gJiYgdHlwZW9mIHRvU3RhdGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmhzTWF0Y2ggPSB0b1N0YXRlID8gVFJVRV9CT09MRUFOX1ZBTFVFUy5oYXMocmhzKSA6IEZBTFNFX0JPT0xFQU5fVkFMVUVTLmhhcyhyaHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaHNNYXRjaCAmJiByaHNNYXRjaDtcbiAgICB9O1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgU0VMRl9UT0tFTiA9ICc6c2VsZic7XG52YXIgU0VMRl9UT0tFTl9SRUdFWCA9IG5ldyBSZWdFeHAoXCJzKlwiICsgU0VMRl9UT0tFTiArIFwicyosP1wiLCAnZycpO1xuLyoqXG4gKiBAcGFyYW0gez99IGRyaXZlclxuICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICogQHBhcmFtIHs/fSBlcnJvcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkQW5pbWF0aW9uQXN0KGRyaXZlciwgbWV0YWRhdGEsIGVycm9ycykge1xuICAgIHJldHVybiBuZXcgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IoZHJpdmVyKS5idWlsZChtZXRhZGF0YSwgZXJyb3JzKTtcbn1cbnZhciBST09UX1NFTEVDVE9SID0gJyc7XG52YXIgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IoX2RyaXZlcikge1xuICAgICAgICB0aGlzLl9kcml2ZXIgPSBfZHJpdmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS5idWlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1ldGFkYXRhLCBlcnJvcnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29udGV4dCA9IG5ldyBBbmltYXRpb25Bc3RCdWlsZGVyQ29udGV4dChlcnJvcnMpO1xuICAgICAgICB0aGlzLl9yZXNldENvbnRleHRTdHlsZVRpbWluZ1N0YXRlKGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAodmlzaXREc2xOb2RlKHRoaXMsIG5vcm1hbGl6ZUFuaW1hdGlvbkVudHJ5KG1ldGFkYXRhKSwgY29udGV4dCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25Bc3RCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUuX3Jlc2V0Q29udGV4dFN0eWxlVGltaW5nU3RhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5U2VsZWN0b3IgPSBST09UX1NFTEVDVE9SO1xuICAgICAgICBjb250ZXh0LmNvbGxlY3RlZFN0eWxlcyA9IHt9O1xuICAgICAgICBjb250ZXh0LmNvbGxlY3RlZFN0eWxlc1tST09UX1NFTEVDVE9SXSA9IHt9O1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lID0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRyaWdnZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWV0YWRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcnlDb3VudCA9IGNvbnRleHQucXVlcnlDb3VudCA9IDA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlcENvdW50ID0gY29udGV4dC5kZXBDb3VudCA9IDA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXRlcyA9IFtdO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmFuc2l0aW9ucyA9IFtdO1xuICAgICAgICBpZiAobWV0YWRhdGEubmFtZS5jaGFyQXQoMCkgPT0gJ0AnKSB7XG4gICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKCdhbmltYXRpb24gdHJpZ2dlcnMgY2Fubm90IGJlIHByZWZpeGVkIHdpdGggYW4gYEBgIHNpZ24gKGUuZy4gdHJpZ2dlcihcXCdAZm9vXFwnLCBbLi4uXSkpJyk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YWRhdGEuZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzZXRDb250ZXh0U3R5bGVUaW1pbmdTdGF0ZShjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChkZWYudHlwZSA9PSAwIC8qIFN0YXRlICovKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhdGVEZWZfMSA9IC8qKiBAdHlwZSB7P30gKi8gKGRlZik7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmFtZV8xID0gc3RhdGVEZWZfMS5uYW1lO1xuICAgICAgICAgICAgICAgIG5hbWVfMS5zcGxpdCgvXFxzKixcXHMqLykuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZURlZl8xLm5hbWUgPSBuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZXMucHVzaChfdGhpcy52aXNpdFN0YXRlKHN0YXRlRGVmXzEsIGNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0ZURlZl8xLm5hbWUgPSBuYW1lXzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWYudHlwZSA9PSAxIC8qIFRyYW5zaXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmFuc2l0aW9uID0gX3RoaXMudmlzaXRUcmFuc2l0aW9uKC8qKiBAdHlwZSB7P30gKi8gKGRlZiksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHF1ZXJ5Q291bnQgKz0gdHJhbnNpdGlvbi5xdWVyeUNvdW50O1xuICAgICAgICAgICAgICAgIGRlcENvdW50ICs9IHRyYW5zaXRpb24uZGVwQ291bnQ7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMucHVzaCh0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZXJyb3JzLnB1c2goJ29ubHkgc3RhdGUoKSBhbmQgdHJhbnNpdGlvbigpIGRlZmluaXRpb25zIGNhbiBzaXQgaW5zaWRlIG9mIGEgdHJpZ2dlcigpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogNyAvKiBUcmlnZ2VyICovLFxuICAgICAgICAgICAgbmFtZTogbWV0YWRhdGEubmFtZSwgc3RhdGVzOiBzdGF0ZXMsIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucywgcXVlcnlDb3VudDogcXVlcnlDb3VudCwgZGVwQ291bnQ6IGRlcENvdW50LFxuICAgICAgICAgICAgb3B0aW9uczogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3RhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWV0YWRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVBc3QgPSB0aGlzLnZpc2l0U3R5bGUobWV0YWRhdGEuc3R5bGVzLCBjb250ZXh0KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXN0UGFyYW1zID0gKG1ldGFkYXRhLm9wdGlvbnMgJiYgbWV0YWRhdGEub3B0aW9ucy5wYXJhbXMpIHx8IG51bGw7XG4gICAgICAgIGlmIChzdHlsZUFzdC5jb250YWluc0R5bmFtaWNTdHlsZXMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG1pc3NpbmdTdWJzXzEgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXNfMSA9IGFzdFBhcmFtcyB8fCB7fTtcbiAgICAgICAgICAgIHN0eWxlQXN0LnN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzT2JqXzEgPSAvKiogQHR5cGUgez99ICovICh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHN0eWxlc09ial8xKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0U3R5bGVQYXJhbXMoc3R5bGVzT2JqXzFbcHJvcF0pLmZvckVhY2goZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1zXzEuaGFzT3duUHJvcGVydHkoc3ViKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nU3Vic18xLmFkZChzdWIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChtaXNzaW5nU3Vic18xLnNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtaXNzaW5nU3Vic0FyciA9IGl0ZXJhdG9yVG9BcnJheShtaXNzaW5nU3Vic18xLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwic3RhdGUoXFxcIlwiICsgbWV0YWRhdGEubmFtZSArIFwiXFxcIiwgLi4uKSBtdXN0IGRlZmluZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSBmb2xsb3dpbmcgc3R5bGUgc3Vic3RpdHV0aW9uczogXCIgKyBtaXNzaW5nU3Vic0Fyci5qb2luKCcsICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogMCAvKiBTdGF0ZSAqLyxcbiAgICAgICAgICAgIG5hbWU6IG1ldGFkYXRhLm5hbWUsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVBc3QsXG4gICAgICAgICAgICBvcHRpb25zOiBhc3RQYXJhbXMgPyB7IHBhcmFtczogYXN0UGFyYW1zIH0gOiBudWxsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25Bc3RCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRUcmFuc2l0aW9uID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1ldGFkYXRhLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQucXVlcnlDb3VudCA9IDA7XG4gICAgICAgIGNvbnRleHQuZGVwQ291bnQgPSAwO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbmltYXRpb24gPSB2aXNpdERzbE5vZGUodGhpcywgbm9ybWFsaXplQW5pbWF0aW9uRW50cnkobWV0YWRhdGEuYW5pbWF0aW9uKSwgY29udGV4dCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hdGNoZXJzID0gcGFyc2VUcmFuc2l0aW9uRXhwcihtZXRhZGF0YS5leHByLCBjb250ZXh0LmVycm9ycyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFRyYW5zaXRpb24gKi8sXG4gICAgICAgICAgICBtYXRjaGVyczogbWF0Y2hlcnMsXG4gICAgICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgICAgIHF1ZXJ5Q291bnQ6IGNvbnRleHQucXVlcnlDb3VudCxcbiAgICAgICAgICAgIGRlcENvdW50OiBjb250ZXh0LmRlcENvdW50LFxuICAgICAgICAgICAgb3B0aW9uczogbm9ybWFsaXplQW5pbWF0aW9uT3B0aW9ucyhtZXRhZGF0YS5vcHRpb25zKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U2VxdWVuY2UgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWV0YWRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogU2VxdWVuY2UgKi8sXG4gICAgICAgICAgICBzdGVwczogbWV0YWRhdGEuc3RlcHMubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiB2aXNpdERzbE5vZGUoX3RoaXMsIHMsIGNvbnRleHQpOyB9KSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMobWV0YWRhdGEub3B0aW9ucylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEdyb3VwID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1ldGFkYXRhLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRUaW1lID0gY29udGV4dC5jdXJyZW50VGltZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZnVydGhlc3RUaW1lID0gMDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RlcHMgPSBtZXRhZGF0YS5zdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlubmVyQXN0ID0gdmlzaXREc2xOb2RlKF90aGlzLCBzdGVwLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGZ1cnRoZXN0VGltZSA9IE1hdGgubWF4KGZ1cnRoZXN0VGltZSwgY29udGV4dC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICByZXR1cm4gaW5uZXJBc3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lID0gZnVydGhlc3RUaW1lO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogMyAvKiBHcm91cCAqLyxcbiAgICAgICAgICAgIHN0ZXBzOiBzdGVwcyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMobWV0YWRhdGEub3B0aW9ucylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWV0YWRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltaW5nQXN0ID0gY29uc3RydWN0VGltaW5nQXN0KG1ldGFkYXRhLnRpbWluZ3MsIGNvbnRleHQuZXJyb3JzKTtcbiAgICAgICAgY29udGV4dC5jdXJyZW50QW5pbWF0ZVRpbWluZ3MgPSB0aW1pbmdBc3Q7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlQXN0O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZU1ldGFkYXRhID0gbWV0YWRhdGEuc3R5bGVzID8gbWV0YWRhdGEuc3R5bGVzIDogX2FuZ3VsYXJfYW5pbWF0aW9ucy5zdHlsZSh7fSk7XG4gICAgICAgIGlmIChzdHlsZU1ldGFkYXRhLnR5cGUgPT0gNSAvKiBLZXlmcmFtZXMgKi8pIHtcbiAgICAgICAgICAgIHN0eWxlQXN0ID0gdGhpcy52aXNpdEtleWZyYW1lcygvKiogQHR5cGUgez99ICovIChzdHlsZU1ldGFkYXRhKSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZU1ldGFkYXRhXzEgPSAvKiogQHR5cGUgez99ICovIChtZXRhZGF0YS5zdHlsZXMpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzdHlsZU1ldGFkYXRhXzEpIHtcbiAgICAgICAgICAgICAgICBpc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXdTdHlsZURhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAodGltaW5nQXN0LmVhc2luZykge1xuICAgICAgICAgICAgICAgICAgICBuZXdTdHlsZURhdGFbJ2Vhc2luZyddID0gdGltaW5nQXN0LmVhc2luZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3R5bGVNZXRhZGF0YV8xID0gX2FuZ3VsYXJfYW5pbWF0aW9ucy5zdHlsZShuZXdTdHlsZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5jdXJyZW50VGltZSArPSB0aW1pbmdBc3QuZHVyYXRpb24gKyB0aW1pbmdBc3QuZGVsYXk7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBfc3R5bGVBc3QgPSB0aGlzLnZpc2l0U3R5bGUoc3R5bGVNZXRhZGF0YV8xLCBjb250ZXh0KTtcbiAgICAgICAgICAgIF9zdHlsZUFzdC5pc0VtcHR5U3RlcCA9IGlzRW1wdHk7XG4gICAgICAgICAgICBzdHlsZUFzdCA9IF9zdHlsZUFzdDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncyA9IG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiA0IC8qIEFuaW1hdGUgKi8sXG4gICAgICAgICAgICB0aW1pbmdzOiB0aW1pbmdBc3QsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVBc3QsXG4gICAgICAgICAgICBvcHRpb25zOiBudWxsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25Bc3RCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRTdHlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtZXRhZGF0YSwgY29udGV4dCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhc3QgPSB0aGlzLl9tYWtlU3R5bGVBc3QobWV0YWRhdGEsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLl92YWxpZGF0ZVN0eWxlQXN0KGFzdCwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBhc3Q7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25Bc3RCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUuX21ha2VTdHlsZUFzdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtZXRhZGF0YSwgY29udGV4dCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZXMgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWV0YWRhdGEuc3R5bGVzKSkge1xuICAgICAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKG1ldGFkYXRhLnN0eWxlcykpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlVHVwbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlVHVwbGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlVHVwbGUgPT0gX2FuZ3VsYXJfYW5pbWF0aW9ucy5BVVRPX1NUWUxFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXMucHVzaCgvKiogQHR5cGUgez99ICovIChzdHlsZVR1cGxlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiVGhlIHByb3ZpZGVkIHN0eWxlIHN0cmluZyB2YWx1ZSBcIiArIHN0eWxlVHVwbGUgKyBcIiBpcyBub3QgYWxsb3dlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5wdXNoKC8qKiBAdHlwZSB7P30gKi8gKHN0eWxlVHVwbGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlcy5wdXNoKG1ldGFkYXRhLnN0eWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29udGFpbnNEeW5hbWljU3R5bGVzID0gZmFsc2U7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbGxlY3RlZEVhc2luZyA9IG51bGw7XG4gICAgICAgIHN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZURhdGEpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChzdHlsZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVNYXAgPSAvKiogQHR5cGUgez99ICovIChzdHlsZURhdGEpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVhc2luZyA9IHN0eWxlTWFwWydlYXNpbmcnXTtcbiAgICAgICAgICAgICAgICBpZiAoZWFzaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZEVhc2luZyA9IC8qKiBAdHlwZSB7P30gKi8gKGVhc2luZyk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdHlsZU1hcFsnZWFzaW5nJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY29udGFpbnNEeW5hbWljU3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcCBpbiBzdHlsZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWUgPSBzdHlsZU1hcFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS50b1N0cmluZygpLmluZGV4T2YoU1VCU1RJVFVUSU9OX0VYUFJfU1RBUlQpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluc0R5bmFtaWNTdHlsZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IDYgLyogU3R5bGUgKi8sXG4gICAgICAgICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgICAgIGVhc2luZzogY29sbGVjdGVkRWFzaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBtZXRhZGF0YS5vZmZzZXQsIGNvbnRhaW5zRHluYW1pY1N0eWxlczogY29udGFpbnNEeW5hbWljU3R5bGVzLFxuICAgICAgICAgICAgb3B0aW9uczogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVTdHlsZUFzdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRpbWluZ3MgPSBjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW5kVGltZSA9IGNvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXJ0VGltZSA9IGNvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICAgIGlmICh0aW1pbmdzICYmIHN0YXJ0VGltZSA+IDApIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZSAtPSB0aW1pbmdzLmR1cmF0aW9uICsgdGltaW5ncy5kZWxheTtcbiAgICAgICAgfVxuICAgICAgICBhc3Quc3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHR1cGxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR1cGxlID09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHR1cGxlKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fZHJpdmVyLnZhbGlkYXRlU3R5bGVQcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiVGhlIHByb3ZpZGVkIGFuaW1hdGlvbiBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiIGlzIG5vdCBhIHN1cHBvcnRlZCBDU1MgcHJvcGVydHkgZm9yIGFuaW1hdGlvbnNcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29sbGVjdGVkU3R5bGVzID0gY29udGV4dC5jb2xsZWN0ZWRTdHlsZXNbLyoqIEB0eXBlIHs/fSAqLyAoKGNvbnRleHQuY3VycmVudFF1ZXJ5U2VsZWN0b3IpKV07XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29sbGVjdGVkRW50cnkgPSBjb2xsZWN0ZWRTdHlsZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdXBkYXRlQ29sbGVjdGVkU3R5bGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0ZWRFbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lICE9IGVuZFRpbWUgJiYgc3RhcnRUaW1lID49IGNvbGxlY3RlZEVudHJ5LnN0YXJ0VGltZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZSA8PSBjb2xsZWN0ZWRFbnRyeS5lbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiVGhlIENTUyBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiIHRoYXQgZXhpc3RzIGJldHdlZW4gdGhlIHRpbWVzIG9mIFxcXCJcIiArIGNvbGxlY3RlZEVudHJ5LnN0YXJ0VGltZSArIFwibXNcXFwiIGFuZCBcXFwiXCIgKyBjb2xsZWN0ZWRFbnRyeS5lbmRUaW1lICsgXCJtc1xcXCIgaXMgYWxzbyBiZWluZyBhbmltYXRlZCBpbiBhIHBhcmFsbGVsIGFuaW1hdGlvbiBiZXR3ZWVuIHRoZSB0aW1lcyBvZiBcXFwiXCIgKyBzdGFydFRpbWUgKyBcIm1zXFxcIiBhbmQgXFxcIlwiICsgZW5kVGltZSArIFwibXNcXFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29sbGVjdGVkU3R5bGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhbHdheXMgY2hvb3NlIHRoZSBzbWFsbGVyIHN0YXJ0IHRpbWUgdmFsdWUgc2luY2Ugd2VcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FudCB0byBoYXZlIGEgcmVjb3JkIG9mIHRoZSBlbnRpcmUgYW5pbWF0aW9uIHdpbmRvdyB3aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3R5bGUgcHJvcGVydHkgaXMgYmVpbmcgYW5pbWF0ZWQgaW4gYmV0d2VlblxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBjb2xsZWN0ZWRFbnRyeS5zdGFydFRpbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVDb2xsZWN0ZWRTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWRTdHlsZXNbcHJvcF0gPSB7IHN0YXJ0VGltZTogc3RhcnRUaW1lLCBlbmRUaW1lOiBlbmRUaW1lIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVTdHlsZVBhcmFtcyh0dXBsZVtwcm9wXSwgY29udGV4dC5vcHRpb25zLCBjb250ZXh0LmVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0S2V5ZnJhbWVzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1ldGFkYXRhLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFzdCA9IHsgdHlwZTogNSAvKiBLZXlmcmFtZXMgKi8sIHN0eWxlczogW10sIG9wdGlvbnM6IG51bGwgfTtcbiAgICAgICAgaWYgKCFjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncykge1xuICAgICAgICAgICAgY29udGV4dC5lcnJvcnMucHVzaChcImtleWZyYW1lcygpIG11c3QgYmUgcGxhY2VkIGluc2lkZSBvZiBhIGNhbGwgdG8gYW5pbWF0ZSgpXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGFzdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBNQVhfS0VZRlJBTUVfT0ZGU0VUID0gMTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdG90YWxLZXlmcmFtZXNXaXRoT2Zmc2V0cyA9IDA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9mZnNldHMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2Zmc2V0c091dE9mT3JkZXIgPSBmYWxzZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2V5ZnJhbWVzT3V0T2ZSYW5nZSA9IGZhbHNlO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2aW91c09mZnNldCA9IDA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleWZyYW1lcyA9IG1ldGFkYXRhLnN0ZXBzLm1hcChmdW5jdGlvbiAoc3R5bGVzKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZSQkMSA9IF90aGlzLl9tYWtlU3R5bGVBc3Qoc3R5bGVzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9mZnNldFZhbCA9IHN0eWxlJCQxLm9mZnNldCAhPSBudWxsID8gc3R5bGUkJDEub2Zmc2V0IDogY29uc3VtZU9mZnNldChzdHlsZSQkMS5zdHlsZXMpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXRWYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRvdGFsS2V5ZnJhbWVzV2l0aE9mZnNldHMrKztcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBzdHlsZSQkMS5vZmZzZXQgPSBvZmZzZXRWYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXlmcmFtZXNPdXRPZlJhbmdlID0ga2V5ZnJhbWVzT3V0T2ZSYW5nZSB8fCBvZmZzZXQgPCAwIHx8IG9mZnNldCA+IDE7XG4gICAgICAgICAgICBvZmZzZXRzT3V0T2ZPcmRlciA9IG9mZnNldHNPdXRPZk9yZGVyIHx8IG9mZnNldCA8IHByZXZpb3VzT2Zmc2V0O1xuICAgICAgICAgICAgcHJldmlvdXNPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBvZmZzZXRzLnB1c2gob2Zmc2V0KTtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZSQkMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChrZXlmcmFtZXNPdXRPZlJhbmdlKSB7XG4gICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiUGxlYXNlIGVuc3VyZSB0aGF0IGFsbCBrZXlmcmFtZSBvZmZzZXRzIGFyZSBiZXR3ZWVuIDAgYW5kIDFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldHNPdXRPZk9yZGVyKSB7XG4gICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiUGxlYXNlIGVuc3VyZSB0aGF0IGFsbCBrZXlmcmFtZSBvZmZzZXRzIGFyZSBpbiBvcmRlclwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZW5ndGggPSBtZXRhZGF0YS5zdGVwcy5sZW5ndGg7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGdlbmVyYXRlZE9mZnNldCA9IDA7XG4gICAgICAgIGlmICh0b3RhbEtleWZyYW1lc1dpdGhPZmZzZXRzID4gMCAmJiB0b3RhbEtleWZyYW1lc1dpdGhPZmZzZXRzIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwiTm90IGFsbCBzdHlsZSgpIHN0ZXBzIHdpdGhpbiB0aGUgZGVjbGFyZWQga2V5ZnJhbWVzKCkgY29udGFpbiBvZmZzZXRzXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRvdGFsS2V5ZnJhbWVzV2l0aE9mZnNldHMgPT0gMCkge1xuICAgICAgICAgICAgZ2VuZXJhdGVkT2Zmc2V0ID0gTUFYX0tFWUZSQU1FX09GRlNFVCAvIChsZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaW1pdCA9IGxlbmd0aCAtIDE7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRUaW1lID0gY29udGV4dC5jdXJyZW50VGltZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY3VycmVudEFuaW1hdGVUaW1pbmdzID0gLyoqIEB0eXBlIHs/fSAqLyAoKGNvbnRleHQuY3VycmVudEFuaW1hdGVUaW1pbmdzKSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFuaW1hdGVEdXJhdGlvbiA9IGN1cnJlbnRBbmltYXRlVGltaW5ncy5kdXJhdGlvbjtcbiAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGtmLCBpKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvZmZzZXQgPSBnZW5lcmF0ZWRPZmZzZXQgPiAwID8gKGkgPT0gbGltaXQgPyAxIDogKGdlbmVyYXRlZE9mZnNldCAqIGkpKSA6IG9mZnNldHNbaV07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkdXJhdGlvblVwVG9UaGlzRnJhbWUgPSBvZmZzZXQgKiBhbmltYXRlRHVyYXRpb247XG4gICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgKyBjdXJyZW50QW5pbWF0ZVRpbWluZ3MuZGVsYXkgKyBkdXJhdGlvblVwVG9UaGlzRnJhbWU7XG4gICAgICAgICAgICBjdXJyZW50QW5pbWF0ZVRpbWluZ3MuZHVyYXRpb24gPSBkdXJhdGlvblVwVG9UaGlzRnJhbWU7XG4gICAgICAgICAgICBfdGhpcy5fdmFsaWRhdGVTdHlsZUFzdChrZiwgY29udGV4dCk7XG4gICAgICAgICAgICBrZi5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBhc3Quc3R5bGVzLnB1c2goa2YpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdFJlZmVyZW5jZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtZXRhZGF0YSwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogOCAvKiBSZWZlcmVuY2UgKi8sXG4gICAgICAgICAgICBhbmltYXRpb246IHZpc2l0RHNsTm9kZSh0aGlzLCBub3JtYWxpemVBbmltYXRpb25FbnRyeShtZXRhZGF0YS5hbmltYXRpb24pLCBjb250ZXh0KSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMobWV0YWRhdGEub3B0aW9ucylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGVDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtZXRhZGF0YSwgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmRlcENvdW50Kys7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiA5IC8qIEFuaW1hdGVDaGlsZCAqLyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMobWV0YWRhdGEub3B0aW9ucylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGVSZWYgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWV0YWRhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IDEwIC8qIEFuaW1hdGVSZWYgKi8sXG4gICAgICAgICAgICBhbmltYXRpb246IHRoaXMudmlzaXRSZWZlcmVuY2UobWV0YWRhdGEuYW5pbWF0aW9uLCBjb250ZXh0KSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMobWV0YWRhdGEub3B0aW9ucylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkFzdEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdFF1ZXJ5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1ldGFkYXRhLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudFNlbGVjdG9yID0gLyoqIEB0eXBlIHs/fSAqLyAoKGNvbnRleHQuY3VycmVudFF1ZXJ5U2VsZWN0b3IpKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9ucyA9IC8qKiBAdHlwZSB7P30gKi8gKChtZXRhZGF0YS5vcHRpb25zIHx8IHt9KSk7XG4gICAgICAgIGNvbnRleHQucXVlcnlDb3VudCsrO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRRdWVyeSA9IG1ldGFkYXRhO1xuICAgICAgICB2YXIgX2EgPSBub3JtYWxpemVTZWxlY3RvcihtZXRhZGF0YS5zZWxlY3RvciksIHNlbGVjdG9yID0gX2FbMF0sIGluY2x1ZGVTZWxmID0gX2FbMV07XG4gICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5U2VsZWN0b3IgPVxuICAgICAgICAgICAgcGFyZW50U2VsZWN0b3IubGVuZ3RoID8gKHBhcmVudFNlbGVjdG9yICsgJyAnICsgc2VsZWN0b3IpIDogc2VsZWN0b3I7XG4gICAgICAgIGdldE9yU2V0QXNJbk1hcChjb250ZXh0LmNvbGxlY3RlZFN0eWxlcywgY29udGV4dC5jdXJyZW50UXVlcnlTZWxlY3Rvciwge30pO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbmltYXRpb24gPSB2aXNpdERzbE5vZGUodGhpcywgbm9ybWFsaXplQW5pbWF0aW9uRW50cnkobWV0YWRhdGEuYW5pbWF0aW9uKSwgY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5ID0gbnVsbDtcbiAgICAgICAgY29udGV4dC5jdXJyZW50UXVlcnlTZWxlY3RvciA9IHBhcmVudFNlbGVjdG9yO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogMTEgLyogUXVlcnkgKi8sXG4gICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICAgICAgICBsaW1pdDogb3B0aW9ucy5saW1pdCB8fCAwLFxuICAgICAgICAgICAgb3B0aW9uYWw6ICEhb3B0aW9ucy5vcHRpb25hbCwgaW5jbHVkZVNlbGY6IGluY2x1ZGVTZWxmLCBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0b3I6IG1ldGFkYXRhLnNlbGVjdG9yLFxuICAgICAgICAgICAgb3B0aW9uczogbm9ybWFsaXplQW5pbWF0aW9uT3B0aW9ucyhtZXRhZGF0YS5vcHRpb25zKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uQXN0QnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3RhZ2dlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtZXRhZGF0YSwgY29udGV4dCkge1xuICAgICAgICBpZiAoIWNvbnRleHQuY3VycmVudFF1ZXJ5KSB7XG4gICAgICAgICAgICBjb250ZXh0LmVycm9ycy5wdXNoKFwic3RhZ2dlcigpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIG9mIHF1ZXJ5KClcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltaW5ncyA9IG1ldGFkYXRhLnRpbWluZ3MgPT09ICdmdWxsJyA/XG4gICAgICAgICAgICB7IGR1cmF0aW9uOiAwLCBkZWxheTogMCwgZWFzaW5nOiAnZnVsbCcgfSA6XG4gICAgICAgICAgICByZXNvbHZlVGltaW5nKG1ldGFkYXRhLnRpbWluZ3MsIGNvbnRleHQuZXJyb3JzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IDEyIC8qIFN0YWdnZXIgKi8sXG4gICAgICAgICAgICBhbmltYXRpb246IHZpc2l0RHNsTm9kZSh0aGlzLCBub3JtYWxpemVBbmltYXRpb25FbnRyeShtZXRhZGF0YS5hbmltYXRpb24pLCBjb250ZXh0KSwgdGltaW5nczogdGltaW5ncyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG51bGxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25Bc3RCdWlsZGVyVmlzaXRvcjtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGFzQW1wZXJzYW5kID0gc2VsZWN0b3Iuc3BsaXQoL1xccyosXFxzKi8pLmZpbmQoZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbiA9PSBTRUxGX1RPS0VOOyB9KSA/IHRydWUgOiBmYWxzZTtcbiAgICBpZiAoaGFzQW1wZXJzYW5kKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShTRUxGX1RPS0VOX1JFR0VYLCAnJyk7XG4gICAgfVxuICAgIC8vIHRoZSA6ZW50ZXIgYW5kIDpsZWF2ZSBzZWxlY3RvcnMgYXJlIGZpbGxlZCBpbiBhdCBydW50aW1lIGR1cmluZyB0aW1lbGluZSBidWlsZGluZ1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvQFxcKi9nLCBOR19UUklHR0VSX1NFTEVDVE9SKVxuICAgICAgICAucmVwbGFjZSgvQFxcdysvZywgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBOR19UUklHR0VSX1NFTEVDVE9SICsgJy0nICsgbWF0Y2guc3Vic3RyKDEpOyB9KVxuICAgICAgICAucmVwbGFjZSgvOmFuaW1hdGluZy9nLCBOR19BTklNQVRJTkdfU0VMRUNUT1IpO1xuICAgIHJldHVybiBbc2VsZWN0b3IsIGhhc0FtcGVyc2FuZF07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gb2JqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbXMob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA/IGNvcHlPYmoob2JqKSA6IG51bGw7XG59XG52YXIgQW5pbWF0aW9uQXN0QnVpbGRlckNvbnRleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uQXN0QnVpbGRlckNvbnRleHQoZXJyb3JzKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB0aGlzLnF1ZXJ5Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmRlcENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50VHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFF1ZXJ5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50UXVlcnlTZWxlY3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGVUaW1pbmdzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgIHRoaXMuY29sbGVjdGVkU3R5bGVzID0ge307XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBBbmltYXRpb25Bc3RCdWlsZGVyQ29udGV4dDtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gc3R5bGVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjb25zdW1lT2Zmc2V0KHN0eWxlcykge1xuICAgIGlmICh0eXBlb2Ygc3R5bGVzID09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvZmZzZXQgPSBudWxsO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlcykpIHtcbiAgICAgICAgc3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlVHVwbGUpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChzdHlsZVR1cGxlKSAmJiBzdHlsZVR1cGxlLmhhc093blByb3BlcnR5KCdvZmZzZXQnKSkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iaiA9IC8qKiBAdHlwZSB7P30gKi8gKHN0eWxlVHVwbGUpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlRmxvYXQoLyoqIEB0eXBlIHs/fSAqLyAob2JqWydvZmZzZXQnXSkpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbJ29mZnNldCddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc3R5bGVzKSAmJiBzdHlsZXMuaGFzT3duUHJvcGVydHkoJ29mZnNldCcpKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iaiA9IC8qKiBAdHlwZSB7P30gKi8gKHN0eWxlcyk7XG4gICAgICAgIG9mZnNldCA9IHBhcnNlRmxvYXQoLyoqIEB0eXBlIHs/fSAqLyAob2JqWydvZmZzZXQnXSkpO1xuICAgICAgICBkZWxldGUgb2JqWydvZmZzZXQnXTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHBhcmFtIHs/fSBlcnJvcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFRpbWluZ0FzdCh2YWx1ZSwgZXJyb3JzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltaW5ncyA9IG51bGw7XG4gICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdkdXJhdGlvbicpKSB7XG4gICAgICAgIHRpbWluZ3MgPSAvKiogQHR5cGUgez99ICovICh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkdXJhdGlvbiA9IHJlc29sdmVUaW1pbmcoLyoqIEB0eXBlIHs/fSAqLyAodmFsdWUpLCBlcnJvcnMpLmR1cmF0aW9uO1xuICAgICAgICByZXR1cm4gbWFrZVRpbWluZ0FzdCgvKiogQHR5cGUgez99ICovIChkdXJhdGlvbiksIDAsICcnKTtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RyVmFsdWUgPSAvKiogQHR5cGUgez99ICovICh2YWx1ZSk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNEeW5hbWljID0gc3RyVmFsdWUuc3BsaXQoL1xccysvKS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LmNoYXJBdCgwKSA9PSAneycgJiYgdi5jaGFyQXQoMSkgPT0gJ3snOyB9KTtcbiAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFzdCA9IC8qKiBAdHlwZSB7P30gKi8gKG1ha2VUaW1pbmdBc3QoMCwgMCwgJycpKTtcbiAgICAgICAgYXN0LmR5bmFtaWMgPSB0cnVlO1xuICAgICAgICBhc3Quc3RyVmFsdWUgPSBzdHJWYWx1ZTtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKGFzdCk7XG4gICAgfVxuICAgIHRpbWluZ3MgPSB0aW1pbmdzIHx8IHJlc29sdmVUaW1pbmcoc3RyVmFsdWUsIGVycm9ycyk7XG4gICAgcmV0dXJuIG1ha2VUaW1pbmdBc3QodGltaW5ncy5kdXJhdGlvbiwgdGltaW5ncy5kZWxheSwgdGltaW5ncy5lYXNpbmcpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBjb3B5T2JqKG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9uc1sncGFyYW1zJ10pIHtcbiAgICAgICAgICAgIG9wdGlvbnNbJ3BhcmFtcyddID0gLyoqIEB0eXBlIHs/fSAqLyAoKG5vcm1hbGl6ZVBhcmFtcyhvcHRpb25zWydwYXJhbXMnXSkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBkdXJhdGlvblxuICogQHBhcmFtIHs/fSBkZWxheVxuICogQHBhcmFtIHs/fSBlYXNpbmdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG1ha2VUaW1pbmdBc3QoZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcpIHtcbiAgICByZXR1cm4geyBkdXJhdGlvbjogZHVyYXRpb24sIGRlbGF5OiBkZWxheSwgZWFzaW5nOiBlYXNpbmcgfTtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0gez99IGVsZW1lbnRcbiAqIEBwYXJhbSB7P30ga2V5ZnJhbWVzXG4gKiBAcGFyYW0gez99IHByZVN0eWxlUHJvcHNcbiAqIEBwYXJhbSB7P30gcG9zdFN0eWxlUHJvcHNcbiAqIEBwYXJhbSB7P30gZHVyYXRpb25cbiAqIEBwYXJhbSB7P30gZGVsYXlcbiAqIEBwYXJhbSB7Pz19IGVhc2luZ1xuICogQHBhcmFtIHs/PX0gc3ViVGltZWxpbmVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRpbWVsaW5lSW5zdHJ1Y3Rpb24oZWxlbWVudCwga2V5ZnJhbWVzLCBwcmVTdHlsZVByb3BzLCBwb3N0U3R5bGVQcm9wcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIHN1YlRpbWVsaW5lKSB7XG4gICAgaWYgKGVhc2luZyA9PT0gdm9pZCAwKSB7IGVhc2luZyA9IG51bGw7IH1cbiAgICBpZiAoc3ViVGltZWxpbmUgPT09IHZvaWQgMCkgeyBzdWJUaW1lbGluZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogMSAvKiBUaW1lbGluZUFuaW1hdGlvbiAqLyxcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgICAgIHByZVN0eWxlUHJvcHM6IHByZVN0eWxlUHJvcHMsXG4gICAgICAgIHBvc3RTdHlsZVByb3BzOiBwb3N0U3R5bGVQcm9wcyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgIHRvdGFsVGltZTogZHVyYXRpb24gKyBkZWxheSwgZWFzaW5nOiBlYXNpbmcsIHN1YlRpbWVsaW5lOiBzdWJUaW1lbGluZVxuICAgIH07XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbnZhciBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudEluc3RydWN0aW9uTWFwKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRWxlbWVudEluc3RydWN0aW9uTWFwLnByb3RvdHlwZS5jb25zdW1lID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnN0cnVjdGlvbnMgPSB0aGlzLl9tYXAuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9ucztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAucHJvdG90eXBlLmFwcGVuZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGV4aXN0aW5nSW5zdHJ1Y3Rpb25zID0gdGhpcy5fbWFwLmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKCFleGlzdGluZ0luc3RydWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChlbGVtZW50LCBleGlzdGluZ0luc3RydWN0aW9ucyA9IFtdKTtcbiAgICAgICAgfVxuICAgICAgICBleGlzdGluZ0luc3RydWN0aW9ucy5wdXNoLmFwcGx5KGV4aXN0aW5nSW5zdHJ1Y3Rpb25zLCBpbnN0cnVjdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAucHJvdG90eXBlLmhhcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHRoaXMuX21hcC5oYXMoZWxlbWVudCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAucHJvdG90eXBlLmNsZWFyID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRoaXMuX21hcC5jbGVhcigpOyB9O1xuICAgIHJldHVybiBFbGVtZW50SW5zdHJ1Y3Rpb25NYXA7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgT05FX0ZSQU1FX0lOX01JTExJU0VDT05EUyA9IDE7XG52YXIgRU5URVJfVE9LRU4gPSAnOmVudGVyJztcbnZhciBFTlRFUl9UT0tFTl9SRUdFWCA9IG5ldyBSZWdFeHAoRU5URVJfVE9LRU4sICdnJyk7XG52YXIgTEVBVkVfVE9LRU4gPSAnOmxlYXZlJztcbnZhciBMRUFWRV9UT0tFTl9SRUdFWCA9IG5ldyBSZWdFeHAoTEVBVkVfVE9LRU4sICdnJyk7XG4vKipcbiAqIEBwYXJhbSB7P30gZHJpdmVyXG4gKiBAcGFyYW0gez99IHJvb3RFbGVtZW50XG4gKiBAcGFyYW0gez99IGFzdFxuICogQHBhcmFtIHs/fSBlbnRlckNsYXNzTmFtZVxuICogQHBhcmFtIHs/fSBsZWF2ZUNsYXNzTmFtZVxuICogQHBhcmFtIHs/PX0gc3RhcnRpbmdTdHlsZXNcbiAqIEBwYXJhbSB7Pz19IGZpbmFsU3R5bGVzXG4gKiBAcGFyYW0gez89fSBvcHRpb25zXG4gKiBAcGFyYW0gez89fSBzdWJJbnN0cnVjdGlvbnNcbiAqIEBwYXJhbSB7Pz19IGVycm9yc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYnVpbGRBbmltYXRpb25UaW1lbGluZXMoZHJpdmVyLCByb290RWxlbWVudCwgYXN0LCBlbnRlckNsYXNzTmFtZSwgbGVhdmVDbGFzc05hbWUsIHN0YXJ0aW5nU3R5bGVzLCBmaW5hbFN0eWxlcywgb3B0aW9ucywgc3ViSW5zdHJ1Y3Rpb25zLCBlcnJvcnMpIHtcbiAgICBpZiAoc3RhcnRpbmdTdHlsZXMgPT09IHZvaWQgMCkgeyBzdGFydGluZ1N0eWxlcyA9IHt9OyB9XG4gICAgaWYgKGZpbmFsU3R5bGVzID09PSB2b2lkIDApIHsgZmluYWxTdHlsZXMgPSB7fTsgfVxuICAgIGlmIChlcnJvcnMgPT09IHZvaWQgMCkgeyBlcnJvcnMgPSBbXTsgfVxuICAgIHJldHVybiBuZXcgQW5pbWF0aW9uVGltZWxpbmVCdWlsZGVyVmlzaXRvcigpLmJ1aWxkS2V5ZnJhbWVzKGRyaXZlciwgcm9vdEVsZW1lbnQsIGFzdCwgZW50ZXJDbGFzc05hbWUsIGxlYXZlQ2xhc3NOYW1lLCBzdGFydGluZ1N0eWxlcywgZmluYWxTdHlsZXMsIG9wdGlvbnMsIHN1Ykluc3RydWN0aW9ucywgZXJyb3JzKTtcbn1cbnZhciBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZHJpdmVyXG4gICAgICogQHBhcmFtIHs/fSByb290RWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBlbnRlckNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSB7P30gbGVhdmVDbGFzc05hbWVcbiAgICAgKiBAcGFyYW0gez99IHN0YXJ0aW5nU3R5bGVzXG4gICAgICogQHBhcmFtIHs/fSBmaW5hbFN0eWxlc1xuICAgICAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7Pz19IHN1Ykluc3RydWN0aW9uc1xuICAgICAqIEBwYXJhbSB7Pz19IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVGltZWxpbmVCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUuYnVpbGRLZXlmcmFtZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGRyaXZlclxuICAgICAqIEBwYXJhbSB7P30gcm9vdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gZW50ZXJDbGFzc05hbWVcbiAgICAgKiBAcGFyYW0gez99IGxlYXZlQ2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHs/fSBzdGFydGluZ1N0eWxlc1xuICAgICAqIEBwYXJhbSB7P30gZmluYWxTdHlsZXNcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBzdWJJbnN0cnVjdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChkcml2ZXIsIHJvb3RFbGVtZW50LCBhc3QsIGVudGVyQ2xhc3NOYW1lLCBsZWF2ZUNsYXNzTmFtZSwgc3RhcnRpbmdTdHlsZXMsIGZpbmFsU3R5bGVzLCBvcHRpb25zLCBzdWJJbnN0cnVjdGlvbnMsIGVycm9ycykge1xuICAgICAgICBpZiAoZXJyb3JzID09PSB2b2lkIDApIHsgZXJyb3JzID0gW107IH1cbiAgICAgICAgc3ViSW5zdHJ1Y3Rpb25zID0gc3ViSW5zdHJ1Y3Rpb25zIHx8IG5ldyBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29udGV4dCA9IG5ldyBBbmltYXRpb25UaW1lbGluZUNvbnRleHQoZHJpdmVyLCByb290RWxlbWVudCwgc3ViSW5zdHJ1Y3Rpb25zLCBlbnRlckNsYXNzTmFtZSwgbGVhdmVDbGFzc05hbWUsIGVycm9ycywgW10pO1xuICAgICAgICBjb250ZXh0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lbGluZS5zZXRTdHlsZXMoW3N0YXJ0aW5nU3R5bGVzXSwgbnVsbCwgY29udGV4dC5lcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgICB2aXNpdERzbE5vZGUodGhpcywgYXN0LCBjb250ZXh0KTtcbiAgICAgICAgLy8gdGhpcyBjaGVja3MgdG8gc2VlIGlmIGFuIGFjdHVhbCBhbmltYXRpb24gaGFwcGVuZWRcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltZWxpbmVzID0gY29udGV4dC50aW1lbGluZXMuZmlsdGVyKGZ1bmN0aW9uICh0aW1lbGluZSkgeyByZXR1cm4gdGltZWxpbmUuY29udGFpbnNBbmltYXRpb24oKTsgfSk7XG4gICAgICAgIGlmICh0aW1lbGluZXMubGVuZ3RoICYmIE9iamVjdC5rZXlzKGZpbmFsU3R5bGVzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRsID0gdGltZWxpbmVzW3RpbWVsaW5lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmICghdGwuYWxsb3dPbmx5VGltZWxpbmVTdHlsZXMoKSkge1xuICAgICAgICAgICAgICAgIHRsLnNldFN0eWxlcyhbZmluYWxTdHlsZXNdLCBudWxsLCBjb250ZXh0LmVycm9ycywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpbWVsaW5lcy5sZW5ndGggPyB0aW1lbGluZXMubWFwKGZ1bmN0aW9uICh0aW1lbGluZSkgeyByZXR1cm4gdGltZWxpbmUuYnVpbGRLZXlmcmFtZXMoKTsgfSkgOlxuICAgICAgICAgICAgW2NyZWF0ZVRpbWVsaW5lSW5zdHJ1Y3Rpb24ocm9vdEVsZW1lbnQsIFtdLCBbXSwgW10sIDAsIDAsICcnLCBmYWxzZSldO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0VHJpZ2dlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIC8vIHRoZXNlIHZhbHVlcyBhcmUgbm90IHZpc2l0ZWQgaW4gdGhpcyBBU1RcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdFN0YXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcbiAgICAgICAgLy8gdGhlc2UgdmFsdWVzIGFyZSBub3QgdmlzaXRlZCBpbiB0aGlzIEFTVFxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0VHJhbnNpdGlvbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIC8vIHRoZXNlIHZhbHVlcyBhcmUgbm90IHZpc2l0ZWQgaW4gdGhpcyBBU1RcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGVDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnRJbnN0cnVjdGlvbnMgPSBjb250ZXh0LnN1Ykluc3RydWN0aW9ucy5jb25zdW1lKGNvbnRleHQuZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50SW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbm5lckNvbnRleHQgPSBjb250ZXh0LmNyZWF0ZVN1YkNvbnRleHQoYXN0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhcnRUaW1lID0gY29udGV4dC5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWU7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbmRUaW1lID0gdGhpcy5fdmlzaXRTdWJJbnN0cnVjdGlvbnMoZWxlbWVudEluc3RydWN0aW9ucywgaW5uZXJDb250ZXh0LCAvKiogQHR5cGUgez99ICovIChpbm5lckNvbnRleHQub3B0aW9ucykpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSAhPSBlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgZG8gdGhpcyBvbiB0aGUgdXBwZXIgY29udGV4dCBiZWNhdXNlIHdlIGNyZWF0ZWQgYSBzdWIgY29udGV4dCBmb3JcbiAgICAgICAgICAgICAgICAvLyB0aGUgc3ViIGNoaWxkIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zZm9ybUludG9OZXdUaW1lbGluZShlbmRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGVSZWYgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbm5lckNvbnRleHQgPSBjb250ZXh0LmNyZWF0ZVN1YkNvbnRleHQoYXN0Lm9wdGlvbnMpO1xuICAgICAgICBpbm5lckNvbnRleHQudHJhbnNmb3JtSW50b05ld1RpbWVsaW5lKCk7XG4gICAgICAgIHRoaXMudmlzaXRSZWZlcmVuY2UoYXN0LmFuaW1hdGlvbiwgaW5uZXJDb250ZXh0KTtcbiAgICAgICAgY29udGV4dC50cmFuc2Zvcm1JbnRvTmV3VGltZWxpbmUoaW5uZXJDb250ZXh0LmN1cnJlbnRUaW1lbGluZS5jdXJyZW50VGltZSk7XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNOb2RlID0gYXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpbnN0cnVjdGlvbnNcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLl92aXNpdFN1Ykluc3RydWN0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25zXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHs/fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoaW5zdHJ1Y3Rpb25zLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXJ0VGltZSA9IGNvbnRleHQuY3VycmVudFRpbWVsaW5lLmN1cnJlbnRUaW1lO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmdXJ0aGVzdFRpbWUgPSBzdGFydFRpbWU7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBzcGVjaWFsLWNhc2UgZm9yIHdoZW4gYSB1c2VyIHdhbnRzIHRvIHNraXAgYSBzdWJcbiAgICAgICAgLy8gYW5pbWF0aW9uIGZyb20gYmVpbmcgZmlyZWQgZW50aXJlbHkuXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiAhPSBudWxsID8gcmVzb2x2ZVRpbWluZ1ZhbHVlKG9wdGlvbnMuZHVyYXRpb24pIDogbnVsbDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVsYXkgPSBvcHRpb25zLmRlbGF5ICE9IG51bGwgPyByZXNvbHZlVGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSkgOiBudWxsO1xuICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluc3RydWN0aW9uVGltaW5ncyA9IGNvbnRleHQuYXBwZW5kSW5zdHJ1Y3Rpb25Ub1RpbWVsaW5lKGluc3RydWN0aW9uLCBkdXJhdGlvbiwgZGVsYXkpO1xuICAgICAgICAgICAgICAgIGZ1cnRoZXN0VGltZSA9XG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KGZ1cnRoZXN0VGltZSwgaW5zdHJ1Y3Rpb25UaW1pbmdzLmR1cmF0aW9uICsgaW5zdHJ1Y3Rpb25UaW1pbmdzLmRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdXJ0aGVzdFRpbWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVGltZWxpbmVCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRSZWZlcmVuY2UgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnVwZGF0ZU9wdGlvbnMoYXN0Lm9wdGlvbnMsIHRydWUpO1xuICAgICAgICB2aXNpdERzbE5vZGUodGhpcywgYXN0LmFuaW1hdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNOb2RlID0gYXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U2VxdWVuY2UgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdWJDb250ZXh0Q291bnQgPSBjb250ZXh0LnN1YkNvbnRleHRDb3VudDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY3R4ID0gY29udGV4dDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9ucyA9IGFzdC5vcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy5wYXJhbXMgfHwgb3B0aW9ucy5kZWxheSkpIHtcbiAgICAgICAgICAgIGN0eCA9IGNvbnRleHQuY3JlYXRlU3ViQ29udGV4dChvcHRpb25zKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2Zvcm1JbnRvTmV3VGltZWxpbmUoKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlbGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3R4LnByZXZpb3VzTm9kZS50eXBlID09IDYgLyogU3R5bGUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmN1cnJlbnRUaW1lbGluZS5zbmFwc2hvdEN1cnJlbnRTdHlsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnByZXZpb3VzTm9kZSA9IERFRkFVTFRfTk9PUF9QUkVWSU9VU19OT0RFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWxheSA9IHJlc29sdmVUaW1pbmdWYWx1ZShvcHRpb25zLmRlbGF5KTtcbiAgICAgICAgICAgICAgICBjdHguZGVsYXlOZXh0U3RlcChkZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzdC5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFzdC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiB2aXNpdERzbE5vZGUoX3RoaXMsIHMsIGN0eCk7IH0pO1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBoZXJlIGp1c3QgaW5jYXNlIHRoZSBpbm5lciBzdGVwcyBvbmx5IGNvbnRhaW4gb3IgZW5kIHdpdGggYSBzdHlsZSgpIGNhbGxcbiAgICAgICAgICAgIGN0eC5jdXJyZW50VGltZWxpbmUuYXBwbHlTdHlsZXNUb0tleWZyYW1lKCk7XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgc29tZSBhbmltYXRpb24gZnVuY3Rpb24gd2l0aGluIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgICAgLy8gZW5kZWQgdXAgY3JlYXRpbmcgYSBzdWIgdGltZWxpbmUgKHdoaWNoIG1lYW5zIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAvLyB0aW1lbGluZSBjYW5ub3Qgb3ZlcmxhcCB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgc2VxdWVuY2UpXG4gICAgICAgICAgICBpZiAoY3R4LnN1YkNvbnRleHRDb3VudCA+IHN1YkNvbnRleHRDb3VudCkge1xuICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm1JbnRvTmV3VGltZWxpbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEdyb3VwID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5uZXJUaW1lbGluZXMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZnVydGhlc3RUaW1lID0gY29udGV4dC5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlbGF5ID0gYXN0Lm9wdGlvbnMgJiYgYXN0Lm9wdGlvbnMuZGVsYXkgPyByZXNvbHZlVGltaW5nVmFsdWUoYXN0Lm9wdGlvbnMuZGVsYXkpIDogMDtcbiAgICAgICAgYXN0LnN0ZXBzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlubmVyQ29udGV4dCA9IGNvbnRleHQuY3JlYXRlU3ViQ29udGV4dChhc3Qub3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgICAgICBpbm5lckNvbnRleHQuZGVsYXlOZXh0U3RlcChkZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aXNpdERzbE5vZGUoX3RoaXMsIHMsIGlubmVyQ29udGV4dCk7XG4gICAgICAgICAgICBmdXJ0aGVzdFRpbWUgPSBNYXRoLm1heChmdXJ0aGVzdFRpbWUsIGlubmVyQ29udGV4dC5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgaW5uZXJUaW1lbGluZXMucHVzaChpbm5lckNvbnRleHQuY3VycmVudFRpbWVsaW5lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoaXMgb3BlcmF0aW9uIGlzIHJ1biBhZnRlciB0aGUgQVNUIGxvb3AgYmVjYXVzZSBvdGhlcndpc2VcbiAgICAgICAgLy8gaWYgdGhlIHBhcmVudCB0aW1lbGluZSdzIGNvbGxlY3RlZCBzdHlsZXMgd2VyZSB1cGRhdGVkIHRoZW5cbiAgICAgICAgLy8gaXQgd291bGQgcGFzcyBpbiBpbnZhbGlkIGRhdGEgaW50byB0aGUgbmV3LXRvLWJlIGZvcmtlZCBpdGVtc1xuICAgICAgICBpbm5lclRpbWVsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uICh0aW1lbGluZSkgeyByZXR1cm4gY29udGV4dC5jdXJyZW50VGltZWxpbmUubWVyZ2VUaW1lbGluZUNvbGxlY3RlZFN0eWxlcyh0aW1lbGluZSk7IH0pO1xuICAgICAgICBjb250ZXh0LnRyYW5zZm9ybUludG9OZXdUaW1lbGluZShmdXJ0aGVzdFRpbWUpO1xuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS5fdmlzaXRUaW1pbmcgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKGFzdCkpLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0clZhbHVlID0gKC8qKiBAdHlwZSB7P30gKi8gKGFzdCkpLnN0clZhbHVlO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltaW5nVmFsdWUgPSBjb250ZXh0LnBhcmFtcyA/IGludGVycG9sYXRlUGFyYW1zKHN0clZhbHVlLCBjb250ZXh0LnBhcmFtcywgY29udGV4dC5lcnJvcnMpIDogc3RyVmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVRpbWluZyh0aW1pbmdWYWx1ZSwgY29udGV4dC5lcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgZHVyYXRpb246IGFzdC5kdXJhdGlvbiwgZGVsYXk6IGFzdC5kZWxheSwgZWFzaW5nOiBhc3QuZWFzaW5nIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEFuaW1hdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0aW1pbmdzID0gY29udGV4dC5jdXJyZW50QW5pbWF0ZVRpbWluZ3MgPSB0aGlzLl92aXNpdFRpbWluZyhhc3QudGltaW5ncywgY29udGV4dCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRpbWVsaW5lID0gY29udGV4dC5jdXJyZW50VGltZWxpbmU7XG4gICAgICAgIGlmICh0aW1pbmdzLmRlbGF5KSB7XG4gICAgICAgICAgICBjb250ZXh0LmluY3JlbWVudFRpbWUodGltaW5ncy5kZWxheSk7XG4gICAgICAgICAgICB0aW1lbGluZS5zbmFwc2hvdEN1cnJlbnRTdHlsZXMoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZSQkMSA9IGFzdC5zdHlsZTtcbiAgICAgICAgaWYgKHN0eWxlJCQxLnR5cGUgPT0gNSAvKiBLZXlmcmFtZXMgKi8pIHtcbiAgICAgICAgICAgIHRoaXMudmlzaXRLZXlmcmFtZXMoc3R5bGUkJDEsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5pbmNyZW1lbnRUaW1lKHRpbWluZ3MuZHVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy52aXNpdFN0eWxlKC8qKiBAdHlwZSB7P30gKi8gKHN0eWxlJCQxKSwgY29udGV4dCk7XG4gICAgICAgICAgICB0aW1lbGluZS5hcHBseVN0eWxlc1RvS2V5ZnJhbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncyA9IG51bGw7XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNOb2RlID0gYXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGFzdFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0aW1lbGluZSA9IGNvbnRleHQuY3VycmVudFRpbWVsaW5lO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0aW1pbmdzID0gLyoqIEB0eXBlIHs/fSAqLyAoKGNvbnRleHQuY3VycmVudEFuaW1hdGVUaW1pbmdzKSk7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBzcGVjaWFsIGNhc2UgZm9yIHdoZW4gYSBzdHlsZSgpIGNhbGxcbiAgICAgICAgLy8gZGlyZWN0bHkgZm9sbG93cyAgYW4gYW5pbWF0ZSgpIGNhbGwgKGJ1dCBub3QgaW5zaWRlIG9mIGFuIGFuaW1hdGUoKSBjYWxsKVxuICAgICAgICBpZiAoIXRpbWluZ3MgJiYgdGltZWxpbmUuZ2V0Q3VycmVudFN0eWxlUHJvcGVydGllcygpLmxlbmd0aCkge1xuICAgICAgICAgICAgdGltZWxpbmUuZm9yd2FyZEZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWFzaW5nID0gKHRpbWluZ3MgJiYgdGltaW5ncy5lYXNpbmcpIHx8IGFzdC5lYXNpbmc7XG4gICAgICAgIGlmIChhc3QuaXNFbXB0eVN0ZXApIHtcbiAgICAgICAgICAgIHRpbWVsaW5lLmFwcGx5RW1wdHlTdGVwKGVhc2luZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aW1lbGluZS5zZXRTdHlsZXMoYXN0LnN0eWxlcywgZWFzaW5nLCBjb250ZXh0LmVycm9ycywgY29udGV4dC5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEtleWZyYW1lcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRBbmltYXRlVGltaW5ncyA9IC8qKiBAdHlwZSB7P30gKi8gKChjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncykpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGFydFRpbWUgPSAoLyoqIEB0eXBlIHs/fSAqLyAoKGNvbnRleHQuY3VycmVudFRpbWVsaW5lKSkpLmR1cmF0aW9uO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkdXJhdGlvbiA9IGN1cnJlbnRBbmltYXRlVGltaW5ncy5kdXJhdGlvbjtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5uZXJDb250ZXh0ID0gY29udGV4dC5jcmVhdGVTdWJDb250ZXh0KCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlubmVyVGltZWxpbmUgPSBpbm5lckNvbnRleHQuY3VycmVudFRpbWVsaW5lO1xuICAgICAgICBpbm5lclRpbWVsaW5lLmVhc2luZyA9IGN1cnJlbnRBbmltYXRlVGltaW5ncy5lYXNpbmc7XG4gICAgICAgIGFzdC5zdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2Zmc2V0ID0gc3RlcC5vZmZzZXQgfHwgMDtcbiAgICAgICAgICAgIGlubmVyVGltZWxpbmUuZm9yd2FyZFRpbWUob2Zmc2V0ICogZHVyYXRpb24pO1xuICAgICAgICAgICAgaW5uZXJUaW1lbGluZS5zZXRTdHlsZXMoc3RlcC5zdHlsZXMsIHN0ZXAuZWFzaW5nLCBjb250ZXh0LmVycm9ycywgY29udGV4dC5vcHRpb25zKTtcbiAgICAgICAgICAgIGlubmVyVGltZWxpbmUuYXBwbHlTdHlsZXNUb0tleWZyYW1lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0aGlzIHdpbGwgZW5zdXJlIHRoYXQgdGhlIHBhcmVudCB0aW1lbGluZSBnZXRzIGFsbCB0aGUgc3R5bGVzIGZyb21cbiAgICAgICAgLy8gdGhlIGNoaWxkIGV2ZW4gaWYgdGhlIG5ldyB0aW1lbGluZSBiZWxvdyBpcyBub3QgdXNlZFxuICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lbGluZS5tZXJnZVRpbWVsaW5lQ29sbGVjdGVkU3R5bGVzKGlubmVyVGltZWxpbmUpO1xuICAgICAgICAvLyB3ZSBkbyB0aGlzIGJlY2F1c2UgdGhlIHdpbmRvdyBiZXR3ZWVuIHRoaXMgdGltZWxpbmUgYW5kIHRoZSBzdWIgdGltZWxpbmVcbiAgICAgICAgLy8gc2hvdWxkIGVuc3VyZSB0aGF0IHRoZSBzdHlsZXMgd2l0aGluIGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIHRoZXkgd2VyZSBiZWZvcmVcbiAgICAgICAgY29udGV4dC50cmFuc2Zvcm1JbnRvTmV3VGltZWxpbmUoc3RhcnRUaW1lICsgZHVyYXRpb24pO1xuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdFF1ZXJ5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGZpcnN0IHN0ZXAgYmVmb3JlIHRoaXMgaXMgYSBzdHlsZSBzdGVwIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gZW5zdXJlIHRoZSBzdHlsZXMgYXJlIGFwcGxpZWQgYmVmb3JlIHRoZSBjaGlsZHJlbiBhcmUgYW5pbWF0ZWRcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhcnRUaW1lID0gY29udGV4dC5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9wdGlvbnMgPSAvKiogQHR5cGUgez99ICovICgoYXN0Lm9wdGlvbnMgfHwge30pKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVsYXkgPSBvcHRpb25zLmRlbGF5ID8gcmVzb2x2ZVRpbWluZ1ZhbHVlKG9wdGlvbnMuZGVsYXkpIDogMDtcbiAgICAgICAgaWYgKGRlbGF5ICYmIChjb250ZXh0LnByZXZpb3VzTm9kZS50eXBlID09PSA2IC8qIFN0eWxlICovIHx8XG4gICAgICAgICAgICAoc3RhcnRUaW1lID09IDAgJiYgY29udGV4dC5jdXJyZW50VGltZWxpbmUuZ2V0Q3VycmVudFN0eWxlUHJvcGVydGllcygpLmxlbmd0aCkpKSB7XG4gICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaW1lbGluZS5zbmFwc2hvdEN1cnJlbnRTdHlsZXMoKTtcbiAgICAgICAgICAgIGNvbnRleHQucHJldmlvdXNOb2RlID0gREVGQVVMVF9OT09QX1BSRVZJT1VTX05PREU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZnVydGhlc3RUaW1lID0gc3RhcnRUaW1lO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbG1zID0gY29udGV4dC5pbnZva2VRdWVyeShhc3Quc2VsZWN0b3IsIGFzdC5vcmlnaW5hbFNlbGVjdG9yLCBhc3QubGltaXQsIGFzdC5pbmNsdWRlU2VsZiwgb3B0aW9ucy5vcHRpb25hbCA/IHRydWUgOiBmYWxzZSwgY29udGV4dC5lcnJvcnMpO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRRdWVyeVRvdGFsID0gZWxtcy5sZW5ndGg7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNhbWVFbGVtZW50VGltZWxpbmUgPSBudWxsO1xuICAgICAgICBlbG1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGkpIHtcbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5SW5kZXggPSBpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5uZXJDb250ZXh0ID0gY29udGV4dC5jcmVhdGVTdWJDb250ZXh0KGFzdC5vcHRpb25zLCBlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgICAgIGlubmVyQ29udGV4dC5kZWxheU5leHRTdGVwKGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSBjb250ZXh0LmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzYW1lRWxlbWVudFRpbWVsaW5lID0gaW5uZXJDb250ZXh0LmN1cnJlbnRUaW1lbGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpc2l0RHNsTm9kZShfdGhpcywgYXN0LmFuaW1hdGlvbiwgaW5uZXJDb250ZXh0KTtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgaGVyZSBqdXN0IGluY2FzZSB0aGUgaW5uZXIgc3RlcHMgb25seSBjb250YWluIG9yIGVuZFxuICAgICAgICAgICAgLy8gd2l0aCBhIHN0eWxlKCkgY2FsbCAod2hpY2ggaXMgaGVyZSB0byBzaWduYWwgdGhhdCB0aGlzIGlzIGEgcHJlcGFyYXRvcnlcbiAgICAgICAgICAgIC8vIGNhbGwgdG8gc3R5bGUgYW4gZWxlbWVudCBiZWZvcmUgaXQgaXMgYW5pbWF0ZWQgYWdhaW4pXG4gICAgICAgICAgICBpbm5lckNvbnRleHQuY3VycmVudFRpbWVsaW5lLmFwcGx5U3R5bGVzVG9LZXlmcmFtZSgpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW5kVGltZSA9IGlubmVyQ29udGV4dC5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWU7XG4gICAgICAgICAgICBmdXJ0aGVzdFRpbWUgPSBNYXRoLm1heChmdXJ0aGVzdFRpbWUsIGVuZFRpbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5jdXJyZW50UXVlcnlJbmRleCA9IDA7XG4gICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5VG90YWwgPSAwO1xuICAgICAgICBjb250ZXh0LnRyYW5zZm9ybUludG9OZXdUaW1lbGluZShmdXJ0aGVzdFRpbWUpO1xuICAgICAgICBpZiAoc2FtZUVsZW1lbnRUaW1lbGluZSkge1xuICAgICAgICAgICAgY29udGV4dC5jdXJyZW50VGltZWxpbmUubWVyZ2VUaW1lbGluZUNvbGxlY3RlZFN0eWxlcyhzYW1lRWxlbWVudFRpbWVsaW5lKTtcbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudFRpbWVsaW5lLnNuYXBzaG90Q3VycmVudFN0eWxlcygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNOb2RlID0gYXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhc3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3RhZ2dlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudENvbnRleHQgPSAvKiogQHR5cGUgez99ICovICgoY29udGV4dC5wYXJlbnRDb250ZXh0KSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRsID0gY29udGV4dC5jdXJyZW50VGltZWxpbmU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRpbWluZ3MgPSBhc3QudGltaW5ncztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZHVyYXRpb24gPSBNYXRoLmFicyh0aW1pbmdzLmR1cmF0aW9uKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWF4VGltZSA9IGR1cmF0aW9uICogKGNvbnRleHQuY3VycmVudFF1ZXJ5VG90YWwgLSAxKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVsYXkgPSBkdXJhdGlvbiAqIGNvbnRleHQuY3VycmVudFF1ZXJ5SW5kZXg7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YWdnZXJUcmFuc2Zvcm1lciA9IHRpbWluZ3MuZHVyYXRpb24gPCAwID8gJ3JldmVyc2UnIDogdGltaW5ncy5lYXNpbmc7XG4gICAgICAgIHN3aXRjaCAoc3RhZ2dlclRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICBjYXNlICdyZXZlcnNlJzpcbiAgICAgICAgICAgICAgICBkZWxheSA9IG1heFRpbWUgLSBkZWxheTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Z1bGwnOlxuICAgICAgICAgICAgICAgIGRlbGF5ID0gcGFyZW50Q29udGV4dC5jdXJyZW50U3RhZ2dlclRpbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltZWxpbmUgPSBjb250ZXh0LmN1cnJlbnRUaW1lbGluZTtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICB0aW1lbGluZS5kZWxheU5leHRTdGVwKGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGFydGluZ1RpbWUgPSB0aW1lbGluZS5jdXJyZW50VGltZTtcbiAgICAgICAgdmlzaXREc2xOb2RlKHRoaXMsIGFzdC5hbmltYXRpb24sIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IGFzdDtcbiAgICAgICAgLy8gdGltZSA9IGR1cmF0aW9uICsgZGVsYXlcbiAgICAgICAgLy8gdGhlIHJlYXNvbiB3aHkgdGhpcyBjb21wdXRhdGlvbiBpcyBzbyBjb21wbGV4IGlzIGJlY2F1c2VcbiAgICAgICAgLy8gdGhlIGlubmVyIHRpbWVsaW5lIG1heSBlaXRoZXIgaGF2ZSBhIGRlbGF5IHZhbHVlIG9yIGEgc3RyZXRjaGVkXG4gICAgICAgIC8vIGtleWZyYW1lIGRlcGVuZGluZyBvbiBpZiBhIHN1YnRpbWVsaW5lIGlzIG5vdCB1c2VkIG9yIGlzIHVzZWQuXG4gICAgICAgIHBhcmVudENvbnRleHQuY3VycmVudFN0YWdnZXJUaW1lID1cbiAgICAgICAgICAgICh0bC5jdXJyZW50VGltZSAtIHN0YXJ0aW5nVGltZSkgKyAodGwuc3RhcnRUaW1lIC0gcGFyZW50Q29udGV4dC5jdXJyZW50VGltZWxpbmUuc3RhcnRUaW1lKTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25UaW1lbGluZUJ1aWxkZXJWaXNpdG9yO1xufSgpKTtcbnZhciBERUZBVUxUX05PT1BfUFJFVklPVVNfTk9ERSA9IC8qKiBAdHlwZSB7P30gKi8gKHt9KTtcbnZhciBBbmltYXRpb25UaW1lbGluZUNvbnRleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uVGltZWxpbmVDb250ZXh0KF9kcml2ZXIsIGVsZW1lbnQsIHN1Ykluc3RydWN0aW9ucywgX2VudGVyQ2xhc3NOYW1lLCBfbGVhdmVDbGFzc05hbWUsIGVycm9ycywgdGltZWxpbmVzLCBpbml0aWFsVGltZWxpbmUpIHtcbiAgICAgICAgdGhpcy5fZHJpdmVyID0gX2RyaXZlcjtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5zdWJJbnN0cnVjdGlvbnMgPSBzdWJJbnN0cnVjdGlvbnM7XG4gICAgICAgIHRoaXMuX2VudGVyQ2xhc3NOYW1lID0gX2VudGVyQ2xhc3NOYW1lO1xuICAgICAgICB0aGlzLl9sZWF2ZUNsYXNzTmFtZSA9IF9sZWF2ZUNsYXNzTmFtZTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHRoaXMudGltZWxpbmVzID0gdGltZWxpbmVzO1xuICAgICAgICB0aGlzLnBhcmVudENvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRlVGltaW5ncyA9IG51bGw7XG4gICAgICAgIHRoaXMucHJldmlvdXNOb2RlID0gREVGQVVMVF9OT09QX1BSRVZJT1VTX05PREU7XG4gICAgICAgIHRoaXMuc3ViQ29udGV4dENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICAgIHRoaXMuY3VycmVudFF1ZXJ5SW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRRdWVyeVRvdGFsID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhZ2dlclRpbWUgPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lbGluZSA9IGluaXRpYWxUaW1lbGluZSB8fCBuZXcgVGltZWxpbmVCdWlsZGVyKHRoaXMuX2RyaXZlciwgZWxlbWVudCwgMCk7XG4gICAgICAgIHRpbWVsaW5lcy5wdXNoKHRoaXMuY3VycmVudFRpbWVsaW5lKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dC5wcm90b3R5cGUsIFwicGFyYW1zXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMub3B0aW9ucy5wYXJhbXM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7Pz19IHNraXBJZkV4aXN0c1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVGltZWxpbmVDb250ZXh0LnByb3RvdHlwZS51cGRhdGVPcHRpb25zID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHs/PX0gc2tpcElmRXhpc3RzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAob3B0aW9ucywgc2tpcElmRXhpc3RzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV3T3B0aW9ucyA9IC8qKiBAdHlwZSB7P30gKi8gKG9wdGlvbnMpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvcHRpb25zVG9VcGRhdGUgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIC8vIE5PVEU6IHRoaXMgd2lsbCBnZXQgcGF0Y2hlZCB1cCB3aGVuIG90aGVyIGFuaW1hdGlvbiBtZXRob2RzIHN1cHBvcnQgZHVyYXRpb24gb3ZlcnJpZGVzXG4gICAgICAgIGlmIChuZXdPcHRpb25zLmR1cmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovIChvcHRpb25zVG9VcGRhdGUpKS5kdXJhdGlvbiA9IHJlc29sdmVUaW1pbmdWYWx1ZShuZXdPcHRpb25zLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3T3B0aW9ucy5kZWxheSAhPSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zVG9VcGRhdGUuZGVsYXkgPSByZXNvbHZlVGltaW5nVmFsdWUobmV3T3B0aW9ucy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV3UGFyYW1zID0gbmV3T3B0aW9ucy5wYXJhbXM7XG4gICAgICAgIGlmIChuZXdQYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtc1RvVXBkYXRlXzEgPSAvKiogQHR5cGUgez99ICovICgob3B0aW9uc1RvVXBkYXRlLnBhcmFtcykpO1xuICAgICAgICAgICAgaWYgKCFwYXJhbXNUb1VwZGF0ZV8xKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zVG9VcGRhdGVfMSA9IHRoaXMub3B0aW9ucy5wYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG5ld1BhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICghc2tpcElmRXhpc3RzIHx8ICFwYXJhbXNUb1VwZGF0ZV8xLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1RvVXBkYXRlXzFbbmFtZV0gPSBpbnRlcnBvbGF0ZVBhcmFtcyhuZXdQYXJhbXNbbmFtZV0sIHBhcmFtc1RvVXBkYXRlXzEsIF90aGlzLmVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVGltZWxpbmVDb250ZXh0LnByb3RvdHlwZS5fY29weU9wdGlvbnMgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbGRQYXJhbXNfMSA9IHRoaXMub3B0aW9ucy5wYXJhbXM7XG4gICAgICAgICAgICBpZiAob2xkUGFyYW1zXzEpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXNfMSA9IG9wdGlvbnNbJ3BhcmFtcyddID0ge307XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMob2xkUGFyYW1zXzEpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcGFyYW1zXzFbbmFtZV0gPSBvbGRQYXJhbXNfMVtuYW1lXTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHs/PX0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Pz19IG5ld1RpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlU3ViQ29udGV4dCA9IC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/PX0gbmV3VGltZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG9wdGlvbnMsIGVsZW1lbnQsIG5ld1RpbWUpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gbnVsbDsgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0YXJnZXQgPSBlbGVtZW50IHx8IHRoaXMuZWxlbWVudDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29udGV4dCA9IG5ldyBBbmltYXRpb25UaW1lbGluZUNvbnRleHQodGhpcy5fZHJpdmVyLCB0YXJnZXQsIHRoaXMuc3ViSW5zdHJ1Y3Rpb25zLCB0aGlzLl9lbnRlckNsYXNzTmFtZSwgdGhpcy5fbGVhdmVDbGFzc05hbWUsIHRoaXMuZXJyb3JzLCB0aGlzLnRpbWVsaW5lcywgdGhpcy5jdXJyZW50VGltZWxpbmUuZm9yayh0YXJnZXQsIG5ld1RpbWUgfHwgMCkpO1xuICAgICAgICBjb250ZXh0LnByZXZpb3VzTm9kZSA9IHRoaXMucHJldmlvdXNOb2RlO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRBbmltYXRlVGltaW5ncyA9IHRoaXMuY3VycmVudEFuaW1hdGVUaW1pbmdzO1xuICAgICAgICBjb250ZXh0Lm9wdGlvbnMgPSB0aGlzLl9jb3B5T3B0aW9ucygpO1xuICAgICAgICBjb250ZXh0LnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnRleHQuY3VycmVudFF1ZXJ5SW5kZXggPSB0aGlzLmN1cnJlbnRRdWVyeUluZGV4O1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRRdWVyeVRvdGFsID0gdGhpcy5jdXJyZW50UXVlcnlUb3RhbDtcbiAgICAgICAgY29udGV4dC5wYXJlbnRDb250ZXh0ID0gdGhpcztcbiAgICAgICAgdGhpcy5zdWJDb250ZXh0Q291bnQrKztcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez89fSBuZXdUaW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUNvbnRleHQucHJvdG90eXBlLnRyYW5zZm9ybUludG9OZXdUaW1lbGluZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IG5ld1RpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuZXdUaW1lKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNOb2RlID0gREVGQVVMVF9OT09QX1BSRVZJT1VTX05PREU7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVsaW5lID0gdGhpcy5jdXJyZW50VGltZWxpbmUuZm9yayh0aGlzLmVsZW1lbnQsIG5ld1RpbWUpO1xuICAgICAgICB0aGlzLnRpbWVsaW5lcy5wdXNoKHRoaXMuY3VycmVudFRpbWVsaW5lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWVsaW5lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpbnN0cnVjdGlvblxuICAgICAqIEBwYXJhbSB7P30gZHVyYXRpb25cbiAgICAgKiBAcGFyYW0gez99IGRlbGF5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UaW1lbGluZUNvbnRleHQucHJvdG90eXBlLmFwcGVuZEluc3RydWN0aW9uVG9UaW1lbGluZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25cbiAgICAgKiBAcGFyYW0gez99IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHs/fSBkZWxheVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGluc3RydWN0aW9uLCBkdXJhdGlvbiwgZGVsYXkpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdXBkYXRlZFRpbWluZ3MgPSB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gIT0gbnVsbCA/IGR1cmF0aW9uIDogaW5zdHJ1Y3Rpb24uZHVyYXRpb24sXG4gICAgICAgICAgICBkZWxheTogdGhpcy5jdXJyZW50VGltZWxpbmUuY3VycmVudFRpbWUgKyAoZGVsYXkgIT0gbnVsbCA/IGRlbGF5IDogMCkgKyBpbnN0cnVjdGlvbi5kZWxheSxcbiAgICAgICAgICAgIGVhc2luZzogJydcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYnVpbGRlciA9IG5ldyBTdWJUaW1lbGluZUJ1aWxkZXIodGhpcy5fZHJpdmVyLCBpbnN0cnVjdGlvbi5lbGVtZW50LCBpbnN0cnVjdGlvbi5rZXlmcmFtZXMsIGluc3RydWN0aW9uLnByZVN0eWxlUHJvcHMsIGluc3RydWN0aW9uLnBvc3RTdHlsZVByb3BzLCB1cGRhdGVkVGltaW5ncywgaW5zdHJ1Y3Rpb24uc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWUpO1xuICAgICAgICB0aGlzLnRpbWVsaW5lcy5wdXNoKGJ1aWxkZXIpO1xuICAgICAgICByZXR1cm4gdXBkYXRlZFRpbWluZ3M7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dC5wcm90b3R5cGUuaW5jcmVtZW50VGltZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGltZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZWxpbmUuZm9yd2FyZFRpbWUodGhpcy5jdXJyZW50VGltZWxpbmUuZHVyYXRpb24gKyB0aW1lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZGVsYXlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dC5wcm90b3R5cGUuZGVsYXlOZXh0U3RlcCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZGVsYXlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICAvLyBuZWdhdGl2ZSBkZWxheXMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkXG4gICAgICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWVsaW5lLmRlbGF5TmV4dFN0ZXAoZGVsYXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBvcmlnaW5hbFNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBsaW1pdFxuICAgICAqIEBwYXJhbSB7P30gaW5jbHVkZVNlbGZcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbmFsXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dC5wcm90b3R5cGUuaW52b2tlUXVlcnkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBvcmlnaW5hbFNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/fSBsaW1pdFxuICAgICAqIEBwYXJhbSB7P30gaW5jbHVkZVNlbGZcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbmFsXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3Rvciwgb3JpZ2luYWxTZWxlY3RvciwgbGltaXQsIGluY2x1ZGVTZWxmLCBvcHRpb25hbCwgZXJyb3JzKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgaWYgKGluY2x1ZGVTZWxmKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0b3IubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgOnNlbGYgaXMgb25seSB1c2VkIHRoZW4gdGhlIHNlbGVjdG9yIGlzIGVtcHR5XG4gICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoRU5URVJfVE9LRU5fUkVHRVgsICcuJyArIHRoaXMuX2VudGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShMRUFWRV9UT0tFTl9SRUdFWCwgJy4nICsgdGhpcy5fbGVhdmVDbGFzc05hbWUpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbXVsdGkgPSBsaW1pdCAhPSAxO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudHMgPSB0aGlzLl9kcml2ZXIucXVlcnkodGhpcy5lbGVtZW50LCBzZWxlY3RvciwgbXVsdGkpO1xuICAgICAgICAgICAgaWYgKGxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMgPSBsaW1pdCA8IDAgPyBlbGVtZW50cy5zbGljZShlbGVtZW50cy5sZW5ndGggKyBsaW1pdCwgZWxlbWVudHMubGVuZ3RoKSA6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnNsaWNlKDAsIGxpbWl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25hbCAmJiByZXN1bHRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChcImBxdWVyeShcXFwiXCIgKyBvcmlnaW5hbFNlbGVjdG9yICsgXCJcXFwiKWAgcmV0dXJuZWQgemVybyBlbGVtZW50cy4gKFVzZSBgcXVlcnkoXFxcIlwiICsgb3JpZ2luYWxTZWxlY3RvciArIFwiXFxcIiwgeyBvcHRpb25hbDogdHJ1ZSB9KWAgaWYgeW91IHdpc2ggdG8gYWxsb3cgdGhpcy4pXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvblRpbWVsaW5lQ29udGV4dDtcbn0oKSk7XG52YXIgVGltZWxpbmVCdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lQnVpbGRlcihfZHJpdmVyLCBlbGVtZW50LCBzdGFydFRpbWUsIF9lbGVtZW50VGltZWxpbmVTdHlsZXNMb29rdXApIHtcbiAgICAgICAgdGhpcy5fZHJpdmVyID0gX2RyaXZlcjtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRUaW1lbGluZVN0eWxlc0xvb2t1cCA9IF9lbGVtZW50VGltZWxpbmVTdHlsZXNMb29rdXA7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9wcmV2aW91c0tleWZyYW1lID0ge307XG4gICAgICAgIHRoaXMuX2N1cnJlbnRLZXlmcmFtZSA9IHt9O1xuICAgICAgICB0aGlzLl9rZXlmcmFtZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3N0eWxlU3VtbWFyeSA9IHt9O1xuICAgICAgICB0aGlzLl9wZW5kaW5nU3R5bGVzID0ge307XG4gICAgICAgIHRoaXMuX2JhY2tGaWxsID0ge307XG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbXB0eVN0ZXBLZXlmcmFtZSA9IG51bGw7XG4gICAgICAgIGlmICghdGhpcy5fZWxlbWVudFRpbWVsaW5lU3R5bGVzTG9va3VwKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50VGltZWxpbmVTdHlsZXNMb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9jYWxUaW1lbGluZVN0eWxlcyA9IE9iamVjdC5jcmVhdGUodGhpcy5fYmFja0ZpbGwsIHt9KTtcbiAgICAgICAgdGhpcy5fZ2xvYmFsVGltZWxpbmVTdHlsZXMgPSAvKiogQHR5cGUgez99ICovICgodGhpcy5fZWxlbWVudFRpbWVsaW5lU3R5bGVzTG9va3VwLmdldChlbGVtZW50KSkpO1xuICAgICAgICBpZiAoIXRoaXMuX2dsb2JhbFRpbWVsaW5lU3R5bGVzKSB7XG4gICAgICAgICAgICB0aGlzLl9nbG9iYWxUaW1lbGluZVN0eWxlcyA9IHRoaXMuX2xvY2FsVGltZWxpbmVTdHlsZXM7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50VGltZWxpbmVTdHlsZXNMb29rdXAuc2V0KGVsZW1lbnQsIHRoaXMuX2xvY2FsVGltZWxpbmVTdHlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvYWRLZXlmcmFtZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuY29udGFpbnNBbmltYXRpb24gPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9rZXlmcmFtZXMuc2l6ZSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50U3R5bGVQcm9wZXJ0aWVzKCkubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5nZXRDdXJyZW50U3R5bGVQcm9wZXJ0aWVzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9jdXJyZW50S2V5ZnJhbWUpOyB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lbGluZUJ1aWxkZXIucHJvdG90eXBlLCBcImN1cnJlbnRUaW1lXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuc3RhcnRUaW1lICsgdGhpcy5kdXJhdGlvbjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBkZWxheVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5kZWxheU5leHRTdGVwID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBkZWxheVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgIC8vIGluIHRoZSBldmVudCB0aGF0IGEgc3R5bGUoKSBzdGVwIGlzIHBsYWNlZCByaWdodCBiZWZvcmUgYSBzdGFnZ2VyKClcbiAgICAgICAgLy8gYW5kIHRoYXQgc3R5bGUoKSBzdGVwIGlzIHRoZSB2ZXJ5IGZpcnN0IHN0eWxlKCkgdmFsdWUgaW4gdGhlIGFuaW1hdGlvblxuICAgICAgICAvLyB0aGVuIHdlIG5lZWQgdG8gbWFrZSBhIGNvcHkgb2YgdGhlIGtleWZyYW1lIFswLCBjb3B5LCAxXSBzbyB0aGF0IHRoZSBkZWxheVxuICAgICAgICAvLyBwcm9wZXJseSBhcHBsaWVzIHRoZSBzdHlsZSgpIHZhbHVlcyB0byB3b3JrIHdpdGggdGhlIHN0YWdnZXIuLi5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGFzUHJlU3R5bGVTdGVwID0gdGhpcy5fa2V5ZnJhbWVzLnNpemUgPT0gMSAmJiBPYmplY3Qua2V5cyh0aGlzLl9wZW5kaW5nU3R5bGVzKS5sZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLmR1cmF0aW9uIHx8IGhhc1ByZVN0eWxlU3RlcCkge1xuICAgICAgICAgICAgdGhpcy5mb3J3YXJkVGltZSh0aGlzLmN1cnJlbnRUaW1lICsgZGVsYXkpO1xuICAgICAgICAgICAgaWYgKGhhc1ByZVN0eWxlU3RlcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc25hcHNob3RDdXJyZW50U3R5bGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSArPSBkZWxheTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/PX0gY3VycmVudFRpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuZm9yayA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Pz19IGN1cnJlbnRUaW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgY3VycmVudFRpbWUpIHtcbiAgICAgICAgdGhpcy5hcHBseVN0eWxlc1RvS2V5ZnJhbWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW1lbGluZUJ1aWxkZXIodGhpcy5fZHJpdmVyLCBlbGVtZW50LCBjdXJyZW50VGltZSB8fCB0aGlzLmN1cnJlbnRUaW1lLCB0aGlzLl9lbGVtZW50VGltZWxpbmVTdHlsZXNMb29rdXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUaW1lbGluZUJ1aWxkZXIucHJvdG90eXBlLl9sb2FkS2V5ZnJhbWUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRLZXlmcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNLZXlmcmFtZSA9IHRoaXMuX2N1cnJlbnRLZXlmcmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50S2V5ZnJhbWUgPSAvKiogQHR5cGUgez99ICovICgodGhpcy5fa2V5ZnJhbWVzLmdldCh0aGlzLmR1cmF0aW9uKSkpO1xuICAgICAgICBpZiAoIXRoaXMuX2N1cnJlbnRLZXlmcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudEtleWZyYW1lID0gT2JqZWN0LmNyZWF0ZSh0aGlzLl9iYWNrRmlsbCwge30pO1xuICAgICAgICAgICAgdGhpcy5fa2V5ZnJhbWVzLnNldCh0aGlzLmR1cmF0aW9uLCB0aGlzLl9jdXJyZW50S2V5ZnJhbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuZm9yd2FyZEZyYW1lID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gKz0gT05FX0ZSQU1FX0lOX01JTExJU0VDT05EUztcbiAgICAgICAgdGhpcy5fbG9hZEtleWZyYW1lKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuZm9yd2FyZFRpbWUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRpbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIHRoaXMuYXBwbHlTdHlsZXNUb0tleWZyYW1lKCk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB0aGlzLl9sb2FkS2V5ZnJhbWUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvcFxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuX3VwZGF0ZVN0eWxlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm9wXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsVGltZWxpbmVTdHlsZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fZ2xvYmFsVGltZWxpbmVTdHlsZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fc3R5bGVTdW1tYXJ5W3Byb3BdID0geyB0aW1lOiB0aGlzLmN1cnJlbnRUaW1lLCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5hbGxvd09ubHlUaW1lbGluZVN0eWxlcyA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY3VycmVudEVtcHR5U3RlcEtleWZyYW1lICE9PSB0aGlzLl9jdXJyZW50S2V5ZnJhbWU7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlYXNpbmdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuYXBwbHlFbXB0eVN0ZXAgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVhc2luZ1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVhc2luZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZWFzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c0tleWZyYW1lWydlYXNpbmcnXSA9IGVhc2luZztcbiAgICAgICAgfVxuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGFuaW1hdGUoZHVyYXRpb24pOlxuICAgICAgICAvLyBhbGwgbWlzc2luZyBzdHlsZXMgYXJlIGZpbGxlZCB3aXRoIGEgYCpgIHZhbHVlIHRoZW5cbiAgICAgICAgLy8gaWYgYW55IGRlc3RpbmF0aW9uIHN0eWxlcyBhcmUgZmlsbGVkIGluIGxhdGVyIG9uIHRoZSBzYW1lXG4gICAgICAgIC8vIGtleWZyYW1lIHRoZW4gdGhleSB3aWxsIG92ZXJyaWRlIHRoZSBvdmVycmlkZGVuIHN0eWxlc1xuICAgICAgICAvLyBXZSB1c2UgYF9nbG9iYWxUaW1lbGluZVN0eWxlc2AgaGVyZSBiZWNhdXNlIHRoZXJlIG1heSBiZVxuICAgICAgICAvLyBzdHlsZXMgaW4gcHJldmlvdXMga2V5ZnJhbWVzIHRoYXQgYXJlIG5vdCBwcmVzZW50IGluIHRoaXMgdGltZWxpbmVcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fZ2xvYmFsVGltZWxpbmVTdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIF90aGlzLl9iYWNrRmlsbFtwcm9wXSA9IF90aGlzLl9nbG9iYWxUaW1lbGluZVN0eWxlc1twcm9wXSB8fCBfYW5ndWxhcl9hbmltYXRpb25zLkFVVE9fU1RZTEU7XG4gICAgICAgICAgICBfdGhpcy5fY3VycmVudEtleWZyYW1lW3Byb3BdID0gX2FuZ3VsYXJfYW5pbWF0aW9ucy5BVVRPX1NUWUxFO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY3VycmVudEVtcHR5U3RlcEtleWZyYW1lID0gdGhpcy5fY3VycmVudEtleWZyYW1lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpbnB1dFxuICAgICAqIEBwYXJhbSB7P30gZWFzaW5nXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUaW1lbGluZUJ1aWxkZXIucHJvdG90eXBlLnNldFN0eWxlcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5wdXRcbiAgICAgKiBAcGFyYW0gez99IGVhc2luZ1xuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGlucHV0LCBlYXNpbmcsIGVycm9ycywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZWFzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c0tleWZyYW1lWydlYXNpbmcnXSA9IGVhc2luZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXMgPSAob3B0aW9ucyAmJiBvcHRpb25zLnBhcmFtcykgfHwge307XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlcyA9IGZsYXR0ZW5TdHlsZXMoaW5wdXQsIHRoaXMuX2dsb2JhbFRpbWVsaW5lU3R5bGVzKTtcbiAgICAgICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWwgPSBpbnRlcnBvbGF0ZVBhcmFtcyhzdHlsZXNbcHJvcF0sIHBhcmFtcywgZXJyb3JzKTtcbiAgICAgICAgICAgIF90aGlzLl9wZW5kaW5nU3R5bGVzW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5fbG9jYWxUaW1lbGluZVN0eWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9iYWNrRmlsbFtwcm9wXSA9IF90aGlzLl9nbG9iYWxUaW1lbGluZVN0eWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSA/XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9nbG9iYWxUaW1lbGluZVN0eWxlc1twcm9wXSA6XG4gICAgICAgICAgICAgICAgICAgIF9hbmd1bGFyX2FuaW1hdGlvbnMuQVVUT19TVFlMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVTdHlsZShwcm9wLCB2YWwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5hcHBseVN0eWxlc1RvS2V5ZnJhbWUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzID0gdGhpcy5fcGVuZGluZ1N0eWxlcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZXMpO1xuICAgICAgICBpZiAocHJvcHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTdHlsZXMgPSB7fTtcbiAgICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsID0gc3R5bGVzW3Byb3BdO1xuICAgICAgICAgICAgX3RoaXMuX2N1cnJlbnRLZXlmcmFtZVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2xvY2FsVGltZWxpbmVTdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2N1cnJlbnRLZXlmcmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jdXJyZW50S2V5ZnJhbWVbcHJvcF0gPSBfdGhpcy5fbG9jYWxUaW1lbGluZVN0eWxlc1twcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuc25hcHNob3RDdXJyZW50U3R5bGVzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2xvY2FsVGltZWxpbmVTdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbCA9IF90aGlzLl9sb2NhbFRpbWVsaW5lU3R5bGVzW3Byb3BdO1xuICAgICAgICAgICAgX3RoaXMuX3BlbmRpbmdTdHlsZXNbcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlU3R5bGUocHJvcCwgdmFsKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuZ2V0RmluYWxLZXlmcmFtZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fa2V5ZnJhbWVzLmdldCh0aGlzLmR1cmF0aW9uKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZSwgXCJwcm9wZXJ0aWVzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3BlcnRpZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcCBpbiB0aGlzLl9jdXJyZW50S2V5ZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0aW1lbGluZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5tZXJnZVRpbWVsaW5lQ29sbGVjdGVkU3R5bGVzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0aW1lbGluZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRpbWVsaW5lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHRpbWVsaW5lLl9zdHlsZVN1bW1hcnkpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRldGFpbHMwID0gX3RoaXMuX3N0eWxlU3VtbWFyeVtwcm9wXTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRldGFpbHMxID0gdGltZWxpbmUuX3N0eWxlU3VtbWFyeVtwcm9wXTtcbiAgICAgICAgICAgIGlmICghZGV0YWlsczAgfHwgZGV0YWlsczEudGltZSA+IGRldGFpbHMwLnRpbWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlU3R5bGUocHJvcCwgZGV0YWlsczEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5idWlsZEtleWZyYW1lcyA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFwcGx5U3R5bGVzVG9LZXlmcmFtZSgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmVTdHlsZVByb3BzID0gbmV3IFNldCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwb3N0U3R5bGVQcm9wcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNFbXB0eSA9IHRoaXMuX2tleWZyYW1lcy5zaXplID09PSAxICYmIHRoaXMuZHVyYXRpb24gPT09IDA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZpbmFsS2V5ZnJhbWVzID0gW107XG4gICAgICAgIHRoaXMuX2tleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXlmcmFtZSwgdGltZSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmluYWxLZXlmcmFtZSA9IGNvcHlTdHlsZXMoa2V5ZnJhbWUsIHRydWUpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZmluYWxLZXlmcmFtZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlID0gZmluYWxLZXlmcmFtZVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gX2FuZ3VsYXJfYW5pbWF0aW9ucy7JtVBSRV9TVFlMRSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVTdHlsZVByb3BzLmFkZChwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gX2FuZ3VsYXJfYW5pbWF0aW9ucy5BVVRPX1NUWUxFKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc3RTdHlsZVByb3BzLmFkZChwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgIGZpbmFsS2V5ZnJhbWVbJ29mZnNldCddID0gdGltZSAvIF90aGlzLmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxLZXlmcmFtZXMucHVzaChmaW5hbEtleWZyYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZVByb3BzID0gcHJlU3R5bGVQcm9wcy5zaXplID8gaXRlcmF0b3JUb0FycmF5KHByZVN0eWxlUHJvcHMudmFsdWVzKCkpIDogW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBvc3RQcm9wcyA9IHBvc3RTdHlsZVByb3BzLnNpemUgPyBpdGVyYXRvclRvQXJyYXkocG9zdFN0eWxlUHJvcHMudmFsdWVzKCkpIDogW107XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgYSAwLXNlY29uZCBhbmltYXRpb24gKHdoaWNoIGlzIGRlc2lnbmVkIGp1c3QgdG8gcGxhY2Ugc3R5bGVzIG9uc2NyZWVuKVxuICAgICAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2YwID0gZmluYWxLZXlmcmFtZXNbMF07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZjEgPSBjb3B5T2JqKGtmMCk7XG4gICAgICAgICAgICBrZjBbJ29mZnNldCddID0gMDtcbiAgICAgICAgICAgIGtmMVsnb2Zmc2V0J10gPSAxO1xuICAgICAgICAgICAgZmluYWxLZXlmcmFtZXMgPSBba2YwLCBrZjFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVUaW1lbGluZUluc3RydWN0aW9uKHRoaXMuZWxlbWVudCwgZmluYWxLZXlmcmFtZXMsIHByZVByb3BzLCBwb3N0UHJvcHMsIHRoaXMuZHVyYXRpb24sIHRoaXMuc3RhcnRUaW1lLCB0aGlzLmVhc2luZywgZmFsc2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lQnVpbGRlcjtcbn0oKSk7XG52YXIgU3ViVGltZWxpbmVCdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJUaW1lbGluZUJ1aWxkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViVGltZWxpbmVCdWlsZGVyKGRyaXZlciwgZWxlbWVudCwga2V5ZnJhbWVzLCBwcmVTdHlsZVByb3BzLCBwb3N0U3R5bGVQcm9wcywgdGltaW5ncywgX3N0cmV0Y2hTdGFydGluZ0tleWZyYW1lKSB7XG4gICAgICAgIGlmIChfc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWUgPT09IHZvaWQgMCkgeyBfc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkcml2ZXIsIGVsZW1lbnQsIHRpbWluZ3MuZGVsYXkpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBfdGhpcy5rZXlmcmFtZXMgPSBrZXlmcmFtZXM7XG4gICAgICAgIF90aGlzLnByZVN0eWxlUHJvcHMgPSBwcmVTdHlsZVByb3BzO1xuICAgICAgICBfdGhpcy5wb3N0U3R5bGVQcm9wcyA9IHBvc3RTdHlsZVByb3BzO1xuICAgICAgICBfdGhpcy5fc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWUgPSBfc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWU7XG4gICAgICAgIF90aGlzLnRpbWluZ3MgPSB7IGR1cmF0aW9uOiB0aW1pbmdzLmR1cmF0aW9uLCBkZWxheTogdGltaW5ncy5kZWxheSwgZWFzaW5nOiB0aW1pbmdzLmVhc2luZyB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU3ViVGltZWxpbmVCdWlsZGVyLnByb3RvdHlwZS5jb250YWluc0FuaW1hdGlvbiA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlmcmFtZXMubGVuZ3RoID4gMTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFN1YlRpbWVsaW5lQnVpbGRlci5wcm90b3R5cGUuYnVpbGRLZXlmcmFtZXMgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2V5ZnJhbWVzID0gdGhpcy5rZXlmcmFtZXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMudGltaW5ncywgZGVsYXkgPSBfYS5kZWxheSwgZHVyYXRpb24gPSBfYS5kdXJhdGlvbiwgZWFzaW5nID0gX2EuZWFzaW5nO1xuICAgICAgICBpZiAodGhpcy5fc3RyZXRjaFN0YXJ0aW5nS2V5ZnJhbWUgJiYgZGVsYXkpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5ld0tleWZyYW1lcyA9IFtdO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdG90YWxUaW1lID0gZHVyYXRpb24gKyBkZWxheTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXJ0aW5nR2FwID0gZGVsYXkgLyB0b3RhbFRpbWU7XG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgc3RhcnRpbmcga2V5ZnJhbWUgbm93IHN0YXJ0cyBvbmNlIHRoZSBkZWxheSBpcyBkb25lXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXdGaXJzdEtleWZyYW1lID0gY29weVN0eWxlcyhrZXlmcmFtZXNbMF0sIGZhbHNlKTtcbiAgICAgICAgICAgIG5ld0ZpcnN0S2V5ZnJhbWVbJ29mZnNldCddID0gMDtcbiAgICAgICAgICAgIG5ld0tleWZyYW1lcy5wdXNoKG5ld0ZpcnN0S2V5ZnJhbWUpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2xkRmlyc3RLZXlmcmFtZSA9IGNvcHlTdHlsZXMoa2V5ZnJhbWVzWzBdLCBmYWxzZSk7XG4gICAgICAgICAgICBvbGRGaXJzdEtleWZyYW1lWydvZmZzZXQnXSA9IHJvdW5kT2Zmc2V0KHN0YXJ0aW5nR2FwKTtcbiAgICAgICAgICAgIG5ld0tleWZyYW1lcy5wdXNoKG9sZEZpcnN0S2V5ZnJhbWUpO1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGUga2V5ZnJhbWUgaXMgc3RyZXRjaGVkIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGUgZGVsYXkgYmVmb3JlIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRzIGlzIGdvbmUuIEluc3RlYWQgdGhlIGZpcnN0IGtleWZyYW1lIGlzIHBsYWNlZCBhdCB0aGUgc3RhcnQgb2YgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICBhbmQgaXQgaXMgdGhlbiBjb3BpZWQgdG8gd2hlcmUgaXQgc3RhcnRzIHdoZW4gdGhlIG9yaWdpbmFsIGRlbGF5IGlzIG92ZXIuIFRoaXMgYmFzaWNhbGx5XG4gICAgICAgICAgICAgICAgICAgIG1lYW5zIG5vdGhpbmcgYW5pbWF0ZXMgZHVyaW5nIHRoYXQgZGVsYXksIGJ1dCB0aGUgc3R5bGVzIGFyZSBzdGlsbCByZW5kZXJlcmVkLiBGb3IgdGhpc1xuICAgICAgICAgICAgICAgICAgICB0byB3b3JrIHRoZSBvcmlnaW5hbCBvZmZzZXQgdmFsdWVzIHRoYXQgZXhpc3QgaW4gdGhlIG9yaWdpbmFsIGtleWZyYW1lcyBtdXN0IGJlIFwid2FycGVkXCJcbiAgICAgICAgICAgICAgICAgICAgc28gdGhhdCB0aGV5IGNhbiB0YWtlIHRoZSBuZXcga2V5ZnJhbWUgKyBkZWxheSBpbnRvIGFjY291bnQuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk9MTAwMCwgZHVyYXRpb249MTAwMCwga2V5ZnJhbWVzID0gMCAuNSAxXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdHVybnMgaW50b1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5PTAsIGR1cmF0aW9uPTIwMDAsIGtleWZyYW1lcyA9IDAgLjMzIC42NiAxXG4gICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIG9mZnNldHMgYmV0d2VlbiAxIC4uLiBuIC0xIGFyZSBhbGwgd2FycGVkIGJ5IHRoZSBrZXlmcmFtZSBzdHJldGNoXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaW1pdCA9IGtleWZyYW1lcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMTsgaSA8PSBsaW1pdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2YgPSBjb3B5U3R5bGVzKGtleWZyYW1lc1tpXSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9sZE9mZnNldCA9IC8qKiBAdHlwZSB7P30gKi8gKGtmWydvZmZzZXQnXSk7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGltZUF0S2V5ZnJhbWUgPSBkZWxheSArIG9sZE9mZnNldCAqIGR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGtmWydvZmZzZXQnXSA9IHJvdW5kT2Zmc2V0KHRpbWVBdEtleWZyYW1lIC8gdG90YWxUaW1lKTtcbiAgICAgICAgICAgICAgICBuZXdLZXlmcmFtZXMucHVzaChrZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGUgbmV3IHN0YXJ0aW5nIGtleWZyYW1lIHNob3VsZCBiZSBhZGRlZCBhdCB0aGUgc3RhcnRcbiAgICAgICAgICAgIGR1cmF0aW9uID0gdG90YWxUaW1lO1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICAgICAgZWFzaW5nID0gJyc7XG4gICAgICAgICAgICBrZXlmcmFtZXMgPSBuZXdLZXlmcmFtZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRpbWVsaW5lSW5zdHJ1Y3Rpb24odGhpcy5lbGVtZW50LCBrZXlmcmFtZXMsIHRoaXMucHJlU3R5bGVQcm9wcywgdGhpcy5wb3N0U3R5bGVQcm9wcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YlRpbWVsaW5lQnVpbGRlcjtcbn0oVGltZWxpbmVCdWlsZGVyKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gb2Zmc2V0XG4gKiBAcGFyYW0gez89fSBkZWNpbWFsUG9pbnRzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByb3VuZE9mZnNldChvZmZzZXQsIGRlY2ltYWxQb2ludHMpIHtcbiAgICBpZiAoZGVjaW1hbFBvaW50cyA9PT0gdm9pZCAwKSB7IGRlY2ltYWxQb2ludHMgPSAzOyB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbXVsdCA9IE1hdGgucG93KDEwLCBkZWNpbWFsUG9pbnRzIC0gMSk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQob2Zmc2V0ICogbXVsdCkgLyBtdWx0O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGlucHV0XG4gKiBAcGFyYW0gez99IGFsbFN0eWxlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZmxhdHRlblN0eWxlcyhpbnB1dCwgYWxsU3R5bGVzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzID0ge307XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYWxsUHJvcGVydGllcztcbiAgICBpbnB1dC5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4gPT09ICcqJykge1xuICAgICAgICAgICAgYWxsUHJvcGVydGllcyA9IGFsbFByb3BlcnRpZXMgfHwgT2JqZWN0LmtleXMoYWxsU3R5bGVzKTtcbiAgICAgICAgICAgIGFsbFByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyBzdHlsZXNbcHJvcF0gPSBfYW5ndWxhcl9hbmltYXRpb25zLkFVVE9fU1RZTEU7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29weVN0eWxlcygvKiogQHR5cGUgez99ICovICh0b2tlbiksIGZhbHNlLCBzdHlsZXMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0eWxlcztcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xudmFyIEFuaW1hdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb24oX2RyaXZlciwgaW5wdXQpIHtcbiAgICAgICAgdGhpcy5fZHJpdmVyID0gX2RyaXZlcjtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFzdCA9IGJ1aWxkQW5pbWF0aW9uQXN0KF9kcml2ZXIsIGlucHV0LCBlcnJvcnMpO1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JNZXNzYWdlID0gXCJhbmltYXRpb24gdmFsaWRhdGlvbiBmYWlsZWQ6XFxuXCIgKyBlcnJvcnMuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkFzdCA9IGFzdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzdGFydGluZ1N0eWxlc1xuICAgICAqIEBwYXJhbSB7P30gZGVzdGluYXRpb25TdHlsZXNcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBzdWJJbnN0cnVjdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuYnVpbGRUaW1lbGluZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0YXJ0aW5nU3R5bGVzXG4gICAgICogQHBhcmFtIHs/fSBkZXN0aW5hdGlvblN0eWxlc1xuICAgICAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7Pz19IHN1Ykluc3RydWN0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIHN0YXJ0aW5nU3R5bGVzLCBkZXN0aW5hdGlvblN0eWxlcywgb3B0aW9ucywgc3ViSW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0YXJ0ID0gQXJyYXkuaXNBcnJheShzdGFydGluZ1N0eWxlcykgPyBub3JtYWxpemVTdHlsZXMoc3RhcnRpbmdTdHlsZXMpIDogLyoqIEB0eXBlIHs/fSAqLyAoc3RhcnRpbmdTdHlsZXMpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXN0ID0gQXJyYXkuaXNBcnJheShkZXN0aW5hdGlvblN0eWxlcykgPyBub3JtYWxpemVTdHlsZXMoZGVzdGluYXRpb25TdHlsZXMpIDogLyoqIEB0eXBlIHs/fSAqLyAoZGVzdGluYXRpb25TdHlsZXMpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlcnJvcnMgPSBbXTtcbiAgICAgICAgc3ViSW5zdHJ1Y3Rpb25zID0gc3ViSW5zdHJ1Y3Rpb25zIHx8IG5ldyBFbGVtZW50SW5zdHJ1Y3Rpb25NYXAoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzdWx0ID0gYnVpbGRBbmltYXRpb25UaW1lbGluZXModGhpcy5fZHJpdmVyLCBlbGVtZW50LCB0aGlzLl9hbmltYXRpb25Bc3QsIEVOVEVSX0NMQVNTTkFNRSwgTEVBVkVfQ0xBU1NOQU1FLCBzdGFydCwgZGVzdCwgb3B0aW9ucywgc3ViSW5zdHJ1Y3Rpb25zLCBlcnJvcnMpO1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JNZXNzYWdlID0gXCJhbmltYXRpb24gYnVpbGRpbmcgZmFpbGVkOlxcblwiICsgZXJyb3JzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbjtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBhYnN0cmFjdFxuICovXG52YXIgQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvblN0eWxlTm9ybWFsaXplcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIEFuaW1hdGlvblN0eWxlTm9ybWFsaXplcjtcbn0oKSk7XG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBOb29wQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXIucHJvdG90eXBlLm5vcm1hbGl6ZVByb3BlcnR5TmFtZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIGVycm9ycykgeyByZXR1cm4gcHJvcGVydHlOYW1lOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXNlclByb3ZpZGVkUHJvcGVydHlcbiAgICAgKiBAcGFyYW0gez99IG5vcm1hbGl6ZWRQcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTm9vcEFuaW1hdGlvblN0eWxlTm9ybWFsaXplci5wcm90b3R5cGUubm9ybWFsaXplU3R5bGVWYWx1ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXNlclByb3ZpZGVkUHJvcGVydHlcbiAgICAgKiBAcGFyYW0gez99IG5vcm1hbGl6ZWRQcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHVzZXJQcm92aWRlZFByb3BlcnR5LCBub3JtYWxpemVkUHJvcGVydHksIHZhbHVlLCBlcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIFdlYkFuaW1hdGlvbnNTdHlsZU5vcm1hbGl6ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdlYkFuaW1hdGlvbnNTdHlsZU5vcm1hbGl6ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2ViQW5pbWF0aW9uc1N0eWxlTm9ybWFsaXplcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyLnByb3RvdHlwZS5ub3JtYWxpemVQcm9wZXJ0eU5hbWUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocHJvcGVydHlOYW1lLCBlcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIGRhc2hDYXNlVG9DYW1lbENhc2UocHJvcGVydHlOYW1lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXNlclByb3ZpZGVkUHJvcGVydHlcbiAgICAgKiBAcGFyYW0gez99IG5vcm1hbGl6ZWRQcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1N0eWxlTm9ybWFsaXplci5wcm90b3R5cGUubm9ybWFsaXplU3R5bGVWYWx1ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXNlclByb3ZpZGVkUHJvcGVydHlcbiAgICAgKiBAcGFyYW0gez99IG5vcm1hbGl6ZWRQcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGVycm9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHVzZXJQcm92aWRlZFByb3BlcnR5LCBub3JtYWxpemVkUHJvcGVydHksIHZhbHVlLCBlcnJvcnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdW5pdCA9ICcnO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHJWYWwgPSB2YWx1ZS50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgICAgaWYgKERJTUVOU0lPTkFMX1BST1BfTUFQW25vcm1hbGl6ZWRQcm9wZXJ0eV0gJiYgdmFsdWUgIT09IDAgJiYgdmFsdWUgIT09ICcwJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB1bml0ID0gJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbEFuZFN1ZmZpeE1hdGNoID0gdmFsdWUubWF0Y2goL15bKy1dP1tcXGRcXC5dKyhbYS16XSopJC8pO1xuICAgICAgICAgICAgICAgIGlmICh2YWxBbmRTdWZmaXhNYXRjaCAmJiB2YWxBbmRTdWZmaXhNYXRjaFsxXS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChcIlBsZWFzZSBwcm92aWRlIGEgQ1NTIHVuaXQgdmFsdWUgZm9yIFwiICsgdXNlclByb3ZpZGVkUHJvcGVydHkgKyBcIjpcIiArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0clZhbCArIHVuaXQ7XG4gICAgfTtcbiAgICByZXR1cm4gV2ViQW5pbWF0aW9uc1N0eWxlTm9ybWFsaXplcjtcbn0oQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyKSk7XG52YXIgRElNRU5TSU9OQUxfUFJPUF9NQVAgPSBtYWtlQm9vbGVhbk1hcCgnd2lkdGgsaGVpZ2h0LG1pbldpZHRoLG1pbkhlaWdodCxtYXhXaWR0aCxtYXhIZWlnaHQsbGVmdCx0b3AsYm90dG9tLHJpZ2h0LGZvbnRTaXplLG91dGxpbmVXaWR0aCxvdXRsaW5lT2Zmc2V0LHBhZGRpbmdUb3AscGFkZGluZ0xlZnQscGFkZGluZ0JvdHRvbSxwYWRkaW5nUmlnaHQsbWFyZ2luVG9wLG1hcmdpbkxlZnQsbWFyZ2luQm90dG9tLG1hcmdpblJpZ2h0LGJvcmRlclJhZGl1cyxib3JkZXJXaWR0aCxib3JkZXJUb3BXaWR0aCxib3JkZXJMZWZ0V2lkdGgsYm9yZGVyUmlnaHRXaWR0aCxib3JkZXJCb3R0b21XaWR0aCx0ZXh0SW5kZW50LHBlcnNwZWN0aXZlJ1xuICAgIC5zcGxpdCgnLCcpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBrZXlzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYWtlQm9vbGVhbk1hcChrZXlzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWFwID0ge307XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG1hcFtrZXldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0gez99IGVsZW1lbnRcbiAqIEBwYXJhbSB7P30gdHJpZ2dlck5hbWVcbiAqIEBwYXJhbSB7P30gZnJvbVN0YXRlXG4gKiBAcGFyYW0gez99IHRvU3RhdGVcbiAqIEBwYXJhbSB7P30gaXNSZW1vdmFsVHJhbnNpdGlvblxuICogQHBhcmFtIHs/fSBmcm9tU3R5bGVzXG4gKiBAcGFyYW0gez99IHRvU3R5bGVzXG4gKiBAcGFyYW0gez99IHRpbWVsaW5lc1xuICogQHBhcmFtIHs/fSBxdWVyaWVkRWxlbWVudHNcbiAqIEBwYXJhbSB7P30gcHJlU3R5bGVQcm9wc1xuICogQHBhcmFtIHs/fSBwb3N0U3R5bGVQcm9wc1xuICogQHBhcmFtIHs/PX0gZXJyb3JzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uSW5zdHJ1Y3Rpb24oZWxlbWVudCwgdHJpZ2dlck5hbWUsIGZyb21TdGF0ZSwgdG9TdGF0ZSwgaXNSZW1vdmFsVHJhbnNpdGlvbiwgZnJvbVN0eWxlcywgdG9TdHlsZXMsIHRpbWVsaW5lcywgcXVlcmllZEVsZW1lbnRzLCBwcmVTdHlsZVByb3BzLCBwb3N0U3R5bGVQcm9wcywgZXJyb3JzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogMCAvKiBUcmFuc2l0aW9uQW5pbWF0aW9uICovLFxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICB0cmlnZ2VyTmFtZTogdHJpZ2dlck5hbWUsXG4gICAgICAgIGlzUmVtb3ZhbFRyYW5zaXRpb246IGlzUmVtb3ZhbFRyYW5zaXRpb24sXG4gICAgICAgIGZyb21TdGF0ZTogZnJvbVN0YXRlLFxuICAgICAgICBmcm9tU3R5bGVzOiBmcm9tU3R5bGVzLFxuICAgICAgICB0b1N0YXRlOiB0b1N0YXRlLFxuICAgICAgICB0b1N0eWxlczogdG9TdHlsZXMsXG4gICAgICAgIHRpbWVsaW5lczogdGltZWxpbmVzLFxuICAgICAgICBxdWVyaWVkRWxlbWVudHM6IHF1ZXJpZWRFbGVtZW50cyxcbiAgICAgICAgcHJlU3R5bGVQcm9wczogcHJlU3R5bGVQcm9wcyxcbiAgICAgICAgcG9zdFN0eWxlUHJvcHM6IHBvc3RTdHlsZVByb3BzLFxuICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgIH07XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbnZhciBFTVBUWV9PQkpFQ1QgPSB7fTtcbnZhciBBbmltYXRpb25UcmFuc2l0aW9uRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25UcmFuc2l0aW9uRmFjdG9yeShfdHJpZ2dlck5hbWUsIGFzdCwgX3N0YXRlU3R5bGVzKSB7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJOYW1lID0gX3RyaWdnZXJOYW1lO1xuICAgICAgICB0aGlzLmFzdCA9IGFzdDtcbiAgICAgICAgdGhpcy5fc3RhdGVTdHlsZXMgPSBfc3RhdGVTdHlsZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY3VycmVudFN0YXRlXG4gICAgICogQHBhcmFtIHs/fSBuZXh0U3RhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25GYWN0b3J5LnByb3RvdHlwZS5tYXRjaCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY3VycmVudFN0YXRlXG4gICAgICogQHBhcmFtIHs/fSBuZXh0U3RhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjdXJyZW50U3RhdGUsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gb25lT3JNb3JlVHJhbnNpdGlvbnNNYXRjaCh0aGlzLmFzdC5tYXRjaGVycywgY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBzdGF0ZU5hbWVcbiAgICAgKiBAcGFyYW0gez99IHBhcmFtc1xuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UcmFuc2l0aW9uRmFjdG9yeS5wcm90b3R5cGUuYnVpbGRTdHlsZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHN0YXRlTmFtZVxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1zXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHBhcmFtcywgZXJyb3JzKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGJhY2t1cFN0YXRlU3R5bGVyID0gdGhpcy5fc3RhdGVTdHlsZXNbJyonXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhdGVTdHlsZXIgPSB0aGlzLl9zdGF0ZVN0eWxlc1tzdGF0ZU5hbWVdO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBiYWNrdXBTdHlsZXMgPSBiYWNrdXBTdGF0ZVN0eWxlciA/IGJhY2t1cFN0YXRlU3R5bGVyLmJ1aWxkU3R5bGVzKHBhcmFtcywgZXJyb3JzKSA6IHt9O1xuICAgICAgICByZXR1cm4gc3RhdGVTdHlsZXIgPyBzdGF0ZVN0eWxlci5idWlsZFN0eWxlcyhwYXJhbXMsIGVycm9ycykgOiBiYWNrdXBTdHlsZXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGRyaXZlclxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY3VycmVudFN0YXRlXG4gICAgICogQHBhcmFtIHs/fSBuZXh0U3RhdGVcbiAgICAgKiBAcGFyYW0gez99IGVudGVyQ2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHs/fSBsZWF2ZUNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IGN1cnJlbnRPcHRpb25zXG4gICAgICogQHBhcmFtIHs/PX0gbmV4dE9wdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBzdWJJbnN0cnVjdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25GYWN0b3J5LnByb3RvdHlwZS5idWlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZHJpdmVyXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50U3RhdGVcbiAgICAgKiBAcGFyYW0gez99IG5leHRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P30gZW50ZXJDbGFzc05hbWVcbiAgICAgKiBAcGFyYW0gez99IGxlYXZlQ2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHs/PX0gY3VycmVudE9wdGlvbnNcbiAgICAgKiBAcGFyYW0gez89fSBuZXh0T3B0aW9uc1xuICAgICAqIEBwYXJhbSB7Pz19IHN1Ykluc3RydWN0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGRyaXZlciwgZWxlbWVudCwgY3VycmVudFN0YXRlLCBuZXh0U3RhdGUsIGVudGVyQ2xhc3NOYW1lLCBsZWF2ZUNsYXNzTmFtZSwgY3VycmVudE9wdGlvbnMsIG5leHRPcHRpb25zLCBzdWJJbnN0cnVjdGlvbnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyYW5zaXRpb25BbmltYXRpb25QYXJhbXMgPSB0aGlzLmFzdC5vcHRpb25zICYmIHRoaXMuYXN0Lm9wdGlvbnMucGFyYW1zIHx8IEVNUFRZX09CSkVDVDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY3VycmVudEFuaW1hdGlvblBhcmFtcyA9IGN1cnJlbnRPcHRpb25zICYmIGN1cnJlbnRPcHRpb25zLnBhcmFtcyB8fCBFTVBUWV9PQkpFQ1Q7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRTdGF0ZVN0eWxlcyA9IHRoaXMuYnVpbGRTdHlsZXMoY3VycmVudFN0YXRlLCBjdXJyZW50QW5pbWF0aW9uUGFyYW1zLCBlcnJvcnMpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXh0QW5pbWF0aW9uUGFyYW1zID0gbmV4dE9wdGlvbnMgJiYgbmV4dE9wdGlvbnMucGFyYW1zIHx8IEVNUFRZX09CSkVDVDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV4dFN0YXRlU3R5bGVzID0gdGhpcy5idWlsZFN0eWxlcyhuZXh0U3RhdGUsIG5leHRBbmltYXRpb25QYXJhbXMsIGVycm9ycyk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHF1ZXJpZWRFbGVtZW50cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJlU3R5bGVNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBvc3RTdHlsZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNSZW1vdmFsID0gbmV4dFN0YXRlID09PSAndm9pZCc7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFuaW1hdGlvbk9wdGlvbnMgPSB7IHBhcmFtczogX19hc3NpZ24oe30sIHRyYW5zaXRpb25BbmltYXRpb25QYXJhbXMsIG5leHRBbmltYXRpb25QYXJhbXMpIH07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRpbWVsaW5lcyA9IGJ1aWxkQW5pbWF0aW9uVGltZWxpbmVzKGRyaXZlciwgZWxlbWVudCwgdGhpcy5hc3QuYW5pbWF0aW9uLCBlbnRlckNsYXNzTmFtZSwgbGVhdmVDbGFzc05hbWUsIGN1cnJlbnRTdGF0ZVN0eWxlcywgbmV4dFN0YXRlU3R5bGVzLCBhbmltYXRpb25PcHRpb25zLCBzdWJJbnN0cnVjdGlvbnMsIGVycm9ycyk7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVHJhbnNpdGlvbkluc3RydWN0aW9uKGVsZW1lbnQsIHRoaXMuX3RyaWdnZXJOYW1lLCBjdXJyZW50U3RhdGUsIG5leHRTdGF0ZSwgaXNSZW1vdmFsLCBjdXJyZW50U3RhdGVTdHlsZXMsIG5leHRTdGF0ZVN0eWxlcywgW10sIFtdLCBwcmVTdHlsZU1hcCwgcG9zdFN0eWxlTWFwLCBlcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uICh0bCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxtID0gdGwuZWxlbWVudDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZVByb3BzID0gZ2V0T3JTZXRBc0luTWFwKHByZVN0eWxlTWFwLCBlbG0sIHt9KTtcbiAgICAgICAgICAgIHRsLnByZVN0eWxlUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gcHJlUHJvcHNbcHJvcF0gPSB0cnVlOyB9KTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBvc3RQcm9wcyA9IGdldE9yU2V0QXNJbk1hcChwb3N0U3R5bGVNYXAsIGVsbSwge30pO1xuICAgICAgICAgICAgdGwucG9zdFN0eWxlUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gcG9zdFByb3BzW3Byb3BdID0gdHJ1ZTsgfSk7XG4gICAgICAgICAgICBpZiAoZWxtICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcXVlcmllZEVsZW1lbnRzLmFkZChlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcmllZEVsZW1lbnRzTGlzdCA9IGl0ZXJhdG9yVG9BcnJheShxdWVyaWVkRWxlbWVudHMudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gY3JlYXRlVHJhbnNpdGlvbkluc3RydWN0aW9uKGVsZW1lbnQsIHRoaXMuX3RyaWdnZXJOYW1lLCBjdXJyZW50U3RhdGUsIG5leHRTdGF0ZSwgaXNSZW1vdmFsLCBjdXJyZW50U3RhdGVTdHlsZXMsIG5leHRTdGF0ZVN0eWxlcywgdGltZWxpbmVzLCBxdWVyaWVkRWxlbWVudHNMaXN0LCBwcmVTdHlsZU1hcCwgcG9zdFN0eWxlTWFwKTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25UcmFuc2l0aW9uRmFjdG9yeTtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gbWF0Y2hGbnNcbiAqIEBwYXJhbSB7P30gY3VycmVudFN0YXRlXG4gKiBAcGFyYW0gez99IG5leHRTdGF0ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gb25lT3JNb3JlVHJhbnNpdGlvbnNNYXRjaChtYXRjaEZucywgY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gbWF0Y2hGbnMuc29tZShmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKGN1cnJlbnRTdGF0ZSwgbmV4dFN0YXRlKTsgfSk7XG59XG52YXIgQW5pbWF0aW9uU3RhdGVTdHlsZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGVTdHlsZXMoc3R5bGVzLCBkZWZhdWx0UGFyYW1zKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLmRlZmF1bHRQYXJhbXMgPSBkZWZhdWx0UGFyYW1zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmFtc1xuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25TdGF0ZVN0eWxlcy5wcm90b3R5cGUuYnVpbGRTdHlsZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmFtc1xuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyYW1zLCBlcnJvcnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmluYWxTdHlsZXMgPSB7fTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tYmluZWRQYXJhbXMgPSBjb3B5T2JqKHRoaXMuZGVmYXVsdFBhcmFtcyk7XG4gICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb21iaW5lZFBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0eWxlcy5zdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVPYmpfMSA9IC8qKiBAdHlwZSB7P30gKi8gKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzdHlsZU9ial8xKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbCA9IHN0eWxlT2JqXzFbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gaW50ZXJwb2xhdGVQYXJhbXModmFsLCBjb21iaW5lZFBhcmFtcywgZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbFN0eWxlc1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmaW5hbFN0eWxlcztcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25TdGF0ZVN0eWxlcztcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/fSBhc3RcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkVHJpZ2dlcihuYW1lLCBhc3QpIHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGlvblRyaWdnZXIobmFtZSwgYXN0KTtcbn1cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqL1xudmFyIEFuaW1hdGlvblRyaWdnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uVHJpZ2dlcihuYW1lLCBhc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbkZhY3RvcmllcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHt9O1xuICAgICAgICBhc3Quc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKGFzdCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVmYXVsdFBhcmFtcyA9IChhc3Qub3B0aW9ucyAmJiBhc3Qub3B0aW9ucy5wYXJhbXMpIHx8IHt9O1xuICAgICAgICAgICAgX3RoaXMuc3RhdGVzW2FzdC5uYW1lXSA9IG5ldyBBbmltYXRpb25TdGF0ZVN0eWxlcyhhc3Quc3R5bGUsIGRlZmF1bHRQYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgYmFsYW5jZVByb3BlcnRpZXModGhpcy5zdGF0ZXMsICd0cnVlJywgJzEnKTtcbiAgICAgICAgYmFsYW5jZVByb3BlcnRpZXModGhpcy5zdGF0ZXMsICdmYWxzZScsICcwJyk7XG4gICAgICAgIGFzdC50cmFuc2l0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhc3QpIHtcbiAgICAgICAgICAgIF90aGlzLnRyYW5zaXRpb25GYWN0b3JpZXMucHVzaChuZXcgQW5pbWF0aW9uVHJhbnNpdGlvbkZhY3RvcnkobmFtZSwgYXN0LCBfdGhpcy5zdGF0ZXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZmFsbGJhY2tUcmFuc2l0aW9uID0gY3JlYXRlRmFsbGJhY2tUcmFuc2l0aW9uKG5hbWUsIHRoaXMuc3RhdGVzKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblRyaWdnZXIucHJvdG90eXBlLCBcImNvbnRhaW5zUXVlcmllc1wiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmFzdC5xdWVyeUNvdW50ID4gMDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50U3RhdGVcbiAgICAgKiBAcGFyYW0gez99IG5leHRTdGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJpZ2dlci5wcm90b3R5cGUubWF0Y2hUcmFuc2l0aW9uID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50U3RhdGVcbiAgICAgKiBAcGFyYW0gez99IG5leHRTdGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGN1cnJlbnRTdGF0ZSwgbmV4dFN0YXRlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVudHJ5ID0gdGhpcy50cmFuc2l0aW9uRmFjdG9yaWVzLmZpbmQoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYubWF0Y2goY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpOyB9KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5IHx8IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGN1cnJlbnRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1zXG4gICAgICogQHBhcmFtIHs/fSBlcnJvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyaWdnZXIucHJvdG90eXBlLm1hdGNoU3R5bGVzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50U3RhdGVcbiAgICAgKiBAcGFyYW0gez99IHBhcmFtc1xuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY3VycmVudFN0YXRlLCBwYXJhbXMsIGVycm9ycykge1xuICAgICAgICByZXR1cm4gdGhpcy5mYWxsYmFja1RyYW5zaXRpb24uYnVpbGRTdHlsZXMoY3VycmVudFN0YXRlLCBwYXJhbXMsIGVycm9ycyk7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uVHJpZ2dlcjtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdHJpZ2dlck5hbWVcbiAqIEBwYXJhbSB7P30gc3RhdGVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVGYWxsYmFja1RyYW5zaXRpb24odHJpZ2dlck5hbWUsIHN0YXRlcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hdGNoZXJzID0gW2Z1bmN0aW9uIChmcm9tU3RhdGUsIHRvU3RhdGUpIHsgcmV0dXJuIHRydWU7IH1dO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGFuaW1hdGlvbiA9IHsgdHlwZTogMiAvKiBTZXF1ZW5jZSAqLywgc3RlcHM6IFtdLCBvcHRpb25zOiBudWxsIH07XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdHJhbnNpdGlvbiA9IHtcbiAgICAgICAgdHlwZTogMSAvKiBUcmFuc2l0aW9uICovLFxuICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgbWF0Y2hlcnM6IG1hdGNoZXJzLFxuICAgICAgICBvcHRpb25zOiBudWxsLFxuICAgICAgICBxdWVyeUNvdW50OiAwLFxuICAgICAgICBkZXBDb3VudDogMFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBBbmltYXRpb25UcmFuc2l0aW9uRmFjdG9yeSh0cmlnZ2VyTmFtZSwgdHJhbnNpdGlvbiwgc3RhdGVzKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBvYmpcbiAqIEBwYXJhbSB7P30ga2V5MVxuICogQHBhcmFtIHs/fSBrZXkyXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBiYWxhbmNlUHJvcGVydGllcyhvYmosIGtleTEsIGtleTIpIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleTEpKSB7XG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleTIpKSB7XG4gICAgICAgICAgICBvYmpba2V5Ml0gPSBvYmpba2V5MV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob2JqLmhhc093blByb3BlcnR5KGtleTIpKSB7XG4gICAgICAgIG9ialtrZXkxXSA9IG9ialtrZXkyXTtcbiAgICB9XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBFTVBUWV9JTlNUUlVDVElPTl9NQVAgPSBuZXcgRWxlbWVudEluc3RydWN0aW9uTWFwKCk7XG52YXIgVGltZWxpbmVBbmltYXRpb25FbmdpbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZWxpbmVBbmltYXRpb25FbmdpbmUoX2RyaXZlciwgX25vcm1hbGl6ZXIpIHtcbiAgICAgICAgdGhpcy5fZHJpdmVyID0gX2RyaXZlcjtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplciA9IF9ub3JtYWxpemVyO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zID0ge307XG4gICAgICAgIHRoaXMuX3BsYXllcnNCeUlkID0ge307XG4gICAgICAgIHRoaXMucGxheWVycyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGlkXG4gICAgICogQHBhcmFtIHs/fSBtZXRhZGF0YVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLnJlZ2lzdGVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBpZFxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpZCwgbWV0YWRhdGEpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFzdCA9IGJ1aWxkQW5pbWF0aW9uQXN0KHRoaXMuX2RyaXZlciwgbWV0YWRhdGEsIGVycm9ycyk7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gYnVpbGQgdGhlIGFuaW1hdGlvbiBkdWUgdG8gdGhlIGZvbGxvd2luZyBlcnJvcnM6IFwiICsgZXJyb3JzLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uc1tpZF0gPSBhc3Q7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaVxuICAgICAqIEBwYXJhbSB7P30gcHJlU3R5bGVzXG4gICAgICogQHBhcmFtIHs/PX0gcG9zdFN0eWxlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLl9idWlsZFBsYXllciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaVxuICAgICAqIEBwYXJhbSB7P30gcHJlU3R5bGVzXG4gICAgICogQHBhcmFtIHs/PX0gcG9zdFN0eWxlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGksIHByZVN0eWxlcywgcG9zdFN0eWxlcykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbGVtZW50ID0gaS5lbGVtZW50O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXlmcmFtZXMgPSBub3JtYWxpemVLZXlmcmFtZXModGhpcy5fZHJpdmVyLCB0aGlzLl9ub3JtYWxpemVyLCBlbGVtZW50LCBpLmtleWZyYW1lcywgcHJlU3R5bGVzLCBwb3N0U3R5bGVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RyaXZlci5hbmltYXRlKGVsZW1lbnQsIGtleWZyYW1lcywgaS5kdXJhdGlvbiwgaS5kZWxheSwgaS5lYXNpbmcsIFtdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUaW1lbGluZUFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuY3JlYXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBpZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpZCwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlcnJvcnMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXN0ID0gdGhpcy5fYW5pbWF0aW9uc1tpZF07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluc3RydWN0aW9ucztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXV0b1N0eWxlc01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKGFzdCkge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zID0gYnVpbGRBbmltYXRpb25UaW1lbGluZXModGhpcy5fZHJpdmVyLCBlbGVtZW50LCBhc3QsIEVOVEVSX0NMQVNTTkFNRSwgTEVBVkVfQ0xBU1NOQU1FLCB7fSwge30sIG9wdGlvbnMsIEVNUFRZX0lOU1RSVUNUSU9OX01BUCwgZXJyb3JzKTtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzID0gZ2V0T3JTZXRBc0luTWFwKGF1dG9TdHlsZXNNYXAsIGluc3QuZWxlbWVudCwge30pO1xuICAgICAgICAgICAgICAgIGluc3QucG9zdFN0eWxlUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gc3R5bGVzW3Byb3BdID0gbnVsbDsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdUaGUgcmVxdWVzdGVkIGFuaW1hdGlvbiBkb2VzblxcJ3QgZXhpc3Qgb3IgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHRoZSBhbmltYXRpb24gZHVlIHRvIHRoZSBmb2xsb3dpbmcgZXJyb3JzOiBcIiArIGVycm9ycy5qb2luKFwiXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBhdXRvU3R5bGVzTWFwLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlcywgZWxlbWVudCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7IHN0eWxlc1twcm9wXSA9IF90aGlzLl9kcml2ZXIuY29tcHV0ZVN0eWxlKGVsZW1lbnQsIHByb3AsIF9hbmd1bGFyX2FuaW1hdGlvbnMuQVVUT19TVFlMRSk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVycyA9IGluc3RydWN0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlcyA9IGF1dG9TdHlsZXNNYXAuZ2V0KGkuZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2J1aWxkUGxheWVyKGksIHt9LCBzdHlsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVyID0gb3B0aW1pemVHcm91cFBsYXllcihwbGF5ZXJzKTtcbiAgICAgICAgdGhpcy5fcGxheWVyc0J5SWRbaWRdID0gcGxheWVyO1xuICAgICAgICBwbGF5ZXIub25EZXN0cm95KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmRlc3Ryb3koaWQpOyB9KTtcbiAgICAgICAgdGhpcy5wbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5kZXN0cm95ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBpZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllciA9IHRoaXMuX2dldFBsYXllcihpZCk7XG4gICAgICAgIHBsYXllci5kZXN0cm95KCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wbGF5ZXJzQnlJZFtpZF07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluZGV4ID0gdGhpcy5wbGF5ZXJzLmluZGV4T2YocGxheWVyKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucGxheWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGlkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUaW1lbGluZUFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuX2dldFBsYXllciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXIgPSB0aGlzLl9wbGF5ZXJzQnlJZFtpZF07XG4gICAgICAgIGlmICghcGxheWVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCB0aGUgdGltZWxpbmUgcGxheWVyIHJlZmVyZW5jZWQgYnkgXCIgKyBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRpbWVsaW5lQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5saXN0ZW4gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoaWQsIGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgLy8gdHJpZ2dlck5hbWUsIGZyb21TdGF0ZSwgdG9TdGF0ZSBhcmUgYWxsIGlnbm9yZWQgZm9yIHRpbWVsaW5lIGFuaW1hdGlvbnNcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmFzZUV2ZW50ID0gbWFrZUFuaW1hdGlvbkV2ZW50KGVsZW1lbnQsICcnLCAnJywgJycpO1xuICAgICAgICBsaXN0ZW5PblBsYXllcih0aGlzLl9nZXRQbGF5ZXIoaWQpLCBldmVudE5hbWUsIGJhc2VFdmVudCwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29tbWFuZFxuICAgICAqIEBwYXJhbSB7P30gYXJnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGltZWxpbmVBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmNvbW1hbmQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBjb21tYW5kXG4gICAgICogQHBhcmFtIHs/fSBhcmdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoaWQsIGVsZW1lbnQsIGNvbW1hbmQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGNvbW1hbmQgPT0gJ3JlZ2lzdGVyJykge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcihpZCwgLyoqIEB0eXBlIHs/fSAqLyAoYXJnc1swXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21tYW5kID09ICdjcmVhdGUnKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvcHRpb25zID0gLyoqIEB0eXBlIHs/fSAqLyAoKGFyZ3NbMF0gfHwge30pKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKGlkLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXIgPSB0aGlzLl9nZXRQbGF5ZXIoaWQpO1xuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BsYXknOlxuICAgICAgICAgICAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwYXVzZSc6XG4gICAgICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXNldCc6XG4gICAgICAgICAgICAgICAgcGxheWVyLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXN0YXJ0JzpcbiAgICAgICAgICAgICAgICBwbGF5ZXIucmVzdGFydCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZmluaXNoJzpcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbml0JzpcbiAgICAgICAgICAgICAgICBwbGF5ZXIuaW5pdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2V0UG9zaXRpb24nOlxuICAgICAgICAgICAgICAgIHBsYXllci5zZXRQb3NpdGlvbihwYXJzZUZsb2F0KC8qKiBAdHlwZSB7P30gKi8gKGFyZ3NbMF0pKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZXN0cm95JzpcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koaWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVBbmltYXRpb25FbmdpbmU7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgUVVFVUVEX0NMQVNTTkFNRSA9ICduZy1hbmltYXRlLXF1ZXVlZCc7XG52YXIgUVVFVUVEX1NFTEVDVE9SID0gJy5uZy1hbmltYXRlLXF1ZXVlZCc7XG52YXIgRElTQUJMRURfQ0xBU1NOQU1FID0gJ25nLWFuaW1hdGUtZGlzYWJsZWQnO1xudmFyIERJU0FCTEVEX1NFTEVDVE9SID0gJy5uZy1hbmltYXRlLWRpc2FibGVkJztcbnZhciBTVEFSX0NMQVNTTkFNRSA9ICduZy1zdGFyLWluc2VydGVkJztcbnZhciBTVEFSX1NFTEVDVE9SID0gJy5uZy1zdGFyLWluc2VydGVkJztcbnZhciBFTVBUWV9QTEFZRVJfQVJSQVkgPSBbXTtcbnZhciBOVUxMX1JFTU9WQUxfU1RBVEUgPSB7XG4gICAgbmFtZXNwYWNlSWQ6ICcnLFxuICAgIHNldEZvclJlbW92YWw6IG51bGwsXG4gICAgaGFzQW5pbWF0aW9uOiBmYWxzZSxcbiAgICByZW1vdmVkQmVmb3JlUXVlcmllZDogZmFsc2Vcbn07XG52YXIgTlVMTF9SRU1PVkVEX1FVRVJJRURfU1RBVEUgPSB7XG4gICAgbmFtZXNwYWNlSWQ6ICcnLFxuICAgIHNldEZvclJlbW92YWw6IG51bGwsXG4gICAgaGFzQW5pbWF0aW9uOiBmYWxzZSxcbiAgICByZW1vdmVkQmVmb3JlUXVlcmllZDogdHJ1ZVxufTtcbi8qKlxuICogQHJlY29yZFxuICovXG5cbnZhciBSRU1PVkFMX0ZMQUcgPSAnX19uZ19yZW1vdmVkJztcbi8qKlxuICogQHJlY29yZFxuICovXG5cbnZhciBTdGF0ZVZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRlVmFsdWUoaW5wdXQsIG5hbWVzcGFjZUlkKSB7XG4gICAgICAgIGlmIChuYW1lc3BhY2VJZCA9PT0gdm9pZCAwKSB7IG5hbWVzcGFjZUlkID0gJyc7IH1cbiAgICAgICAgdGhpcy5uYW1lc3BhY2VJZCA9IG5hbWVzcGFjZUlkO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc09iaiA9IGlucHV0ICYmIGlucHV0Lmhhc093blByb3BlcnR5KCd2YWx1ZScpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IGlzT2JqID8gaW5wdXRbJ3ZhbHVlJ10gOiBpbnB1dDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5vcm1hbGl6ZVRyaWdnZXJWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGlmIChpc09iaikge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9ucyA9IGNvcHlPYmooLyoqIEB0eXBlIHs/fSAqLyAoaW5wdXQpKTtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zWyd2YWx1ZSddO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gLyoqIEB0eXBlIHs/fSAqLyAob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5wYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVWYWx1ZS5wcm90b3R5cGUsIFwicGFyYW1zXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKHRoaXMub3B0aW9ucy5wYXJhbXMpOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFN0YXRlVmFsdWUucHJvdG90eXBlLmFic29yYk9wdGlvbnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5ld1BhcmFtcyA9IG9wdGlvbnMucGFyYW1zO1xuICAgICAgICBpZiAobmV3UGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbGRQYXJhbXNfMSA9IC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLm9wdGlvbnMucGFyYW1zKSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhuZXdQYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAob2xkUGFyYW1zXzFbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRQYXJhbXNfMVtwcm9wXSA9IG5ld1BhcmFtc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN0YXRlVmFsdWU7XG59KCkpO1xudmFyIFZPSURfVkFMVUUgPSAndm9pZCc7XG52YXIgREVGQVVMVF9TVEFURV9WQUxVRSA9IG5ldyBTdGF0ZVZhbHVlKFZPSURfVkFMVUUpO1xudmFyIERFTEVURURfU1RBVEVfVkFMVUUgPSBuZXcgU3RhdGVWYWx1ZSgnREVMRVRFRCcpO1xudmFyIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZShpZCwgaG9zdEVsZW1lbnQsIF9lbmdpbmUpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50ID0gaG9zdEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2VuZ2luZSA9IF9lbmdpbmU7XG4gICAgICAgIHRoaXMucGxheWVycyA9IFtdO1xuICAgICAgICB0aGlzLl90cmlnZ2VycyA9IHt9O1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9lbGVtZW50TGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ob3N0Q2xhc3NOYW1lID0gJ25nLXRucy0nICsgaWQ7XG4gICAgICAgIGFkZENsYXNzKGhvc3RFbGVtZW50LCB0aGlzLl9ob3N0Q2xhc3NOYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBwaGFzZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UucHJvdG90eXBlLmxpc3RlbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gcGhhc2VcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZSwgcGhhc2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fdHJpZ2dlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBsaXN0ZW4gb24gdGhlIGFuaW1hdGlvbiB0cmlnZ2VyIGV2ZW50IFxcXCJcIiArIHBoYXNlICsgXCJcXFwiIGJlY2F1c2UgdGhlIGFuaW1hdGlvbiB0cmlnZ2VyIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZG9lc24ndCBleGlzdCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBoYXNlID09IG51bGwgfHwgcGhhc2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBsaXN0ZW4gb24gdGhlIGFuaW1hdGlvbiB0cmlnZ2VyIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgYmVjYXVzZSB0aGUgcHJvdmlkZWQgZXZlbnQgaXMgdW5kZWZpbmVkIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVHJpZ2dlckV2ZW50VmFsaWQocGhhc2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcHJvdmlkZWQgYW5pbWF0aW9uIHRyaWdnZXIgZXZlbnQgXFxcIlwiICsgcGhhc2UgKyBcIlxcXCIgZm9yIHRoZSBhbmltYXRpb24gdHJpZ2dlciBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIG5vdCBzdXBwb3J0ZWQhXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGxpc3RlbmVycyA9IGdldE9yU2V0QXNJbk1hcCh0aGlzLl9lbGVtZW50TGlzdGVuZXJzLCBlbGVtZW50LCBbXSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRhdGEgPSB7IG5hbWU6IG5hbWUsIHBoYXNlOiBwaGFzZSwgY2FsbGJhY2s6IGNhbGxiYWNrIH07XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGRhdGEpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmlnZ2Vyc1dpdGhTdGF0ZXMgPSBnZXRPclNldEFzSW5NYXAodGhpcy5fZW5naW5lLnN0YXRlc0J5RWxlbWVudCwgZWxlbWVudCwge30pO1xuICAgICAgICBpZiAoIXRyaWdnZXJzV2l0aFN0YXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgTkdfVFJJR0dFUl9DTEFTU05BTUUpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgTkdfVFJJR0dFUl9DTEFTU05BTUUgKyAnLScgKyBuYW1lKTtcbiAgICAgICAgICAgIHRyaWdnZXJzV2l0aFN0YXRlc1tuYW1lXSA9IERFRkFVTFRfU1RBVEVfVkFMVUU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRoZSBldmVudCBsaXN0ZW5lciBpcyByZW1vdmVkIEFGVEVSIHRoZSBmbHVzaCBoYXMgb2NjdXJyZWQgc3VjaFxuICAgICAgICAgICAgLy8gdGhhdCBsZWF2ZSBhbmltYXRpb25zIGNhbGxiYWNrcyBjYW4gZmlyZSAob3RoZXJ3aXNlIGlmIHRoZSBub2RlXG4gICAgICAgICAgICAvLyBpcyByZW1vdmVkIGluIGJldHdlZW4gdGhlbiB0aGUgbGlzdGVuZXJzIHdvdWxkIGJlIGRlcmVnaXN0ZXJlZClcbiAgICAgICAgICAgIC8vIHRoZSBldmVudCBsaXN0ZW5lciBpcyByZW1vdmVkIEFGVEVSIHRoZSBmbHVzaCBoYXMgb2NjdXJyZWQgc3VjaFxuICAgICAgICAgICAgLy8gdGhhdCBsZWF2ZSBhbmltYXRpb25zIGNhbGxiYWNrcyBjYW4gZmlyZSAob3RoZXJ3aXNlIGlmIHRoZSBub2RlXG4gICAgICAgICAgICAvLyBpcyByZW1vdmVkIGluIGJldHdlZW4gdGhlbiB0aGUgbGlzdGVuZXJzIHdvdWxkIGJlIGRlcmVnaXN0ZXJlZClcbiAgICAgICAgICAgIF90aGlzLl9lbmdpbmUuYWZ0ZXJGbHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fdHJpZ2dlcnNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRyaWdnZXJzV2l0aFN0YXRlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UcmFuc2l0aW9uTmFtZXNwYWNlLnByb3RvdHlwZS5yZWdpc3RlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gYXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgYXN0KSB7XG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2Vyc1tuYW1lXSkge1xuICAgICAgICAgICAgLy8gdGhyb3dcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzW25hbWVdID0gYXN0O1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZS5wcm90b3R5cGUuX2dldFRyaWdnZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2Vyc1tuYW1lXTtcbiAgICAgICAgaWYgKCF0cmlnZ2VyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcHJvdmlkZWQgYW5pbWF0aW9uIHRyaWdnZXIgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyaWdnZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHRyaWdnZXJOYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IGRlZmF1bHRUb0ZhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UcmFuc2l0aW9uTmFtZXNwYWNlLnByb3RvdHlwZS50cmlnZ2VyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSB0cmlnZ2VyTmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez89fSBkZWZhdWx0VG9GYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIHRyaWdnZXJOYW1lLCB2YWx1ZSwgZGVmYXVsdFRvRmFsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGRlZmF1bHRUb0ZhbGxiYWNrID09PSB2b2lkIDApIHsgZGVmYXVsdFRvRmFsbGJhY2sgPSB0cnVlOyB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyaWdnZXIgPSB0aGlzLl9nZXRUcmlnZ2VyKHRyaWdnZXJOYW1lKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVyID0gbmV3IFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIodGhpcy5pZCwgdHJpZ2dlck5hbWUsIGVsZW1lbnQpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmlnZ2Vyc1dpdGhTdGF0ZXMgPSB0aGlzLl9lbmdpbmUuc3RhdGVzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKCF0cmlnZ2Vyc1dpdGhTdGF0ZXMpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIE5HX1RSSUdHRVJfQ0xBU1NOQU1FKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIE5HX1RSSUdHRVJfQ0xBU1NOQU1FICsgJy0nICsgdHJpZ2dlck5hbWUpO1xuICAgICAgICAgICAgdGhpcy5fZW5naW5lLnN0YXRlc0J5RWxlbWVudC5zZXQoZWxlbWVudCwgdHJpZ2dlcnNXaXRoU3RhdGVzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZyb21TdGF0ZSA9IHRyaWdnZXJzV2l0aFN0YXRlc1t0cmlnZ2VyTmFtZV07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRvU3RhdGUgPSBuZXcgU3RhdGVWYWx1ZSh2YWx1ZSwgdGhpcy5pZCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlzT2JqID0gdmFsdWUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJyk7XG4gICAgICAgIGlmICghaXNPYmogJiYgZnJvbVN0YXRlKSB7XG4gICAgICAgICAgICB0b1N0YXRlLmFic29yYk9wdGlvbnMoZnJvbVN0YXRlLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRyaWdnZXJzV2l0aFN0YXRlc1t0cmlnZ2VyTmFtZV0gPSB0b1N0YXRlO1xuICAgICAgICBpZiAoIWZyb21TdGF0ZSkge1xuICAgICAgICAgICAgZnJvbVN0YXRlID0gREVGQVVMVF9TVEFURV9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmcm9tU3RhdGUgPT09IERFTEVURURfU1RBVEVfVkFMVUUpIHtcbiAgICAgICAgICAgIHJldHVybiBwbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNSZW1vdmFsID0gdG9TdGF0ZS52YWx1ZSA9PT0gVk9JRF9WQUxVRTtcbiAgICAgICAgLy8gbm9ybWFsbHkgdGhpcyBpc24ndCByZWFjaGVkIGJ5IGhlcmUsIGhvd2V2ZXIsIGlmIGFuIG9iamVjdCBleHByZXNzaW9uXG4gICAgICAgIC8vIGlzIHBhc3NlZCBpbiB0aGVuIGl0IG1heSBiZSBhIG5ldyBvYmplY3QgZWFjaCB0aW1lLiBDb21wYXJpbmcgdGhlIHZhbHVlXG4gICAgICAgIC8vIGlzIGltcG9ydGFudCBzaW5jZSB0aGF0IHdpbGwgc3RheSB0aGUgc2FtZSBkZXNwaXRlIHRoZXJlIGJlaW5nIGEgbmV3IG9iamVjdC5cbiAgICAgICAgLy8gVGhlIHJlbW92YWwgYXJjIGhlcmUgaXMgc3BlY2lhbCBjYXNlZCBiZWNhdXNlIHRoZSBzYW1lIGVsZW1lbnQgaXMgdHJpZ2dlcmVkXG4gICAgICAgIC8vIHR3aWNlIGluIHRoZSBldmVudCB0aGF0IGl0IGNvbnRhaW5zIGFuaW1hdGlvbnMgb24gdGhlIG91dGVyL2lubmVyIHBvcnRpb25zXG4gICAgICAgIC8vIG9mIHRoZSBob3N0IGNvbnRhaW5lclxuICAgICAgICBpZiAoIWlzUmVtb3ZhbCAmJiBmcm9tU3RhdGUudmFsdWUgPT09IHRvU3RhdGUudmFsdWUpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCBkZXNwaXRlIHRoZSB2YWx1ZSBub3QgY2hhbmdpbmcsIHNvbWUgaW5uZXIgcGFyYW1zXG4gICAgICAgICAgICAvLyBoYXZlIGNoYW5nZWQgd2hpY2ggbWVhbnMgdGhhdCB0aGUgYW5pbWF0aW9uIGZpbmFsIHN0eWxlcyBuZWVkIHRvIGJlIGFwcGxpZWRcbiAgICAgICAgICAgIGlmICghb2JqRXF1YWxzKGZyb21TdGF0ZS5wYXJhbXMsIHRvU3RhdGUucGFyYW1zKSkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZyb21TdHlsZXNfMSA9IHRyaWdnZXIubWF0Y2hTdHlsZXMoZnJvbVN0YXRlLnZhbHVlLCBmcm9tU3RhdGUucGFyYW1zLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRvU3R5bGVzXzEgPSB0cmlnZ2VyLm1hdGNoU3R5bGVzKHRvU3RhdGUudmFsdWUsIHRvU3RhdGUucGFyYW1zLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZ2luZS5yZXBvcnRFcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5naW5lLmFmdGVyRmx1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJhc2VTdHlsZXMoZWxlbWVudCwgZnJvbVN0eWxlc18xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFN0eWxlcyhlbGVtZW50LCB0b1N0eWxlc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllcnNPbkVsZW1lbnQgPSBnZXRPclNldEFzSW5NYXAodGhpcy5fZW5naW5lLnBsYXllcnNCeUVsZW1lbnQsIGVsZW1lbnQsIFtdKTtcbiAgICAgICAgcGxheWVyc09uRWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBwbGF5ZXIgaWYgaXQgaXMgcXVldWVkIG9uIHRoZSBFWEFDVCBzYW1lIHRyaWdnZXIvbmFtZXNwYWNlXG4gICAgICAgICAgICAvLyB3ZSBvbmx5IGFsc28gZGVhbCB3aXRoIHF1ZXVlZCBwbGF5ZXJzIGhlcmUgYmVjYXVzZSBpZiB0aGUgYW5pbWF0aW9uIGhhc1xuICAgICAgICAgICAgLy8gc3RhcnRlZCB0aGVuIHdlIHdhbnQgdG8ga2VlcCB0aGUgcGxheWVyIGFsaXZlIHVudGlsIHRoZSBmbHVzaCBoYXBwZW5zXG4gICAgICAgICAgICAvLyAod2hpY2ggaXMgd2hlcmUgdGhlIHByZXZpb3VzUGxheWVycyBhcmUgcGFzc2VkIGludG8gdGhlIG5ldyBwYWx5ZXIpXG4gICAgICAgICAgICBpZiAocGxheWVyLm5hbWVzcGFjZUlkID09IF90aGlzLmlkICYmIHBsYXllci50cmlnZ2VyTmFtZSA9PSB0cmlnZ2VyTmFtZSAmJiBwbGF5ZXIucXVldWVkKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyYW5zaXRpb24gPSB0cmlnZ2VyLm1hdGNoVHJhbnNpdGlvbihmcm9tU3RhdGUudmFsdWUsIHRvU3RhdGUudmFsdWUpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc0ZhbGxiYWNrVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGlmICghZGVmYXVsdFRvRmFsbGJhY2spXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHRyaWdnZXIuZmFsbGJhY2tUcmFuc2l0aW9uO1xuICAgICAgICAgICAgaXNGYWxsYmFja1RyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZ2luZS50b3RhbFF1ZXVlZFBsYXllcnMrKztcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaCh7IGVsZW1lbnQ6IGVsZW1lbnQsIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZSwgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiwgZnJvbVN0YXRlOiBmcm9tU3RhdGUsIHRvU3RhdGU6IHRvU3RhdGUsIHBsYXllcjogcGxheWVyLCBpc0ZhbGxiYWNrVHJhbnNpdGlvbjogaXNGYWxsYmFja1RyYW5zaXRpb24gfSk7XG4gICAgICAgIGlmICghaXNGYWxsYmFja1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIFFVRVVFRF9DTEFTU05BTUUpO1xuICAgICAgICAgICAgcGxheWVyLm9uU3RhcnQoZnVuY3Rpb24gKCkgeyByZW1vdmVDbGFzcyhlbGVtZW50LCBRVUVVRURfQ0xBU1NOQU1FKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcGxheWVyLm9uRG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbmRleCA9IF90aGlzLnBsYXllcnMuaW5kZXhPZihwbGF5ZXIpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wbGF5ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXJzID0gX3RoaXMuX2VuZ2luZS5wbGF5ZXJzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5kZXhfMSA9IHBsYXllcnMuaW5kZXhPZihwbGF5ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleF8xID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVycy5zcGxpY2UoaW5kZXhfMSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgcGxheWVyc09uRWxlbWVudC5wdXNoKHBsYXllcik7XG4gICAgICAgIHJldHVybiBwbGF5ZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UucHJvdG90eXBlLmRlcmVnaXN0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl90cmlnZ2Vyc1tuYW1lXTtcbiAgICAgICAgdGhpcy5fZW5naW5lLnN0YXRlc0J5RWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZU1hcCwgZWxlbWVudCkgeyBkZWxldGUgc3RhdGVNYXBbbmFtZV07IH0pO1xuICAgICAgICB0aGlzLl9lbGVtZW50TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVycywgZWxlbWVudCkge1xuICAgICAgICAgICAgX3RoaXMuX2VsZW1lbnRMaXN0ZW5lcnMuc2V0KGVsZW1lbnQsIGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeS5uYW1lICE9IG5hbWU7IH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UucHJvdG90eXBlLmNsZWFyRWxlbWVudENhY2hlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUuc3RhdGVzQnlFbGVtZW50LmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudExpc3RlbmVycy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnRQbGF5ZXJzID0gdGhpcy5fZW5naW5lLnBsYXllcnNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudFBsYXllcnMpIHtcbiAgICAgICAgICAgIGVsZW1lbnRQbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikgeyByZXR1cm4gcGxheWVyLmRlc3Ryb3koKTsgfSk7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUucGxheWVyc0J5RWxlbWVudC5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcm9vdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcGFyYW0gez89fSBhbmltYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UcmFuc2l0aW9uTmFtZXNwYWNlLnByb3RvdHlwZS5fc2lnbmFsUmVtb3ZhbEZvcklubmVyVHJpZ2dlcnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJvb3RFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHs/PX0gYW5pbWF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJvb3RFbGVtZW50LCBjb250ZXh0LCBhbmltYXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChhbmltYXRlID09PSB2b2lkIDApIHsgYW5pbWF0ZSA9IGZhbHNlOyB9XG4gICAgICAgIC8vIGVtdWxhdGUgYSBsZWF2ZSBhbmltYXRpb24gZm9yIGFsbCBpbm5lciBub2RlcyB3aXRoaW4gdGhpcyBub2RlLlxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyBmb3VuZCBmb3IgYW55IG9mIHRoZSBub2RlcyB0aGVuIGNsZWFyIHRoZSBjYWNoZVxuICAgICAgICAvLyBmb3IgdGhlIGVsZW1lbnQuXG4gICAgICAgIHRoaXMuX2VuZ2luZS5kcml2ZXIucXVlcnkocm9vdEVsZW1lbnQsIE5HX1RSSUdHRVJfU0VMRUNUT1IsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGVsbSkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IGFuIGlubmVyIHJlbW92ZSgpIG9wZXJhdGlvbiBoYXMgYWxyZWFkeSBraWNrZWQgb2ZmXG4gICAgICAgICAgICAvLyB0aGUgYW5pbWF0aW9uIG9uIHRoaXMgZWxlbWVudC4uLlxuICAgICAgICAgICAgaWYgKGVsbVtSRU1PVkFMX0ZMQUddKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5hbWVzcGFjZXMgPSBfdGhpcy5fZW5naW5lLmZldGNoTmFtZXNwYWNlc0J5RWxlbWVudChlbG0pO1xuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZXMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHsgcmV0dXJuIG5zLnRyaWdnZXJMZWF2ZUFuaW1hdGlvbihlbG0sIGNvbnRleHQsIGZhbHNlLCB0cnVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhckVsZW1lbnRDYWNoZShlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEBwYXJhbSB7Pz19IGRlc3Ryb3lBZnRlckNvbXBsZXRlXG4gICAgICogQHBhcmFtIHs/PX0gZGVmYXVsdFRvRmFsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UucHJvdG90eXBlLnRyaWdnZXJMZWF2ZUFuaW1hdGlvbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEBwYXJhbSB7Pz19IGRlc3Ryb3lBZnRlckNvbXBsZXRlXG4gICAgICogQHBhcmFtIHs/PX0gZGVmYXVsdFRvRmFsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBjb250ZXh0LCBkZXN0cm95QWZ0ZXJDb21wbGV0ZSwgZGVmYXVsdFRvRmFsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdHJpZ2dlclN0YXRlcyA9IHRoaXMuX2VuZ2luZS5zdGF0ZXNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAodHJpZ2dlclN0YXRlcykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVyc18xID0gW107XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0cmlnZ2VyU3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyTmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hlY2sgaXMgaGVyZSBpbiB0aGUgZXZlbnQgdGhhdCBhbiBlbGVtZW50IGlzIHJlbW92ZWRcbiAgICAgICAgICAgICAgICAvLyB0d2ljZSAoYm90aCBvbiB0aGUgaG9zdCBsZXZlbCBhbmQgdGhlIGNvbXBvbmVudCBsZXZlbClcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3RyaWdnZXJzW3RyaWdnZXJOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXIgPSBfdGhpcy50cmlnZ2VyKGVsZW1lbnQsIHRyaWdnZXJOYW1lLCBWT0lEX1ZBTFVFLCBkZWZhdWx0VG9GYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcnNfMS5wdXNoKHBsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJzXzEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW5naW5lLm1hcmtFbGVtZW50QXNSZW1vdmVkKHRoaXMuaWQsIGVsZW1lbnQsIHRydWUsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGlmIChkZXN0cm95QWZ0ZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpbWl6ZUdyb3VwUGxheWVyKHBsYXllcnNfMSkub25Eb25lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9lbmdpbmUucHJvY2Vzc0xlYXZlTm9kZShlbGVtZW50KTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZS5wcm90b3R5cGUucHJlcGFyZUxlYXZlQW5pbWF0aW9uTGlzdGVuZXJzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaXN0ZW5lcnMgPSB0aGlzLl9lbGVtZW50TGlzdGVuZXJzLmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlzaXRlZFRyaWdnZXJzXzEgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmlnZ2VyTmFtZSA9IGxpc3RlbmVyLm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWRUcmlnZ2Vyc18xLmhhcyh0cmlnZ2VyTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB2aXNpdGVkVHJpZ2dlcnNfMS5hZGQodHJpZ2dlck5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyaWdnZXIgPSBfdGhpcy5fdHJpZ2dlcnNbdHJpZ2dlck5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyYW5zaXRpb24gPSB0cmlnZ2VyLmZhbGxiYWNrVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbGVtZW50U3RhdGVzID0gLyoqIEB0eXBlIHs/fSAqLyAoKF90aGlzLl9lbmdpbmUuc3RhdGVzQnlFbGVtZW50LmdldChlbGVtZW50KSkpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZyb21TdGF0ZSA9IGVsZW1lbnRTdGF0ZXNbdHJpZ2dlck5hbWVdIHx8IERFRkFVTFRfU1RBVEVfVkFMVUU7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdG9TdGF0ZSA9IG5ldyBTdGF0ZVZhbHVlKFZPSURfVkFMVUUpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllciA9IG5ldyBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyKF90aGlzLmlkLCB0cmlnZ2VyTmFtZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2VuZ2luZS50b3RhbFF1ZXVlZFBsYXllcnMrKztcbiAgICAgICAgICAgICAgICBfdGhpcy5fcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZnJvbVN0YXRlOiBmcm9tU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIHRvU3RhdGU6IHRvU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIHBsYXllcjogcGxheWVyLFxuICAgICAgICAgICAgICAgICAgICBpc0ZhbGxiYWNrVHJhbnNpdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZS5wcm90b3R5cGUucmVtb3ZlTm9kZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW5naW5lID0gdGhpcy5fZW5naW5lO1xuICAgICAgICBpZiAoZWxlbWVudC5jaGlsZEVsZW1lbnRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc2lnbmFsUmVtb3ZhbEZvcklubmVyVHJpZ2dlcnMoZWxlbWVudCwgY29udGV4dCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IGEgKiA9PiBWT0lEIGFuaW1hdGlvbiB3YXMgZGV0ZWN0ZWQgYW5kIGtpY2tlZCBvZmZcbiAgICAgICAgaWYgKHRoaXMudHJpZ2dlckxlYXZlQW5pbWF0aW9uKGVsZW1lbnQsIGNvbnRleHQsIHRydWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBmaW5kIHRoZSBwbGF5ZXIgdGhhdCBpcyBhbmltYXRpbmcgYW5kIG1ha2Ugc3VyZSB0aGF0IHRoZVxuICAgICAgICAvLyByZW1vdmFsIGlzIGRlbGF5ZWQgdW50aWwgdGhhdCBwbGF5ZXIgaGFzIGNvbXBsZXRlZFxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb250YWluc1BvdGVudGlhbFBhcmVudFRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKGVuZ2luZS50b3RhbEFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRQbGF5ZXJzID0gZW5naW5lLnBsYXllcnMubGVuZ3RoID8gZW5naW5lLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50LmdldChlbGVtZW50KSA6IFtdO1xuICAgICAgICAgICAgLy8gd2hlbiB0aGlzIGBpZiBzdGF0ZW1lbnRgIGRvZXMgbm90IGNvbnRpbnVlIGZvcndhcmQgaXQgbWVhbnMgdGhhdFxuICAgICAgICAgICAgLy8gYSBwcmV2aW91cyBhbmltYXRpb24gcXVlcnkgaGFzIHNlbGVjdGVkIHRoZSBjdXJyZW50IGVsZW1lbnQgYW5kXG4gICAgICAgICAgICAvLyBpcyBhbmltYXRpbmcgaXQuIEluIHRoaXMgc2l0dWF0aW9uIHdhbnQgdG8gY29udGludWUgZm93YXJkcyBhbmRcbiAgICAgICAgICAgIC8vIGFsbG93IHRoZSBlbGVtZW50IHRvIGJlIHF1ZXVlZCB1cCBmb3IgYW5pbWF0aW9uIGxhdGVyLlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQbGF5ZXJzICYmIGN1cnJlbnRQbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zUG90ZW50aWFsUGFyZW50VHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRfMSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudF8xID0gcGFyZW50XzEucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmlnZ2VycyA9IGVuZ2luZS5zdGF0ZXNCeUVsZW1lbnQuZ2V0KHBhcmVudF8xKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluc1BvdGVudGlhbFBhcmVudFRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXQgdGhpcyBzdGFnZSB3ZSBrbm93IHRoYXQgdGhlIGVsZW1lbnQgd2lsbCBlaXRoZXIgZ2V0IHJlbW92ZWRcbiAgICAgICAgLy8gZHVyaW5nIGZsdXNoIG9yIHdpbGwgYmUgcGlja2VkIHVwIGJ5IGEgcGFyZW50IHF1ZXJ5LiBFaXRoZXIgd2F5XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gZmlyZSB0aGUgbGlzdGVuZXJzIGZvciB0aGlzIGVsZW1lbnQgd2hlbiBpdCBET0VTIGdldFxuICAgICAgICAvLyByZW1vdmVkIChvbmNlIHRoZSBxdWVyeSBwYXJlbnQgYW5pbWF0aW9uIGlzIGRvbmUgb3IgYWZ0ZXIgZmx1c2gpXG4gICAgICAgIHRoaXMucHJlcGFyZUxlYXZlQW5pbWF0aW9uTGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgICAvLyB3aGV0aGVyIG9yIG5vdCBhIHBhcmVudCBoYXMgYW4gYW5pbWF0aW9uIHdlIG5lZWQgdG8gZGVsYXkgdGhlIGRlZmVycmFsIG9mIHRoZSBsZWF2ZVxuICAgICAgICAvLyBvcGVyYXRpb24gdW50aWwgd2UgaGF2ZSBtb3JlIGluZm9ybWF0aW9uICh3aGljaCB3ZSBkbyBhZnRlciBmbHVzaCgpIGhhcyBiZWVuIGNhbGxlZClcbiAgICAgICAgaWYgKGNvbnRhaW5zUG90ZW50aWFsUGFyZW50VHJhbnNpdGlvbikge1xuICAgICAgICAgICAgZW5naW5lLm1hcmtFbGVtZW50QXNSZW1vdmVkKHRoaXMuaWQsIGVsZW1lbnQsIGZhbHNlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHdlIGRvIHRoaXMgYWZ0ZXIgdGhlIGZsdXNoIGhhcyBvY2N1cnJlZCBzdWNoXG4gICAgICAgICAgICAvLyB0aGF0IHRoZSBjYWxsYmFja3MgY2FuIGJlIGZpcmVkXG4gICAgICAgICAgICBlbmdpbmUuYWZ0ZXJGbHVzaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jbGVhckVsZW1lbnRDYWNoZShlbGVtZW50KTsgfSk7XG4gICAgICAgICAgICBlbmdpbmUuZGVzdHJveUlubmVyQW5pbWF0aW9ucyhlbGVtZW50KTtcbiAgICAgICAgICAgIGVuZ2luZS5fb25SZW1vdmFsQ29tcGxldGUoZWxlbWVudCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25UcmFuc2l0aW9uTmFtZXNwYWNlLnByb3RvdHlwZS5pbnNlcnROb2RlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBwYXJlbnQpIHsgYWRkQ2xhc3MoZWxlbWVudCwgdGhpcy5faG9zdENsYXNzTmFtZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtaWNyb3Rhc2tJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZS5wcm90b3R5cGUuZHJhaW5RdWV1ZWRUcmFuc2l0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWljcm90YXNrSWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtaWNyb3Rhc2tJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcXVldWUuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllciA9IGVudHJ5LnBsYXllcjtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIuZGVzdHJveWVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnQgPSBlbnRyeS5lbGVtZW50O1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGlzdGVuZXJzID0gX3RoaXMuX2VsZW1lbnRMaXN0ZW5lcnMuZ2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIubmFtZSA9PSBlbnRyeS50cmlnZ2VyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmFzZUV2ZW50ID0gbWFrZUFuaW1hdGlvbkV2ZW50KGVsZW1lbnQsIGVudHJ5LnRyaWdnZXJOYW1lLCBlbnRyeS5mcm9tU3RhdGUudmFsdWUsIGVudHJ5LnRvU3RhdGUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKGJhc2VFdmVudCkpWydfZGF0YSddID0gbWljcm90YXNrSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5PblBsYXllcihlbnRyeS5wbGF5ZXIsIGxpc3RlbmVyLnBoYXNlLCBiYXNlRXZlbnQsIGxpc3RlbmVyLmNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBsYXllci5tYXJrZWRGb3JEZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2VuZ2luZS5hZnRlckZsdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm93IHdlIGNhbiBkZXN0cm95IHRoZSBlbGVtZW50IHByb3Blcmx5IHNpbmNlIHRoZSBldmVudCBsaXN0ZW5lcnMgaGF2ZVxuICAgICAgICAgICAgICAgICAgICAvLyBiZWVuIGJvdW5kIHRvIHRoZSBwbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluc3RydWN0aW9ucy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgLy8gaWYgZGVwQ291bnQgPT0gMCB0aGVtIG1vdmUgdG8gZnJvbnRcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpZiBhIGNvbnRhaW5zIGIgdGhlbiBtb3ZlIGJhY2tcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGQwID0gYS50cmFuc2l0aW9uLmFzdC5kZXBDb3VudDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGQxID0gYi50cmFuc2l0aW9uLmFzdC5kZXBDb3VudDtcbiAgICAgICAgICAgIGlmIChkMCA9PSAwIHx8IGQxID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDAgLSBkMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fZW5naW5lLmRyaXZlci5jb250YWluc0VsZW1lbnQoYS5lbGVtZW50LCBiLmVsZW1lbnQpID8gMSA6IC0xO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uVHJhbnNpdGlvbk5hbWVzcGFjZS5wcm90b3R5cGUuZGVzdHJveSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAuZGVzdHJveSgpOyB9KTtcbiAgICAgICAgdGhpcy5fc2lnbmFsUmVtb3ZhbEZvcklubmVyVHJpZ2dlcnModGhpcy5ob3N0RWxlbWVudCwgY29udGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UucHJvdG90eXBlLmVsZW1lbnRDb250YWluc0RhdGEgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbnRhaW5zRGF0YSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudExpc3RlbmVycy5oYXMoZWxlbWVudCkpXG4gICAgICAgICAgICBjb250YWluc0RhdGEgPSB0cnVlO1xuICAgICAgICBjb250YWluc0RhdGEgPVxuICAgICAgICAgICAgKHRoaXMuX3F1ZXVlLmZpbmQoZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeS5lbGVtZW50ID09PSBlbGVtZW50OyB9KSA/IHRydWUgOiBmYWxzZSkgfHwgY29udGFpbnNEYXRhO1xuICAgICAgICByZXR1cm4gY29udGFpbnNEYXRhO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2U7XG59KCkpO1xuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxudmFyIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZShkcml2ZXIsIF9ub3JtYWxpemVyKSB7XG4gICAgICAgIHRoaXMuZHJpdmVyID0gZHJpdmVyO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVyID0gX25vcm1hbGl6ZXI7XG4gICAgICAgIHRoaXMucGxheWVycyA9IFtdO1xuICAgICAgICB0aGlzLm5ld0hvc3RFbGVtZW50cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJzQnlFbGVtZW50ID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50ID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnN0YXRlc0J5RWxlbWVudCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlZE5vZGVzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnRvdGFsQW5pbWF0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMudG90YWxRdWV1ZWRQbGF5ZXJzID0gMDtcbiAgICAgICAgdGhpcy5fbmFtZXNwYWNlTG9va3VwID0ge307XG4gICAgICAgIHRoaXMuX25hbWVzcGFjZUxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fZmx1c2hGbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fd2hlblF1aWV0Rm5zID0gW107XG4gICAgICAgIHRoaXMubmFtZXNwYWNlc0J5SG9zdEVsZW1lbnQgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGVkRW50ZXJFbGVtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbGxlY3RlZExlYXZlRWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5vblJlbW92YWxDb21wbGV0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250ZXh0KSB7IH07XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuX29uUmVtb3ZhbENvbXBsZXRlID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBjb250ZXh0KSB7IHRoaXMub25SZW1vdmFsQ29tcGxldGUoZWxlbWVudCwgY29udGV4dCk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLCBcInF1ZXVlZFBsYXllcnNcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVycyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbmFtZXNwYWNlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgICAgICAgIG5zLnBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIucXVldWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcGxheWVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmNyZWF0ZU5hbWVzcGFjZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGhvc3RFbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGhvc3RFbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5zID0gbmV3IEFuaW1hdGlvblRyYW5zaXRpb25OYW1lc3BhY2UobmFtZXNwYWNlSWQsIGhvc3RFbGVtZW50LCB0aGlzKTtcbiAgICAgICAgaWYgKGhvc3RFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhbGFuY2VOYW1lc3BhY2VMaXN0KG5zLCBob3N0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWZlciB0aGlzIGxhdGVyIHVudGlsIGZsdXNoIGR1cmluZyB3aGVuIHRoZSBob3N0IGVsZW1lbnQgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIGluc2VydGVkIHNvIHRoYXQgd2Uga25vdyBleGFjdGx5IHdoZXJlIHRvIHBsYWNlIGl0IGluXG4gICAgICAgICAgICAvLyB0aGUgbmFtZXNwYWNlIGxpc3RcbiAgICAgICAgICAgIHRoaXMubmV3SG9zdEVsZW1lbnRzLnNldChob3N0RWxlbWVudCwgbnMpO1xuICAgICAgICAgICAgLy8gZ2l2ZW4gdGhhdCB0aGlzIGhvc3QgZWxlbWVudCBpcyBhcGFydCBvZiB0aGUgYW5pbWF0aW9uIGNvZGUsIGl0XG4gICAgICAgICAgICAvLyBtYXkgb3IgbWF5IG5vdCBiZSBpbnNlcnRlZCBieSBhIHBhcmVudCBub2RlIHRoYXQgaXMgYW4gb2YgYW5cbiAgICAgICAgICAgIC8vIGFuaW1hdGlvbiByZW5kZXJlciB0eXBlLiBJZiB0aGlzIGhhcHBlbnMgdGhlbiB3ZSBjYW4gc3RpbGwgaGF2ZVxuICAgICAgICAgICAgLy8gYWNjZXNzIHRvIHRoaXMgaXRlbSB3aGVuIHdlIHF1ZXJ5IGZvciA6ZW50ZXIgbm9kZXMuIElmIHRoZSBwYXJlbnRcbiAgICAgICAgICAgIC8vIGlzIGEgcmVuZGVyZXIgdGhlbiB0aGUgc2V0IGRhdGEtc3RydWN0dXJlIHdpbGwgbm9ybWFsaXplIHRoZSBlbnRyeVxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0RW50ZXJFbGVtZW50KGhvc3RFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZXNwYWNlTG9va3VwW25hbWVzcGFjZUlkXSA9IG5zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuc1xuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLl9iYWxhbmNlTmFtZXNwYWNlTGlzdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbnNcbiAgICAgKiBAcGFyYW0gez99IGhvc3RFbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobnMsIGhvc3RFbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGxpbWl0ID0gdGhpcy5fbmFtZXNwYWNlTGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBpZiAobGltaXQgPj0gMCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IGxpbWl0OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHROYW1lc3BhY2UgPSB0aGlzLl9uYW1lc3BhY2VMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyaXZlci5jb250YWluc0VsZW1lbnQobmV4dE5hbWVzcGFjZS5ob3N0RWxlbWVudCwgaG9zdEVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25hbWVzcGFjZUxpc3Quc3BsaWNlKGkgKyAxLCAwLCBucyk7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25hbWVzcGFjZUxpc3Quc3BsaWNlKDAsIDAsIG5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25hbWVzcGFjZUxpc3QucHVzaChucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lc3BhY2VzQnlIb3N0RWxlbWVudC5zZXQoaG9zdEVsZW1lbnQsIG5zKTtcbiAgICAgICAgcmV0dXJuIG5zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLnJlZ2lzdGVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lc3BhY2VJZCwgaG9zdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbnMgPSB0aGlzLl9uYW1lc3BhY2VMb29rdXBbbmFtZXNwYWNlSWRdO1xuICAgICAgICBpZiAoIW5zKSB7XG4gICAgICAgICAgICBucyA9IHRoaXMuY3JlYXRlTmFtZXNwYWNlKG5hbWVzcGFjZUlkLCBob3N0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdHJpZ2dlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUucmVnaXN0ZXJUcmlnZ2VyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdHJpZ2dlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBuYW1lLCB0cmlnZ2VyKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5zID0gdGhpcy5fbmFtZXNwYWNlTG9va3VwW25hbWVzcGFjZUlkXTtcbiAgICAgICAgaWYgKG5zICYmIG5zLnJlZ2lzdGVyKG5hbWUsIHRyaWdnZXIpKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsQW5pbWF0aW9ucysrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5kZXN0cm95ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghbmFtZXNwYWNlSWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5zID0gdGhpcy5fZmV0Y2hOYW1lc3BhY2UobmFtZXNwYWNlSWQpO1xuICAgICAgICB0aGlzLmFmdGVyRmx1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubmFtZXNwYWNlc0J5SG9zdEVsZW1lbnQuZGVsZXRlKG5zLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fbmFtZXNwYWNlTG9va3VwW25hbWVzcGFjZUlkXTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluZGV4ID0gX3RoaXMuX25hbWVzcGFjZUxpc3QuaW5kZXhPZihucyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9uYW1lc3BhY2VMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFmdGVyRmx1c2hBbmltYXRpb25zRG9uZShmdW5jdGlvbiAoKSB7IHJldHVybiBucy5kZXN0cm95KGNvbnRleHQpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLl9mZXRjaE5hbWVzcGFjZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gdGhpcy5fbmFtZXNwYWNlTG9va3VwW2lkXTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmZldGNoTmFtZXNwYWNlc0J5RWxlbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgLy8gbm9ybWFsbHkgdGhlcmUgc2hvdWxkIG9ubHkgYmUgb25lIG5hbWVzcGFjZSBwZXIgZWxlbWVudCwgaG93ZXZlclxuICAgICAgICAvLyBpZiBAdHJpZ2dlcnMgYXJlIHBsYWNlZCBvbiBib3RoIHRoZSBjb21wb25lbnQgZWxlbWVudCBhbmQgdGhlblxuICAgICAgICAvLyBpdHMgaG9zdCBlbGVtZW50ICh3aXRoaW4gdGhlIGNvbXBvbmVudCBjb2RlKSB0aGVuIHRoZXJlIHdpbGwgYmVcbiAgICAgICAgLy8gdHdvIG5hbWVzcGFjZXMgcmV0dXJuZWQuIFdlIHVzZSBhIHNldCBoZXJlIHRvIHNpbXBseSB0aGUgZGVkdXBlXG4gICAgICAgIC8vIG9mIG5hbWVzcGFjZXMgaW5jYXNlIHRoZXJlIGFyZSBtdWx0aXBsZSB0cmlnZ2VycyBib3RoIHRoZSBlbG0gYW5kIGhvc3RcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmFtZXNwYWNlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudFN0YXRlcyA9IHRoaXMuc3RhdGVzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKGVsZW1lbnRTdGF0ZXMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleXMgPSBPYmplY3Qua2V5cyhlbGVtZW50U3RhdGVzKTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbnNJZCA9IGVsZW1lbnRTdGF0ZXNba2V5c1tpXV0ubmFtZXNwYWNlSWQ7XG4gICAgICAgICAgICAgICAgaWYgKG5zSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbnMgPSB0aGlzLl9mZXRjaE5hbWVzcGFjZShuc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VzLmFkZChucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWVzcGFjZXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUudHJpZ2dlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0VsZW1lbnROb2RlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9mZXRjaE5hbWVzcGFjZShuYW1lc3BhY2VJZCkudHJpZ2dlcihlbGVtZW50LCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IGluc2VydEJlZm9yZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuaW5zZXJ0Tm9kZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gaW5zZXJ0QmVmb3JlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGVsZW1lbnQsIHBhcmVudCwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgIGlmICghaXNFbGVtZW50Tm9kZShlbGVtZW50KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBhbmQgcmVpbnNlcnRlZCAobW92ZSBvcGVyYXRpb24pXG4gICAgICAgIC8vIHdoZW4gdGhpcyBvY2N1cnMgd2UgZG8gbm90IHdhbnQgdG8gdXNlIHRoZSBlbGVtZW50IGZvciBkZWxldGlvbiBsYXRlclxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXRhaWxzID0gLyoqIEB0eXBlIHs/fSAqLyAoZWxlbWVudFtSRU1PVkFMX0ZMQUddKTtcbiAgICAgICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5zZXRGb3JSZW1vdmFsKSB7XG4gICAgICAgICAgICBkZXRhaWxzLnNldEZvclJlbW92YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgbmFtZXNwYWNlSWQgaXMgYmxhbmsgdGhlbiB0aGUgY2FsbGVyXG4gICAgICAgIC8vIGNvZGUgZG9lcyBub3QgY29udGFpbiBhbnkgYW5pbWF0aW9uIGNvZGUgaW4gaXQsIGJ1dCBpdCBpc1xuICAgICAgICAvLyBqdXN0IGJlaW5nIGNhbGxlZCBzbyB0aGF0IHRoZSBub2RlIGlzIG1hcmtlZCBhcyBiZWluZyBpbnNlcnRlZFxuICAgICAgICBpZiAobmFtZXNwYWNlSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZldGNoTmFtZXNwYWNlKG5hbWVzcGFjZUlkKS5pbnNlcnROb2RlKGVsZW1lbnQsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSAqZGlyZWN0aXZlcyBhbmQgaG9zdCBlbGVtZW50cyBhcmUgaW5zZXJ0ZWQgYmVmb3JlXG4gICAgICAgIGlmIChpbnNlcnRCZWZvcmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdEVudGVyRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5jb2xsZWN0RW50ZXJFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkgeyB0aGlzLmNvbGxlY3RlZEVudGVyRWxlbWVudHMucHVzaChlbGVtZW50KTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5tYXJrRWxlbWVudEFzRGlzYWJsZWQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWROb2Rlcy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkTm9kZXMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIERJU0FCTEVEX0NMQVNTTkFNRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kaXNhYmxlZE5vZGVzLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZE5vZGVzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIERJU0FCTEVEX0NMQVNTTkFNRSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLnJlbW92ZU5vZGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCFpc0VsZW1lbnROb2RlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9vblJlbW92YWxDb21wbGV0ZShlbGVtZW50LCBjb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBucyA9IG5hbWVzcGFjZUlkID8gdGhpcy5fZmV0Y2hOYW1lc3BhY2UobmFtZXNwYWNlSWQpIDogbnVsbDtcbiAgICAgICAgaWYgKG5zKSB7XG4gICAgICAgICAgICBucy5yZW1vdmVOb2RlKGVsZW1lbnQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXJrRWxlbWVudEFzUmVtb3ZlZChuYW1lc3BhY2VJZCwgZWxlbWVudCwgZmFsc2UsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/PX0gaGFzQW5pbWF0aW9uXG4gICAgICogQHBhcmFtIHs/PX0gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUubWFya0VsZW1lbnRBc1JlbW92ZWQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/PX0gaGFzQW5pbWF0aW9uXG4gICAgICogQHBhcmFtIHs/PX0gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBlbGVtZW50LCBoYXNBbmltYXRpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0ZWRMZWF2ZUVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnRbUkVNT1ZBTF9GTEFHXSA9IHtcbiAgICAgICAgICAgIG5hbWVzcGFjZUlkOiBuYW1lc3BhY2VJZCxcbiAgICAgICAgICAgIHNldEZvclJlbW92YWw6IGNvbnRleHQsIGhhc0FuaW1hdGlvbjogaGFzQW5pbWF0aW9uLFxuICAgICAgICAgICAgcmVtb3ZlZEJlZm9yZVF1ZXJpZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBwaGFzZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmxpc3RlbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHBoYXNlXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBlbGVtZW50LCBuYW1lLCBwaGFzZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudE5vZGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mZXRjaE5hbWVzcGFjZShuYW1lc3BhY2VJZCkubGlzdGVuKGVsZW1lbnQsIG5hbWUsIHBoYXNlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZW50cnlcbiAgICAgKiBAcGFyYW0gez99IHN1YlRpbWVsaW5lc1xuICAgICAqIEBwYXJhbSB7P30gZW50ZXJDbGFzc05hbWVcbiAgICAgKiBAcGFyYW0gez99IGxlYXZlQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5fYnVpbGRJbnN0cnVjdGlvbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZW50cnlcbiAgICAgKiBAcGFyYW0gez99IHN1YlRpbWVsaW5lc1xuICAgICAqIEBwYXJhbSB7P30gZW50ZXJDbGFzc05hbWVcbiAgICAgKiBAcGFyYW0gez99IGxlYXZlQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZW50cnksIHN1YlRpbWVsaW5lcywgZW50ZXJDbGFzc05hbWUsIGxlYXZlQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbnRyeS50cmFuc2l0aW9uLmJ1aWxkKHRoaXMuZHJpdmVyLCBlbnRyeS5lbGVtZW50LCBlbnRyeS5mcm9tU3RhdGUudmFsdWUsIGVudHJ5LnRvU3RhdGUudmFsdWUsIGVudGVyQ2xhc3NOYW1lLCBsZWF2ZUNsYXNzTmFtZSwgZW50cnkuZnJvbVN0YXRlLm9wdGlvbnMsIGVudHJ5LnRvU3RhdGUub3B0aW9ucywgc3ViVGltZWxpbmVzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29udGFpbmVyRWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuZGVzdHJveUlubmVyQW5pbWF0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29udGFpbmVyRWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudHMgPSB0aGlzLmRyaXZlci5xdWVyeShjb250YWluZXJFbGVtZW50LCBOR19UUklHR0VSX1NFTEVDVE9SLCB0cnVlKTtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gX3RoaXMuZGVzdHJveUFjdGl2ZUFuaW1hdGlvbnNGb3JFbGVtZW50KGVsZW1lbnQpOyB9KTtcbiAgICAgICAgaWYgKHRoaXMucGxheWVyc0J5UXVlcmllZEVsZW1lbnQuc2l6ZSA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbGVtZW50cyA9IHRoaXMuZHJpdmVyLnF1ZXJ5KGNvbnRhaW5lckVsZW1lbnQsIE5HX0FOSU1BVElOR19TRUxFQ1RPUiwgdHJ1ZSk7XG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIF90aGlzLmZpbmlzaEFjdGl2ZVF1ZXJpZWRBbmltYXRpb25PbkVsZW1lbnQoZWxlbWVudCk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5kZXN0cm95QWN0aXZlQW5pbWF0aW9uc0ZvckVsZW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllcnMgPSB0aGlzLnBsYXllcnNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAocGxheWVycykge1xuICAgICAgICAgICAgcGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHdoZW4gYW4gZWxlbWVudCBpcyBzZXQgZm9yIGRlc3RydWN0aW9uLCBidXQgaGFzbid0IHN0YXJ0ZWQuXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBzaXR1YXRpb24gd2Ugd2FudCB0byBkZWxheSB0aGUgZGVzdHJ1Y3Rpb24gdW50aWwgdGhlIGZsdXNoIG9jY3Vyc1xuICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgYW55IGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgcGxheWVyIGFyZSB0cmlnZ2VyZWQuXG4gICAgICAgICAgICAgICAgaWYgKHBsYXllci5xdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLm1hcmtlZEZvckRlc3Ryb3kgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGF0ZU1hcCA9IHRoaXMuc3RhdGVzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKHN0YXRlTWFwKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzdGF0ZU1hcCkuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlck5hbWUpIHsgcmV0dXJuIHN0YXRlTWFwW3RyaWdnZXJOYW1lXSA9IERFTEVURURfU1RBVEVfVkFMVUU7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmZpbmlzaEFjdGl2ZVF1ZXJpZWRBbmltYXRpb25PbkVsZW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllcnMgPSB0aGlzLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKHBsYXllcnMpIHtcbiAgICAgICAgICAgIHBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7IHJldHVybiBwbGF5ZXIuZmluaXNoKCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLndoZW5SZW5kZXJpbmdEb25lID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnBsYXllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGltaXplR3JvdXBQbGF5ZXIoX3RoaXMucGxheWVycykub25Eb25lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUoKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5wcm9jZXNzTGVhdmVOb2RlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXRhaWxzID0gLyoqIEB0eXBlIHs/fSAqLyAoZWxlbWVudFtSRU1PVkFMX0ZMQUddKTtcbiAgICAgICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5zZXRGb3JSZW1vdmFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgcHJldmVudCBpdCBmcm9tIHJlbW92aW5nIGl0IHR3aWNlXG4gICAgICAgICAgICBlbGVtZW50W1JFTU9WQUxfRkxBR10gPSBOVUxMX1JFTU9WQUxfU1RBVEU7XG4gICAgICAgICAgICBpZiAoZGV0YWlscy5uYW1lc3BhY2VJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveUlubmVyQW5pbWF0aW9ucyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBucyA9IHRoaXMuX2ZldGNoTmFtZXNwYWNlKGRldGFpbHMubmFtZXNwYWNlSWQpO1xuICAgICAgICAgICAgICAgIGlmIChucykge1xuICAgICAgICAgICAgICAgICAgICBucy5jbGVhckVsZW1lbnRDYWNoZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vblJlbW92YWxDb21wbGV0ZShlbGVtZW50LCBkZXRhaWxzLnNldEZvclJlbW92YWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRyaXZlci5tYXRjaGVzRWxlbWVudChlbGVtZW50LCBESVNBQkxFRF9TRUxFQ1RPUikpIHtcbiAgICAgICAgICAgIHRoaXMubWFya0VsZW1lbnRBc0Rpc2FibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyaXZlci5xdWVyeShlbGVtZW50LCBESVNBQkxFRF9TRUxFQ1RPUiwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgX3RoaXMubWFya0VsZW1lbnRBc0Rpc2FibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez89fSBtaWNyb3Rhc2tJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuZmx1c2ggPSAvKipcbiAgICAgKiBAcGFyYW0gez89fSBtaWNyb3Rhc2tJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1pY3JvdGFza0lkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChtaWNyb3Rhc2tJZCA9PT0gdm9pZCAwKSB7IG1pY3JvdGFza0lkID0gLTE7IH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVycyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5uZXdIb3N0RWxlbWVudHMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5uZXdIb3N0RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobnMsIGVsZW1lbnQpIHsgcmV0dXJuIF90aGlzLl9iYWxhbmNlTmFtZXNwYWNlTGlzdChucywgZWxlbWVudCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5uZXdIb3N0RWxlbWVudHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50b3RhbEFuaW1hdGlvbnMgJiYgdGhpcy5jb2xsZWN0ZWRFbnRlckVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHRoaXMuY29sbGVjdGVkRW50ZXJFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsbSA9IHRoaXMuY29sbGVjdGVkRW50ZXJFbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbG0sIFNUQVJfQ0xBU1NOQU1FKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbmFtZXNwYWNlTGlzdC5sZW5ndGggJiZcbiAgICAgICAgICAgICh0aGlzLnRvdGFsUXVldWVkUGxheWVycyB8fCB0aGlzLmNvbGxlY3RlZExlYXZlRWxlbWVudHMubGVuZ3RoKSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2xlYW51cEZucyA9IFtdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzID0gdGhpcy5fZmx1c2hBbmltYXRpb25zKGNsZWFudXBGbnMsIG1pY3JvdGFza0lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBjbGVhbnVwRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXBGbnNbaV0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdGhpcy5jb2xsZWN0ZWRMZWF2ZUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudCA9IHRoaXMuY29sbGVjdGVkTGVhdmVFbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NMZWF2ZU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b3RhbFF1ZXVlZFBsYXllcnMgPSAwO1xuICAgICAgICB0aGlzLmNvbGxlY3RlZEVudGVyRWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jb2xsZWN0ZWRMZWF2ZUVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2ZsdXNoRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9KTtcbiAgICAgICAgdGhpcy5fZmx1c2hGbnMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuX3doZW5RdWlldEZucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHdlIG1vdmUgdGhlc2Ugb3ZlciB0byBhIHZhcmlhYmxlIHNvIHRoYXRcbiAgICAgICAgICAgIC8vIGlmIGFueSBuZXcgY2FsbGJhY2tzIGFyZSByZWdpc3RlcmVkIGluIGFub3RoZXJcbiAgICAgICAgICAgIC8vIGZsdXNoIHRoZXkgZG8gbm90IHBvcHVsYXRlIHRoZSBleGlzdGluZyBzZXRcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHF1aWV0Rm5zXzEgPSB0aGlzLl93aGVuUXVpZXRGbnM7XG4gICAgICAgICAgICB0aGlzLl93aGVuUXVpZXRGbnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9wdGltaXplR3JvdXBQbGF5ZXIocGxheWVycykub25Eb25lKGZ1bmN0aW9uICgpIHsgcXVpZXRGbnNfMS5mb3JFYWNoKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVpZXRGbnNfMS5mb3JFYWNoKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5yZXBvcnRFcnJvciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZXJyb3JzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBwcm9jZXNzIGFuaW1hdGlvbnMgZHVlIHRvIHRoZSBmb2xsb3dpbmcgZmFpbGVkIHRyaWdnZXIgdHJhbnNpdGlvbnNcXG4gXCIgKyBlcnJvcnMuam9pbignXFxuJykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjbGVhbnVwRm5zXG4gICAgICogQHBhcmFtIHs/fSBtaWNyb3Rhc2tJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuX2ZsdXNoQW5pbWF0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2xlYW51cEZuc1xuICAgICAqIEBwYXJhbSB7P30gbWljcm90YXNrSWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjbGVhbnVwRm5zLCBtaWNyb3Rhc2tJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdWJUaW1lbGluZXMgPSBuZXcgRWxlbWVudEluc3RydWN0aW9uTWFwKCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNraXBwZWRQbGF5ZXJzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNraXBwZWRQbGF5ZXJzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBxdWV1ZWRJbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcmllZEVsZW1lbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxQcmVTdHlsZUVsZW1lbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxQb3N0U3R5bGVFbGVtZW50cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGlzYWJsZWRFbGVtZW50c1NldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGRpc2FibGVkRWxlbWVudHNTZXQuYWRkKG5vZGUpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZXNUaGF0QXJlRGlzYWJsZWQgPSBfdGhpcy5kcml2ZXIucXVlcnkobm9kZSwgUVVFVUVEX1NFTEVDVE9SLCB0cnVlKTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaV8xID0gMDsgaV8xIDwgbm9kZXNUaGF0QXJlRGlzYWJsZWQubGVuZ3RoOyBpXzErKykge1xuICAgICAgICAgICAgICAgIGRpc2FibGVkRWxlbWVudHNTZXQuYWRkKG5vZGVzVGhhdEFyZURpc2FibGVkW2lfMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYm9keU5vZGUgPSBnZXRCb2R5Tm9kZSgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxUcmlnZ2VyRWxlbWVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGVzQnlFbGVtZW50LmtleXMoKSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVudGVyTm9kZU1hcCA9IGJ1aWxkUm9vdE1hcChhbGxUcmlnZ2VyRWxlbWVudHMsIHRoaXMuY29sbGVjdGVkRW50ZXJFbGVtZW50cyk7XG4gICAgICAgIC8vIHRoaXMgbXVzdCBvY2N1ciBiZWZvcmUgdGhlIGluc3RydWN0aW9ucyBhcmUgYnVpbHQgYmVsb3cgc3VjaCB0aGF0XG4gICAgICAgIC8vIHRoZSA6ZW50ZXIgcXVlcmllcyBtYXRjaCB0aGUgZWxlbWVudHMgKHNpbmNlIHRoZSB0aW1lbGluZSBxdWVyaWVzXG4gICAgICAgIC8vIGFyZSBmaXJlZCBkdXJpbmcgaW5zdHJ1Y3Rpb24gYnVpbGRpbmcpLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbnRlck5vZGVNYXBJZHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwO1xuICAgICAgICBlbnRlck5vZGVNYXAuZm9yRWFjaChmdW5jdGlvbiAobm9kZXMsIHJvb3QpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNsYXNzTmFtZSA9IEVOVEVSX0NMQVNTTkFNRSArIGkrKztcbiAgICAgICAgICAgIGVudGVyTm9kZU1hcElkcy5zZXQocm9vdCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYWxsTGVhdmVOb2RlcyA9IFtdO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtZXJnZWRMZWF2ZU5vZGVzID0gbmV3IFNldCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZWF2ZU5vZGVzV2l0aG91dEFuaW1hdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaV8yID0gMDsgaV8yIDwgdGhpcy5jb2xsZWN0ZWRMZWF2ZUVsZW1lbnRzLmxlbmd0aDsgaV8yKyspIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnQgPSB0aGlzLmNvbGxlY3RlZExlYXZlRWxlbWVudHNbaV8yXTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRldGFpbHMgPSAvKiogQHR5cGUgez99ICovIChlbGVtZW50W1JFTU9WQUxfRkxBR10pO1xuICAgICAgICAgICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5zZXRGb3JSZW1vdmFsKSB7XG4gICAgICAgICAgICAgICAgYWxsTGVhdmVOb2Rlcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIG1lcmdlZExlYXZlTm9kZXMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChkZXRhaWxzLmhhc0FuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyaXZlci5xdWVyeShlbGVtZW50LCBTVEFSX1NFTEVDVE9SLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChlbG0pIHsgcmV0dXJuIG1lcmdlZExlYXZlTm9kZXMuYWRkKGVsbSk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmVOb2Rlc1dpdGhvdXRBbmltYXRpb25zLmFkZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGVhdmVOb2RlTWFwSWRzID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZWF2ZU5vZGVNYXAgPSBidWlsZFJvb3RNYXAoYWxsVHJpZ2dlckVsZW1lbnRzLCBBcnJheS5mcm9tKG1lcmdlZExlYXZlTm9kZXMpKTtcbiAgICAgICAgbGVhdmVOb2RlTWFwLmZvckVhY2goZnVuY3Rpb24gKG5vZGVzLCByb290KSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbGFzc05hbWUgPSBMRUFWRV9DTEFTU05BTUUgKyBpKys7XG4gICAgICAgICAgICBsZWF2ZU5vZGVNYXBJZHMuc2V0KHJvb3QsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBhZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNsZWFudXBGbnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnRlck5vZGVNYXAuZm9yRWFjaChmdW5jdGlvbiAobm9kZXMsIHJvb3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbGFzc05hbWUgPSAvKiogQHR5cGUgez99ICovICgoZW50ZXJOb2RlTWFwSWRzLmdldChyb290KSkpO1xuICAgICAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZWF2ZU5vZGVNYXAuZm9yRWFjaChmdW5jdGlvbiAobm9kZXMsIHJvb3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbGFzc05hbWUgPSAvKiogQHR5cGUgez99ICovICgobGVhdmVOb2RlTWFwSWRzLmdldChyb290KSkpO1xuICAgICAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbGxMZWF2ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgX3RoaXMucHJvY2Vzc0xlYXZlTm9kZShlbGVtZW50KTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxQbGF5ZXJzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVycm9uZW91c1RyYW5zaXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaV8zID0gdGhpcy5fbmFtZXNwYWNlTGlzdC5sZW5ndGggLSAxOyBpXzMgPj0gMDsgaV8zLS0pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5zID0gdGhpcy5fbmFtZXNwYWNlTGlzdFtpXzNdO1xuICAgICAgICAgICAgbnMuZHJhaW5RdWV1ZWRUcmFuc2l0aW9ucyhtaWNyb3Rhc2tJZCkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXIgPSBlbnRyeS5wbGF5ZXI7XG4gICAgICAgICAgICAgICAgYWxsUGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudCA9IGVudHJ5LmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCFib2R5Tm9kZSB8fCAhX3RoaXMuZHJpdmVyLmNvbnRhaW5zRWxlbWVudChib2R5Tm9kZSwgZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZWF2ZUNsYXNzTmFtZSA9IC8qKiBAdHlwZSB7P30gKi8gKChsZWF2ZU5vZGVNYXBJZHMuZ2V0KGVsZW1lbnQpKSk7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW50ZXJDbGFzc05hbWUgPSAvKiogQHR5cGUgez99ICovICgoZW50ZXJOb2RlTWFwSWRzLmdldChlbGVtZW50KSkpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluc3RydWN0aW9uID0gLyoqIEB0eXBlIHs/fSAqLyAoKF90aGlzLl9idWlsZEluc3RydWN0aW9uKGVudHJ5LCBzdWJUaW1lbGluZXMsIGVudGVyQ2xhc3NOYW1lLCBsZWF2ZUNsYXNzTmFtZSkpKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24uZXJyb3JzICYmIGluc3RydWN0aW9uLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb25lb3VzVHJhbnNpdGlvbnMucHVzaChpbnN0cnVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgYSB1bm1hdGNoZWQgdHJhbnNpdGlvbiBpcyBxdWV1ZWQgdG8gZ28gdGhlbiBpdCBTSE9VTEQgTk9UIHJlbmRlclxuICAgICAgICAgICAgICAgIC8vIGFuIGFuaW1hdGlvbiBhbmQgY2FuY2VsIHRoZSBwcmV2aW91c2x5IHJ1bm5pbmcgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNGYWxsYmFja1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLm9uU3RhcnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJhc2VTdHlsZXMoZWxlbWVudCwgaW5zdHJ1Y3Rpb24uZnJvbVN0eWxlcyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIub25EZXN0cm95KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFN0eWxlcyhlbGVtZW50LCBpbnN0cnVjdGlvbi50b1N0eWxlcyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBza2lwcGVkUGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IGlmIGEgcGFyZW50IGFuaW1hdGlvbiB1c2VzIHRoaXMgYW5pbWF0aW9uIGFzIGEgc3ViIHRyaWdnZXJcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGl0IHdpbGwgaW5zdHJ1Y3QgdGhlIHRpbWVsaW5lIGJ1aWxkZXIgdG8gbm90IGFkZCBhIHBsYXllciBkZWxheSwgYnV0XG4gICAgICAgICAgICAgICAgLy8gaW5zdGVhZCBzdHJldGNoIHRoZSBmaXJzdCBrZXlmcmFtZSBnYXAgdXAgdW50aWwgdGhlIGFuaW1hdGlvbiBzdGFydHMuIFRoZVxuICAgICAgICAgICAgICAgIC8vIHJlYXNvbiB0aGlzIGlzIGltcG9ydGFudCBpcyB0byBwcmV2ZW50IGV4dHJhIGluaXRpYWxpemF0aW9uIHN0eWxlcyBmcm9tIGJlaW5nXG4gICAgICAgICAgICAgICAgLy8gcmVxdWlyZWQgYnkgdGhlIHVzZXIgaW4gdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi50aW1lbGluZXMuZm9yRWFjaChmdW5jdGlvbiAodGwpIHsgcmV0dXJuIHRsLnN0cmV0Y2hTdGFydGluZ0tleWZyYW1lID0gdHJ1ZTsgfSk7XG4gICAgICAgICAgICAgICAgc3ViVGltZWxpbmVzLmFwcGVuZChlbGVtZW50LCBpbnN0cnVjdGlvbi50aW1lbGluZXMpO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHR1cGxlID0geyBpbnN0cnVjdGlvbjogaW5zdHJ1Y3Rpb24sIHBsYXllcjogcGxheWVyLCBlbGVtZW50OiBlbGVtZW50IH07XG4gICAgICAgICAgICAgICAgcXVldWVkSW5zdHJ1Y3Rpb25zLnB1c2godHVwbGUpO1xuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnF1ZXJpZWRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBnZXRPclNldEFzSW5NYXAocXVlcmllZEVsZW1lbnRzLCBlbGVtZW50LCBbXSkucHVzaChwbGF5ZXIpOyB9KTtcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi5wcmVTdHlsZVByb3BzLmZvckVhY2goZnVuY3Rpb24gKHN0cmluZ01hcCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9wcyA9IE9iamVjdC5rZXlzKHN0cmluZ01hcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNldFZhbF8xID0gLyoqIEB0eXBlIHs/fSAqLyAoKGFsbFByZVN0eWxlRWxlbWVudHMuZ2V0KGVsZW1lbnQpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNldFZhbF8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsUHJlU3R5bGVFbGVtZW50cy5zZXQoZWxlbWVudCwgc2V0VmFsXzEgPSBuZXcgU2V0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gc2V0VmFsXzEuYWRkKHByb3ApOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnBvc3RTdHlsZVByb3BzLmZvckVhY2goZnVuY3Rpb24gKHN0cmluZ01hcCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9wcyA9IE9iamVjdC5rZXlzKHN0cmluZ01hcCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNldFZhbCA9IC8qKiBAdHlwZSB7P30gKi8gKChhbGxQb3N0U3R5bGVFbGVtZW50cy5nZXQoZWxlbWVudCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFBvc3RTdHlsZUVsZW1lbnRzLnNldChlbGVtZW50LCBzZXRWYWwgPSBuZXcgU2V0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIHNldFZhbC5hZGQocHJvcCk7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9uZW91c1RyYW5zaXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzXzEgPSBbXTtcbiAgICAgICAgICAgIGVycm9uZW91c1RyYW5zaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGluc3RydWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzXzEucHVzaChcIkBcIiArIGluc3RydWN0aW9uLnRyaWdnZXJOYW1lICsgXCIgaGFzIGZhaWxlZCBkdWUgdG86XFxuXCIpOyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICAgICAgICAgKChpbnN0cnVjdGlvbi5lcnJvcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gZXJyb3JzXzEucHVzaChcIi0gXCIgKyBlcnJvciArIFwiXFxuXCIpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWxsUGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHsgcmV0dXJuIHBsYXllci5kZXN0cm95KCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRFcnJvcihlcnJvcnNfMSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYWxsUHJldmlvdXNQbGF5ZXJzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyB0aGlzIG1hcCB3b3JrcyB0byB0ZWxsIHdoaWNoIGVsZW1lbnQgaW4gdGhlIERPTSB0cmVlIGlzIGNvbnRhaW5lZCBieVxuICAgICAgICAvLyB3aGljaCBhbmltYXRpb24uIEZ1cnRoZXIgZG93biBiZWxvdyB0aGlzIG1hcCB3aWxsIGdldCBwb3B1bGF0ZWQgb25jZVxuICAgICAgICAvLyB0aGUgcGxheWVycyBhcmUgYnVpbHQgYW5kIGluIGRvaW5nIHNvIGl0IGNhbiBlZmZpY2llbnRseSBmaWd1cmUgb3V0XG4gICAgICAgIC8vIGlmIGEgc3ViIHBsYXllciBpcyBza2lwcGVkIGR1ZSB0byBhIHBhcmVudCBwbGF5ZXIgaGF2aW5nIHByaW9yaXR5LlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbmltYXRpb25FbGVtZW50TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBxdWV1ZWRJbnN0cnVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnQgPSBlbnRyeS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKHN1YlRpbWVsaW5lcy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25FbGVtZW50TWFwLnNldChlbGVtZW50LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYmVmb3JlQW5pbWF0aW9uQnVpbGQoZW50cnkucGxheWVyLm5hbWVzcGFjZUlkLCBlbnRyeS5pbnN0cnVjdGlvbiwgYWxsUHJldmlvdXNQbGF5ZXJzTWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNraXBwZWRQbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudCA9IHBsYXllci5lbGVtZW50O1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldmlvdXNQbGF5ZXJzID0gX3RoaXMuX2dldFByZXZpb3VzUGxheWVycyhlbGVtZW50LCBmYWxzZSwgcGxheWVyLm5hbWVzcGFjZUlkLCBwbGF5ZXIudHJpZ2dlck5hbWUsIG51bGwpO1xuICAgICAgICAgICAgcHJldmlvdXNQbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHByZXZQbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBnZXRPclNldEFzSW5NYXAoYWxsUHJldmlvdXNQbGF5ZXJzTWFwLCBlbGVtZW50LCBbXSkucHVzaChwcmV2UGxheWVyKTtcbiAgICAgICAgICAgICAgICBwcmV2UGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcyBpcyBhIHNwZWNpYWwgY2FzZSBmb3Igbm9kZXMgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKGVpdGhlciBieSlcbiAgICAgICAgLy8gaGF2aW5nIHRoZWlyIG93biBsZWF2ZSBhbmltYXRpb25zIG9yIGJ5IGJlaW5nIHF1ZXJpZWQgaW4gYSBjb250YWluZXJcbiAgICAgICAgLy8gdGhhdCB3aWxsIGJlIHJlbW92ZWQgb25jZSBhIHBhcmVudCBhbmltYXRpb24gaXMgY29tcGxldGUuIFRoZSBpZGVhXG4gICAgICAgIC8vIGhlcmUgaXMgdGhhdCAqIHN0eWxlcyBtdXN0IGJlIGlkZW50aWNhbCB0byAhIHN0eWxlcyBiZWNhdXNlIG9mXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5ICgqIGlzIGFsc28gZmlsbGVkIGluIGJ5IGRlZmF1bHQgaW4gbWFueSBwbGFjZXMpLlxuICAgICAgICAvLyBPdGhlcndpc2UgKiBzdHlsZXMgd2lsbCByZXR1cm4gYW4gZW1wdHkgdmFsdWUgb3IgYXV0byBzaW5jZSB0aGUgZWxlbWVudFxuICAgICAgICAvLyB0aGF0IGlzIGJlaW5nIGdldENvbXB1dGVkU3R5bGUnZCB3aWxsIG5vdCBiZSB2aXNpYmxlIChzaW5jZSAqID0gZGVzdGluYXRpb24pXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcGxhY2VOb2RlcyA9IGFsbExlYXZlTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZVBvc3RTdHlsZXNBc1ByZShub2RlLCBhbGxQcmVTdHlsZUVsZW1lbnRzLCBhbGxQb3N0U3R5bGVFbGVtZW50cyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBQT1NUIFNUQUdFOiBmaWxsIHRoZSAqIHN0eWxlc1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwb3N0U3R5bGVzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxMZWF2ZVF1ZXJpZWROb2RlcyA9IGNsb2FrQW5kQ29tcHV0ZVN0eWxlcyhwb3N0U3R5bGVzTWFwLCB0aGlzLmRyaXZlciwgbGVhdmVOb2Rlc1dpdGhvdXRBbmltYXRpb25zLCBhbGxQb3N0U3R5bGVFbGVtZW50cywgX2FuZ3VsYXJfYW5pbWF0aW9ucy5BVVRPX1NUWUxFKTtcbiAgICAgICAgYWxsTGVhdmVRdWVyaWVkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKHJlcGxhY2VQb3N0U3R5bGVzQXNQcmUobm9kZSwgYWxsUHJlU3R5bGVFbGVtZW50cywgYWxsUG9zdFN0eWxlRWxlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZU5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBQUkUgU1RBR0U6IGZpbGwgdGhlICEgc3R5bGVzXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZVN0eWxlc01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZW50ZXJOb2RlTWFwLmZvckVhY2goZnVuY3Rpb24gKG5vZGVzLCByb290KSB7XG4gICAgICAgICAgICBjbG9ha0FuZENvbXB1dGVTdHlsZXMocHJlU3R5bGVzTWFwLCBfdGhpcy5kcml2ZXIsIG5ldyBTZXQobm9kZXMpLCBhbGxQcmVTdHlsZUVsZW1lbnRzLCBfYW5ndWxhcl9hbmltYXRpb25zLsm1UFJFX1NUWUxFKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcGxhY2VOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwb3N0ID0gcG9zdFN0eWxlc01hcC5nZXQobm9kZSk7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmUgPSBwcmVTdHlsZXNNYXAuZ2V0KG5vZGUpO1xuICAgICAgICAgICAgcG9zdFN0eWxlc01hcC5zZXQobm9kZSwgLyoqIEB0eXBlIHs/fSAqLyAoX19hc3NpZ24oe30sIHBvc3QsIHByZSkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJvb3RQbGF5ZXJzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN1YlBsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gTk9fUEFSRU5UX0FOSU1BVElPTl9FTEVNRU5UX0RFVEVDVEVEID0ge307XG4gICAgICAgIHF1ZXVlZEluc3RydWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbnRyeS5lbGVtZW50LCBwbGF5ZXIgPSBlbnRyeS5wbGF5ZXIsIGluc3RydWN0aW9uID0gZW50cnkuaW5zdHJ1Y3Rpb247XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgaXQgd2FzIG5ldmVyIGNvbnN1bWVkIGJ5IGEgcGFyZW50IGFuaW1hdGlvbiB3aGljaFxuICAgICAgICAgICAgLy8gbWVhbnMgdGhhdCBpdCBpcyBpbmRlcGVuZGVudCBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBzZXQgZm9yIGFuaW1hdGlvblxuICAgICAgICAgICAgaWYgKHN1YlRpbWVsaW5lcy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZWRFbGVtZW50c1NldC5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLm9uRGVzdHJveShmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRTdHlsZXMoZWxlbWVudCwgaW5zdHJ1Y3Rpb24udG9TdHlsZXMpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2tpcHBlZFBsYXllcnMucHVzaChwbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBmbG93IHVwIHRoZSBET00gYW5kIHF1ZXJ5IHRoZSBtYXAgdG8gZmlndXJlIG91dFxuICAgICAgICAgICAgICAgIC8vIGlmIGEgcGFyZW50IGFuaW1hdGlvbiBoYXMgcHJpb3JpdHkgb3ZlciBpdC4gSW4gdGhlIHNpdHVhdGlvblxuICAgICAgICAgICAgICAgIC8vIHRoYXQgYSBwYXJlbnQgaXMgZGV0ZWN0ZWQgdGhlbiBpdCB3aWxsIGNhbmNlbCB0aGUgbG9vcC4gSWZcbiAgICAgICAgICAgICAgICAvLyBub3RoaW5nIGlzIGRldGVjdGVkLCBvciBpdCB0YWtlcyBhIGZldyBob3BzIHRvIGZpbmQgYSBwYXJlbnQsXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBpdCB3aWxsIGZpbGwgaW4gdGhlIG1pc3Npbmcgbm9kZXMgYW5kIHNpZ25hbCB0aGVtIGFzIGhhdmluZ1xuICAgICAgICAgICAgICAgIC8vIGEgZGV0ZWN0ZWQgcGFyZW50IChvciBhIE5PX1BBUkVOVCB2YWx1ZSB2aWEgYSBzcGVjaWFsIGNvbnN0YW50KS5cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRXaXRoQW5pbWF0aW9uXzEgPSBOT19QQVJFTlRfQU5JTUFUSU9OX0VMRU1FTlRfREVURUNURUQ7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkVsZW1lbnRNYXAuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxtID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50c1RvQWRkID0gW107XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChlbG0gPSBlbG0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGV0ZWN0ZWRQYXJlbnQgPSBhbmltYXRpb25FbGVtZW50TWFwLmdldChlbG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGVjdGVkUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50V2l0aEFuaW1hdGlvbl8xID0gZGV0ZWN0ZWRQYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzVG9BZGQucHVzaChlbG0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHNUb0FkZC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHsgcmV0dXJuIGFuaW1hdGlvbkVsZW1lbnRNYXAuc2V0KHBhcmVudCwgcGFyZW50V2l0aEFuaW1hdGlvbl8xKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlubmVyUGxheWVyID0gX3RoaXMuX2J1aWxkQW5pbWF0aW9uKHBsYXllci5uYW1lc3BhY2VJZCwgaW5zdHJ1Y3Rpb24sIGFsbFByZXZpb3VzUGxheWVyc01hcCwgc2tpcHBlZFBsYXllcnNNYXAsIHByZVN0eWxlc01hcCwgcG9zdFN0eWxlc01hcCk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldFJlYWxQbGF5ZXIoaW5uZXJQbGF5ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRXaXRoQW5pbWF0aW9uXzEgPT09IE5PX1BBUkVOVF9BTklNQVRJT05fRUxFTUVOVF9ERVRFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICByb290UGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRQbGF5ZXJzID0gX3RoaXMucGxheWVyc0J5RWxlbWVudC5nZXQocGFyZW50V2l0aEFuaW1hdGlvbl8xKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFBsYXllcnMgJiYgcGFyZW50UGxheWVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wYXJlbnRQbGF5ZXIgPSBvcHRpbWl6ZUdyb3VwUGxheWVyKHBhcmVudFBsYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNraXBwZWRQbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcmFzZVN0eWxlcyhlbGVtZW50LCBpbnN0cnVjdGlvbi5mcm9tU3R5bGVzKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIub25EZXN0cm95KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFN0eWxlcyhlbGVtZW50LCBpbnN0cnVjdGlvbi50b1N0eWxlcyk7IH0pO1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlIHN0aWxsIG1pZ2h0IGJlIGEgYW5jZXN0b3IgcGxheWVyIGFuaW1hdGluZyB0aGlzXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCB0aGVyZWZvcmUgd2Ugd2lsbCBzdGlsbCBhZGQgaXQgYXMgYSBzdWIgcGxheWVyXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpZiBpdHMgYW5pbWF0aW9uIG1heSBiZSBkaXNhYmxlZFxuICAgICAgICAgICAgICAgIHN1YlBsYXllcnMucHVzaChwbGF5ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlZEVsZW1lbnRzU2V0LmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBza2lwcGVkUGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZmluZCBhbGwgb2YgdGhlIHN1YiBwbGF5ZXJzJyBjb3JyZXNwb25kaW5nIGlubmVyIGFuaW1hdGlvbiBwbGF5ZXJcbiAgICAgICAgc3ViUGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgIC8vIGV2ZW4gaWYgYW55IHBsYXllcnMgYXJlIG5vdCBmb3VuZCBmb3IgYSBzdWIgYW5pbWF0aW9uIHRoZW4gaXRcbiAgICAgICAgICAgIC8vIHdpbGwgc3RpbGwgY29tcGxldGUgaXRzZWxmIGFmdGVyIHRoZSBuZXh0IHRpY2sgc2luY2UgaXQncyBOb29wXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXJzRm9yRWxlbWVudCA9IHNraXBwZWRQbGF5ZXJzTWFwLmdldChwbGF5ZXIuZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAocGxheWVyc0ZvckVsZW1lbnQgJiYgcGxheWVyc0ZvckVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5uZXJQbGF5ZXIgPSBvcHRpbWl6ZUdyb3VwUGxheWVyKHBsYXllcnNGb3JFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UmVhbFBsYXllcihpbm5lclBsYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0aGUgcmVhc29uIHdoeSB3ZSBkb24ndCBhY3R1YWxseSBwbGF5IHRoZSBhbmltYXRpb24gaXNcbiAgICAgICAgLy8gYmVjYXVzZSBhbGwgdGhhdCBhIHNraXBwZWQgcGxheWVyIGlzIGRlc2lnbmVkIHRvIGRvIGlzIHRvXG4gICAgICAgIC8vIGZpcmUgdGhlIHN0YXJ0L2RvbmUgdHJhbnNpdGlvbiBjYWxsYmFjayBldmVudHNcbiAgICAgICAgc2tpcHBlZFBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICBpZiAocGxheWVyLnBhcmVudFBsYXllcikge1xuICAgICAgICAgICAgICAgIHBsYXllci5zeW5jUGxheWVyRXZlbnRzKHBsYXllci5wYXJlbnRQbGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHJ1biB0aHJvdWdoIGFsbCBvZiB0aGUgcXVldWVkIHJlbW92YWxzIGFuZCBzZWUgaWYgdGhleVxuICAgICAgICAvLyB3ZXJlIHBpY2tlZCB1cCBieSBhIHF1ZXJ5LiBJZiBub3QgdGhlbiBwZXJmb3JtIHRoZSByZW1vdmFsXG4gICAgICAgIC8vIG9wZXJhdGlvbiByaWdodCBhd2F5IHVubGVzcyBhIHBhcmVudCBhbmltYXRpb24gaXMgb25nb2luZy5cbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpXzQgPSAwOyBpXzQgPCBhbGxMZWF2ZU5vZGVzLmxlbmd0aDsgaV80KyspIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnQgPSBhbGxMZWF2ZU5vZGVzW2lfNF07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXRhaWxzID0gLyoqIEB0eXBlIHs/fSAqLyAoZWxlbWVudFtSRU1PVkFMX0ZMQUddKTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIExFQVZFX0NMQVNTTkFNRSk7XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoZSBlbGVtZW50IGhhcyBhIHJlbW92YWwgYW5pbWF0aW9uIHRoYXQgaXMgYmVpbmdcbiAgICAgICAgICAgIC8vIHRha2VuIGNhcmUgb2YgYW5kIHRoZXJlZm9yZSB0aGUgaW5uZXIgZWxlbWVudHMgd2lsbCBoYW5nIGFyb3VuZFxuICAgICAgICAgICAgLy8gdW50aWwgdGhhdCBhbmltYXRpb24gaXMgb3ZlciAob3IgdGhlIHBhcmVudCBxdWVyaWVkIGFuaW1hdGlvbilcbiAgICAgICAgICAgIGlmIChkZXRhaWxzICYmIGRldGFpbHMuaGFzQW5pbWF0aW9uKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVycyA9IFtdO1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBlbGVtZW50IGlzIHF1ZXJpZWQgb3IgaWYgaXQgY29udGFpbnMgcXVlcmllZCBjaGlsZHJlblxuICAgICAgICAgICAgLy8gdGhlbiB3ZSB3YW50IGZvciB0aGUgZWxlbWVudCBub3QgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyB1bnRpbCB0aGUgcXVlcmllZCBhbmltYXRpb25zIGhhdmUgZmluaXNoZWRcbiAgICAgICAgICAgIGlmIChxdWVyaWVkRWxlbWVudHMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHF1ZXJpZWRQbGF5ZXJSZXN1bHRzID0gcXVlcmllZEVsZW1lbnRzLmdldChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAocXVlcmllZFBsYXllclJlc3VsdHMgJiYgcXVlcmllZFBsYXllclJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllcnMucHVzaC5hcHBseShwbGF5ZXJzLCBxdWVyaWVkUGxheWVyUmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHF1ZXJpZWRJbm5lckVsZW1lbnRzID0gdGhpcy5kcml2ZXIucXVlcnkoZWxlbWVudCwgTkdfQU5JTUFUSU5HX1NFTEVDVE9SLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGogPSAwOyBqIDwgcXVlcmllZElubmVyRWxlbWVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcmllZFBsYXllcnMgPSBxdWVyaWVkRWxlbWVudHMuZ2V0KHF1ZXJpZWRJbm5lckVsZW1lbnRzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJpZWRQbGF5ZXJzICYmIHF1ZXJpZWRQbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVycy5wdXNoLmFwcGx5KHBsYXllcnMsIHF1ZXJpZWRQbGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFjdGl2ZVBsYXllcnMgPSBwbGF5ZXJzLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gIXAuZGVzdHJveWVkOyB9KTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVQbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZU5vZGVzQWZ0ZXJBbmltYXRpb25Eb25lKHRoaXMsIGVsZW1lbnQsIGFjdGl2ZVBsYXllcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTGVhdmVOb2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaXMgcmVxdWlyZWQgc28gdGhlIGNsZWFudXAgbWV0aG9kIGRvZXNuJ3QgcmVtb3ZlIHRoZW1cbiAgICAgICAgYWxsTGVhdmVOb2Rlcy5sZW5ndGggPSAwO1xuICAgICAgICByb290UGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgIF90aGlzLnBsYXllcnMucHVzaChwbGF5ZXIpO1xuICAgICAgICAgICAgcGxheWVyLm9uRG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbmRleCA9IF90aGlzLnBsYXllcnMuaW5kZXhPZihwbGF5ZXIpO1xuICAgICAgICAgICAgICAgIF90aGlzLnBsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByb290UGxheWVycztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmVsZW1lbnRDb250YWluc0RhdGEgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29udGFpbnNEYXRhID0gZmFsc2U7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRldGFpbHMgPSAvKiogQHR5cGUgez99ICovIChlbGVtZW50W1JFTU9WQUxfRkxBR10pO1xuICAgICAgICBpZiAoZGV0YWlscyAmJiBkZXRhaWxzLnNldEZvclJlbW92YWwpXG4gICAgICAgICAgICBjb250YWluc0RhdGEgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5wbGF5ZXJzQnlFbGVtZW50LmhhcyhlbGVtZW50KSlcbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50LmhhcyhlbGVtZW50KSlcbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlc0J5RWxlbWVudC5oYXMoZWxlbWVudCkpXG4gICAgICAgICAgICBjb250YWluc0RhdGEgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2hOYW1lc3BhY2UobmFtZXNwYWNlSWQpLmVsZW1lbnRDb250YWluc0RhdGEoZWxlbWVudCkgfHwgY29udGFpbnNEYXRhO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuYWZ0ZXJGbHVzaCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjYWxsYmFjaykgeyB0aGlzLl9mbHVzaEZucy5wdXNoKGNhbGxiYWNrKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5hZnRlckZsdXNoQW5pbWF0aW9uc0RvbmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHsgdGhpcy5fd2hlblF1aWV0Rm5zLnB1c2goY2FsbGJhY2spOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gaXNRdWVyaWVkRWxlbWVudFxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/PX0gdHJpZ2dlck5hbWVcbiAgICAgKiBAcGFyYW0gez89fSB0b1N0YXRlVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmUucHJvdG90eXBlLl9nZXRQcmV2aW91c1BsYXllcnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGlzUXVlcmllZEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7Pz19IHRyaWdnZXJOYW1lXG4gICAgICogQHBhcmFtIHs/PX0gdG9TdGF0ZVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgaXNRdWVyaWVkRWxlbWVudCwgbmFtZXNwYWNlSWQsIHRyaWdnZXJOYW1lLCB0b1N0YXRlVmFsdWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVycyA9IFtdO1xuICAgICAgICBpZiAoaXNRdWVyaWVkRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcmllZEVsZW1lbnRQbGF5ZXJzID0gdGhpcy5wbGF5ZXJzQnlRdWVyaWVkRWxlbWVudC5nZXQoZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAocXVlcmllZEVsZW1lbnRQbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgcGxheWVycyA9IHF1ZXJpZWRFbGVtZW50UGxheWVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnRQbGF5ZXJzID0gdGhpcy5wbGF5ZXJzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50UGxheWVycykge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlzUmVtb3ZhbEFuaW1hdGlvbl8xID0gIXRvU3RhdGVWYWx1ZSB8fCB0b1N0YXRlVmFsdWUgPT0gVk9JRF9WQUxVRTtcbiAgICAgICAgICAgICAgICBlbGVtZW50UGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5xdWV1ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZW1vdmFsQW5pbWF0aW9uXzEgJiYgcGxheWVyLnRyaWdnZXJOYW1lICE9IHRyaWdnZXJOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZXNwYWNlSWQgfHwgdHJpZ2dlck5hbWUpIHtcbiAgICAgICAgICAgIHBsYXllcnMgPSBwbGF5ZXJzLmZpbHRlcihmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZUlkICYmIG5hbWVzcGFjZUlkICE9IHBsYXllci5uYW1lc3BhY2VJZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyTmFtZSAmJiB0cmlnZ2VyTmFtZSAhPSBwbGF5ZXIudHJpZ2dlck5hbWUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbGF5ZXJzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25cbiAgICAgKiBAcGFyYW0gez99IGFsbFByZXZpb3VzUGxheWVyc01hcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuX2JlZm9yZUFuaW1hdGlvbkJ1aWxkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25cbiAgICAgKiBAcGFyYW0gez99IGFsbFByZXZpb3VzUGxheWVyc01hcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBpbnN0cnVjdGlvbiwgYWxsUHJldmlvdXNQbGF5ZXJzTWFwKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRyaWdnZXJOYW1lID0gaW5zdHJ1Y3Rpb24udHJpZ2dlck5hbWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJvb3RFbGVtZW50ID0gaW5zdHJ1Y3Rpb24uZWxlbWVudDtcbiAgICAgICAgLy8gd2hlbiBhIHJlbW92YWwgYW5pbWF0aW9uIG9jY3VycywgQUxMIHByZXZpb3VzIHBsYXllcnMgYXJlIGNvbGxlY3RlZFxuICAgICAgICAvLyBhbmQgZGVzdHJveWVkIChldmVuIGlmIHRoZXkgYXJlIG91dHNpZGUgb2YgdGhlIGN1cnJlbnQgbmFtZXNwYWNlKVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0YXJnZXROYW1lU3BhY2VJZCA9IGluc3RydWN0aW9uLmlzUmVtb3ZhbFRyYW5zaXRpb24gPyB1bmRlZmluZWQgOiBuYW1lc3BhY2VJZDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdGFyZ2V0VHJpZ2dlck5hbWUgPSBpbnN0cnVjdGlvbi5pc1JlbW92YWxUcmFuc2l0aW9uID8gdW5kZWZpbmVkIDogdHJpZ2dlck5hbWU7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHRpbWVsaW5lSW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsZW1lbnQgPSB0aW1lbGluZUluc3RydWN0aW9uLmVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc1F1ZXJpZWRFbGVtZW50ID0gZWxlbWVudCAhPT0gcm9vdEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXJzID0gZ2V0T3JTZXRBc0luTWFwKGFsbFByZXZpb3VzUGxheWVyc01hcCwgZWxlbWVudCwgW10pO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldmlvdXNQbGF5ZXJzID0gdGhpc18xLl9nZXRQcmV2aW91c1BsYXllcnMoZWxlbWVudCwgaXNRdWVyaWVkRWxlbWVudCwgdGFyZ2V0TmFtZVNwYWNlSWQsIHRhcmdldFRyaWdnZXJOYW1lLCBpbnN0cnVjdGlvbi50b1N0YXRlKTtcbiAgICAgICAgICAgIHByZXZpb3VzUGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWFsUGxheWVyID0gLyoqIEB0eXBlIHs/fSAqLyAocGxheWVyLmdldFJlYWxQbGF5ZXIoKSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWxQbGF5ZXIuYmVmb3JlRGVzdHJveSkge1xuICAgICAgICAgICAgICAgICAgICByZWFsUGxheWVyLmJlZm9yZURlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGluc3RydWN0aW9uLnRpbWVsaW5lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0aW1lbGluZUluc3RydWN0aW9uID0gX2FbX2ldO1xuICAgICAgICAgICAgX2xvb3BfMSh0aW1lbGluZUluc3RydWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIG5lZWRzIHRvIGJlIGRvbmUgc28gdGhhdCB0aGUgUFJFL1BPU1Qgc3R5bGVzIGNhbiBiZVxuICAgICAgICAvLyBjb21wdXRlZCBwcm9wZXJseSB3aXRob3V0IGludGVyZmVyaW5nIHdpdGggdGhlIHByZXZpb3VzIGFuaW1hdGlvblxuICAgICAgICBlcmFzZVN0eWxlcyhyb290RWxlbWVudCwgaW5zdHJ1Y3Rpb24uZnJvbVN0eWxlcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBpbnN0cnVjdGlvblxuICAgICAqIEBwYXJhbSB7P30gYWxsUHJldmlvdXNQbGF5ZXJzTWFwXG4gICAgICogQHBhcmFtIHs/fSBza2lwcGVkUGxheWVyc01hcFxuICAgICAqIEBwYXJhbSB7P30gcHJlU3R5bGVzTWFwXG4gICAgICogQHBhcmFtIHs/fSBwb3N0U3R5bGVzTWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5fYnVpbGRBbmltYXRpb24gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBpbnN0cnVjdGlvblxuICAgICAqIEBwYXJhbSB7P30gYWxsUHJldmlvdXNQbGF5ZXJzTWFwXG4gICAgICogQHBhcmFtIHs/fSBza2lwcGVkUGxheWVyc01hcFxuICAgICAqIEBwYXJhbSB7P30gcHJlU3R5bGVzTWFwXG4gICAgICogQHBhcmFtIHs/fSBwb3N0U3R5bGVzTWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGluc3RydWN0aW9uLCBhbGxQcmV2aW91c1BsYXllcnNNYXAsIHNraXBwZWRQbGF5ZXJzTWFwLCBwcmVTdHlsZXNNYXAsIHBvc3RTdHlsZXNNYXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdHJpZ2dlck5hbWUgPSBpbnN0cnVjdGlvbi50cmlnZ2VyTmFtZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcm9vdEVsZW1lbnQgPSBpbnN0cnVjdGlvbi5lbGVtZW50O1xuICAgICAgICAvLyB3ZSBmaXJzdCBydW4gdGhpcyBzbyB0aGF0IHRoZSBwcmV2aW91cyBhbmltYXRpb24gcGxheWVyXG4gICAgICAgIC8vIGRhdGEgY2FuIGJlIHBhc3NlZCBpbnRvIHRoZSBzdWNjZXNzaXZlIGFuaW1hdGlvbiBwbGF5ZXJzXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFsbFF1ZXJpZWRQbGF5ZXJzID0gW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFsbENvbnN1bWVkRWxlbWVudHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFsbFN1YkVsZW1lbnRzID0gbmV3IFNldCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxOZXdQbGF5ZXJzID0gaW5zdHJ1Y3Rpb24udGltZWxpbmVzLm1hcChmdW5jdGlvbiAodGltZWxpbmVJbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudCA9IHRpbWVsaW5lSW5zdHJ1Y3Rpb24uZWxlbWVudDtcbiAgICAgICAgICAgIGFsbENvbnN1bWVkRWxlbWVudHMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgLy8gRklYTUUgKG1hdHNrbyk6IG1ha2Ugc3VyZSB0by1iZS1yZW1vdmVkIGFuaW1hdGlvbnMgYXJlIHJlbW92ZWQgcHJvcGVybHlcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRldGFpbHMgPSBlbGVtZW50W1JFTU9WQUxfRkxBR107XG4gICAgICAgICAgICBpZiAoZGV0YWlscyAmJiBkZXRhaWxzLnJlbW92ZWRCZWZvcmVRdWVyaWVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX2FuZ3VsYXJfYW5pbWF0aW9ucy5Ob29wQW5pbWF0aW9uUGxheWVyKCk7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc1F1ZXJpZWRFbGVtZW50ID0gZWxlbWVudCAhPT0gcm9vdEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2aW91c1BsYXllcnMgPSBmbGF0dGVuR3JvdXBQbGF5ZXJzKChhbGxQcmV2aW91c1BsYXllcnNNYXAuZ2V0KGVsZW1lbnQpIHx8IEVNUFRZX1BMQVlFUl9BUlJBWSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLmdldFJlYWxQbGF5ZXIoKTsgfSkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBgZWxlbWVudGAgaXMgbm90IGFwYXJ0IG9mIHRoZSBBbmltYXRpb25QbGF5ZXIgZGVmaW5pdGlvbiwgYnV0XG4gICAgICAgICAgICAgICAgLy8gTW9jay9XZWJBbmltYXRpb25zXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBlbGVtZW50IHdpdGhpbiB0aGVpciBpbXBsZW1lbnRhdGlvbi4gVGhpcyB3aWxsIGJlIGFkZGVkIGluIEFuZ3VsYXI1IHRvXG4gICAgICAgICAgICAgICAgLy8gQW5pbWF0aW9uUGxheWVyXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHAgPSAvKiogQHR5cGUgez99ICovIChwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHAuZWxlbWVudCA/IHBwLmVsZW1lbnQgPT09IGVsZW1lbnQgOiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJlU3R5bGVzID0gcHJlU3R5bGVzTWFwLmdldChlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBvc3RTdHlsZXMgPSBwb3N0U3R5bGVzTWFwLmdldChlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleWZyYW1lcyA9IG5vcm1hbGl6ZUtleWZyYW1lcyhfdGhpcy5kcml2ZXIsIF90aGlzLl9ub3JtYWxpemVyLCBlbGVtZW50LCB0aW1lbGluZUluc3RydWN0aW9uLmtleWZyYW1lcywgcHJlU3R5bGVzLCBwb3N0U3R5bGVzKTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllciA9IF90aGlzLl9idWlsZFBsYXllcih0aW1lbGluZUluc3RydWN0aW9uLCBrZXlmcmFtZXMsIHByZXZpb3VzUGxheWVycyk7XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgdGhpcyBwYXJ0aWN1bGFyIHBsYXllciBiZWxvbmdzIHRvIGEgc3ViIHRyaWdnZXIuIEl0IGlzXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQgdGhhdCB3ZSBtYXRjaCB0aGlzIHBsYXllciB1cCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIChAdHJpZ2dlci5saXN0ZW5lcilcbiAgICAgICAgICAgIGlmICh0aW1lbGluZUluc3RydWN0aW9uLnN1YlRpbWVsaW5lICYmIHNraXBwZWRQbGF5ZXJzTWFwKSB7XG4gICAgICAgICAgICAgICAgYWxsU3ViRWxlbWVudHMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUXVlcmllZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB3cmFwcGVkUGxheWVyID0gbmV3IFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIobmFtZXNwYWNlSWQsIHRyaWdnZXJOYW1lLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB3cmFwcGVkUGxheWVyLnNldFJlYWxQbGF5ZXIocGxheWVyKTtcbiAgICAgICAgICAgICAgICBhbGxRdWVyaWVkUGxheWVycy5wdXNoKHdyYXBwZWRQbGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbFF1ZXJpZWRQbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgZ2V0T3JTZXRBc0luTWFwKF90aGlzLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50LCBwbGF5ZXIuZWxlbWVudCwgW10pLnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgIHBsYXllci5vbkRvbmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVsZXRlT3JVbnNldEluTWFwKF90aGlzLnBsYXllcnNCeVF1ZXJpZWRFbGVtZW50LCBwbGF5ZXIuZWxlbWVudCwgcGxheWVyKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhbGxDb25zdW1lZEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGFkZENsYXNzKGVsZW1lbnQsIE5HX0FOSU1BVElOR19DTEFTU05BTUUpOyB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGxheWVyID0gb3B0aW1pemVHcm91cFBsYXllcihhbGxOZXdQbGF5ZXJzKTtcbiAgICAgICAgcGxheWVyLm9uRGVzdHJveShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhbGxDb25zdW1lZEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlbW92ZUNsYXNzKGVsZW1lbnQsIE5HX0FOSU1BVElOR19DTEFTU05BTUUpOyB9KTtcbiAgICAgICAgICAgIHNldFN0eWxlcyhyb290RWxlbWVudCwgaW5zdHJ1Y3Rpb24udG9TdHlsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcyBiYXNpY2FsbHkgbWFrZXMgYWxsIG9mIHRoZSBjYWxsYmFja3MgZm9yIHN1YiBlbGVtZW50IGFuaW1hdGlvbnNcbiAgICAgICAgLy8gYmUgZGVwZW5kZW50IG9uIHRoZSB1cHBlciBwbGF5ZXJzIGZvciB3aGVuIHRoZXkgZmluaXNoXG4gICAgICAgIGFsbFN1YkVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgZ2V0T3JTZXRBc0luTWFwKHNraXBwZWRQbGF5ZXJzTWFwLCBlbGVtZW50LCBbXSkucHVzaChwbGF5ZXIpOyB9KTtcbiAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5zdHJ1Y3Rpb25cbiAgICAgKiBAcGFyYW0gez99IGtleWZyYW1lc1xuICAgICAqIEBwYXJhbSB7P30gcHJldmlvdXNQbGF5ZXJzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZS5fYnVpbGRQbGF5ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGluc3RydWN0aW9uXG4gICAgICogQHBhcmFtIHs/fSBrZXlmcmFtZXNcbiAgICAgKiBAcGFyYW0gez99IHByZXZpb3VzUGxheWVyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGluc3RydWN0aW9uLCBrZXlmcmFtZXMsIHByZXZpb3VzUGxheWVycykge1xuICAgICAgICBpZiAoa2V5ZnJhbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyaXZlci5hbmltYXRlKGluc3RydWN0aW9uLmVsZW1lbnQsIGtleWZyYW1lcywgaW5zdHJ1Y3Rpb24uZHVyYXRpb24sIGluc3RydWN0aW9uLmRlbGF5LCBpbnN0cnVjdGlvbi5lYXNpbmcsIHByZXZpb3VzUGxheWVycyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB3aGVuIGFuIGVtcHR5IHRyYW5zaXRpb258ZGVmaW5pdGlvbiBpcyBwcm92aWRlZFxuICAgICAgICAvLyAuLi4gdGhlcmUgaXMgbm8gcG9pbnQgaW4gcmVuZGVyaW5nIGFuIGVtcHR5IGFuaW1hdGlvblxuICAgICAgICByZXR1cm4gbmV3IF9hbmd1bGFyX2FuaW1hdGlvbnMuTm9vcEFuaW1hdGlvblBsYXllcigpO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zaXRpb25BbmltYXRpb25FbmdpbmU7XG59KCkpO1xudmFyIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllcihuYW1lc3BhY2VJZCwgdHJpZ2dlck5hbWUsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2VJZCA9IG5hbWVzcGFjZUlkO1xuICAgICAgICB0aGlzLnRyaWdnZXJOYW1lID0gdHJpZ2dlck5hbWU7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3BsYXllciA9IG5ldyBfYW5ndWxhcl9hbmltYXRpb25zLk5vb3BBbmltYXRpb25QbGF5ZXIoKTtcbiAgICAgICAgdGhpcy5fY29udGFpbnNSZWFsUGxheWVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3F1ZXVlZENhbGxiYWNrcyA9IHt9O1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1hcmtlZEZvckRlc3Ryb3kgPSBmYWxzZTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLCBcInF1ZXVlZFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb250YWluc1JlYWxQbGF5ZXIgPT0gZmFsc2U7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGxheWVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5zZXRSZWFsUGxheWVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwbGF5ZXJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5zUmVhbFBsYXllcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fcGxheWVyID0gcGxheWVyO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9xdWV1ZWRDYWxsYmFja3MpLmZvckVhY2goZnVuY3Rpb24gKHBoYXNlKSB7XG4gICAgICAgICAgICBfdGhpcy5fcXVldWVkQ2FsbGJhY2tzW3BoYXNlXS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gbGlzdGVuT25QbGF5ZXIocGxheWVyLCBwaGFzZSwgdW5kZWZpbmVkLCBjYWxsYmFjayk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcXVldWVkQ2FsbGJhY2tzID0ge307XG4gICAgICAgIHRoaXMuX2NvbnRhaW5zUmVhbFBsYXllciA9IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLmdldFJlYWxQbGF5ZXIgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3BsYXllcjsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBsYXllclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllci5wcm90b3R5cGUuc3luY1BsYXllckV2ZW50cyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGxheWVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHAgPSAvKiogQHR5cGUgez99ICovICh0aGlzLl9wbGF5ZXIpO1xuICAgICAgICBpZiAocC50cmlnZ2VyQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHBsYXllci5vblN0YXJ0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHAudHJpZ2dlckNhbGxiYWNrKCdzdGFydCcpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIub25Eb25lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZpbmlzaCgpOyB9KTtcbiAgICAgICAgcGxheWVyLm9uRGVzdHJveShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5kZXN0cm95KCk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllci5wcm90b3R5cGUuX3F1ZXVlRXZlbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgZ2V0T3JTZXRBc0luTWFwKHRoaXMuX3F1ZXVlZENhbGxiYWNrcywgbmFtZSwgW10pLnB1c2goY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllci5wcm90b3R5cGUub25Eb25lID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGlmICh0aGlzLnF1ZXVlZCkge1xuICAgICAgICAgICAgdGhpcy5fcXVldWVFdmVudCgnZG9uZScsIGZuKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wbGF5ZXIub25Eb25lKGZuKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLm9uU3RhcnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgaWYgKHRoaXMucXVldWVkKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZUV2ZW50KCdzdGFydCcsIGZuKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wbGF5ZXIub25TdGFydChmbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgaWYgKHRoaXMucXVldWVkKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZUV2ZW50KCdkZXN0cm95JywgZm4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BsYXllci5vbkRlc3Ryb3koZm4pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5pbml0ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRoaXMuX3BsYXllci5pbml0KCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5oYXNTdGFydGVkID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnF1ZXVlZCA/IGZhbHNlIDogdGhpcy5fcGxheWVyLmhhc1N0YXJ0ZWQoKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLnBsYXkgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgIXRoaXMucXVldWVkICYmIHRoaXMuX3BsYXllci5wbGF5KCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyAhdGhpcy5xdWV1ZWQgJiYgdGhpcy5fcGxheWVyLnBhdXNlKCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5yZXN0YXJ0ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7ICF0aGlzLnF1ZXVlZCAmJiB0aGlzLl9wbGF5ZXIucmVzdGFydCgpOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllci5wcm90b3R5cGUuZmluaXNoID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRoaXMuX3BsYXllci5maW5pc2goKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wbGF5ZXIuZGVzdHJveSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5yZXNldCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyAhdGhpcy5xdWV1ZWQgJiYgdGhpcy5fcGxheWVyLnJlc2V0KCk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgaWYgKCF0aGlzLnF1ZXVlZCkge1xuICAgICAgICAgICAgdGhpcy5fcGxheWVyLnNldFBvc2l0aW9uKHApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRyYW5zaXRpb25BbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLmdldFBvc2l0aW9uID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnF1ZXVlZCA/IDAgOiB0aGlzLl9wbGF5ZXIuZ2V0UG9zaXRpb24oKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllci5wcm90b3R5cGUsIFwidG90YWxUaW1lXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3BsYXllci50b3RhbFRpbWU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGhhc2VOYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUcmFuc2l0aW9uQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS50cmlnZ2VyQ2FsbGJhY2sgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBoYXNlTmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBoYXNlTmFtZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwID0gLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5fcGxheWVyKTtcbiAgICAgICAgaWYgKHAudHJpZ2dlckNhbGxiYWNrKSB7XG4gICAgICAgICAgICBwLnRyaWdnZXJDYWxsYmFjayhwaGFzZU5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVHJhbnNpdGlvbkFuaW1hdGlvblBsYXllcjtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gbWFwXG4gKiBAcGFyYW0gez99IGtleVxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVsZXRlT3JVbnNldEluTWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRWYWx1ZXM7XG4gICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICBjdXJyZW50VmFsdWVzID0gbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlcykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5kZXggPSBjdXJyZW50VmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgbWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjdXJyZW50VmFsdWVzID0gbWFwW2tleV07XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbmRleCA9IGN1cnJlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWFwW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRWYWx1ZXM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRyaWdnZXJWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIHdlIHVzZSBgIT0gbnVsbGAgaGVyZSBiZWNhdXNlIGl0J3MgdGhlIG1vc3Qgc2ltcGxlXG4gICAgLy8gd2F5IHRvIHRlc3QgYWdhaW5zdCBhIFwiZmFsc3lcIiB2YWx1ZSB3aXRob3V0IG1peGluZ1xuICAgIC8vIGluIGVtcHR5IHN0cmluZ3Mgb3IgYSB6ZXJvIHZhbHVlLiBETyBOT1QgT1BUSU1JWkUuXG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IG51bGw7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbm9kZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZVsnbm9kZVR5cGUnXSA9PT0gMTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGlzVHJpZ2dlckV2ZW50VmFsaWQoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZSA9PSAnc3RhcnQnIHx8IGV2ZW50TmFtZSA9PSAnZG9uZSc7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZWxlbWVudFxuICogQHBhcmFtIHs/PX0gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNsb2FrRWxlbWVudChlbGVtZW50LCB2YWx1ZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG9sZFZhbHVlID0gZWxlbWVudC5zdHlsZS5kaXNwbGF5O1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICdub25lJztcbiAgICByZXR1cm4gb2xkVmFsdWU7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVzTWFwXG4gKiBAcGFyYW0gez99IGRyaXZlclxuICogQHBhcmFtIHs/fSBlbGVtZW50c1xuICogQHBhcmFtIHs/fSBlbGVtZW50UHJvcHNNYXBcbiAqIEBwYXJhbSB7P30gZGVmYXVsdFN0eWxlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjbG9ha0FuZENvbXB1dGVTdHlsZXModmFsdWVzTWFwLCBkcml2ZXIsIGVsZW1lbnRzLCBlbGVtZW50UHJvcHNNYXAsIGRlZmF1bHRTdHlsZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNsb2FrVmFscyA9IFtdO1xuICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGNsb2FrVmFscy5wdXNoKGNsb2FrRWxlbWVudChlbGVtZW50KSk7IH0pO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGZhaWxlZEVsZW1lbnRzID0gW107XG4gICAgZWxlbWVudFByb3BzTWFwLmZvckVhY2goZnVuY3Rpb24gKHByb3BzLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlcyA9IHt9O1xuICAgICAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IHN0eWxlc1twcm9wXSA9IGRyaXZlci5jb21wdXRlU3R5bGUoZWxlbWVudCwgcHJvcCwgZGVmYXVsdFN0eWxlKTtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGVhc3kgd2F5IHRvIGRldGVjdCB0aGlzIGJlY2F1c2UgYSBzdWIgZWxlbWVudCBjb3VsZCBiZSByZW1vdmVkXG4gICAgICAgICAgICAvLyBieSBhIHBhcmVudCBhbmltYXRpb24gZWxlbWVudCBiZWluZyBkZXRhY2hlZC5cbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50W1JFTU9WQUxfRkxBR10gPSBOVUxMX1JFTU9WRURfUVVFUklFRF9TVEFURTtcbiAgICAgICAgICAgICAgICBmYWlsZWRFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFsdWVzTWFwLnNldChlbGVtZW50LCBzdHlsZXMpO1xuICAgIH0pO1xuICAgIC8vIHdlIHVzZSBhIGluZGV4IHZhcmlhYmxlIGhlcmUgc2luY2UgU2V0LmZvckVhY2goYSwgaSkgZG9lcyBub3QgcmV0dXJuXG4gICAgLy8gYW4gaW5kZXggdmFsdWUgZm9yIHRoZSBjbG9zdXJlIChidXQgaW5zdGVhZCBqdXN0IHRoZSB2YWx1ZSlcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDtcbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBjbG9ha0VsZW1lbnQoZWxlbWVudCwgY2xvYWtWYWxzW2krK10pOyB9KTtcbiAgICByZXR1cm4gZmFpbGVkRWxlbWVudHM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcm9vdHNcbiAqIEBwYXJhbSB7P30gbm9kZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkUm9vdE1hcChyb290cywgbm9kZXMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByb290TWFwID0gbmV3IE1hcCgpO1xuICAgIHJvb3RzLmZvckVhY2goZnVuY3Rpb24gKHJvb3QpIHsgcmV0dXJuIHJvb3RNYXAuc2V0KHJvb3QsIFtdKTsgfSk7XG4gICAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwKVxuICAgICAgICByZXR1cm4gcm9vdE1hcDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBOVUxMX05PREUgPSAxO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVTZXQgPSBuZXcgU2V0KG5vZGVzKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsb2NhbFJvb3RNYXAgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIE5VTExfTk9ERTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcm9vdCA9IGxvY2FsUm9vdE1hcC5nZXQobm9kZSk7XG4gICAgICAgIGlmIChyb290KVxuICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHJvb3RNYXAuaGFzKHBhcmVudCkpIHtcbiAgICAgICAgICAgIC8vIG5nSWYgaW5zaWRlIEB0cmlnZ2VyXG4gICAgICAgICAgICByb290ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGVTZXQuaGFzKHBhcmVudCkpIHtcbiAgICAgICAgICAgIC8vIG5nSWYgaW5zaWRlIG5nSWZcbiAgICAgICAgICAgIHJvb3QgPSBOVUxMX05PREU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZWN1cnNlIHVwd2FyZHNcbiAgICAgICAgICAgIHJvb3QgPSBnZXRSb290KHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxSb290TWFwLnNldChub2RlLCByb290KTtcbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcm9vdCA9IGdldFJvb3Qobm9kZSk7XG4gICAgICAgIGlmIChyb290ICE9PSBOVUxMX05PREUpIHtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKChyb290TWFwLmdldChyb290KSkpLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcm9vdE1hcDtcbn1cbnZhciBDTEFTU0VTX0NBQ0hFX0tFWSA9ICckJGNsYXNzZXMnO1xuLyoqXG4gKiBAcGFyYW0gez99IGVsZW1lbnRcbiAqIEBwYXJhbSB7P30gY2xhc3NOYW1lXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbGFzc2VzID0gZWxlbWVudFtDTEFTU0VTX0NBQ0hFX0tFWV07XG4gICAgICAgIGlmICghY2xhc3Nlcykge1xuICAgICAgICAgICAgY2xhc3NlcyA9IGVsZW1lbnRbQ0xBU1NFU19DQUNIRV9LRVldID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY2xhc3Nlc1tjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZWxlbWVudFxuICogQHBhcmFtIHs/fSBjbGFzc05hbWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNsYXNzZXMgPSBlbGVtZW50W0NMQVNTRVNfQ0FDSEVfS0VZXTtcbiAgICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjbGFzc2VzW2NsYXNzTmFtZV07XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZW5naW5lXG4gKiBAcGFyYW0gez99IGVsZW1lbnRcbiAqIEBwYXJhbSB7P30gcGxheWVyc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlTm9kZXNBZnRlckFuaW1hdGlvbkRvbmUoZW5naW5lLCBlbGVtZW50LCBwbGF5ZXJzKSB7XG4gICAgb3B0aW1pemVHcm91cFBsYXllcihwbGF5ZXJzKS5vbkRvbmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5naW5lLnByb2Nlc3NMZWF2ZU5vZGUoZWxlbWVudCk7IH0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHBsYXllcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5Hcm91cFBsYXllcnMocGxheWVycykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGZpbmFsUGxheWVycyA9IFtdO1xuICAgIF9mbGF0dGVuR3JvdXBQbGF5ZXJzUmVjdXIocGxheWVycywgZmluYWxQbGF5ZXJzKTtcbiAgICByZXR1cm4gZmluYWxQbGF5ZXJzO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHBsYXllcnNcbiAqIEBwYXJhbSB7P30gZmluYWxQbGF5ZXJzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfZmxhdHRlbkdyb3VwUGxheWVyc1JlY3VyKHBsYXllcnMsIGZpbmFsUGxheWVycykge1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBwbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXllciA9IHBsYXllcnNbaV07XG4gICAgICAgIGlmIChwbGF5ZXIgaW5zdGFuY2VvZiBfYW5ndWxhcl9hbmltYXRpb25zLsm1QW5pbWF0aW9uR3JvdXBQbGF5ZXIpIHtcbiAgICAgICAgICAgIF9mbGF0dGVuR3JvdXBQbGF5ZXJzUmVjdXIocGxheWVyLnBsYXllcnMsIGZpbmFsUGxheWVycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaW5hbFBsYXllcnMucHVzaCgvKiogQHR5cGUgez99ICovIChwbGF5ZXIpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBhXG4gKiBAcGFyYW0gez99IGJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG9iakVxdWFscyhhLCBiKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gazEgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrMiA9IE9iamVjdC5rZXlzKGIpO1xuICAgIGlmIChrMS5sZW5ndGggIT0gazIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGsxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3AgPSBrMVtpXTtcbiAgICAgICAgaWYgKCFiLmhhc093blByb3BlcnR5KHByb3ApIHx8IGFbcHJvcF0gIT09IGJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVsZW1lbnRcbiAqIEBwYXJhbSB7P30gYWxsUHJlU3R5bGVFbGVtZW50c1xuICogQHBhcmFtIHs/fSBhbGxQb3N0U3R5bGVFbGVtZW50c1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZVBvc3RTdHlsZXNBc1ByZShlbGVtZW50LCBhbGxQcmVTdHlsZUVsZW1lbnRzLCBhbGxQb3N0U3R5bGVFbGVtZW50cykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBvc3RFbnRyeSA9IGFsbFBvc3RTdHlsZUVsZW1lbnRzLmdldChlbGVtZW50KTtcbiAgICBpZiAoIXBvc3RFbnRyeSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZUVudHJ5ID0gYWxsUHJlU3R5bGVFbGVtZW50cy5nZXQoZWxlbWVudCk7XG4gICAgaWYgKHByZUVudHJ5KSB7XG4gICAgICAgIHBvc3RFbnRyeS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiAoKHByZUVudHJ5KSkuYWRkKGRhdGEpOyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFsbFByZVN0eWxlRWxlbWVudHMuc2V0KGVsZW1lbnQsIHBvc3RFbnRyeSk7XG4gICAgfVxuICAgIGFsbFBvc3RTdHlsZUVsZW1lbnRzLmRlbGV0ZShlbGVtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xudmFyIEFuaW1hdGlvbkVuZ2luZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25FbmdpbmUoX2RyaXZlciwgbm9ybWFsaXplcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9kcml2ZXIgPSBfZHJpdmVyO1xuICAgICAgICB0aGlzLl90cmlnZ2VyQ2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5vblJlbW92YWxDb21wbGV0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250ZXh0KSB7IH07XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmdpbmUgPSBuZXcgVHJhbnNpdGlvbkFuaW1hdGlvbkVuZ2luZShfZHJpdmVyLCBub3JtYWxpemVyKTtcbiAgICAgICAgdGhpcy5fdGltZWxpbmVFbmdpbmUgPSBuZXcgVGltZWxpbmVBbmltYXRpb25FbmdpbmUoX2RyaXZlciwgbm9ybWFsaXplcik7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmdpbmUub25SZW1vdmFsQ29tcGxldGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uUmVtb3ZhbENvbXBsZXRlKGVsZW1lbnQsIGNvbnRleHQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbXBvbmVudElkXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IG1ldGFkYXRhXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLnJlZ2lzdGVyVHJpZ2dlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50SWRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBob3N0RWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjb21wb25lbnRJZCwgbmFtZXNwYWNlSWQsIGhvc3RFbGVtZW50LCBuYW1lLCBtZXRhZGF0YSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjYWNoZUtleSA9IGNvbXBvbmVudElkICsgJy0nICsgbmFtZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJDYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JzID0gW107XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhc3QgPSAvKiogQHR5cGUgez99ICovIChidWlsZEFuaW1hdGlvbkFzdCh0aGlzLl9kcml2ZXIsIC8qKiBAdHlwZSB7P30gKi8gKG1ldGFkYXRhKSwgZXJyb3JzKSk7XG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBhbmltYXRpb24gdHJpZ2dlciBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGhhcyBmYWlsZWQgdG8gYnVpbGQgZHVlIHRvIHRoZSBmb2xsb3dpbmcgZXJyb3JzOlxcbiAtIFwiICsgZXJyb3JzLmpvaW4oXCJcXG4gLSBcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZ2dlciA9IGJ1aWxkVHJpZ2dlcihuYW1lLCBhc3QpO1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckNhY2hlW2NhY2hlS2V5XSA9IHRyaWdnZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5yZWdpc3RlclRyaWdnZXIobmFtZXNwYWNlSWQsIG5hbWUsIHRyaWdnZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUucmVnaXN0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBob3N0RWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBob3N0RWxlbWVudCkge1xuICAgICAgICB0aGlzLl90cmFuc2l0aW9uRW5naW5lLnJlZ2lzdGVyKG5hbWVzcGFjZUlkLCBob3N0RWxlbWVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZXNwYWNlSWQsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5kZXN0cm95KG5hbWVzcGFjZUlkLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gaW5zZXJ0QmVmb3JlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLm9uSW5zZXJ0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBpbnNlcnRCZWZvcmVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lc3BhY2VJZCwgZWxlbWVudCwgcGFyZW50LCBpbnNlcnRCZWZvcmUpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5pbnNlcnROb2RlKG5hbWVzcGFjZUlkLCBlbGVtZW50LCBwYXJlbnQsIGluc2VydEJlZm9yZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLm9uUmVtb3ZlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY29udGV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBlbGVtZW50LCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmdpbmUucmVtb3ZlTm9kZShuYW1lc3BhY2VJZCwgZWxlbWVudCwgY29udGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGRpc2FibGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuZGlzYWJsZUFuaW1hdGlvbnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGRpc2FibGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBkaXNhYmxlKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmdpbmUubWFya0VsZW1lbnRBc0Rpc2FibGVkKGVsZW1lbnQsIGRpc2FibGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLnByb2Nlc3MgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUlkXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lc3BhY2VJZCwgZWxlbWVudCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5jaGFyQXQoMCkgPT0gJ0AnKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBwYXJzZVRpbWVsaW5lQ29tbWFuZChwcm9wZXJ0eSksIGlkID0gX2FbMF0sIGFjdGlvbiA9IF9hWzFdO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXJncyA9IC8qKiBAdHlwZSB7P30gKi8gKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lRW5naW5lLmNvbW1hbmQoaWQsIGVsZW1lbnQsIGFjdGlvbiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uRW5naW5lLnRyaWdnZXIobmFtZXNwYWNlSWQsIGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlSWRcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gZXZlbnRQaGFzZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUubGlzdGVuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VJZFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHs/fSBldmVudFBoYXNlXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWVzcGFjZUlkLCBlbGVtZW50LCBldmVudE5hbWUsIGV2ZW50UGhhc2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIEBAbGlzdGVuXG4gICAgICAgIGlmIChldmVudE5hbWUuY2hhckF0KDApID09ICdAJykge1xuICAgICAgICAgICAgdmFyIF9hID0gcGFyc2VUaW1lbGluZUNvbW1hbmQoZXZlbnROYW1lKSwgaWQgPSBfYVswXSwgYWN0aW9uID0gX2FbMV07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmVFbmdpbmUubGlzdGVuKGlkLCBlbGVtZW50LCBhY3Rpb24sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5saXN0ZW4obmFtZXNwYWNlSWQsIGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnRQaGFzZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/PX0gbWljcm90YXNrSWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvbkVuZ2luZS5wcm90b3R5cGUuZmx1c2ggPSAvKipcbiAgICAgKiBAcGFyYW0gez89fSBtaWNyb3Rhc2tJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1pY3JvdGFza0lkKSB7XG4gICAgICAgIGlmIChtaWNyb3Rhc2tJZCA9PT0gdm9pZCAwKSB7IG1pY3JvdGFza0lkID0gLTE7IH1cbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5mbHVzaChtaWNyb3Rhc2tJZCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uRW5naW5lLnByb3RvdHlwZSwgXCJwbGF5ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5fdHJhbnNpdGlvbkVuZ2luZS5wbGF5ZXJzKSlcbiAgICAgICAgICAgICAgICAuY29uY2F0KC8qKiBAdHlwZSB7P30gKi8gKHRoaXMuX3RpbWVsaW5lRW5naW5lLnBsYXllcnMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25FbmdpbmUucHJvdG90eXBlLndoZW5SZW5kZXJpbmdEb25lID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl90cmFuc2l0aW9uRW5naW5lLndoZW5SZW5kZXJpbmdEb25lKCk7IH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbkVuZ2luZTtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbnZhciBXZWJBbmltYXRpb25zUGxheWVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYkFuaW1hdGlvbnNQbGF5ZXIoZWxlbWVudCwga2V5ZnJhbWVzLCBvcHRpb25zLCBwcmV2aW91c1BsYXllcnMpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzUGxheWVycyA9PT0gdm9pZCAwKSB7IHByZXZpb3VzUGxheWVycyA9IFtdOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMua2V5ZnJhbWVzID0ga2V5ZnJhbWVzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnByZXZpb3VzUGxheWVycyA9IHByZXZpb3VzUGxheWVycztcbiAgICAgICAgdGhpcy5fb25Eb25lRm5zID0gW107XG4gICAgICAgIHRoaXMuX29uU3RhcnRGbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fb25EZXN0cm95Rm5zID0gW107XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGltZSA9IDA7XG4gICAgICAgIHRoaXMucGFyZW50UGxheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcmV2aW91c1N0eWxlcyA9IHt9O1xuICAgICAgICB0aGlzLmN1cnJlbnRTbmFwc2hvdCA9IHt9O1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IC8qKiBAdHlwZSB7P30gKi8gKG9wdGlvbnNbJ2R1cmF0aW9uJ10pO1xuICAgICAgICB0aGlzLl9kZWxheSA9IC8qKiBAdHlwZSB7P30gKi8gKG9wdGlvbnNbJ2RlbGF5J10pIHx8IDA7XG4gICAgICAgIHRoaXMudGltZSA9IHRoaXMuX2R1cmF0aW9uICsgdGhpcy5fZGVsYXk7XG4gICAgICAgIGlmIChhbGxvd1ByZXZpb3VzUGxheWVyU3R5bGVzTWVyZ2UodGhpcy5fZHVyYXRpb24sIHRoaXMuX2RlbGF5KSkge1xuICAgICAgICAgICAgcHJldmlvdXNQbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlcyA9IHBsYXllci5jdXJyZW50U25hcHNob3Q7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiBfdGhpcy5wcmV2aW91c1N0eWxlc1twcm9wXSA9IHN0eWxlc1twcm9wXTsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLl9vbkZpbmlzaCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9vbkRvbmVGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5fb25Eb25lRm5zID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUuaW5pdCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9idWlsZFBsYXllcigpO1xuICAgICAgICB0aGlzLl9wcmVwYXJlUGxheWVyQmVmb3JlU3RhcnQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUuX2J1aWxkUGxheWVyID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXlmcmFtZXMgPSB0aGlzLmtleWZyYW1lcy5tYXAoZnVuY3Rpb24gKHN0eWxlcykgeyByZXR1cm4gY29weVN0eWxlcyhzdHlsZXMsIGZhbHNlKTsgfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZXZpb3VzU3R5bGVQcm9wcyA9IE9iamVjdC5rZXlzKHRoaXMucHJldmlvdXNTdHlsZXMpO1xuICAgICAgICBpZiAocHJldmlvdXNTdHlsZVByb3BzLmxlbmd0aCAmJiBrZXlmcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGFydGluZ0tleWZyYW1lXzEgPSBrZXlmcmFtZXNbMF07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtaXNzaW5nU3R5bGVQcm9wc18xID0gW107XG4gICAgICAgICAgICBwcmV2aW91c1N0eWxlUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIGlmICghc3RhcnRpbmdLZXlmcmFtZV8xLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZVByb3BzXzEucHVzaChwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRpbmdLZXlmcmFtZV8xW3Byb3BdID0gX3RoaXMucHJldmlvdXNTdHlsZXNbcHJvcF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChtaXNzaW5nU3R5bGVQcm9wc18xLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNlbGZfMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtmID0ga2V5ZnJhbWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVQcm9wc18xLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtmW3Byb3BdID0gX2NvbXB1dGVTdHlsZShzZWxmXzEuZWxlbWVudCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMTsgaSA8IGtleWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICgvKiogQHR5cGUgez99ICovICh0aGlzKSkuZG9tUGxheWVyID1cbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJXZWJBbmltYXRpb24odGhpcy5lbGVtZW50LCBrZXlmcmFtZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2ZpbmFsS2V5ZnJhbWUgPSBrZXlmcmFtZXMubGVuZ3RoID8ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXSA6IHt9O1xuICAgICAgICB0aGlzLmRvbVBsYXllci5hZGRFdmVudExpc3RlbmVyKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fb25GaW5pc2goKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLl9wcmVwYXJlUGxheWVyQmVmb3JlU3RhcnQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gdGhpcyBpcyByZXF1aXJlZCBzbyB0aGF0IHRoZSBwbGF5ZXIgZG9lc24ndCBzdGFydCB0byBhbmltYXRlIHJpZ2h0IGF3YXlcbiAgICAgICAgaWYgKHRoaXMuX2RlbGF5KSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNldERvbVBsYXllclN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRvbVBsYXllci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGtleWZyYW1lc1xuICAgICAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUuX3RyaWdnZXJXZWJBbmltYXRpb24gPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30ga2V5ZnJhbWVzXG4gICAgICogQHBhcmFtIHs/fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwga2V5ZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIGpzY29tcGlsZXIgZG9lc24ndCBzZWVtIHRvIGtub3cgYW5pbWF0ZSBpcyBhIG5hdGl2ZSBwcm9wZXJ0eSBiZWNhdXNlIGl0J3Mgbm90IGZ1bGx5XG4gICAgICAgIC8vIHN1cHBvcnRlZCB5ZXQgYWNyb3NzIGNvbW1vbiBicm93c2VycyAod2UgcG9seWZpbGwgaXQgZm9yIEVkZ2UvU2FmYXJpKSBbQ0wgIzE0MzYzMDkyOV1cbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKGVsZW1lbnRbJ2FuaW1hdGUnXShrZXlmcmFtZXMsIG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLm9uU3RhcnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25TdGFydEZucy5wdXNoKGZuKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zUGxheWVyLnByb3RvdHlwZS5vbkRvbmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25Eb25lRm5zLnB1c2goZm4pOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLm9uRGVzdHJveSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyB0aGlzLl9vbkRlc3Ryb3lGbnMucHVzaChmbik7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2J1aWxkUGxheWVyKCk7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdGFydGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX29uU3RhcnRGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5fb25TdGFydEZucyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb21QbGF5ZXIucGxheSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5kb21QbGF5ZXIucGF1c2UoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUuZmluaXNoID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB0aGlzLl9vbkZpbmlzaCgpO1xuICAgICAgICB0aGlzLmRvbVBsYXllci5maW5pc2goKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUucmVzZXQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXREb21QbGF5ZXJTdGF0ZSgpO1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zUGxheWVyLnByb3RvdHlwZS5fcmVzZXREb21QbGF5ZXJTdGF0ZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb21QbGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tUGxheWVyLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLnJlc3RhcnQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUuaGFzU3RhcnRlZCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhcnRlZDsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9yZXNldERvbVBsYXllclN0YXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9vbkZpbmlzaCgpO1xuICAgICAgICAgICAgdGhpcy5fb25EZXN0cm95Rm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuX29uRGVzdHJveUZucyA9IFtdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLnNldFBvc2l0aW9uID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocCkgeyB0aGlzLmRvbVBsYXllci5jdXJyZW50VGltZSA9IHAgKiB0aGlzLnRpbWU7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zUGxheWVyLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5kb21QbGF5ZXIuY3VycmVudFRpbWUgLyB0aGlzLnRpbWU7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLCBcInRvdGFsVGltZVwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWxheSArIHRoaXMuX2R1cmF0aW9uOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFdlYkFuaW1hdGlvbnNQbGF5ZXIucHJvdG90eXBlLmJlZm9yZURlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzID0ge307XG4gICAgICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWQoKSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fZmluYWxLZXlmcmFtZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wICE9ICdvZmZzZXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlc1twcm9wXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZmluaXNoZWQgPyBfdGhpcy5fZmluYWxLZXlmcmFtZVtwcm9wXSA6IF9jb21wdXRlU3R5bGUoX3RoaXMuZWxlbWVudCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50U25hcHNob3QgPSBzdHlsZXM7XG4gICAgfTtcbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBoYXNlTmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc1BsYXllci5wcm90b3R5cGUudHJpZ2dlckNhbGxiYWNrID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwaGFzZU5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwaGFzZU5hbWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWV0aG9kcyA9IHBoYXNlTmFtZSA9PSAnc3RhcnQnID8gdGhpcy5fb25TdGFydEZucyA6IHRoaXMuX29uRG9uZUZucztcbiAgICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfSk7XG4gICAgICAgIG1ldGhvZHMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBXZWJBbmltYXRpb25zUGxheWVyO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50XG4gKiBAcGFyYW0gez99IHByb3BcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9jb21wdXRlU3R5bGUoZWxlbWVudCwgcHJvcCkge1xuICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkpKVtwcm9wXTtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xudmFyIFdlYkFuaW1hdGlvbnNEcml2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2ViQW5pbWF0aW9uc0RyaXZlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm9wXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zRHJpdmVyLnByb3RvdHlwZS52YWxpZGF0ZVN0eWxlUHJvcGVydHkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3BcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiB2YWxpZGF0ZVN0eWxlUHJvcGVydHkocHJvcCk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc0RyaXZlci5wcm90b3R5cGUubWF0Y2hlc0VsZW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNFbGVtZW50KGVsZW1lbnQsIHNlbGVjdG9yKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxtMVxuICAgICAqIEBwYXJhbSB7P30gZWxtMlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc0RyaXZlci5wcm90b3R5cGUuY29udGFpbnNFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbG0xXG4gICAgICogQHBhcmFtIHs/fSBlbG0yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxtMSwgZWxtMikgeyByZXR1cm4gY29udGFpbnNFbGVtZW50KGVsbTEsIGVsbTIpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gez99IG11bHRpXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zRHJpdmVyLnByb3RvdHlwZS5xdWVyeSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gez99IG11bHRpXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IsIG11bHRpKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VRdWVyeShlbGVtZW50LCBzZWxlY3RvciwgbXVsdGkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwcm9wXG4gICAgICogQHBhcmFtIHs/PX0gZGVmYXVsdFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXZWJBbmltYXRpb25zRHJpdmVyLnByb3RvdHlwZS5jb21wdXRlU3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHByb3BcbiAgICAgKiBAcGFyYW0gez89fSBkZWZhdWx0VmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBwcm9wLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSkpW3Byb3BdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30ga2V5ZnJhbWVzXG4gICAgICogQHBhcmFtIHs/fSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7P30gZGVsYXlcbiAgICAgKiBAcGFyYW0gez99IGVhc2luZ1xuICAgICAqIEBwYXJhbSB7Pz19IHByZXZpb3VzUGxheWVyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgV2ViQW5pbWF0aW9uc0RyaXZlci5wcm90b3R5cGUuYW5pbWF0ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30ga2V5ZnJhbWVzXG4gICAgICogQHBhcmFtIHs/fSBkdXJhdGlvblxuICAgICAqIEBwYXJhbSB7P30gZGVsYXlcbiAgICAgKiBAcGFyYW0gez99IGVhc2luZ1xuICAgICAqIEBwYXJhbSB7Pz19IHByZXZpb3VzUGxheWVyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIGtleWZyYW1lcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIHByZXZpb3VzUGxheWVycykge1xuICAgICAgICBpZiAocHJldmlvdXNQbGF5ZXJzID09PSB2b2lkIDApIHsgcHJldmlvdXNQbGF5ZXJzID0gW107IH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmlsbCA9IGRlbGF5ID09IDAgPyAnYm90aCcgOiAnZm9yd2FyZHMnO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF5ZXJPcHRpb25zID0geyBkdXJhdGlvbjogZHVyYXRpb24sIGRlbGF5OiBkZWxheSwgZmlsbDogZmlsbCB9O1xuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdGhpcyB0byBhdm9pZCBoYXZpbmcgYSBudWxsfHVuZGVmaW5lZCB2YWx1ZSBiZSBwcmVzZW50XG4gICAgICAgIC8vIGZvciB0aGUgZWFzaW5nICh3aGljaCByZXN1bHRzIGluIGFuIGVycm9yIGZvciBjZXJ0YWluIGJyb3dzZXJzICM5NzUyKVxuICAgICAgICBpZiAoZWFzaW5nKSB7XG4gICAgICAgICAgICBwbGF5ZXJPcHRpb25zWydlYXNpbmcnXSA9IGVhc2luZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2aW91c1dlYkFuaW1hdGlvblBsYXllcnMgPSAvKiogQHR5cGUgez99ICovIChwcmV2aW91c1BsYXllcnMuZmlsdGVyKGZ1bmN0aW9uIChwbGF5ZXIpIHsgcmV0dXJuIHBsYXllciBpbnN0YW5jZW9mIFdlYkFuaW1hdGlvbnNQbGF5ZXI7IH0pKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJBbmltYXRpb25zUGxheWVyKGVsZW1lbnQsIGtleWZyYW1lcywgcGxheWVyT3B0aW9ucywgcHJldmlvdXNXZWJBbmltYXRpb25QbGF5ZXJzKTtcbiAgICB9O1xuICAgIHJldHVybiBXZWJBbmltYXRpb25zRHJpdmVyO1xufSgpKTtcbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc3VwcG9ydHNXZWJBbmltYXRpb25zKCkge1xuICAgIHJldHVybiB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mICgvKiogQHR5cGUgez99ICovIChFbGVtZW50KSkucHJvdG90eXBlWydhbmltYXRlJ10gPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydHMuQW5pbWF0aW9uRHJpdmVyID0gQW5pbWF0aW9uRHJpdmVyO1xuZXhwb3J0cy7JtUFuaW1hdGlvbiA9IEFuaW1hdGlvbjtcbmV4cG9ydHMuybVBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXIgPSBBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXI7XG5leHBvcnRzLsm1Tm9vcEFuaW1hdGlvblN0eWxlTm9ybWFsaXplciA9IE5vb3BBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXI7XG5leHBvcnRzLsm1V2ViQW5pbWF0aW9uc1N0eWxlTm9ybWFsaXplciA9IFdlYkFuaW1hdGlvbnNTdHlsZU5vcm1hbGl6ZXI7XG5leHBvcnRzLsm1Tm9vcEFuaW1hdGlvbkRyaXZlciA9IE5vb3BBbmltYXRpb25Ecml2ZXI7XG5leHBvcnRzLsm1QW5pbWF0aW9uRW5naW5lID0gQW5pbWF0aW9uRW5naW5lO1xuZXhwb3J0cy7JtVdlYkFuaW1hdGlvbnNEcml2ZXIgPSBXZWJBbmltYXRpb25zRHJpdmVyO1xuZXhwb3J0cy7JtXN1cHBvcnRzV2ViQW5pbWF0aW9ucyA9IHN1cHBvcnRzV2ViQW5pbWF0aW9ucztcbmV4cG9ydHMuybVXZWJBbmltYXRpb25zUGxheWVyID0gV2ViQW5pbWF0aW9uc1BsYXllcjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbnMtYnJvd3Nlci51bWQuanMubWFwXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGFuZ3VsYXIvYW5pbWF0aW9ucy9idW5kbGVzL2FuaW1hdGlvbnMtYnJvd3Nlci51bWQuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50O1xuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3RlckRhdGEnKTtcblxuZnVuY3Rpb24gQ29tbWVudChkb2MsIGRhdGEpIHtcbiAgdGhpcy5ub2RlVHlwZSA9IE5vZGUuQ09NTUVOVF9OT0RFO1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBkb2M7XG4gIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB0aGlzLl9pbmRleCA9IHVuZGVmaW5lZDtcbn1cblxudmFyIG5vZGVWYWx1ZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2RhdGE7IH0sXG4gIHNldDogZnVuY3Rpb24odikge1xuICAgIHRoaXMuX2RhdGEgPSB2O1xuICAgIGlmICh0aGlzLnJvb3RlZClcbiAgICAgIHRoaXMub3duZXJEb2N1bWVudC5tdXRhdGVWYWx1ZSh0aGlzKTtcbiAgfVxufTtcblxuQ29tbWVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCB7XG4gIG5vZGVOYW1lOiB7IHZhbHVlOiAnI2NvbW1lbnQnIH0sXG4gIG5vZGVWYWx1ZTogbm9kZVZhbHVlLFxuICB0ZXh0Q29udGVudDogbm9kZVZhbHVlLFxuICBkYXRhOiBub2RlVmFsdWUsXG5cbiAgLy8gVXRpbGl0eSBtZXRob2RzXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbW1lbnQodGhpcy5vd25lckRvY3VtZW50LCB0aGlzLl9kYXRhKTtcbiAgfX0sXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0NvbW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBET01FeGNlcHRpb247XG5cbnZhciBJTkRFWF9TSVpFX0VSUiA9IDE7XG52YXIgSElFUkFSQ0hZX1JFUVVFU1RfRVJSID0gMztcbnZhciBXUk9OR19ET0NVTUVOVF9FUlIgPSA0O1xudmFyIElOVkFMSURfQ0hBUkFDVEVSX0VSUiA9IDU7XG52YXIgTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSID0gNztcbnZhciBOT1RfRk9VTkRfRVJSID0gODtcbnZhciBOT1RfU1VQUE9SVEVEX0VSUiA9IDk7XG52YXIgSU5WQUxJRF9TVEFURV9FUlIgPSAxMTtcbnZhciBTWU5UQVhfRVJSID0gMTI7XG52YXIgSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSID0gMTM7XG52YXIgTkFNRVNQQUNFX0VSUiA9IDE0O1xudmFyIElOVkFMSURfQUNDRVNTX0VSUiA9IDE1O1xudmFyIFRZUEVfTUlTTUFUQ0hfRVJSID0gMTc7XG52YXIgU0VDVVJJVFlfRVJSID0gMTg7XG52YXIgTkVUV09SS19FUlIgPSAxOTtcbnZhciBBQk9SVF9FUlIgPSAyMDtcbnZhciBVUkxfTUlTTUFUQ0hfRVJSID0gMjE7XG52YXIgUVVPVEFfRVhDRUVERURfRVJSID0gMjI7XG52YXIgVElNRU9VVF9FUlIgPSAyMztcbnZhciBJTlZBTElEX05PREVfVFlQRV9FUlIgPSAyNDtcbnZhciBEQVRBX0NMT05FX0VSUiA9IDI1O1xuXG4vLyBDb2RlIHRvIG5hbWVcbnZhciBuYW1lcyA9IFtcbiAgbnVsbCwgIC8vIE5vIGVycm9yIHdpdGggY29kZSAwXG4gICdJTkRFWF9TSVpFX0VSUicsXG4gIG51bGwsIC8vIGhpc3RvcmljYWxcbiAgJ0hJRVJBUkNIWV9SRVFVRVNUX0VSUicsXG4gICdXUk9OR19ET0NVTUVOVF9FUlInLFxuICAnSU5WQUxJRF9DSEFSQUNURVJfRVJSJyxcbiAgbnVsbCwgLy8gaGlzdG9yaWNhbFxuICAnTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSJyxcbiAgJ05PVF9GT1VORF9FUlInLFxuICAnTk9UX1NVUFBPUlRFRF9FUlInLFxuICBudWxsLCAvLyBoaXN0b3JpY2FsXG4gICdJTlZBTElEX1NUQVRFX0VSUicsXG4gICdTWU5UQVhfRVJSJyxcbiAgJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUicsXG4gICdOQU1FU1BBQ0VfRVJSJyxcbiAgJ0lOVkFMSURfQUNDRVNTX0VSUicsXG4gIG51bGwsIC8vIGhpc3RvcmljYWxcbiAgJ1RZUEVfTUlTTUFUQ0hfRVJSJyxcbiAgJ1NFQ1VSSVRZX0VSUicsXG4gICdORVRXT1JLX0VSUicsXG4gICdBQk9SVF9FUlInLFxuICAnVVJMX01JU01BVENIX0VSUicsXG4gICdRVU9UQV9FWENFRURFRF9FUlInLFxuICAnVElNRU9VVF9FUlInLFxuICAnSU5WQUxJRF9OT0RFX1RZUEVfRVJSJyxcbiAgJ0RBVEFfQ0xPTkVfRVJSJyxcbl07XG5cbi8vIENvZGUgdG8gbWVzc2FnZVxuLy8gVGhlc2Ugc3RyaW5ncyBhcmUgZnJvbSB0aGUgMTMgTWF5IDIwMTEgRWRpdG9yJ3MgRHJhZnQgb2YgRE9NIENvcmUuXG4vLyBodHRwOi8vZHZjcy53My5vcmcvaGcvZG9tY29yZS9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbFxuLy8gQ29weXJpZ2h0IMKpIDIwMTEgVzNDwq4gKE1JVCwgRVJDSU0sIEtlaW8pLCBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gVXNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIFczQyBEb2N1bWVudCBMaWNlbnNlOlxuLy8gaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDAyL2NvcHlyaWdodC1kb2N1bWVudHMtMjAwMjEyMzFcbnZhciBtZXNzYWdlcyA9IFtcbiAgbnVsbCwgIC8vIE5vIGVycm9yIHdpdGggY29kZSAwXG4gICdJTkRFWF9TSVpFX0VSUiAoMSk6IHRoZSBpbmRleCBpcyBub3QgaW4gdGhlIGFsbG93ZWQgcmFuZ2UnLFxuICBudWxsLFxuICAnSElFUkFSQ0hZX1JFUVVFU1RfRVJSICgzKTogdGhlIG9wZXJhdGlvbiB3b3VsZCB5aWVsZCBhbiBpbmNvcnJlY3Qgbm9kZXMgbW9kZWwnLFxuICAnV1JPTkdfRE9DVU1FTlRfRVJSICg0KTogdGhlIG9iamVjdCBpcyBpbiB0aGUgd3JvbmcgRG9jdW1lbnQsIGEgY2FsbCB0byBpbXBvcnROb2RlIGlzIHJlcXVpcmVkJyxcbiAgJ0lOVkFMSURfQ0hBUkFDVEVSX0VSUiAoNSk6IHRoZSBzdHJpbmcgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzJyxcbiAgbnVsbCxcbiAgJ05PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiAoNyk6IHRoZSBvYmplY3QgY2FuIG5vdCBiZSBtb2RpZmllZCcsXG4gICdOT1RfRk9VTkRfRVJSICg4KTogdGhlIG9iamVjdCBjYW4gbm90IGJlIGZvdW5kIGhlcmUnLFxuICAnTk9UX1NVUFBPUlRFRF9FUlIgKDkpOiB0aGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkJyxcbiAgbnVsbCxcbiAgJ0lOVkFMSURfU1RBVEVfRVJSICgxMSk6IHRoZSBvYmplY3QgaXMgaW4gYW4gaW52YWxpZCBzdGF0ZScsXG4gICdTWU5UQVhfRVJSICgxMik6IHRoZSBzdHJpbmcgZGlkIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgcGF0dGVybicsXG4gICdJTlZBTElEX01PRElGSUNBVElPTl9FUlIgKDEzKTogdGhlIG9iamVjdCBjYW4gbm90IGJlIG1vZGlmaWVkIGluIHRoaXMgd2F5JyxcbiAgJ05BTUVTUEFDRV9FUlIgKDE0KTogdGhlIG9wZXJhdGlvbiBpcyBub3QgYWxsb3dlZCBieSBOYW1lc3BhY2VzIGluIFhNTCcsXG4gICdJTlZBTElEX0FDQ0VTU19FUlIgKDE1KTogdGhlIG9iamVjdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBvcGVyYXRpb24gb3IgYXJndW1lbnQnLFxuICBudWxsLFxuICAnVFlQRV9NSVNNQVRDSF9FUlIgKDE3KTogdGhlIHR5cGUgb2YgdGhlIG9iamVjdCBkb2VzIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgdHlwZScsXG4gICdTRUNVUklUWV9FUlIgKDE4KTogdGhlIG9wZXJhdGlvbiBpcyBpbnNlY3VyZScsXG4gICdORVRXT1JLX0VSUiAoMTkpOiBhIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQnLFxuICAnQUJPUlRfRVJSICgyMCk6IHRoZSB1c2VyIGFib3J0ZWQgYW4gb3BlcmF0aW9uJyxcbiAgJ1VSTF9NSVNNQVRDSF9FUlIgKDIxKTogdGhlIGdpdmVuIFVSTCBkb2VzIG5vdCBtYXRjaCBhbm90aGVyIFVSTCcsXG4gICdRVU9UQV9FWENFRURFRF9FUlIgKDIyKTogdGhlIHF1b3RhIGhhcyBiZWVuIGV4Y2VlZGVkJyxcbiAgJ1RJTUVPVVRfRVJSICgyMyk6IGEgdGltZW91dCBvY2N1cnJlZCcsXG4gICdJTlZBTElEX05PREVfVFlQRV9FUlIgKDI0KTogdGhlIHN1cHBsaWVkIG5vZGUgaXMgaW52YWxpZCBvciBoYXMgYW4gaW52YWxpZCBhbmNlc3RvciBmb3IgdGhpcyBvcGVyYXRpb24nLFxuICAnREFUQV9DTE9ORV9FUlIgKDI1KTogdGhlIG9iamVjdCBjYW4gbm90IGJlIGNsb25lZC4nXG5dO1xuXG4vLyBOYW1lIHRvIGNvZGVcbnZhciBjb25zdGFudHMgPSB7XG4gIElOREVYX1NJWkVfRVJSOiBJTkRFWF9TSVpFX0VSUixcbiAgRE9NU1RSSU5HX1NJWkVfRVJSOiAyLCAvLyBoaXN0b3JpY2FsXG4gIEhJRVJBUkNIWV9SRVFVRVNUX0VSUjogSElFUkFSQ0hZX1JFUVVFU1RfRVJSLFxuICBXUk9OR19ET0NVTUVOVF9FUlI6IFdST05HX0RPQ1VNRU5UX0VSUixcbiAgSU5WQUxJRF9DSEFSQUNURVJfRVJSOiBJTlZBTElEX0NIQVJBQ1RFUl9FUlIsXG4gIE5PX0RBVEFfQUxMT1dFRF9FUlI6IDYsIC8vIGhpc3RvcmljYWxcbiAgTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSOiBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIsXG4gIE5PVF9GT1VORF9FUlI6IE5PVF9GT1VORF9FUlIsXG4gIE5PVF9TVVBQT1JURURfRVJSOiBOT1RfU1VQUE9SVEVEX0VSUixcbiAgSU5VU0VfQVRUUklCVVRFX0VSUjogMTAsIC8vIGhpc3RvcmljYWxcbiAgSU5WQUxJRF9TVEFURV9FUlI6IElOVkFMSURfU1RBVEVfRVJSLFxuICBTWU5UQVhfRVJSOiBTWU5UQVhfRVJSLFxuICBJTlZBTElEX01PRElGSUNBVElPTl9FUlI6IElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUixcbiAgTkFNRVNQQUNFX0VSUjogTkFNRVNQQUNFX0VSUixcbiAgSU5WQUxJRF9BQ0NFU1NfRVJSOiBJTlZBTElEX0FDQ0VTU19FUlIsXG4gIFZBTElEQVRJT05fRVJSOiAxNiwgLy8gaGlzdG9yaWNhbFxuICBUWVBFX01JU01BVENIX0VSUjogVFlQRV9NSVNNQVRDSF9FUlIsXG4gIFNFQ1VSSVRZX0VSUjogU0VDVVJJVFlfRVJSLFxuICBORVRXT1JLX0VSUjogTkVUV09SS19FUlIsXG4gIEFCT1JUX0VSUjogQUJPUlRfRVJSLFxuICBVUkxfTUlTTUFUQ0hfRVJSOiBVUkxfTUlTTUFUQ0hfRVJSLFxuICBRVU9UQV9FWENFRURFRF9FUlI6IFFVT1RBX0VYQ0VFREVEX0VSUixcbiAgVElNRU9VVF9FUlI6IFRJTUVPVVRfRVJSLFxuICBJTlZBTElEX05PREVfVFlQRV9FUlI6IElOVkFMSURfTk9ERV9UWVBFX0VSUixcbiAgREFUQV9DTE9ORV9FUlI6IERBVEFfQ0xPTkVfRVJSXG59O1xuXG5mdW5jdGlvbiBET01FeGNlcHRpb24oY29kZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgdGhpcy5jb2RlID0gY29kZTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZXNbY29kZV07XG4gIHRoaXMubmFtZSA9IG5hbWVzW2NvZGVdO1xufVxuRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5fX3Byb3RvX18gPSBFcnJvci5wcm90b3R5cGU7XG5cbi8vIEluaXRpYWxpemUgdGhlIGNvbnN0YW50cyBvbiBET01FeGNlcHRpb24gYW5kIERPTUV4Y2VwdGlvbi5wcm90b3R5cGVcbmZvcih2YXIgYyBpbiBjb25zdGFudHMpIHtcbiAgdmFyIHYgPSB7IHZhbHVlOiBjb25zdGFudHNbY10gfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUV4Y2VwdGlvbiwgYywgdik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShET01FeGNlcHRpb24ucHJvdG90eXBlLCBjLCB2KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0RPTUV4Y2VwdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBET01Ub2tlbkxpc3QgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1JheW5vcy9ET00tc2hpbVxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdDtcblxuZnVuY3Rpb24gRE9NVG9rZW5MaXN0KGdldHRlciwgc2V0dGVyKSB7XG4gIHRoaXMuX2dldFN0cmluZyA9IGdldHRlcjtcbiAgdGhpcy5fc2V0U3RyaW5nID0gc2V0dGVyO1xuICBmaXhJbmRleCh0aGlzLCBnZXRMaXN0KHRoaXMpKTtcbn1cblxuRE9NVG9rZW5MaXN0LnByb3RvdHlwZSA9IHtcbiAgaXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RyaW5nKCkuc3BsaXQoXCIgXCIpW2luZGV4XTtcbiAgfSxcblxuICBjb250YWluczogZnVuY3Rpb24odG9rZW4pIHtcbiAgICB0b2tlbiA9IFN0cmluZyh0b2tlbik7XG4gICAgaGFuZGxlRXJyb3JzKHRva2VuKTtcbiAgICB2YXIgbGlzdCA9IGdldExpc3QodGhpcyk7XG4gICAgcmV0dXJuIGxpc3QuaW5kZXhPZih0b2tlbikgPiAtMTtcbiAgfSxcblxuICBhZGQ6IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgaGFuZGxlRXJyb3JzKHRva2VuKTtcbiAgICB2YXIgbGlzdCA9IGdldExpc3QodGhpcyk7XG4gICAgaWYgKGxpc3QuaW5kZXhPZih0b2tlbikgPiAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaXN0LnB1c2godG9rZW4pO1xuICAgIHRoaXMuX3NldFN0cmluZyhsaXN0LmpvaW4oXCIgXCIpLnRyaW0oKSk7XG4gICAgZml4SW5kZXgodGhpcywgbGlzdCk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbih0b2tlbikge1xuICAgIGhhbmRsZUVycm9ycyh0b2tlbik7XG4gICAgdmFyIGxpc3QgPSBnZXRMaXN0KHRoaXMpO1xuICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZih0b2tlbik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuX3NldFN0cmluZyhsaXN0LmpvaW4oXCIgXCIpLnRyaW0oKSk7XG4gICAgfVxuICAgIGZpeEluZGV4KHRoaXMsIGxpc3QpO1xuICB9LFxuXG4gIHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKHRva2VuKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbnModG9rZW4pKSB7XG4gICAgICB0aGlzLnJlbW92ZSh0b2tlbik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5hZGQodG9rZW4pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RyaW5nKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZpeEluZGV4KGNsaXN0LCBsaXN0KSB7XG4gIGNsaXN0Lmxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBjbGlzdFtpXSA9IGxpc3RbaV07XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3JzKHRva2VuKSB7XG4gIGlmICh0b2tlbiA9PT0gXCJcIiB8fCB0b2tlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdXRpbHMuU3ludGF4RXJyb3IoKTtcbiAgfVxuICBpZiAodG9rZW4uaW5kZXhPZihcIiBcIikgPiAtMSkge1xuICAgIHV0aWxzLkludmFsaWRDaGFyYWN0ZXJFcnJvcigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldExpc3QoY2xpc3QpIHtcbiAgdmFyIHN0ciA9IGNsaXN0Ll9nZXRTdHJpbmcoKTtcbiAgaWYgKHN0ciA9PT0gXCJcIikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gc3RyLnNwbGl0KFwiIFwiKTtcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvRE9NVG9rZW5MaXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gIERvY3VtZW50RnJhZ21lbnQ7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG52YXIgTm9kZUxpc3QgPSByZXF1aXJlKCcuL05vZGVMaXN0Jyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vRWxlbWVudCcpO1xudmFyIHNlbGVjdCA9IHJlcXVpcmUoJy4vc2VsZWN0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIERvY3VtZW50RnJhZ21lbnQoZG9jKSB7XG4gIHRoaXMubm9kZVR5cGUgPSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGRvYztcbiAgdGhpcy5jaGlsZE5vZGVzID0gW107XG59XG5cbkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSwge1xuICBub2RlTmFtZTogeyB2YWx1ZTogJyNkb2N1bWVudC1mcmFnbWVudCcgfSxcbiAgbm9kZVZhbHVlOiB7IFxuICAgIGdldDogZnVuY3Rpb24oKSB7IFxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKCkge31cbiAgfSxcbiAgLy8gQ29weSB0aGUgdGV4dCBjb250ZW50IGdldHRlci9zZXR0ZXIgZnJvbSBFbGVtZW50XG4gIHRleHRDb250ZW50OiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAndGV4dENvbnRlbnQnKSxcblxuICBxdWVyeVNlbGVjdG9yOiB7IHZhbHVlOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIC8vIGltcGxlbWVudCBpbiB0ZXJtcyBvZiBxdWVyeVNlbGVjdG9yQWxsXG4gICAgdmFyIG5vZGVzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICByZXR1cm4gbm9kZXMubGVuZ3RoID8gbm9kZXNbMF0gOiBudWxsO1xuICB9fSxcbiAgcXVlcnlTZWxlY3RvckFsbDogeyB2YWx1ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAvLyBjcmVhdGUgYSBjb250ZXh0XG4gICAgdmFyIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIC8vIGFkZCBzb21lIG1ldGhvZHMgdG8gdGhlIGNvbnRleHQgZm9yIHplc3QgaW1wbGVtZW50YXRpb24sIHdpdGhvdXRcbiAgICAvLyBhZGRpbmcgdGhlbSB0byB0aGUgcHVibGljIERvY3VtZW50RnJhZ21lbnQgQVBJXG4gICAgY29udGV4dC5pc0hUTUwgPSB0cnVlOyAvLyBpbiBIVE1MIG5hbWVzcGFjZSAoY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaClcbiAgICBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU7XG4gICAgY29udGV4dC5uZXh0RWxlbWVudCA9XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAnZmlyc3RFbGVtZW50Q2hpbGQnKS5cbiAgICAgIGdldDtcbiAgICAvLyBpbnZva2UgemVzdFxuICAgIHZhciBub2RlcyA9IHNlbGVjdChzZWxlY3RvciwgY29udGV4dCk7XG4gICAgcmV0dXJuIG5vZGVzLml0ZW0gPyBub2RlcyA6IG5ldyBOb2RlTGlzdChub2Rlcyk7XG4gIH19LFxuXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xuICBjbG9uZTogeyB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICByZXR1cm4gbmV3IERvY3VtZW50RnJhZ21lbnQodGhpcy5vd25lckRvY3VtZW50KTtcbiAgfX0sXG4gIGlzRXF1YWw6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwobikge1xuICAgICAgLy8gQW55IHR3byBkb2N1bWVudCBmcmFnbWVudHMgYXJlIHNoYWxsb3dseSBlcXVhbC5cbiAgICAgIC8vIE5vZGUuaXNFcXVhbE5vZGUoKSB3aWxsIHRlc3QgdGhlaXIgY2hpbGRyZW4gZm9yIGVxdWFsaXR5XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfX0sXG5cbiAgLy8gTm9uLXN0YW5kYXJkLCBidXQgdXNlZnVsIChnaXRodWIgaXNzdWUgIzczKVxuICBpbm5lckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuICBvdXRlckhUTUw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsgfSxcbiAgICBzZXQ6IHV0aWxzLm55aVxuICB9LFxuXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0RvY3VtZW50RnJhZ21lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xudmFyIE1vdXNlRXZlbnQgPSByZXF1aXJlKCcuL01vdXNlRXZlbnQnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFRhcmdldDtcblxuZnVuY3Rpb24gRXZlbnRUYXJnZXQoKSB7fVxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUgPSB7XG4gIC8vIFhYWFxuICAvLyBTZWUgV2ViSURMIMKnNC44IGZvciBkZXRhaWxzIG9uIG9iamVjdCBldmVudCBoYW5kbGVyc1xuICAvLyBhbmQgaG93IHRoZXkgc2hvdWxkIGJlaGF2ZS4gIFdlIGFjdHVhbGx5IGhhdmUgdG8gYWNjZXB0XG4gIC8vIGFueSBvYmplY3QgdG8gYWRkRXZlbnRMaXN0ZW5lci4uLiBDYW4ndCB0eXBlIGNoZWNrIGl0LlxuICAvLyBvbiByZWdpc3RyYXRpb24uXG5cbiAgLy8gWFhYOlxuICAvLyBDYXB0dXJpbmcgZXZlbnQgbGlzdGVuZXJzIGFyZSBzb3J0IG9mIHJhcmUuICBJIHRoaW5rIEkgY2FuIG9wdGltaXplXG4gIC8vIHRoZW0gc28gdGhhdCBkaXNwYXRjaEV2ZW50IGNhbiBza2lwIHRoZSBjYXB0dXJpbmcgcGhhc2UgKG9yIG11Y2ggb2ZcbiAgLy8gaXQpLiAgRWFjaCB0aW1lIGEgY2FwdHVyaW5nIGxpc3RlbmVyIGlzIGFkZGVkLCBpbmNyZW1lbnQgYSBmbGFnIG9uXG4gIC8vIHRoZSB0YXJnZXQgbm9kZSBhbmQgZWFjaCBvZiBpdHMgYW5jZXN0b3JzLiAgRGVjcmVtZW50IHdoZW4gcmVtb3ZlZC5cbiAgLy8gQW5kIHVwZGF0ZSB0aGUgY291bnRlciB3aGVuIG5vZGVzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZCBmcm9tIHRoZVxuICAvLyB0cmVlIGFzIHdlbGwuICBUaGVuLCBpbiBkaXNwYXRjaCBldmVudCwgdGhlIGNhcHR1cmluZyBwaGFzZSBjYW5cbiAgLy8gYWJvcnQgaWYgaXQgc2VlcyBhbnkgbm9kZSB3aXRoIGEgemVybyBjb3VudC5cbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuICAgIGlmICghbGlzdGVuZXIpIHJldHVybjtcbiAgICBpZiAoY2FwdHVyZSA9PT0gdW5kZWZpbmVkKSBjYXB0dXJlID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHRoaXMuX2xpc3RlbmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbdHlwZV0pIHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgIHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdO1xuXG4gICAgLy8gSWYgdGhpcyBsaXN0ZW5lciBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsIGp1c3QgcmV0dXJuXG4gICAgZm9yKHZhciBpID0gMCwgbiA9IGxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICB2YXIgbCA9IGxpc3RbaV07XG4gICAgICBpZiAobC5saXN0ZW5lciA9PT0gbGlzdGVuZXIgJiYgbC5jYXB0dXJlID09PSBjYXB0dXJlKVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWRkIGFuIG9iamVjdCB0byB0aGUgbGlzdCBvZiBsaXN0ZW5lcnNcbiAgICB2YXIgb2JqID0geyBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmUgfTtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSBvYmouZiA9IGxpc3RlbmVyO1xuICAgIGxpc3QucHVzaChvYmopO1xuICB9LFxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlKSB7XG4gICAgaWYgKGNhcHR1cmUgPT09IHVuZGVmaW5lZCkgY2FwdHVyZSA9IGZhbHNlO1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgLy8gRmluZCB0aGUgbGlzdGVuZXIgaW4gdGhlIGxpc3QgYW5kIHJlbW92ZSBpdFxuICAgICAgICBmb3IodmFyIGkgPSAwLCBuID0gbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICB2YXIgbCA9IGxpc3RbaV07XG4gICAgICAgICAgaWYgKGwubGlzdGVuZXIgPT09IGxpc3RlbmVyICYmIGwuY2FwdHVyZSA9PT0gY2FwdHVyZSkge1xuICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gVGhpcyBpcyB0aGUgcHVibGljIEFQSSBmb3IgZGlzcGF0Y2hpbmcgdW50cnVzdGVkIHB1YmxpYyBldmVudHMuXG4gIC8vIFNlZSBfZGlzcGF0Y2hFdmVudCBmb3IgdGhlIGltcGxlbWVudGF0aW9uXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICAvLyBEaXNwYXRjaCBhbiB1bnRydXN0ZWQgZXZlbnRcbiAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudChldmVudCwgZmFsc2UpO1xuICB9LFxuXG4gIC8vXG4gIC8vIFNlZSBET01Db3JlIMKnNC40XG4gIC8vIFhYWDogSSdsbCBwcm9iYWJseSBuZWVkIGFub3RoZXIgdmVyc2lvbiBvZiB0aGlzIG1ldGhvZCBmb3JcbiAgLy8gaW50ZXJuYWwgdXNlLCBvbmUgdGhhdCBkb2VzIG5vdCBzZXQgaXNUcnVzdGVkIHRvIGZhbHNlLlxuICAvLyBYWFg6IHNlZSBEb2N1bWVudC5fZGlzcGF0Y2hFdmVudDogcGVyaGFwcyB0aGF0IGFuZCB0aGlzIGNvdWxkXG4gIC8vIGNhbGwgYSBjb21tb24gaW50ZXJuYWwgZnVuY3Rpb24gd2l0aCBkaWZmZXJlbnQgc2V0dGluZ3Mgb2ZcbiAgLy8gYSB0cnVzdGVkIGJvb2xlYW4gYXJndW1lbnRcbiAgLy9cbiAgLy8gWFhYOlxuICAvLyBUaGUgc3BlYyBoYXMgY2hhbmdlZCBpbiBob3cgdG8gZGVhbCB3aXRoIGhhbmRsZXJzIHJlZ2lzdGVyZWRcbiAgLy8gb24gaWRsIG9yIGNvbnRlbnQgYXR0cmlidXRlcyByYXRoZXIgdGhhbiB3aXRoIGFkZEV2ZW50TGlzdGVuZXIuXG4gIC8vIFVzZWQgdG8gc2F5IHRoYXQgdGhleSBhbHdheXMgcmFuIGZpcnN0LiAgVGhhdCdzIGhvdyB3ZWJraXQgZG9lcyBpdFxuICAvLyBTcGVjIG5vdyBzYXlzIHRoYXQgdGhleSBydW4gaW4gYSBwb3NpdGlvbiBkZXRlcm1pbmVkIGJ5XG4gIC8vIHdoZW4gdGhleSB3ZXJlIGZpcnN0IHNldC4gIEZGIGRvZXMgaXQgdGhhdCB3YXkuICBTZWU6XG4gIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyc1xuICAvL1xuICBfZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gX2Rpc3BhdGNoRXZlbnQoZXZlbnQsIHRydXN0ZWQpIHtcbiAgICBpZiAodHlwZW9mIHRydXN0ZWQgIT09ICdib29sZWFuJykgdHJ1c3RlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGludm9rZSh0YXJnZXQsIGV2ZW50KSB7XG4gICAgICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUsIHBoYXNlID0gZXZlbnQuZXZlbnRQaGFzZTtcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBpbmRpdmlkdWFsIGhhbmRsZXIgZGVmaW5lZCwgaW52b2tlIGl0IGZpcnN0XG4gICAgICAvLyBYWFg6IHNlZSBjb21tZW50IGFib3ZlOiB0aGlzIHNob3VsZG4ndCBhbHdheXMgYmUgZmlyc3QuXG4gICAgICBpZiAocGhhc2UgIT09IEV2ZW50LkNBUFRVUklOR19QSEFTRSAmJlxuICAgICAgICB0YXJnZXQuX2hhbmRsZXJzICYmIHRhcmdldC5faGFuZGxlcnNbdHlwZV0pXG4gICAgICB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gdGFyZ2V0Ll9oYW5kbGVyc1t0eXBlXTtcbiAgICAgICAgdmFyIHJ2O1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBydj1oYW5kbGVyLmNhbGwoZXZlbnQuY3VycmVudFRhcmdldCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBmID0gaGFuZGxlci5oYW5kbGVFdmVudDtcbiAgICAgICAgICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoYW5kbGVFdmVudCBwcm9wZXJ0eSBvZiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50IGhhbmRsZXIgb2JqZWN0IGlzJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdub3QgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgICBydj1mLmNhbGwoaGFuZGxlciwgZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgICAgICBpZiAocnYgPT09IHRydWUpICAvLyBIaXN0b3JpY2FsIGJhZ2dhZ2VcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JlZm9yZXVubG9hZCc6XG4gICAgICAgICAgLy8gWFhYOiBldmVudHVhbGx5IHdlIG5lZWQgYSBzcGVjaWFsIGNhc2UgaGVyZVxuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAocnYgPT09IGZhbHNlKVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOb3cgaW52b2tlIGxpc3QgbGlzdCBvZiBsaXN0ZW5lcnMgZm9yIHRoaXMgdGFyZ2V0IGFuZCB0eXBlXG4gICAgICB2YXIgbGlzdCA9IHRhcmdldC5fbGlzdGVuZXJzICYmIHRhcmdldC5fbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgaWYgKCFsaXN0KSByZXR1cm47XG4gICAgICBsaXN0ID0gbGlzdC5zbGljZSgpO1xuICAgICAgZm9yKHZhciBpID0gMCwgbiA9IGxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChldmVudC5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKSByZXR1cm47XG4gICAgICAgIHZhciBsID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKChwaGFzZSA9PT0gRXZlbnQuQ0FQVFVSSU5HX1BIQVNFICYmICFsLmNhcHR1cmUpIHx8XG4gICAgICAgICAgKHBoYXNlID09PSBFdmVudC5CVUJCTElOR19QSEFTRSAmJiBsLmNhcHR1cmUpKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAobC5mKSB7XG4gICAgICAgICAgbC5mLmNhbGwoZXZlbnQuY3VycmVudFRhcmdldCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBmbiA9IGwubGlzdGVuZXIuaGFuZGxlRXZlbnQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hhbmRsZUV2ZW50IHByb3BlcnR5IG9mIGV2ZW50IGxpc3RlbmVyIG9iamVjdCBpcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgICBmbi5jYWxsKGwubGlzdGVuZXIsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZXZlbnQuX2luaXRpYWxpemVkIHx8IGV2ZW50Ll9kaXNwYXRjaGluZykgdXRpbHMuSW52YWxpZFN0YXRlRXJyb3IoKTtcbiAgICBldmVudC5pc1RydXN0ZWQgPSB0cnVzdGVkO1xuXG4gICAgLy8gQmVnaW4gZGlzcGF0Y2hpbmcgdGhlIGV2ZW50IG5vd1xuICAgIGV2ZW50Ll9kaXNwYXRjaGluZyA9IHRydWU7XG4gICAgZXZlbnQudGFyZ2V0ID0gdGhpcztcblxuICAgIC8vIEJ1aWxkIHRoZSBsaXN0IG9mIHRhcmdldHMgZm9yIHRoZSBjYXB0dXJpbmcgYW5kIGJ1YmJsaW5nIHBoYXNlc1xuICAgIC8vIFhYWDogd2UnbGwgZXZlbnR1YWxseSBoYXZlIHRvIGFkZCBXaW5kb3cgdG8gdGhpcyBsaXN0LlxuICAgIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgICBmb3IodmFyIG4gPSB0aGlzLnBhcmVudE5vZGU7IG47IG4gPSBuLnBhcmVudE5vZGUpXG4gICAgICBhbmNlc3RvcnMucHVzaChuKTtcblxuICAgIC8vIENhcHR1cmluZyBwaGFzZVxuICAgIGV2ZW50LmV2ZW50UGhhc2UgPSBFdmVudC5DQVBUVVJJTkdfUEhBU0U7XG4gICAgZm9yKHZhciBpID0gYW5jZXN0b3JzLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgaW52b2tlKGFuY2VzdG9yc1tpXSwgZXZlbnQpO1xuICAgICAgaWYgKGV2ZW50Ll9wcm9wYWdhdGlvblN0b3BwZWQpIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIEF0IHRhcmdldCBwaGFzZVxuICAgIGlmICghZXZlbnQuX3Byb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgZXZlbnQuZXZlbnRQaGFzZSA9IEV2ZW50LkFUX1RBUkdFVDtcbiAgICAgIGludm9rZSh0aGlzLCBldmVudCk7XG4gICAgfVxuXG4gICAgLy8gQnViYmxpbmcgcGhhc2VcbiAgICBpZiAoZXZlbnQuYnViYmxlcyAmJiAhZXZlbnQuX3Byb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgZXZlbnQuZXZlbnRQaGFzZSA9IEV2ZW50LkJVQkJMSU5HX1BIQVNFO1xuICAgICAgZm9yKHZhciBpaSA9IDAsIG5uID0gYW5jZXN0b3JzLmxlbmd0aDsgaWkgPCBubjsgaWkrKykge1xuICAgICAgICBpbnZva2UoYW5jZXN0b3JzW2lpXSwgZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQuX3Byb3BhZ2F0aW9uU3RvcHBlZCkgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQuX2Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgZXZlbnQuZXZlbnRQaGFzZSA9IEV2ZW50LkFUX1RBUkdFVDtcbiAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcblxuICAgIC8vIERlYWwgd2l0aCBtb3VzZSBldmVudHMgYW5kIGZpZ3VyZSBvdXQgd2hlblxuICAgIC8vIGEgY2xpY2sgaGFzIGhhcHBlbmVkXG4gICAgaWYgKHRydXN0ZWQgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICBzd2l0Y2goZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgICAgdGhpcy5fYXJtZWQgPSB7XG4gICAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICB5OiBldmVudC5jbGllbnRZLFxuICAgICAgICAgIHQ6IGV2ZW50LnRpbWVTdGFtcFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XG4gICAgICAgIHRoaXMuX2FybWVkID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb3VzZXVwJzpcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2xpY2soZXZlbnQpKSB0aGlzLl9kb0NsaWNrKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fYXJtZWQgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICB9LFxuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGEgY2xpY2sgb2NjdXJyZWRcbiAgLy8gWFhYIFdlIGRvbid0IHN1cHBvcnQgZG91YmxlIGNsaWNrcyBmb3Igbm93XG4gIF9pc0NsaWNrOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAodGhpcy5fYXJtZWQgIT09IG51bGwgJiZcbiAgICAgICAgZXZlbnQudHlwZSA9PT0gJ21vdXNldXAnICYmXG4gICAgICAgIGV2ZW50LmlzVHJ1c3RlZCAmJlxuICAgICAgICBldmVudC5idXR0b24gPT09IDAgJiZcbiAgICAgICAgZXZlbnQudGltZVN0YW1wIC0gdGhpcy5fYXJtZWQudCA8IDEwMDAgJiZcbiAgICAgICAgTWF0aC5hYnMoZXZlbnQuY2xpZW50WCAtIHRoaXMuX2FybWVkLngpIDwgMTAgJiZcbiAgICAgICAgTWF0aC5hYnMoZXZlbnQuY2xpZW50WSAtIHRoaXMuX2FybWVkLlkpIDwgMTApO1xuICB9LFxuXG4gIC8vIENsaWNrcyBhcmUgaGFuZGxlZCBsaWtlIHRoaXM6XG4gIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2VsZW1lbnRzLmh0bWwjaW50ZXJhY3RpdmUtY29udGVudC0wXG4gIC8vXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBpcyBzaW1pbGFyIHRvIHRoZSBIVE1MRWxlbWVudC5jbGljaygpIG1ldGhvZFxuICAvLyBUaGUgZXZlbnQgYXJndW1lbnQgbXVzdCBiZSB0aGUgdHJ1c3RlZCBtb3VzZXVwIGV2ZW50XG4gIF9kb0NsaWNrOiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICh0aGlzLl9jbGlja19pbl9wcm9ncmVzcykgcmV0dXJuO1xuICAgIHRoaXMuX2NsaWNrX2luX3Byb2dyZXNzID0gdHJ1ZTtcblxuICAgIC8vIEZpbmQgdGhlIG5lYXJlc3QgZW5jbG9zaW5nIGVsZW1lbnQgdGhhdCBpcyBhY3RpdmF0YWJsZVxuICAgIC8vIEFuIGVsZW1lbnQgaXMgYWN0aXZhdGFibGUgaWYgaXQgaGFzIGFcbiAgICAvLyBfcG9zdF9jbGlja19hY3RpdmF0aW9uX3N0ZXBzIGhvb2tcbiAgICB2YXIgYWN0aXZhdGVkID0gdGhpcztcbiAgICB3aGlsZShhY3RpdmF0ZWQgJiYgIWFjdGl2YXRlZC5fcG9zdF9jbGlja19hY3RpdmF0aW9uX3N0ZXBzKVxuICAgICAgYWN0aXZhdGVkID0gYWN0aXZhdGVkLnBhcmVudE5vZGU7XG5cbiAgICBpZiAoYWN0aXZhdGVkICYmIGFjdGl2YXRlZC5fcHJlX2NsaWNrX2FjdGl2YXRpb25fc3RlcHMpIHtcbiAgICAgIGFjdGl2YXRlZC5fcHJlX2NsaWNrX2FjdGl2YXRpb25fc3RlcHMoKTtcbiAgICB9XG5cbiAgICB2YXIgY2xpY2sgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcbiAgICBjbGljay5pbml0TW91c2VFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlLFxuICAgICAgdGhpcy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LCAxLFxuICAgICAgZXZlbnQuc2NyZWVuWCwgZXZlbnQuc2NyZWVuWSxcbiAgICAgIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksXG4gICAgICBldmVudC5jdHJsS2V5LCBldmVudC5hbHRLZXksXG4gICAgICBldmVudC5zaGlmdEtleSwgZXZlbnQubWV0YUtleSxcbiAgICAgIGV2ZW50LmJ1dHRvbiwgbnVsbCk7XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZGlzcGF0Y2hFdmVudChjbGljaywgdHJ1ZSk7XG5cbiAgICBpZiAoYWN0aXZhdGVkKSB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgd2hlcmUgaHlwZXJsaW5rcyBnZXQgZm9sbG93ZWQsIGZvciBleGFtcGxlLlxuICAgICAgICBpZiAoYWN0aXZhdGVkLl9wb3N0X2NsaWNrX2FjdGl2YXRpb25fc3RlcHMpXG4gICAgICAgICAgYWN0aXZhdGVkLl9wb3N0X2NsaWNrX2FjdGl2YXRpb25fc3RlcHMoY2xpY2spO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChhY3RpdmF0ZWQuX2NhbmNlbGxlZF9hY3RpdmF0aW9uX3N0ZXBzKVxuICAgICAgICAgIGFjdGl2YXRlZC5fY2FuY2VsbGVkX2FjdGl2YXRpb25fc3RlcHMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy9cbiAgLy8gQW4gZXZlbnQgaGFuZGxlciBpcyBsaWtlIGFuIGV2ZW50IGxpc3RlbmVyLCBidXQgaXQgcmVnaXN0ZXJlZFxuICAvLyBieSBzZXR0aW5nIGFuIElETCBvciBjb250ZW50IGF0dHJpYnV0ZSBsaWtlIG9ubG9hZCBvciBvbmNsaWNrLlxuICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgb2YgdGhlc2UgYXQgYSB0aW1lIGZvciBhbnkgZXZlbnQgdHlwZS5cbiAgLy8gVGhpcyBpcyBhbiBpbnRlcm5hbCBtZXRob2QgZm9yIHRoZSBhdHRyaWJ1dGUgYWNjZXNzb3JzIGFuZFxuICAvLyBjb250ZW50IGF0dHJpYnV0ZSBoYW5kbGVycyB0aGF0IG5lZWQgdG8gcmVnaXN0ZXIgZXZlbnRzIGhhbmRsZXJzLlxuICAvLyBUaGUgdHlwZSBhcmd1bWVudCBpcyB0aGUgc2FtZSBhcyBpbiBhZGRFdmVudExpc3RlbmVyKCkuXG4gIC8vIFRoZSBoYW5kbGVyIGFyZ3VtZW50IGlzIHRoZSBzYW1lIGFzIGxpc3RlbmVycyBpbiBhZGRFdmVudExpc3RlbmVyOlxuICAvLyBpdCBjYW4gYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QuIFBhc3MgbnVsbCB0byByZW1vdmUgYW55IGV4aXN0aW5nXG4gIC8vIGhhbmRsZXIuICBIYW5kbGVycyBhcmUgYWx3YXlzIGludm9rZWQgYmVmb3JlIGFueSBsaXN0ZW5lcnMgb2ZcbiAgLy8gdGhlIHNhbWUgdHlwZS4gIFRoZXkgYXJlIG5vdCBpbnZva2VkIGR1cmluZyB0aGUgY2FwdHVyaW5nIHBoYXNlXG4gIC8vIG9mIGV2ZW50IGRpc3BhdGNoLlxuICAvL1xuICBfc2V0RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiBfc2V0RXZlbnRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMuX2hhbmRsZXJzKSB0aGlzLl9oYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5faGFuZGxlcnNbdHlwZV0gPSBoYW5kbGVyO1xuICB9LFxuXG4gIF9nZXRFdmVudEhhbmRsZXI6IGZ1bmN0aW9uIF9nZXRFdmVudEhhbmRsZXIodHlwZSkge1xuICAgIHJldHVybiAodGhpcy5faGFuZGxlcnMgJiYgdGhpcy5faGFuZGxlcnNbdHlwZV0pIHx8IG51bGw7XG4gIH1cblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0V2ZW50VGFyZ2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTGVhZjtcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IgPSB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3I7XG52YXIgTm90Rm91bmRFcnJvciA9IHV0aWxzLk5vdEZvdW5kRXJyb3I7XG5cbi8vIFRoaXMgY2xhc3MgZGVmaW5lcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3Igbm9kZSBzdWJ0eXBlcyB0aGF0XG4vLyBjYW4gbmV2ZXIgaGF2ZSBjaGlsZHJlblxuZnVuY3Rpb24gTGVhZigpIHtcbn1cblxuTGVhZi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlLCB7XG4gIGhhc0NoaWxkTm9kZXM6IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH19LFxuICBmaXJzdENoaWxkOiB7IHZhbHVlOiBudWxsIH0sXG4gIGxhc3RDaGlsZDogeyB2YWx1ZTogbnVsbCB9LFxuICBpbnNlcnRCZWZvcmU6IHsgdmFsdWU6IGZ1bmN0aW9uKG5vZGUsIGNoaWxkKSB7XG4gICAgaWYgKCFub2RlLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XG4gICAgSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gIH19LFxuICByZXBsYWNlQ2hpbGQ6IHsgdmFsdWU6IGZ1bmN0aW9uKG5vZGUsIGNoaWxkKSB7XG4gICAgaWYgKCFub2RlLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XG4gICAgSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XG4gIH19LFxuICByZW1vdmVDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5ub2RlVHlwZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgbm9kZScpO1xuICAgIE5vdEZvdW5kRXJyb3IoKTtcbiAgfX0sXG4gIGNoaWxkTm9kZXM6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX2NoaWxkTm9kZXMpIHRoaXMuX2NoaWxkTm9kZXMgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGROb2RlcztcbiAgfX1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTGVhZi5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgVUlFdmVudCA9IHJlcXVpcmUoJy4vVUlFdmVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlRXZlbnQ7XG5cbmZ1bmN0aW9uIE1vdXNlRXZlbnQoKSB7XG4gIC8vIEp1c3QgdXNlIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpemVcbiAgVUlFdmVudC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuc2NyZWVuWCA9IHRoaXMuc2NyZWVuWSA9IHRoaXMuY2xpZW50WCA9IHRoaXMuY2xpZW50WSA9IDA7XG4gIHRoaXMuY3RybEtleSA9IHRoaXMuYWx0S2V5ID0gdGhpcy5zaGlmdEtleSA9IHRoaXMubWV0YUtleSA9IGZhbHNlO1xuICB0aGlzLmJ1dHRvbiA9IDA7XG4gIHRoaXMuYnV0dG9ucyA9IDE7XG4gIHRoaXMucmVsYXRlZFRhcmdldCA9IG51bGw7XG59XG5Nb3VzZUV2ZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVUlFdmVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHsgdmFsdWU6IE1vdXNlRXZlbnQgfSxcbiAgaW5pdE1vdXNlRXZlbnQ6IHsgdmFsdWU6IGZ1bmN0aW9uKHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsXG4gICAgdmlldywgZGV0YWlsLFxuICAgIHNjcmVlblgsIHNjcmVlblksIGNsaWVudFgsIGNsaWVudFksXG4gICAgY3RybEtleSwgYWx0S2V5LCBzaGlmdEtleSwgbWV0YUtleSxcbiAgICBidXR0b24sIHJlbGF0ZWRUYXJnZXQpIHtcblxuICAgIHRoaXMuaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIHZpZXcsIGRldGFpbCk7XG4gICAgdGhpcy5zY3JlZW5YID0gc2NyZWVuWDtcbiAgICB0aGlzLnNjcmVlblkgPSBzY3JlZW5ZO1xuICAgIHRoaXMuY2xpZW50WCA9IGNsaWVudFg7XG4gICAgdGhpcy5jbGllbnRZID0gY2xpZW50WTtcbiAgICB0aGlzLmN0cmxLZXkgPSBjdHJsS2V5O1xuICAgIHRoaXMuYWx0S2V5ID0gYWx0S2V5O1xuICAgIHRoaXMuc2hpZnRLZXkgPSBzaGlmdEtleTtcbiAgICB0aGlzLm1ldGFLZXkgPSBtZXRhS2V5O1xuICAgIHRoaXMuYnV0dG9uID0gYnV0dG9uO1xuICAgIHN3aXRjaChidXR0b24pIHtcbiAgICBjYXNlIDA6IHRoaXMuYnV0dG9ucyA9IDE7IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5idXR0b25zID0gNDsgYnJlYWs7XG4gICAgY2FzZSAyOiB0aGlzLmJ1dHRvbnMgPSAyOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmJ1dHRvbnMgPSAwOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZFRhcmdldDtcbiAgfX0sXG5cbiAgZ2V0TW9kaWZpZXJTdGF0ZTogeyB2YWx1ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgc3dpdGNoKGtleSkge1xuICAgIGNhc2UgXCJBbHRcIjogcmV0dXJuIHRoaXMuYWx0S2V5O1xuICAgIGNhc2UgXCJDb250cm9sXCI6IHJldHVybiB0aGlzLmN0cmxLZXk7XG4gICAgY2FzZSBcIlNoaWZ0XCI6IHJldHVybiB0aGlzLnNoaWZ0S2V5O1xuICAgIGNhc2UgXCJNZXRhXCI6IHJldHVybiB0aGlzLm1ldGFLZXk7XG4gICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfX1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTW91c2VFdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBleHBvcnRlZCBOb2RlVHJhdmVyc2FsICovXG52YXIgTm9kZVRyYXZlcnNhbCA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBuZXh0U2tpcHBpbmdDaGlsZHJlbjogbmV4dFNraXBwaW5nQ2hpbGRyZW4sXG4gIG5leHRBbmNlc3RvclNpYmxpbmc6IG5leHRBbmNlc3RvclNpYmxpbmcsXG4gIG5leHQ6IG5leHQsXG4gIHByZXZpb3VzOiBwcmV2aW91cyxcbiAgZGVlcExhc3RDaGlsZDogZGVlcExhc3RDaGlsZFxufTtcblxuLyoqXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6bmV4dFNraXBwaW5nQ2hpbGRyZW5cbiAqIGh0dHBzOi8vdHJhYy53ZWJraXQub3JnL2Jyb3dzZXIvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL05vZGVUcmF2ZXJzYWwuaD9yZXY9MTc5MTQzI0wxMDlcbiAqL1xuZnVuY3Rpb24gbmV4dFNraXBwaW5nQ2hpbGRyZW4obm9kZSwgc3RheVdpdGhpbikge1xuICBpZiAobm9kZSA9PT0gc3RheVdpdGhpbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG5leHRBbmNlc3RvclNpYmxpbmcobm9kZSwgc3RheVdpdGhpbik7XG59XG5cbi8qKlxuICogQGJhc2VkIG9uIFdlYktpdCdzIE5vZGVUcmF2ZXJzYWw6Om5leHRBbmNlc3RvclNpYmxpbmdcbiAqIGh0dHBzOi8vdHJhYy53ZWJraXQub3JnL2Jyb3dzZXIvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL05vZGVUcmF2ZXJzYWwuY3BwP3Jldj0xNzkxNDMjTDkzXG4gKi9cbmZ1bmN0aW9uIG5leHRBbmNlc3RvclNpYmxpbmcobm9kZSwgc3RheVdpdGhpbikge1xuICBmb3IgKG5vZGUgPSBub2RlLnBhcmVudE5vZGU7IG5vZGUgIT09IG51bGw7IG5vZGUgPSBub2RlLnBhcmVudE5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gc3RheVdpdGhpbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQGJhc2VkIG9uIFdlYktpdCdzIE5vZGVUcmF2ZXJzYWw6Om5leHRcbiAqIGh0dHBzOi8vdHJhYy53ZWJraXQub3JnL2Jyb3dzZXIvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL05vZGVUcmF2ZXJzYWwuaD9yZXY9MTc5MTQzI0w5OVxuICovXG5mdW5jdGlvbiBuZXh0KG5vZGUsIHN0YXlXaXRoaW4pIHtcbiAgdmFyIG47XG4gIG4gPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIGlmIChuICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgaWYgKG5vZGUgPT09IHN0YXlXaXRoaW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBuID0gbm9kZS5uZXh0U2libGluZztcbiAgaWYgKG4gIT09IG51bGwpIHtcbiAgICByZXR1cm4gbjtcbiAgfVxuICByZXR1cm4gbmV4dEFuY2VzdG9yU2libGluZyhub2RlLCBzdGF5V2l0aGluKTtcbn1cblxuLyoqXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6ZGVlcExhc3RDaGlsZFxuICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vTm9kZVRyYXZlcnNhbC5jcHA/cmV2PTE3OTE0MyNMMTE2XG4gKi9cbmZ1bmN0aW9uIGRlZXBMYXN0Q2hpbGQobm9kZSkge1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogQGJhc2VkIG9uIFdlYktpdCdzIE5vZGVUcmF2ZXJzYWw6OnByZXZpb3VzXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmg/cmV2PTE3OTE0MyNMMTIxXG4gKi9cbmZ1bmN0aW9uIHByZXZpb3VzKG5vZGUsIHN0YXlXaXRoaW4pIHtcbiAgdmFyIHA7XG4gIHAgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgaWYgKHAgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVlcExhc3RDaGlsZChwKTtcbiAgfVxuICBwID0gbm9kZS5wYXJlbnROb2RlO1xuICBpZiAocCA9PT0gc3RheVdpdGhpbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTm9kZVRyYXZlcnNhbC5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xuXG52YXIgTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlID0ge1xuXG4gIG5leHRFbGVtZW50U2libGluZzogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcbiAgICAgIHZhciBzaWJzID0gdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XG4gICAgICBmb3IodmFyIGkgPSB0aGlzLmluZGV4KzEsIG4gPSBzaWJzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoc2lic1tpXS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVybiBzaWJzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfX0sXG5cbiAgcHJldmlvdXNFbGVtZW50U2libGluZzogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcbiAgICAgIHZhciBzaWJzID0gdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XG4gICAgICBmb3IodmFyIGkgPSB0aGlzLmluZGV4LTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChzaWJzW2ldLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIHNpYnNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9fVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL05vbkRvY3VtZW50VHlwZUNoaWxkTm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciBDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJEYXRhJyk7XG5cbmZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihkb2MsIHRhcmdldCwgZGF0YSkge1xuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGRvYztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuX2RhdGEgPSBkYXRhO1xufVxuXG52YXIgbm9kZVZhbHVlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fZGF0YTsgfSxcbiAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgdGhpcy5fZGF0YSA9IHY7XG4gICAgaWYgKHRoaXMucm9vdGVkKSB0aGlzLm93bmVyRG9jdW1lbnQubXV0YXRlVmFsdWUodGhpcyk7XG4gIH1cbn07XG5cblByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCB7XG4gIG5vZGVOYW1lOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRhcmdldDsgfX0sXG4gIG5vZGVWYWx1ZTogbm9kZVZhbHVlLFxuICB0ZXh0Q29udGVudDogbm9kZVZhbHVlLFxuICBkYXRhOiBub2RlVmFsdWUsXG5cbiAgLy8gVXRpbGl0eSBtZXRob2RzXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvY2Vzc2luZ0luc3RydWN0aW9uKHRoaXMub3duZXJEb2N1bWVudCwgdGhpcy50YXJnZXQsIHRoaXMuX2RhdGEpO1xuICB9fSxcbiAgaXNFcXVhbDogeyB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbChuKSB7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXQgPT09IG4udGFyZ2V0ICYmIHRoaXMuX2RhdGEgPT09IG4uX2RhdGE7XG4gIH19XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvUHJvY2Vzc2luZ0luc3RydWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gVGV4dDtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciBDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJEYXRhJyk7XG5cbmZ1bmN0aW9uIFRleHQoZG9jLCBkYXRhKSB7XG4gIHRoaXMubm9kZVR5cGUgPSBOb2RlLlRFWFRfTk9ERTtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gZG9jO1xuICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgdGhpcy5faW5kZXggPSB1bmRlZmluZWQ7XG59XG5cbnZhciBub2RlVmFsdWUgPSB7XG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9kYXRhOyB9LFxuICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAodiA9PT0gdGhpcy5fZGF0YSkgcmV0dXJuO1xuICAgIHRoaXMuX2RhdGEgPSB2O1xuICAgIGlmICh0aGlzLnJvb3RlZClcbiAgICAgIHRoaXMub3duZXJEb2N1bWVudC5tdXRhdGVWYWx1ZSh0aGlzKTtcbiAgICBpZiAodGhpcy5wYXJlbnROb2RlICYmXG4gICAgICB0aGlzLnBhcmVudE5vZGUuX3RleHRjaGFuZ2Vob29rKVxuICAgICAgdGhpcy5wYXJlbnROb2RlLl90ZXh0Y2hhbmdlaG9vayh0aGlzKTtcbiAgfVxufTtcblxuVGV4dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCB7XG4gIG5vZGVOYW1lOiB7IHZhbHVlOiBcIiN0ZXh0XCIgfSxcbiAgLy8gVGhlc2UgdGhyZWUgYXR0cmlidXRlcyBhcmUgYWxsIHRoZSBzYW1lLlxuICAvLyBUaGUgZGF0YSBhdHRyaWJ1dGUgaGFzIGEgW1RyZWF0TnVsbEFzPUVtcHR5U3RyaW5nXSBidXQgd2UnbGxcbiAgLy8gaW1wbGVtZW50IHRoYXQgYXQgdGhlIGludGVyZmFjZSBsZXZlbFxuICBub2RlVmFsdWU6IG5vZGVWYWx1ZSxcbiAgdGV4dENvbnRlbnQ6IG5vZGVWYWx1ZSxcbiAgZGF0YTogbm9kZVZhbHVlLFxuXG4gIHNwbGl0VGV4dDogeyB2YWx1ZTogZnVuY3Rpb24gc3BsaXRUZXh0KG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPiB0aGlzLl9kYXRhLmxlbmd0aCB8fCBvZmZzZXQgPCAwKSB1dGlscy5JbmRleFNpemVFcnJvcigpO1xuXG4gICAgdmFyIG5ld2RhdGEgPSB0aGlzLl9kYXRhLnN1YnN0cmluZyhvZmZzZXQpLFxuICAgICAgbmV3bm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdkYXRhKTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKDAsIG9mZnNldCk7XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQgIT09IG51bGwpXG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld25vZGUsIHRoaXMubmV4dFNpYmxpbmcpO1xuXG4gICAgcmV0dXJuIG5ld25vZGU7XG4gIH19LFxuXG4gIC8vIFhYWFxuICAvLyB3aG9sZVRleHQgYW5kIHJlcGxhY2VXaG9sZVRleHQoKSBhcmUgbm90IGltcGxlbWVudGVkIHlldCBiZWNhdXNlXG4gIC8vIHRoZSBET01Db3JlIHNwZWNpZmljYXRpb24gaXMgY29uc2lkZXJpbmcgcmVtb3Zpbmcgb3IgYWx0ZXJpbmcgdGhlbS5cbiAgd2hvbGVUZXh0OiB7Z2V0OiB1dGlscy5ueWkgfSxcbiAgcmVwbGFjZVdob2xlVGV4dDogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG5cbiAgLy8gVXRpbGl0eSBtZXRob2RzXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFRleHQodGhpcy5vd25lckRvY3VtZW50LCB0aGlzLl9kYXRhKTtcbiAgfX0sXG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvVGV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVUlFdmVudDtcblxuZnVuY3Rpb24gVUlFdmVudCgpIHtcbiAgLy8gSnVzdCB1c2UgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgdG8gaW5pdGlhbGl6ZVxuICBFdmVudC5jYWxsKHRoaXMpO1xuICB0aGlzLnZpZXcgPSBudWxsOyAvLyBGRiB1c2VzIHRoZSBjdXJyZW50IHdpbmRvd1xuICB0aGlzLmRldGFpbCA9IDA7XG59XG5VSUV2ZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnQucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBVSUV2ZW50IH0sXG4gIGluaXRVSUV2ZW50OiB7IHZhbHVlOiBmdW5jdGlvbih0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCB2aWV3LCBkZXRhaWwpIHtcbiAgICB0aGlzLmluaXRFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlKTtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMuZGV0YWlsID0gZGV0YWlsO1xuICB9fVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9VSUV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBVUkwgPSByZXF1aXJlKCcuL1VSTCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVSTFV0aWxzO1xuXG4vLyBUaGlzIGlzIGFuIGFic3RyYWN0IHN1cGVyY2xhc3MgZm9yIExvY2F0aW9uLCBIVE1MQW5jaG9yRWxlbWVudCBhbmRcbi8vIG90aGVyIHR5cGVzIHRoYXQgaGF2ZSB0aGUgc3RhbmRhcmQgY29tcGxlbWVudCBvZiBcIlVSTCBkZWNvbXBvc2l0aW9uXG4vLyBJREwgYXR0cmlidXRlc1wiLiAgVGhpcyBpcyBub3cgc3RhbmRhcmRpemVkIGFzIFVSTFV0aWxzLCBzZWU6XG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4vLyBTdWJjbGFzc2VzIG11c3QgZGVmaW5lIGEgZ2V0dGVyL3NldHRlciBvbiBocmVmLlxuLy8gVGhlIGdldHRlciBhbmQgc2V0dGVyIG1ldGhvZHMgcGFyc2UgYW5kIHJlYnVpbGQgdGhlIFVSTCBvbiBlYWNoXG4vLyBpbnZvY2F0aW9uOyB0aGVyZSBpcyBubyBhdHRlbXB0IHRvIGNhY2hlIHRoZSB2YWx1ZSBhbmQgYmUgbW9yZSBlZmZpY2llbnRcbmZ1bmN0aW9uIFVSTFV0aWxzKCkge31cblVSTFV0aWxzLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFVSTFV0aWxzLFxuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCh0aGlzLmhyZWYpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpKSByZXR1cm4gdXJsLnNjaGVtZSArIFwiOlwiO1xuICAgIGVsc2UgcmV0dXJuIFwiXCI7XG4gIH0sXG5cbiAgZ2V0IGhvc3QoKSB7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwodGhpcy5ocmVmKTtcbiAgICBpZiAodXJsLmlzQWJzb2x1dGUoKSAmJiB1cmwuaXNBdXRob3JpdHlCYXNlZCgpKVxuICAgICAgcmV0dXJuIHVybC5ob3N0ICsgKHVybC5wb3J0ID8gKFwiOlwiICsgdXJsLnBvcnQpIDogXCJcIik7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH0sXG5cbiAgZ2V0IGhvc3RuYW1lKCkge1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKHRoaXMuaHJlZik7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkgJiYgdXJsLmlzQXV0aG9yaXR5QmFzZWQoKSlcbiAgICAgIHJldHVybiB1cmwuaG9zdDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gXCJcIjtcbiAgfSxcblxuICBnZXQgcG9ydCgpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCh0aGlzLmhyZWYpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpICYmIHVybC5pc0F1dGhvcml0eUJhc2VkKCkgJiYgdXJsLnBvcnQhPT11bmRlZmluZWQpXG4gICAgICByZXR1cm4gdXJsLnBvcnQ7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH0sXG5cbiAgZ2V0IHBhdGhuYW1lKCkge1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKHRoaXMuaHJlZik7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkgJiYgdXJsLmlzSGllcmFyY2hpY2FsKCkpXG4gICAgICByZXR1cm4gdXJsLnBhdGg7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH0sXG5cbiAgZ2V0IHNlYXJjaCgpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCh0aGlzLmhyZWYpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpICYmIHVybC5pc0hpZXJhcmNoaWNhbCgpICYmIHVybC5xdWVyeSE9PXVuZGVmaW5lZClcbiAgICAgIHJldHVybiBcIj9cIiArIHVybC5xdWVyeTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gXCJcIjtcbiAgfSxcblxuICBnZXQgaGFzaCgpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCh0aGlzLmhyZWYpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpICYmIHVybC5mcmFnbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIFwiI1wiICsgdXJsLmZyYWdtZW50O1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBcIlwiO1xuICB9LFxuXG4gIGdldCB1c2VybmFtZSgpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCh0aGlzLmhyZWYpO1xuICAgIHJldHVybiB1cmwudXNlcm5hbWUgfHwgJyc7XG4gIH0sXG5cbiAgZ2V0IHBhc3N3b3JkKCkge1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKHRoaXMuaHJlZik7XG4gICAgcmV0dXJuIHVybC5wYXNzd29yZCB8fCAnJztcbiAgfSxcblxuICBnZXQgb3JpZ2luKCkge1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKHRoaXMuaHJlZik7XG4gICAgdmFyIG9yaWdpbkZvclBvcnQgPSBmdW5jdGlvbihkZWZhdWx0UG9ydCkge1xuICAgICAgdmFyIG9yaWdpbiA9IFt1cmwuc2NoZW1lLCB1cmwuaG9zdCwgK3VybC5wb3J0IHx8IGRlZmF1bHRQb3J0XTtcbiAgICAgIC8vIFhYWCBzaG91bGQgYmUgXCJ1bmljb2RlIHNlcmlhbGl6YXRpb25cIlxuICAgICAgcmV0dXJuIG9yaWdpblswXSArICc6Ly8nICsgb3JpZ2luWzFdICtcbiAgICAgICAgKG9yaWdpblsyXSA9PT0gZGVmYXVsdFBvcnQgPyAnJyA6ICgnOicgKyBvcmlnaW5bMl0pKTtcbiAgICB9O1xuICAgIHN3aXRjaCAodXJsLnNjaGVtZSkge1xuICAgIGNhc2UgJ2Z0cCc6XG4gICAgICByZXR1cm4gb3JpZ2luRm9yUG9ydCgyMSk7XG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICAgIHJldHVybiBvcmlnaW5Gb3JQb3J0KDcwKTtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgICByZXR1cm4gb3JpZ2luRm9yUG9ydCg4MCk7XG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgICByZXR1cm4gb3JpZ2luRm9yUG9ydCg0NDMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyB0aGlzIGlzIHdoYXQgY2hyb21lIGRvZXNcbiAgICAgIHJldHVybiB1cmwuc2NoZW1lICsgJzovLyc7XG4gICAgfVxuICB9LFxuXG4gIC8qXG4gIGdldCBzZWFyY2hQYXJhbXMoKSB7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwodGhpcy5ocmVmKTtcbiAgICAvLyBYWFhcbiAgfSxcbiAgKi9cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLmhyZWY7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwob3V0cHV0KTtcbiAgICBpZiAodXJsLmlzQWJzb2x1dGUoKSkge1xuICAgICAgdiA9IHYucmVwbGFjZSgvOiskLywgXCJcIik7XG4gICAgICB2ID0gdi5yZXBsYWNlKC9bXi0rXFwuYS16QS1aMC05XS9nLCBVUkwucGVyY2VudEVuY29kZSk7XG4gICAgICBpZiAodi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybC5zY2hlbWUgPSB2O1xuICAgICAgICBvdXRwdXQgPSB1cmwudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5ocmVmID0gb3V0cHV0O1xuICB9LFxuXG4gIHNldCBob3N0KHYpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5ocmVmO1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKG91dHB1dCk7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkgJiYgdXJsLmlzQXV0aG9yaXR5QmFzZWQoKSkge1xuICAgICAgdiA9IHYucmVwbGFjZSgvW14tK1xcLl9+ISQmJygpKiw7Oj1hLXpBLVowLTldL2csIFVSTC5wZXJjZW50RW5jb2RlKTtcbiAgICAgIGlmICh2Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXJsLmhvc3QgPSB2O1xuICAgICAgICBkZWxldGUgdXJsLnBvcnQ7XG4gICAgICAgIG91dHB1dCA9IHVybC50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhyZWYgPSBvdXRwdXQ7XG4gIH0sXG5cbiAgc2V0IGhvc3RuYW1lKHYpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5ocmVmO1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKG91dHB1dCk7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkgJiYgdXJsLmlzQXV0aG9yaXR5QmFzZWQoKSkge1xuICAgICAgdiA9IHYucmVwbGFjZSgvXlxcLysvLCBcIlwiKTtcbiAgICAgIHYgPSB2LnJlcGxhY2UoL1teLStcXC5ffiEkJicoKSosOzo9YS16QS1aMC05XS9nLCBVUkwucGVyY2VudEVuY29kZSk7XG4gICAgICBpZiAodi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdjtcbiAgICAgICAgb3V0cHV0ID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaHJlZiA9IG91dHB1dDtcbiAgfSxcblxuICBzZXQgcG9ydCh2KSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuaHJlZjtcbiAgICB2YXIgdXJsID0gbmV3IFVSTChvdXRwdXQpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpICYmIHVybC5pc0F1dGhvcml0eUJhc2VkKCkpIHtcbiAgICAgIHYgPSAnJyArIHY7XG4gICAgICB2ID0gdi5yZXBsYWNlKC9bXjAtOV0uKiQvLCBcIlwiKTtcbiAgICAgIHYgPSB2LnJlcGxhY2UoL14wKy8sIFwiXCIpO1xuICAgICAgaWYgKHYubGVuZ3RoID09PSAwKSB2ID0gXCIwXCI7XG4gICAgICBpZiAocGFyc2VJbnQodiwgMTApIDw9IDY1NTM1KSB7XG4gICAgICAgIHVybC5wb3J0ID0gdjtcbiAgICAgICAgb3V0cHV0ID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaHJlZiA9IG91dHB1dDtcbiAgfSxcblxuICBzZXQgcGF0aG5hbWUodikge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLmhyZWY7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwob3V0cHV0KTtcbiAgICBpZiAodXJsLmlzQWJzb2x1dGUoKSAmJiB1cmwuaXNIaWVyYXJjaGljYWwoKSkge1xuICAgICAgaWYgKHYuY2hhckF0KDApICE9PSBcIi9cIilcbiAgICAgICAgdiA9IFwiL1wiICsgdjtcbiAgICAgIHYgPSB2LnJlcGxhY2UoL1teLStcXC5ffiEkJicoKSosOzo9QFxcL2EtekEtWjAtOV0vZywgVVJMLnBlcmNlbnRFbmNvZGUpO1xuICAgICAgdXJsLnBhdGggPSB2O1xuICAgICAgb3V0cHV0ID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHRoaXMuaHJlZiA9IG91dHB1dDtcbiAgfSxcblxuICBzZXQgc2VhcmNoKHYpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5ocmVmO1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKG91dHB1dCk7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkgJiYgdXJsLmlzSGllcmFyY2hpY2FsKCkpIHtcbiAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gXCI/XCIpIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgIHYgPSB2LnJlcGxhY2UoL1teLStcXC5ffiEkJicoKSosOzo9QFxcLz9hLXpBLVowLTldL2csIFVSTC5wZXJjZW50RW5jb2RlKTtcbiAgICAgIHVybC5xdWVyeSA9IHY7XG4gICAgICBvdXRwdXQgPSB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdGhpcy5ocmVmID0gb3V0cHV0O1xuICB9LFxuXG4gIHNldCBoYXNoKHYpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5ocmVmO1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKG91dHB1dCk7XG4gICAgaWYgKHVybC5pc0Fic29sdXRlKCkpIHtcbiAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgIHYgPSB2LnJlcGxhY2UoL1teLStcXC5ffiEkJicoKSosOzo9QFxcLz9hLXpBLVowLTldL2csIFVSTC5wZXJjZW50RW5jb2RlKTtcbiAgICAgIHVybC5mcmFnbWVudCA9IHY7XG4gICAgICBvdXRwdXQgPSB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdGhpcy5ocmVmID0gb3V0cHV0O1xuICB9LFxuXG4gIHNldCB1c2VybmFtZSh2KSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuaHJlZjtcbiAgICB2YXIgdXJsID0gbmV3IFVSTChvdXRwdXQpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpKSB7XG4gICAgICB2ID0gdi5yZXBsYWNlKC9bXFx4MDAtXFx4MUZcXHg3Ri1cXHVGRkZGIFwiIzw+P2BcXC9AXFxcXDpdL2csIFVSTC5wZXJjZW50RW5jb2RlKTtcbiAgICAgIHVybC51c2VybmFtZSA9IHY7XG4gICAgICBvdXRwdXQgPSB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdGhpcy5ocmVmID0gb3V0cHV0O1xuICB9LFxuXG4gIHNldCBwYXNzd29yZCh2KSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuaHJlZjtcbiAgICB2YXIgdXJsID0gbmV3IFVSTChvdXRwdXQpO1xuICAgIGlmICh1cmwuaXNBYnNvbHV0ZSgpKSB7XG4gICAgICBpZiAodj09PScnKSB7XG4gICAgICAgIHVybC5wYXNzd29yZCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ID0gdi5yZXBsYWNlKC9bXFx4MDAtXFx4MUZcXHg3Ri1cXHVGRkZGIFwiIzw+P2BcXC9AXFxcXF0vZywgVVJMLnBlcmNlbnRFbmNvZGUpO1xuICAgICAgICB1cmwucGFzc3dvcmQgPSB2O1xuICAgICAgfVxuICAgICAgb3V0cHV0ID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHRoaXMuaHJlZiA9IG91dHB1dDtcbiAgfS8qLFxuXG4gIHNldCBzZWFyY2hQYXJhbXModikge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLmhyZWY7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwob3V0cHV0KTtcbiAgICAvLyBYWFhcbiAgICB0aGlzLmhyZWYgPSBvdXRwdXQ7XG4gIH1cbiAgKi9cbn07XG5cblVSTFV0aWxzLl9pbmhlcml0ID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgLy8gY29weSBnZXR0ZXJzL3NldHRlcnMgZnJvbSBVUkxVdGlscyB0byBvLlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhVUkxVdGlscy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgIGlmIChwPT09J2NvbnN0cnVjdG9yJyB8fCBwPT09J2hyZWYnKSB7IHJldHVybjsgfVxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihVUkxVdGlscy5wcm90b3R5cGUsIHApO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgcCwgZGVzYyk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL1VSTFV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZXhwb3J0cy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKGF0dHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXR0ci50eXBlKSkge1xuICAgIHZhciB2YWxpZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgYXR0ci50eXBlLmZvckVhY2goZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YWxpZFt2YWwudmFsdWUgfHwgdmFsXSA9IHZhbC5hbGlhcyB8fCB2YWw7XG4gICAgfSk7XG4gICAgdmFyIG1pc3NpbmdWYWx1ZURlZmF1bHQgPSBhdHRyLm1pc3Npbmc7XG4gICAgaWYgKG1pc3NpbmdWYWx1ZURlZmF1bHQ9PT11bmRlZmluZWQpIHsgbWlzc2luZ1ZhbHVlRGVmYXVsdCA9IG51bGw7IH1cbiAgICB2YXIgaW52YWxpZFZhbHVlRGVmYXVsdCA9IGF0dHIuaW52YWxpZDtcbiAgICBpZiAoaW52YWxpZFZhbHVlRGVmYXVsdD09PXVuZGVmaW5lZCkgeyBpbnZhbGlkVmFsdWVEZWZhdWx0ID0gbWlzc2luZ1ZhbHVlRGVmYXVsdDsgfVxuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdiA9IHRoaXMuX2dldGF0dHIoYXR0ci5uYW1lKTtcbiAgICAgICAgaWYgKHYgPT09IG51bGwpIHJldHVybiBtaXNzaW5nVmFsdWVEZWZhdWx0O1xuXG4gICAgICAgIHYgPSB2YWxpZFt2LnRvTG93ZXJDYXNlKCldO1xuICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdjtcbiAgICAgICAgaWYgKGludmFsaWRWYWx1ZURlZmF1bHQgIT09IG51bGwpIHJldHVybiBpbnZhbGlkVmFsdWVEZWZhdWx0O1xuICAgICAgICByZXR1cm4gdjtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgdGhpcy5fc2V0YXR0cihhdHRyLm5hbWUsIHYpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZWxzZSBpZiAoYXR0ci50eXBlID09PSBCb29sZWFuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShhdHRyLm5hbWUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgIHRoaXMuX3NldGF0dHIoYXR0ci5uYW1lLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZWxzZSBpZiAoYXR0ci50eXBlID09PSBOdW1iZXIgfHxcbiAgICAgICAgICAgYXR0ci50eXBlID09PSBcImxvbmdcIiB8fFxuICAgICAgICAgICBhdHRyLnR5cGUgPT09IFwidW5zaWduZWQgbG9uZ1wiIHx8XG4gICAgICAgICAgIGF0dHIudHlwZSA9PT0gXCJsaW1pdGVkIHVuc2lnbmVkIGxvbmcgd2l0aCBmYWxsYmFja1wiKSB7XG4gICAgcmV0dXJuIG51bWJlclByb3BEZXNjKGF0dHIpO1xuICB9XG4gIGVsc2UgaWYgKCFhdHRyLnR5cGUgfHwgYXR0ci50eXBlID09PSBTdHJpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2dldGF0dHIoYXR0ci5uYW1lKSB8fCAnJzsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICBpZiAoYXR0ci50cmVhdE51bGxBc0VtcHR5U3RyaW5nICYmIHYgPT09IG51bGwpIHsgdiA9ICcnOyB9XG4gICAgICAgIHRoaXMuX3NldGF0dHIoYXR0ci5uYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBhdHRyLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYXR0ci50eXBlKGF0dHIubmFtZSwgYXR0cik7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGF0dHJpYnV0ZSBkZWZpbml0aW9uJyk7XG59O1xuXG4vLyBTZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay8jcmVmbGVjdFxuLy9cbi8vIGRlZnZhbCBpcyB0aGUgZGVmYXVsdCB2YWx1ZS4gSWYgaXQgaXMgYSBmdW5jdGlvbiwgdGhlbiB0aGF0IGZ1bmN0aW9uXG4vLyB3aWxsIGJlIGludm9rZWQgYXMgYSBtZXRob2Qgb2YgdGhlIGVsZW1lbnQgdG8gb2J0YWluIHRoZSBkZWZhdWx0LlxuLy8gSWYgbm8gZGVmYXVsdCBpcyBzcGVjaWZpZWQgZm9yIGEgZ2l2ZW4gYXR0cmlidXRlLCB0aGVuIHRoZSBkZWZhdWx0XG4vLyBkZXBlbmRzIG9uIHRoZSB0eXBlIG9mIHRoZSBhdHRyaWJ1dGUsIGJ1dCBzaW5jZSB0aGlzIGZ1bmN0aW9uIGhhbmRsZXNcbi8vIDQgaW50ZWdlciBjYXNlcywgeW91IG11c3Qgc3BlY2lmeSB0aGUgZGVmYXVsdCB2YWx1ZSBpbiBlYWNoIGNhbGxcbi8vXG4vLyBtaW4gYW5kIG1heCBkZWZpbmUgYSB2YWxpZCByYW5nZSBmb3IgZ2V0dGluZyB0aGUgYXR0cmlidXRlLlxuLy9cbi8vIHNldG1pbiBkZWZpbmVzIGEgbWluaW11bSB2YWx1ZSB3aGVuIHNldHRpbmcuICBJZiB0aGUgdmFsdWUgaXMgbGVzc1xuLy8gdGhhbiB0aGF0LCB0aGVuIHRocm93IElOREVYX1NJWkVfRVJSLlxuLy9cbi8vIENvbnZlbmllbnRseSwgSmF2YVNjcmlwdCdzIHBhcnNlSW50IGZ1bmN0aW9uIGFwcGVhcnMgdG8gYmVcbi8vIGNvbXBhdGlibGUgd2l0aCBIVE1MJ3MgJ3J1bGVzIGZvciBwYXJzaW5nIGludGVnZXJzJ1xuZnVuY3Rpb24gbnVtYmVyUHJvcERlc2MoYSkge1xuICB2YXIgZGVmO1xuICBpZih0eXBlb2YgYS5kZWZhdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGVmID0gYS5kZWZhdWx0O1xuICB9XG4gIGVsc2UgaWYodHlwZW9mIGEuZGVmYXVsdCA9PT0gJ251bWJlcicpIHtcbiAgICBkZWYgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGEuZGVmYXVsdDsgfTtcbiAgfVxuICBlbHNlIHtcbiAgICBkZWYgPSBmdW5jdGlvbigpIHsgdXRpbHMuYXNzZXJ0KGZhbHNlLCB0eXBlb2YgYS5kZWZhdWx0KTsgfTtcbiAgfVxuICB2YXIgdW5zaWduZWRfbG9uZyA9IChhLnR5cGUgPT09ICd1bnNpZ25lZCBsb25nJyk7XG4gIHZhciBzaWduZWRfbG9uZyA9IChhLnR5cGUgPT09ICdsb25nJyk7XG4gIHZhciB1bnNpZ25lZF9mYWxsYmFjayA9IChhLnR5cGUgPT09ICdsaW1pdGVkIHVuc2lnbmVkIGxvbmcgd2l0aCBmYWxsYmFjaycpO1xuICB2YXIgbWluID0gYS5taW4sIG1heCA9IGEubWF4LCBzZXRtaW4gPSBhLnNldG1pbjtcbiAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHVuc2lnbmVkX2xvbmcpIG1pbiA9IDA7XG4gICAgaWYgKHNpZ25lZF9sb25nKSBtaW4gPSAtMHg4MDAwMDAwMDtcbiAgICBpZiAodW5zaWduZWRfZmFsbGJhY2spIG1pbiA9IDE7XG4gIH1cbiAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHVuc2lnbmVkX2xvbmcgfHwgc2lnbmVkX2xvbmcgfHwgdW5zaWduZWRfZmFsbGJhY2spIG1heCA9IDB4N0ZGRkZGRkY7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHRoaXMuX2dldGF0dHIoYS5uYW1lKTtcbiAgICAgIHZhciBuID0gYS5mbG9hdCA/IHBhcnNlRmxvYXQodikgOiBwYXJzZUludCh2LCAxMCk7XG4gICAgICBpZiAodiA9PT0gbnVsbCB8fCAhaXNGaW5pdGUobikgfHwgKG1pbiAhPT0gdW5kZWZpbmVkICYmIG4gPCBtaW4pIHx8IChtYXggIT09IHVuZGVmaW5lZCAmJiBuID4gbWF4KSkge1xuICAgICAgICByZXR1cm4gZGVmLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAodW5zaWduZWRfbG9uZyB8fCBzaWduZWRfbG9uZyB8fCB1bnNpZ25lZF9mYWxsYmFjaykge1xuICAgICAgICBpZiAoIS9eWyBcXHRcXG5cXGZcXHJdKlstK10/WzAtOV0vLnRlc3QodikpIHsgcmV0dXJuIGRlZi5jYWxsKHRoaXMpOyB9XG4gICAgICAgIG4gPSBufDA7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG47XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYS5mbG9hdCkgeyB2ID0gTWF0aC5mbG9vcih2KTsgfVxuICAgICAgaWYgKHNldG1pbiAhPT0gdW5kZWZpbmVkICYmIHYgPCBzZXRtaW4pIHtcbiAgICAgICAgdXRpbHMuSW5kZXhTaXplRXJyb3IoYS5uYW1lICsgJyBzZXQgdG8gJyArIHYpO1xuICAgICAgfVxuICAgICAgaWYgKHVuc2lnbmVkX2xvbmcpIHtcbiAgICAgICAgdiA9ICh2IDwgMCB8fCB2ID4gMHg3RkZGRkZGRikgPyBkZWYuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgKHZ8MCk7ICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIH0gZWxzZSBpZiAodW5zaWduZWRfZmFsbGJhY2spIHtcbiAgICAgICAgdiA9ICh2IDwgMSB8fCB2ID4gMHg3RkZGRkZGRikgPyBkZWYuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgKHZ8MCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfSBlbHNlIGlmIChzaWduZWRfbG9uZykge1xuICAgICAgICB2ID0gKHYgPCAtMHg4MDAwMDAwMCB8fCB2ID4gMHg3RkZGRkZGRikgPyBkZWYuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgKHZ8MCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfVxuICAgICAgdGhpcy5fc2V0YXR0cihhLm5hbWUsIFN0cmluZyh2KSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBUaGlzIGlzIGEgdXRpbGl0eSBmdW5jdGlvbiBmb3Igc2V0dGluZyB1cCBjaGFuZ2UgaGFuZGxlciBmdW5jdGlvbnNcbi8vIGZvciBhdHRyaWJ1dGVzIGxpa2UgJ2lkJyB0aGF0IHJlcXVpcmUgc3BlY2lhbCBoYW5kbGluZyB3aGVuIHRoZXkgY2hhbmdlLlxuZXhwb3J0cy5yZWdpc3RlckNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbihjLCBuYW1lLCBoYW5kbGVyKSB7XG4gIHZhciBwID0gYy5wcm90b3R5cGU7XG5cbiAgLy8gSWYgcCBkb2VzIG5vdCBhbHJlYWR5IGhhdmUgaXRzIG93biBfYXR0cmlidXRlQ2hhbmdlSGFuZGxlcnNcbiAgLy8gdGhlbiBjcmVhdGUgb25lIGZvciBpdCwgaW5oZXJpdGluZyBmcm9tIHRoZSBpbmhlcml0ZWRcbiAgLy8gX2F0dHJpYnV0ZUNoYW5nZUhhbmRsZXJzLiBBdCB0aGUgdG9wIChmb3IgdGhlIEVsZW1lbnQgY2xhc3MpIHRoZVxuICAvLyBfYXR0cmlidXRlQ2hhbmdlSGFuZGxlcnMgb2JqZWN0IHdpbGwgYmUgY3JlYXRlZCB3aXRoIGEgbnVsbCBwcm90b3R5cGUuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHAsICdfYXR0cmlidXRlQ2hhbmdlSGFuZGxlcnMnKSkge1xuICAgIHAuX2F0dHJpYnV0ZUNoYW5nZUhhbmRsZXJzID1cbiAgICAgIE9iamVjdC5jcmVhdGUocC5fYXR0cmlidXRlQ2hhbmdlSGFuZGxlcnMgfHwgbnVsbCk7XG4gIH1cblxuICBwLl9hdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyc1tuYW1lXSA9IGhhbmRsZXI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvYXR0cmlidXRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbiAqIFRoaXMgZmlsZSBkZWZpbmVzIERvbWlubyBiZWhhdmlvdXIgdGhhdCBjYW4gYmUgZXh0ZXJuYWxseSBjb25maWd1cmVkLlxuICogVG8gY2hhbmdlIHRoZXNlIHNldHRpbmdzLCBzZXQgdGhlIHJlbGV2YW50IGdsb2JhbCBwcm9wZXJ0eSAqYmVmb3JlKlxuICogeW91IGNhbGwgYHJlcXVpcmUoXCJkb21pbm9cIilgLlxuICovXG5cbmV4cG9ydHMuaXNBcGlXcml0YWJsZSA9ICFnbG9iYWwuX19kb21pbm9fZnJvemVuX187XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9jb25maWcuanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgYXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vYXR0cmlidXRlcycpO1xudmFyIHNsb3BweSA9IHJlcXVpcmUoJy4vc2xvcHB5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3BlYywgZGVmYXVsdENvbnN0cnVjdG9yLCB0YWdMaXN0LCB0YWdOYW1lVG9JbXBsKSB7XG4gIHZhciBjID0gc3BlYy5jdG9yO1xuICBpZiAoYykge1xuICAgIHZhciBwcm9wcyA9IHNwZWMucHJvcHMgfHwge307XG5cbiAgICBpZiAoc3BlYy5hdHRyaWJ1dGVzKSB7XG4gICAgICBmb3IgKHZhciBuIGluIHNwZWMuYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgYXR0ciA9IHNwZWMuYXR0cmlidXRlc1tuXTtcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGF0dHIpKSBhdHRyID0ge3R5cGU6IGF0dHJ9O1xuICAgICAgICBpZiAoIWF0dHIubmFtZSkgYXR0ci5uYW1lID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBwcm9wc1tuXSA9IGF0dHJpYnV0ZXMucHJvcGVydHkoYXR0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcHMuY29uc3RydWN0b3IgPSB7IHZhbHVlIDogYyB9O1xuICAgIGMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSgoc3BlYy5zdXBlcmNsYXNzIHx8IGRlZmF1bHRDb25zdHJ1Y3RvcikucHJvdG90eXBlLCBwcm9wcyk7XG4gICAgaWYgKHNwZWMuZXZlbnRzKSB7XG4gICAgICBhZGRFdmVudEhhbmRsZXJzKGMsIHNwZWMuZXZlbnRzKTtcbiAgICB9XG4gICAgdGFnTGlzdFtjLm5hbWVdID0gYztcbiAgfVxuICBlbHNlIHtcbiAgICBjID0gZGVmYXVsdENvbnN0cnVjdG9yO1xuICB9XG5cbiAgKHNwZWMudGFncyB8fCBzcGVjLnRhZyAmJiBbc3BlYy50YWddIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICAgIHRhZ05hbWVUb0ltcGxbdGFnXSA9IGM7XG4gIH0pO1xuXG4gIHJldHVybiBjO1xufTtcblxuZnVuY3Rpb24gRXZlbnRIYW5kbGVyQnVpbGRlcihib2R5LCBkb2N1bWVudCwgZm9ybSwgZWxlbWVudCkge1xuICB0aGlzLmJvZHkgPSBib2R5O1xuICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIHRoaXMuZm9ybSA9IGZvcm07XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG59XG5cbkV2ZW50SGFuZGxlckJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkID0gc2xvcHB5LkV2ZW50SGFuZGxlckJ1aWxkZXJfYnVpbGQ7XG5cbmZ1bmN0aW9uIEV2ZW50SGFuZGxlckNoYW5nZUhhbmRsZXIoZWx0LCBuYW1lLCBvbGR2YWwsIG5ld3ZhbCkge1xuICB2YXIgZG9jID0gZWx0Lm93bmVyRG9jdW1lbnQgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGZvcm0gPSBlbHQuZm9ybSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBlbHRbbmFtZV0gPSBuZXcgRXZlbnRIYW5kbGVyQnVpbGRlcihuZXd2YWwsIGRvYywgZm9ybSwgZWx0KS5idWlsZCgpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhbmRsZXJzKGMsIGV2ZW50SGFuZGxlclR5cGVzKSB7XG4gIHZhciBwID0gYy5wcm90b3R5cGU7XG4gIGV2ZW50SGFuZGxlclR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgIC8vIERlZmluZSB0aGUgZXZlbnQgaGFuZGxlciByZWdpc3RyYXRpb24gSURMIGF0dHJpYnV0ZSBmb3IgdGhpcyB0eXBlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwib25cIiArIHR5cGUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRFdmVudEhhbmRsZXIodHlwZSk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0eXBlLCB2KTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBEZWZpbmUgc3BlY2lhbCBiZWhhdmlvciBmb3IgdGhlIGNvbnRlbnQgYXR0cmlidXRlIGFzIHdlbGxcbiAgICBhdHRyaWJ1dGVzLnJlZ2lzdGVyQ2hhbmdlSGFuZGxlcihjLCBcIm9uXCIgKyB0eXBlLCBFdmVudEhhbmRsZXJDaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBFdmVudDogcmVxdWlyZSgnLi9FdmVudCcpLFxuICBVSUV2ZW50OiByZXF1aXJlKCcuL1VJRXZlbnQnKSxcbiAgTW91c2VFdmVudDogcmVxdWlyZSgnLi9Nb3VzZUV2ZW50JyksXG4gIEN1c3RvbUV2ZW50OiByZXF1aXJlKCcuL0N1c3RvbUV2ZW50Jylcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9ldmVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1N0eWxlRGVjbGFyYXRpb246IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpLFxuICBDaGFyYWN0ZXJEYXRhOiByZXF1aXJlKCcuL0NoYXJhY3RlckRhdGEnKSxcbiAgQ29tbWVudDogcmVxdWlyZSgnLi9Db21tZW50JyksXG4gIERPTUV4Y2VwdGlvbjogcmVxdWlyZSgnLi9ET01FeGNlcHRpb24nKSxcbiAgRE9NSW1wbGVtZW50YXRpb246IHJlcXVpcmUoJy4vRE9NSW1wbGVtZW50YXRpb24nKSxcbiAgRE9NVG9rZW5MaXN0OiByZXF1aXJlKCcuL0RPTVRva2VuTGlzdCcpLFxuICBEb2N1bWVudDogcmVxdWlyZSgnLi9Eb2N1bWVudCcpLFxuICBEb2N1bWVudEZyYWdtZW50OiByZXF1aXJlKCcuL0RvY3VtZW50RnJhZ21lbnQnKSxcbiAgRG9jdW1lbnRUeXBlOiByZXF1aXJlKCcuL0RvY3VtZW50VHlwZScpLFxuICBFbGVtZW50OiByZXF1aXJlKCcuL0VsZW1lbnQnKSxcbiAgSFRNTFBhcnNlcjogcmVxdWlyZSgnLi9IVE1MUGFyc2VyJyksXG4gIE5vZGU6IHJlcXVpcmUoJy4vTm9kZScpLFxuICBOb2RlTGlzdDogcmVxdWlyZSgnLi9Ob2RlTGlzdCcpLFxuICBOb2RlRmlsdGVyOiByZXF1aXJlKCcuL05vZGVGaWx0ZXInKSxcbiAgUHJvY2Vzc2luZ0luc3RydWN0aW9uOiByZXF1aXJlKCcuL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbicpLFxuICBUZXh0OiByZXF1aXJlKCcuL1RleHQnKSxcbiAgV2luZG93OiByZXF1aXJlKCcuL1dpbmRvdycpXG59O1xuXG51dGlscy5tZXJnZShleHBvcnRzLCByZXF1aXJlKCcuL2V2ZW50cycpKTtcbnV0aWxzLm1lcmdlKGV4cG9ydHMsIHJlcXVpcmUoJy4vaHRtbGVsdHMnKS5lbGVtZW50cyk7XG51dGlscy5tZXJnZShleHBvcnRzLCByZXF1aXJlKCcuL3N2ZycpLmVsZW1lbnRzKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL2ltcGwuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIERvbWlubyB1c2VzIHNsb3BweS1tb2RlIGZlYXR1cmVzIChpbiBwYXJ0aWN1bGFyLCBgd2l0aGApIGZvciBhIGZld1xuICogbWlub3IgdGhpbmdzLiAgVGhpcyBmaWxlIGVuY2Fwc3VsYXRlcyBhbGwgdGhlIHNsb3BwaW5lc3M7IGV2ZXJ5XG4gKiBvdGhlciBtb2R1bGUgc2hvdWxkIGJlIHN0cmljdC4gKi9cbi8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovXG4vKiBqc2hpbnQgZXZpbDogdHJ1ZSAqL1xuLyoganNoaW50IC1XMDg1ICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV2luZG93X3J1bjogZnVuY3Rpb24gX3J1bihjb2RlLCBmaWxlKSB7XG4gICAgaWYgKGZpbGUpIGNvZGUgKz0gJ1xcbi8vQCBzb3VyY2VVUkw9JyArIGZpbGU7XG4gICAgd2l0aCh0aGlzKSBldmFsKGNvZGUpO1xuICB9LFxuICBFdmVudEhhbmRsZXJCdWlsZGVyX2J1aWxkOiBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICB0cnkge1xuICAgICAgd2l0aCh0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IE9iamVjdC5jcmVhdGUobnVsbCkpXG4gICAgICAgIHdpdGgodGhpcy5kb2N1bWVudClcbiAgICAgICAgICB3aXRoKHRoaXMuZm9ybSlcbiAgICAgICAgICAgIHdpdGgodGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgICByZXR1cm4gZXZhbChcIihmdW5jdGlvbihldmVudCl7XCIgKyB0aGlzLmJvZHkgKyBcIn0pXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHRocm93IGVycjsgfTtcbiAgICB9XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9zbG9wcHkuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuL0VsZW1lbnQnKTtcbnZhciBkZWZpbmVFbGVtZW50ID0gcmVxdWlyZSgnLi9kZWZpbmVFbGVtZW50Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpO1xuXG52YXIgc3ZnRWxlbWVudHMgPSBleHBvcnRzLmVsZW1lbnRzID0ge307XG52YXIgc3ZnTmFtZVRvSW1wbCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgdmFyIGltcGwgPSBzdmdOYW1lVG9JbXBsW2xvY2FsTmFtZV0gfHwgU1ZHRWxlbWVudDtcbiAgcmV0dXJuIG5ldyBpbXBsKGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xufTtcblxuZnVuY3Rpb24gZGVmaW5lKHNwZWMpIHtcbiAgcmV0dXJuIGRlZmluZUVsZW1lbnQoc3BlYywgU1ZHRWxlbWVudCwgc3ZnRWxlbWVudHMsIHN2Z05hbWVUb0ltcGwpO1xufVxuXG52YXIgU1ZHRWxlbWVudCA9IGRlZmluZSh7XG4gIHN1cGVyY2xhc3M6IEVsZW1lbnQsXG4gIGN0b3I6IGZ1bmN0aW9uIFNWR0VsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgdXRpbHMuTkFNRVNQQUNFLlNWRywgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBzdHlsZTogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9zdHlsZSlcbiAgICAgICAgdGhpcy5fc3R5bGUgPSBuZXcgQ1NTU3R5bGVEZWNsYXJhdGlvbih0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICB9fVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgY3RvcjogZnVuY3Rpb24gU1ZHU1ZHRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgU1ZHRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICB0YWc6ICdzdmcnLFxuICBwcm9wczoge1xuICAgIGNyZWF0ZVNWR1JlY3Q6IHsgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmNyZWF0ZUVsZW1lbnQodGhpcy5vd25lckRvY3VtZW50LCAncmVjdCcsIG51bGwpO1xuICAgIH0gfVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnczogW1xuICAgICdhJywgJ2FsdEdseXBoJywgJ2FsdEdseXBoRGVmJywgJ2FsdEdseXBoSXRlbScsICdhbmltYXRlJywgJ2FuaW1hdGVDb2xvcicsICdhbmltYXRlTW90aW9uJywgJ2FuaW1hdGVUcmFuc2Zvcm0nLFxuICAgICdjaXJjbGUnLCAnY2xpcFBhdGgnLCAnY29sb3ItcHJvZmlsZScsICdjdXJzb3InLCAnZGVmcycsICdkZXNjJywgJ2VsbGlwc2UnLCAnZmVCbGVuZCcsICdmZUNvbG9yTWF0cml4JyxcbiAgICAnZmVDb21wb25lbnRUcmFuc2ZlcicsICdmZUNvbXBvc2l0ZScsICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJywgJ2ZlRGlzcGxhY2VtZW50TWFwJywgJ2ZlRGlzdGFudExpZ2h0JyxcbiAgICAnZmVGbG9vZCcsICdmZUZ1bmNBJywgJ2ZlRnVuY0InLCAnZmVGdW5jRycsICdmZUZ1bmNSJywgJ2ZlR2F1c3NpYW5CbHVyJywgJ2ZlSW1hZ2UnLCAnZmVNZXJnZScsICdmZU1lcmdlTm9kZScsXG4gICAgJ2ZlTW9ycGhvbG9neScsICdmZU9mZnNldCcsICdmZVBvaW50TGlnaHQnLCAnZmVTcGVjdWxhckxpZ2h0aW5nJywgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnLCAnZmlsdGVyJyxcbiAgICAnZm9udCcsICdmb250LWZhY2UnLCAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2Utc3JjJywgJ2ZvbnQtZmFjZS11cmknLCAnZm9yZWlnbk9iamVjdCcsICdnJyxcbiAgICAnZ2x5cGgnLCAnZ2x5cGhSZWYnLCAnaGtlcm4nLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXJrZXInLCAnbWFzaycsICdtZXRhZGF0YScsICdtaXNzaW5nLWdseXBoJyxcbiAgICAnbXBhdGgnLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzY3JpcHQnLCAnc2V0JywgJ3N0b3AnLCAgJ3N0eWxlJyxcbiAgICAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJywgJ3RyZWYnLCAndHNwYW4nLCAndXNlJywgJ3ZpZXcnLCAndmtlcm4nXG4gIF1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvc3ZnLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgzOSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnVuZGxlcy9hbmltYXRpb25zLnVtZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3Jcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGRlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2J1bmRsZXMvcGxhdGZvcm0tYnJvd3Nlci51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg4Nik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvZmlsdGVyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvclxuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoODcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGRlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL2ZpcnN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvclxuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXJsXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidXJsXCJcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBBcHBNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXBwTW9kdWxlKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFwcE1vZHVsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgQXBwTW9kdWxlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC5zZXJ2ZXIubW9kdWxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vQ2xpZW50QXBwL2FwcC9hcHAuc2VydmVyLm1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHY1LjEuM1xuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cHM6Ly9hbmd1bGFyLmlvL1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpLCByZXF1aXJlKCdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnJvd3NlcicpLCByZXF1aXJlKCdAYW5ndWxhci9jb21tb24nKSwgcmVxdWlyZSgnQGFuZ3VsYXIvY29tbW9uL2h0dHAnKSwgcmVxdWlyZSgnQGFuZ3VsYXIvaHR0cCcpLCByZXF1aXJlKCdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnKSwgcmVxdWlyZSgnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJyksIHJlcXVpcmUoJ3J4anMvT2JzZXJ2YWJsZScpLCByZXF1aXJlKCdyeGpzL1N1YmplY3QnKSwgcmVxdWlyZSgndXJsJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvbXBpbGVyJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvZmlsdGVyJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvZmlyc3QnKSwgcmVxdWlyZSgncnhqcy9vcGVyYXRvci90b1Byb21pc2UnKSkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ0Bhbmd1bGFyL3BsYXRmb3JtLXNlcnZlcicsIFsnZXhwb3J0cycsICdAYW5ndWxhci9jb3JlJywgJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInLCAnQGFuZ3VsYXIvYW5pbWF0aW9ucy9icm93c2VyJywgJ0Bhbmd1bGFyL2NvbW1vbicsICdAYW5ndWxhci9jb21tb24vaHR0cCcsICdAYW5ndWxhci9odHRwJywgJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYycsICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnLCAncnhqcy9PYnNlcnZhYmxlJywgJ3J4anMvU3ViamVjdCcsICd1cmwnLCAnQGFuZ3VsYXIvY29tcGlsZXInLCAncnhqcy9vcGVyYXRvci9maWx0ZXInLCAncnhqcy9vcGVyYXRvci9maXJzdCcsICdyeGpzL29wZXJhdG9yL3RvUHJvbWlzZSddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwubmcgPSBnbG9iYWwubmcgfHwge30sIGdsb2JhbC5uZy5wbGF0Zm9ybVNlcnZlciA9IHt9KSxnbG9iYWwubmcuY29yZSxnbG9iYWwubmcucGxhdGZvcm1Ccm93c2VyLGdsb2JhbC5uZy5hbmltYXRpb25zLmJyb3dzZXIsZ2xvYmFsLm5nLmNvbW1vbixnbG9iYWwubmcuY29tbW9uLmh0dHAsZ2xvYmFsLm5nLmh0dHAsZ2xvYmFsLm5nLnBsYXRmb3JtQnJvd3NlckR5bmFtaWMsZ2xvYmFsLm5nLnBsYXRmb3JtQnJvd3Nlci5hbmltYXRpb25zLGdsb2JhbC5SeCxnbG9iYWwuUngsZ2xvYmFsLnVybCxnbG9iYWwubmcuY29tcGlsZXIsZ2xvYmFsLlJ4Lk9ic2VydmFibGUucHJvdG90eXBlLGdsb2JhbC5SeC5PYnNlcnZhYmxlLnByb3RvdHlwZSxnbG9iYWwuUnguT2JzZXJ2YWJsZS5wcm90b3R5cGUpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLF9hbmd1bGFyX2NvcmUsX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLF9hbmd1bGFyX2FuaW1hdGlvbnNfYnJvd3NlcixfYW5ndWxhcl9jb21tb24sX2FuZ3VsYXJfY29tbW9uX2h0dHAsX2FuZ3VsYXJfaHR0cCxfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXJEeW5hbWljLF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlcl9hbmltYXRpb25zLHJ4anNfT2JzZXJ2YWJsZSxyeGpzX1N1YmplY3QsdXJsLF9hbmd1bGFyX2NvbXBpbGVyLHJ4anNfb3BlcmF0b3JfZmlsdGVyLHJ4anNfb3BlcmF0b3JfZmlyc3Qscnhqc19vcGVyYXRvcl90b1Byb21pc2UpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxuXG4vKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXIgdjUuMS4zXG4gKiAoYykgMjAxMC0yMDE3IEdvb2dsZSwgSW5jLiBodHRwczovL2FuZ3VsYXIuaW8vXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIGRvbWlubyA9IHJlcXVpcmUoJ2RvbWlubycpO1xuLyoqXG4gKiBAcGFyYW0gez99IG1ldGhvZE5hbWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9ub3RJbXBsZW1lbnRlZChtZXRob2ROYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkIGluIERvbWlub0FkYXB0ZXI6ICcgKyBtZXRob2ROYW1lKTtcbn1cbi8qKlxuICogUGFyc2VzIGEgZG9jdW1lbnQgc3RyaW5nIHRvIGEgRG9jdW1lbnQgb2JqZWN0LlxuICogQHBhcmFtIHs/fSBodG1sXG4gKiBAcGFyYW0gez89fSB1cmxcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoaHRtbCwgdXJsJCQxKSB7XG4gICAgaWYgKHVybCQkMSA9PT0gdm9pZCAwKSB7IHVybCQkMSA9ICcvJzsgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIHdpbmRvdyA9IGRvbWluby5jcmVhdGVXaW5kb3coaHRtbCwgdXJsJCQxKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkb2MgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgcmV0dXJuIGRvYztcbn1cbi8qKlxuICogU2VyaWFsaXplcyBhIGRvY3VtZW50IHRvIHN0cmluZy5cbiAqIEBwYXJhbSB7P30gZG9jXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVEb2N1bWVudChkb2MpIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKGRvYykpLnNlcmlhbGl6ZSgpO1xufVxuLyoqXG4gKiBET00gQWRhcHRlciBmb3IgdGhlIHNlcnZlciBwbGF0Zm9ybSBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmduYXNzL2RvbWluby5cbiAqL1xudmFyIERvbWlub0FkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERvbWlub0FkYXB0ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9taW5vQWRhcHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIubWFrZUN1cnJlbnQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1c2V0Um9vdERvbUFkYXB0ZXIobmV3IERvbWlub0FkYXB0ZXIoKSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUubG9nRXJyb3IgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVycm9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZXJyb3IpIHsgY29uc29sZS5lcnJvcihlcnJvcik7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUubG9nID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZXJyb3JcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmxvZ0dyb3VwID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVycm9yKSB7IGNvbnNvbGUuZXJyb3IoZXJyb3IpOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUubG9nR3JvdXBFbmQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLnN1cHBvcnRzRE9NRXZlbnRzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLnN1cHBvcnRzTmF0aXZlU2hhZG93RE9NID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVBXG4gICAgICogQHBhcmFtIHs/fSBub2RlQlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuY29udGFpbnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVBXG4gICAgICogQHBhcmFtIHs/fSBub2RlQlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGVBLCBub2RlQikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbm5lciA9IG5vZGVCO1xuICAgICAgICB3aGlsZSAoaW5uZXIpIHtcbiAgICAgICAgICAgIGlmIChpbm5lciA9PT0gbm9kZUEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpbm5lciA9IGlubmVyLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZUh0bWxEb2N1bWVudCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VEb2N1bWVudCgnPGh0bWw+PGhlYWQ+PHRpdGxlPmZha2VUaXRsZTwvdGl0bGU+PC9oZWFkPjxib2R5PjwvYm9keT48L2h0bWw+Jyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmdldERlZmF1bHREb2N1bWVudCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIURvbWlub0FkYXB0ZXIuZGVmYXVsdERvYykge1xuICAgICAgICAgICAgRG9taW5vQWRhcHRlci5kZWZhdWx0RG9jID0gZG9taW5vLmNyZWF0ZURvY3VtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERvbWlub0FkYXB0ZXIuZGVmYXVsdERvYztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez89fSBkb2NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZVNoYWRvd1Jvb3QgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/PX0gZG9jXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWwsIGRvYykge1xuICAgICAgICBpZiAoZG9jID09PSB2b2lkIDApIHsgZG9jID0gZG9jdW1lbnQ7IH1cbiAgICAgICAgZWwuc2hhZG93Um9vdCA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGVsLnNoYWRvd1Jvb3QucGFyZW50ID0gZWw7XG4gICAgICAgIHJldHVybiBlbC5zaGFkb3dSb290O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuZ2V0U2hhZG93Um9vdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuc2hhZG93Um9vdDsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmlzVGV4dE5vZGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLm5vZGVUeXBlID09PSBEb21pbm9BZGFwdGVyLmRlZmF1bHREb2MuVEVYVF9OT0RFOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuaXNDb21tZW50Tm9kZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IERvbWlub0FkYXB0ZXIuZGVmYXVsdERvYy5DT01NRU5UX05PREU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmlzRWxlbWVudE5vZGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlID8gbm9kZS5ub2RlVHlwZSA9PT0gRG9taW5vQWRhcHRlci5kZWZhdWx0RG9jLkVMRU1FTlRfTk9ERSA6IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5oYXNTaGFkb3dSb290ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5zaGFkb3dSb290ICE9IG51bGw7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5pc1NoYWRvd1Jvb3QgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiB0aGlzLmdldFNoYWRvd1Jvb3Qobm9kZSkgPT0gbm9kZTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICAvLyBEb21pbm8gdHJpZXMgdHAgcmVzb2x2ZSBocmVmLXMgd2hpY2ggd2UgZG8gbm90IHdhbnQuIEp1c3QgcmV0dXJuIHRoZVxuICAgICAgICAgICAgLy8gYXRyaWJ1dGUgdmFsdWUuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoZWwsICdocmVmJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ2lubmVyVGV4dCcpIHtcbiAgICAgICAgICAgIC8vIERvbWlubyBkb2VzIG5vdCBzdXBwb3J0IGlubmVyVGV4dC4gSnVzdCBtYXAgaXQgdG8gdGV4dENvbnRlbnQuXG4gICAgICAgICAgICByZXR1cm4gZWwudGV4dENvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovIChlbCkpW25hbWVdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLnNldFByb3BlcnR5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgLy8gRXZlbnRob3VnaCB0aGUgc2VydmVyIHJlbmRlcmVyIHJlZmxlY3RzIGFueSBwcm9wZXJ0aWVzIHRvIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIC8vIG1hcCAnaHJlZicgdG8gYXRyaWJ1dGUganVzdCB0byBoYW5kbGUgd2hlbiBzZXRQcm9wZXJ0eSBpcyBkaXJlY3RseSBjYWxsZWQuXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShlbCwgJ2hyZWYnLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ2lubmVyVGV4dCcpIHtcbiAgICAgICAgICAgIC8vIERvbWlubyBkb2VzIG5vdCBzdXBwb3J0IGlubmVyVGV4dC4gSnVzdCBtYXAgaXQgdG8gdGV4dENvbnRlbnQuXG4gICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgICgvKiogQHR5cGUgez99ICovIChlbCkpW25hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGRvY1xuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRHbG9iYWxFdmVudFRhcmdldCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZG9jXG4gICAgICogQHBhcmFtIHs/fSB0YXJnZXRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChkb2MsIHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0ID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXQgPT09ICdib2R5Jykge1xuICAgICAgICAgICAgcmV0dXJuIGRvYy5ib2R5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBkb2NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmdldEJhc2VIcmVmID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBkb2NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChkb2MpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmFzZSA9IHRoaXMucXVlcnlTZWxlY3Rvcihkb2MuZG9jdW1lbnRFbGVtZW50LCAnYmFzZScpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBocmVmID0gJyc7XG4gICAgICAgIGlmIChiYXNlKSB7XG4gICAgICAgICAgICBocmVmID0gdGhpcy5nZXRIcmVmKGJhc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8oYWx4aHViKTogTmVlZCByZWxhdGl2ZSBwYXRoIGxvZ2ljIGZyb20gQnJvd3NlckRvbUFkYXB0ZXIgaGVyZT9cbiAgICAgICAgcmV0dXJuIGhyZWY7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLl9yZWFkU3R5bGVBdHRyaWJ1dGUgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVNYXAgPSB7fTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVBdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgaWYgKHN0eWxlQXR0cmlidXRlKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZUxpc3QgPSBzdHlsZUF0dHJpYnV0ZS5zcGxpdCgvOysvZyk7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgc3R5bGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlTGlzdFtpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlID0gLyoqIEB0eXBlIHs/fSAqLyAoc3R5bGVMaXN0W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29sb24gPSBzdHlsZS5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQ1NTIHN0eWxlOiBcIiArIHN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAoc3R5bGVNYXApKVtzdHlsZS5zdWJzdHIoMCwgY29sb24pLnRyaW0oKV0gPSBzdHlsZS5zdWJzdHIoY29sb24gKyAxKS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZU1hcDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVNYXBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLl93cml0ZVN0eWxlQXR0cmlidXRlID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlTWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVNYXApIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVBdHRyVmFsdWUgPSAnJztcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgaW4gc3R5bGVNYXApIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5ld1ZhbHVlID0gc3R5bGVNYXBba2V5XTtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlQXR0clZhbHVlICs9IGtleSArICc6JyArIHN0eWxlTWFwW2tleV0gKyAnOyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVBdHRyVmFsdWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzdHlsZU5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBzdHlsZVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5zZXRTdHlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVOYW1lXG4gICAgICogQHBhcmFtIHs/PX0gc3R5bGVWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZU1hcCA9IHRoaXMuX3JlYWRTdHlsZUF0dHJpYnV0ZShlbGVtZW50KTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHN0eWxlTWFwKSlbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICAgIHRoaXMuX3dyaXRlU3R5bGVBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVNYXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzdHlsZU5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLnJlbW92ZVN0eWxlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzdHlsZU5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBzdHlsZU5hbWUpIHsgdGhpcy5zZXRTdHlsZShlbGVtZW50LCBzdHlsZU5hbWUsIG51bGwpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVOYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRTdHlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVOYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVOYW1lKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHN0eWxlTWFwID0gdGhpcy5fcmVhZFN0eWxlQXR0cmlidXRlKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gc3R5bGVNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSA/ICgvKiogQHR5cGUgez99ICovIChzdHlsZU1hcCkpW3N0eWxlTmFtZV0gOiAnJztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVOYW1lXG4gICAgICogQHBhcmFtIHs/PX0gc3R5bGVWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuaGFzU3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlTmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IHN0eWxlVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBzdHlsZU5hbWUsIHN0eWxlVmFsdWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWUgPSB0aGlzLmdldFN0eWxlKGVsZW1lbnQsIHN0eWxlTmFtZSkgfHwgJyc7XG4gICAgICAgIHJldHVybiBzdHlsZVZhbHVlID8gdmFsdWUgPT0gc3R5bGVWYWx1ZSA6IHZhbHVlLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBldnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBldnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgZXZ0KSB7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50IHRvIHRoZSB3aW5kb3cgYWxzby5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZG9jID0gZWwub3duZXJEb2N1bWVudCB8fCBlbDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gd2luID0gKC8qKiBAdHlwZSB7P30gKi8gKGRvYykpLmRlZmF1bHRWaWV3O1xuICAgICAgICBpZiAod2luKSB7XG4gICAgICAgICAgICB3aW4uZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLmdldEhpc3RvcnkgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgdGhyb3cgX25vdEltcGxlbWVudGVkKCdnZXRIaXN0b3J5Jyk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRMb2NhdGlvbiA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aHJvdyBfbm90SW1wbGVtZW50ZWQoJ2dldExvY2F0aW9uJyk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRVc2VyQWdlbnQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICdGYWtlIHVzZXIgYWdlbnQnOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuc3VwcG9ydHNXZWJBbmltYXRpb24gPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUucGVyZm9ybWFuY2VOb3cgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRBbmltYXRpb25QcmVmaXggPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuZ2V0VHJhbnNpdGlvbkVuZCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3RyYW5zaXRpb25lbmQnOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuc3VwcG9ydHNBbmltYXRpb24gPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuZ2V0RGlzdHJpYnV0ZWROb2RlcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCkgeyB0aHJvdyBfbm90SW1wbGVtZW50ZWQoJ2dldERpc3RyaWJ1dGVkTm9kZXMnKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERvbWlub0FkYXB0ZXIucHJvdG90eXBlLnN1cHBvcnRzQ29va2llcyA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEb21pbm9BZGFwdGVyLnByb3RvdHlwZS5nZXRDb29raWUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7IHRocm93IF9ub3RJbXBsZW1lbnRlZCgnZ2V0Q29va2llJyk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRG9taW5vQWRhcHRlci5wcm90b3R5cGUuc2V0Q29va2llID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7IHRocm93IF9ub3RJbXBsZW1lbnRlZCgnc2V0Q29va2llJyk7IH07XG4gICAgcmV0dXJuIERvbWlub0FkYXB0ZXI7XG59KF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtUJyb3dzZXJEb21BZGFwdGVyKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgcGxhdGZvcm0gc3RhdGUuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBQbGF0Zm9ybVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYXRmb3JtU3RhdGUoX2RvYykge1xuICAgICAgICB0aGlzLl9kb2MgPSBfZG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwbGF0Zm9ybSB0byBzdHJpbmcuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGxhdGZvcm0gdG8gc3RyaW5nLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUGxhdGZvcm1TdGF0ZS5wcm90b3R5cGUucmVuZGVyVG9TdHJpbmcgPSAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwbGF0Zm9ybSB0byBzdHJpbmcuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpemVEb2N1bWVudCh0aGlzLl9kb2MpOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgRE9NIHN0YXRlLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgRE9NIHN0YXRlLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUGxhdGZvcm1TdGF0ZS5wcm90b3R5cGUuZ2V0RG9jdW1lbnQgPSAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IERPTSBzdGF0ZS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RvYzsgfTtcbiAgICBQbGF0Zm9ybVN0YXRlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBQbGF0Zm9ybVN0YXRlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuRE9DVU1FTlQsXSB9LF0gfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBQbGF0Zm9ybVN0YXRlO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIHhocjIgPSByZXF1aXJlKCd4aHIyJyk7XG52YXIgaXNBYnNvbHV0ZVVybCA9IC9eW2EtekEtWlxcLVxcKy5dKzpcXC9cXC8vO1xuLyoqXG4gKiBAcGFyYW0gez99IHVybFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSZXF1ZXN0VXJsKHVybCQkMSkge1xuICAgIGlmICghaXNBYnNvbHV0ZVVybC50ZXN0KHVybCQkMSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVVJMcyByZXF1ZXN0ZWQgdmlhIEh0dHAgb24gdGhlIHNlcnZlciBtdXN0IGJlIGFic29sdXRlLiBVUkw6IFwiICsgdXJsJCQxKTtcbiAgICB9XG59XG52YXIgU2VydmVyWGhyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZlclhocigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJYaHIucHJvdG90eXBlLmJ1aWxkID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgeGhyMi5YTUxIdHRwUmVxdWVzdCgpOyB9O1xuICAgIFNlcnZlclhoci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgU2VydmVyWGhyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIFNlcnZlclhocjtcbn0oKSk7XG52YXIgU2VydmVyWHNyZlN0cmF0ZWd5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZlclhzcmZTdHJhdGVneSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXFcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFNlcnZlclhzcmZTdHJhdGVneS5wcm90b3R5cGUuY29uZmlndXJlUmVxdWVzdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVxKSB7IH07XG4gICAgU2VydmVyWHNyZlN0cmF0ZWd5LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBTZXJ2ZXJYc3JmU3RyYXRlZ3kuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gU2VydmVyWHNyZlN0cmF0ZWd5O1xufSgpKTtcbi8qKlxuICogQGFic3RyYWN0XG4gKi9cbnZhciBab25lTWFjcm9UYXNrV3JhcHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBab25lTWFjcm9UYXNrV3JhcHBlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBab25lTWFjcm9UYXNrV3JhcHBlci5wcm90b3R5cGUud3JhcCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyByeGpzX09ic2VydmFibGUuT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRhc2sgPSAvKiogQHR5cGUgez99ICovICgobnVsbCkpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdWIgPSBudWxsO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2F2ZWRSZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2F2ZWRFcnJvciA9IG51bGw7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzY2hlZHVsZVRhc2sgPSBmdW5jdGlvbiAoX3Rhc2spIHtcbiAgICAgICAgICAgICAgICB0YXNrID0gX3Rhc2s7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWxlZ2F0ZSA9IF90aGlzLmRlbGVnYXRlKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHN1YiA9IGRlbGVnYXRlLnN1YnNjcmliZShmdW5jdGlvbiAocmVzKSB7IHJldHVybiBzYXZlZFJlc3VsdCA9IHJlczsgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBodHRwIG9ic2VydmFibGUgd2FzIGNvbXBsZXRlZCB0d2ljZS4gVGhpcyBzaG91bGRuXFwndCBoYXBwZW4sIHBsZWFzZSBmaWxlIGEgYnVnLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNhdmVkRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmludm9rZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gaHR0cCBvYnNlcnZhYmxlIHdhcyBjb21wbGV0ZWQgdHdpY2UuIFRoaXMgc2hvdWxkblxcJ3QgaGFwcGVuLCBwbGVhc2UgZmlsZSBhIGJ1Zy4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5pbnZva2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjYW5jZWxUYXNrID0gZnVuY3Rpb24gKF90YXNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzYXZlZEVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHNhdmVkRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzYXZlZFJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIE1vY2tCYWNrZW5kIGZvciBIdHRwIGlzIHN5bmNocm9ub3VzLCB3aGljaCBtZWFucyB0aGF0IGlmIHNjaGVkdWxlVGFzayBpcyBieVxuICAgICAgICAgICAgLy8gc2NoZWR1bGVNYWNyb1Rhc2ssIHRoZSByZXF1ZXN0IHdpbGwgaGl0IE1vY2tCYWNrZW5kIGFuZCB0aGUgcmVzcG9uc2Ugd2lsbCBiZVxuICAgICAgICAgICAgLy8gc2VudCwgY2F1c2luZyB0YXNrLmludm9rZSgpIHRvIGJlIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIF90YXNrID0gWm9uZS5jdXJyZW50LnNjaGVkdWxlTWFjcm9UYXNrKCdab25lTWFjcm9UYXNrV3JhcHBlci5zdWJzY3JpYmUnLCBvbkNvbXBsZXRlLCB7fSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSwgY2FuY2VsVGFzayk7XG4gICAgICAgICAgICBzY2hlZHVsZVRhc2soX3Rhc2spO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZWR1bGVkICYmIHRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay56b25lLmNhbmNlbFRhc2sodGFzayk7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFpvbmVNYWNyb1Rhc2tXcmFwcGVyO1xufSgpKTtcbnZhciBab25lTWFjcm9UYXNrQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoWm9uZU1hY3JvVGFza0Nvbm5lY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWm9uZU1hY3JvVGFza0Nvbm5lY3Rpb24ocmVxdWVzdCwgYmFja2VuZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgX3RoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG4gICAgICAgIHZhbGlkYXRlUmVxdWVzdFVybChyZXF1ZXN0LnVybCk7XG4gICAgICAgIF90aGlzLnJlc3BvbnNlID0gX3RoaXMud3JhcChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlcXVlc3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFpvbmVNYWNyb1Rhc2tDb25uZWN0aW9uLnByb3RvdHlwZS5kZWxlZ2F0ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbiA9IHRoaXMuYmFja2VuZC5jcmVhdGVDb25uZWN0aW9uKHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5sYXN0Q29ubmVjdGlvbi5yZXNwb25zZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWm9uZU1hY3JvVGFza0Nvbm5lY3Rpb24ucHJvdG90eXBlLCBcInJlYWR5U3RhdGVcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5sYXN0Q29ubmVjdGlvbiA/IHRoaXMubGFzdENvbm5lY3Rpb24ucmVhZHlTdGF0ZSA6IF9hbmd1bGFyX2h0dHAuUmVhZHlTdGF0ZS5VbnNlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBab25lTWFjcm9UYXNrQ29ubmVjdGlvbjtcbn0oWm9uZU1hY3JvVGFza1dyYXBwZXIpKTtcbnZhciBab25lTWFjcm9UYXNrQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBab25lTWFjcm9UYXNrQmFja2VuZChiYWNrZW5kKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgWm9uZU1hY3JvVGFza0JhY2tlbmQucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3Rpb24gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlcXVlc3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9uZU1hY3JvVGFza0Nvbm5lY3Rpb24ocmVxdWVzdCwgdGhpcy5iYWNrZW5kKTtcbiAgICB9O1xuICAgIHJldHVybiBab25lTWFjcm9UYXNrQmFja2VuZDtcbn0oKSk7XG52YXIgWm9uZUNsaWVudEJhY2tlbmQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFpvbmVDbGllbnRCYWNrZW5kLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFpvbmVDbGllbnRCYWNrZW5kKGJhY2tlbmQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBab25lQ2xpZW50QmFja2VuZC5wcm90b3R5cGUuaGFuZGxlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVxdWVzdCkgeyByZXR1cm4gdGhpcy53cmFwKHJlcXVlc3QpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgWm9uZUNsaWVudEJhY2tlbmQucHJvdG90eXBlLmRlbGVnYXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLmhhbmRsZShyZXF1ZXN0KTtcbiAgICB9O1xuICAgIHJldHVybiBab25lQ2xpZW50QmFja2VuZDtcbn0oWm9uZU1hY3JvVGFza1dyYXBwZXIpKTtcbi8qKlxuICogQHBhcmFtIHs/fSB4aHJCYWNrZW5kXG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGh0dHBGYWN0b3J5KHhockJhY2tlbmQsIG9wdGlvbnMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYWNyb0JhY2tlbmQgPSBuZXcgWm9uZU1hY3JvVGFza0JhY2tlbmQoeGhyQmFja2VuZCk7XG4gICAgcmV0dXJuIG5ldyBfYW5ndWxhcl9odHRwLkh0dHAobWFjcm9CYWNrZW5kLCBvcHRpb25zKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBiYWNrZW5kXG4gKiBAcGFyYW0gez99IGludGVyY2VwdG9yc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gem9uZVdyYXBwZWRJbnRlcmNlcHRpbmdIYW5kbGVyKGJhY2tlbmQsIGludGVyY2VwdG9ycykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlYWxCYWNrZW5kID0gX2FuZ3VsYXJfY29tbW9uX2h0dHAuybVpbnRlcmNlcHRpbmdIYW5kbGVyKGJhY2tlbmQsIGludGVyY2VwdG9ycyk7XG4gICAgcmV0dXJuIG5ldyBab25lQ2xpZW50QmFja2VuZChyZWFsQmFja2VuZCk7XG59XG52YXIgU0VSVkVSX0hUVFBfUFJPVklERVJTID0gW1xuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfaHR0cC5IdHRwLCB1c2VGYWN0b3J5OiBodHRwRmFjdG9yeSwgZGVwczogW19hbmd1bGFyX2h0dHAuWEhSQmFja2VuZCwgX2FuZ3VsYXJfaHR0cC5SZXF1ZXN0T3B0aW9uc10gfSxcbiAgICB7IHByb3ZpZGU6IF9hbmd1bGFyX2h0dHAuQnJvd3NlclhociwgdXNlQ2xhc3M6IFNlcnZlclhociB9LCB7IHByb3ZpZGU6IF9hbmd1bGFyX2h0dHAuWFNSRlN0cmF0ZWd5LCB1c2VDbGFzczogU2VydmVyWHNyZlN0cmF0ZWd5IH0sXG4gICAgeyBwcm92aWRlOiBfYW5ndWxhcl9jb21tb25faHR0cC5YaHJGYWN0b3J5LCB1c2VDbGFzczogU2VydmVyWGhyIH0sIHtcbiAgICAgICAgcHJvdmlkZTogX2FuZ3VsYXJfY29tbW9uX2h0dHAuSHR0cEhhbmRsZXIsXG4gICAgICAgIHVzZUZhY3Rvcnk6IHpvbmVXcmFwcGVkSW50ZXJjZXB0aW5nSGFuZGxlcixcbiAgICAgICAgZGVwczogW19hbmd1bGFyX2NvbW1vbl9odHRwLkh0dHBCYWNrZW5kLCBbbmV3IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwoKSwgX2FuZ3VsYXJfY29tbW9uX2h0dHAuSFRUUF9JTlRFUkNFUFRPUlNdXVxuICAgIH1cbl07XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ29uZmlnIG9iamVjdCBwYXNzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgcGxhdGZvcm0uXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBUaGUgREkgdG9rZW4gZm9yIHNldHRpbmcgdGhlIGluaXRpYWwgY29uZmlnIGZvciB0aGUgcGxhdGZvcm0uXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBJTklUSUFMX0NPTkZJRyA9IG5ldyBfYW5ndWxhcl9jb3JlLkluamVjdGlvblRva2VuKCdTZXJ2ZXIuSU5JVElBTF9DT05GSUcnKTtcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiBjYWxsaW5nIGByZW5kZXJNb2R1bGVGYWN0b3J5YCBvciBgcmVuZGVyTW9kdWxlYCBqdXN0XG4gKiBiZWZvcmUgY3VycmVudCBwbGF0Zm9ybSBzdGF0ZSBpcyByZW5kZXJlZCB0byBzdHJpbmcuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBCRUZPUkVfQVBQX1NFUklBTElaRUQgPSBuZXcgX2FuZ3VsYXJfY29yZS5JbmplY3Rpb25Ub2tlbignU2VydmVyLlJFTkRFUl9NT0RVTEVfSE9PSycpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30gdXJsU3RyXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwYXJzZVVybCh1cmxTdHIpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJzZWRVcmwgPSB1cmwucGFyc2UodXJsU3RyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGFyc2VkVXJsLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgICBzZWFyY2g6IHBhcnNlZFVybC5zZWFyY2ggfHwgJycsXG4gICAgICAgIGhhc2g6IHBhcnNlZFVybC5oYXNoIHx8ICcnLFxuICAgIH07XG59XG4vKipcbiAqIFNlcnZlci1zaWRlIGltcGxlbWVudGF0aW9uIG9mIFVSTCBzdGF0ZS4gSW1wbGVtZW50cyBgcGF0aG5hbWVgLCBgc2VhcmNoYCwgYW5kIGBoYXNoYFxuICogYnV0IG5vdCB0aGUgc3RhdGUgc3RhY2suXG4gKi9cbnZhciBTZXJ2ZXJQbGF0Zm9ybUxvY2F0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZlclBsYXRmb3JtTG9jYXRpb24oX2RvYywgX2NvbmZpZykge1xuICAgICAgICB0aGlzLl9kb2MgPSBfZG9jO1xuICAgICAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLmhhc2ggPSAnJztcbiAgICAgICAgdGhpcy5faGFzaFVwZGF0ZSA9IG5ldyByeGpzX1N1YmplY3QuU3ViamVjdCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb25maWcgPSAvKiogQHR5cGUgez99ICovIChfY29uZmlnKTtcbiAgICAgICAgaWYgKCEhY29uZmlnICYmICEhY29uZmlnLnVybCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyc2VkVXJsID0gcGFyc2VVcmwoY29uZmlnLnVybCk7XG4gICAgICAgICAgICB0aGlzLnBhdGhuYW1lID0gcGFyc2VkVXJsLnBhdGhuYW1lO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2ggPSBwYXJzZWRVcmwuc2VhcmNoO1xuICAgICAgICAgICAgdGhpcy5oYXNoID0gcGFyc2VkVXJsLmhhc2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5nZXRCYXNlSHJlZkZyb21ET00gPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKChfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5nZXRCYXNlSHJlZih0aGlzLl9kb2MpKSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU2VydmVyUGxhdGZvcm1Mb2NhdGlvbi5wcm90b3R5cGUub25Qb3BTdGF0ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICAvLyBOby1vcDogYSBzdGF0ZSBzdGFjayBpcyBub3QgaW1wbGVtZW50ZWQsIHNvXG4gICAgICAgIC8vIG5vIGV2ZW50cyB3aWxsIGV2ZXIgY29tZS5cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFNlcnZlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLm9uSGFzaENoYW5nZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyB0aGlzLl9oYXNoVXBkYXRlLnN1YnNjcmliZShmbik7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlcnZlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlwiICsgdGhpcy5wYXRobmFtZSArIHRoaXMuc2VhcmNoICsgdGhpcy5oYXNoOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/fSBvbGRVcmxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFNlcnZlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLnNldEhhc2ggPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/fSBvbGRVcmxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2YWx1ZSwgb2xkVXJsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmhhc2ggPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiB0aGUgaGFzaCBoYXMgbm90IGNoYW5nZWQuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5oYXNoID0gdmFsdWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5ld1VybCA9IHRoaXMudXJsO1xuICAgICAgICBzY2hlZHVsZU1pY3JvVGFzayhmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5faGFzaFVwZGF0ZS5uZXh0KC8qKiBAdHlwZSB7P30gKi8gKHsgdHlwZTogJ2hhc2hjaGFuZ2UnLCBvbGRVcmw6IG9sZFVybCwgbmV3VXJsOiBuZXdVcmwgfSkpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gc3RhdGVcbiAgICAgKiBAcGFyYW0gez99IHRpdGxlXG4gICAgICogQHBhcmFtIHs/fSBuZXdVcmxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFNlcnZlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gc3RhdGVcbiAgICAgKiBAcGFyYW0gez99IHRpdGxlXG4gICAgICogQHBhcmFtIHs/fSBuZXdVcmxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzdGF0ZSwgdGl0bGUsIG5ld1VybCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbGRVcmwgPSB0aGlzLnVybDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyc2VkVXJsID0gcGFyc2VVcmwobmV3VXJsKTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5wYXRobmFtZSA9IHBhcnNlZFVybC5wYXRobmFtZTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5zZWFyY2ggPSBwYXJzZWRVcmwuc2VhcmNoO1xuICAgICAgICB0aGlzLnNldEhhc2gocGFyc2VkVXJsLmhhc2gsIG9sZFVybCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHN0YXRlXG4gICAgICogQHBhcmFtIHs/fSB0aXRsZVxuICAgICAqIEBwYXJhbSB7P30gbmV3VXJsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5wdXNoU3RhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHN0YXRlXG4gICAgICogQHBhcmFtIHs/fSB0aXRsZVxuICAgICAqIEBwYXJhbSB7P30gbmV3VXJsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoc3RhdGUsIHRpdGxlLCBuZXdVcmwpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCBuZXdVcmwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5mb3J3YXJkID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5iYWNrID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH07XG4gICAgU2VydmVyUGxhdGZvcm1Mb2NhdGlvbi5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgU2VydmVyUGxhdGZvcm1Mb2NhdGlvbi5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkRPQ1VNRU5ULF0gfSxdIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtJTklUSUFMX0NPTkZJRyxdIH0sXSB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIFNlcnZlclBsYXRmb3JtTG9jYXRpb247XG59KCkpO1xuLyoqXG4gKiBAcGFyYW0gez99IGZuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzY2hlZHVsZU1pY3JvVGFzayhmbikge1xuICAgIFpvbmUuY3VycmVudC5zY2hlZHVsZU1pY3JvVGFzaygnc2NoZWR1bGVNaWNyb3Rhc2snLCBmbik7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIFNlcnZlclJlbmRlcmVyRmFjdG9yeTIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VydmVyUmVuZGVyZXJGYWN0b3J5MihuZ1pvbmUsIGRvY3VtZW50LCBzaGFyZWRTdHlsZXNIb3N0KSB7XG4gICAgICAgIHRoaXMubmdab25lID0gbmdab25lO1xuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIHRoaXMuc2hhcmVkU3R5bGVzSG9zdCA9IHNoYXJlZFN0eWxlc0hvc3Q7XG4gICAgICAgIHRoaXMucmVuZGVyZXJCeUNvbXBJZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBuZXcgX2FuZ3VsYXJfY29tcGlsZXIuRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5KCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFJlbmRlcmVyID0gbmV3IERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIoZG9jdW1lbnQsIG5nWm9uZSwgdGhpcy5zY2hlbWEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFNlcnZlclJlbmRlcmVyRmFjdG9yeTIucHJvdG90eXBlLmNyZWF0ZVJlbmRlcmVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSkge1xuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSZW5kZXJlcjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGUuZW5jYXBzdWxhdGlvbikge1xuICAgICAgICAgICAgY2FzZSBfYW5ndWxhcl9jb3JlLlZpZXdFbmNhcHN1bGF0aW9uLk5hdGl2ZTpcbiAgICAgICAgICAgIGNhc2UgX2FuZ3VsYXJfY29yZS5WaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZDoge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlckJ5Q29tcElkLmdldCh0eXBlLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyID0gbmV3IEVtdWxhdGVkRW5jYXBzdWxhdGlvblNlcnZlclJlbmRlcmVyMih0aGlzLmRvY3VtZW50LCB0aGlzLm5nWm9uZSwgdGhpcy5zaGFyZWRTdHlsZXNIb3N0LCB0aGlzLnNjaGVtYSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXJCeUNvbXBJZC5zZXQodHlwZS5pZCwgcmVuZGVyZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAocmVuZGVyZXIpKS5hcHBseVRvSG9zdChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIF9hbmd1bGFyX2NvcmUuVmlld0VuY2Fwc3VsYXRpb24uTmF0aXZlOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlIGVuY2Fwc3VsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBvbiB0aGUgc2VydmVyIScpO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5yZW5kZXJlckJ5Q29tcElkLmhhcyh0eXBlLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdHlsZXMgPSBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVmbGF0dGVuU3R5bGVzKHR5cGUuaWQsIHR5cGUuc3R5bGVzLCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkU3R5bGVzSG9zdC5hZGRTdHlsZXMoc3R5bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlckJ5Q29tcElkLnNldCh0eXBlLmlkLCB0aGlzLmRlZmF1bHRSZW5kZXJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSZW5kZXJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTZXJ2ZXJSZW5kZXJlckZhY3RvcnkyLnByb3RvdHlwZS5iZWdpbiA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU2VydmVyUmVuZGVyZXJGYWN0b3J5Mi5wcm90b3R5cGUuZW5kID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IH07XG4gICAgU2VydmVyUmVuZGVyZXJGYWN0b3J5Mi5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgU2VydmVyUmVuZGVyZXJGYWN0b3J5Mi5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nWm9uZSwgfSxcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkRPQ1VNRU5ULF0gfSxdIH0sXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1U2hhcmVkU3R5bGVzSG9zdCwgfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBTZXJ2ZXJSZW5kZXJlckZhY3RvcnkyO1xufSgpKTtcbnZhciBEZWZhdWx0U2VydmVyUmVuZGVyZXIyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIoZG9jdW1lbnQsIG5nWm9uZSwgc2NoZW1hKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgdGhpcy5uZ1pvbmUgPSBuZ1pvbmU7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLmRhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lLCBuYW1lc3BhY2UsIGRlYnVnSW5mbykge1xuICAgICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkuY3JlYXRlRWxlbWVudE5TKF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtU5BTUVTUEFDRV9VUklTW25hbWVzcGFjZV0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5jcmVhdGVFbGVtZW50KG5hbWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IGRlYnVnSW5mb1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUuY3JlYXRlQ29tbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2YWx1ZSwgZGVidWdJbmZvKSB7IHJldHVybiBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5jcmVhdGVDb21tZW50KHZhbHVlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/PX0gZGVidWdJbmZvXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IGRlYnVnSW5mb1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZhbHVlLCBkZWJ1Z0luZm8pIHsgcmV0dXJuIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLmNyZWF0ZVRleHROb2RlKHZhbHVlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLmFwcGVuZENoaWxkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50LCBuZXdDaGlsZCkgeyBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5hcHBlbmRDaGlsZChwYXJlbnQsIG5ld0NoaWxkKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcGFyYW0gez99IHJlZkNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcGFyYW0gez99IHJlZkNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50LCBuZXdDaGlsZCwgcmVmQ2hpbGQpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkuaW5zZXJ0QmVmb3JlKHBhcmVudCwgcmVmQ2hpbGQsIG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG9sZENoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBvbGRDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgb2xkQ2hpbGQpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkucmVtb3ZlQ2hpbGQocGFyZW50LCBvbGRDaGlsZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLnNlbGVjdFJvb3RFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3Rvck9yTm9kZVxuICAgICAqIEBwYXJhbSB7Pz19IGRlYnVnSW5mb1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHNlbGVjdG9yT3JOb2RlLCBkZWJ1Z0luZm8pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWw7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3JPck5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlbCA9IF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnF1ZXJ5U2VsZWN0b3IodGhpcy5kb2N1bWVudCwgc2VsZWN0b3JPck5vZGUpO1xuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzZWxlY3RvciBcXFwiXCIgKyBzZWxlY3Rvck9yTm9kZSArIFwiXFxcIiBkaWQgbm90IG1hdGNoIGFueSBlbGVtZW50c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsID0gc2VsZWN0b3JPck5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkuY2xlYXJOb2RlcyhlbCk7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUucGFyZW50Tm9kZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnBhcmVudEVsZW1lbnQobm9kZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5uZXh0U2libGluZyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLm5leHRTaWJsaW5nKG5vZGUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/PX0gbmFtZXNwYWNlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnNldEF0dHJpYnV0ZU5TKGVsLCBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVOQU1FU1BBQ0VfVVJJU1tuYW1lc3BhY2VdLCBuYW1lc3BhY2UgKyAnOicgKyBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5zZXRBdHRyaWJ1dGUoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkucmVtb3ZlQXR0cmlidXRlTlMoZWwsIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtU5BTUVTUEFDRV9VUklTW25hbWVzcGFjZV0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkucmVtb3ZlQXR0cmlidXRlKGVsLCBuYW1lKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUuYWRkQ2xhc3MgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWwsIG5hbWUpIHsgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkuYWRkQ2xhc3MoZWwsIG5hbWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLnJlbW92ZUNsYXNzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lKSB7IF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnJlbW92ZUNsYXNzKGVsLCBuYW1lKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGZsYWdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5zZXRTdHlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P30gZmxhZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgc3R5bGUsIHZhbHVlLCBmbGFncykge1xuICAgICAgICBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5zZXRTdHlsZShlbCwgc3R5bGUsIHZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlXG4gICAgICogQHBhcmFtIHs/fSBmbGFnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlU3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gZmxhZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgc3R5bGUsIGZsYWdzKSB7XG4gICAgICAgIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnJlbW92ZVN0eWxlKGVsLCBzdHlsZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRhZ05hbWVcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUuX2lzU2FmZVRvUmVmbGVjdFByb3BlcnR5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0YWdOYW1lXG4gICAgICogQHBhcmFtIHs/fSBwcm9wZXJ0eU5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0YWdOYW1lLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hLnNlY3VyaXR5Q29udGV4dCh0YWdOYW1lLCBwcm9wZXJ0eU5hbWUsIHRydWUpID09PVxuICAgICAgICAgICAgdGhpcy5zY2hlbWEuc2VjdXJpdHlDb250ZXh0KHRhZ05hbWUsIHByb3BlcnR5TmFtZSwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLnNldFByb3BlcnR5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY2hlY2tOb1N5bnRoZXRpY1Byb3AobmFtZSwgJ3Byb3BlcnR5Jyk7XG4gICAgICAgIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWdldERPTSgpLnNldFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIC8vIE1pcnJvciBwcm9wZXJ0eSB2YWx1ZXMgZm9yIGtub3duIEhUTUwgZWxlbWVudCBwcm9wZXJ0aWVzIGluIHRoZSBhdHRyaWJ1dGVzLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0YWdOYW1lID0gKC8qKiBAdHlwZSB7P30gKi8gKGVsLnRhZ05hbWUpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpICYmXG4gICAgICAgICAgICB0aGlzLnNjaGVtYS5oYXNFbGVtZW50KHRhZ05hbWUsIEVNUFRZX0FSUkFZKSAmJlxuICAgICAgICAgICAgdGhpcy5zY2hlbWEuaGFzUHJvcGVydHkodGFnTmFtZSwgbmFtZSwgRU1QVFlfQVJSQVkpICYmXG4gICAgICAgICAgICB0aGlzLl9pc1NhZmVUb1JlZmxlY3RQcm9wZXJ0eSh0YWdOYW1lLCBuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoZWwsIG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0U2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkgeyBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5zZXRUZXh0KG5vZGUsIHZhbHVlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRhcmdldFxuICAgICAqIEBwYXJhbSB7P30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdFNlcnZlclJlbmRlcmVyMi5wcm90b3R5cGUubGlzdGVuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gTm90ZTogV2UgYXJlIG5vdCB1c2luZyB0aGUgRXZlbnRzUGx1Z2luIGhlcmUgYXMgdGhpcyBpcyBub3QgbmVlZGVkXG4gICAgICAgIC8vIHRvIHJ1biBvdXIgdGVzdHMuXG4gICAgICAgIGNoZWNrTm9TeW50aGV0aWNQcm9wKGV2ZW50TmFtZSwgJ2xpc3RlbmVyJyk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsID0gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5nZXRHbG9iYWxFdmVudFRhcmdldCh0aGlzLmRvY3VtZW50LCB0YXJnZXQpIDogdGFyZ2V0O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvdXRzaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMubmdab25lLnJ1bkd1YXJkZWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soZXZlbnQpOyB9KTsgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIChfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5vbkFuZENhbmNlbChlbCwgZXZlbnROYW1lLCBvdXRzaWRlSGFuZGxlcikpOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0U2VydmVyUmVuZGVyZXIyO1xufSgpKTtcbnZhciBBVF9DSEFSQ09ERSA9ICdAJy5jaGFyQ29kZUF0KDApO1xuLyoqXG4gKiBAcGFyYW0gez99IG5hbWVcbiAqIEBwYXJhbSB7P30gbmFtZUtpbmRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrTm9TeW50aGV0aWNQcm9wKG5hbWUsIG5hbWVLaW5kKSB7XG4gICAgaWYgKG5hbWUuY2hhckNvZGVBdCgwKSA9PT0gQVRfQ0hBUkNPREUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm91bmQgdGhlIHN5bnRoZXRpYyBcIiArIG5hbWVLaW5kICsgXCIgXCIgKyBuYW1lICsgXCIuIFBsZWFzZSBpbmNsdWRlIGVpdGhlciBcXFwiQnJvd3NlckFuaW1hdGlvbnNNb2R1bGVcXFwiIG9yIFxcXCJOb29wQW5pbWF0aW9uc01vZHVsZVxcXCIgaW4geW91ciBhcHBsaWNhdGlvbi5cIik7XG4gICAgfVxufVxudmFyIEVtdWxhdGVkRW5jYXBzdWxhdGlvblNlcnZlclJlbmRlcmVyMiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW11bGF0ZWRFbmNhcHN1bGF0aW9uU2VydmVyUmVuZGVyZXIyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtdWxhdGVkRW5jYXBzdWxhdGlvblNlcnZlclJlbmRlcmVyMihkb2N1bWVudCwgbmdab25lLCBzaGFyZWRTdHlsZXNIb3N0LCBzY2hlbWEsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb2N1bWVudCwgbmdab25lLCBzY2hlbWEpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3R5bGVzID0gX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1ZmxhdHRlblN0eWxlcyhjb21wb25lbnQuaWQsIGNvbXBvbmVudC5zdHlsZXMsIFtdKTtcbiAgICAgICAgc2hhcmVkU3R5bGVzSG9zdC5hZGRTdHlsZXMoc3R5bGVzKTtcbiAgICAgICAgX3RoaXMuY29udGVudEF0dHIgPSBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVzaGltQ29udGVudEF0dHJpYnV0ZShjb21wb25lbnQuaWQpO1xuICAgICAgICBfdGhpcy5ob3N0QXR0ciA9IF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtXNoaW1Ib3N0QXR0cmlidXRlKGNvbXBvbmVudC5pZCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFbXVsYXRlZEVuY2Fwc3VsYXRpb25TZXJ2ZXJSZW5kZXJlcjIucHJvdG90eXBlLmFwcGx5VG9Ib3N0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCkgeyBfc3VwZXIucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGVsZW1lbnQsIHRoaXMuaG9zdEF0dHIsICcnKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRW11bGF0ZWRFbmNhcHN1bGF0aW9uU2VydmVyUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwYXJlbnQsIG5hbWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWwgPSBfc3VwZXIucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQuY2FsbCh0aGlzLCBwYXJlbnQsIG5hbWUpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGVsLCB0aGlzLmNvbnRlbnRBdHRyLCAnJyk7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xuICAgIHJldHVybiBFbXVsYXRlZEVuY2Fwc3VsYXRpb25TZXJ2ZXJSZW5kZXJlcjI7XG59KERlZmF1bHRTZXJ2ZXJSZW5kZXJlcjIpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIFNlcnZlclN0eWxlc0hvc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNlcnZlclN0eWxlc0hvc3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VydmVyU3R5bGVzSG9zdChkb2MsIHRyYW5zaXRpb25JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb25JZCA9IHRyYW5zaXRpb25JZDtcbiAgICAgICAgX3RoaXMuaGVhZCA9IG51bGw7XG4gICAgICAgIF90aGlzLmhlYWQgPSBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKS5nZXRFbGVtZW50c0J5VGFnTmFtZShkb2MsICdoZWFkJylbMF07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU2VydmVyU3R5bGVzSG9zdC5wcm90b3R5cGUuX2FkZFN0eWxlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFkYXB0ZXIgPSBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVnZXRET00oKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWwgPSBhZGFwdGVyLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGFkYXB0ZXIuc2V0VGV4dChlbCwgc3R5bGUpO1xuICAgICAgICBpZiAoISF0aGlzLnRyYW5zaXRpb25JZCkge1xuICAgICAgICAgICAgYWRhcHRlci5zZXRBdHRyaWJ1dGUoZWwsICduZy10cmFuc2l0aW9uJywgdGhpcy50cmFuc2l0aW9uSWQpO1xuICAgICAgICB9XG4gICAgICAgIGFkYXB0ZXIuYXBwZW5kQ2hpbGQodGhpcy5oZWFkLCBlbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGFkZGl0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU2VydmVyU3R5bGVzSG9zdC5wcm90b3R5cGUub25TdHlsZXNBZGRlZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYWRkaXRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYWRkaXRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFkZGl0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkgeyByZXR1cm4gX3RoaXMuX2FkZFN0eWxlKHN0eWxlKTsgfSk7XG4gICAgfTtcbiAgICBTZXJ2ZXJTdHlsZXNIb3N0LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBTZXJ2ZXJTdHlsZXNIb3N0LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuRE9DVU1FTlQsXSB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdCwgYXJnczogW19hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtVRSQU5TSVRJT05fSUQsXSB9LF0gfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBTZXJ2ZXJTdHlsZXNIb3N0O1xufShfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVTaGFyZWRTdHlsZXNIb3N0KSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBJTlRFUk5BTF9TRVJWRVJfUExBVEZPUk1fUFJPVklERVJTID0gW1xuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkRPQ1VNRU5ULCB1c2VGYWN0b3J5OiBfZG9jdW1lbnQsIGRlcHM6IFtfYW5ndWxhcl9jb3JlLkluamVjdG9yXSB9LFxuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfY29yZS5QTEFURk9STV9JRCwgdXNlVmFsdWU6IF9hbmd1bGFyX2NvbW1vbi7JtVBMQVRGT1JNX1NFUlZFUl9JRCB9LFxuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfY29yZS5QTEFURk9STV9JTklUSUFMSVpFUiwgdXNlRmFjdG9yeTogaW5pdERvbWlub0FkYXB0ZXIsIG11bHRpOiB0cnVlLCBkZXBzOiBbX2FuZ3VsYXJfY29yZS5JbmplY3Rvcl0gfSwge1xuICAgICAgICBwcm92aWRlOiBfYW5ndWxhcl9jb21tb24uUGxhdGZvcm1Mb2NhdGlvbixcbiAgICAgICAgdXNlQ2xhc3M6IFNlcnZlclBsYXRmb3JtTG9jYXRpb24sXG4gICAgICAgIGRlcHM6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuRE9DVU1FTlQsIFtfYW5ndWxhcl9jb3JlLk9wdGlvbmFsLCBJTklUSUFMX0NPTkZJR11dXG4gICAgfSxcbiAgICB7IHByb3ZpZGU6IFBsYXRmb3JtU3RhdGUsIGRlcHM6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuRE9DVU1FTlRdIH0sXG4gICAgLy8gQWRkIHNwZWNpYWwgcHJvdmlkZXIgdGhhdCBhbGxvd3MgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHBsYXRmb3JtU2VydmVyKiB0byBiZSBjcmVhdGVkLlxuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfY29yZS7JtUFMTE9XX01VTFRJUExFX1BMQVRGT1JNUywgdXNlVmFsdWU6IHRydWUgfVxuXTtcbi8qKlxuICogQHBhcmFtIHs/fSBpbmplY3RvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaW5pdERvbWlub0FkYXB0ZXIoaW5qZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBEb21pbm9BZGFwdGVyLm1ha2VDdXJyZW50KCk7IH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcmVuZGVyZXJcbiAqIEBwYXJhbSB7P30gZW5naW5lXG4gKiBAcGFyYW0gez99IHpvbmVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlU2VydmVyUmVuZGVyZXJGYWN0b3J5KHJlbmRlcmVyLCBlbmdpbmUsIHpvbmUpIHtcbiAgICByZXR1cm4gbmV3IF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlcl9hbmltYXRpb25zLsm1QW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5KHJlbmRlcmVyLCBlbmdpbmUsIHpvbmUpO1xufVxudmFyIFNFUlZFUl9SRU5ERVJfUFJPVklERVJTID0gW1xuICAgIFNlcnZlclJlbmRlcmVyRmFjdG9yeTIsXG4gICAge1xuICAgICAgICBwcm92aWRlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyRmFjdG9yeTIsXG4gICAgICAgIHVzZUZhY3Rvcnk6IGluc3RhbnRpYXRlU2VydmVyUmVuZGVyZXJGYWN0b3J5LFxuICAgICAgICBkZXBzOiBbU2VydmVyUmVuZGVyZXJGYWN0b3J5MiwgX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1QW5pbWF0aW9uRW5naW5lLCBfYW5ndWxhcl9jb3JlLk5nWm9uZV1cbiAgICB9LFxuICAgIFNlcnZlclN0eWxlc0hvc3QsXG4gICAgeyBwcm92aWRlOiBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVTaGFyZWRTdHlsZXNIb3N0LCB1c2VFeGlzdGluZzogU2VydmVyU3R5bGVzSG9zdCB9LFxuXTtcbi8qKlxuICogVGhlIG5nIG1vZHVsZSBmb3IgdGhlIHNlcnZlci5cbiAqXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIFNlcnZlck1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXJ2ZXJNb2R1bGUoKSB7XG4gICAgfVxuICAgIFNlcnZlck1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuQnJvd3Nlck1vZHVsZV0sXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IFtfYW5ndWxhcl9odHRwLkh0dHBNb2R1bGUsIF9hbmd1bGFyX2NvbW1vbl9odHRwLkh0dHBDbGllbnRNb2R1bGUsIF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlcl9hbmltYXRpb25zLk5vb3BBbmltYXRpb25zTW9kdWxlXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBTRVJWRVJfUkVOREVSX1BST1ZJREVSUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZFUl9IVFRQX1BST1ZJREVSUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfY29yZS5UZXN0YWJpbGl0eSwgdXNlVmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIFNlcnZlck1vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBTZXJ2ZXJNb2R1bGU7XG59KCkpO1xuLyoqXG4gKiBAcGFyYW0gez99IGluamVjdG9yXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfZG9jdW1lbnQoaW5qZWN0b3IpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb25maWcgPSBpbmplY3Rvci5nZXQoSU5JVElBTF9DT05GSUcsIG51bGwpO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLmRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZURvY3VtZW50KGNvbmZpZy5kb2N1bWVudCwgY29uZmlnLnVybCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLsm1Z2V0RE9NKCkuY3JlYXRlSHRtbERvY3VtZW50KCk7XG4gICAgfVxufVxuLyoqXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIHBsYXRmb3JtU2VydmVyID0gX2FuZ3VsYXJfY29yZS5jcmVhdGVQbGF0Zm9ybUZhY3RvcnkoX2FuZ3VsYXJfY29yZS5wbGF0Zm9ybUNvcmUsICdzZXJ2ZXInLCBJTlRFUk5BTF9TRVJWRVJfUExBVEZPUk1fUFJPVklERVJTKTtcbi8qKlxuICogVGhlIHNlcnZlciBwbGF0Zm9ybSB0aGF0IHN1cHBvcnRzIHRoZSBydW50aW1lIGNvbXBpbGVyLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgcGxhdGZvcm1EeW5hbWljU2VydmVyID0gX2FuZ3VsYXJfY29yZS5jcmVhdGVQbGF0Zm9ybUZhY3RvcnkoX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyRHluYW1pYy7JtXBsYXRmb3JtQ29yZUR5bmFtaWMsICdzZXJ2ZXJEeW5hbWljJywgSU5URVJOQUxfU0VSVkVSX1BMQVRGT1JNX1BST1ZJREVSUyk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQHBhcmFtIHs/fSBkb2NcbiAqIEBwYXJhbSB7P30gYXBwSWRcbiAqIEBwYXJhbSB7P30gdHJhbnNmZXJTdG9yZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplVHJhbnNmZXJTdGF0ZUZhY3RvcnkoZG9jLCBhcHBJZCwgdHJhbnNmZXJTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LmlkID0gYXBwSWQgKyAnLXN0YXRlJztcbiAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIHNjcmlwdC50ZXh0Q29udGVudCA9IF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtWVzY2FwZUh0bWwodHJhbnNmZXJTdG9yZS50b0pzb24oKSk7XG4gICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfTtcbn1cbi8qKlxuICogTmdNb2R1bGUgdG8gaW5zdGFsbCBvbiB0aGUgc2VydmVyIHNpZGUgd2hpbGUgdXNpbmcgdGhlIGBUcmFuc2ZlclN0YXRlYCB0byB0cmFuc2ZlciBzdGF0ZSBmcm9tXG4gKiBzZXJ2ZXIgdG8gY2xpZW50LlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgU2VydmVyVHJhbnNmZXJTdGF0ZU1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXJ2ZXJUcmFuc2ZlclN0YXRlTW9kdWxlKCkge1xuICAgIH1cbiAgICBTZXJ2ZXJUcmFuc2ZlclN0YXRlTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5OZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuVHJhbnNmZXJTdGF0ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEJFRk9SRV9BUFBfU0VSSUFMSVpFRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBzZXJpYWxpemVUcmFuc2ZlclN0YXRlRmFjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkRPQ1VNRU5ULCBfYW5ndWxhcl9jb3JlLkFQUF9JRCwgX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLlRyYW5zZmVyU3RhdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBTZXJ2ZXJUcmFuc2ZlclN0YXRlTW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIFNlcnZlclRyYW5zZmVyU3RhdGVNb2R1bGU7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30gcGxhdGZvcm1GYWN0b3J5XG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9nZXRQbGF0Zm9ybShwbGF0Zm9ybUZhY3RvcnksIG9wdGlvbnMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBleHRyYVByb3ZpZGVycyA9IG9wdGlvbnMuZXh0cmFQcm92aWRlcnMgPyBvcHRpb25zLmV4dHJhUHJvdmlkZXJzIDogW107XG4gICAgcmV0dXJuIHBsYXRmb3JtRmFjdG9yeShbXG4gICAgICAgIHsgcHJvdmlkZTogSU5JVElBTF9DT05GSUcsIHVzZVZhbHVlOiB7IGRvY3VtZW50OiBvcHRpb25zLmRvY3VtZW50LCB1cmw6IG9wdGlvbnMudXJsIH0gfSxcbiAgICAgICAgZXh0cmFQcm92aWRlcnNcbiAgICBdKTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7P30gcGxhdGZvcm1cbiAqIEBwYXJhbSB7P30gbW9kdWxlUmVmUHJvbWlzZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX3JlbmRlcihwbGF0Zm9ybSwgbW9kdWxlUmVmUHJvbWlzZSkge1xuICAgIHJldHVybiBtb2R1bGVSZWZQcm9taXNlLnRoZW4oZnVuY3Rpb24gKG1vZHVsZVJlZikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmFuc2l0aW9uSWQgPSBtb2R1bGVSZWYuaW5qZWN0b3IuZ2V0KF9hbmd1bGFyX3BsYXRmb3JtQnJvd3Nlci7JtVRSQU5TSVRJT05fSUQsIG51bGwpO1xuICAgICAgICBpZiAoIXRyYW5zaXRpb25JZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyTW9kdWxlW0ZhY3RvcnldKCkgcmVxdWlyZXMgdGhlIHVzZSBvZiBCcm93c2VyTW9kdWxlLndpdGhTZXJ2ZXJUcmFuc2l0aW9uKCkgdG8gZW5zdXJlXFxudGhlIHNlcnZlci1yZW5kZXJlZCBhcHAgY2FuIGJlIHByb3Blcmx5IGJvb3RzdHJhcHBlZCBpbnRvIGEgY2xpZW50IGFwcC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXBwbGljYXRpb25SZWYgPSBtb2R1bGVSZWYuaW5qZWN0b3IuZ2V0KF9hbmd1bGFyX2NvcmUuQXBwbGljYXRpb25SZWYpO1xuICAgICAgICByZXR1cm4gcnhqc19vcGVyYXRvcl90b1Byb21pc2UudG9Qcm9taXNlXG4gICAgICAgICAgICAuY2FsbChyeGpzX29wZXJhdG9yX2ZpcnN0LmZpcnN0LmNhbGwocnhqc19vcGVyYXRvcl9maWx0ZXIuZmlsdGVyLmNhbGwoYXBwbGljYXRpb25SZWYuaXNTdGFibGUsIGZ1bmN0aW9uIChpc1N0YWJsZSkgeyByZXR1cm4gaXNTdGFibGU7IH0pKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXRmb3JtU3RhdGUgPSBwbGF0Zm9ybS5pbmplY3Rvci5nZXQoUGxhdGZvcm1TdGF0ZSk7XG4gICAgICAgICAgICAvLyBSdW4gYW55IEJFRk9SRV9BUFBfU0VSSUFMSVpFRCBjYWxsYmFja3MganVzdCBiZWZvcmUgcmVuZGVyaW5nIHRvIHN0cmluZy5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNhbGxiYWNrcyA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoQkVGT1JFX0FQUF9TRVJJQUxJWkVELCBudWxsKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNhbGxiYWNrc18xID0gY2FsbGJhY2tzOyBfaSA8IGNhbGxiYWNrc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJZ25vcmluZyBCRUZPUkVfQVBQX1NFUklBTElaRUQgRXhjZXB0aW9uOiAnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG91dHB1dCA9IHBsYXRmb3JtU3RhdGUucmVuZGVyVG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHBsYXRmb3JtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBSZW5kZXJzIGEgTW9kdWxlIHRvIHN0cmluZy5cbiAqXG4gKiBgZG9jdW1lbnRgIGlzIHRoZSBmdWxsIGRvY3VtZW50IEhUTUwgb2YgdGhlIHBhZ2UgdG8gcmVuZGVyLCBhcyBhIHN0cmluZy5cbiAqIGB1cmxgIGlzIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlbmRlciByZXF1ZXN0LlxuICogYGV4dHJhUHJvdmlkZXJzYCBhcmUgdGhlIHBsYXRmb3JtIGxldmVsIHByb3ZpZGVycyBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyIHJlcXVlc3QuXG4gKlxuICogRG8gbm90IHVzZSB0aGlzIGluIGEgcHJvZHVjdGlvbiBzZXJ2ZXIgZW52aXJvbm1lbnQuIFVzZSBwcmUtY29tcGlsZWQge1xcQGxpbmsgTmdNb2R1bGVGYWN0b3J5fSB3aXRoXG4gKiB7XFxAbGluayByZW5kZXJNb2R1bGVGYWN0b3J5fSBpbnN0ZWFkLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7P30gbW9kdWxlXG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlbmRlck1vZHVsZShtb2R1bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF0Zm9ybSA9IF9nZXRQbGF0Zm9ybShwbGF0Zm9ybUR5bmFtaWNTZXJ2ZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBfcmVuZGVyKHBsYXRmb3JtLCBwbGF0Zm9ybS5ib290c3RyYXBNb2R1bGUobW9kdWxlKSk7XG59XG4vKipcbiAqIFJlbmRlcnMgYSB7XFxAbGluayBOZ01vZHVsZUZhY3Rvcnl9IHRvIHN0cmluZy5cbiAqXG4gKiBgZG9jdW1lbnRgIGlzIHRoZSBmdWxsIGRvY3VtZW50IEhUTUwgb2YgdGhlIHBhZ2UgdG8gcmVuZGVyLCBhcyBhIHN0cmluZy5cbiAqIGB1cmxgIGlzIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlbmRlciByZXF1ZXN0LlxuICogYGV4dHJhUHJvdmlkZXJzYCBhcmUgdGhlIHBsYXRmb3JtIGxldmVsIHByb3ZpZGVycyBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyIHJlcXVlc3QuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHs/fSBtb2R1bGVGYWN0b3J5XG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlbmRlck1vZHVsZUZhY3RvcnkobW9kdWxlRmFjdG9yeSwgb3B0aW9ucykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXRmb3JtID0gX2dldFBsYXRmb3JtKHBsYXRmb3JtU2VydmVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gX3JlbmRlcihwbGF0Zm9ybSwgcGxhdGZvcm0uYm9vdHN0cmFwTW9kdWxlRmFjdG9yeShtb2R1bGVGYWN0b3J5KSk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVudHJ5IHBvaW50IGZvciBhbGwgcHVibGljIEFQSXMgb2YgdGhlIGNvbW1vbiBwYWNrYWdlLlxuICovXG4vKipcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgVkVSU0lPTiA9IG5ldyBfYW5ndWxhcl9jb3JlLlZlcnNpb24oJzUuMS4zJyk7XG5cbmV4cG9ydHMuUGxhdGZvcm1TdGF0ZSA9IFBsYXRmb3JtU3RhdGU7XG5leHBvcnRzLlNlcnZlck1vZHVsZSA9IFNlcnZlck1vZHVsZTtcbmV4cG9ydHMucGxhdGZvcm1EeW5hbWljU2VydmVyID0gcGxhdGZvcm1EeW5hbWljU2VydmVyO1xuZXhwb3J0cy5wbGF0Zm9ybVNlcnZlciA9IHBsYXRmb3JtU2VydmVyO1xuZXhwb3J0cy5CRUZPUkVfQVBQX1NFUklBTElaRUQgPSBCRUZPUkVfQVBQX1NFUklBTElaRUQ7XG5leHBvcnRzLklOSVRJQUxfQ09ORklHID0gSU5JVElBTF9DT05GSUc7XG5leHBvcnRzLlNlcnZlclRyYW5zZmVyU3RhdGVNb2R1bGUgPSBTZXJ2ZXJUcmFuc2ZlclN0YXRlTW9kdWxlO1xuZXhwb3J0cy5yZW5kZXJNb2R1bGUgPSByZW5kZXJNb2R1bGU7XG5leHBvcnRzLnJlbmRlck1vZHVsZUZhY3RvcnkgPSByZW5kZXJNb2R1bGVGYWN0b3J5O1xuZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcbmV4cG9ydHMuybVJTlRFUk5BTF9TRVJWRVJfUExBVEZPUk1fUFJPVklERVJTID0gSU5URVJOQUxfU0VSVkVSX1BMQVRGT1JNX1BST1ZJREVSUztcbmV4cG9ydHMuybVTRVJWRVJfUkVOREVSX1BST1ZJREVSUyA9IFNFUlZFUl9SRU5ERVJfUFJPVklERVJTO1xuZXhwb3J0cy7JtVNlcnZlclJlbmRlcmVyRmFjdG9yeTIgPSBTZXJ2ZXJSZW5kZXJlckZhY3RvcnkyO1xuZXhwb3J0cy7JtWggPSBTRVJWRVJfSFRUUF9QUk9WSURFUlM7XG5leHBvcnRzLsm1ZCA9IFNlcnZlclhocjtcbmV4cG9ydHMuybVlID0gU2VydmVyWHNyZlN0cmF0ZWd5O1xuZXhwb3J0cy7JtWYgPSBodHRwRmFjdG9yeTtcbmV4cG9ydHMuybVnID0gem9uZVdyYXBwZWRJbnRlcmNlcHRpbmdIYW5kbGVyO1xuZXhwb3J0cy7JtWEgPSBpbnN0YW50aWF0ZVNlcnZlclJlbmRlcmVyRmFjdG9yeTtcbmV4cG9ydHMuybVjID0gU2VydmVyU3R5bGVzSG9zdDtcbmV4cG9ydHMuybViID0gc2VyaWFsaXplVHJhbnNmZXJTdGF0ZUZhY3Rvcnk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF0Zm9ybS1zZXJ2ZXIudW1kLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0Bhbmd1bGFyL3BsYXRmb3JtLXNlcnZlci9idW5kbGVzL3BsYXRmb3JtLXNlcnZlci51bWQuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKEMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbnZhciBSZWZsZWN0O1xyXG4oZnVuY3Rpb24gKFJlZmxlY3QpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbiAgICAvLyBmZWF0dXJlIHRlc3QgZm9yIFN5bWJvbCBzdXBwb3J0XHJcbiAgICB2YXIgc3VwcG9ydHNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICB2YXIgdG9QcmltaXRpdmVTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLnRvUHJpbWl0aXZlIDogXCJAQHRvUHJpbWl0aXZlXCI7XHJcbiAgICB2YXIgaXRlcmF0b3JTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLml0ZXJhdG9yIDogXCJAQGl0ZXJhdG9yXCI7XHJcbiAgICB2YXIgSGFzaE1hcDtcclxuICAgIChmdW5jdGlvbiAoSGFzaE1hcCkge1xyXG4gICAgICAgIHZhciBzdXBwb3J0c0NyZWF0ZSA9IHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCI7IC8vIGZlYXR1cmUgdGVzdCBmb3IgT2JqZWN0LmNyZWF0ZSBzdXBwb3J0XHJcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJvdG8gPSB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5OyAvLyBmZWF0dXJlIHRlc3QgZm9yIF9fcHJvdG9fXyBzdXBwb3J0XHJcbiAgICAgICAgdmFyIGRvd25MZXZlbCA9ICFzdXBwb3J0c0NyZWF0ZSAmJiAhc3VwcG9ydHNQcm90bztcclxuICAgICAgICAvLyBjcmVhdGUgYW4gb2JqZWN0IGluIGRpY3Rpb25hcnkgbW9kZSAoYS5rLmEuIFwic2xvd1wiIG1vZGUgaW4gdjgpXHJcbiAgICAgICAgSGFzaE1hcC5jcmVhdGUgPSBzdXBwb3J0c0NyZWF0ZVxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KE9iamVjdC5jcmVhdGUobnVsbCkpOyB9XHJcbiAgICAgICAgICAgIDogc3VwcG9ydHNQcm90b1xyXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7IF9fcHJvdG9fXzogbnVsbCB9KTsgfVxyXG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7fSk7IH07XHJcbiAgICAgICAgSGFzaE1hcC5oYXMgPSBkb3duTGV2ZWxcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KTsgfVxyXG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4ga2V5IGluIG1hcDsgfTtcclxuICAgICAgICBIYXNoTWFwLmdldCA9IGRvd25MZXZlbFxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpID8gbWFwW2tleV0gOiB1bmRlZmluZWQ7IH1cclxuICAgICAgICAgICAgOiBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIG1hcFtrZXldOyB9O1xyXG4gICAgfSkoSGFzaE1hcCB8fCAoSGFzaE1hcCA9IHt9KSk7XHJcbiAgICAvLyBMb2FkIGdsb2JhbCBvciBzaGltIHZlcnNpb25zIG9mIE1hcCwgU2V0LCBhbmQgV2Vha01hcFxyXG4gICAgdmFyIGZ1bmN0aW9uUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKEZ1bmN0aW9uKTtcclxuICAgIHZhciB1c2VQb2x5ZmlsbCA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52W1wiUkVGTEVDVF9NRVRBREFUQV9VU0VfTUFQX1BPTFlGSUxMXCJdID09PSBcInRydWVcIjtcclxuICAgIHZhciBfTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgTWFwLnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBNYXAgOiBDcmVhdGVNYXBQb2x5ZmlsbCgpO1xyXG4gICAgdmFyIF9TZXQgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIFNldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IFNldCA6IENyZWF0ZVNldFBvbHlmaWxsKCk7XHJcbiAgICB2YXIgX1dlYWtNYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiA/IFdlYWtNYXAgOiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKTtcclxuICAgIC8vIFtbTWV0YWRhdGFdXSBpbnRlcm5hbCBzbG90XHJcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcclxuICAgIHZhciBNZXRhZGF0YSA9IG5ldyBfV2Vha01hcCgpO1xyXG4gICAgLyoqXHJcbiAgICAgICogQXBwbGllcyBhIHNldCBvZiBkZWNvcmF0b3JzIHRvIGEgcHJvcGVydHkgb2YgYSB0YXJnZXQgb2JqZWN0LlxyXG4gICAgICAqIEBwYXJhbSBkZWNvcmF0b3JzIEFuIGFycmF5IG9mIGRlY29yYXRvcnMuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IHRvIGRlY29yYXRlLlxyXG4gICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSB0YXJnZXQga2V5LlxyXG4gICAgICAqIEByZW1hcmtzIERlY29yYXRvcnMgYXJlIGFwcGxpZWQgaW4gcmV2ZXJzZSBvcmRlci5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxyXG4gICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIEV4YW1wbGUgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIsXHJcbiAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcclxuICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpKSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcclxuICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcclxuICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKSkpO1xyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBkZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpIHtcclxuICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QoYXR0cmlidXRlcykgJiYgIUlzVW5kZWZpbmVkKGF0dHJpYnV0ZXMpICYmICFJc051bGwoYXR0cmlidXRlcykpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIGlmIChJc051bGwoYXR0cmlidXRlcykpXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghSXNBcnJheShkZWNvcmF0b3JzKSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKHRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUmVmbGVjdC5kZWNvcmF0ZSA9IGRlY29yYXRlO1xyXG4gICAgLy8gNC4xLjIgUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSlcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI3JlZmxlY3QubWV0YWRhdGFcclxuICAgIC8qKlxyXG4gICAgICAqIEEgZGVmYXVsdCBtZXRhZGF0YSBkZWNvcmF0b3IgZmFjdG9yeSB0aGF0IGNhbiBiZSB1c2VkIG9uIGEgY2xhc3MsIGNsYXNzIG1lbWJlciwgb3IgcGFyYW1ldGVyLlxyXG4gICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBUaGUga2V5IGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXHJcbiAgICAgICogQHJldHVybnMgQSBkZWNvcmF0b3IgZnVuY3Rpb24uXHJcbiAgICAgICogQHJlbWFya3NcclxuICAgICAgKiBJZiBgbWV0YWRhdGFLZXlgIGlzIGFscmVhZHkgZGVmaW5lZCBmb3IgdGhlIHRhcmdldCBhbmQgdGFyZ2V0IGtleSwgdGhlXHJcbiAgICAgICogbWV0YWRhdGFWYWx1ZSBmb3IgdGhhdCBrZXkgd2lsbCBiZSBvdmVyd3JpdHRlbi5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yLCBUeXBlU2NyaXB0IG9ubHkpXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUsIFR5cGVTY3JpcHQgb25seSlcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxyXG4gICAgICAqICAgICAgICAgcHJvcGVydHk7XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgICAgICBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpICYmICFJc1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWNvcmF0b3I7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0Lm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAvKipcclxuICAgICAgKiBEZWZpbmUgYSB1bmlxdWUgbWV0YWRhdGEgZW50cnkgb24gdGhlIHRhcmdldC5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgQSB2YWx1ZSB0aGF0IGNvbnRhaW5zIGF0dGFjaGVkIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdG8gZGVmaW5lIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXHJcbiAgICAgICogQGV4YW1wbGVcclxuICAgICAgKlxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcclxuICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xyXG4gICAgICAqXHJcbiAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGRlY29yYXRvciBmYWN0b3J5IGFzIG1ldGFkYXRhLXByb2R1Y2luZyBhbm5vdGF0aW9uLlxyXG4gICAgICAqICAgICBmdW5jdGlvbiBNeUFubm90YXRpb24ob3B0aW9ucyk6IERlY29yYXRvciB7XHJcbiAgICAgICogICAgICAgICByZXR1cm4gKHRhcmdldCwga2V5PykgPT4gUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIHRhcmdldCwga2V5KTtcclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEgPSBkZWZpbmVNZXRhZGF0YTtcclxuICAgIC8qKlxyXG4gICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbiBoYXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBkZWZpbmVkLlxyXG4gICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cclxuICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXHJcbiAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbjsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0Lmhhc01ldGFkYXRhID0gaGFzTWV0YWRhdGE7XHJcbiAgICAvKipcclxuICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdDsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0Lmhhc093bk1ldGFkYXRhID0gaGFzT3duTWV0YWRhdGE7XHJcbiAgICAvKipcclxuICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluLlxyXG4gICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cclxuICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXHJcbiAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0LmdldE1ldGFkYXRhID0gZ2V0TWV0YWRhdGE7XHJcbiAgICAvKipcclxuICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGtleSBpZiBmb3VuZDsgb3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxyXG4gICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdC5nZXRPd25NZXRhZGF0YSA9IGdldE93bk1ldGFkYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9yZGluYXJ5TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMgPSBnZXRNZXRhZGF0YUtleXM7XHJcbiAgICAvKipcclxuICAgICAgKiBHZXRzIHRoZSB1bmlxdWUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB1bmlxdWUgbWV0YWRhdGEga2V5cy5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxyXG4gICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzID0gZ2V0T3duTWV0YWRhdGFLZXlzO1xyXG4gICAgLyoqXHJcbiAgICAgICogRGVsZXRlcyB0aGUgbWV0YWRhdGEgZW50cnkgZnJvbSB0aGUgdGFyZ2V0IG9iamVjdCB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGVudHJ5IHdhcyBmb3VuZCBhbmQgZGVsZXRlZDsgb3RoZXJ3aXNlLCBmYWxzZS5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxyXG4gICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHByb3BlcnR5S2V5LCAvKkNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFtZXRhZGF0YU1hcC5kZWxldGUobWV0YWRhdGFLZXkpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKG1ldGFkYXRhTWFwLnNpemUgPiAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQodGFyZ2V0KTtcclxuICAgICAgICB0YXJnZXRNZXRhZGF0YS5kZWxldGUocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIGlmICh0YXJnZXRNZXRhZGF0YS5zaXplID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgTWV0YWRhdGEuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhID0gZGVsZXRlTWV0YWRhdGE7XHJcbiAgICBmdW5jdGlvbiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xyXG4gICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghSXNDb25zdHJ1Y3RvcihkZWNvcmF0ZWQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IGRlY29yYXRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XHJcbiAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XHJcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QoZGVjb3JhdGVkKSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZGVjb3JhdGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBDcmVhdGUpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQoTyk7XHJcbiAgICAgICAgaWYgKElzVW5kZWZpbmVkKHRhcmdldE1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICBpZiAoIUNyZWF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhID0gbmV3IF9NYXAoKTtcclxuICAgICAgICAgICAgTWV0YWRhdGEuc2V0KE8sIHRhcmdldE1ldGFkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KFApO1xyXG4gICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpIHtcclxuICAgICAgICAgICAgaWYgKCFDcmVhdGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBtZXRhZGF0YU1hcCA9IG5ldyBfTWFwKCk7XHJcbiAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLnNldChQLCBtZXRhZGF0YU1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtZXRhZGF0YU1hcDtcclxuICAgIH1cclxuICAgIC8vIDMuMS4xLjEgT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzbWV0YWRhdGFcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XHJcbiAgICAgICAgaWYgKGhhc093bilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XHJcbiAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcclxuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjIuMSBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNvd25tZXRhZGF0YVxyXG4gICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBUb0Jvb2xlYW4obWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KSk7XHJcbiAgICB9XHJcbiAgICAvLyAzLjEuMy4xIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXHJcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWdldG1ldGFkYXRhXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XHJcbiAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xyXG4gICAgICAgIGlmIChoYXNPd24pXHJcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcclxuICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcclxuICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxyXG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjQuMSBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxyXG4gICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcclxuICAgIH1cclxuICAgIC8vIDMuMS41LjEgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUClcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5ZGVmaW5lb3dubWV0YWRhdGFcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcclxuICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gdHJ1ZSk7XHJcbiAgICAgICAgbWV0YWRhdGFNYXAuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcclxuICAgIH1cclxuICAgIC8vIDMuMS42LjEgT3JkaW5hcnlNZXRhZGF0YUtleXMoTywgUClcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5bWV0YWRhdGFrZXlzXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKSB7XHJcbiAgICAgICAgdmFyIG93bktleXMgPSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcclxuICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcclxuICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gb3duS2V5cztcclxuICAgICAgICB2YXIgcGFyZW50S2V5cyA9IE9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XHJcbiAgICAgICAgaWYgKHBhcmVudEtleXMubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xyXG4gICAgICAgIGlmIChvd25LZXlzLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50S2V5cztcclxuICAgICAgICB2YXIgc2V0ID0gbmV3IF9TZXQoKTtcclxuICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgb3duS2V5c18xID0gb3duS2V5czsgX2kgPCBvd25LZXlzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBvd25LZXlzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgaGFzS2V5ID0gc2V0LmhhcyhrZXkpO1xyXG4gICAgICAgICAgICBpZiAoIWhhc0tleSkge1xyXG4gICAgICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xyXG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwYXJlbnRLZXlzXzEgPSBwYXJlbnRLZXlzOyBfYSA8IHBhcmVudEtleXNfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHBhcmVudEtleXNfMVtfYV07XHJcbiAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XHJcbiAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ga2V5cztcclxuICAgIH1cclxuICAgIC8vIDMuMS43LjEgT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5b3dubWV0YWRhdGFrZXlzXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xyXG4gICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXHJcbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgICAgIHZhciBrZXlzT2JqID0gbWV0YWRhdGFNYXAua2V5cygpO1xyXG4gICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGtleXNPYmopO1xyXG4gICAgICAgIHZhciBrID0gMDtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XHJcbiAgICAgICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgICAgICAga2V5cy5sZW5ndGggPSBrO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzW2tdID0gbmV4dFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBrKys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gNiBFQ01BU2NyaXB0IERhdGEgVHlwMGVzIGFuZCBWYWx1ZXNcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtZGF0YS10eXBlcy1hbmQtdmFsdWVzXHJcbiAgICBmdW5jdGlvbiBUeXBlKHgpIHtcclxuICAgICAgICBpZiAoeCA9PT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIDEgLyogTnVsbCAqLztcclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB4KSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjogcmV0dXJuIDAgLyogVW5kZWZpbmVkICovO1xyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOiByZXR1cm4gMiAvKiBCb29sZWFuICovO1xyXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHJldHVybiAzIC8qIFN0cmluZyAqLztcclxuICAgICAgICAgICAgY2FzZSBcInN5bWJvbFwiOiByZXR1cm4gNCAvKiBTeW1ib2wgKi87XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIDUgLyogTnVtYmVyICovO1xyXG4gICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHJldHVybiB4ID09PSBudWxsID8gMSAvKiBOdWxsICovIDogNiAvKiBPYmplY3QgKi87XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiA2IC8qIE9iamVjdCAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyA2LjEuMSBUaGUgVW5kZWZpbmVkIFR5cGVcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtdW5kZWZpbmVkLXR5cGVcclxuICAgIGZ1bmN0aW9uIElzVW5kZWZpbmVkKHgpIHtcclxuICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgLy8gNi4xLjIgVGhlIE51bGwgVHlwZVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1udWxsLXR5cGVcclxuICAgIGZ1bmN0aW9uIElzTnVsbCh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHggPT09IG51bGw7XHJcbiAgICB9XHJcbiAgICAvLyA2LjEuNSBUaGUgU3ltYm9sIFR5cGVcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtc3ltYm9sLXR5cGVcclxuICAgIGZ1bmN0aW9uIElzU3ltYm9sKHgpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCI7XHJcbiAgICB9XHJcbiAgICAvLyA2LjEuNyBUaGUgT2JqZWN0IFR5cGVcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC10eXBlXHJcbiAgICBmdW5jdGlvbiBJc09iamVjdCh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiID8geCAhPT0gbnVsbCA6IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICB9XHJcbiAgICAvLyA3LjEgVHlwZSBDb252ZXJzaW9uXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlLWNvbnZlcnNpb25cclxuICAgIC8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcclxuICAgIGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XHJcbiAgICAgICAgc3dpdGNoIChUeXBlKGlucHV0KSkge1xyXG4gICAgICAgICAgICBjYXNlIDAgLyogVW5kZWZpbmVkICovOiByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIGNhc2UgMSAvKiBOdWxsICovOiByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIGNhc2UgMiAvKiBCb29sZWFuICovOiByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiBpbnB1dDtcclxuICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIGlucHV0O1xyXG4gICAgICAgICAgICBjYXNlIDUgLyogTnVtYmVyICovOiByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBoaW50ID0gUHJlZmVycmVkVHlwZSA9PT0gMyAvKiBTdHJpbmcgKi8gPyBcInN0cmluZ1wiIDogUHJlZmVycmVkVHlwZSA9PT0gNSAvKiBOdW1iZXIgKi8gPyBcIm51bWJlclwiIDogXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgdmFyIGV4b3RpY1RvUHJpbSA9IEdldE1ldGhvZChpbnB1dCwgdG9QcmltaXRpdmVTeW1ib2wpO1xyXG4gICAgICAgIGlmIChleG90aWNUb1ByaW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZXhvdGljVG9QcmltLmNhbGwoaW5wdXQsIGhpbnQpO1xyXG4gICAgICAgICAgICBpZiAoSXNPYmplY3QocmVzdWx0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09IFwiZGVmYXVsdFwiID8gXCJudW1iZXJcIiA6IGhpbnQpO1xyXG4gICAgfVxyXG4gICAgLy8gNy4xLjEuMSBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcclxuICAgICAgICBpZiAoaGludCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgdG9TdHJpbmdfMSA9IE8udG9TdHJpbmc7XHJcbiAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHRvU3RyaW5nXzEpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdG9TdHJpbmdfMS5jYWxsKE8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XHJcbiAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZU9mID0gTy52YWx1ZU9mO1xyXG4gICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcclxuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0b1N0cmluZ18yID0gTy50b1N0cmluZztcclxuICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMikpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18yLmNhbGwoTyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICB9XHJcbiAgICAvLyA3LjEuMiBUb0Jvb2xlYW4oYXJndW1lbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLXRvYm9vbGVhblxyXG4gICAgZnVuY3Rpb24gVG9Cb29sZWFuKGFyZ3VtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuICEhYXJndW1lbnQ7XHJcbiAgICB9XHJcbiAgICAvLyA3LjEuMTIgVG9TdHJpbmcoYXJndW1lbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3N0cmluZ1xyXG4gICAgZnVuY3Rpb24gVG9TdHJpbmcoYXJndW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gXCJcIiArIGFyZ3VtZW50O1xyXG4gICAgfVxyXG4gICAgLy8gNy4xLjE0IFRvUHJvcGVydHlLZXkoYXJndW1lbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XHJcbiAgICBmdW5jdGlvbiBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XHJcbiAgICAgICAgdmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAzIC8qIFN0cmluZyAqLyk7XHJcbiAgICAgICAgaWYgKElzU3ltYm9sKGtleSkpXHJcbiAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgcmV0dXJuIFRvU3RyaW5nKGtleSk7XHJcbiAgICB9XHJcbiAgICAvLyA3LjIgVGVzdGluZyBhbmQgQ29tcGFyaXNvbiBPcGVyYXRpb25zXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10ZXN0aW5nLWFuZC1jb21wYXJpc29uLW9wZXJhdGlvbnNcclxuICAgIC8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XHJcbiAgICBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXlcclxuICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KGFyZ3VtZW50KVxyXG4gICAgICAgICAgICA6IGFyZ3VtZW50IGluc3RhbmNlb2YgT2JqZWN0XHJcbiAgICAgICAgICAgICAgICA/IGFyZ3VtZW50IGluc3RhbmNlb2YgQXJyYXlcclxuICAgICAgICAgICAgICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xyXG4gICAgfVxyXG4gICAgLy8gNy4yLjMgSXNDYWxsYWJsZShhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcclxuICAgIGZ1bmN0aW9uIElzQ2FsbGFibGUoYXJndW1lbnQpIHtcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2QuXHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xyXG4gICAgfVxyXG4gICAgLy8gNy4yLjQgSXNDb25zdHJ1Y3Rvcihhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3JcclxuICAgIGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZC5cclxuICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICB9XHJcbiAgICAvLyA3LjIuNyBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNwcm9wZXJ0eWtleVxyXG4gICAgZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoVHlwZShhcmd1bWVudCkpIHtcclxuICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gNy4zIE9wZXJhdGlvbnMgb24gT2JqZWN0c1xyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1vYmplY3RzXHJcbiAgICAvLyA3LjMuOSBHZXRNZXRob2QoViwgUClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gR2V0TWV0aG9kKFYsIFApIHtcclxuICAgICAgICB2YXIgZnVuYyA9IFZbUF07XHJcbiAgICAgICAgaWYgKGZ1bmMgPT09IHVuZGVmaW5lZCB8fCBmdW5jID09PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICghSXNDYWxsYWJsZShmdW5jKSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBmdW5jO1xyXG4gICAgfVxyXG4gICAgLy8gNy40IE9wZXJhdGlvbnMgb24gSXRlcmF0b3IgT2JqZWN0c1xyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1pdGVyYXRvci1vYmplY3RzXHJcbiAgICBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmopIHtcclxuICAgICAgICB2YXIgbWV0aG9kID0gR2V0TWV0aG9kKG9iaiwgaXRlcmF0b3JTeW1ib2wpO1xyXG4gICAgICAgIGlmICghSXNDYWxsYWJsZShtZXRob2QpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IC8vIGZyb20gQ2FsbFxyXG4gICAgICAgIHZhciBpdGVyYXRvciA9IG1ldGhvZC5jYWxsKG9iaik7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdChpdGVyYXRvcikpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XHJcbiAgICB9XHJcbiAgICAvLyA3LjQuNCBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLWl0ZXJhdG9ydmFsdWVcclxuICAgIGZ1bmN0aW9uIEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdCkge1xyXG4gICAgICAgIHJldHVybiBpdGVyUmVzdWx0LnZhbHVlO1xyXG4gICAgfVxyXG4gICAgLy8gNy40LjUgSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JzdGVwXHJcbiAgICBmdW5jdGlvbiBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IGZhbHNlIDogcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yY2xvc2VcclxuICAgIGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpIHtcclxuICAgICAgICB2YXIgZiA9IGl0ZXJhdG9yW1wicmV0dXJuXCJdO1xyXG4gICAgICAgIGlmIChmKVxyXG4gICAgICAgICAgICBmLmNhbGwoaXRlcmF0b3IpO1xyXG4gICAgfVxyXG4gICAgLy8gOS4xIE9yZGluYXJ5IE9iamVjdCBJbnRlcm5hbCBNZXRob2RzIGFuZCBJbnRlcm5hbCBTbG90c1xyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXHJcbiAgICAvLyA5LjEuMS4xIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTylcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5Z2V0cHJvdG90eXBlb2ZcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTykge1xyXG4gICAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKTtcclxuICAgICAgICBpZiAodHlwZW9mIE8gIT09IFwiZnVuY3Rpb25cIiB8fCBPID09PSBmdW5jdGlvblByb3RvdHlwZSlcclxuICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xyXG4gICAgICAgIC8vIFR5cGVTY3JpcHQgZG9lc24ndCBzZXQgX19wcm90b19fIGluIEVTNSwgYXMgaXQncyBub24tc3RhbmRhcmQuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci4gQ29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbnNcclxuICAgICAgICAvLyBtdXN0IGVpdGhlciBzZXQgX19wcm90b19fIG9uIGEgc3ViY2xhc3MgY29uc3RydWN0b3IgdG8gdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IsXHJcbiAgICAgICAgLy8gb3IgZW5zdXJlIGVhY2ggY2xhc3MgaGFzIGEgdmFsaWQgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBvbiBpdHMgcHJvdG90eXBlIHRoYXRcclxuICAgICAgICAvLyBwb2ludHMgYmFjayB0byB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgRnVuY3Rpb24uW1tQcm90b3R5cGVdXSwgdGhlbiB0aGlzIGlzIGRlZmluYXRlbHkgaW5oZXJpdGVkLlxyXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2Ugd2hlbiBpbiBFUzYgb3Igd2hlbiB1c2luZyBfX3Byb3RvX18gaW4gYSBjb21wYXRpYmxlIGJyb3dzZXIuXHJcbiAgICAgICAgaWYgKHByb3RvICE9PSBmdW5jdGlvblByb3RvdHlwZSlcclxuICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xyXG4gICAgICAgIC8vIElmIHRoZSBzdXBlciBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZSwgbnVsbCwgb3IgdW5kZWZpbmVkLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxyXG4gICAgICAgIHZhciBwcm90b3R5cGUgPSBPLnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgcHJvdG90eXBlUHJvdG8gPSBwcm90b3R5cGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSk7XHJcbiAgICAgICAgaWYgKHByb3RvdHlwZVByb3RvID09IG51bGwgfHwgcHJvdG90eXBlUHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUpXHJcbiAgICAgICAgICAgIHJldHVybiBwcm90bztcclxuICAgICAgICAvLyBJZiB0aGUgY29uc3RydWN0b3Igd2FzIG5vdCBhIGZ1bmN0aW9uLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxyXG4gICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb3RvdHlwZVByb3RvLmNvbnN0cnVjdG9yO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmUgc29tZSBraW5kIG9mIHNlbGYtcmVmZXJlbmNlLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxyXG4gICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gTylcclxuICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xyXG4gICAgICAgIC8vIHdlIGhhdmUgYSBwcmV0dHkgZ29vZCBndWVzcyBhdCB0aGUgaGVyaXRhZ2UuXHJcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xyXG4gICAgfVxyXG4gICAgLy8gbmFpdmUgTWFwIHNoaW1cclxuICAgIGZ1bmN0aW9uIENyZWF0ZU1hcFBvbHlmaWxsKCkge1xyXG4gICAgICAgIHZhciBjYWNoZVNlbnRpbmVsID0ge307XHJcbiAgICAgICAgdmFyIGFycmF5U2VudGluZWwgPSBbXTtcclxuICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXBJdGVyYXRvcihrZXlzLCB2YWx1ZXMsIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0ga2V5cztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XHJcbiAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xyXG4gICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2luZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9rZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zZWxlY3Rvcih0aGlzLl9rZXlzW2luZGV4XSwgdGhpcy5fdmFsdWVzW2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICsgMSA+PSB0aGlzLl9rZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHQsIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnJldHVybiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hcEl0ZXJhdG9yO1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1hcCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDsgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpID49IDA7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgPyB0aGlzLl92YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9rZXlzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5kZXggKyAxOyBpIDwgc2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbaSAtIDFdID0gdGhpcy5fa2V5c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2kgLSAxXSA9IHRoaXMuX3ZhbHVlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGgtLTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoLS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5fY2FjaGVLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEtleSk7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0VmFsdWUpOyB9O1xyXG4gICAgICAgICAgICBNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRFbnRyeSk7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuX2ZpbmQgPSBmdW5jdGlvbiAoa2V5LCBpbnNlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUtleSAhPT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMuaW5kZXhPZih0aGlzLl9jYWNoZUtleSA9IGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVJbmRleCA8IDAgJiYgaW5zZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVJbmRleDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hcDtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEtleShrZXksIF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VmFsdWUoXywgdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRFbnRyeShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbmFpdmUgU2V0IHNoaW1cclxuICAgIGZ1bmN0aW9uIENyZWF0ZVNldFBvbHlmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBTZXQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAgPSBuZXcgX01hcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuc2l6ZTsgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5zZXQodmFsdWUsIHZhbHVlKSwgdGhpczsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5kZWxldGUodmFsdWUpOyB9O1xyXG4gICAgICAgICAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9tYXAuY2xlYXIoKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmtleXMoKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAudmFsdWVzKCk7IH07XHJcbiAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5lbnRyaWVzKCk7IH07XHJcbiAgICAgICAgICAgIFNldC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XHJcbiAgICAgICAgICAgIFNldC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XHJcbiAgICAgICAgICAgIHJldHVybiBTZXQ7XHJcbiAgICAgICAgfSgpKTtcclxuICAgIH1cclxuICAgIC8vIG5haXZlIFdlYWtNYXAgc2hpbVxyXG4gICAgZnVuY3Rpb24gQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCkge1xyXG4gICAgICAgIHZhciBVVUlEX1NJWkUgPSAxNjtcclxuICAgICAgICB2YXIga2V5cyA9IEhhc2hNYXAuY3JlYXRlKCk7XHJcbiAgICAgICAgdmFyIHJvb3RLZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcclxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2tleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuaGFzKHRhYmxlLCB0aGlzLl9rZXkpIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuZ2V0KHRhYmxlLCB0aGlzLl9rZXkpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVbdGhpcy5fa2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IGRlbGV0ZSB0YWJsZVt0aGlzLl9rZXldIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gTk9URTogbm90IGEgcmVhbCBjbGVhciwganVzdCBtYWtlcyB0aGUgcHJldmlvdXMgZGF0YSB1bnJlYWNoYWJsZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBXZWFrTWFwO1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVW5pcXVlS2V5KCkge1xyXG4gICAgICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgICAgICBkb1xyXG4gICAgICAgICAgICAgICAga2V5ID0gXCJAQFdlYWtNYXBAQFwiICsgQ3JlYXRlVVVJRCgpO1xyXG4gICAgICAgICAgICB3aGlsZSAoSGFzaE1hcC5oYXMoa2V5cywga2V5KSk7XHJcbiAgICAgICAgICAgIGtleXNba2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgY3JlYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzT3duLmNhbGwodGFyZ2V0LCByb290S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjcmVhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHJvb3RLZXksIHsgdmFsdWU6IEhhc2hNYXAuY3JlYXRlKCkgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtyb290S2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gRmlsbFJhbmRvbUJ5dGVzKGJ1ZmZlciwgc2l6ZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSlcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IE1hdGgucmFuZG9tKCkgKiAweGZmIHwgMDtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gR2VuUmFuZG9tQnl0ZXMoc2l6ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc0NyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBGaWxsUmFuZG9tQnl0ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSksIHNpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBGaWxsUmFuZG9tQnl0ZXMobmV3IEFycmF5KHNpemUpLCBzaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVVVJRCgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBHZW5SYW5kb21CeXRlcyhVVUlEX1NJWkUpO1xyXG4gICAgICAgICAgICAvLyBtYXJrIGFzIHJhbmRvbSAtIFJGQyA0MTIyIMKnIDQuNFxyXG4gICAgICAgICAgICBkYXRhWzZdID0gZGF0YVs2XSAmIDB4NGYgfCAweDQwO1xyXG4gICAgICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSAmIDB4YmYgfCAweDgwO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgVVVJRF9TSVpFOyArK29mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ5dGUgPSBkYXRhW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSA0IHx8IG9mZnNldCA9PT0gNiB8fCBvZmZzZXQgPT09IDgpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiLVwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGUgPCAxNilcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYnl0ZS50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHVzZXMgYSBoZXVyaXN0aWMgdXNlZCBieSB2OCBhbmQgY2hha3JhIHRvIGZvcmNlIGFuIG9iamVjdCBpbnRvIGRpY3Rpb25hcnkgbW9kZS5cclxuICAgIGZ1bmN0aW9uIE1ha2VEaWN0aW9uYXJ5KG9iaikge1xyXG4gICAgICAgIG9iai5fXyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBkZWxldGUgb2JqLl9fO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbiAgICAvLyBwYXRjaCBnbG9iYWwgUmVmbGVjdFxyXG4gICAgKGZ1bmN0aW9uIChfX2dsb2JhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgX19nbG9iYWwuUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBpZiAoX19nbG9iYWwuUmVmbGVjdCAhPT0gUmVmbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBSZWZsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKFJlZmxlY3QsIHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fZ2xvYmFsLlJlZmxlY3RbcF0gPSBSZWZsZWN0W3BdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX19nbG9iYWwuUmVmbGVjdCA9IFJlZmxlY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfSkodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6XHJcbiAgICAgICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDpcclxuICAgICAgICAgICAgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKSk7XHJcbn0pKFJlZmxlY3QgfHwgKFJlZmxlY3QgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWZsZWN0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBmaXJzdF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZmlyc3QnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5maXJzdCA9IGZpcnN0XzEuZmlyc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcnhqcy9hZGQvb3BlcmF0b3IvZmlyc3QuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDQ0KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvYXNwbmV0LXByZXJlbmRlcmluZy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3Jcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDUxKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvem9uZS5qcy9kaXN0L3pvbmUtbm9kZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3Jcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhciB2NS4xLjNcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKSwgcmVxdWlyZSgncnhqcy9vYnNlcnZhYmxlL29mJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvY29uY2F0TWFwJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvZmlsdGVyJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvbWFwJyksIHJlcXVpcmUoJ3RzbGliJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvbW1vbicpLCByZXF1aXJlKCdyeGpzL09ic2VydmFibGUnKSkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJywgWydleHBvcnRzJywgJ0Bhbmd1bGFyL2NvcmUnLCAncnhqcy9vYnNlcnZhYmxlL29mJywgJ3J4anMvb3BlcmF0b3IvY29uY2F0TWFwJywgJ3J4anMvb3BlcmF0b3IvZmlsdGVyJywgJ3J4anMvb3BlcmF0b3IvbWFwJywgJ3RzbGliJywgJ0Bhbmd1bGFyL2NvbW1vbicsICdyeGpzL09ic2VydmFibGUnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLm5nID0gZ2xvYmFsLm5nIHx8IHt9LCBnbG9iYWwubmcuY29tbW9uID0gZ2xvYmFsLm5nLmNvbW1vbiB8fCB7fSwgZ2xvYmFsLm5nLmNvbW1vbi5odHRwID0ge30pLGdsb2JhbC5uZy5jb3JlLGdsb2JhbC5SeC5PYnNlcnZhYmxlLnByb3RvdHlwZSxnbG9iYWwuUnguT2JzZXJ2YWJsZS5wcm90b3R5cGUsZ2xvYmFsLlJ4Lk9ic2VydmFibGUucHJvdG90eXBlLGdsb2JhbC5SeC5PYnNlcnZhYmxlLnByb3RvdHlwZSxnbG9iYWwudHNsaWIsZ2xvYmFsLm5nLmNvbW1vbixnbG9iYWwuUngpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLF9hbmd1bGFyX2NvcmUscnhqc19vYnNlcnZhYmxlX29mLHJ4anNfb3BlcmF0b3JfY29uY2F0TWFwLHJ4anNfb3BlcmF0b3JfZmlsdGVyLHJ4anNfb3BlcmF0b3JfbWFwLHRzbGliLF9hbmd1bGFyX2NvbW1vbixyeGpzX09ic2VydmFibGUpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXIgdjUuMS4zXG4gKiAoYykgMjAxMC0yMDE3IEdvb2dsZSwgSW5jLiBodHRwczovL2FuZ3VsYXIuaW8vXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuIGBIdHRwUmVxdWVzdGAgaW50byBhIHN0cmVhbSBvZiBgSHR0cEV2ZW50YHMsIG9uZSBvZiB3aGljaCB3aWxsIGxpa2VseSBiZSBhXG4gKiBgSHR0cFJlc3BvbnNlYC5cbiAqXG4gKiBgSHR0cEhhbmRsZXJgIGlzIGluamVjdGFibGUuIFdoZW4gaW5qZWN0ZWQsIHRoZSBoYW5kbGVyIGluc3RhbmNlIGRpc3BhdGNoZXMgcmVxdWVzdHMgdG8gdGhlXG4gKiBmaXJzdCBpbnRlcmNlcHRvciBpbiB0aGUgY2hhaW4sIHdoaWNoIGRpc3BhdGNoZXMgdG8gdGhlIHNlY29uZCwgZXRjLCBldmVudHVhbGx5IHJlYWNoaW5nIHRoZVxuICogYEh0dHBCYWNrZW5kYC5cbiAqXG4gKiBJbiBhbiBgSHR0cEludGVyY2VwdG9yYCwgdGhlIGBIdHRwSGFuZGxlcmAgcGFyYW1ldGVyIGlzIHRoZSBuZXh0IGludGVyY2VwdG9yIGluIHRoZSBjaGFpbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgSHR0cEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHR0cEhhbmRsZXIoKSB7XG4gICAgfVxuICAgIHJldHVybiBIdHRwSGFuZGxlcjtcbn0oKSk7XG4vKipcbiAqIEEgZmluYWwgYEh0dHBIYW5kbGVyYCB3aGljaCB3aWxsIGRpc3BhdGNoIHRoZSByZXF1ZXN0IHZpYSBicm93c2VyIEhUVFAgQVBJcyB0byBhIGJhY2tlbmQuXG4gKlxuICogSW50ZXJjZXB0b3JzIHNpdCBiZXR3ZWVuIHRoZSBgSHR0cENsaWVudGAgaW50ZXJmYWNlIGFuZCB0aGUgYEh0dHBCYWNrZW5kYC5cbiAqXG4gKiBXaGVuIGluamVjdGVkLCBgSHR0cEJhY2tlbmRgIGRpc3BhdGNoZXMgcmVxdWVzdHMgZGlyZWN0bHkgdG8gdGhlIGJhY2tlbmQsIHdpdGhvdXQgZ29pbmdcbiAqIHRocm91Z2ggdGhlIGludGVyY2VwdG9yIGNoYWluLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBIdHRwQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQmFja2VuZCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBCYWNrZW5kO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcmVjb3JkXG4gKi9cbi8qKlxuICogSW1tdXRhYmxlIHNldCBvZiBIdHRwIGhlYWRlcnMsIHdpdGggbGF6eSBwYXJzaW5nLlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBIdHRwSGVhZGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBtYXAgb2YgbG93ZXJjYXNlZCBoZWFkZXIgbmFtZXMgdG8gdGhlIG5vcm1hbGl6ZWRcbiAgICAgICAgICogZm9ybSBvZiB0aGUgbmFtZSAodGhlIGZvcm0gc2VlbiBmaXJzdCkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZWROYW1lcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXVlZCB1cGRhdGVzIHRvIGJlIG1hdGVyaWFsaXplZCB0aGUgbmV4dCBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGF6eVVwZGF0ZSA9IG51bGw7XG4gICAgICAgIGlmICghaGVhZGVycykge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBoZWFkZXJzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5sYXp5SW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oZWFkZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIGhlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5kZXggPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmFtZV8xID0gbGluZS5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgPSBuYW1lXzEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlID0gbGluZS5zbGljZShpbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heWJlU2V0Tm9ybWFsaXplZE5hbWUobmFtZV8xLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmhlYWRlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUgez99ICovICgoX3RoaXMuaGVhZGVycy5nZXQoa2V5KSkpLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGVhZGVycy5zZXQoa2V5LCBbdmFsdWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGF6eUluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGVhZGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlcyA9IGhlYWRlcnNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhlYWRlcnMuc2V0KGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heWJlU2V0Tm9ybWFsaXplZE5hbWUobmFtZSwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZm9yIGV4aXN0ZW5jZSBvZiBoZWFkZXIgYnkgZ2l2ZW4gbmFtZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZm9yIGV4aXN0ZW5jZSBvZiBoZWFkZXIgYnkgZ2l2ZW4gbmFtZS5cbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSAvKipcbiAgICAgKiBDaGVja3MgZm9yIGV4aXN0ZW5jZSBvZiBoZWFkZXIgYnkgZ2l2ZW4gbmFtZS5cbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmaXJzdCBoZWFkZXIgdGhhdCBtYXRjaGVzIGdpdmVuIG5hbWUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmaXJzdCBoZWFkZXIgdGhhdCBtYXRjaGVzIGdpdmVuIG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gLyoqXG4gICAgICogUmV0dXJucyBmaXJzdCBoZWFkZXIgdGhhdCBtYXRjaGVzIGdpdmVuIG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWVzID0gdGhpcy5oZWFkZXJzLmdldChuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICByZXR1cm4gdmFsdWVzICYmIHZhbHVlcy5sZW5ndGggPiAwID8gdmFsdWVzWzBdIDogbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5hbWVzIG9mIHRoZSBoZWFkZXJzXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZXMgb2YgdGhlIGhlYWRlcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZXMgb2YgdGhlIGhlYWRlcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubm9ybWFsaXplZE5hbWVzLnZhbHVlcygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgbGlzdCBvZiBoZWFkZXIgdmFsdWVzIGZvciBhIGdpdmVuIG5hbWUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIGhlYWRlciB2YWx1ZXMgZm9yIGEgZ2l2ZW4gbmFtZS5cbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSAvKipcbiAgICAgKiBSZXR1cm5zIGxpc3Qgb2YgaGVhZGVyIHZhbHVlcyBmb3IgYSBnaXZlbiBuYW1lLlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWRlcnMuZ2V0KG5hbWUudG9Mb3dlckNhc2UoKSkgfHwgbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIG9wOiAnYScgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBvcDogJ3MnIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/PX0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5kZWxldGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBvcDogJ2QnIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBsY05hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5tYXliZVNldE5vcm1hbGl6ZWROYW1lID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBsY05hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lLCBsY05hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLm5vcm1hbGl6ZWROYW1lcy5oYXMobGNOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVkTmFtZXMuc2V0KGxjTmFtZSwgbmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cEhlYWRlcnMucHJvdG90eXBlLmluaXQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCEhdGhpcy5sYXp5SW5pdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGF6eUluaXQgaW5zdGFuY2VvZiBIdHRwSGVhZGVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29weUZyb20odGhpcy5sYXp5SW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhenlJbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxhenlJbml0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghIXRoaXMubGF6eVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGF6eVVwZGF0ZS5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIF90aGlzLmFwcGx5VXBkYXRlKHVwZGF0ZSk7IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubGF6eVVwZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gb3RoZXJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBIZWFkZXJzLnByb3RvdHlwZS5jb3B5RnJvbSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gb3RoZXJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBvdGhlci5pbml0KCk7XG4gICAgICAgIEFycmF5LmZyb20ob3RoZXIuaGVhZGVycy5rZXlzKCkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXMuaGVhZGVycy5zZXQoa2V5LCAvKiogQHR5cGUgez99ICovICgob3RoZXIuaGVhZGVycy5nZXQoa2V5KSkpKTtcbiAgICAgICAgICAgIF90aGlzLm5vcm1hbGl6ZWROYW1lcy5zZXQoa2V5LCAvKiogQHR5cGUgez99ICovICgob3RoZXIubm9ybWFsaXplZE5hbWVzLmdldChrZXkpKSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVycy5wcm90b3R5cGUuY2xvbmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHVwZGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbG9uZSA9IG5ldyBIdHRwSGVhZGVycygpO1xuICAgICAgICBjbG9uZS5sYXp5SW5pdCA9XG4gICAgICAgICAgICAoISF0aGlzLmxhenlJbml0ICYmIHRoaXMubGF6eUluaXQgaW5zdGFuY2VvZiBIdHRwSGVhZGVycykgPyB0aGlzLmxhenlJbml0IDogdGhpcztcbiAgICAgICAgY2xvbmUubGF6eVVwZGF0ZSA9ICh0aGlzLmxhenlVcGRhdGUgfHwgW10pLmNvbmNhdChbdXBkYXRlXSk7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVycy5wcm90b3R5cGUuYXBwbHlVcGRhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHVwZGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgPSB1cGRhdGUubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzd2l0Y2ggKHVwZGF0ZS5vcCkge1xuICAgICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IC8qKiBAdHlwZSB7P30gKi8gKCh1cGRhdGUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1heWJlU2V0Tm9ybWFsaXplZE5hbWUodXBkYXRlLm5hbWUsIGtleSk7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmFzZSA9ICh1cGRhdGUub3AgPT09ICdhJyA/IHRoaXMuaGVhZGVycy5nZXQoa2V5KSA6IHVuZGVmaW5lZCkgfHwgW107XG4gICAgICAgICAgICAgICAgYmFzZS5wdXNoLmFwcGx5KGJhc2UsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KGtleSwgYmFzZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b0RlbGV0ZV8xID0gLyoqIEB0eXBlIHs/fSAqLyAodXBkYXRlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRvRGVsZXRlXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZWROYW1lcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGV4aXN0aW5nID0gdGhpcy5oZWFkZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBleGlzdGluZy5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0b0RlbGV0ZV8xLmluZGV4T2YodmFsdWUpID09PSAtMTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplZE5hbWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzLnNldChrZXksIGV4aXN0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICBBcnJheS5mcm9tKHRoaXMubm9ybWFsaXplZE5hbWVzLmtleXMoKSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKC8qKiBAdHlwZSB7P30gKi8gKChfdGhpcy5ub3JtYWxpemVkTmFtZXMuZ2V0KGtleSkpKSwgLyoqIEB0eXBlIHs/fSAqLyAoKF90aGlzLmhlYWRlcnMuZ2V0KGtleSkpKSk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEh0dHBIZWFkZXJzO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIGNvZGVjIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcGFyYW1ldGVycyBpbiBVUkxzLlxuICpcbiAqIFVzZWQgYnkgYEh0dHBQYXJhbXNgLlxuICpcbiAqIFxcQHN0YWJsZVxuICpcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEEgYEh0dHBQYXJhbWV0ZXJDb2RlY2AgdGhhdCB1c2VzIGBlbmNvZGVVUklDb21wb25lbnRgIGFuZCBgZGVjb2RlVVJJQ29tcG9uZW50YCB0b1xuICogc2VyaWFsaXplIGFuZCBwYXJzZSBVUkwgcGFyYW1ldGVyIGtleXMgYW5kIHZhbHVlcy5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEh0dHBVcmxFbmNvZGluZ0NvZGVjID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEh0dHBVcmxFbmNvZGluZ0NvZGVjKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGtcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBVcmxFbmNvZGluZ0NvZGVjLnByb3RvdHlwZS5lbmNvZGVLZXkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGtcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChrKSB7IHJldHVybiBzdGFuZGFyZEVuY29kaW5nKGspOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFVybEVuY29kaW5nQ29kZWMucHJvdG90eXBlLmVuY29kZVZhbHVlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RhbmRhcmRFbmNvZGluZyh2KTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGtcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBVcmxFbmNvZGluZ0NvZGVjLnByb3RvdHlwZS5kZWNvZGVLZXkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGtcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChrKSB7IHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoayk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwVXJsRW5jb2RpbmdDb2RlYy5wcm90b3R5cGUuZGVjb2RlVmFsdWUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2KSB7IHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodik7IH07XG4gICAgcmV0dXJuIEh0dHBVcmxFbmNvZGluZ0NvZGVjO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSByYXdQYXJhbXNcbiAqIEBwYXJhbSB7P30gY29kZWNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHBhcmFtUGFyc2VyKHJhd1BhcmFtcywgY29kZWMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXAkJDEgPSBuZXcgTWFwKCk7XG4gICAgaWYgKHJhd1BhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtcyA9IHJhd1BhcmFtcy5zcGxpdCgnJicpO1xuICAgICAgICBwYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVxSWR4ID0gcGFyYW0uaW5kZXhPZignPScpO1xuICAgICAgICAgICAgdmFyIF9hID0gZXFJZHggPT0gLTEgP1xuICAgICAgICAgICAgICAgIFtjb2RlYy5kZWNvZGVLZXkocGFyYW0pLCAnJ10gOlxuICAgICAgICAgICAgICAgIFtjb2RlYy5kZWNvZGVLZXkocGFyYW0uc2xpY2UoMCwgZXFJZHgpKSwgY29kZWMuZGVjb2RlVmFsdWUocGFyYW0uc2xpY2UoZXFJZHggKyAxKSldLCBrZXkgPSBfYVswXSwgdmFsID0gX2FbMV07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaXN0ID0gbWFwJCQxLmdldChrZXkpIHx8IFtdO1xuICAgICAgICAgICAgbGlzdC5wdXNoKHZhbCk7XG4gICAgICAgICAgICBtYXAkJDEuc2V0KGtleSwgbGlzdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwJCQxO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHN0YW5kYXJkRW5jb2Rpbmcodikge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodilcbiAgICAgICAgLnJlcGxhY2UoLyU0MC9naSwgJ0AnKVxuICAgICAgICAucmVwbGFjZSgvJTNBL2dpLCAnOicpXG4gICAgICAgIC5yZXBsYWNlKC8lMjQvZ2ksICckJylcbiAgICAgICAgLnJlcGxhY2UoLyUyQy9naSwgJywnKVxuICAgICAgICAucmVwbGFjZSgvJTNCL2dpLCAnOycpXG4gICAgICAgIC5yZXBsYWNlKC8lMkIvZ2ksICcrJylcbiAgICAgICAgLnJlcGxhY2UoLyUzRC9naSwgJz0nKVxuICAgICAgICAucmVwbGFjZSgvJTNGL2dpLCAnPycpXG4gICAgICAgIC5yZXBsYWNlKC8lMkYvZ2ksICcvJyk7XG59XG4vKipcbiAqIE9wdGlvbnMgdXNlZCB0byBjb25zdHJ1Y3QgYW4gYEh0dHBQYXJhbXNgIGluc3RhbmNlLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQW4gSFRUUCByZXF1ZXN0L3Jlc3BvbnNlIGJvZHkgdGhhdCByZXByZXNlbnRzIHNlcmlhbGl6ZWQgcGFyYW1ldGVycyxcbiAqIHBlciB0aGUgTUlNRSB0eXBlIGBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRgLlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgaW1tdXRhYmxlIC0gYWxsIG11dGF0aW9uIG9wZXJhdGlvbnMgcmV0dXJuIGEgbmV3IGluc3RhbmNlLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgSHR0cFBhcmFtcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwUGFyYW1zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gLyoqIEB0eXBlIHs/fSAqLyAoe30pOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudXBkYXRlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY2xvbmVGcm9tID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gb3B0aW9ucy5lbmNvZGVyIHx8IG5ldyBIdHRwVXJsRW5jb2RpbmdDb2RlYygpO1xuICAgICAgICBpZiAoISFvcHRpb25zLmZyb21TdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICghIW9wdGlvbnMuZnJvbU9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzcGVjaWZ5IGJvdGggZnJvbVN0cmluZyBhbmQgZnJvbU9iamVjdC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hcCA9IHBhcmFtUGFyc2VyKG9wdGlvbnMuZnJvbVN0cmluZywgdGhpcy5lbmNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghIW9wdGlvbnMuZnJvbU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLmZyb21PYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlID0gKC8qKiBAdHlwZSB7P30gKi8gKG9wdGlvbnMuZnJvbU9iamVjdCkpW2tleV07IC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgICAgICAoKF90aGlzLm1hcCkpLnNldChrZXksIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGJvZHkgaGFzIG9uZSBvciBtb3JlIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGJvZHkgaGFzIG9uZSBvciBtb3JlIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBQYXJhbXMucHJvdG90eXBlLmhhcyA9IC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGJvZHkgaGFzIG9uZSBvciBtb3JlIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLm1hcCkpLmhhcyhwYXJhbSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpcnN0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUsIG9yIGBudWxsYCBpZiBpdCdzIG5vdCBwcmVzZW50LlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmlyc3QgdmFsdWUgZm9yIHRoZSBnaXZlbiBwYXJhbWV0ZXIgbmFtZSwgb3IgYG51bGxgIGlmIGl0J3Mgbm90IHByZXNlbnQuXG4gICAgICogQHBhcmFtIHs/fSBwYXJhbVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFBhcmFtcy5wcm90b3R5cGUuZ2V0ID0gLyoqXG4gICAgICogR2V0IHRoZSBmaXJzdCB2YWx1ZSBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLCBvciBgbnVsbGAgaWYgaXQncyBub3QgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gez99IHBhcmFtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcyA9IC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLm1hcCkpLmdldChwYXJhbSk7XG4gICAgICAgIHJldHVybiAhIXJlcyA/IHJlc1swXSA6IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLCBvciBgbnVsbGAgaWYgaXQncyBub3QgcHJlc2VudC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLCBvciBgbnVsbGAgaWYgaXQncyBub3QgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gez99IHBhcmFtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwUGFyYW1zLnByb3RvdHlwZS5nZXRBbGwgPSAvKipcbiAgICAgKiBHZXQgYWxsIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLCBvciBgbnVsbGAgaWYgaXQncyBub3QgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gez99IHBhcmFtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICgodGhpcy5tYXApKS5nZXQocGFyYW0pIHx8IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBwYXJhbWV0ZXIgbmFtZXMgZm9yIHRoaXMgYm9keS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBwYXJhbWV0ZXIgbmFtZXMgZm9yIHRoaXMgYm9keS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBQYXJhbXMucHJvdG90eXBlLmtleXMgPSAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBwYXJhbWV0ZXIgbmFtZXMgZm9yIHRoaXMgYm9keS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLm1hcCkpLmtleXMoKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9keSB3aXRoIGFuIGFwcGVuZGVkIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgbmV3IGJvZHkgd2l0aCBhbiBhcHBlbmRlZCB2YWx1ZSBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwUGFyYW1zLnByb3RvdHlwZS5hcHBlbmQgPSAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9keSB3aXRoIGFuIGFwcGVuZGVkIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSBwYXJhbVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwYXJhbSwgdmFsdWUpIHsgcmV0dXJuIHRoaXMuY2xvbmUoeyBwYXJhbTogcGFyYW0sIHZhbHVlOiB2YWx1ZSwgb3A6ICdhJyB9KTsgfTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9keSB3aXRoIGEgbmV3IHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgbmV3IGJvZHkgd2l0aCBhIG5ldyB2YWx1ZSBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwUGFyYW1zLnByb3RvdHlwZS5zZXQgPSAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9keSB3aXRoIGEgbmV3IHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSBwYXJhbVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwYXJhbSwgdmFsdWUpIHsgcmV0dXJuIHRoaXMuY2xvbmUoeyBwYXJhbTogcGFyYW0sIHZhbHVlOiB2YWx1ZSwgb3A6ICdzJyB9KTsgfTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYm9keSB3aXRoIGVpdGhlciB0aGUgZ2l2ZW4gdmFsdWUgZm9yIHRoZSBnaXZlbiBwYXJhbWV0ZXJcbiAgICAgKiByZW1vdmVkLCBpZiBhIHZhbHVlIGlzIGdpdmVuLCBvciBhbGwgdmFsdWVzIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIHJlbW92ZWRcbiAgICAgKiBpZiBub3QuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgbmV3IGJvZHkgd2l0aCBlaXRoZXIgdGhlIGdpdmVuIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyXG4gICAgICogcmVtb3ZlZCwgaWYgYSB2YWx1ZSBpcyBnaXZlbiwgb3IgYWxsIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciByZW1vdmVkXG4gICAgICogaWYgbm90LlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcGFyYW0gez89fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFBhcmFtcy5wcm90b3R5cGUuZGVsZXRlID0gLyoqXG4gICAgICogQ29uc3RydWN0IGEgbmV3IGJvZHkgd2l0aCBlaXRoZXIgdGhlIGdpdmVuIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyXG4gICAgICogcmVtb3ZlZCwgaWYgYSB2YWx1ZSBpcyBnaXZlbiwgb3IgYWxsIHZhbHVlcyBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlciByZW1vdmVkXG4gICAgICogaWYgbm90LlxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1cbiAgICAgKiBAcGFyYW0gez89fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmFtLCB2YWx1ZSkgeyByZXR1cm4gdGhpcy5jbG9uZSh7IHBhcmFtOiBwYXJhbSwgdmFsdWU6IHZhbHVlLCBvcDogJ2QnIH0pOyB9O1xuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB0aGUgYm9keSB0byBhbiBlbmNvZGVkIHN0cmluZywgd2hlcmUga2V5LXZhbHVlIHBhaXJzIChzZXBhcmF0ZWQgYnkgYD1gKSBhcmVcbiAgICAgKiBzZXBhcmF0ZWQgYnkgYCZgcy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIGJvZHkgdG8gYW4gZW5jb2RlZCBzdHJpbmcsIHdoZXJlIGtleS12YWx1ZSBwYWlycyAoc2VwYXJhdGVkIGJ5IGA9YCkgYXJlXG4gICAgICogc2VwYXJhdGVkIGJ5IGAmYHMuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZyA9IC8qKlxuICAgICAqIFNlcmlhbGl6ZSB0aGUgYm9keSB0byBhbiBlbmNvZGVkIHN0cmluZywgd2hlcmUga2V5LXZhbHVlIHBhaXJzIChzZXBhcmF0ZWQgYnkgYD1gKSBhcmVcbiAgICAgKiBzZXBhcmF0ZWQgYnkgYCZgcy5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXMoKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlS2V5ID0gX3RoaXMuZW5jb2Rlci5lbmNvZGVLZXkoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKF90aGlzLm1hcCkpLmdldChrZXkpKSkubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZUtleSArICc9JyArIF90aGlzLmVuY29kZXIuZW5jb2RlVmFsdWUodmFsdWUpOyB9KS5qb2luKCcmJyk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignJicpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB1cGRhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBQYXJhbXMucHJvdG90eXBlLmNsb25lID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB1cGRhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2xvbmUgPSBuZXcgSHR0cFBhcmFtcygvKiogQHR5cGUgez99ICovICh7IGVuY29kZXI6IHRoaXMuZW5jb2RlciB9KSk7XG4gICAgICAgIGNsb25lLmNsb25lRnJvbSA9IHRoaXMuY2xvbmVGcm9tIHx8IHRoaXM7XG4gICAgICAgIGNsb25lLnVwZGF0ZXMgPSAodGhpcy51cGRhdGVzIHx8IFtdKS5jb25jYXQoW3VwZGF0ZV0pO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBQYXJhbXMucHJvdG90eXBlLmluaXQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMubWFwID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jbG9uZUZyb20gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvbmVGcm9tLmluaXQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvbmVGcm9tLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICgoX3RoaXMubWFwKSkuc2V0KGtleSwgLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgoX3RoaXMuY2xvbmVGcm9tKSkubWFwKSkuZ2V0KGtleSkpKSk7IH0pOyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICAgICAoKHRoaXMudXBkYXRlcykpLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodXBkYXRlLm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGJhc2UgPSAodXBkYXRlLm9wID09PSAnYScgPyAvKiogQHR5cGUgez99ICovICgoX3RoaXMubWFwKSkuZ2V0KHVwZGF0ZS5wYXJhbSkgOiB1bmRlZmluZWQpIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZS5wdXNoKC8qKiBAdHlwZSB7P30gKi8gKCh1cGRhdGUudmFsdWUpKSk7IC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICgoX3RoaXMubWFwKSkuc2V0KHVwZGF0ZS5wYXJhbSwgYmFzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBiYXNlXzEgPSAvKiogQHR5cGUgez99ICovICgoX3RoaXMubWFwKSkuZ2V0KHVwZGF0ZS5wYXJhbSkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaWR4ID0gYmFzZV8xLmluZGV4T2YodXBkYXRlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlXzEuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYXNlXzEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUgez99ICovICgoX3RoaXMubWFwKSkuc2V0KHVwZGF0ZS5wYXJhbSwgYmFzZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKChfdGhpcy5tYXApKS5kZWxldGUodXBkYXRlLnBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUgez99ICovICgoX3RoaXMubWFwKSkuZGVsZXRlKHVwZGF0ZS5wYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNsb25lRnJvbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBIdHRwUGFyYW1zO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gSFRUUCBtZXRob2QgbWF5IGluY2x1ZGUgYSBib2R5LlxuICogQHBhcmFtIHs/fSBtZXRob2RcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG1pZ2h0SGF2ZUJvZHkobWV0aG9kKSB7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgY2FzZSAnREVMRVRFJzpcbiAgICAgICAgY2FzZSAnR0VUJzpcbiAgICAgICAgY2FzZSAnSEVBRCc6XG4gICAgICAgIGNhc2UgJ09QVElPTlMnOlxuICAgICAgICBjYXNlICdKU09OUCc6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4vKipcbiAqIFNhZmVseSBhc3NlcnQgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIuXG4gKlxuICogSW4gc29tZSBleGVjdXRpb24gZW52aXJvbm1lbnRzIEFycmF5QnVmZmVyIGlzIG5vdCBkZWZpbmVkLlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59XG4vKipcbiAqIFNhZmVseSBhc3NlcnQgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBCbG9iLlxuICpcbiAqIEluIHNvbWUgZXhlY3V0aW9uIGVudmlyb25tZW50cyBCbG9iIGlzIG5vdCBkZWZpbmVkLlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJsb2I7XG59XG4vKipcbiAqIFNhZmVseSBhc3NlcnQgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBGb3JtRGF0YSBpbnN0YW5jZS5cbiAqXG4gKiBJbiBzb21lIGV4ZWN1dGlvbiBlbnZpcm9ubWVudHMgRm9ybURhdGEgaXMgbm90IGRlZmluZWQuXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBGb3JtRGF0YTtcbn1cbi8qKlxuICogQW4gb3V0Z29pbmcgSFRUUCByZXF1ZXN0IHdpdGggYW4gb3B0aW9uYWwgdHlwZWQgYm9keS5cbiAqXG4gKiBgSHR0cFJlcXVlc3RgIHJlcHJlc2VudHMgYW4gb3V0Z29pbmcgcmVxdWVzdCwgaW5jbHVkaW5nIFVSTCwgbWV0aG9kLFxuICogaGVhZGVycywgYm9keSwgYW5kIG90aGVyIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvcHRpb25zLiBJbnN0YW5jZXMgc2hvdWxkIGJlXG4gKiBhc3N1bWVkIHRvIGJlIGltbXV0YWJsZS4gVG8gbW9kaWZ5IGEgYEh0dHBSZXF1ZXN0YCwgdGhlIGBjbG9uZWBcbiAqIG1ldGhvZCBzaG91bGQgYmUgdXNlZC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEh0dHBSZXF1ZXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEh0dHBSZXF1ZXN0KG1ldGhvZCwgdXJsLCB0aGlyZCwgZm91cnRoKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlcXVlc3QgYm9keSwgb3IgYG51bGxgIGlmIG9uZSBpc24ndCBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJvZGllcyBhcmUgbm90IGVuZm9yY2VkIHRvIGJlIGltbXV0YWJsZSwgYXMgdGhleSBjYW4gaW5jbHVkZSBhIHJlZmVyZW5jZSB0byBhbnlcbiAgICAgICAgICogdXNlci1kZWZpbmVkIGRhdGEgdHlwZS4gSG93ZXZlciwgaW50ZXJjZXB0b3JzIHNob3VsZCB0YWtlIGNhcmUgdG8gcHJlc2VydmVcbiAgICAgICAgICogaWRlbXBvdGVuY2UgYnkgdHJlYXRpbmcgdGhlbSBhcyBzdWNoLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ib2R5ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyByZXF1ZXN0IHNob3VsZCBiZSBtYWRlIGluIGEgd2F5IHRoYXQgZXhwb3NlcyBwcm9ncmVzcyBldmVudHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFByb2dyZXNzIGV2ZW50cyBhcmUgZXhwZW5zaXZlIChjaGFuZ2UgZGV0ZWN0aW9uIHJ1bnMgb24gZWFjaCBldmVudCkgYW5kIHNvXG4gICAgICAgICAqIHRoZXkgc2hvdWxkIG9ubHkgYmUgcmVxdWVzdGVkIGlmIHRoZSBjb25zdW1lciBpbnRlbmRzIHRvIG1vbml0b3IgdGhlbS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVwb3J0UHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyByZXF1ZXN0IHNob3VsZCBiZSBzZW50IHdpdGggb3V0Z29pbmcgY3JlZGVudGlhbHMgKGNvb2tpZXMpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBleHBlY3RlZCByZXNwb25zZSB0eXBlIG9mIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB0byBwYXJzZSB0aGUgcmVzcG9uc2UgYXBwcm9wcmlhdGVseSBiZWZvcmUgcmV0dXJuaW5nIGl0IHRvXG4gICAgICAgICAqIHRoZSByZXF1ZXN0ZWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICAgICAgLy8gTmV4dCwgbmVlZCB0byBmaWd1cmUgb3V0IHdoaWNoIGFyZ3VtZW50IGhvbGRzIHRoZSBIdHRwUmVxdWVzdEluaXRcbiAgICAgICAgLy8gb3B0aW9ucywgaWYgYW55LlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvcHRpb25zO1xuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGEgYm9keSBhcmd1bWVudCBpcyBleHBlY3RlZC4gVGhlIG9ubHkgdmFsaWQgd2F5IHRvIG9taXRcbiAgICAgICAgLy8gdGhlIGJvZHkgYXJndW1lbnQgaXMgdG8gdXNlIGEga25vd24gbm8tYm9keSBtZXRob2QgbGlrZSBHRVQuXG4gICAgICAgIGlmIChtaWdodEhhdmVCb2R5KHRoaXMubWV0aG9kKSB8fCAhIWZvdXJ0aCkge1xuICAgICAgICAgICAgLy8gQm9keSBpcyB0aGUgdGhpcmQgYXJndW1lbnQsIG9wdGlvbnMgYXJlIHRoZSBmb3VydGguXG4gICAgICAgICAgICB0aGlzLmJvZHkgPSAodGhpcmQgIT09IHVuZGVmaW5lZCkgPyAvKiogQHR5cGUgez99ICovICh0aGlyZCkgOiBudWxsO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGZvdXJ0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vIGJvZHkgcmVxdWlyZWQsIG9wdGlvbnMgYXJlIHRoZSB0aGlyZCBhcmd1bWVudC4gVGhlIGJvZHkgc3RheXMgbnVsbC5cbiAgICAgICAgICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgez99ICovICh0aGlyZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgb3B0aW9ucyBoYXZlIGJlZW4gcGFzc2VkLCBpbnRlcnByZXQgdGhlbS5cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSByZXBvcnRQcm9ncmVzcyBhbmQgd2l0aENyZWRlbnRpYWxzLlxuICAgICAgICAgICAgdGhpcy5yZXBvcnRQcm9ncmVzcyA9ICEhb3B0aW9ucy5yZXBvcnRQcm9ncmVzcztcbiAgICAgICAgICAgIHRoaXMud2l0aENyZWRlbnRpYWxzID0gISFvcHRpb25zLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgcmVzcG9uc2UgdHlwZSBvZiAnanNvbicgaWYgb25lIGlzIHByb3ZpZGVkLlxuICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy5yZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3ZlcnJpZGUgaGVhZGVycyBpZiB0aGV5J3JlIHByb3ZpZGVkLlxuICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcyA9IG9wdGlvbnMucGFyYW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vIGhlYWRlcnMgaGF2ZSBiZWVuIHBhc3NlZCBpbiwgY29uc3RydWN0IGEgbmV3IEh0dHBIZWFkZXJzIGluc3RhbmNlLlxuICAgICAgICBpZiAoIXRoaXMuaGVhZGVycykge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbm8gcGFyYW1ldGVycyBoYXZlIGJlZW4gcGFzc2VkIGluLCBjb25zdHJ1Y3QgYSBuZXcgSHR0cFVybEVuY29kZWRQYXJhbXMgaW5zdGFuY2UuXG4gICAgICAgIGlmICghdGhpcy5wYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICAgICAgICAgIHRoaXMudXJsV2l0aFBhcmFtcyA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVuY29kZSB0aGUgcGFyYW1ldGVycyB0byBhIHN0cmluZyBpbiBwcmVwYXJhdGlvbiBmb3IgaW5jbHVzaW9uIGluIHRoZSBVUkwuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXMgPSB0aGlzLnBhcmFtcy50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBwYXJhbWV0ZXJzLCB0aGUgdmlzaWJsZSBVUkwgaXMganVzdCB0aGUgVVJMIGdpdmVuIGF0IGNyZWF0aW9uIHRpbWUuXG4gICAgICAgICAgICAgICAgdGhpcy51cmxXaXRoUGFyYW1zID0gdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRG9lcyB0aGUgVVJMIGFscmVhZHkgaGF2ZSBxdWVyeSBwYXJhbWV0ZXJzPyBMb29rIGZvciAnPycuXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcUlkeCA9IHVybC5pbmRleE9mKCc/Jyk7XG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIDMgY2FzZXMgdG8gaGFuZGxlOlxuICAgICAgICAgICAgICAgIC8vIDEpIE5vIGV4aXN0aW5nIHBhcmFtZXRlcnMgLT4gYXBwZW5kICc/JyBmb2xsb3dlZCBieSBwYXJhbXMuXG4gICAgICAgICAgICAgICAgLy8gMikgJz8nIGV4aXN0cyBhbmQgaXMgZm9sbG93ZWQgYnkgZXhpc3RpbmcgcXVlcnkgc3RyaW5nIC0+XG4gICAgICAgICAgICAgICAgLy8gICAgYXBwZW5kICcmJyBmb2xsb3dlZCBieSBwYXJhbXMuXG4gICAgICAgICAgICAgICAgLy8gMykgJz8nIGV4aXN0cyBhdCB0aGUgZW5kIG9mIHRoZSB1cmwgLT4gYXBwZW5kIHBhcmFtcyBkaXJlY3RseS5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGJhc2ljYWxseSBhbW91bnRzIHRvIGRldGVybWluaW5nIHRoZSBjaGFyYWN0ZXIsIGlmIGFueSwgd2l0aFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHRvIGpvaW4gdGhlIFVSTCBhbmQgcGFyYW1ldGVycy5cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzZXAgPSBxSWR4ID09PSAtMSA/ICc/JyA6IChxSWR4IDwgdXJsLmxlbmd0aCAtIDEgPyAnJicgOiAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51cmxXaXRoUGFyYW1zID0gdXJsICsgc2VwICsgcGFyYW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSB0aGUgZnJlZS1mb3JtIGJvZHkgaW50byBhIHNlcmlhbGl6ZWQgZm9ybWF0IHN1aXRhYmxlIGZvclxuICAgICAqIHRyYW5zbWlzc2lvbiB0byB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSB0aGUgZnJlZS1mb3JtIGJvZHkgaW50byBhIHNlcmlhbGl6ZWQgZm9ybWF0IHN1aXRhYmxlIGZvclxuICAgICAqIHRyYW5zbWlzc2lvbiB0byB0aGUgc2VydmVyLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJvZHkgPSAvKipcbiAgICAgKiBUcmFuc2Zvcm0gdGhlIGZyZWUtZm9ybSBib2R5IGludG8gYSBzZXJpYWxpemVkIGZvcm1hdCBzdWl0YWJsZSBmb3JcbiAgICAgKiB0cmFuc21pc3Npb24gdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgbm8gYm9keSBpcyBwcmVzZW50LCBubyBuZWVkIHRvIHNlcmlhbGl6ZSBpdC5cbiAgICAgICAgaWYgKHRoaXMuYm9keSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgYm9keSBpcyBhbHJlYWR5IGluIGEgc2VyaWFsaXplZCBmb3JtLiBJZiBzbyxcbiAgICAgICAgLy8gaXQgY2FuIGp1c3QgYmUgcmV0dXJuZWQgZGlyZWN0bHkuXG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKHRoaXMuYm9keSkgfHwgaXNCbG9iKHRoaXMuYm9keSkgfHwgaXNGb3JtRGF0YSh0aGlzLmJvZHkpIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5ib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9keTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBib2R5IGlzIGFuIGluc3RhbmNlIG9mIEh0dHBVcmxFbmNvZGVkUGFyYW1zLlxuICAgICAgICBpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgSHR0cFBhcmFtcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9keS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGJvZHkgaXMgYW4gb2JqZWN0IG9yIGFycmF5LCBhbmQgc2VyaWFsaXplIHdpdGggSlNPTiBpZiBzby5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJvZHkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB0aGlzLmJvZHkgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLmJvZHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYWxsIGJhY2sgb24gdG9TdHJpbmcoKSBmb3IgZXZlcnl0aGluZyBlbHNlLlxuICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMuYm9keSkpLnRvU3RyaW5nKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFeGFtaW5lIHRoZSBib2R5IGFuZCBhdHRlbXB0IHRvIGluZmVyIGFuIGFwcHJvcHJpYXRlIE1JTUUgdHlwZVxuICAgICAqIGZvciBpdC5cbiAgICAgKlxuICAgICAqIElmIG5vIHN1Y2ggdHlwZSBjYW4gYmUgaW5mZXJyZWQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGBudWxsYC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBFeGFtaW5lIHRoZSBib2R5IGFuZCBhdHRlbXB0IHRvIGluZmVyIGFuIGFwcHJvcHJpYXRlIE1JTUUgdHlwZVxuICAgICAqIGZvciBpdC5cbiAgICAgKlxuICAgICAqIElmIG5vIHN1Y2ggdHlwZSBjYW4gYmUgaW5mZXJyZWQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGBudWxsYC5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5kZXRlY3RDb250ZW50VHlwZUhlYWRlciA9IC8qKlxuICAgICAqIEV4YW1pbmUgdGhlIGJvZHkgYW5kIGF0dGVtcHQgdG8gaW5mZXIgYW4gYXBwcm9wcmlhdGUgTUlNRSB0eXBlXG4gICAgICogZm9yIGl0LlxuICAgICAqXG4gICAgICogSWYgbm8gc3VjaCB0eXBlIGNhbiBiZSBpbmZlcnJlZCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYG51bGxgLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBBbiBlbXB0eSBib2R5IGhhcyBubyBjb250ZW50IHR5cGUuXG4gICAgICAgIGlmICh0aGlzLmJvZHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvcm1EYXRhIGJvZGllcyByZWx5IG9uIHRoZSBicm93c2VyJ3MgY29udGVudCB0eXBlIGFzc2lnbm1lbnQuXG4gICAgICAgIGlmIChpc0Zvcm1EYXRhKHRoaXMuYm9keSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJsb2JzIHVzdWFsbHkgaGF2ZSB0aGVpciBvd24gY29udGVudCB0eXBlLiBJZiBpdCBkb2Vzbid0LCB0aGVuXG4gICAgICAgIC8vIG5vIHR5cGUgY2FuIGJlIGluZmVycmVkLlxuICAgICAgICBpZiAoaXNCbG9iKHRoaXMuYm9keSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvZHkudHlwZSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFycmF5IGJ1ZmZlcnMgaGF2ZSB1bmtub3duIGNvbnRlbnRzIGFuZCB0aHVzIG5vIHR5cGUgY2FuIGJlIGluZmVycmVkLlxuICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcih0aGlzLmJvZHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUZWNobmljYWxseSwgc3RyaW5ncyBjb3VsZCBiZSBhIGZvcm0gb2YgSlNPTiBkYXRhLCBidXQgaXQncyBzYWZlIGVub3VnaFxuICAgICAgICAvLyB0byBhc3N1bWUgdGhleSdyZSBwbGFpbiBzdHJpbmdzLlxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiAndGV4dC9wbGFpbic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYEh0dHBVcmxFbmNvZGVkUGFyYW1zYCBoYXMgaXRzIG93biBjb250ZW50LXR5cGUuXG4gICAgICAgIGlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBIdHRwUGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JztcbiAgICAgICAgfVxuICAgICAgICAvLyBBcnJheXMsIG9iamVjdHMsIGFuZCBudW1iZXJzIHdpbGwgYmUgZW5jb2RlZCBhcyBKU09OLlxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHRoaXMuYm9keSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5ib2R5KSkge1xuICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgfVxuICAgICAgICAvLyBObyB0eXBlIGNvdWxkIGJlIGluZmVycmVkLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IHVwZGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gLyoqXG4gICAgICogQHBhcmFtIHs/PX0gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIGlmICh1cGRhdGUgPT09IHZvaWQgMCkgeyB1cGRhdGUgPSB7fTsgfVxuICAgICAgICAvLyBGb3IgbWV0aG9kLCB1cmwsIGFuZCByZXNwb25zZVR5cGUsIHRha2UgdGhlIGN1cnJlbnQgdmFsdWUgdW5sZXNzXG4gICAgICAgIC8vIGl0IGlzIG92ZXJyaWRkZW4gaW4gdGhlIHVwZGF0ZSBoYXNoLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtZXRob2QgPSB1cGRhdGUubWV0aG9kIHx8IHRoaXMubWV0aG9kO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB1cmwgPSB1cGRhdGUudXJsIHx8IHRoaXMudXJsO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXNwb25zZVR5cGUgPSB1cGRhdGUucmVzcG9uc2VUeXBlIHx8IHRoaXMucmVzcG9uc2VUeXBlO1xuICAgICAgICAvLyBUaGUgYm9keSBpcyBzb21ld2hhdCBzcGVjaWFsIC0gYSBgbnVsbGAgdmFsdWUgaW4gdXBkYXRlLmJvZHkgbWVhbnNcbiAgICAgICAgLy8gd2hhdGV2ZXIgY3VycmVudCBib2R5IGlzIHByZXNlbnQgaXMgYmVpbmcgb3ZlcnJpZGRlbiB3aXRoIGFuIGVtcHR5XG4gICAgICAgIC8vIGJvZHksIHdoZXJlYXMgYW4gYHVuZGVmaW5lZGAgdmFsdWUgaW4gdXBkYXRlLmJvZHkgaW1wbGllcyBub1xuICAgICAgICAvLyBvdmVycmlkZS5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYm9keSA9ICh1cGRhdGUuYm9keSAhPT0gdW5kZWZpbmVkKSA/IHVwZGF0ZS5ib2R5IDogdGhpcy5ib2R5O1xuICAgICAgICAvLyBDYXJlZnVsbHkgaGFuZGxlIHRoZSBib29sZWFuIG9wdGlvbnMgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuXG4gICAgICAgIC8vIGBmYWxzZWAgYW5kIGB1bmRlZmluZWRgIGluIHRoZSB1cGRhdGUgYXJncy5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gd2l0aENyZWRlbnRpYWxzID0gKHVwZGF0ZS53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCkgPyB1cGRhdGUud2l0aENyZWRlbnRpYWxzIDogdGhpcy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcG9ydFByb2dyZXNzID0gKHVwZGF0ZS5yZXBvcnRQcm9ncmVzcyAhPT0gdW5kZWZpbmVkKSA/IHVwZGF0ZS5yZXBvcnRQcm9ncmVzcyA6IHRoaXMucmVwb3J0UHJvZ3Jlc3M7XG4gICAgICAgIC8vIEhlYWRlcnMgYW5kIHBhcmFtcyBtYXkgYmUgYXBwZW5kZWQgdG8gaWYgYHNldEhlYWRlcnNgIG9yXG4gICAgICAgIC8vIGBzZXRQYXJhbXNgIGFyZSB1c2VkLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBoZWFkZXJzID0gdXBkYXRlLmhlYWRlcnMgfHwgdGhpcy5oZWFkZXJzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXMgPSB1cGRhdGUucGFyYW1zIHx8IHRoaXMucGFyYW1zO1xuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBjYWxsZXIgaGFzIGFza2VkIHRvIGFkZCBoZWFkZXJzLlxuICAgICAgICBpZiAodXBkYXRlLnNldEhlYWRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gU2V0IGV2ZXJ5IHJlcXVlc3RlZCBoZWFkZXIuXG4gICAgICAgICAgICBoZWFkZXJzID1cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh1cGRhdGUuc2V0SGVhZGVycylcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoaGVhZGVycywgbmFtZSkgeyByZXR1cm4gaGVhZGVycy5zZXQobmFtZSwgLyoqIEB0eXBlIHs/fSAqLyAoKHVwZGF0ZS5zZXRIZWFkZXJzKSlbbmFtZV0pOyB9LCBoZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBjYWxsZXIgaGFzIGFza2VkIHRvIHNldCBwYXJhbXMuXG4gICAgICAgIGlmICh1cGRhdGUuc2V0UGFyYW1zKSB7XG4gICAgICAgICAgICAvLyBTZXQgZXZlcnkgcmVxdWVzdGVkIHBhcmFtLlxuICAgICAgICAgICAgcGFyYW1zID0gT2JqZWN0LmtleXModXBkYXRlLnNldFBhcmFtcylcbiAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChwYXJhbXMsIHBhcmFtKSB7IHJldHVybiBwYXJhbXMuc2V0KHBhcmFtLCAvKiogQHR5cGUgez99ICovICgodXBkYXRlLnNldFBhcmFtcykpW3BhcmFtXSk7IH0sIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluYWxseSwgY29uc3RydWN0IHRoZSBuZXcgSHR0cFJlcXVlc3QgdXNpbmcgdGhlIHBpZWNlcyBmcm9tIGFib3ZlLlxuICAgICAgICByZXR1cm4gbmV3IEh0dHBSZXF1ZXN0KG1ldGhvZCwgdXJsLCBib2R5LCB7XG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcywgaGVhZGVyczogaGVhZGVycywgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzLCByZXNwb25zZVR5cGU6IHJlc3BvbnNlVHlwZSwgd2l0aENyZWRlbnRpYWxzOiB3aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEh0dHBSZXF1ZXN0O1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG52YXIgSHR0cEV2ZW50VHlwZSA9IHtcbiAgICAvKipcbiAgICAgICAqIFRoZSByZXF1ZXN0IHdhcyBzZW50IG91dCBvdmVyIHRoZSB3aXJlLlxuICAgICAgICovXG4gICAgU2VudDogMCxcbiAgICAvKipcbiAgICAgICAqIEFuIHVwbG9hZCBwcm9ncmVzcyBldmVudCB3YXMgcmVjZWl2ZWQuXG4gICAgICAgKi9cbiAgICBVcGxvYWRQcm9ncmVzczogMSxcbiAgICAvKipcbiAgICAgICAqIFRoZSByZXNwb25zZSBzdGF0dXMgY29kZSBhbmQgaGVhZGVycyB3ZXJlIHJlY2VpdmVkLlxuICAgICAgICovXG4gICAgUmVzcG9uc2VIZWFkZXI6IDIsXG4gICAgLyoqXG4gICAgICAgKiBBIGRvd25sb2FkIHByb2dyZXNzIGV2ZW50IHdhcyByZWNlaXZlZC5cbiAgICAgICAqL1xuICAgIERvd25sb2FkUHJvZ3Jlc3M6IDMsXG4gICAgLyoqXG4gICAgICAgKiBUaGUgZnVsbCByZXNwb25zZSBpbmNsdWRpbmcgdGhlIGJvZHkgd2FzIHJlY2VpdmVkLlxuICAgICAgICovXG4gICAgUmVzcG9uc2U6IDQsXG4gICAgLyoqXG4gICAgICAgKiBBIGN1c3RvbSBldmVudCBmcm9tIGFuIGludGVyY2VwdG9yIG9yIGEgYmFja2VuZC5cbiAgICAgICAqL1xuICAgIFVzZXI6IDUsXG59O1xuSHR0cEV2ZW50VHlwZVtIdHRwRXZlbnRUeXBlLlNlbnRdID0gXCJTZW50XCI7XG5IdHRwRXZlbnRUeXBlW0h0dHBFdmVudFR5cGUuVXBsb2FkUHJvZ3Jlc3NdID0gXCJVcGxvYWRQcm9ncmVzc1wiO1xuSHR0cEV2ZW50VHlwZVtIdHRwRXZlbnRUeXBlLlJlc3BvbnNlSGVhZGVyXSA9IFwiUmVzcG9uc2VIZWFkZXJcIjtcbkh0dHBFdmVudFR5cGVbSHR0cEV2ZW50VHlwZS5Eb3dubG9hZFByb2dyZXNzXSA9IFwiRG93bmxvYWRQcm9ncmVzc1wiO1xuSHR0cEV2ZW50VHlwZVtIdHRwRXZlbnRUeXBlLlJlc3BvbnNlXSA9IFwiUmVzcG9uc2VcIjtcbkh0dHBFdmVudFR5cGVbSHR0cEV2ZW50VHlwZS5Vc2VyXSA9IFwiVXNlclwiO1xuLyoqXG4gKiBCYXNlIGludGVyZmFjZSBmb3IgcHJvZ3Jlc3MgZXZlbnRzLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQSBkb3dubG9hZCBwcm9ncmVzcyBldmVudC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEFuIHVwbG9hZCBwcm9ncmVzcyBldmVudC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEFuIGV2ZW50IGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCB3YXMgc2VudCB0byB0aGUgc2VydmVyLiBVc2VmdWxcbiAqIHdoZW4gYSByZXF1ZXN0IG1heSBiZSByZXRyaWVkIG11bHRpcGxlIHRpbWVzLCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gKiByZXRyaWVzIG9uIHRoZSBmaW5hbCBldmVudCBzdHJlYW0uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBBIHVzZXItZGVmaW5lZCBldmVudC5cbiAqXG4gKiBHcm91cGluZyBhbGwgY3VzdG9tIGV2ZW50cyB1bmRlciB0aGlzIHR5cGUgZW5zdXJlcyB0aGV5IHdpbGwgYmUgaGFuZGxlZFxuICogYW5kIGZvcndhcmRlZCBieSBhbGwgaW1wbGVtZW50YXRpb25zIG9mIGludGVyY2VwdG9ycy5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEFuIGVycm9yIHRoYXQgcmVwcmVzZW50cyBhIGZhaWxlZCBhdHRlbXB0IHRvIEpTT04ucGFyc2UgdGV4dCBjb21pbmcgYmFja1xuICogZnJvbSB0aGUgc2VydmVyLlxuICpcbiAqIEl0IGJ1bmRsZXMgdGhlIEVycm9yIG9iamVjdCB3aXRoIHRoZSBhY3R1YWwgcmVzcG9uc2UgYm9keSB0aGF0IGZhaWxlZCB0byBwYXJzZS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGJvdGggYEh0dHBSZXNwb25zZWAgYW5kIGBIdHRwSGVhZGVyUmVzcG9uc2VgLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBIdHRwUmVzcG9uc2VCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIFN1cGVyLWNvbnN0cnVjdG9yIGZvciBhbGwgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogVGhlIHNpbmdsZSBwYXJhbWV0ZXIgYWNjZXB0ZWQgaXMgYW4gaW5pdGlhbGl6YXRpb24gaGFzaC4gQW55IHByb3BlcnRpZXNcbiAgICAgKiBvZiB0aGUgcmVzcG9uc2UgcGFzc2VkIHRoZXJlIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEh0dHBSZXNwb25zZUJhc2UoaW5pdCwgZGVmYXVsdFN0YXR1cywgZGVmYXVsdFN0YXR1c1RleHQpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRTdGF0dXMgPT09IHZvaWQgMCkgeyBkZWZhdWx0U3RhdHVzID0gMjAwOyB9XG4gICAgICAgIGlmIChkZWZhdWx0U3RhdHVzVGV4dCA9PT0gdm9pZCAwKSB7IGRlZmF1bHRTdGF0dXNUZXh0ID0gJ09LJzsgfVxuICAgICAgICAvLyBJZiB0aGUgaGFzaCBoYXMgdmFsdWVzIHBhc3NlZCwgdXNlIHRoZW0gdG8gaW5pdGlhbGl6ZSB0aGUgcmVzcG9uc2UuXG4gICAgICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBpbml0LmhlYWRlcnMgfHwgbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gaW5pdC5zdGF0dXMgIT09IHVuZGVmaW5lZCA/IGluaXQuc3RhdHVzIDogZGVmYXVsdFN0YXR1cztcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gaW5pdC5zdGF0dXNUZXh0IHx8IGRlZmF1bHRTdGF0dXNUZXh0O1xuICAgICAgICB0aGlzLnVybCA9IGluaXQudXJsIHx8IG51bGw7XG4gICAgICAgIC8vIENhY2hlIHRoZSBvayB2YWx1ZSB0byBhdm9pZCBkZWZpbmluZyBhIGdldHRlci5cbiAgICAgICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMDtcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZUJhc2U7XG59KCkpO1xuLyoqXG4gKiBBIHBhcnRpYWwgSFRUUCByZXNwb25zZSB3aGljaCBvbmx5IGluY2x1ZGVzIHRoZSBzdGF0dXMgYW5kIGhlYWRlciBkYXRhLFxuICogYnV0IG5vIHJlc3BvbnNlIGJvZHkuXG4gKlxuICogYEh0dHBIZWFkZXJSZXNwb25zZWAgaXMgYSBgSHR0cEV2ZW50YCBhdmFpbGFibGUgb24gdGhlIHJlc3BvbnNlXG4gKiBldmVudCBzdHJlYW0sIG9ubHkgd2hlbiBwcm9ncmVzcyBldmVudHMgYXJlIHJlcXVlc3RlZC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEh0dHBIZWFkZXJSZXNwb25zZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoSHR0cEhlYWRlclJlc3BvbnNlLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgSHR0cEhlYWRlclJlc3BvbnNlYCB3aXRoIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEh0dHBIZWFkZXJSZXNwb25zZShpbml0KSB7XG4gICAgICAgIGlmIChpbml0ID09PSB2b2lkIDApIHsgaW5pdCA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGluaXQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnR5cGUgPSBIdHRwRXZlbnRUeXBlLlJlc3BvbnNlSGVhZGVyO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhpcyBgSHR0cEhlYWRlclJlc3BvbnNlYCwgb3ZlcnJpZGluZyBpdHMgY29udGVudHMgd2l0aCB0aGVcbiAgICAgKiBnaXZlbiBwYXJhbWV0ZXIgaGFzaC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoaXMgYEh0dHBIZWFkZXJSZXNwb25zZWAsIG92ZXJyaWRpbmcgaXRzIGNvbnRlbnRzIHdpdGggdGhlXG4gICAgICogZ2l2ZW4gcGFyYW1ldGVyIGhhc2guXG4gICAgICogQHBhcmFtIHs/PX0gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSGVhZGVyUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gLyoqXG4gICAgICogQ29weSB0aGlzIGBIdHRwSGVhZGVyUmVzcG9uc2VgLCBvdmVycmlkaW5nIGl0cyBjb250ZW50cyB3aXRoIHRoZVxuICAgICAqIGdpdmVuIHBhcmFtZXRlciBoYXNoLlxuICAgICAqIEBwYXJhbSB7Pz19IHVwZGF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICBpZiAodXBkYXRlID09PSB2b2lkIDApIHsgdXBkYXRlID0ge307IH1cbiAgICAgICAgLy8gUGVyZm9ybSBhIHN0cmFpZ2h0Zm9yd2FyZCBpbml0aWFsaXphdGlvbiBvZiB0aGUgbmV3IEh0dHBIZWFkZXJSZXNwb25zZSxcbiAgICAgICAgLy8gb3ZlcnJpZGluZyB0aGUgY3VycmVudCBwYXJhbWV0ZXJzIHdpdGggbmV3IG9uZXMgaWYgZ2l2ZW4uXG4gICAgICAgIHJldHVybiBuZXcgSHR0cEhlYWRlclJlc3BvbnNlKHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHVwZGF0ZS5oZWFkZXJzIHx8IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHN0YXR1czogdXBkYXRlLnN0YXR1cyAhPT0gdW5kZWZpbmVkID8gdXBkYXRlLnN0YXR1cyA6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogdXBkYXRlLnN0YXR1c1RleHQgfHwgdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgdXJsOiB1cGRhdGUudXJsIHx8IHRoaXMudXJsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gSHR0cEhlYWRlclJlc3BvbnNlO1xufShIdHRwUmVzcG9uc2VCYXNlKSk7XG4vKipcbiAqIEEgZnVsbCBIVFRQIHJlc3BvbnNlLCBpbmNsdWRpbmcgYSB0eXBlZCByZXNwb25zZSBib2R5ICh3aGljaCBtYXkgYmUgYG51bGxgXG4gKiBpZiBvbmUgd2FzIG5vdCByZXR1cm5lZCkuXG4gKlxuICogYEh0dHBSZXNwb25zZWAgaXMgYSBgSHR0cEV2ZW50YCBhdmFpbGFibGUgb24gdGhlIHJlc3BvbnNlIGV2ZW50XG4gKiBzdHJlYW0uXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBIdHRwUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEh0dHBSZXNwb25zZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgYEh0dHBSZXNwb25zZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSHR0cFJlc3BvbnNlKGluaXQpIHtcbiAgICAgICAgaWYgKGluaXQgPT09IHZvaWQgMCkgeyBpbml0ID0ge307IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IEh0dHBFdmVudFR5cGUuUmVzcG9uc2U7XG4gICAgICAgIF90aGlzLmJvZHkgPSBpbml0LmJvZHkgIT09IHVuZGVmaW5lZCA/IGluaXQuYm9keSA6IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/PX0gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gLyoqXG4gICAgICogQHBhcmFtIHs/PX0gdXBkYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIGlmICh1cGRhdGUgPT09IHZvaWQgMCkgeyB1cGRhdGUgPSB7fTsgfVxuICAgICAgICByZXR1cm4gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgICAgICAgICBib2R5OiAodXBkYXRlLmJvZHkgIT09IHVuZGVmaW5lZCkgPyB1cGRhdGUuYm9keSA6IHRoaXMuYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHVwZGF0ZS5oZWFkZXJzIHx8IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHN0YXR1czogKHVwZGF0ZS5zdGF0dXMgIT09IHVuZGVmaW5lZCkgPyB1cGRhdGUuc3RhdHVzIDogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiB1cGRhdGUuc3RhdHVzVGV4dCB8fCB0aGlzLnN0YXR1c1RleHQsXG4gICAgICAgICAgICB1cmw6IHVwZGF0ZS51cmwgfHwgdGhpcy51cmwgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2U7XG59KEh0dHBSZXNwb25zZUJhc2UpKTtcbi8qKlxuICogQSByZXNwb25zZSB0aGF0IHJlcHJlc2VudHMgYW4gZXJyb3Igb3IgZmFpbHVyZSwgZWl0aGVyIGZyb20gYVxuICogbm9uLXN1Y2Nlc3NmdWwgSFRUUCBzdGF0dXMsIGFuIGVycm9yIHdoaWxlIGV4ZWN1dGluZyB0aGUgcmVxdWVzdCxcbiAqIG9yIHNvbWUgb3RoZXIgZmFpbHVyZSB3aGljaCBvY2N1cnJlZCBkdXJpbmcgdGhlIHBhcnNpbmcgb2YgdGhlIHJlc3BvbnNlLlxuICpcbiAqIEFueSBlcnJvciByZXR1cm5lZCBvbiB0aGUgYE9ic2VydmFibGVgIHJlc3BvbnNlIHN0cmVhbSB3aWxsIGJlXG4gKiB3cmFwcGVkIGluIGFuIGBIdHRwRXJyb3JSZXNwb25zZWAgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGNvbnRleHQgYWJvdXRcbiAqIHRoZSBzdGF0ZSBvZiB0aGUgSFRUUCBsYXllciB3aGVuIHRoZSBlcnJvciBvY2N1cnJlZC4gVGhlIGVycm9yIHByb3BlcnR5XG4gKiB3aWxsIGNvbnRhaW4gZWl0aGVyIGEgd3JhcHBlZCBFcnJvciBvYmplY3Qgb3IgdGhlIGVycm9yIHJlc3BvbnNlIHJldHVybmVkXG4gKiBmcm9tIHRoZSBzZXJ2ZXIuXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBIdHRwRXJyb3JSZXNwb25zZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoSHR0cEVycm9yUmVzcG9uc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cEVycm9yUmVzcG9uc2UoaW5pdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIGEgZGVmYXVsdCBzdGF0dXMgb2YgMCAvIFVua25vd24gRXJyb3IuXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGluaXQsIDAsICdVbmtub3duIEVycm9yJykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubmFtZSA9ICdIdHRwRXJyb3JSZXNwb25zZSc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFcnJvcnMgYXJlIG5ldmVyIG9rYXksIGV2ZW4gd2hlbiB0aGUgc3RhdHVzIGNvZGUgaXMgaW4gdGhlIDJ4eCBzdWNjZXNzIHJhbmdlLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMub2sgPSBmYWxzZTtcbiAgICAgICAgLy8gSWYgdGhlIHJlc3BvbnNlIHdhcyBzdWNjZXNzZnVsLCB0aGVuIHRoaXMgd2FzIGEgcGFyc2UgZXJyb3IuIE90aGVyd2lzZSwgaXQgd2FzXG4gICAgICAgIC8vIGEgcHJvdG9jb2wtbGV2ZWwgZmFpbHVyZSBvZiBzb21lIHNvcnQuIEVpdGhlciB0aGUgcmVxdWVzdCBmYWlsZWQgaW4gdHJhbnNpdFxuICAgICAgICAvLyBvciB0aGUgc2VydmVyIHJldHVybmVkIGFuIHVuc3VjY2Vzc2Z1bCBzdGF0dXMgY29kZS5cbiAgICAgICAgaWYgKF90aGlzLnN0YXR1cyA+PSAyMDAgJiYgX3RoaXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICBfdGhpcy5tZXNzYWdlID0gXCJIdHRwIGZhaWx1cmUgZHVyaW5nIHBhcnNpbmcgZm9yIFwiICsgKGluaXQudXJsIHx8ICcodW5rbm93biB1cmwpJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5tZXNzYWdlID1cbiAgICAgICAgICAgICAgICBcIkh0dHAgZmFpbHVyZSByZXNwb25zZSBmb3IgXCIgKyAoaW5pdC51cmwgfHwgJyh1bmtub3duIHVybCknKSArIFwiOiBcIiArIGluaXQuc3RhdHVzICsgXCIgXCIgKyBpbml0LnN0YXR1c1RleHQ7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZXJyb3IgPSBpbml0LmVycm9yIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBFcnJvclJlc3BvbnNlO1xufShIdHRwUmVzcG9uc2VCYXNlKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ29uc3RydWN0IGFuIGluc3RhbmNlIG9mIGBIdHRwUmVxdWVzdE9wdGlvbnM8VD5gIGZyb20gYSBzb3VyY2UgYEh0dHBNZXRob2RPcHRpb25zYCBhbmRcbiAqIHRoZSBnaXZlbiBgYm9keWAuIEJhc2ljYWxseSwgdGhpcyBjbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyB0aGUgYm9keS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0gez99IG9wdGlvbnNcbiAqIEBwYXJhbSB7P30gYm9keVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYWRkQm9keShvcHRpb25zLCBib2R5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICBvYnNlcnZlOiBvcHRpb25zLm9ic2VydmUsXG4gICAgICAgIHBhcmFtczogb3B0aW9ucy5wYXJhbXMsXG4gICAgICAgIHJlcG9ydFByb2dyZXNzOiBvcHRpb25zLnJlcG9ydFByb2dyZXNzLFxuICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgIH07XG59XG4vKipcbiAqIFBlcmZvcm0gSFRUUCByZXF1ZXN0cy5cbiAqXG4gKiBgSHR0cENsaWVudGAgaXMgYXZhaWxhYmxlIGFzIGFuIGluamVjdGFibGUgY2xhc3MsIHdpdGggbWV0aG9kcyB0byBwZXJmb3JtIEhUVFAgcmVxdWVzdHMuXG4gKiBFYWNoIHJlcXVlc3QgbWV0aG9kIGhhcyBtdWx0aXBsZSBzaWduYXR1cmVzLCBhbmQgdGhlIHJldHVybiB0eXBlIHZhcmllcyBhY2NvcmRpbmcgdG8gd2hpY2hcbiAqIHNpZ25hdHVyZSBpcyBjYWxsZWQgKG1haW5seSB0aGUgdmFsdWVzIG9mIGBvYnNlcnZlYCBhbmQgYHJlc3BvbnNlVHlwZWApLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgSHR0cENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50KGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgZm9yIGEgcGFydGljdWxhciBIVFRQIHJlcXVlc3QgdGhhdCwgd2hlbiBzdWJzY3JpYmVkLFxuICAgICAqIGZpcmVzIHRoZSByZXF1ZXN0IHRocm91Z2ggdGhlIGNoYWluIG9mIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzIGFuZCBvbiB0byB0aGVcbiAgICAgKiBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGluIG9uZSBvZiB0d28gd2F5cy4gRWl0aGVyIGFuIGBIdHRwUmVxdWVzdGBcbiAgICAgKiBpbnN0YW5jZSBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IGFzIHRoZSBvbmx5IHBhcmFtZXRlciwgb3IgYSBtZXRob2QgY2FuIGJlXG4gICAgICogcGFzc2VkIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIGEgc3RyaW5nIFVSTCBhcyB0aGUgc2Vjb25kLCBhbmQgYW5cbiAgICAgKiBvcHRpb25zIGhhc2ggYXMgdGhlIHRoaXJkLlxuICAgICAqXG4gICAgICogSWYgYSBgSHR0cFJlcXVlc3RgIG9iamVjdCBpcyBwYXNzZWQgZGlyZWN0bHksIGFuIGBPYnNlcnZhYmxlYCBvZiB0aGVcbiAgICAgKiByYXcgYEh0dHBFdmVudGAgc3RyZWFtIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBJZiBhIHJlcXVlc3QgaXMgaW5zdGVhZCBidWlsdCBieSBwcm92aWRpbmcgYSBVUkwsIHRoZSBvcHRpb25zIG9iamVjdFxuICAgICAqIGRldGVybWluZXMgdGhlIHJldHVybiB0eXBlIG9mIGByZXF1ZXN0KClgLiBJbiBhZGRpdGlvbiB0byBjb25maWd1cmluZ1xuICAgICAqIHJlcXVlc3QgcGFyYW1ldGVycyBzdWNoIGFzIHRoZSBvdXRnb2luZyBoZWFkZXJzIGFuZC9vciB0aGUgYm9keSwgdGhlIG9wdGlvbnNcbiAgICAgKiBoYXNoIHNwZWNpZmllcyB0d28ga2V5IHBpZWNlcyBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVxdWVzdDogdGhlXG4gICAgICogYHJlc3BvbnNlVHlwZWAgYW5kIHdoYXQgdG8gYG9ic2VydmVgLlxuICAgICAqXG4gICAgICogVGhlIGByZXNwb25zZVR5cGVgIHZhbHVlIGRldGVybWluZXMgaG93IGEgc3VjY2Vzc2Z1bCByZXNwb25zZSBib2R5IHdpbGwgYmVcbiAgICAgKiBwYXJzZWQuIElmIGByZXNwb25zZVR5cGVgIGlzIHRoZSBkZWZhdWx0IGBqc29uYCwgYSB0eXBlIGludGVyZmFjZSBmb3IgdGhlXG4gICAgICogcmVzdWx0aW5nIG9iamVjdCBtYXkgYmUgcGFzc2VkIGFzIGEgdHlwZSBwYXJhbWV0ZXIgdG8gYHJlcXVlc3QoKWAuXG4gICAgICpcbiAgICAgKiBUaGUgYG9ic2VydmVgIHZhbHVlIGRldGVybWluZXMgdGhlIHJldHVybiB0eXBlIG9mIGByZXF1ZXN0KClgLCBiYXNlZCBvbiB3aGF0XG4gICAgICogdGhlIGNvbnN1bWVyIGlzIGludGVyZXN0ZWQgaW4gb2JzZXJ2aW5nLiBBIHZhbHVlIG9mIGBldmVudHNgIHdpbGwgcmV0dXJuIGFuXG4gICAgICogYE9ic2VydmFibGU8SHR0cEV2ZW50PmAgcmVwcmVzZW50aW5nIHRoZSByYXcgYEh0dHBFdmVudGAgc3RyZWFtLFxuICAgICAqIGluY2x1ZGluZyBwcm9ncmVzcyBldmVudHMgYnkgZGVmYXVsdC4gQSB2YWx1ZSBvZiBgcmVzcG9uc2VgIHdpbGwgcmV0dXJuIGFuXG4gICAgICogYE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFQ+PmAgd2hlcmUgdGhlIGBUYCBwYXJhbWV0ZXIgb2YgYEh0dHBSZXNwb25zZWBcbiAgICAgKiBkZXBlbmRzIG9uIHRoZSBgcmVzcG9uc2VUeXBlYCBhbmQgYW55IG9wdGlvbmFsbHkgcHJvdmlkZWQgdHlwZSBwYXJhbWV0ZXIuXG4gICAgICogQSB2YWx1ZSBvZiBgYm9keWAgd2lsbCByZXR1cm4gYW4gYE9ic2VydmFibGU8VD5gIHdpdGggdGhlIHNhbWUgYFRgIGJvZHkgdHlwZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCBmb3IgYSBwYXJ0aWN1bGFyIEhUVFAgcmVxdWVzdCB0aGF0LCB3aGVuIHN1YnNjcmliZWQsXG4gICAgICogZmlyZXMgdGhlIHJlcXVlc3QgdGhyb3VnaCB0aGUgY2hhaW4gb2YgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnMgYW5kIG9uIHRvIHRoZVxuICAgICAqIHNlcnZlci5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgaW4gb25lIG9mIHR3byB3YXlzLiBFaXRoZXIgYW4gYEh0dHBSZXF1ZXN0YFxuICAgICAqIGluc3RhbmNlIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgYXMgdGhlIG9ubHkgcGFyYW1ldGVyLCBvciBhIG1ldGhvZCBjYW4gYmVcbiAgICAgKiBwYXNzZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciwgYSBzdHJpbmcgVVJMIGFzIHRoZSBzZWNvbmQsIGFuZCBhblxuICAgICAqIG9wdGlvbnMgaGFzaCBhcyB0aGUgdGhpcmQuXG4gICAgICpcbiAgICAgKiBJZiBhIGBIdHRwUmVxdWVzdGAgb2JqZWN0IGlzIHBhc3NlZCBkaXJlY3RseSwgYW4gYE9ic2VydmFibGVgIG9mIHRoZVxuICAgICAqIHJhdyBgSHR0cEV2ZW50YCBzdHJlYW0gd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIElmIGEgcmVxdWVzdCBpcyBpbnN0ZWFkIGJ1aWx0IGJ5IHByb3ZpZGluZyBhIFVSTCwgdGhlIG9wdGlvbnMgb2JqZWN0XG4gICAgICogZGV0ZXJtaW5lcyB0aGUgcmV0dXJuIHR5cGUgb2YgYHJlcXVlc3QoKWAuIEluIGFkZGl0aW9uIHRvIGNvbmZpZ3VyaW5nXG4gICAgICogcmVxdWVzdCBwYXJhbWV0ZXJzIHN1Y2ggYXMgdGhlIG91dGdvaW5nIGhlYWRlcnMgYW5kL29yIHRoZSBib2R5LCB0aGUgb3B0aW9uc1xuICAgICAqIGhhc2ggc3BlY2lmaWVzIHR3byBrZXkgcGllY2VzIG9mIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXF1ZXN0OiB0aGVcbiAgICAgKiBgcmVzcG9uc2VUeXBlYCBhbmQgd2hhdCB0byBgb2JzZXJ2ZWAuXG4gICAgICpcbiAgICAgKiBUaGUgYHJlc3BvbnNlVHlwZWAgdmFsdWUgZGV0ZXJtaW5lcyBob3cgYSBzdWNjZXNzZnVsIHJlc3BvbnNlIGJvZHkgd2lsbCBiZVxuICAgICAqIHBhcnNlZC4gSWYgYHJlc3BvbnNlVHlwZWAgaXMgdGhlIGRlZmF1bHQgYGpzb25gLCBhIHR5cGUgaW50ZXJmYWNlIGZvciB0aGVcbiAgICAgKiByZXN1bHRpbmcgb2JqZWN0IG1heSBiZSBwYXNzZWQgYXMgYSB0eXBlIHBhcmFtZXRlciB0byBgcmVxdWVzdCgpYC5cbiAgICAgKlxuICAgICAqIFRoZSBgb2JzZXJ2ZWAgdmFsdWUgZGV0ZXJtaW5lcyB0aGUgcmV0dXJuIHR5cGUgb2YgYHJlcXVlc3QoKWAsIGJhc2VkIG9uIHdoYXRcbiAgICAgKiB0aGUgY29uc3VtZXIgaXMgaW50ZXJlc3RlZCBpbiBvYnNlcnZpbmcuIEEgdmFsdWUgb2YgYGV2ZW50c2Agd2lsbCByZXR1cm4gYW5cbiAgICAgKiBgT2JzZXJ2YWJsZTxIdHRwRXZlbnQ+YCByZXByZXNlbnRpbmcgdGhlIHJhdyBgSHR0cEV2ZW50YCBzdHJlYW0sXG4gICAgICogaW5jbHVkaW5nIHByb2dyZXNzIGV2ZW50cyBieSBkZWZhdWx0LiBBIHZhbHVlIG9mIGByZXNwb25zZWAgd2lsbCByZXR1cm4gYW5cbiAgICAgKiBgT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8VD4+YCB3aGVyZSB0aGUgYFRgIHBhcmFtZXRlciBvZiBgSHR0cFJlc3BvbnNlYFxuICAgICAqIGRlcGVuZHMgb24gdGhlIGByZXNwb25zZVR5cGVgIGFuZCBhbnkgb3B0aW9uYWxseSBwcm92aWRlZCB0eXBlIHBhcmFtZXRlci5cbiAgICAgKiBBIHZhbHVlIG9mIGBib2R5YCB3aWxsIHJldHVybiBhbiBgT2JzZXJ2YWJsZTxUPmAgd2l0aCB0aGUgc2FtZSBgVGAgYm9keSB0eXBlLlxuICAgICAqIEBwYXJhbSB7P30gZmlyc3RcbiAgICAgKiBAcGFyYW0gez89fSB1cmxcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5yZXF1ZXN0ID0gLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgZm9yIGEgcGFydGljdWxhciBIVFRQIHJlcXVlc3QgdGhhdCwgd2hlbiBzdWJzY3JpYmVkLFxuICAgICAqIGZpcmVzIHRoZSByZXF1ZXN0IHRocm91Z2ggdGhlIGNoYWluIG9mIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzIGFuZCBvbiB0byB0aGVcbiAgICAgKiBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIGluIG9uZSBvZiB0d28gd2F5cy4gRWl0aGVyIGFuIGBIdHRwUmVxdWVzdGBcbiAgICAgKiBpbnN0YW5jZSBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IGFzIHRoZSBvbmx5IHBhcmFtZXRlciwgb3IgYSBtZXRob2QgY2FuIGJlXG4gICAgICogcGFzc2VkIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIGEgc3RyaW5nIFVSTCBhcyB0aGUgc2Vjb25kLCBhbmQgYW5cbiAgICAgKiBvcHRpb25zIGhhc2ggYXMgdGhlIHRoaXJkLlxuICAgICAqXG4gICAgICogSWYgYSBgSHR0cFJlcXVlc3RgIG9iamVjdCBpcyBwYXNzZWQgZGlyZWN0bHksIGFuIGBPYnNlcnZhYmxlYCBvZiB0aGVcbiAgICAgKiByYXcgYEh0dHBFdmVudGAgc3RyZWFtIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBJZiBhIHJlcXVlc3QgaXMgaW5zdGVhZCBidWlsdCBieSBwcm92aWRpbmcgYSBVUkwsIHRoZSBvcHRpb25zIG9iamVjdFxuICAgICAqIGRldGVybWluZXMgdGhlIHJldHVybiB0eXBlIG9mIGByZXF1ZXN0KClgLiBJbiBhZGRpdGlvbiB0byBjb25maWd1cmluZ1xuICAgICAqIHJlcXVlc3QgcGFyYW1ldGVycyBzdWNoIGFzIHRoZSBvdXRnb2luZyBoZWFkZXJzIGFuZC9vciB0aGUgYm9keSwgdGhlIG9wdGlvbnNcbiAgICAgKiBoYXNoIHNwZWNpZmllcyB0d28ga2V5IHBpZWNlcyBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVxdWVzdDogdGhlXG4gICAgICogYHJlc3BvbnNlVHlwZWAgYW5kIHdoYXQgdG8gYG9ic2VydmVgLlxuICAgICAqXG4gICAgICogVGhlIGByZXNwb25zZVR5cGVgIHZhbHVlIGRldGVybWluZXMgaG93IGEgc3VjY2Vzc2Z1bCByZXNwb25zZSBib2R5IHdpbGwgYmVcbiAgICAgKiBwYXJzZWQuIElmIGByZXNwb25zZVR5cGVgIGlzIHRoZSBkZWZhdWx0IGBqc29uYCwgYSB0eXBlIGludGVyZmFjZSBmb3IgdGhlXG4gICAgICogcmVzdWx0aW5nIG9iamVjdCBtYXkgYmUgcGFzc2VkIGFzIGEgdHlwZSBwYXJhbWV0ZXIgdG8gYHJlcXVlc3QoKWAuXG4gICAgICpcbiAgICAgKiBUaGUgYG9ic2VydmVgIHZhbHVlIGRldGVybWluZXMgdGhlIHJldHVybiB0eXBlIG9mIGByZXF1ZXN0KClgLCBiYXNlZCBvbiB3aGF0XG4gICAgICogdGhlIGNvbnN1bWVyIGlzIGludGVyZXN0ZWQgaW4gb2JzZXJ2aW5nLiBBIHZhbHVlIG9mIGBldmVudHNgIHdpbGwgcmV0dXJuIGFuXG4gICAgICogYE9ic2VydmFibGU8SHR0cEV2ZW50PmAgcmVwcmVzZW50aW5nIHRoZSByYXcgYEh0dHBFdmVudGAgc3RyZWFtLFxuICAgICAqIGluY2x1ZGluZyBwcm9ncmVzcyBldmVudHMgYnkgZGVmYXVsdC4gQSB2YWx1ZSBvZiBgcmVzcG9uc2VgIHdpbGwgcmV0dXJuIGFuXG4gICAgICogYE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFQ+PmAgd2hlcmUgdGhlIGBUYCBwYXJhbWV0ZXIgb2YgYEh0dHBSZXNwb25zZWBcbiAgICAgKiBkZXBlbmRzIG9uIHRoZSBgcmVzcG9uc2VUeXBlYCBhbmQgYW55IG9wdGlvbmFsbHkgcHJvdmlkZWQgdHlwZSBwYXJhbWV0ZXIuXG4gICAgICogQSB2YWx1ZSBvZiBgYm9keWAgd2lsbCByZXR1cm4gYW4gYE9ic2VydmFibGU8VD5gIHdpdGggdGhlIHNhbWUgYFRgIGJvZHkgdHlwZS5cbiAgICAgKiBAcGFyYW0gez99IGZpcnN0XG4gICAgICogQHBhcmFtIHs/PX0gdXJsXG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZpcnN0LCB1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVxO1xuICAgICAgICAvLyBGaXJzdGx5LCBjaGVjayB3aGV0aGVyIHRoZSBwcmltYXJ5IGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIGBIdHRwUmVxdWVzdGAuXG4gICAgICAgIGlmIChmaXJzdCBpbnN0YW5jZW9mIEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBJdCBpcy4gVGhlIG90aGVyIGFyZ3VtZW50cyBtdXN0IGJlIHVuZGVmaW5lZCAocGVyIHRoZSBzaWduYXR1cmVzKSBhbmQgY2FuIGJlXG4gICAgICAgICAgICAvLyBpZ25vcmVkLlxuICAgICAgICAgICAgcmVxID0gLyoqIEB0eXBlIHs/fSAqLyAoZmlyc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSXQncyBhIHN0cmluZywgc28gaXQgcmVwcmVzZW50cyBhIFVSTC4gQ29uc3RydWN0IGEgcmVxdWVzdCBiYXNlZCBvbiBpdCxcbiAgICAgICAgICAgIC8vIGFuZCBpbmNvcnBvcmF0ZSB0aGUgcmVtYWluaW5nIGFyZ3VtZW50cyAoYXNzdW1pbmcgR0VUIHVubGVzcyBhIG1ldGhvZCBpc1xuICAgICAgICAgICAgLy8gcHJvdmlkZWQuXG4gICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHRoZSBoZWFkZXJzLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGVhZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhlYWRlcnMgaW5zdGFuY2VvZiBIdHRwSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IG91dCBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1zID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJhbXMgaW5zdGFuY2VvZiBIdHRwUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoLyoqIEB0eXBlIHs/fSAqLyAoeyBmcm9tT2JqZWN0OiBvcHRpb25zLnBhcmFtcyB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgcmVxID0gbmV3IEh0dHBSZXF1ZXN0KGZpcnN0LCAvKiogQHR5cGUgez99ICovICgodXJsKSksIChvcHRpb25zLmJvZHkgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYm9keSA6IG51bGwpLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogb3B0aW9ucy5yZXBvcnRQcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCBKU09OIGlzIGFzc3VtZWQgdG8gYmUgcmV0dXJuZWQgZm9yIGFsbCBjYWxscy5cbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlIHx8ICdqc29uJyxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RhcnQgd2l0aCBhbiBPYnNlcnZhYmxlLm9mKCkgdGhlIGluaXRpYWwgcmVxdWVzdCwgYW5kIHJ1biB0aGUgaGFuZGxlciAod2hpY2hcbiAgICAgICAgLy8gaW5jbHVkZXMgYWxsIGludGVyY2VwdG9ycykgaW5zaWRlIGEgY29uY2F0TWFwKCkuIFRoaXMgd2F5LCB0aGUgaGFuZGxlciBydW5zXG4gICAgICAgIC8vIGluc2lkZSBhbiBPYnNlcnZhYmxlIGNoYWluLCB3aGljaCBjYXVzZXMgaW50ZXJjZXB0b3JzIHRvIGJlIHJlLXJ1biBvbiBldmVyeVxuICAgICAgICAvLyBzdWJzY3JpcHRpb24gKHRoaXMgYWxzbyBtYWtlcyByZXRyaWVzIHJlLXJ1biB0aGUgaGFuZGxlciwgaW5jbHVkaW5nIGludGVyY2VwdG9ycykuXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGV2ZW50cyQgPSByeGpzX29wZXJhdG9yX2NvbmNhdE1hcC5jb25jYXRNYXAuY2FsbChyeGpzX29ic2VydmFibGVfb2Yub2YocmVxKSwgZnVuY3Rpb24gKHJlcSkgeyByZXR1cm4gX3RoaXMuaGFuZGxlci5oYW5kbGUocmVxKTsgfSk7XG4gICAgICAgIC8vIElmIGNvbWluZyB2aWEgdGhlIEFQSSBzaWduYXR1cmUgd2hpY2ggYWNjZXB0cyBhIHByZXZpb3VzbHkgY29uc3RydWN0ZWQgSHR0cFJlcXVlc3QsXG4gICAgICAgIC8vIHRoZSBvbmx5IG9wdGlvbiBpcyB0byBnZXQgdGhlIGV2ZW50IHN0cmVhbS4gT3RoZXJ3aXNlLCByZXR1cm4gdGhlIGV2ZW50IHN0cmVhbSBpZlxuICAgICAgICAvLyB0aGF0IGlzIHdoYXQgd2FzIHJlcXVlc3RlZC5cbiAgICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgSHR0cFJlcXVlc3QgfHwgb3B0aW9ucy5vYnNlcnZlID09PSAnZXZlbnRzJykge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50cyQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHJlcXVlc3RlZCBzdHJlYW0gY29udGFpbnMgZWl0aGVyIHRoZSBmdWxsIHJlc3BvbnNlIG9yIHRoZSBib2R5LiBJbiBlaXRoZXJcbiAgICAgICAgLy8gY2FzZSwgdGhlIGZpcnN0IHN0ZXAgaXMgdG8gZmlsdGVyIHRoZSBldmVudCBzdHJlYW0gdG8gZXh0cmFjdCBhIHN0cmVhbSBvZlxuICAgICAgICAvLyByZXNwb25zZXMocykuXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcyQgPSByeGpzX29wZXJhdG9yX2ZpbHRlci5maWx0ZXIuY2FsbChldmVudHMkLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlOyB9KTtcbiAgICAgICAgLy8gRGVjaWRlIHdoaWNoIHN0cmVhbSB0byByZXR1cm4uXG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy5vYnNlcnZlIHx8ICdib2R5Jykge1xuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3RlZCBzdHJlYW0gaXMgdGhlIGJvZHkuIE1hcCB0aGUgcmVzcG9uc2Ugc3RyZWFtIHRvIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgICAgIC8vIGJvZHkuIFRoaXMgY291bGQgYmUgZG9uZSBtb3JlIHNpbXBseSwgYnV0IGEgbWlzYmVoYXZpbmcgaW50ZXJjZXB0b3IgbWlnaHRcbiAgICAgICAgICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIHJlc3BvbnNlIGJvZHkgaW50byBhIGRpZmZlcmVudCBmb3JtYXQgYW5kIGlnbm9yZSB0aGUgcmVxdWVzdGVkXG4gICAgICAgICAgICAgICAgLy8gcmVzcG9uc2VUeXBlLiBHdWFyZCBhZ2FpbnN0IHRoaXMgYnkgdmFsaWRhdGluZyB0aGF0IHRoZSByZXNwb25zZSBpcyBvZiB0aGVcbiAgICAgICAgICAgICAgICAvLyByZXF1ZXN0ZWQgdHlwZS5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlcS5yZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXJyYXlidWZmZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ4anNfb3BlcmF0b3JfbWFwLm1hcC5jYWxsKHJlcyQsIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBib2R5IGlzIGFuIEFycmF5QnVmZmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuYm9keSAhPT0gbnVsbCAmJiAhKHJlcy5ib2R5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVzcG9uc2UgaXMgbm90IGFuIEFycmF5QnVmZmVyLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxvYic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnhqc19vcGVyYXRvcl9tYXAubWFwLmNhbGwocmVzJCwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIGJvZHkgaXMgYSBCbG9iLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuYm9keSAhPT0gbnVsbCAmJiAhKHJlcy5ib2R5IGluc3RhbmNlb2YgQmxvYikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNwb25zZSBpcyBub3QgYSBCbG9iLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnhqc19vcGVyYXRvcl9tYXAubWFwLmNhbGwocmVzJCwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIGJvZHkgaXMgYSBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5ib2R5ICE9PSBudWxsICYmIHR5cGVvZiByZXMuYm9keSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNwb25zZSBpcyBub3QgYSBzdHJpbmcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHZhbGlkYXRpb24gbmVlZGVkIGZvciBKU09OIHJlc3BvbnNlcywgYXMgdGhleSBjYW4gYmUgb2YgYW55IHR5cGUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnhqc19vcGVyYXRvcl9tYXAubWFwLmNhbGwocmVzJCwgZnVuY3Rpb24gKHJlcykgeyByZXR1cm4gcmVzLmJvZHk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzpcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVzcG9uc2Ugc3RyZWFtIHdhcyByZXF1ZXN0ZWQgZGlyZWN0bHksIHNvIHJldHVybiBpdC5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzJDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCBuZXcgZnV0dXJlIG9ic2VydmUgdHlwZXMgYmVpbmcgYWRkZWQuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWFjaGFibGU6IHVuaGFuZGxlZCBvYnNlcnZlIHR5cGUgXCIgKyBvcHRpb25zLm9ic2VydmUgKyBcIn1cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBERUxFVEUgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYGRlbGV0ZSgpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBERUxFVEUgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYGRlbGV0ZSgpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIERFTEVURSByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgZGVsZXRlKClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHVybCwgLyoqIEB0eXBlIHs/fSAqLyAob3B0aW9ucykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIEdFVCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgZ2V0KClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIEdFVCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgZ2V0KClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXQgPSAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogR0VUIHJlcXVlc3QgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIHNlcnZlci4gU2VlIHRoZSBpbmRpdmlkdWFsIG92ZXJsb2FkcyBmb3JcbiAgICAgKiBkZXRhaWxzIG9mIGBnZXQoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gez99IHVybFxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR0VUJywgdXJsLCAvKiogQHR5cGUgez99ICovIChvcHRpb25zKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogSEVBRCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgaGVhZCgpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBIRUFEIHJlcXVlc3QgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIHNlcnZlci4gU2VlIHRoZSBpbmRpdmlkdWFsIG92ZXJsb2FkcyBmb3JcbiAgICAgKiBkZXRhaWxzIG9mIGBoZWFkKClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5oZWFkID0gLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIEhFQUQgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYGhlYWQoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gez99IHVybFxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnSEVBRCcsIHVybCwgLyoqIEB0eXBlIHs/fSAqLyAob3B0aW9ucykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSBhIHJlcXVlc3RcbiAgICAgKiB3aXRoIHRoZSBzcGVjaWFsIG1ldGhvZCBgSlNPTlBgIHRvIGJlIGRpc3BhdGNoZWQgdmlhIHRoZSBpbnRlcmNlcHRvciBwaXBlbGluZS5cbiAgICAgKlxuICAgICAqIEEgc3VpdGFibGUgaW50ZXJjZXB0b3IgbXVzdCBiZSBpbnN0YWxsZWQgKGUuZy4gdmlhIHRoZSBgSHR0cENsaWVudEpzb25wTW9kdWxlYCkuXG4gICAgICogSWYgbm8gc3VjaCBpbnRlcmNlcHRvciBpcyByZWFjaGVkLCB0aGVuIHRoZSBgSlNPTlBgIHJlcXVlc3Qgd2lsbCBsaWtlbHkgYmVcbiAgICAgKiByZWplY3RlZCBieSB0aGUgY29uZmlndXJlZCBiYWNrZW5kLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgYSByZXF1ZXN0XG4gICAgICogd2l0aCB0aGUgc3BlY2lhbCBtZXRob2QgYEpTT05QYCB0byBiZSBkaXNwYXRjaGVkIHZpYSB0aGUgaW50ZXJjZXB0b3IgcGlwZWxpbmUuXG4gICAgICpcbiAgICAgKiBBIHN1aXRhYmxlIGludGVyY2VwdG9yIG11c3QgYmUgaW5zdGFsbGVkIChlLmcuIHZpYSB0aGUgYEh0dHBDbGllbnRKc29ucE1vZHVsZWApLlxuICAgICAqIElmIG5vIHN1Y2ggaW50ZXJjZXB0b3IgaXMgcmVhY2hlZCwgdGhlbiB0aGUgYEpTT05QYCByZXF1ZXN0IHdpbGwgbGlrZWx5IGJlXG4gICAgICogcmVqZWN0ZWQgYnkgdGhlIGNvbmZpZ3VyZWQgYmFja2VuZC5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1BhcmFtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5qc29ucCA9IC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgYSByZXF1ZXN0XG4gICAgICogd2l0aCB0aGUgc3BlY2lhbCBtZXRob2QgYEpTT05QYCB0byBiZSBkaXNwYXRjaGVkIHZpYSB0aGUgaW50ZXJjZXB0b3IgcGlwZWxpbmUuXG4gICAgICpcbiAgICAgKiBBIHN1aXRhYmxlIGludGVyY2VwdG9yIG11c3QgYmUgaW5zdGFsbGVkIChlLmcuIHZpYSB0aGUgYEh0dHBDbGllbnRKc29ucE1vZHVsZWApLlxuICAgICAqIElmIG5vIHN1Y2ggaW50ZXJjZXB0b3IgaXMgcmVhY2hlZCwgdGhlbiB0aGUgYEpTT05QYCByZXF1ZXN0IHdpbGwgbGlrZWx5IGJlXG4gICAgICogcmVqZWN0ZWQgYnkgdGhlIGNvbmZpZ3VyZWQgYmFja2VuZC5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1BhcmFtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXJsLCBjYWxsYmFja1BhcmFtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0pTT05QJywgdXJsLCB7XG4gICAgICAgICAgICBwYXJhbXM6IG5ldyBIdHRwUGFyYW1zKCkuYXBwZW5kKGNhbGxiYWNrUGFyYW0sICdKU09OUF9DQUxMQkFDSycpLFxuICAgICAgICAgICAgb2JzZXJ2ZTogJ2JvZHknLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIE9QVElPTlMgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYG9wdGlvbnMoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogT1BUSU9OUyByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgb3B0aW9ucygpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUub3B0aW9ucyA9IC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBPUFRJT05TIHJlcXVlc3QgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIHNlcnZlci4gU2VlIHRoZSBpbmRpdmlkdWFsIG92ZXJsb2FkcyBmb3JcbiAgICAgKiBkZXRhaWxzIG9mIGBvcHRpb25zKClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ09QVElPTlMnLCB1cmwsIC8qKiBAdHlwZSB7P30gKi8gKG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBQQVRDSCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgcGF0Y2goKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogUEFUQ0ggcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYHBhdGNoKClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez99IGJvZHlcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5wYXRjaCA9IC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBQQVRDSCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgcGF0Y2goKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gez99IHVybFxuICAgICAqIEBwYXJhbSB7P30gYm9keVxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1cmwsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUEFUQ0gnLCB1cmwsIGFkZEJvZHkob3B0aW9ucywgYm9keSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIFBPU1QgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYHBvc3QoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogUE9TVCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgcG9zdCgpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/fSBib2R5XG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUucG9zdCA9IC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gYE9ic2VydmFibGVgIHdoaWNoLCB3aGVuIHN1YnNjcmliZWQsIHdpbGwgY2F1c2UgdGhlIGNvbmZpZ3VyZWRcbiAgICAgKiBQT1NUIHJlcXVlc3QgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIHNlcnZlci4gU2VlIHRoZSBpbmRpdmlkdWFsIG92ZXJsb2FkcyBmb3JcbiAgICAgKiBkZXRhaWxzIG9mIGBwb3N0KClgJ3MgcmV0dXJuIHR5cGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHs/fSB1cmxcbiAgICAgKiBAcGFyYW0gez99IGJvZHlcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodXJsLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIGFkZEJvZHkob3B0aW9ucywgYm9keSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIFBPU1QgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYHBvc3QoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGFuIGBPYnNlcnZhYmxlYCB3aGljaCwgd2hlbiBzdWJzY3JpYmVkLCB3aWxsIGNhdXNlIHRoZSBjb25maWd1cmVkXG4gICAgICogUE9TVCByZXF1ZXN0IHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuIFNlZSB0aGUgaW5kaXZpZHVhbCBvdmVybG9hZHMgZm9yXG4gICAgICogZGV0YWlscyBvZiBgcG9zdCgpYCdzIHJldHVybiB0eXBlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7P30gdXJsXG4gICAgICogQHBhcmFtIHs/fSBib2R5XG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUucHV0ID0gLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBgT2JzZXJ2YWJsZWAgd2hpY2gsIHdoZW4gc3Vic2NyaWJlZCwgd2lsbCBjYXVzZSB0aGUgY29uZmlndXJlZFxuICAgICAqIFBPU1QgcmVxdWVzdCB0byBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyLiBTZWUgdGhlIGluZGl2aWR1YWwgb3ZlcmxvYWRzIGZvclxuICAgICAqIGRldGFpbHMgb2YgYHBvc3QoKWAncyByZXR1cm4gdHlwZSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gez99IHVybFxuICAgICAqIEBwYXJhbSB7P30gYm9keVxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1cmwsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUFVUJywgdXJsLCBhZGRCb2R5KG9wdGlvbnMsIGJvZHkpKTtcbiAgICB9O1xuICAgIEh0dHBDbGllbnQuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEh0dHBDbGllbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogSHR0cEhhbmRsZXIsIH0sXG4gICAgXTsgfTtcbiAgICByZXR1cm4gSHR0cENsaWVudDtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogSW50ZXJjZXB0cyBgSHR0cFJlcXVlc3RgIGFuZCBoYW5kbGVzIHRoZW0uXG4gKlxuICogTW9zdCBpbnRlcmNlcHRvcnMgd2lsbCB0cmFuc2Zvcm0gdGhlIG91dGdvaW5nIHJlcXVlc3QgYmVmb3JlIHBhc3NpbmcgaXQgdG8gdGhlXG4gKiBuZXh0IGludGVyY2VwdG9yIGluIHRoZSBjaGFpbiwgYnkgY2FsbGluZyBgbmV4dC5oYW5kbGUodHJhbnNmb3JtZWRSZXEpYC5cbiAqXG4gKiBJbiByYXJlIGNhc2VzLCBpbnRlcmNlcHRvcnMgbWF5IHdpc2ggdG8gY29tcGxldGVseSBoYW5kbGUgYSByZXF1ZXN0IHRoZW1zZWx2ZXMsXG4gKiBhbmQgbm90IGRlbGVnYXRlIHRvIHRoZSByZW1haW5kZXIgb2YgdGhlIGNoYWluLiBUaGlzIGJlaGF2aW9yIGlzIGFsbG93ZWQuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBgSHR0cEhhbmRsZXJgIHdoaWNoIGFwcGxpZXMgYW4gYEh0dHBJbnRlcmNlcHRvcmAgdG8gYW4gYEh0dHBSZXF1ZXN0YC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEh0dHBJbnRlcmNlcHRvckhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHR0cEludGVyY2VwdG9ySGFuZGxlcihuZXh0LCBpbnRlcmNlcHRvcikge1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB0aGlzLmludGVyY2VwdG9yID0gaW50ZXJjZXB0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwSW50ZXJjZXB0b3JIYW5kbGVyLnByb3RvdHlwZS5oYW5kbGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlcVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlcSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcmNlcHRvci5pbnRlcmNlcHQocmVxLCB0aGlzLm5leHQpO1xuICAgIH07XG4gICAgcmV0dXJuIEh0dHBJbnRlcmNlcHRvckhhbmRsZXI7XG59KCkpO1xuLyoqXG4gKiBBIG11bHRpLXByb3ZpZGVyIHRva2VuIHdoaWNoIHJlcHJlc2VudHMgdGhlIGFycmF5IG9mIGBIdHRwSW50ZXJjZXB0b3JgcyB0aGF0XG4gKiBhcmUgcmVnaXN0ZXJlZC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEhUVFBfSU5URVJDRVBUT1JTID0gbmV3IF9hbmd1bGFyX2NvcmUuSW5qZWN0aW9uVG9rZW4oJ0hUVFBfSU5URVJDRVBUT1JTJyk7XG52YXIgTm9vcEludGVyY2VwdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BJbnRlcmNlcHRvcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXFcbiAgICAgKiBAcGFyYW0gez99IG5leHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BJbnRlcmNlcHRvci5wcm90b3R5cGUuaW50ZXJjZXB0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXFcbiAgICAgKiBAcGFyYW0gez99IG5leHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZXEsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgfTtcbiAgICBOb29wSW50ZXJjZXB0b3IuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIE5vb3BJbnRlcmNlcHRvci5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBOb29wSW50ZXJjZXB0b3I7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBFdmVyeSByZXF1ZXN0IG1hZGUgdGhyb3VnaCBKU09OUCBuZWVkcyBhIGNhbGxiYWNrIG5hbWUgdGhhdCdzIHVuaXF1ZSBhY3Jvc3MgdGhlXG4vLyB3aG9sZSBwYWdlLiBFYWNoIHJlcXVlc3QgaXMgYXNzaWduZWQgYW4gaWQgYW5kIHRoZSBjYWxsYmFjayBuYW1lIGlzIGNvbnN0cnVjdGVkXG4vLyBmcm9tIHRoYXQuIFRoZSBuZXh0IGlkIHRvIGJlIGFzc2lnbmVkIGlzIHRyYWNrZWQgaW4gYSBnbG9iYWwgdmFyaWFibGUgaGVyZSB0aGF0XG4vLyBpcyBzaGFyZWQgYW1vbmcgYWxsIGFwcGxpY2F0aW9ucyBvbiB0aGUgcGFnZS5cbnZhciBuZXh0UmVxdWVzdElkID0gMDtcbi8vIEVycm9yIHRleHQgZ2l2ZW4gd2hlbiBhIEpTT05QIHNjcmlwdCBpcyBpbmplY3RlZCwgYnV0IGRvZXNuJ3QgaW52b2tlIHRoZSBjYWxsYmFja1xuLy8gcGFzc2VkIGluIGl0cyBVUkwuXG52YXIgSlNPTlBfRVJSX05PX0NBTExCQUNLID0gJ0pTT05QIGluamVjdGVkIHNjcmlwdCBkaWQgbm90IGludm9rZSBjYWxsYmFjay4nO1xuLy8gRXJyb3IgdGV4dCBnaXZlbiB3aGVuIGEgcmVxdWVzdCBpcyBwYXNzZWQgdG8gdGhlIEpzb25wQ2xpZW50QmFja2VuZCB0aGF0IGRvZXNuJ3Rcbi8vIGhhdmUgYSByZXF1ZXN0IG1ldGhvZCBKU09OUC5cbnZhciBKU09OUF9FUlJfV1JPTkdfTUVUSE9EID0gJ0pTT05QIHJlcXVlc3RzIG11c3QgdXNlIEpTT05QIHJlcXVlc3QgbWV0aG9kLic7XG52YXIgSlNPTlBfRVJSX1dST05HX1JFU1BPTlNFX1RZUEUgPSAnSlNPTlAgcmVxdWVzdHMgbXVzdCB1c2UgSnNvbiByZXNwb25zZSB0eXBlLic7XG4vKipcbiAqIERJIHRva2VuL2Fic3RyYWN0IHR5cGUgcmVwcmVzZW50aW5nIGEgbWFwIG9mIEpTT05QIGNhbGxiYWNrcy5cbiAqXG4gKiBJbiB0aGUgYnJvd3NlciwgdGhpcyBzaG91bGQgYWx3YXlzIGJlIHRoZSBgd2luZG93YCBvYmplY3QuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIEpzb25wQ2FsbGJhY2tDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpzb25wQ2FsbGJhY2tDb250ZXh0KCkge1xuICAgIH1cbiAgICByZXR1cm4gSnNvbnBDYWxsYmFja0NvbnRleHQ7XG59KCkpO1xuLyoqXG4gKiBgSHR0cEJhY2tlbmRgIHRoYXQgb25seSBwcm9jZXNzZXMgYEh0dHBSZXF1ZXN0YCB3aXRoIHRoZSBKU09OUCBtZXRob2QsXG4gKiBieSBwZXJmb3JtaW5nIEpTT05QIHN0eWxlIHJlcXVlc3RzLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgSnNvbnBDbGllbnRCYWNrZW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpzb25wQ2xpZW50QmFja2VuZChjYWxsYmFja01hcCwgZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja01hcCA9IGNhbGxiYWNrTWFwO1xuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbmFtZSBvZiB0aGUgbmV4dCBjYWxsYmFjayBtZXRob2QsIGJ5IGluY3JlbWVudGluZyB0aGUgZ2xvYmFsIGBuZXh0UmVxdWVzdElkYC5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEpzb25wQ2xpZW50QmFja2VuZC5wcm90b3R5cGUubmV4dENhbGxiYWNrID0gLyoqXG4gICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSBuZXh0IGNhbGxiYWNrIG1ldGhvZCwgYnkgaW5jcmVtZW50aW5nIHRoZSBnbG9iYWwgYG5leHRSZXF1ZXN0SWRgLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJuZ19qc29ucF9jYWxsYmFja19cIiArIG5leHRSZXF1ZXN0SWQrKzsgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgSlNPTlAgcmVxdWVzdCBhbmQgcmV0dXJuIGFuIGV2ZW50IHN0cmVhbSBvZiB0aGUgcmVzdWx0cy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgSlNPTlAgcmVxdWVzdCBhbmQgcmV0dXJuIGFuIGV2ZW50IHN0cmVhbSBvZiB0aGUgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gez99IHJlcVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSnNvbnBDbGllbnRCYWNrZW5kLnByb3RvdHlwZS5oYW5kbGUgPSAvKipcbiAgICAgKiBQcm9jZXNzIGEgSlNPTlAgcmVxdWVzdCBhbmQgcmV0dXJuIGFuIGV2ZW50IHN0cmVhbSBvZiB0aGUgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gez99IHJlcVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlcSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBGaXJzdGx5LCBjaGVjayBib3RoIHRoZSBtZXRob2QgYW5kIHJlc3BvbnNlIHR5cGUuIElmIGVpdGhlciBkb2Vzbid0IG1hdGNoXG4gICAgICAgIC8vIHRoZW4gdGhlIHJlcXVlc3Qgd2FzIGltcHJvcGVybHkgcm91dGVkIGhlcmUgYW5kIGNhbm5vdCBiZSBoYW5kbGVkLlxuICAgICAgICBpZiAocmVxLm1ldGhvZCAhPT0gJ0pTT05QJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT05QX0VSUl9XUk9OR19NRVRIT0QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlcS5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT05QX0VSUl9XUk9OR19SRVNQT05TRV9UWVBFKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFdmVyeXRoaW5nIGVsc2UgaGFwcGVucyBpbnNpZGUgdGhlIE9ic2VydmFibGUgYm91bmRhcnkuXG4gICAgICAgIHJldHVybiBuZXcgcnhqc19PYnNlcnZhYmxlLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAvLyBUaGUgZmlyc3Qgc3RlcCB0byBtYWtlIGEgcmVxdWVzdCBpcyB0byBnZW5lcmF0ZSB0aGUgY2FsbGJhY2sgbmFtZSwgYW5kIHJlcGxhY2UgdGhlXG4gICAgICAgICAgICAvLyBjYWxsYmFjayBwbGFjZWhvbGRlciBpbiB0aGUgVVJMIHdpdGggdGhlIG5hbWUuIENhcmUgaGFzIHRvIGJlIHRha2VuIGhlcmUgdG8gZW5zdXJlXG4gICAgICAgICAgICAvLyBhIHRyYWlsaW5nICYsIGlmIG1hdGNoZWQsIGdldHMgaW5zZXJ0ZWQgYmFjayBpbnRvIHRoZSBVUkwgaW4gdGhlIGNvcnJlY3QgcGxhY2UuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjYWxsYmFjayA9IF90aGlzLm5leHRDYWxsYmFjaygpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdXJsID0gcmVxLnVybFdpdGhQYXJhbXMucmVwbGFjZSgvPUpTT05QX0NBTExCQUNLKCZ8JCkvLCBcIj1cIiArIGNhbGxiYWNrICsgXCIkMVwiKTtcbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgPHNjcmlwdD4gdGFnIGFuZCBwb2ludCBpdCBhdCB0aGUgVVJMLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZSA9IF90aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgbm9kZS5zcmMgPSB1cmw7XG4gICAgICAgICAgICAvLyBBIEpTT05QIHJlcXVlc3QgcmVxdWlyZXMgd2FpdGluZyBmb3IgbXVsdGlwbGUgY2FsbGJhY2tzLiBUaGVzZSB2YXJpYWJsZXNcbiAgICAgICAgICAgIC8vIGFyZSBjbG9zZWQgb3ZlciBhbmQgdHJhY2sgc3RhdGUgYWNyb3NzIHRob3NlIGNhbGxiYWNrcy5cbiAgICAgICAgICAgIC8vIFRoZSByZXNwb25zZSBvYmplY3QsIGlmIG9uZSBoYXMgYmVlbiByZWNlaXZlZCwgb3IgbnVsbCBvdGhlcndpc2UuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBib2R5ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIFdoZXRoZXIgdGhlIHJlc3BvbnNlIGNhbGxiYWNrIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBXaGV0aGVyIHRoZSByZXF1ZXN0IGhhcyBiZWVuIGNhbmNlbGxlZCAoYW5kIHRodXMgYW55IG90aGVyIGNhbGxiYWNrcylcbiAgICAgICAgICAgIC8vIHNob3VsZCBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHJlc3BvbnNlIGNhbGxiYWNrIGluIHRoaXMuY2FsbGJhY2tNYXAgKHdoaWNoIHdpbGwgYmUgdGhlIHdpbmRvd1xuICAgICAgICAgICAgLy8gb2JqZWN0IGluIHRoZSBicm93c2VyLiBUaGUgc2NyaXB0IGJlaW5nIGxvYWRlZCB2aWEgdGhlIDxzY3JpcHQ+IHRhZyB3aWxsXG4gICAgICAgICAgICAvLyBldmVudHVhbGx5IGNhbGwgdGhpcyBjYWxsYmFjay5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcmVzcG9uc2UgY2FsbGJhY2sgaW4gdGhpcy5jYWxsYmFja01hcCAod2hpY2ggd2lsbCBiZSB0aGUgd2luZG93XG4gICAgICAgICAgICAvLyBvYmplY3QgaW4gdGhlIGJyb3dzZXIuIFRoZSBzY3JpcHQgYmVpbmcgbG9hZGVkIHZpYSB0aGUgPHNjcmlwdD4gdGFnIHdpbGxcbiAgICAgICAgICAgIC8vIGV2ZW50dWFsbHkgY2FsbCB0aGlzIGNhbGxiYWNrLlxuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tNYXBbY2FsbGJhY2tdID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBEYXRhIGhhcyBiZWVuIHJlY2VpdmVkIGZyb20gdGhlIEpTT05QIHNjcmlwdC4gRmlyc3RseSwgZGVsZXRlIHRoaXMgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrTWFwW2NhbGxiYWNrXTtcbiAgICAgICAgICAgICAgICAvLyBOZXh0LCBtYWtlIHN1cmUgdGhlIHJlcXVlc3Qgd2Fzbid0IGNhbmNlbGxlZCBpbiB0aGUgbWVhbnRpbWUuXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNldCBzdGF0ZSB0byBpbmRpY2F0ZSBkYXRhIHdhcyByZWNlaXZlZC5cbiAgICAgICAgICAgICAgICBib2R5ID0gZGF0YTtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gY2xlYW51cCgpIGlzIGEgdXRpbGl0eSBjbG9zdXJlIHRoYXQgcmVtb3ZlcyB0aGUgPHNjcmlwdD4gZnJvbSB0aGUgcGFnZSBhbmRcbiAgICAgICAgICAgIC8vIHRoZSByZXNwb25zZSBjYWxsYmFjayBmcm9tIHRoZSB3aW5kb3cuIFRoaXMgbG9naWMgaXMgdXNlZCBpbiBib3RoIHRoZVxuICAgICAgICAgICAgLy8gc3VjY2VzcywgZXJyb3IsIGFuZCBjYW5jZWxsYXRpb24gcGF0aHMsIHNvIGl0J3MgZXh0cmFjdGVkIG91dCBmb3IgY29udmVuaWVuY2UuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgPHNjcmlwdD4gdGFnIGlmIGl0J3Mgc3RpbGwgb24gdGhlIHBhZ2UuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcmVzcG9uc2UgY2FsbGJhY2sgZnJvbSB0aGUgY2FsbGJhY2tNYXAgKHdpbmRvdyBvYmplY3QgaW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gYnJvd3NlcikuXG4gICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrTWFwW2NhbGxiYWNrXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBvbkxvYWQoKSBpcyB0aGUgc3VjY2VzcyBjYWxsYmFjayB3aGljaCBydW5zIGFmdGVyIHRoZSByZXNwb25zZSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gaWYgdGhlIEpTT05QIHNjcmlwdCBsb2FkcyBzdWNjZXNzZnVsbHkuIFRoZSBldmVudCBpdHNlbGYgaXMgdW5pbXBvcnRhbnQuXG4gICAgICAgICAgICAvLyBJZiBzb21ldGhpbmcgd2VudCB3cm9uZywgb25Mb2FkKCkgbWF5IHJ1biB3aXRob3V0IHRoZSByZXNwb25zZSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gaGF2aW5nIGJlZW4gaW52b2tlZC5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9uTG9hZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlIHJlcXVlc3QgaGFzIGJlZW4gY2FuY2VsbGVkLlxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDbGVhbnVwIHRoZSBwYWdlLlxuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSByZXNwb25zZSBjYWxsYmFjayBoYXMgcnVuLlxuICAgICAgICAgICAgICAgIGlmICghZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgaGFzbid0LCBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSByZXF1ZXN0LiBSZXR1cm4gYW4gZXJyb3IgdmlhXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBPYnNlcnZhYmxlIGVycm9yIHBhdGguIEFsbCBKU09OUCBlcnJvcnMgaGF2ZSBzdGF0dXMgMC5cbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IobmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogJ0pTT05QIEVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoSlNPTlBfRVJSX05PX0NBTExCQUNLKSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3MuIGJvZHkgZWl0aGVyIGNvbnRhaW5zIHRoZSByZXNwb25zZSBib2R5IG9yIG51bGwgaWYgbm9uZSB3YXNcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5lZC5cbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KG5ldyBIdHRwUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogJ09LJywgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIC8vIENvbXBsZXRlIHRoZSBzdHJlYW0sIHRoZSByZXNwb3NuZSBpcyBvdmVyLlxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gb25FcnJvcigpIGlzIHRoZSBlcnJvciBjYWxsYmFjaywgd2hpY2ggcnVucyBpZiB0aGUgc2NyaXB0IHJldHVybmVkIGdlbmVyYXRlc1xuICAgICAgICAgICAgLy8gYSBKYXZhc2NyaXB0IGVycm9yLiBJdCBlbWl0cyB0aGUgZXJyb3IgdmlhIHRoZSBPYnNlcnZhYmxlIGVycm9yIGNoYW5uZWwgYXNcbiAgICAgICAgICAgIC8vIGEgSHR0cEVycm9yUmVzcG9uc2UuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3Qgd2FzIGFscmVhZHkgY2FuY2VsbGVkLCBubyBuZWVkIHRvIGVtaXQgYW55dGhpbmcuXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSBlcnJvciBpbiBhIEh0dHBFcnJvclJlc3BvbnNlLlxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiAnSlNPTlAgRXJyb3InLCB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gU3Vic2NyaWJlIHRvIGJvdGggdGhlIHN1Y2Nlc3MgKGxvYWQpIGFuZCBlcnJvciBldmVudHMgb24gdGhlIDxzY3JpcHQ+IHRhZyxcbiAgICAgICAgICAgIC8vIGFuZCBhZGQgaXQgdG8gdGhlIHBhZ2UuXG4gICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uRXJyb3IpO1xuICAgICAgICAgICAgX3RoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IGhhcyBub3cgYmVlbiBzdWNjZXNzZnVsbHkgc2VudC5cbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyB0eXBlOiBIdHRwRXZlbnRUeXBlLlNlbnQgfSk7XG4gICAgICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFuZGxlci5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJhY2sgdGhlIGNhbmNlbGxhdGlvbiBzbyBldmVudCBsaXN0ZW5lcnMgd29uJ3QgZG8gYW55dGhpbmcgZXZlbiBpZiBhbHJlYWR5IHNjaGVkdWxlZC5cbiAgICAgICAgICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXJzIHNvIHRoZXkgd29uJ3QgcnVuIGlmIHRoZSBldmVudHMgbGF0ZXIgZmlyZS5cbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBBbmQgZmluYWxseSwgY2xlYW4gdXAgdGhlIHBhZ2UuXG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBKc29ucENsaWVudEJhY2tlbmQuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEpzb25wQ2xpZW50QmFja2VuZC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBKc29ucENhbGxiYWNrQ29udGV4dCwgfSxcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbX2FuZ3VsYXJfY29tbW9uLkRPQ1VNRU5ULF0gfSxdIH0sXG4gICAgXTsgfTtcbiAgICByZXR1cm4gSnNvbnBDbGllbnRCYWNrZW5kO1xufSgpKTtcbi8qKlxuICogQW4gYEh0dHBJbnRlcmNlcHRvcmAgd2hpY2ggaWRlbnRpZmllcyByZXF1ZXN0cyB3aXRoIHRoZSBtZXRob2QgSlNPTlAgYW5kXG4gKiBzaGlmdHMgdGhlbSB0byB0aGUgYEpzb25wQ2xpZW50QmFja2VuZGAuXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBKc29ucEludGVyY2VwdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpzb25wSW50ZXJjZXB0b3IoanNvbnApIHtcbiAgICAgICAgdGhpcy5qc29ucCA9IGpzb25wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlcVxuICAgICAqIEBwYXJhbSB7P30gbmV4dFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSnNvbnBJbnRlcmNlcHRvci5wcm90b3R5cGUuaW50ZXJjZXB0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXFcbiAgICAgKiBAcGFyYW0gez99IG5leHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZXEsIG5leHQpIHtcbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09ICdKU09OUCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmpzb25wLmhhbmRsZSgvKiogQHR5cGUgez99ICovIChyZXEpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYWxsIHRocm91Z2ggZm9yIG5vcm1hbCBIVFRQIHJlcXVlc3RzLlxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9O1xuICAgIEpzb25wSW50ZXJjZXB0b3IuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEpzb25wSW50ZXJjZXB0b3IuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogSnNvbnBDbGllbnRCYWNrZW5kLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEpzb25wSW50ZXJjZXB0b3I7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgWFNTSV9QUkVGSVggPSAvXlxcKVxcXVxcfScsP1xcbi87XG4vKipcbiAqIERldGVybWluZSBhbiBhcHByb3ByaWF0ZSBVUkwgZm9yIHRoZSByZXNwb25zZSwgYnkgY2hlY2tpbmcgZWl0aGVyXG4gKiBYTUxIdHRwUmVxdWVzdC5yZXNwb25zZVVSTCBvciB0aGUgWC1SZXF1ZXN0LVVSTCBoZWFkZXIuXG4gKiBAcGFyYW0gez99IHhoclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzcG9uc2VVcmwoeGhyKSB7XG4gICAgaWYgKCdyZXNwb25zZVVSTCcgaW4geGhyICYmIHhoci5yZXNwb25zZVVSTCkge1xuICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMO1xuICAgIH1cbiAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuICAgICAgICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVJlcXVlc3QtVVJMJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBgWE1MSHR0cFJlcXVlc3RgIGNvbnN0cnVjdG9yLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBYaHJGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFhockZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBYaHJGYWN0b3J5O1xufSgpKTtcbi8qKlxuICogQSBmYWN0b3J5IGZvciBcXEB7bGluayBIdHRwWGhyQmFja2VuZH0gdGhhdCB1c2VzIHRoZSBgWE1MSHR0cFJlcXVlc3RgIGJyb3dzZXIgQVBJLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgQnJvd3NlclhociA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcm93c2VyWGhyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEJyb3dzZXJYaHIucHJvdG90eXBlLmJ1aWxkID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAvKiogQHR5cGUgez99ICovICgobmV3IFhNTEh0dHBSZXF1ZXN0KCkpKTsgfTtcbiAgICBCcm93c2VyWGhyLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBCcm93c2VyWGhyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIEJyb3dzZXJYaHI7XG59KCkpO1xuLyoqXG4gKiBBbiBgSHR0cEJhY2tlbmRgIHdoaWNoIHVzZXMgdGhlIFhNTEh0dHBSZXF1ZXN0IEFQSSB0byBzZW5kXG4gKiByZXF1ZXN0cyB0byBhIGJhY2tlbmQgc2VydmVyLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgSHR0cFhockJhY2tlbmQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHR0cFhockJhY2tlbmQoeGhyRmFjdG9yeSkge1xuICAgICAgICB0aGlzLnhockZhY3RvcnkgPSB4aHJGYWN0b3J5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgcmVxdWVzdCBhbmQgcmV0dXJuIGEgc3RyZWFtIG9mIHJlc3BvbnNlIGV2ZW50cy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgcmVxdWVzdCBhbmQgcmV0dXJuIGEgc3RyZWFtIG9mIHJlc3BvbnNlIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gez99IHJlcVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cFhockJhY2tlbmQucHJvdG90eXBlLmhhbmRsZSA9IC8qKlxuICAgICAqIFByb2Nlc3MgYSByZXF1ZXN0IGFuZCByZXR1cm4gYSBzdHJlYW0gb2YgcmVzcG9uc2UgZXZlbnRzLlxuICAgICAqIEBwYXJhbSB7P30gcmVxXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVxKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFF1aWNrIGNoZWNrIHRvIGdpdmUgYSBiZXR0ZXIgZXJyb3IgbWVzc2FnZSB3aGVuIGEgdXNlciBhdHRlbXB0cyB0byB1c2VcbiAgICAgICAgLy8gSHR0cENsaWVudC5qc29ucCgpIHdpdGhvdXQgaW5zdGFsbGluZyB0aGUgSnNvbnBDbGllbnRNb2R1bGVcbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09ICdKU09OUCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjb25zdHJ1Y3QgSnNvbnAgcmVxdWVzdCB3aXRob3V0IEpzb25wQ2xpZW50TW9kdWxlIGluc3RhbGxlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXZlcnl0aGluZyBoYXBwZW5zIG9uIE9ic2VydmFibGUgc3Vic2NyaXB0aW9uLlxuICAgICAgICByZXR1cm4gbmV3IHJ4anNfT2JzZXJ2YWJsZS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgLy8gU3RhcnQgYnkgc2V0dGluZyB1cCB0aGUgWEhSIG9iamVjdCB3aXRoIHJlcXVlc3QgbWV0aG9kLCBVUkwsIGFuZCB3aXRoQ3JlZGVudGlhbHMgZmxhZy5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHhociA9IF90aGlzLnhockZhY3RvcnkuYnVpbGQoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKHJlcS5tZXRob2QsIHJlcS51cmxXaXRoUGFyYW1zKTtcbiAgICAgICAgICAgIGlmICghIXJlcS53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCBhbGwgdGhlIHJlcXVlc3RlZCBoZWFkZXJzLlxuICAgICAgICAgICAgcmVxLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSwgdmFsdWVzKSB7IHJldHVybiB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZXMuam9pbignLCcpKTsgfSk7XG4gICAgICAgICAgICAvLyBBZGQgYW4gQWNjZXB0IGhlYWRlciBpZiBvbmUgaXNuJ3QgcHJlc2VudCBhbHJlYWR5LlxuICAgICAgICAgICAgaWYgKCFyZXEuaGVhZGVycy5oYXMoJ0FjY2VwdCcpKSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF1dG8tZGV0ZWN0IHRoZSBDb250ZW50LVR5cGUgaGVhZGVyIGlmIG9uZSBpc24ndCBwcmVzZW50IGFscmVhZHkuXG4gICAgICAgICAgICBpZiAoIXJlcS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXRlY3RlZFR5cGUgPSByZXEuZGV0ZWN0Q29udGVudFR5cGVIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAvLyBTb21ldGltZXMgQ29udGVudC1UeXBlIGRldGVjdGlvbiBmYWlscy5cbiAgICAgICAgICAgICAgICBpZiAoZGV0ZWN0ZWRUeXBlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCBkZXRlY3RlZFR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcmVzcG9uc2VUeXBlIGlmIG9uZSB3YXMgcmVxdWVzdGVkLlxuICAgICAgICAgICAgaWYgKHJlcS5yZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXNwb25zZVR5cGUgPSByZXEucmVzcG9uc2VUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gSlNPTiByZXNwb25zZXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgYXMgdGV4dC4gVGhpcyBpcyBiZWNhdXNlIGlmIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5zIGFuIFhTU0ktcHJlZml4ZWQgSlNPTiByZXNwb25zZSwgdGhlIGJyb3dzZXIgd2lsbCBmYWlsIHRvIHBhcnNlIGl0LFxuICAgICAgICAgICAgICAgIC8vIHhoci5yZXNwb25zZSB3aWxsIGJlIG51bGwsIGFuZCB4aHIucmVzcG9uc2VUZXh0IGNhbm5vdCBiZSBhY2Nlc3NlZCB0b1xuICAgICAgICAgICAgICAgIC8vIHJldHJpZXZlIHRoZSBwcmVmaXhlZCBKU09OIGRhdGEgaW4gb3JkZXIgdG8gc3RyaXAgdGhlIHByZWZpeC4gVGh1cywgYWxsIEpTT05cbiAgICAgICAgICAgICAgICAvLyBpcyBwYXJzZWQgYnkgZmlyc3QgcmVxdWVzdGluZyB0ZXh0IGFuZCB0aGVuIGFwcGx5aW5nIEpTT04ucGFyc2UuXG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IC8qKiBAdHlwZSB7P30gKi8gKCgocmVzcG9uc2VUeXBlICE9PSAnanNvbicpID8gcmVzcG9uc2VUeXBlIDogJ3RleHQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXJpYWxpemUgdGhlIHJlcXVlc3QgYm9keSBpZiBvbmUgaXMgcHJlc2VudC4gSWYgbm90LCB0aGlzIHdpbGwgYmUgc2V0IHRvIG51bGwuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXFCb2R5ID0gcmVxLnNlcmlhbGl6ZUJvZHkoKTtcbiAgICAgICAgICAgIC8vIElmIHByb2dyZXNzIGV2ZW50cyBhcmUgZW5hYmxlZCwgcmVzcG9uc2UgaGVhZGVycyB3aWxsIGJlIGRlbGl2ZXJlZFxuICAgICAgICAgICAgLy8gaW4gdHdvIGV2ZW50cyAtIHRoZSBIdHRwSGVhZGVyUmVzcG9uc2UgZXZlbnQgYW5kIHRoZSBmdWxsIEh0dHBSZXNwb25zZVxuICAgICAgICAgICAgLy8gZXZlbnQuIEhvd2V2ZXIsIHNpbmNlIHJlc3BvbnNlIGhlYWRlcnMgZG9uJ3QgY2hhbmdlIGluIGJldHdlZW4gdGhlc2VcbiAgICAgICAgICAgIC8vIHR3byBldmVudHMsIGl0IGRvZXNuJ3QgbWFrZSBzZW5zZSB0byBwYXJzZSB0aGVtIHR3aWNlLiBTbyBoZWFkZXJSZXNwb25zZVxuICAgICAgICAgICAgLy8gY2FjaGVzIHRoZSBkYXRhIGV4dHJhY3RlZCBmcm9tIHRoZSByZXNwb25zZSB3aGVuZXZlciBpdCdzIGZpcnN0IHBhcnNlZCxcbiAgICAgICAgICAgIC8vIHRvIGVuc3VyZSBwYXJzaW5nIGlzbid0IGR1cGxpY2F0ZWQuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBoZWFkZXJSZXNwb25zZSA9IG51bGw7XG4gICAgICAgICAgICAvLyBwYXJ0aWFsRnJvbVhociBleHRyYWN0cyB0aGUgSHR0cEhlYWRlclJlc3BvbnNlIGZyb20gdGhlIGN1cnJlbnQgWE1MSHR0cFJlcXVlc3RcbiAgICAgICAgICAgIC8vIHN0YXRlLCBhbmQgbWVtb2l6ZXMgaXQgaW50byBoZWFkZXJSZXNwb25zZS5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcnRpYWxGcm9tWGhyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJSZXNwb25zZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVyUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlYWQgc3RhdHVzIGFuZCBub3JtYWxpemUgYW4gSUU5IGJ1ZyAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MCkuXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0IHx8ICdPSyc7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgaGVhZGVycyBmcm9tIFhNTEh0dHBSZXF1ZXN0IC0gdGhpcyBzdGVwIGlzIGxhenkuXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIHJlc3BvbnNlIFVSTCBmcm9tIHRoZSBYTUxIdHRwUmVzcG9uc2UgaW5zdGFuY2UgYW5kIGZhbGwgYmFjayBvbiB0aGVcbiAgICAgICAgICAgICAgICAvLyByZXF1ZXN0IFVSTC5cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB1cmwgPSBnZXRSZXNwb25zZVVybCh4aHIpIHx8IHJlcS51cmw7XG4gICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBIdHRwSGVhZGVyUmVzcG9uc2UgYW5kIG1lbW9pemUgaXQuXG4gICAgICAgICAgICAgICAgaGVhZGVyUmVzcG9uc2UgPSBuZXcgSHR0cEhlYWRlclJlc3BvbnNlKHsgaGVhZGVyczogaGVhZGVycywgc3RhdHVzOiBzdGF0dXMsIHN0YXR1c1RleHQ6IHN0YXR1c1RleHQsIHVybDogdXJsIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXJSZXNwb25zZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBOZXh0LCBhIGZldyBjbG9zdXJlcyBhcmUgZGVmaW5lZCBmb3IgdGhlIHZhcmlvdXMgZXZlbnRzIHdoaWNoIFhNTEh0dHBSZXF1ZXN0IGNhblxuICAgICAgICAgICAgLy8gZW1pdC4gVGhpcyBhbGxvd3MgdGhlbSB0byBiZSB1bnJlZ2lzdGVyZWQgYXMgZXZlbnQgbGlzdGVuZXJzIGxhdGVyLlxuICAgICAgICAgICAgLy8gRmlyc3QgdXAgaXMgdGhlIGxvYWQgZXZlbnQsIHdoaWNoIHJlcHJlc2VudHMgYSByZXNwb25zZSBiZWluZyBmdWxseSBhdmFpbGFibGUuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVhZCByZXNwb25zZSBzdGF0ZSBmcm9tIHRoZSBtZW1vaXplZCBwYXJ0aWFsIGRhdGEuXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gcGFydGlhbEZyb21YaHIoKSwgaGVhZGVycyA9IF9hLmhlYWRlcnMsIHN0YXR1cyA9IF9hLnN0YXR1cywgc3RhdHVzVGV4dCA9IF9hLnN0YXR1c1RleHQsIHVybCA9IF9hLnVybDtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYm9keSB3aWxsIGJlIHJlYWQgb3V0IGlmIHByZXNlbnQuXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjA0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSBYTUxIdHRwUmVxdWVzdC5yZXNwb25zZSBpZiBzZXQsIHJlc3BvbnNlVGV4dCBvdGhlcndpc2UuXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSAodHlwZW9mIHhoci5yZXNwb25zZSA9PT0gJ3VuZGVmaW5lZCcpID8geGhyLnJlc3BvbnNlVGV4dCA6IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTm9ybWFsaXplIGFub3RoZXIgcG90ZW50aWFsIGJ1ZyAodGhpcyBvbmUgY29tZXMgZnJvbSBDT1JTKS5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9ICEhYm9keSA/IDIwMCA6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9rIGRldGVybWluZXMgd2hldGhlciB0aGUgcmVzcG9uc2Ugd2lsbCBiZSB0cmFuc21pdHRlZCBvbiB0aGUgZXZlbnQgb3JcbiAgICAgICAgICAgICAgICAvLyBlcnJvciBjaGFubmVsLiBVbnN1Y2Nlc3NmdWwgc3RhdHVzIGNvZGVzIChub3QgMnh4KSB3aWxsIGFsd2F5cyBiZSBlcnJvcnMsXG4gICAgICAgICAgICAgICAgLy8gYnV0IGEgc3VjY2Vzc2Z1bCBzdGF0dXMgY29kZSBjYW4gc3RpbGwgcmVzdWx0IGluIGFuIGVycm9yIGlmIHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgLy8gYXNrZWQgZm9yIEpTT04gZGF0YSBhbmQgdGhlIGJvZHkgY2Fubm90IGJlIHBhcnNlZCBhcyBzdWNoLlxuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9rID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgYm9keSBuZWVkcyB0byBiZSBwYXJzZWQgYXMgSlNPTiAoaW4gbWFueSBjYXNlcyB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIC8vIHdpbGwgaGF2ZSBkb25lIHRoYXQgYWxyZWFkeSkuXG4gICAgICAgICAgICAgICAgaWYgKHJlcS5yZXNwb25zZVR5cGUgPT09ICdqc29uJyAmJiB0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgb3JpZ2luYWwgYm9keSwgYmVmb3JlIGF0dGVtcHRpbmcgWFNTSSBwcmVmaXggc3RyaXBwaW5nLlxuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvcmlnaW5hbEJvZHkgPSBib2R5O1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gYm9keS5yZXBsYWNlKFhTU0lfUFJFRklYLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRoZSBwYXJzZS4gSWYgaXQgZmFpbHMsIGEgcGFyc2UgZXJyb3Igc2hvdWxkIGJlIGRlbGl2ZXJlZCB0byB0aGUgdXNlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSAnJyA/IEpTT04ucGFyc2UoYm9keSkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgSlNPTi5wYXJzZSBmYWlsZWQsIGl0J3MgcmVhc29uYWJsZSB0byBhc3N1bWUgdGhpcyBtaWdodCBub3QgaGF2ZSBiZWVuIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpTT04gcmVzcG9uc2UuIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGJvZHkgKGluY2x1ZGluZyBhbnkgWFNTSSBwcmVmaXgpIHRvIGRlbGl2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgYmV0dGVyIGVycm9yIHJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IG9yaWdpbmFsQm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgd2FzIGFuIGVycm9yIHJlcXVlc3QgdG8gYmVnaW4gd2l0aCwgbGVhdmUgaXQgYXMgYSBzdHJpbmcsIGl0IHByb2JhYmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGlzbid0IEpTT04uIE90aGVyd2lzZSwgZGVsaXZlciB0aGUgcGFyc2luZyBlcnJvciB0byB0aGUgdXNlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW4gdGhvdWdoIHRoZSByZXNwb25zZSBzdGF0dXMgd2FzIDJ4eCwgdGhpcyBpcyBzdGlsbCBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwYXJzZSBlcnJvciBjb250YWlucyB0aGUgdGV4dCBvZiB0aGUgYm9keSB0aGF0IGZhaWxlZCB0byBwYXJzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gLyoqIEB0eXBlIHs/fSAqLyAoeyBlcnJvcjogZXJyb3IsIHRleHQ6IGJvZHkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBpcyBkZWxpdmVyZWQgb24gdGhlIGV2ZW50IHN0cmVhbS5cbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChuZXcgSHR0cFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmdWxsIGJvZHkgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIGRlbGl2ZXJlZCwgbm8gZnVydGhlciBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJlIHBvc3NpYmxlLiBUaGlzIHJlcXVlc3QgaXMgY29tcGxldGUuXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBbiB1bnN1Y2Nlc3NmdWwgcmVxdWVzdCBpcyBkZWxpdmVyZWQgb24gdGhlIGVycm9yIGNoYW5uZWwuXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZXJyb3IgaW4gdGhpcyBjYXNlIGlzIHRoZSByZXNwb25zZSBib2R5IChlcnJvciBmcm9tIHRoZSBzZXJ2ZXIpLlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFRoZSBvbkVycm9yIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHNvbWV0aGluZyBnb2VzIHdyb25nIGF0IHRoZSBuZXR3b3JrIGxldmVsLlxuICAgICAgICAgICAgLy8gQ29ubmVjdGlvbiB0aW1lb3V0LCBETlMgZXJyb3IsIG9mZmxpbmUsIGV0Yy4gVGhlc2UgYXJlIGFjdHVhbCBlcnJvcnMsIGFuZCBhcmVcbiAgICAgICAgICAgIC8vIHRyYW5zbWl0dGVkIG9uIHRoZSBlcnJvciBjaGFubmVsLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcyA9IG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0IHx8ICdVbmtub3duIEVycm9yJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihyZXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFRoZSBzZW50SGVhZGVycyBmbGFnIHRyYWNrcyB3aGV0aGVyIHRoZSBIdHRwUmVzcG9uc2VIZWFkZXJzIGV2ZW50XG4gICAgICAgICAgICAvLyBoYXMgYmVlbiBzZW50IG9uIHRoZSBzdHJlYW0uIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHRyYWNrIGlmIHByb2dyZXNzXG4gICAgICAgICAgICAvLyBpcyBlbmFibGVkIHNpbmNlIHRoZSBldmVudCB3aWxsIGJlIHNlbnQgb24gb25seSB0aGUgZmlyc3QgZG93bmxvYWRcbiAgICAgICAgICAgIC8vIHByb2dlcnNzIGV2ZW50LlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VudEhlYWRlcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIFRoZSBkb3dubG9hZCBwcm9ncmVzcyBldmVudCBoYW5kbGVyLCB3aGljaCBpcyBvbmx5IHJlZ2lzdGVyZWQgaWZcbiAgICAgICAgICAgIC8vIHByb2dyZXNzIGV2ZW50cyBhcmUgZW5hYmxlZC5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9uRG93blByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgSHR0cFJlc3BvbnNlSGVhZGVycyBldmVudCBpZiBpdCBoYXNuJ3QgYmVlbiBzZW50IGFscmVhZHkuXG4gICAgICAgICAgICAgICAgaWYgKCFzZW50SGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHBhcnRpYWxGcm9tWGhyKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZW50SGVhZGVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGJ1aWxkaW5nIHRoZSBkb3dubG9hZCBwcm9ncmVzcyBldmVudCB0byBkZWxpdmVyIG9uIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgICAgIC8vIGV2ZW50IHN0cmVhbS5cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9ncmVzc0V2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBIdHRwRXZlbnRUeXBlLkRvd25sb2FkUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlZDogZXZlbnQubG9hZGVkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgaW4gdGhlIGV2ZW50IGlmIGl0J3MgYXZhaWxhYmxlLlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzRXZlbnQudG90YWwgPSBldmVudC50b3RhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3Qgd2FzIGZvciB0ZXh0IGNvbnRlbnQgYW5kIGEgcGFydGlhbCByZXNwb25zZSBpc1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBvbiBYTUxIdHRwUmVxdWVzdCwgaW5jbHVkZSBpdCBpbiB0aGUgcHJvZ3Jlc3MgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyB0byBhbGxvdyBmb3Igc3RyZWFtaW5nIHJlYWRzLlxuICAgICAgICAgICAgICAgIGlmIChyZXEucmVzcG9uc2VUeXBlID09PSAndGV4dCcgJiYgISF4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzRXZlbnQucGFydGlhbFRleHQgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBGaW5hbGx5LCBmaXJlIHRoZSBldmVudC5cbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHByb2dyZXNzRXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFRoZSB1cGxvYWQgcHJvZ3Jlc3MgZXZlbnQgaGFuZGxlciwgd2hpY2ggaXMgb25seSByZWdpc3RlcmVkIGlmXG4gICAgICAgICAgICAvLyBwcm9ncmVzcyBldmVudHMgYXJlIGVuYWJsZWQuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvblVwUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGxvYWQgcHJvZ3Jlc3MgZXZlbnRzIGFyZSBzaW1wbGVyLiBCZWdpbiBidWlsZGluZyB0aGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAvLyBldmVudC5cbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9ncmVzcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBldmVudC5sb2FkZWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIGJlaW5nIHVwbG9hZGVkIGlzIGF2YWlsYWJsZSwgaW5jbHVkZVxuICAgICAgICAgICAgICAgIC8vIGl0LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzLnRvdGFsID0gZXZlbnQudG90YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNlbmQgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHJlZ2lzdGVyIGZvciBsb2FkIGFuZCBlcnJvciBldmVudHMuXG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIC8vIFByb2dyZXNzIGV2ZW50cyBhcmUgb25seSBlbmFibGVkIGlmIHJlcXVlc3RlZC5cbiAgICAgICAgICAgIGlmIChyZXEucmVwb3J0UHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAvLyBEb3dubG9hZCBwcm9ncmVzcyBpcyBhbHdheXMgZW5hYmxlZCBpZiByZXF1ZXN0ZWQuXG4gICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgb25Eb3duUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIC8vIFVwbG9hZCBwcm9ncmVzcyBkZXBlbmRzIG9uIHdoZXRoZXIgdGhlcmUgaXMgYSBib2R5IHRvIHVwbG9hZC5cbiAgICAgICAgICAgICAgICBpZiAocmVxQm9keSAhPT0gbnVsbCAmJiB4aHIudXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBvblVwUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcmUgdGhlIHJlcXVlc3QsIGFuZCBub3RpZnkgdGhlIGV2ZW50IHN0cmVhbSB0aGF0IGl0IHdhcyBmaXJlZC5cbiAgICAgICAgICAgIHhoci5zZW5kKHJlcUJvZHkpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7IHR5cGU6IEh0dHBFdmVudFR5cGUuU2VudCB9KTtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHJldHVybiBmcm9tIHRoZSBPYnNlcnZhYmxlIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGVcbiAgICAgICAgICAgIC8vIHJlcXVlc3QgY2FuY2VsbGF0aW9uIGhhbmRsZXIuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIE9uIGEgY2FuY2VsbGF0aW9uLCByZW1vdmUgYWxsIHJlZ2lzdGVyZWQgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgICAgIHhoci5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIHhoci5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlcG9ydFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIG9uRG93blByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcUJvZHkgIT09IG51bGwgJiYgeGhyLnVwbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIG9uVXBQcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgYWJvcnQgdGhlIGluLWZsaWdodCByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdHRwWGhyQmFja2VuZC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgSHR0cFhockJhY2tlbmQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogWGhyRmFjdG9yeSwgfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBIdHRwWGhyQmFja2VuZDtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBYU1JGX0NPT0tJRV9OQU1FID0gbmV3IF9hbmd1bGFyX2NvcmUuSW5qZWN0aW9uVG9rZW4oJ1hTUkZfQ09PS0lFX05BTUUnKTtcbnZhciBYU1JGX0hFQURFUl9OQU1FID0gbmV3IF9hbmd1bGFyX2NvcmUuSW5qZWN0aW9uVG9rZW4oJ1hTUkZfSEVBREVSX05BTUUnKTtcbi8qKlxuICogUmV0cmlldmVzIHRoZSBjdXJyZW50IFhTUkYgdG9rZW4gdG8gdXNlIHdpdGggdGhlIG5leHQgb3V0Z29pbmcgcmVxdWVzdC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgSHR0cFhzcmZUb2tlbkV4dHJhY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwWHNyZlRva2VuRXh0cmFjdG9yKCkge1xuICAgIH1cbiAgICByZXR1cm4gSHR0cFhzcmZUb2tlbkV4dHJhY3Rvcjtcbn0oKSk7XG4vKipcbiAqIGBIdHRwWHNyZlRva2VuRXh0cmFjdG9yYCB3aGljaCByZXRyaWV2ZXMgdGhlIHRva2VuIGZyb20gYSBjb29raWUuXG4gKi9cbnZhciBIdHRwWHNyZkNvb2tpZUV4dHJhY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwWHNyZkNvb2tpZUV4dHJhY3Rvcihkb2MsIHBsYXRmb3JtLCBjb29raWVOYW1lKSB7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gcGxhdGZvcm07XG4gICAgICAgIHRoaXMuY29va2llTmFtZSA9IGNvb2tpZU5hbWU7XG4gICAgICAgIHRoaXMubGFzdENvb2tpZVN0cmluZyA9ICcnO1xuICAgICAgICB0aGlzLmxhc3RUb2tlbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbCBmb3IgdGVzdGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJzZUNvdW50ID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwWHNyZkNvb2tpZUV4dHJhY3Rvci5wcm90b3R5cGUuZ2V0VG9rZW4gPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGxhdGZvcm0gPT09ICdzZXJ2ZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb29raWVTdHJpbmcgPSB0aGlzLmRvYy5jb29raWUgfHwgJyc7XG4gICAgICAgIGlmIChjb29raWVTdHJpbmcgIT09IHRoaXMubGFzdENvb2tpZVN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUNvdW50Kys7XG4gICAgICAgICAgICB0aGlzLmxhc3RUb2tlbiA9IF9hbmd1bGFyX2NvbW1vbi7JtXBhcnNlQ29va2llVmFsdWUoY29va2llU3RyaW5nLCB0aGlzLmNvb2tpZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29va2llU3RyaW5nID0gY29va2llU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RUb2tlbjtcbiAgICB9O1xuICAgIEh0dHBYc3JmQ29va2llRXh0cmFjdG9yLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBIdHRwWHNyZkNvb2tpZUV4dHJhY3Rvci5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbX2FuZ3VsYXJfY29tbW9uLkRPQ1VNRU5ULF0gfSxdIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdCwgYXJnczogW19hbmd1bGFyX2NvcmUuUExBVEZPUk1fSUQsXSB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbWFNSRl9DT09LSUVfTkFNRSxdIH0sXSB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEh0dHBYc3JmQ29va2llRXh0cmFjdG9yO1xufSgpKTtcbi8qKlxuICogYEh0dHBJbnRlcmNlcHRvcmAgd2hpY2ggYWRkcyBhbiBYU1JGIHRva2VuIHRvIGVsaWdpYmxlIG91dGdvaW5nIHJlcXVlc3RzLlxuICovXG52YXIgSHR0cFhzcmZJbnRlcmNlcHRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwWHNyZkludGVyY2VwdG9yKHRva2VuU2VydmljZSwgaGVhZGVyTmFtZSkge1xuICAgICAgICB0aGlzLnRva2VuU2VydmljZSA9IHRva2VuU2VydmljZTtcbiAgICAgICAgdGhpcy5oZWFkZXJOYW1lID0gaGVhZGVyTmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXFcbiAgICAgKiBAcGFyYW0gez99IG5leHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEh0dHBYc3JmSW50ZXJjZXB0b3IucHJvdG90eXBlLmludGVyY2VwdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVxXG4gICAgICogQHBhcmFtIHs/fSBuZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVxLCBuZXh0KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGxjVXJsID0gcmVxLnVybC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvLyBTa2lwIGJvdGggbm9uLW11dGF0aW5nIHJlcXVlc3RzIGFuZCBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAvLyBOb24tbXV0YXRpbmcgcmVxdWVzdHMgZG9uJ3QgcmVxdWlyZSBhIHRva2VuLCBhbmQgYWJzb2x1dGUgVVJMcyByZXF1aXJlIHNwZWNpYWwgaGFuZGxpbmdcbiAgICAgICAgLy8gYW55d2F5IGFzIHRoZSBjb29raWUgc2V0XG4gICAgICAgIC8vIG9uIG91ciBvcmlnaW4gaXMgbm90IHRoZSBzYW1lIGFzIHRoZSB0b2tlbiBleHBlY3RlZCBieSBhbm90aGVyIG9yaWdpbi5cbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnIHx8IHJlcS5tZXRob2QgPT09ICdIRUFEJyB8fCBsY1VybC5zdGFydHNXaXRoKCdodHRwOi8vJykgfHxcbiAgICAgICAgICAgIGxjVXJsLnN0YXJ0c1dpdGgoJ2h0dHBzOi8vJykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRva2VuID0gdGhpcy50b2tlblNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgLy8gQmUgY2FyZWZ1bCBub3QgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIGhlYWRlciBvZiB0aGUgc2FtZSBuYW1lLlxuICAgICAgICBpZiAodG9rZW4gIT09IG51bGwgJiYgIXJlcS5oZWFkZXJzLmhhcyh0aGlzLmhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICByZXEgPSByZXEuY2xvbmUoeyBoZWFkZXJzOiByZXEuaGVhZGVycy5zZXQodGhpcy5oZWFkZXJOYW1lLCB0b2tlbikgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgfTtcbiAgICBIdHRwWHNyZkludGVyY2VwdG9yLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBIdHRwWHNyZkludGVyY2VwdG9yLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEh0dHBYc3JmVG9rZW5FeHRyYWN0b3IsIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdCwgYXJnczogW1hTUkZfSEVBREVSX05BTUUsXSB9LF0gfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBIdHRwWHNyZkludGVyY2VwdG9yO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb25zdHJ1Y3RzIGFuIGBIdHRwSGFuZGxlcmAgdGhhdCBhcHBsaWVzIGEgYnVuY2ggb2YgYEh0dHBJbnRlcmNlcHRvcmBzXG4gKiB0byBhIHJlcXVlc3QgYmVmb3JlIHBhc3NpbmcgaXQgdG8gdGhlIGdpdmVuIGBIdHRwQmFja2VuZGAuXG4gKlxuICogTWVhbnQgdG8gYmUgdXNlZCBhcyBhIGZhY3RvcnkgZnVuY3Rpb24gd2l0aGluIGBIdHRwQ2xpZW50TW9kdWxlYC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEBwYXJhbSB7P30gYmFja2VuZFxuICogQHBhcmFtIHs/PX0gaW50ZXJjZXB0b3JzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbnRlcmNlcHRpbmdIYW5kbGVyKGJhY2tlbmQsIGludGVyY2VwdG9ycykge1xuICAgIGlmIChpbnRlcmNlcHRvcnMgPT09IHZvaWQgMCkgeyBpbnRlcmNlcHRvcnMgPSBbXTsgfVxuICAgIGlmICghaW50ZXJjZXB0b3JzKSB7XG4gICAgICAgIHJldHVybiBiYWNrZW5kO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJjZXB0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChuZXh0LCBpbnRlcmNlcHRvcikgeyByZXR1cm4gbmV3IEh0dHBJbnRlcmNlcHRvckhhbmRsZXIobmV4dCwgaW50ZXJjZXB0b3IpOyB9LCBiYWNrZW5kKTtcbn1cbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbiB0aGF0IGRldGVybWluZXMgd2hlcmUgdG8gc3RvcmUgSlNPTlAgY2FsbGJhY2tzLlxuICpcbiAqIE9yZGluYXJpbHkgSlNPTlAgY2FsbGJhY2tzIGFyZSBzdG9yZWQgb24gdGhlIGB3aW5kb3dgIG9iamVjdCwgYnV0IHRoaXMgbWF5IG5vdCBleGlzdFxuICogaW4gdGVzdCBlbnZpcm9ubWVudHMuIEluIHRoYXQgY2FzZSwgY2FsbGJhY2tzIGFyZSBzdG9yZWQgb24gYW4gYW5vbnltb3VzIG9iamVjdCBpbnN0ZWFkLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24ganNvbnBDYWxsYmFja0NvbnRleHQoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbi8qKlxuICogYE5nTW9kdWxlYCB3aGljaCBhZGRzIFhTUkYgcHJvdGVjdGlvbiBzdXBwb3J0IHRvIG91dGdvaW5nIHJlcXVlc3RzLlxuICpcbiAqIFByb3ZpZGVkIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgYSBjb29raWUtYmFzZWQgWFNSRiBwcm90ZWN0aW9uIHN5c3RlbSwgdGhpc1xuICogbW9kdWxlIGNhbiBiZSB1c2VkIGRpcmVjdGx5IHRvIGNvbmZpZ3VyZSBYU1JGIHByb3RlY3Rpb24gd2l0aCB0aGUgY29ycmVjdFxuICogY29va2llIGFuZCBoZWFkZXIgbmFtZXMuXG4gKlxuICogSWYgbm8gc3VjaCBuYW1lcyBhcmUgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIHRvIHVzZSBgWC1YU1JGLVRPS0VOYCBmb3JcbiAqIHRoZSBoZWFkZXIgbmFtZSBhbmQgYFhTUkYtVE9LRU5gIGZvciB0aGUgY29va2llIG5hbWUuXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBIdHRwQ2xpZW50WHNyZk1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50WHNyZk1vZHVsZSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSB0aGUgZGVmYXVsdCBYU1JGIHByb3RlY3Rpb24uXG4gICAgICovXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSB0aGUgZGVmYXVsdCBYU1JGIHByb3RlY3Rpb24uXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBIdHRwQ2xpZW50WHNyZk1vZHVsZS5kaXNhYmxlID0gLyoqXG4gICAgICogRGlzYWJsZSB0aGUgZGVmYXVsdCBYU1JGIHByb3RlY3Rpb24uXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogSHR0cENsaWVudFhzcmZNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEh0dHBYc3JmSW50ZXJjZXB0b3IsIHVzZUNsYXNzOiBOb29wSW50ZXJjZXB0b3IgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmUgWFNSRiBwcm90ZWN0aW9uIHRvIHVzZSB0aGUgZ2l2ZW4gY29va2llIG5hbWUgb3IgaGVhZGVyIG5hbWUsXG4gICAgICogb3IgdGhlIGRlZmF1bHQgbmFtZXMgKGFzIGRlc2NyaWJlZCBhYm92ZSkgaWYgbm90IHByb3ZpZGVkLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZSBYU1JGIHByb3RlY3Rpb24gdG8gdXNlIHRoZSBnaXZlbiBjb29raWUgbmFtZSBvciBoZWFkZXIgbmFtZSxcbiAgICAgKiBvciB0aGUgZGVmYXVsdCBuYW1lcyAoYXMgZGVzY3JpYmVkIGFib3ZlKSBpZiBub3QgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSHR0cENsaWVudFhzcmZNb2R1bGUud2l0aE9wdGlvbnMgPSAvKipcbiAgICAgKiBDb25maWd1cmUgWFNSRiBwcm90ZWN0aW9uIHRvIHVzZSB0aGUgZ2l2ZW4gY29va2llIG5hbWUgb3IgaGVhZGVyIG5hbWUsXG4gICAgICogb3IgdGhlIGRlZmF1bHQgbmFtZXMgKGFzIGRlc2NyaWJlZCBhYm92ZSkgaWYgbm90IHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogSHR0cENsaWVudFhzcmZNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvb2tpZU5hbWUgPyB7IHByb3ZpZGU6IFhTUkZfQ09PS0lFX05BTUUsIHVzZVZhbHVlOiBvcHRpb25zLmNvb2tpZU5hbWUgfSA6IFtdLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyTmFtZSA/IHsgcHJvdmlkZTogWFNSRl9IRUFERVJfTkFNRSwgdXNlVmFsdWU6IG9wdGlvbnMuaGVhZGVyTmFtZSB9IDogW10sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgSHR0cENsaWVudFhzcmZNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIEh0dHBYc3JmSW50ZXJjZXB0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VFeGlzdGluZzogSHR0cFhzcmZJbnRlcmNlcHRvciwgbXVsdGk6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSHR0cFhzcmZUb2tlbkV4dHJhY3RvciwgdXNlQ2xhc3M6IEh0dHBYc3JmQ29va2llRXh0cmFjdG9yIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFhTUkZfQ09PS0lFX05BTUUsIHVzZVZhbHVlOiAnWFNSRi1UT0tFTicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogWFNSRl9IRUFERVJfTkFNRSwgdXNlVmFsdWU6ICdYLVhTUkYtVE9LRU4nIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBIdHRwQ2xpZW50WHNyZk1vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBIdHRwQ2xpZW50WHNyZk1vZHVsZTtcbn0oKSk7XG4vKipcbiAqIGBOZ01vZHVsZWAgd2hpY2ggcHJvdmlkZXMgdGhlIGBIdHRwQ2xpZW50YCBhbmQgYXNzb2NpYXRlZCBzZXJ2aWNlcy5cbiAqXG4gKiBJbnRlcmNlcHRvcnMgY2FuIGJlIGFkZGVkIHRvIHRoZSBjaGFpbiBiZWhpbmQgYEh0dHBDbGllbnRgIGJ5IGJpbmRpbmcgdGhlbVxuICogdG8gdGhlIG11bHRpcHJvdmlkZXIgZm9yIGBIVFRQX0lOVEVSQ0VQVE9SU2AuXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBIdHRwQ2xpZW50TW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEh0dHBDbGllbnRNb2R1bGUoKSB7XG4gICAgfVxuICAgIEh0dHBDbGllbnRNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBIdHRwQ2xpZW50WHNyZk1vZHVsZS53aXRoT3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgSHR0cENsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHBIYW5kbGVyIGlzIHRoZSBiYWNrZW5kICsgaW50ZXJjZXB0b3JzIGFuZCBpcyBjb25zdHJ1Y3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNpbmcgdGhlIGludGVyY2VwdGluZ0hhbmRsZXIgZmFjdG9yeSBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBIdHRwSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBpbnRlcmNlcHRpbmdIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHM6IFtIdHRwQmFja2VuZCwgW25ldyBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsKCksIG5ldyBfYW5ndWxhcl9jb3JlLkluamVjdChIVFRQX0lOVEVSQ0VQVE9SUyldXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBIdHRwWGhyQmFja2VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSHR0cEJhY2tlbmQsIHVzZUV4aXN0aW5nOiBIdHRwWGhyQmFja2VuZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQnJvd3NlclhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogWGhyRmFjdG9yeSwgdXNlRXhpc3Rpbmc6IEJyb3dzZXJYaHIgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEh0dHBDbGllbnRNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gSHR0cENsaWVudE1vZHVsZTtcbn0oKSk7XG4vKipcbiAqIGBOZ01vZHVsZWAgd2hpY2ggZW5hYmxlcyBKU09OUCBzdXBwb3J0IGluIGBIdHRwQ2xpZW50YC5cbiAqXG4gKiBXaXRob3V0IHRoaXMgbW9kdWxlLCBKc29ucCByZXF1ZXN0cyB3aWxsIHJlYWNoIHRoZSBiYWNrZW5kXG4gKiB3aXRoIG1ldGhvZCBKU09OUCwgd2hlcmUgdGhleSdsbCBiZSByZWplY3RlZC5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEh0dHBDbGllbnRKc29ucE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50SnNvbnBNb2R1bGUoKSB7XG4gICAgfVxuICAgIEh0dHBDbGllbnRKc29ucE1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgSnNvbnBDbGllbnRCYWNrZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBKc29ucENhbGxiYWNrQ29udGV4dCwgdXNlRmFjdG9yeToganNvbnBDYWxsYmFja0NvbnRleHQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBKc29ucEludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgSHR0cENsaWVudEpzb25wTW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIEh0dHBDbGllbnRKc29ucE1vZHVsZTtcbn0oKSk7XG5cbmV4cG9ydHMuSHR0cEJhY2tlbmQgPSBIdHRwQmFja2VuZDtcbmV4cG9ydHMuSHR0cEhhbmRsZXIgPSBIdHRwSGFuZGxlcjtcbmV4cG9ydHMuSHR0cENsaWVudCA9IEh0dHBDbGllbnQ7XG5leHBvcnRzLkh0dHBIZWFkZXJzID0gSHR0cEhlYWRlcnM7XG5leHBvcnRzLkhUVFBfSU5URVJDRVBUT1JTID0gSFRUUF9JTlRFUkNFUFRPUlM7XG5leHBvcnRzLkpzb25wQ2xpZW50QmFja2VuZCA9IEpzb25wQ2xpZW50QmFja2VuZDtcbmV4cG9ydHMuSnNvbnBJbnRlcmNlcHRvciA9IEpzb25wSW50ZXJjZXB0b3I7XG5leHBvcnRzLkh0dHBDbGllbnRKc29ucE1vZHVsZSA9IEh0dHBDbGllbnRKc29ucE1vZHVsZTtcbmV4cG9ydHMuSHR0cENsaWVudE1vZHVsZSA9IEh0dHBDbGllbnRNb2R1bGU7XG5leHBvcnRzLkh0dHBDbGllbnRYc3JmTW9kdWxlID0gSHR0cENsaWVudFhzcmZNb2R1bGU7XG5leHBvcnRzLsm1aW50ZXJjZXB0aW5nSGFuZGxlciA9IGludGVyY2VwdGluZ0hhbmRsZXI7XG5leHBvcnRzLkh0dHBQYXJhbXMgPSBIdHRwUGFyYW1zO1xuZXhwb3J0cy5IdHRwVXJsRW5jb2RpbmdDb2RlYyA9IEh0dHBVcmxFbmNvZGluZ0NvZGVjO1xuZXhwb3J0cy5IdHRwUmVxdWVzdCA9IEh0dHBSZXF1ZXN0O1xuZXhwb3J0cy5IdHRwRXJyb3JSZXNwb25zZSA9IEh0dHBFcnJvclJlc3BvbnNlO1xuZXhwb3J0cy5IdHRwRXZlbnRUeXBlID0gSHR0cEV2ZW50VHlwZTtcbmV4cG9ydHMuSHR0cEhlYWRlclJlc3BvbnNlID0gSHR0cEhlYWRlclJlc3BvbnNlO1xuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwUmVzcG9uc2U7XG5leHBvcnRzLkh0dHBSZXNwb25zZUJhc2UgPSBIdHRwUmVzcG9uc2VCYXNlO1xuZXhwb3J0cy5IdHRwWGhyQmFja2VuZCA9IEh0dHBYaHJCYWNrZW5kO1xuZXhwb3J0cy5YaHJGYWN0b3J5ID0gWGhyRmFjdG9yeTtcbmV4cG9ydHMuSHR0cFhzcmZUb2tlbkV4dHJhY3RvciA9IEh0dHBYc3JmVG9rZW5FeHRyYWN0b3I7XG5leHBvcnRzLsm1YSA9IE5vb3BJbnRlcmNlcHRvcjtcbmV4cG9ydHMuybViID0gSnNvbnBDYWxsYmFja0NvbnRleHQ7XG5leHBvcnRzLsm1YyA9IGpzb25wQ2FsbGJhY2tDb250ZXh0O1xuZXhwb3J0cy7JtWQgPSBCcm93c2VyWGhyO1xuZXhwb3J0cy7JtWcgPSBIdHRwWHNyZkNvb2tpZUV4dHJhY3RvcjtcbmV4cG9ydHMuybVoID0gSHR0cFhzcmZJbnRlcmNlcHRvcjtcbmV4cG9ydHMuybVlID0gWFNSRl9DT09LSUVfTkFNRTtcbmV4cG9ydHMuybVmID0gWFNSRl9IRUFERVJfTkFNRTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi1odHRwLnVtZC5qcy5tYXBcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AYW5ndWxhci9jb21tb24vYnVuZGxlcy9jb21tb24taHR0cC51bWQuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhciB2NS4xLjNcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKSwgcmVxdWlyZSgnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlcicpLCByZXF1aXJlKCdAYW5ndWxhci9hbmltYXRpb25zJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnJvd3NlcicpKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSgnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJywgWydleHBvcnRzJywgJ0Bhbmd1bGFyL2NvcmUnLCAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlcicsICdAYW5ndWxhci9hbmltYXRpb25zJywgJ0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnJvd3NlciddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwubmcgPSBnbG9iYWwubmcgfHwge30sIGdsb2JhbC5uZy5wbGF0Zm9ybUJyb3dzZXIgPSBnbG9iYWwubmcucGxhdGZvcm1Ccm93c2VyIHx8IHt9LCBnbG9iYWwubmcucGxhdGZvcm1Ccm93c2VyLmFuaW1hdGlvbnMgPSB7fSksZ2xvYmFsLm5nLmNvcmUsZ2xvYmFsLm5nLnBsYXRmb3JtQnJvd3NlcixnbG9iYWwubmcuYW5pbWF0aW9ucyxnbG9iYWwubmcuYW5pbWF0aW9ucy5icm93c2VyKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cyxfYW5ndWxhcl9jb3JlLF9hbmd1bGFyX3BsYXRmb3JtQnJvd3NlcixfYW5ndWxhcl9hbmltYXRpb25zLF9hbmd1bGFyX2FuaW1hdGlvbnNfYnJvd3NlcikgeyAndXNlIHN0cmljdCc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XG5cbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhciB2NS4xLjNcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJyb3dzZXJBbmltYXRpb25CdWlsZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJBbmltYXRpb25CdWlsZGVyKHJvb3RSZW5kZXJlciwgZG9jKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9uZXh0QW5pbWF0aW9uSWQgPSAwO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0eXBlRGF0YSA9IC8qKiBAdHlwZSB7P30gKi8gKHtcbiAgICAgICAgICAgIGlkOiAnMCcsXG4gICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBfYW5ndWxhcl9jb3JlLlZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICBzdHlsZXM6IFtdLFxuICAgICAgICAgICAgZGF0YTogeyBhbmltYXRpb246IFtdIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9yZW5kZXJlciA9IC8qKiBAdHlwZSB7P30gKi8gKHJvb3RSZW5kZXJlci5jcmVhdGVSZW5kZXJlcihkb2MuYm9keSwgdHlwZURhdGEpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGFuaW1hdGlvblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBhbmltYXRpb25cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaWQgPSB0aGlzLl9uZXh0QW5pbWF0aW9uSWQudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5fbmV4dEFuaW1hdGlvbklkKys7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVudHJ5ID0gQXJyYXkuaXNBcnJheShhbmltYXRpb24pID8gX2FuZ3VsYXJfYW5pbWF0aW9ucy5zZXF1ZW5jZShhbmltYXRpb24pIDogYW5pbWF0aW9uO1xuICAgICAgICBpc3N1ZUFuaW1hdGlvbkNvbW1hbmQodGhpcy5fcmVuZGVyZXIsIG51bGwsIGlkLCAncmVnaXN0ZXInLCBbZW50cnldKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyQW5pbWF0aW9uRmFjdG9yeShpZCwgdGhpcy5fcmVuZGVyZXIpO1xuICAgIH07XG4gICAgQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEJyb3dzZXJBbmltYXRpb25CdWlsZGVyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuUmVuZGVyZXJGYWN0b3J5MiwgfSxcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkRPQ1VNRU5ULF0gfSxdIH0sXG4gICAgXTsgfTtcbiAgICByZXR1cm4gQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXI7XG59KF9hbmd1bGFyX2FuaW1hdGlvbnMuQW5pbWF0aW9uQnVpbGRlcikpO1xudmFyIEJyb3dzZXJBbmltYXRpb25GYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCcm93c2VyQW5pbWF0aW9uRmFjdG9yeSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCcm93c2VyQW5pbWF0aW9uRmFjdG9yeShfaWQsIF9yZW5kZXJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5faWQgPSBfaWQ7XG4gICAgICAgIF90aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCcm93c2VyQW5pbWF0aW9uRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXJlckFuaW1hdGlvblBsYXllcih0aGlzLl9pZCwgZWxlbWVudCwgb3B0aW9ucyB8fCB7fSwgdGhpcy5fcmVuZGVyZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJBbmltYXRpb25GYWN0b3J5O1xufShfYW5ndWxhcl9hbmltYXRpb25zLkFuaW1hdGlvbkZhY3RvcnkpKTtcbnZhciBSZW5kZXJlckFuaW1hdGlvblBsYXllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlckFuaW1hdGlvblBsYXllcihpZCwgZWxlbWVudCwgb3B0aW9ucywgX3JlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XG4gICAgICAgIHRoaXMucGFyZW50UGxheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvdGFsVGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbW1hbmQoJ2NyZWF0ZScsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5fbGlzdGVuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXIubGlzdGVuKHRoaXMuZWxlbWVudCwgXCJAQFwiICsgdGhpcy5pZCArIFwiOlwiICsgZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbW1hbmRcbiAgICAgKiBAcGFyYW0gey4uLj99IGFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5fY29tbWFuZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tbWFuZFxuICAgICAqIEBwYXJhbSB7Li4uP30gYXJnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbW1hbmQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzc3VlQW5pbWF0aW9uQ29tbWFuZCh0aGlzLl9yZW5kZXJlciwgdGhpcy5lbGVtZW50LCB0aGlzLmlkLCBjb21tYW5kLCBhcmdzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5vbkRvbmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fbGlzdGVuKCdkb25lJywgZm4pOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5vblN0YXJ0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7IHRoaXMuX2xpc3Rlbignc3RhcnQnLCBmbik7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLm9uRGVzdHJveSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyB0aGlzLl9saXN0ZW4oJ2Rlc3Ryb3knLCBmbik7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFuaW1hdGlvblBsYXllci5wcm90b3R5cGUuaW5pdCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9jb21tYW5kKCdpbml0Jyk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFuaW1hdGlvblBsYXllci5wcm90b3R5cGUuaGFzU3RhcnRlZCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhcnRlZDsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvbW1hbmQoJ3BsYXknKTtcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9jb21tYW5kKCdwYXVzZScpOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLnJlc3RhcnQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgdGhpcy5fY29tbWFuZCgncmVzdGFydCcpOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLmZpbmlzaCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9jb21tYW5kKCdmaW5pc2gnKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5kZXN0cm95ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHRoaXMuX2NvbW1hbmQoJ2Rlc3Ryb3knKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQW5pbWF0aW9uUGxheWVyLnByb3RvdHlwZS5yZXNldCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9jb21tYW5kKCdyZXNldCcpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLnNldFBvc2l0aW9uID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocCkgeyB0aGlzLl9jb21tYW5kKCdzZXRQb3NpdGlvbicsIHApOyB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBbmltYXRpb25QbGF5ZXIucHJvdG90eXBlLmdldFBvc2l0aW9uID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9O1xuICAgIHJldHVybiBSZW5kZXJlckFuaW1hdGlvblBsYXllcjtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gcmVuZGVyZXJcbiAqIEBwYXJhbSB7P30gZWxlbWVudFxuICogQHBhcmFtIHs/fSBpZFxuICogQHBhcmFtIHs/fSBjb21tYW5kXG4gKiBAcGFyYW0gez99IGFyZ3NcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGlzc3VlQW5pbWF0aW9uQ29tbWFuZChyZW5kZXJlciwgZWxlbWVudCwgaWQsIGNvbW1hbmQsIGFyZ3MpIHtcbiAgICByZXR1cm4gcmVuZGVyZXIuc2V0UHJvcGVydHkoZWxlbWVudCwgXCJAQFwiICsgaWQgKyBcIjpcIiArIGNvbW1hbmQsIGFyZ3MpO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG52YXIgQU5JTUFUSU9OX1BSRUZJWCA9ICdAJztcbnZhciBESVNBQkxFX0FOSU1BVElPTlNfRkxBRyA9ICdALmRpc2FibGVkJztcbnZhciBBbmltYXRpb25SZW5kZXJlckZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5KGRlbGVnYXRlLCBlbmdpbmUsIF96b25lKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIHRoaXMuX3pvbmUgPSBfem9uZTtcbiAgICAgICAgdGhpcy5fY3VycmVudElkID0gMDtcbiAgICAgICAgdGhpcy5fbWljcm90YXNrSWQgPSAxO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25DYWxsYmFja3NCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fY2RSZWN1ckRlcHRoID0gMDtcbiAgICAgICAgZW5naW5lLm9uUmVtb3ZhbENvbXBsZXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGRlbGVnYXRlKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiBpZiBhbiBjb21wb25lbnQgZWxlbWVudCBoYXMgYSBsZWF2ZSBhbmltYXRpb24sIGFuZCB0aGUgY29tcG9uZW50XG4gICAgICAgICAgICAvLyBhIGhvc3QgbGVhdmUgYW5pbWF0aW9uLCB0aGUgdmlldyBlbmdpbmUgd2lsbCBjYWxsIGByZW1vdmVDaGlsZGAgZm9yIHRoZSBwYXJlbnRcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCByZW5kZXJlciBhcyB3ZWxsIGFzIGZvciB0aGUgY2hpbGQgY29tcG9uZW50IHJlbmRlcmVyLlxuICAgICAgICAgICAgLy8gVGhlcmVmb3JlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGFscmVhZHkgcmVtb3ZlZCB0aGUgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZSAmJiBkZWxlZ2F0ZS5wYXJlbnROb2RlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVsZWdhdGUucmVtb3ZlQ2hpbGQoZWxlbWVudC5wYXJlbnROb2RlLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBob3N0RWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVSZW5kZXJlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChob3N0RWxlbWVudCwgdHlwZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBFTVBUWV9OQU1FU1BBQ0VfSUQgPSAnJztcbiAgICAgICAgLy8gY2FjaGUgdGhlIGRlbGVnYXRlcyB0byBmaW5kIG91dCB3aGljaCBjYWNoZWQgZGVsZWdhdGUgY2FuXG4gICAgICAgIC8vIGJlIHVzZWQgYnkgd2hpY2ggY2FjaGVkIHJlbmRlcmVyXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlbGVnYXRlID0gdGhpcy5kZWxlZ2F0ZS5jcmVhdGVSZW5kZXJlcihob3N0RWxlbWVudCwgdHlwZSk7XG4gICAgICAgIGlmICghaG9zdEVsZW1lbnQgfHwgIXR5cGUgfHwgIXR5cGUuZGF0YSB8fCAhdHlwZS5kYXRhWydhbmltYXRpb24nXSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlckNhY2hlLmdldChkZWxlZ2F0ZSk7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIgPSBuZXcgQmFzZUFuaW1hdGlvblJlbmRlcmVyKEVNUFRZX05BTUVTUEFDRV9JRCwgZGVsZWdhdGUsIHRoaXMuZW5naW5lKTtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGNhY2hlIHRoaXMgcmVzdWx0IHdoZW4gdGhlIGJhc2UgcmVuZGVyZXIgaXMgdXNlZFxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyQ2FjaGUuc2V0KGRlbGVnYXRlLCByZW5kZXJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcG9uZW50SWQgPSB0eXBlLmlkO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuYW1lc3BhY2VJZCA9IHR5cGUuaWQgKyAnLScgKyB0aGlzLl9jdXJyZW50SWQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRJZCsrO1xuICAgICAgICB0aGlzLmVuZ2luZS5yZWdpc3RlcihuYW1lc3BhY2VJZCwgaG9zdEVsZW1lbnQpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbmltYXRpb25UcmlnZ2VycyA9IC8qKiBAdHlwZSB7P30gKi8gKHR5cGUuZGF0YVsnYW5pbWF0aW9uJ10pO1xuICAgICAgICBhbmltYXRpb25UcmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW5naW5lLnJlZ2lzdGVyVHJpZ2dlcihjb21wb25lbnRJZCwgbmFtZXNwYWNlSWQsIGhvc3RFbGVtZW50LCB0cmlnZ2VyLm5hbWUsIHRyaWdnZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb25SZW5kZXJlcih0aGlzLCBuYW1lc3BhY2VJZCwgZGVsZWdhdGUsIHRoaXMuZW5naW5lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5LnByb3RvdHlwZS5iZWdpbiA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jZFJlY3VyRGVwdGgrKztcbiAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUuYmVnaW4pIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuYmVnaW4oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25SZW5kZXJlckZhY3RvcnkucHJvdG90eXBlLl9zY2hlZHVsZUNvdW50VGFzayA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBab25lLmN1cnJlbnQuc2NoZWR1bGVNaWNyb1Rhc2soJ2luY3JlbWVuZXQgdGhlIGFuaW1hdGlvbiBtaWNyb3Rhc2snLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fbWljcm90YXNrSWQrKzsgfSk7XG4gICAgfTtcbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvdW50XG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEBwYXJhbSB7P30gZGF0YVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5LnByb3RvdHlwZS5zY2hlZHVsZUxpc3RlbmVyQ2FsbGJhY2sgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvdW50XG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEBwYXJhbSB7P30gZGF0YVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvdW50LCBmbiwgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoY291bnQgPj0gMCAmJiBjb3VudCA8IHRoaXMuX21pY3JvdGFza0lkKSB7XG4gICAgICAgICAgICB0aGlzLl96b25lLnJ1bihmdW5jdGlvbiAoKSB7IHJldHVybiBmbihkYXRhKTsgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkNhbGxiYWNrc0J1ZmZlci5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG51bGwpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl96b25lLnJ1bihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25DYWxsYmFja3NCdWZmZXIuZm9yRWFjaChmdW5jdGlvbiAodHVwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHR1cGxlWzBdLCBkYXRhID0gdHVwbGVbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmbihkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25DYWxsYmFja3NCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkNhbGxiYWNrc0J1ZmZlci5wdXNoKFtmbiwgZGF0YV0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25SZW5kZXJlckZhY3RvcnkucHJvdG90eXBlLmVuZCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jZFJlY3VyRGVwdGgtLTtcbiAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IGFuaW1hdGlvbnMgZnJvbSBydW5uaW5nIHR3aWNlIHdoZW4gYW4gaW5uZXJcbiAgICAgICAgLy8gY29tcG9uZW50IGRvZXMgQ0Qgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgaW5zdGVkIGhhcyBpbnNlcnRlZCBpdFxuICAgICAgICBpZiAodGhpcy5fY2RSZWN1ckRlcHRoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zY2hlZHVsZUNvdW50VGFzaygpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVuZ2luZS5mbHVzaChfdGhpcy5fbWljcm90YXNrSWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUuZW5kKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeS5wcm90b3R5cGUud2hlblJlbmRlcmluZ0RvbmUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW5naW5lLndoZW5SZW5kZXJpbmdEb25lKCk7IH07XG4gICAgQW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBBbmltYXRpb25SZW5kZXJlckZhY3RvcnkuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5SZW5kZXJlckZhY3RvcnkyLCB9LFxuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2FuaW1hdGlvbnNfYnJvd3Nlci7JtUFuaW1hdGlvbkVuZ2luZSwgfSxcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBBbmltYXRpb25SZW5kZXJlckZhY3Rvcnk7XG59KCkpO1xudmFyIEJhc2VBbmltYXRpb25SZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlQW5pbWF0aW9uUmVuZGVyZXIobmFtZXNwYWNlSWQsIGRlbGVnYXRlLCBlbmdpbmUpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2VJZCA9IG5hbWVzcGFjZUlkO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuICAgICAgICB0aGlzLmRlc3Ryb3lOb2RlID0gdGhpcy5kZWxlZ2F0ZS5kZXN0cm95Tm9kZSA/IGZ1bmN0aW9uIChuKSB7IHJldHVybiAoKGRlbGVnYXRlLmRlc3Ryb3lOb2RlKSkobik7IH0gOiBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZSwgXCJkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUuZGF0YTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUuZGVzdHJveSh0aGlzLm5hbWVzcGFjZUlkLCB0aGlzLmRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5kZXN0cm95KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEJhc2VBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5hbWUsIG5hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5jcmVhdGVFbGVtZW50KG5hbWUsIG5hbWVzcGFjZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNvbW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUuY3JlYXRlQ29tbWVudCh2YWx1ZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLmRlbGVnYXRlLmNyZWF0ZVRleHQodmFsdWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBuZXdDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBuZXdDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgbmV3Q2hpbGQpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5hcHBlbmRDaGlsZChwYXJlbnQsIG5ld0NoaWxkKTtcbiAgICAgICAgdGhpcy5lbmdpbmUub25JbnNlcnQodGhpcy5uYW1lc3BhY2VJZCwgbmV3Q2hpbGQsIHBhcmVudCwgZmFsc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkXG4gICAgICogQHBhcmFtIHs/fSByZWZDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcGFyYW0gez99IHJlZkNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50LCBuZXdDaGlsZCwgcmVmQ2hpbGQpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5pbnNlcnRCZWZvcmUocGFyZW50LCBuZXdDaGlsZCwgcmVmQ2hpbGQpO1xuICAgICAgICB0aGlzLmVuZ2luZS5vbkluc2VydCh0aGlzLm5hbWVzcGFjZUlkLCBuZXdDaGlsZCwgcGFyZW50LCB0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBvbGRDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBvbGRDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgb2xkQ2hpbGQpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25SZW1vdmUodGhpcy5uYW1lc3BhY2VJZCwgb2xkQ2hpbGQsIHRoaXMuZGVsZWdhdGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3Rvck9yTm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5zZWxlY3RSb290RWxlbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3Rvck9yTm9kZSkgeyByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5zZWxlY3RSb290RWxlbWVudChzZWxlY3Rvck9yTm9kZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLnBhcmVudE5vZGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiB0aGlzLmRlbGVnYXRlLnBhcmVudE5vZGUobm9kZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLm5leHRTaWJsaW5nID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5uZXh0U2libGluZyhub2RlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWx1ZSwgbmFtZXNwYWNlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuc2V0QXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSwgbmFtZXNwYWNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEJhc2VBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVBdHRyaWJ1dGUoZWwsIG5hbWUsIG5hbWVzcGFjZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLmFkZENsYXNzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lKSB7IHRoaXMuZGVsZWdhdGUuYWRkQ2xhc3MoZWwsIG5hbWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEJhc2VBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlQ2xhc3MgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWwsIG5hbWUpIHsgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVDbGFzcyhlbCwgbmFtZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/PX0gZmxhZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEJhc2VBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUuc2V0U3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez89fSBmbGFnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBzdHlsZSwgdmFsdWUsIGZsYWdzKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuc2V0U3R5bGUoZWwsIHN0eWxlLCB2YWx1ZSwgZmxhZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVcbiAgICAgKiBAcGFyYW0gez89fSBmbGFnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5yZW1vdmVTdHlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlXG4gICAgICogQHBhcmFtIHs/PX0gZmxhZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgc3R5bGUsIGZsYWdzKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUucmVtb3ZlU3R5bGUoZWwsIHN0eWxlLCBmbGFncyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PSBBTklNQVRJT05fUFJFRklYICYmIG5hbWUgPT0gRElTQUJMRV9BTklNQVRJT05TX0ZMQUcpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUFuaW1hdGlvbnMoZWwsICEhdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5zZXRQcm9wZXJ0eShlbCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLnNldFZhbHVlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7IHRoaXMuZGVsZWdhdGUuc2V0VmFsdWUobm9kZSwgdmFsdWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBCYXNlQW5pbWF0aW9uUmVuZGVyZXIucHJvdG90eXBlLmxpc3RlbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLmxpc3Rlbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQmFzZUFuaW1hdGlvblJlbmRlcmVyLnByb3RvdHlwZS5kaXNhYmxlQW5pbWF0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmVuZ2luZS5kaXNhYmxlQW5pbWF0aW9ucyhlbGVtZW50LCB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUFuaW1hdGlvblJlbmRlcmVyO1xufSgpKTtcbnZhciBBbmltYXRpb25SZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uUmVuZGVyZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uUmVuZGVyZXIoZmFjdG9yeSwgbmFtZXNwYWNlSWQsIGRlbGVnYXRlLCBlbmdpbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbmFtZXNwYWNlSWQsIGRlbGVnYXRlLCBlbmdpbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICBfdGhpcy5uYW1lc3BhY2VJZCA9IG5hbWVzcGFjZUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUuc2V0UHJvcGVydHkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT0gQU5JTUFUSU9OX1BSRUZJWCkge1xuICAgICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDEpID09ICcuJyAmJiBuYW1lID09IERJU0FCTEVfQU5JTUFUSU9OU19GTEFHKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlQW5pbWF0aW9ucyhlbCwgLyoqIEB0eXBlIHs/fSAqLyAodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5naW5lLnByb2Nlc3ModGhpcy5uYW1lc3BhY2VJZCwgZWwsIG5hbWUuc3Vic3RyKDEpLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnNldFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBbmltYXRpb25SZW5kZXJlci5wcm90b3R5cGUubGlzdGVuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGV2ZW50TmFtZS5jaGFyQXQoMCkgPT0gQU5JTUFUSU9OX1BSRUZJWCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudCA9IHJlc29sdmVFbGVtZW50RnJvbVRhcmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmFtZV8xID0gZXZlbnROYW1lLnN1YnN0cigxKTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBoYXNlID0gJyc7XG4gICAgICAgICAgICAvLyBAbGlzdGVuZXIucGhhc2UgaXMgZm9yIHRyaWdnZXIgYW5pbWF0aW9uIGNhbGxiYWNrc1xuICAgICAgICAgICAgLy8gQEBsaXN0ZW5lciBpcyBmb3IgYW5pbWF0aW9uIGJ1aWxkZXIgY2FsbGJhY2tzXG4gICAgICAgICAgICBpZiAobmFtZV8xLmNoYXJBdCgwKSAhPSBBTklNQVRJT05fUFJFRklYKSB7XG4gICAgICAgICAgICAgICAgX2EgPSBwYXJzZVRyaWdnZXJDYWxsYmFja05hbWUobmFtZV8xKSwgbmFtZV8xID0gX2FbMF0sIHBoYXNlID0gX2FbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUubGlzdGVuKHRoaXMubmFtZXNwYWNlSWQsIGVsZW1lbnQsIG5hbWVfMSwgcGhhc2UsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvdW50SWQgPSAoLyoqIEB0eXBlIHs/fSAqLyAoZXZlbnQpKVsnX2RhdGEnXSB8fCAtMTtcbiAgICAgICAgICAgICAgICBfdGhpcy5mYWN0b3J5LnNjaGVkdWxlTGlzdGVuZXJDYWxsYmFjayhjb3VudElkLCBjYWxsYmFjaywgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUubGlzdGVuKHRhcmdldCwgZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIHZhciBfYTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25SZW5kZXJlcjtcbn0oQmFzZUFuaW1hdGlvblJlbmRlcmVyKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZXNvbHZlRWxlbWVudEZyb21UYXJnZXQodGFyZ2V0KSB7XG4gICAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICBjYXNlICd3aW5kb3cnOlxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHRyaWdnZXJOYW1lXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwYXJzZVRyaWdnZXJDYWxsYmFja05hbWUodHJpZ2dlck5hbWUpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkb3RJbmRleCA9IHRyaWdnZXJOYW1lLmluZGV4T2YoJy4nKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cmlnZ2VyID0gdHJpZ2dlck5hbWUuc3Vic3RyaW5nKDAsIGRvdEluZGV4KTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwaGFzZSA9IHRyaWdnZXJOYW1lLnN1YnN0cihkb3RJbmRleCArIDEpO1xuICAgIHJldHVybiBbdHJpZ2dlciwgcGhhc2VdO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgSW5qZWN0YWJsZUFuaW1hdGlvbkVuZ2luZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5qZWN0YWJsZUFuaW1hdGlvbkVuZ2luZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmplY3RhYmxlQW5pbWF0aW9uRW5naW5lKGRyaXZlciwgbm9ybWFsaXplcikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZHJpdmVyLCBub3JtYWxpemVyKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJbmplY3RhYmxlQW5pbWF0aW9uRW5naW5lLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBJbmplY3RhYmxlQW5pbWF0aW9uRW5naW5lLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2FuaW1hdGlvbnNfYnJvd3Nlci5BbmltYXRpb25Ecml2ZXIsIH0sXG4gICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1QW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEluamVjdGFibGVBbmltYXRpb25FbmdpbmU7XG59KF9hbmd1bGFyX2FuaW1hdGlvbnNfYnJvd3Nlci7JtUFuaW1hdGlvbkVuZ2luZSkpO1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZVN1cHBvcnRlZEFuaW1hdGlvbkRyaXZlcigpIHtcbiAgICBpZiAoX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1c3VwcG9ydHNXZWJBbmltYXRpb25zKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuybVXZWJBbmltYXRpb25zRHJpdmVyKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1Tm9vcEFuaW1hdGlvbkRyaXZlcigpO1xufVxuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZURlZmF1bHRTdHlsZU5vcm1hbGl6ZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuybVXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyKCk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcmVuZGVyZXJcbiAqIEBwYXJhbSB7P30gZW5naW5lXG4gKiBAcGFyYW0gez99IHpvbmVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVuZGVyZXJGYWN0b3J5KHJlbmRlcmVyLCBlbmdpbmUsIHpvbmUpIHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeShyZW5kZXJlciwgZW5naW5lLCB6b25lKTtcbn1cbnZhciBTSEFSRURfQU5JTUFUSU9OX1BST1ZJREVSUyA9IFtcbiAgICB7IHByb3ZpZGU6IF9hbmd1bGFyX2FuaW1hdGlvbnMuQW5pbWF0aW9uQnVpbGRlciwgdXNlQ2xhc3M6IEJyb3dzZXJBbmltYXRpb25CdWlsZGVyIH0sXG4gICAgeyBwcm92aWRlOiBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuybVBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXIsIHVzZUZhY3Rvcnk6IGluc3RhbnRpYXRlRGVmYXVsdFN0eWxlTm9ybWFsaXplciB9LFxuICAgIHsgcHJvdmlkZTogX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1QW5pbWF0aW9uRW5naW5lLCB1c2VDbGFzczogSW5qZWN0YWJsZUFuaW1hdGlvbkVuZ2luZSB9LCB7XG4gICAgICAgIHByb3ZpZGU6IF9hbmd1bGFyX2NvcmUuUmVuZGVyZXJGYWN0b3J5MixcbiAgICAgICAgdXNlRmFjdG9yeTogaW5zdGFudGlhdGVSZW5kZXJlckZhY3RvcnksXG4gICAgICAgIGRlcHM6IFtfYW5ndWxhcl9wbGF0Zm9ybUJyb3dzZXIuybVEb21SZW5kZXJlckZhY3RvcnkyLCBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuybVBbmltYXRpb25FbmdpbmUsIF9hbmd1bGFyX2NvcmUuTmdab25lXVxuICAgIH1cbl07XG4vKipcbiAqIFNlcGFyYXRlIHByb3ZpZGVycyBmcm9tIHRoZSBhY3R1YWwgbW9kdWxlIHNvIHRoYXQgd2UgY2FuIGRvIGEgbG9jYWwgbW9kaWZpY2F0aW9uIGluIEdvb2dsZTMgdG9cbiAqIGluY2x1ZGUgdGhlbSBpbiB0aGUgQnJvd3Nlck1vZHVsZS5cbiAqL1xudmFyIEJST1dTRVJfQU5JTUFUSU9OU19QUk9WSURFUlMgPSBbXG4gICAgeyBwcm92aWRlOiBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuQW5pbWF0aW9uRHJpdmVyLCB1c2VGYWN0b3J5OiBpbnN0YW50aWF0ZVN1cHBvcnRlZEFuaW1hdGlvbkRyaXZlciB9XG5dLmNvbmNhdChTSEFSRURfQU5JTUFUSU9OX1BST1ZJREVSUyk7XG4vKipcbiAqIFNlcGFyYXRlIHByb3ZpZGVycyBmcm9tIHRoZSBhY3R1YWwgbW9kdWxlIHNvIHRoYXQgd2UgY2FuIGRvIGEgbG9jYWwgbW9kaWZpY2F0aW9uIGluIEdvb2dsZTMgdG9cbiAqIGluY2x1ZGUgdGhlbSBpbiB0aGUgQnJvd3NlclRlc3RpbmdNb2R1bGUuXG4gKi9cbnZhciBCUk9XU0VSX05PT1BfQU5JTUFUSU9OU19QUk9WSURFUlMgPSBbeyBwcm92aWRlOiBfYW5ndWxhcl9hbmltYXRpb25zX2Jyb3dzZXIuQW5pbWF0aW9uRHJpdmVyLCB1c2VDbGFzczogX2FuZ3VsYXJfYW5pbWF0aW9uc19icm93c2VyLsm1Tm9vcEFuaW1hdGlvbkRyaXZlciB9XS5jb25jYXQoU0hBUkVEX0FOSU1BVElPTl9QUk9WSURFUlMpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSgpIHtcbiAgICB9XG4gICAgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkJyb3dzZXJNb2R1bGVdLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IEJST1dTRVJfQU5JTUFUSU9OU19QUk9WSURFUlMsXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBCcm93c2VyQW5pbWF0aW9uc01vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBCcm93c2VyQW5pbWF0aW9uc01vZHVsZTtcbn0oKSk7XG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBOb29wQW5pbWF0aW9uc01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wQW5pbWF0aW9uc01vZHVsZSgpIHtcbiAgICB9XG4gICAgTm9vcEFuaW1hdGlvbnNNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbX2FuZ3VsYXJfcGxhdGZvcm1Ccm93c2VyLkJyb3dzZXJNb2R1bGVdLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IEJST1dTRVJfTk9PUF9BTklNQVRJT05TX1BST1ZJREVSUyxcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIE5vb3BBbmltYXRpb25zTW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIE5vb3BBbmltYXRpb25zTW9kdWxlO1xufSgpKTtcblxuZXhwb3J0cy5Ccm93c2VyQW5pbWF0aW9uc01vZHVsZSA9IEJyb3dzZXJBbmltYXRpb25zTW9kdWxlO1xuZXhwb3J0cy5Ob29wQW5pbWF0aW9uc01vZHVsZSA9IE5vb3BBbmltYXRpb25zTW9kdWxlO1xuZXhwb3J0cy7JtUJyb3dzZXJBbmltYXRpb25CdWlsZGVyID0gQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXI7XG5leHBvcnRzLsm1QnJvd3NlckFuaW1hdGlvbkZhY3RvcnkgPSBCcm93c2VyQW5pbWF0aW9uRmFjdG9yeTtcbmV4cG9ydHMuybVBbmltYXRpb25SZW5kZXJlciA9IEFuaW1hdGlvblJlbmRlcmVyO1xuZXhwb3J0cy7JtUFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeSA9IEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeTtcbmV4cG9ydHMuybVhID0gQmFzZUFuaW1hdGlvblJlbmRlcmVyO1xuZXhwb3J0cy7JtWYgPSBCUk9XU0VSX0FOSU1BVElPTlNfUFJPVklERVJTO1xuZXhwb3J0cy7JtWcgPSBCUk9XU0VSX05PT1BfQU5JTUFUSU9OU19QUk9WSURFUlM7XG5leHBvcnRzLsm1YiA9IEluamVjdGFibGVBbmltYXRpb25FbmdpbmU7XG5leHBvcnRzLsm1ZCA9IGluc3RhbnRpYXRlRGVmYXVsdFN0eWxlTm9ybWFsaXplcjtcbmV4cG9ydHMuybVlID0gaW5zdGFudGlhdGVSZW5kZXJlckZhY3Rvcnk7XG5leHBvcnRzLsm1YyA9IGluc3RhbnRpYXRlU3VwcG9ydGVkQW5pbWF0aW9uRHJpdmVyO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhdGZvcm0tYnJvd3Nlci1hbmltYXRpb25zLnVtZC5qcy5tYXBcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2J1bmRsZXMvcGxhdGZvcm0tYnJvd3Nlci1hbmltYXRpb25zLnVtZC5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcclxuaW1wb3J0ICd6b25lLmpzJztcclxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9maXJzdCc7XHJcbmltcG9ydCB7IEFQUF9CQVNFX0hSRUYgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBlbmFibGVQcm9kTW9kZSwgQXBwbGljYXRpb25SZWYsIE5nWm9uZSwgVmFsdWVQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBwbGF0Zm9ybUR5bmFtaWNTZXJ2ZXIsIFBsYXRmb3JtU3RhdGUsIElOSVRJQUxfQ09ORklHIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJztcclxuaW1wb3J0IHsgY3JlYXRlU2VydmVyUmVuZGVyZXIsIFJlbmRlclJlc3VsdCB9IGZyb20gJ2FzcG5ldC1wcmVyZW5kZXJpbmcnO1xyXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAuc2VydmVyLm1vZHVsZSc7XHJcblxyXG5lbmFibGVQcm9kTW9kZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2VydmVyUmVuZGVyZXIocGFyYW1zID0+IHtcclxuICAgIGNvbnN0IHByb3ZpZGVycyA9IFtcclxuICAgICAgICB7IHByb3ZpZGU6IElOSVRJQUxfQ09ORklHLCB1c2VWYWx1ZTogeyBkb2N1bWVudDogJzxhcHA+PC9hcHA+JywgdXJsOiBwYXJhbXMudXJsIH0gfSxcclxuICAgICAgICB7IHByb3ZpZGU6IEFQUF9CQVNFX0hSRUYsIHVzZVZhbHVlOiBwYXJhbXMuYmFzZVVybCB9LFxyXG4gICAgICAgIHsgcHJvdmlkZTogJ0JBU0VfVVJMJywgdXNlVmFsdWU6IHBhcmFtcy5vcmlnaW4gKyBwYXJhbXMuYmFzZVVybCB9LFxyXG4gICAgXTtcclxuXHJcbiAgICByZXR1cm4gcGxhdGZvcm1EeW5hbWljU2VydmVyKHByb3ZpZGVycykuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSkudGhlbihtb2R1bGVSZWYgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFwcFJlZjogQXBwbGljYXRpb25SZWYgPSBtb2R1bGVSZWYuaW5qZWN0b3IuZ2V0KEFwcGxpY2F0aW9uUmVmKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoUGxhdGZvcm1TdGF0ZSk7XHJcbiAgICAgICAgY29uc3Qgem9uZSA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoTmdab25lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFJlbmRlclJlc3VsdD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB6b25lLm9uRXJyb3Iuc3Vic2NyaWJlKChlcnJvckluZm86IGFueSkgPT4gcmVqZWN0KGVycm9ySW5mbykpO1xyXG4gICAgICAgICAgICBhcHBSZWYuaXNTdGFibGUuZmlyc3QoaXNTdGFibGUgPT4gaXNTdGFibGUpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlICdvblN0YWJsZScgZmlyZXMgYmVmb3JlICdvbkVycm9yJywgd2UgaGF2ZSB0byBkZWxheSBzbGlnaHRseSBiZWZvcmVcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRpbmcgdGhlIHJlcXVlc3QgaW4gY2FzZSB0aGVyZSdzIGFuIGVycm9yIHRvIHJlcG9ydFxyXG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogc3RhdGUucmVuZGVyVG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZVJlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL0NsaWVudEFwcC9ib290LnNlcnZlci50cyIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBDdXN0b21FdmVudDtcblxudmFyIEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xuXG5mdW5jdGlvbiBDdXN0b21FdmVudCh0eXBlLCBkaWN0aW9uYXJ5KSB7XG4gIC8vIEp1c3QgdXNlIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpemVcbiAgRXZlbnQuY2FsbCh0aGlzLCB0eXBlLCBkaWN0aW9uYXJ5KTtcbn1cbkN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnQucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBDdXN0b21FdmVudCB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL0N1c3RvbUV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRmlsdGVyZWRFbGVtZW50TGlzdDtcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcblxuLy9cbi8vIFRoaXMgZmlsZSBkZWZpbmVzIG5vZGUgbGlzdCBpbXBsZW1lbnRhdGlvbiB0aGF0IGxhemlseSB0cmF2ZXJzZXNcbi8vIHRoZSBkb2N1bWVudCB0cmVlIChvciBhIHN1YnRyZWUgcm9vdGVkIGF0IGFueSBlbGVtZW50KSBhbmQgaW5jbHVkZXNcbi8vIG9ubHkgdGhvc2UgZWxlbWVudHMgZm9yIHdoaWNoIGEgc3BlY2lmaWVkIGZpbHRlciBmdW5jdGlvbiByZXR1cm5zIHRydWUuXG4vLyBJdCBpcyB1c2VkIHRvIGltcGxlbWVudCB0aGVcbi8vIHtEb2N1bWVudCxFbGVtZW50fS5nZXRFbGVtZW50c0J5e1RhZ05hbWUsQ2xhc3NOYW1lfXssTlN9IG1ldGhvZHMuXG4vL1xuXG5mdW5jdGlvbiBGaWx0ZXJlZEVsZW1lbnRMaXN0KHJvb3QsIGZpbHRlcikge1xuICB0aGlzLnJvb3QgPSByb290O1xuICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgdGhpcy5sYXN0TW9kVGltZSA9IHJvb3QubGFzdE1vZFRpbWU7XG4gIHRoaXMuZG9uZSA9IGZhbHNlO1xuICB0aGlzLmNhY2hlID0gW107XG4gIHRoaXMudHJhdmVyc2UoKTtcbn1cblxuRmlsdGVyZWRFbGVtZW50TGlzdC5wcm90b3R5cGUgPSB7XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgdGhpcy5jaGVja2NhY2hlKCk7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHRoaXMudHJhdmVyc2UoKTtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XG4gIH0sXG5cbiAgaXRlbTogZnVuY3Rpb24obikge1xuICAgIHRoaXMuY2hlY2tjYWNoZSgpO1xuICAgIGlmICghdGhpcy5kb25lICYmIG4gPj0gdGhpcy5jYWNoZS5sZW5ndGgpIHRoaXMudHJhdmVyc2Uobik7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVbbl07XG4gIH0sXG5cbiAgY2hlY2tjYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubGFzdE1vZFRpbWUgIT09IHRoaXMucm9vdC5sYXN0TW9kVGltZSkge1xuICAgICAgLy8gc3VidHJlZSBoYXMgY2hhbmdlZCwgc28gaW52YWxpZGF0ZSBjYWNoZVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2FjaGUubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICB0aGlzW2ldID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmxhc3RNb2RUaW1lID0gdGhpcy5yb290Lmxhc3RNb2RUaW1lO1xuICAgIH1cbiAgfSxcblxuICAvLyBJZiBuIGlzIHNwZWNpZmllZCwgdGhlbiB0cmF2ZXJzZSB0aGUgdHJlZSB1bnRpbCB3ZSd2ZSBmb3VuZCB0aGUgbnRoXG4gIC8vIGl0ZW0gKG9yIHVudGlsIHdlJ3ZlIGZvdW5kIGFsbCBpdGVtcykuICBJZiBuIGlzIG5vdCBzcGVjaWZpZWQsXG4gIC8vIHRyYXZlcnNlIHVudGlsIHdlJ3ZlIGZvdW5kIGFsbCBpdGVtcy5cbiAgdHJhdmVyc2U6IGZ1bmN0aW9uKG4pIHtcbiAgICAvLyBpbmNyZW1lbnQgbiBzbyB3ZSBjYW4gY29tcGFyZSB0byBsZW5ndGgsIGFuZCBzbyBpdCBpcyBuZXZlciBmYWxzeVxuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIG4rKztcblxuICAgIHZhciBlbHQ7XG4gICAgd2hpbGUgKChlbHQgPSB0aGlzLm5leHQoKSkgIT09IG51bGwpIHtcbiAgICAgIHRoaXNbdGhpcy5jYWNoZS5sZW5ndGhdID0gZWx0OyAvL1hYWCBVc2UgcHJveHkgaW5zdGVhZFxuICAgICAgdGhpcy5jYWNoZS5wdXNoKGVsdCk7XG4gICAgICBpZiAobiAmJiB0aGlzLmNhY2hlLmxlbmd0aCA9PT0gbikgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIG5vIG5leHQgZWxlbWVudCwgc28gd2UndmUgZm91bmQgZXZlcnl0aGluZ1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gIH0sXG5cbiAgLy8gUmV0dXJuIHRoZSBuZXh0IGVsZW1lbnQgdW5kZXIgcm9vdCB0aGF0IG1hdGNoZXMgZmlsdGVyXG4gIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9ICh0aGlzLmNhY2hlLmxlbmd0aCA9PT0gMCkgPyB0aGlzLnJvb3QgLy8gU3RhcnQgYXQgdGhlIHJvb3Qgb3IgYXRcbiAgICAgIDogdGhpcy5jYWNoZVt0aGlzLmNhY2hlLmxlbmd0aC0xXTsgLy8gdGhlIGxhc3QgZWxlbWVudCB3ZSBmb3VuZFxuXG4gICAgdmFyIGVsdDtcbiAgICBpZiAoc3RhcnQubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSlcbiAgICAgIGVsdCA9IHN0YXJ0LmRvY3VtZW50RWxlbWVudDtcbiAgICBlbHNlXG4gICAgICBlbHQgPSBzdGFydC5uZXh0RWxlbWVudCh0aGlzLnJvb3QpO1xuXG4gICAgd2hpbGUoZWx0KSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXIoZWx0KSkge1xuICAgICAgICByZXR1cm4gZWx0O1xuICAgICAgfVxuXG4gICAgICBlbHQgPSBlbHQubmV4dEVsZW1lbnQodGhpcy5yb290KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9GaWx0ZXJlZEVsZW1lbnRMaXN0LmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBVUkwgPSByZXF1aXJlKCcuL1VSTCcpO1xudmFyIFVSTFV0aWxzID0gcmVxdWlyZSgnLi9VUkxVdGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2F0aW9uO1xuXG5mdW5jdGlvbiBMb2NhdGlvbih3aW5kb3csIGhyZWYpIHtcbiAgdGhpcy5fd2luZG93ID0gd2luZG93O1xuICB0aGlzLl9ocmVmID0gaHJlZjtcbn1cblxuTG9jYXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShVUkxVdGlscy5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHsgdmFsdWU6IExvY2F0aW9uIH0sXG5cbiAgLy8gU3BlY2lhbCBiZWhhdmlvciB3aGVuIGhyZWYgaXMgc2V0XG4gIGhyZWY6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5faHJlZjsgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHsgdGhpcy5hc3NpZ24odik7IH1cbiAgfSxcblxuICBhc3NpZ246IHsgdmFsdWU6IGZ1bmN0aW9uKHVybCkge1xuICAgIC8vIFJlc29sdmUgdGhlIG5ldyB1cmwgYWdhaW5zdCB0aGUgY3VycmVudCBvbmVcbiAgICAvLyBYWFg6XG4gICAgLy8gVGhpcyBpcyBub3QgYWN0dWFsbHkgY29ycmVjdC4gSXQgc2hvdWxkIGJlIHJlc29sdmVkIGFnYWluc3RcbiAgICAvLyB0aGUgVVJMIG9mIHRoZSBkb2N1bWVudCBvZiB0aGUgc2NyaXB0LiBGb3Igbm93LCB0aG91Z2gsIEkgb25seVxuICAgIC8vIHN1cHBvcnQgYSBzaW5nbGUgd2luZG93IGFuZCB0aGVyZSBpcyBvbmx5IG9uZSBiYXNlIHVybC5cbiAgICAvLyBTbyB0aGlzIGlzIGdvb2QgZW5vdWdoIGZvciBub3cuXG4gICAgdmFyIGN1cnJlbnQgPSBuZXcgVVJMKHRoaXMuX2hyZWYpO1xuICAgIHZhciBuZXd1cmwgPSBjdXJyZW50LnJlc29sdmUodXJsKTtcblxuICAgIC8vIFNhdmUgdGhlIG5ldyB1cmxcbiAgICB0aGlzLl9ocmVmID0gbmV3dXJsO1xuXG4gICAgLy8gU3RhcnQgbG9hZGluZyB0aGUgbmV3IGRvY3VtZW50IVxuICAgIC8vIFhYWFxuICAgIC8vIFRoaXMgaXMganVzdCBzb21ldGhpbmcgaGFja2VkIHRvZ2V0aGVyLlxuICAgIC8vIFRoZSByZWFsIGFsZ29yaXRobSBpczogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvaGlzdG9yeS5odG1sI25hdmlnYXRlXG4gIH19LFxuXG4gIHJlcGxhY2U6IHsgdmFsdWU6IGZ1bmN0aW9uKHVybCkge1xuICAgIC8vIFhYWFxuICAgIC8vIFNpbmNlIHdlIGFyZW4ndCB0cmFja2luZyBoaXN0b3J5IHlldCwgcmVwbGFjZSBpcyB0aGUgc2FtZSBhcyBhc3NpZ25cbiAgICB0aGlzLmFzc2lnbih1cmwpO1xuICB9fSxcblxuICByZWxvYWQ6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFhYWDpcbiAgICAvLyBBY3R1YWxseSwgdGhlIHNwZWMgaXMgYSBsb3QgbW9yZSBjb21wbGljYXRlZCB0aGFuIHRoaXNcbiAgICB0aGlzLmFzc2lnbih0aGlzLmhyZWYpO1xuICB9fSxcblxuICB0b1N0cmluZzogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaHJlZjtcbiAgfX1cblxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9Mb2NhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVkFMVUU6IDEsIC8vIFRoZSB2YWx1ZSBvZiBhIFRleHQsIENvbW1lbnQgb3IgUEkgbm9kZSBjaGFuZ2VkXG4gIEFUVFI6IDIsIC8vIEEgbmV3IGF0dHJpYnV0ZSB3YXMgYWRkZWQgb3IgYW4gYXR0cmlidXRlIHZhbHVlIGFuZC9vciBwcmVmaXggY2hhbmdlZFxuICBSRU1PVkVfQVRUUjogMywgLy8gQW4gYXR0cmlidXRlIHdhcyByZW1vdmVkXG4gIFJFTU9WRTogNCwgLy8gQSBub2RlIHdhcyByZW1vdmVkXG4gIE1PVkU6IDUsIC8vIEEgbm9kZSB3YXMgbW92ZWRcbiAgSU5TRVJUOiA2IC8vIEEgbm9kZSAob3IgYSBzdWJ0cmVlIG9mIG5vZGVzKSB3YXMgaW5zZXJ0ZWRcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RvbWluby9saWIvTXV0YXRpb25Db25zdGFudHMuanNcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjbmF2aWdhdG9yaWRcbnZhciBOYXZpZ2F0b3JJRCA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICBhcHBDb2RlTmFtZTogeyB2YWx1ZTogXCJNb3ppbGxhXCIgfSxcbiAgYXBwTmFtZTogeyB2YWx1ZTogXCJOZXRzY2FwZVwiIH0sXG4gIGFwcFZlcnNpb246IHsgdmFsdWU6IFwiNC4wXCIgfSxcbiAgcGxhdGZvcm06IHsgdmFsdWU6IFwiXCIgfSxcbiAgcHJvZHVjdDogeyB2YWx1ZTogXCJHZWNrb1wiIH0sXG4gIHByb2R1Y3RTdWI6IHsgdmFsdWU6IFwiMjAxMDAxMDFcIiB9LFxuICB1c2VyQWdlbnQ6IHsgdmFsdWU6IFwiXCIgfSxcbiAgdmVuZG9yOiB7IHZhbHVlOiBcIlwiIH0sXG4gIHZlbmRvclN1YjogeyB2YWx1ZTogXCJcIiB9LFxuICB0YWludEVuYWJsZWQ6IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0gfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdG9ySUQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9OYXZpZ2F0b3JJRC5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVJdGVyYXRvcjtcblxudmFyIE5vZGVGaWx0ZXIgPSByZXF1aXJlKCcuL05vZGVGaWx0ZXInKTtcbnZhciBOb2RlVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9Ob2RlVHJhdmVyc2FsJyk7XG5cbi8qIFByaXZhdGUgbWV0aG9kcyBhbmQgaGVscGVycyAqL1xuXG4vKipcbiAqIEBiYXNlZCBvbiBXZWJLaXQncyBOb2RlSXRlcmF0b3I6Om1vdmVUb05leHQgYW5kIE5vZGVJdGVyYXRvcjo6bW92ZVRvUHJldmlvdXNcbiAqIGh0dHBzOi8vdHJhYy53ZWJraXQub3JnL2Jyb3dzZXIvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL05vZGVJdGVyYXRvci5jcHA/cmV2PTE4NjI3OSNMNTFcbiAqL1xuZnVuY3Rpb24gbW92ZShub2RlLCBzdGF5V2l0aGluLCBkaXJlY3Rpb25Jc05leHQpIHtcbiAgaWYgKGRpcmVjdGlvbklzTmV4dCkge1xuICAgIHJldHVybiBOb2RlVHJhdmVyc2FsLm5leHQobm9kZSwgc3RheVdpdGhpbik7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG5vZGUgPT09IHN0YXlXaXRoaW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gTm9kZVRyYXZlcnNhbC5wcmV2aW91cyhub2RlLCBudWxsKTtcbiAgfVxufVxuXG4vKipcbiAqIEBzcGVjIGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jY29uY2VwdC1ub2RlaXRlcmF0b3ItdHJhdmVyc2VcbiAqIEBtZXRob2RcbiAqIEBhY2Nlc3MgcHJpdmF0ZVxuICogQHBhcmFtIHtOb2RlSXRlcmF0b3J9IG5pXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIE9uZSBvZiAnbmV4dCcgb3IgJ3ByZXZpb3VzJy5cbiAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UobmksIGRpcmVjdGlvbklzTmV4dCkge1xuICB2YXIgbm9kZSwgYmVmb3JlTm9kZTtcbiAgbm9kZSA9IG5pLnJlZmVyZW5jZU5vZGU7XG4gIGJlZm9yZU5vZGUgPSBuaS5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoYmVmb3JlTm9kZSA9PT0gZGlyZWN0aW9uSXNOZXh0KSB7XG4gICAgICBiZWZvcmVOb2RlID0gIWJlZm9yZU5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBtb3ZlKG5vZGUsIG5pLnJvb3QsIGRpcmVjdGlvbklzTmV4dCk7XG4gICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IG5pLmZpbHRlci5hY2NlcHROb2RlKG5vZGUpO1xuICAgIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIG5pLnJlZmVyZW5jZU5vZGUgPSBub2RlO1xuICBuaS5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSA9IGJlZm9yZU5vZGU7XG4gIHJldHVybiBub2RlO1xufVxuXG4vKiBQdWJsaWMgQVBJICovXG5cbi8qKlxuICogSW1wbGVtZW50ZWQgdmVyc2lvbjogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1kb20tMjAxNTA2MTgvI25vZGVpdGVyYXRvclxuICogTGF0ZXN0IHZlcnNpb246IGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jbm9kZWl0ZXJhdG9yXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge05vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aGF0VG9TaG93IFtvcHRpb25hbF1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Tm9kZUZpbHRlcn0gZmlsdGVyIFtvcHRpb25hbF1cbiAqIEB0aHJvd3MgRXJyb3JcbiAqL1xuZnVuY3Rpb24gTm9kZUl0ZXJhdG9yKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICB2YXIgbmkgPSB0aGlzLCBhY3RpdmUgPSBmYWxzZTtcblxuICBpZiAoIXJvb3QgfHwgIXJvb3Qubm9kZVR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RPTUV4Y2VwdGlvbjogTk9UX1NVUFBPUlRFRF9FUlInKTtcbiAgfVxuXG4gIG5pLnJvb3QgPSBuaS5yZWZlcmVuY2VOb2RlID0gcm9vdDtcbiAgbmkucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGUgPSB0cnVlO1xuICBuaS53aGF0VG9TaG93ID0gTnVtYmVyKHdoYXRUb1Nob3cpIHx8IDA7XG5cbiAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICBmaWx0ZXIgPSBudWxsO1xuICB9XG5cbiAgbmkuZmlsdGVyID0gT2JqZWN0LmNyZWF0ZShOb2RlRmlsdGVyLnByb3RvdHlwZSk7XG5cbiAgLyoqXG4gICAqIEBtZXRob2RcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEByZXR1cm4ge051bWJlcn0gQ29uc3RhbnQgTm9kZUZpbHRlci5GSUxURVJfQUNDRVBULFxuICAgKiAgTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUIG9yIE5vZGVGaWx0ZXIuRklMVEVSX1NLSVAuXG4gICAqL1xuICBuaS5maWx0ZXIuYWNjZXB0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RPTUV4Y2VwdGlvbjogSU5WQUxJRF9TVEFURV9FUlInKTtcbiAgICB9XG5cbiAgICAvLyBNYXBzIG5vZGVUeXBlIHRvIHdoYXRUb1Nob3dcbiAgICBpZiAoISgoKDEgPDwgKG5vZGUubm9kZVR5cGUgLSAxKSkgJiBuaS53aGF0VG9TaG93KSkpIHtcbiAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQO1xuICAgIH1cblxuICAgIGlmIChmaWx0ZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQ7XG4gICAgfVxuXG4gICAgYWN0aXZlID0gdHJ1ZTtcbiAgICByZXN1bHQgPSBmaWx0ZXIobm9kZSk7XG4gICAgYWN0aXZlID0gZmFsc2U7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5Ob2RlSXRlcmF0b3IucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZUl0ZXJhdG9yLFxuXG4gIC8qKlxuICAgKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS1ub2RlaXRlcmF0b3ItbmV4dG5vZGVcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XG4gICAqL1xuICBuZXh0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cmF2ZXJzZSh0aGlzLCB0cnVlKTtcbiAgfSxcblxuICAvKipcbiAgICogQHNwZWMgaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNkb20tbm9kZWl0ZXJhdG9yLXByZXZpb3Vzbm9kZVxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAgICovXG4gIHByZXZpb3VzTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cmF2ZXJzZSh0aGlzLCBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzcGVjIGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jZG9tLW5vZGVpdGVyYXRvci1kZXRhY2hcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgLyogXCJUaGUgZGV0YWNoKCkgbWV0aG9kIG11c3QgZG8gbm90aGluZy5cbiAgICAgKiBJdHMgZnVuY3Rpb25hbGl0eSAoZGlzYWJsaW5nIGEgTm9kZUl0ZXJhdG9yIG9iamVjdCkgd2FzIHJlbW92ZWQsXG4gICAgICogYnV0IHRoZSBtZXRob2QgaXRzZWxmIGlzIHByZXNlcnZlZCBmb3IgY29tcGF0aWJpbGl0eS5cbiAgICAgKi9cbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL05vZGVJdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFRyZWVXYWxrZXI7XG5cbnZhciBOb2RlRmlsdGVyID0gcmVxdWlyZSgnLi9Ob2RlRmlsdGVyJyk7XG52YXIgTm9kZVRyYXZlcnNhbCA9IHJlcXVpcmUoJy4vTm9kZVRyYXZlcnNhbCcpO1xuXG52YXIgbWFwQ2hpbGQgPSB7XG4gIGZpcnN0OiAnZmlyc3RDaGlsZCcsXG4gIGxhc3Q6ICdsYXN0Q2hpbGQnLFxuICBuZXh0OiAnZmlyc3RDaGlsZCcsXG4gIHByZXZpb3VzOiAnbGFzdENoaWxkJ1xufTtcblxudmFyIG1hcFNpYmxpbmcgPSB7XG4gIGZpcnN0OiAnbmV4dFNpYmxpbmcnLFxuICBsYXN0OiAncHJldmlvdXNTaWJsaW5nJyxcbiAgbmV4dDogJ25leHRTaWJsaW5nJyxcbiAgcHJldmlvdXM6ICdwcmV2aW91c1NpYmxpbmcnXG59O1xuXG4vKiBQcml2YXRlIG1ldGhvZHMgYW5kIGhlbHBlcnMgKi9cblxuLyoqXG4gKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2NvbmNlcHQtdHJhdmVyc2UtY2hpbGRyZW5cbiAqIEBtZXRob2RcbiAqIEBhY2Nlc3MgcHJpdmF0ZVxuICogQHBhcmFtIHtUcmVlV2Fsa2VyfSB0d1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgT25lIG9mICdmaXJzdCcgb3IgJ2xhc3QnLlxuICogQHJldHVybiB7Tm9kZXxudWxsfVxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUNoaWxkcmVuKHR3LCB0eXBlKSB7XG4gIHZhciBjaGlsZCwgbm9kZSwgcGFyZW50LCByZXN1bHQsIHNpYmxpbmc7XG4gIG5vZGUgPSB0dy5jdXJyZW50Tm9kZVttYXBDaGlsZFt0eXBlXV07XG4gIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgcmVzdWx0ID0gdHcuZmlsdGVyLmFjY2VwdE5vZGUobm9kZSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XG4gICAgICB0dy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCA9PT0gTm9kZUZpbHRlci5GSUxURVJfU0tJUCkge1xuICAgICAgY2hpbGQgPSBub2RlW21hcENoaWxkW3R5cGVdXTtcbiAgICAgIGlmIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlID0gY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgc2libGluZyA9IG5vZGVbbWFwU2libGluZ1t0eXBlXV07XG4gICAgICBpZiAoc2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICBub2RlID0gc2libGluZztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICBpZiAocGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdHcucm9vdCB8fCBwYXJlbnQgPT09IHR3LmN1cnJlbnROb2RlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzcGVjIGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jY29uY2VwdC10cmF2ZXJzZS1zaWJsaW5nc1xuICogQG1ldGhvZFxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcGFyYW0ge1RyZWVXYWxrZXJ9IHR3XG4gKiBAcGFyYW0ge1RyZWVXYWxrZXJ9IHR5cGUgT25lIG9mICduZXh0JyBvciAncHJldmlvdXMnLlxuICogQHJldHVybiB7Tm9kZXxudWx9XG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlU2libGluZ3ModHcsIHR5cGUpIHtcbiAgdmFyIG5vZGUsIHJlc3VsdCwgc2libGluZztcbiAgbm9kZSA9IHR3LmN1cnJlbnROb2RlO1xuICBpZiAobm9kZSA9PT0gdHcucm9vdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc2libGluZyA9IG5vZGVbbWFwU2libGluZ1t0eXBlXV07XG4gICAgd2hpbGUgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgIG5vZGUgPSBzaWJsaW5nO1xuICAgICAgcmVzdWx0ID0gdHcuZmlsdGVyLmFjY2VwdE5vZGUobm9kZSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcbiAgICAgICAgdHcuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIHNpYmxpbmcgPSBub2RlW21hcENoaWxkW3R5cGVdXTtcbiAgICAgIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCB8fCBzaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmcgPSBub2RlW21hcFNpYmxpbmdbdHlwZV1dO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHR3LnJvb3QpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHcuZmlsdGVyLmFjY2VwdE5vZGUobm9kZSkgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG5cblxuLyogUHVibGljIEFQSSAqL1xuXG4vKipcbiAqIEltcGxlbWVudGVkIHZlcnNpb246IGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTUvV0QtZG9tLTIwMTUwNjE4LyNpbnRlcmZhY2UtdHJlZXdhbGtlclxuICogTGF0ZXN0IHZlcnNpb246IGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jaW50ZXJmYWNlLXRyZWV3YWxrZXJcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Tm9kZX0gcm9vdFxuICogQHBhcmFtIHtudW1iZXJ9IHdoYXRUb1Nob3cgW29wdGlvbmFsXVxuICogQHBhcmFtIHtGdW5jdGlvbnxOb2RlRmlsdGVyfSBmaWx0ZXIgW29wdGlvbmFsXVxuICogQHRocm93cyBFcnJvclxuICovXG5mdW5jdGlvbiBUcmVlV2Fsa2VyKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICB2YXIgdHcgPSB0aGlzLCBhY3RpdmUgPSBmYWxzZTtcblxuICBpZiAoIXJvb3QgfHwgIXJvb3Qubm9kZVR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RPTUV4Y2VwdGlvbjogTk9UX1NVUFBPUlRFRF9FUlInKTtcbiAgfVxuXG4gIHR3LnJvb3QgPSByb290O1xuICB0dy53aGF0VG9TaG93ID0gTnVtYmVyKHdoYXRUb1Nob3cpIHx8IDA7XG5cbiAgdHcuY3VycmVudE5vZGUgPSByb290O1xuXG4gIGlmICh0eXBlb2YgZmlsdGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgZmlsdGVyID0gbnVsbDtcbiAgfVxuXG4gIHR3LmZpbHRlciA9IE9iamVjdC5jcmVhdGUoTm9kZUZpbHRlci5wcm90b3R5cGUpO1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IENvbnN0YW50IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCxcbiAgICogIE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCBvciBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQLlxuICAgKi9cbiAgdHcuZmlsdGVyLmFjY2VwdE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdET01FeGNlcHRpb246IElOVkFMSURfU1RBVEVfRVJSJyk7XG4gICAgfVxuXG4gICAgLy8gTWFwcyBub2RlVHlwZSB0byB3aGF0VG9TaG93XG4gICAgaWYgKCEoKCgxIDw8IChub2RlLm5vZGVUeXBlIC0gMSkpICYgdHcud2hhdFRvU2hvdykpKSB7XG4gICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfU0tJUDtcbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUO1xuICAgIH1cblxuICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgcmVzdWx0ID0gZmlsdGVyKG5vZGUpO1xuICAgIGFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuVHJlZVdhbGtlci5wcm90b3R5cGUgPSB7XG5cbiAgY29uc3RydWN0b3I6IFRyZWVXYWxrZXIsXG5cbiAgLyoqXG4gICAqIEBzcGVjIGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jZG9tLXRyZWV3YWxrZXItcGFyZW50bm9kZVxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAgICovXG4gIHBhcmVudE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwgJiYgbm9kZSAhPT0gdGhpcy5yb290KSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgaWYgKG5vZGUgIT09IG51bGwgJiYgdGhpcy5maWx0ZXIuYWNjZXB0Tm9kZShub2RlKSA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzcGVjIGh0dHA6Ly93d3cudzMub3JnL1RSL2RvbS8jZG9tLXRyZWV3YWxrZXItZmlyc3RjaGlsZFxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAgICovXG4gIGZpcnN0Q2hpbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJhdmVyc2VDaGlsZHJlbih0aGlzLCAnZmlyc3QnKTtcbiAgfSxcblxuICAvKipcbiAgICogQHNwZWMgaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNkb20tdHJlZXdhbGtlci1sYXN0Y2hpbGRcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XG4gICAqL1xuICBsYXN0Q2hpbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJhdmVyc2VDaGlsZHJlbih0aGlzLCAnbGFzdCcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS10cmVld2Fsa2VyLXByZXZpb3Vzc2libGluZ1xuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAgICovXG4gIHByZXZpb3VzU2libGluZzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cmF2ZXJzZVNpYmxpbmdzKHRoaXMsICdwcmV2aW91cycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS10cmVld2Fsa2VyLW5leHRzaWJsaW5nXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7Tm9kZXxudWxsfVxuICAgKi9cbiAgbmV4dFNpYmxpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJhdmVyc2VTaWJsaW5ncyh0aGlzLCAnbmV4dCcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS10cmVld2Fsa2VyLXByZXZpb3Vzbm9kZVxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAgICovXG4gIHByZXZpb3VzTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBub2RlLCByZXN1bHQsIHNpYmxpbmc7XG4gICAgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgd2hpbGUgKG5vZGUgIT09IHRoaXMucm9vdCkge1xuICAgICAgc2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgd2hpbGUgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZSA9IHNpYmxpbmc7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyLmFjY2VwdE5vZGUobm9kZSk7XG4gICAgICAgIHdoaWxlIChyZXN1bHQgIT09IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCAmJiBub2RlLmxhc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlci5hY2NlcHROb2RlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHNpYmxpbmcgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlID09PSB0aGlzLnJvb3QgfHwgbm9kZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIGlmICh0aGlzLmZpbHRlci5hY2NlcHROb2RlKG5vZGUpID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogQHNwZWMgaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNkb20tdHJlZXdhbGtlci1uZXh0bm9kZVxuICAgKiBAYmFzZWQgb24gV2ViS2l0J3MgVHJlZVdhbGtlcjo6bmV4dE5vZGVcbiAgICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vVHJlZVdhbGtlci5jcHA/cmV2PTE3OTE0MyNMMjUyXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7Tm9kZXxudWxsfVxuICAgKi9cbiAgbmV4dE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm9kZSwgcmVzdWx0LCBmb2xsb3dpbmc7XG4gICAgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgcmVzdWx0ID0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHdoaWxlIChyZXN1bHQgIT09IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCAmJiBub2RlLmZpcnN0Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXIuYWNjZXB0Tm9kZShub2RlKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvbGxvd2luZyA9IE5vZGVUcmF2ZXJzYWwubmV4dFNraXBwaW5nQ2hpbGRyZW4obm9kZSwgdGhpcy5yb290KTtcbiAgICAgIGlmIChmb2xsb3dpbmcgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZSA9IGZvbGxvd2luZztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyLmFjY2VwdE5vZGUobm9kZSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL1RyZWVXYWxrZXIuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjd2luZG93dGltZXJzXG52YXIgV2luZG93VGltZXJzID0ge1xuICBzZXRUaW1lb3V0OiBzZXRUaW1lb3V0LFxuICBjbGVhclRpbWVvdXQ6IGNsZWFyVGltZW91dCxcbiAgc2V0SW50ZXJ2YWw6IHNldEludGVydmFsLFxuICBjbGVhckludGVydmFsOiBjbGVhckludGVydmFsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdpbmRvd1RpbWVycztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kb21pbm8vbGliL1dpbmRvd1RpbWVycy5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoganNoaW50IG5vZGU6dHJ1ZSwgbGF0ZWRlZjpmYWxzZSAqL1xuXCJ1c2Ugc3RyaWN0XCI7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuLyohXG5QYXJzZXItTGliXG5Db3B5cmlnaHQgKGMpIDIwMDktMjAxMSBOaWNob2xhcyBDLiBaYWthcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4qL1xuLyogVmVyc2lvbiB2MC4yLjUrZG9taW5vMSwgQnVpbGQgdGltZTogMzAtSmFudWFyeS0yMDE2IDA1OjEzOjAzICovXG52YXIgcGFyc2VybGliID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbihmdW5jdGlvbigpe1xuXG4vKipcbiAqIEEgZ2VuZXJpYyBiYXNlIHRvIGluaGVyaXQgZnJvbSBmb3IgYW55IG9iamVjdFxuICogdGhhdCBuZWVkcyBldmVudCBoYW5kbGluZy5cbiAqIEBjbGFzcyBFdmVudFRhcmdldFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgbGlzdGVuZXJzIGZvciB2YXJpb3VzIGV2ZW50cy5cbiAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgKiBAcHJvcGVydHkgX2xpc3RlbmVyc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlID0ge1xuXG4gICAgLy9yZXN0b3JlIGNvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3I6IEV2ZW50VGFyZ2V0LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gYWRkIGEgbGlzdGVuZXIgZm9yLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBtZXRob2QgYWRkTGlzdGVuZXJcbiAgICAgKi9cbiAgICBhZGRMaXN0ZW5lcjogZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpe1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1t0eXBlXSl7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgYW4gZXZlbnQgYmFzZWQgb24gdGhlIHBhc3NlZC1pbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBldmVudCBBbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhICd0eXBlJyBhdHRyaWJ1dGVcbiAgICAgKiAgICAgIG9yIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIGV2ZW50IG5hbWUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAbWV0aG9kIGZpcmVcbiAgICAgKi9cbiAgICBmaXJlOiBmdW5jdGlvbihldmVudCl7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICAgICAgZXZlbnQgPSB7IHR5cGU6IGV2ZW50IH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudC50YXJnZXQgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0ID0gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQudHlwZSA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBvYmplY3QgbWlzc2luZyAndHlwZScgcHJvcGVydHkuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyc1tldmVudC50eXBlXSl7XG5cbiAgICAgICAgICAgIC8vY3JlYXRlIGEgY29weSBvZiB0aGUgYXJyYXkgYW5kIHVzZSB0aGF0IHNvIGxpc3RlbmVycyBjYW4ndCBjaGFuZVxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldmVudC50eXBlXS5jb25jYXQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudCB0eXBlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIHJlbW92ZSBhIGxpc3RlbmVyIGZyb20uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBtZXRob2QgcmVtb3ZlTGlzdGVuZXJcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpe1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzW3R5cGVdKXtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICBmb3IgKHZhciBpPTAsIGxlbj1saXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIENvbnZlbmllbnQgd2F5IHRvIHJlYWQgdGhyb3VnaCBzdHJpbmdzLlxuICogQG5hbWVzcGFjZSBwYXJzZXJsaWIudXRpbFxuICogQGNsYXNzIFN0cmluZ1JlYWRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZWFkLlxuICovXG5mdW5jdGlvbiBTdHJpbmdSZWFkZXIodGV4dCl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5wdXQgdGV4dCB3aXRoIGxpbmUgZW5kaW5ncyBub3JtYWxpemVkLlxuICAgICAqIEBwcm9wZXJ0eSBfaW5wdXRcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2lucHV0ID0gdGV4dC5yZXBsYWNlKC8oXFxyfFxcbil7MSwyfS9nLCBcIlxcblwiKTtcblxuXG4gICAgLyoqXG4gICAgICogVGhlIHJvdyBmb3IgdGhlIGNoYXJhY3RlciB0byBiZSByZWFkIG5leHQuXG4gICAgICogQHByb3BlcnR5IF9saW5lXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9saW5lID0gMTtcblxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3RlciB0byBiZSByZWFkIG5leHQuXG4gICAgICogQHByb3BlcnR5IF9jb2xcbiAgICAgKiBAdHlwZSBpbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2NvbCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNoYXJhY3RlciBpbiB0aGUgaW5wdXQgdG8gYmUgcmVhZCBuZXh0LlxuICAgICAqIEBwcm9wZXJ0eSBfY3Vyc29yXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jdXJzb3IgPSAwO1xufVxuXG5TdHJpbmdSZWFkZXIucHJvdG90eXBlID0ge1xuXG4gICAgLy9yZXN0b3JlIGNvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3I6IFN0cmluZ1JlYWRlcixcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFBvc2l0aW9uIGluZm9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbHVtbiBvZiB0aGUgY2hhcmFjdGVyIHRvIGJlIHJlYWQgbmV4dC5cbiAgICAgKiBAcmV0dXJuIHtpbnR9IFRoZSBjb2x1bW4gb2YgdGhlIGNoYXJhY3RlciB0byBiZSByZWFkIG5leHQuXG4gICAgICogQG1ldGhvZCBnZXRDb2xcbiAgICAgKi9cbiAgICBnZXRDb2w6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2w7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJvdyBvZiB0aGUgY2hhcmFjdGVyIHRvIGJlIHJlYWQgbmV4dC5cbiAgICAgKiBAcmV0dXJuIHtpbnR9IFRoZSByb3cgb2YgdGhlIGNoYXJhY3RlciB0byBiZSByZWFkIG5leHQuXG4gICAgICogQG1ldGhvZCBnZXRMaW5lXG4gICAgICovXG4gICAgZ2V0TGluZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmUgO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHlvdSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZXJlJ3Mgbm8gbW9yZSBpbnB1dCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBtZXRob2QgZW9mXG4gICAgICovXG4gICAgZW9mOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gKHRoaXMuX2N1cnNvciA9PT0gdGhpcy5faW5wdXQubGVuZ3RoKTtcbiAgICB9LFxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQmFzaWMgcmVhZGluZ1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIG5leHQgY2hhcmFjdGVyIHdpdGhvdXQgYWR2YW5jaW5nIHRoZSBjdXJzb3IuXG4gICAgICogQHBhcmFtIHtpbnR9IGNvdW50IEhvdyBtYW55IGNoYXJhY3RlcnMgdG8gbG9vayBhaGVhZCAoZGVmYXVsdCBpcyAxKS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBuZXh0IGNoYXJhY3RlciBvciBudWxsIGlmIHRoZXJlIGlzIG5vIG5leHQgY2hhcmFjdGVyLlxuICAgICAqIEBtZXRob2QgcGVla1xuICAgICAqL1xuICAgIHBlZWs6IGZ1bmN0aW9uKGNvdW50KXtcbiAgICAgICAgdmFyIGMgPSBudWxsO1xuICAgICAgICBjb3VudCA9ICh0eXBlb2YgY291bnQgPT09IFwidW5kZWZpbmVkXCIgPyAxIDogY291bnQpO1xuXG4gICAgICAgIC8vaWYgd2UncmUgbm90IGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0Li4uXG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3IgPCB0aGlzLl9pbnB1dC5sZW5ndGgpe1xuXG4gICAgICAgICAgICAvL2dldCBjaGFyYWN0ZXIgYW5kIGluY3JlbWVudCBjdXJzb3IgYW5kIGNvbHVtblxuICAgICAgICAgICAgYyA9IHRoaXMuX2lucHV0LmNoYXJBdCh0aGlzLl9jdXJzb3IgKyBjb3VudCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBuZXh0IGNoYXJhY3RlciBmcm9tIHRoZSBpbnB1dCBhbmQgYWRqdXN0cyB0aGUgcm93IGFuZCBjb2x1bW5cbiAgICAgKiBhY2NvcmRpbmdseS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBuZXh0IGNoYXJhY3RlciBvciBudWxsIGlmIHRoZXJlIGlzIG5vIG5leHQgY2hhcmFjdGVyLlxuICAgICAqIEBtZXRob2QgcmVhZFxuICAgICAqL1xuICAgIHJlYWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjID0gbnVsbDtcblxuICAgICAgICAvL2lmIHdlJ3JlIG5vdCBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4uLlxuICAgICAgICBpZiAodGhpcy5fY3Vyc29yIDwgdGhpcy5faW5wdXQubGVuZ3RoKXtcblxuICAgICAgICAgICAgLy9pZiB0aGUgbGFzdCBjaGFyYWN0ZXIgd2FzIGEgbmV3bGluZSwgaW5jcmVtZW50IHJvdyBjb3VudFxuICAgICAgICAgICAgLy9hbmQgcmVzZXQgY29sdW1uIGNvdW50XG4gICAgICAgICAgICBpZiAodGhpcy5faW5wdXQuY2hhckF0KHRoaXMuX2N1cnNvcikgPT09IFwiXFxuXCIpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpbmUrKztcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2w9MTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZ2V0IGNoYXJhY3RlciBhbmQgaW5jcmVtZW50IGN1cnNvciBhbmQgY29sdW1uXG4gICAgICAgICAgICBjID0gdGhpcy5faW5wdXQuY2hhckF0KHRoaXMuX2N1cnNvcisrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjO1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNaXNjXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBTYXZlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBzbyBpdCBjYW4gYmUgcmV0dXJuZWQgdG8gbGF0ZXIuXG4gICAgICogQG1ldGhvZCBtYXJrXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBtYXJrOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLl9ib29rbWFyayA9IHtcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5fY3Vyc29yLFxuICAgICAgICAgICAgbGluZTogICB0aGlzLl9saW5lLFxuICAgICAgICAgICAgY29sOiAgICB0aGlzLl9jb2xcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmICh0aGlzLl9ib29rbWFyayl7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSB0aGlzLl9ib29rbWFyay5jdXJzb3I7XG4gICAgICAgICAgICB0aGlzLl9saW5lID0gdGhpcy5fYm9va21hcmsubGluZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbCA9IHRoaXMuX2Jvb2ttYXJrLmNvbDtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ib29rbWFyaztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBBZHZhbmNlZCByZWFkaW5nXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBSZWFkcyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBnaXZlbiBzdHJpbmcuIFRocm93cyBhbiBlcnJvciBpZiB0aGF0XG4gICAgICogc3RyaW5nIGlzIG5vdCBmb3VuZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBUaGUgc3RyaW5nIHRvIHJlYWQuXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgc3RyaW5nIHdoZW4gaXQgaXMgZm91bmQuXG4gICAgICogQHRocm93cyBFcnJvciB3aGVuIHRoZSBzdHJpbmcgcGF0dGVybiBpcyBub3QgZm91bmQuXG4gICAgICogQG1ldGhvZCByZWFkVG9cbiAgICAgKi9cbiAgICByZWFkVG86IGZ1bmN0aW9uKHBhdHRlcm4pe1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBcIlwiLFxuICAgICAgICAgICAgYztcblxuICAgICAgICAvKlxuICAgICAgICAgKiBGaXJzdCwgYnVmZmVyIG11c3QgYmUgdGhlIHNhbWUgbGVuZ3RoIGFzIHRoZSBwYXR0ZXJuLlxuICAgICAgICAgKiBUaGVuLCBidWZmZXIgbXVzdCBlbmQgd2l0aCB0aGUgcGF0dGVybiBvciBlbHNlIHJlYWNoIHRoZVxuICAgICAgICAgKiBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggPCBwYXR0ZXJuLmxlbmd0aCB8fCBidWZmZXIubGFzdEluZGV4T2YocGF0dGVybikgIT09IGJ1ZmZlci5sZW5ndGggLSBwYXR0ZXJuLmxlbmd0aCl7XG4gICAgICAgICAgICBjID0gdGhpcy5yZWFkKCk7XG4gICAgICAgICAgICBpZiAoYyl7XG4gICAgICAgICAgICAgICAgYnVmZmVyICs9IGM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFxcXCJcIiArIHBhdHRlcm4gKyBcIlxcXCIgYXQgbGluZSBcIiArIHRoaXMuX2xpbmUgICsgXCIsIGNvbCBcIiArIHRoaXMuX2NvbCArIFwiLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidWZmZXI7XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgY2hhcmFjdGVycyB3aGlsZSBlYWNoIGNoYXJhY3RlciBjYXVzZXMgdGhlIGdpdmVuXG4gICAgICogZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHVybiB0cnVlLiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkXG4gICAgICogaW4gZWFjaCBjaGFyYWN0ZXIgYW5kIGVpdGhlciByZXR1cm5zIHRydWUgdG8gY29udGludWVcbiAgICAgKiByZWFkaW5nIG9yIGZhbHNlIHRvIHN0b3AuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyIFRoZSBmdW5jdGlvbiB0byByZWFkIG9uIGVhY2ggY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHN0cmluZyBtYWRlIHVwIG9mIGFsbCBjaGFyYWN0ZXJzIHRoYXQgcGFzc2VkIHRoZVxuICAgICAqICAgICAgZmlsdGVyIGNoZWNrLlxuICAgICAqIEBtZXRob2QgcmVhZFdoaWxlXG4gICAgICovXG4gICAgcmVhZFdoaWxlOiBmdW5jdGlvbihmaWx0ZXIpe1xuXG4gICAgICAgIHZhciBidWZmZXIgPSBcIlwiLFxuICAgICAgICAgICAgYyA9IHRoaXMucmVhZCgpO1xuXG4gICAgICAgIHdoaWxlKGMgIT09IG51bGwgJiYgZmlsdGVyKGMpKXtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjO1xuICAgICAgICAgICAgYyA9IHRoaXMucmVhZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWFkcyBjaGFyYWN0ZXJzIHRoYXQgbWF0Y2ggZWl0aGVyIHRleHQgb3IgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kXG4gICAgICogcmV0dXJucyB0aG9zZSBjaGFyYWN0ZXJzLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgcm93IGFuZCBjb2x1bW5cbiAgICAgKiBhcmUgYWRqdXN0ZWQ7IGlmIG5vIG1hdGNoIGlzIGZvdW5kLCB0aGUgcmVhZGVyJ3Mgc3RhdGUgaXMgdW5jaGFuZ2VkLlxuICAgICAqIHJlYWRpbmcgb3IgZmFsc2UgdG8gc3RvcC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IG1hdGNodGVyIElmIGEgc3RyaW5nLCB0aGVuIHRoZSBsaXRlcmFsIHN0cmluZ1xuICAgICAqICAgICAgdmFsdWUgaXMgc2VhcmNoZWQgZm9yLiBJZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgdGhlbiBhbnkgc3RyaW5nXG4gICAgICogICAgICBtYXRjaGluZyB0aGUgcGF0dGVybiBpcyBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHN0cmluZyBtYWRlIHVwIG9mIGFsbCBjaGFyYWN0ZXJzIHRoYXQgbWF0Y2hlZCBvclxuICAgICAqICAgICAgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gICAgICogQG1ldGhvZCByZWFkTWF0Y2hcbiAgICAgKi9cbiAgICByZWFkTWF0Y2g6IGZ1bmN0aW9uKG1hdGNoZXIpe1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLl9pbnB1dC5zdWJzdHJpbmcodGhpcy5fY3Vyc29yKSxcbiAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcblxuICAgICAgICAvL2lmIGl0J3MgYSBzdHJpbmcsIGp1c3QgZG8gYSBzdHJhaWdodCBtYXRjaFxuICAgICAgICBpZiAodHlwZW9mIG1hdGNoZXIgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5pbmRleE9mKG1hdGNoZXIpID09PSAwKXtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucmVhZENvdW50KG1hdGNoZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaGVyIGluc3RhbmNlb2YgUmVnRXhwKXtcbiAgICAgICAgICAgIGlmIChtYXRjaGVyLnRlc3Qoc291cmNlKSl7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnJlYWRDb3VudChSZWdFeHAubGFzdE1hdGNoLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgYSBnaXZlbiBudW1iZXIgb2YgY2hhcmFjdGVycy4gSWYgdGhlIGVuZCBvZiB0aGUgaW5wdXQgaXMgcmVhY2hlZCxcbiAgICAgKiBpdCByZWFkcyBvbmx5IHRoZSByZW1haW5pbmcgY2hhcmFjdGVycyBhbmQgZG9lcyBub3QgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHtpbnR9IGNvdW50IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byByZWFkLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHN0cmluZyBtYWRlIHVwIHRoZSByZWFkIGNoYXJhY3RlcnMuXG4gICAgICogQG1ldGhvZCByZWFkQ291bnRcbiAgICAgKi9cbiAgICByZWFkQ291bnQ6IGZ1bmN0aW9uKGNvdW50KXtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IFwiXCI7XG5cbiAgICAgICAgd2hpbGUoY291bnQtLSl7XG4gICAgICAgICAgICBidWZmZXIgKz0gdGhpcy5yZWFkKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cblxufTtcbi8qKlxuICogVHlwZSB0byB1c2Ugd2hlbiBhIHN5bnRheCBlcnJvciBvY2N1cnMuXG4gKiBAY2xhc3MgU3ludGF4RXJyb3JcbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLnV0aWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge2ludH0gbGluZSBUaGUgbGluZSBhdCB3aGljaCB0aGUgZXJyb3Igb2NjdXJyZWQuXG4gKiBAcGFyYW0ge2ludH0gY29sIFRoZSBjb2x1bW4gYXQgd2hpY2ggdGhlIGVycm9yIG9jY3VycmVkLlxuICovXG5mdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlLCBsaW5lLCBjb2wpe1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiBhdCB3aGljaCB0aGUgZXJyb3Igb2NjdXJyZWQuXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IGNvbFxuICAgICAqL1xuICAgIHRoaXMuY29sID0gY29sO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxpbmUgYXQgd2hpY2ggdGhlIGVycm9yIG9jY3VycmVkLlxuICAgICAqIEB0eXBlIGludFxuICAgICAqIEBwcm9wZXJ0eSBsaW5lXG4gICAgICovXG4gICAgdGhpcy5saW5lID0gbGluZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSB1bml0LlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBwcm9wZXJ0eSB0ZXh0XG4gICAgICovXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblxufVxuXG4vL2luaGVyaXQgZnJvbSBFcnJvclxuU3ludGF4RXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblN5bnRheEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bnRheEVycm9yOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbi8qKlxuICogQmFzZSB0eXBlIHRvIHJlcHJlc2VudCBhIHNpbmdsZSBzeW50YWN0aWMgdW5pdC5cbiAqIEBjbGFzcyBTeW50YXhVbml0XG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi51dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IG9mIHRoZSB1bml0LlxuICogQHBhcmFtIHtpbnR9IGxpbmUgVGhlIGxpbmUgb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICogQHBhcmFtIHtpbnR9IGNvbCBUaGUgY29sdW1uIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqL1xuZnVuY3Rpb24gU3ludGF4VW5pdCh0ZXh0LCBsaW5lLCBjb2wsIHR5cGUpe1xuXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1uIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAgICAgKiBAdHlwZSBpbnRcbiAgICAgKiBAcHJvcGVydHkgY29sXG4gICAgICovXG4gICAgdGhpcy5jb2wgPSBjb2w7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGluZSBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IGxpbmVcbiAgICAgKi9cbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IHRleHRcbiAgICAgKi9cbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2Ygc3ludGF4IHVuaXQuXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzeW50YXggdW5pdCBiYXNlZCBzb2xlbHkgb24gdGhlIGdpdmVuIHRva2VuLlxuICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBhIG5ldyBzeW50YXggdW5pdCB3aGVuXG4gKiBpdCByZXByZXNlbnRzIGEgc2luZ2xlIHRva2VuIGluc3RlYWQgb2YgbXVsdGlwbGUuXG4gKiBAcGFyYW0ge09iamVjdH0gdG9rZW4gVGhlIHRva2VuIG9iamVjdCB0byByZXByZXNlbnQuXG4gKiBAcmV0dXJuIHtwYXJzZXJsaWIudXRpbC5TeW50YXhVbml0fSBUaGUgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdG9rZW4uXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIGZyb21Ub2tlblxuICovXG5TeW50YXhVbml0LmZyb21Ub2tlbiA9IGZ1bmN0aW9uKHRva2VuKXtcbiAgICByZXR1cm4gbmV3IFN5bnRheFVuaXQodG9rZW4udmFsdWUsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xufTtcblxuU3ludGF4VW5pdC5wcm90b3R5cGUgPSB7XG5cbiAgICAvL3Jlc3RvcmUgY29uc3RydWN0b3JcbiAgICBjb25zdHJ1Y3RvcjogU3ludGF4VW5pdCxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgdGV4dCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdW5pdC5cbiAgICAgKiBAbWV0aG9kIHZhbHVlT2ZcbiAgICAgKi9cbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZXh0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSB1bml0LlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0O1xuICAgIH1cblxufTtcblxuLyoqXG4gKiBHZW5lcmljIFRva2VuU3RyZWFtIHByb3ZpZGluZyBiYXNlIGZ1bmN0aW9uYWxpdHkuXG4gKiBAY2xhc3MgVG9rZW5TdHJlYW1CYXNlXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi51dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1JlYWRlcn0gaW5wdXQgVGhlIHRleHQgdG8gdG9rZW5pemUgb3IgYSByZWFkZXIgZnJvbVxuICogICAgICB3aGljaCB0byByZWFkIHRoZSBpbnB1dC5cbiAqL1xuZnVuY3Rpb24gVG9rZW5TdHJlYW1CYXNlKGlucHV0LCB0b2tlbkRhdGEpe1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0cmluZyByZWFkZXIgZm9yIGVhc3kgYWNjZXNzIHRvIHRoZSB0ZXh0LlxuICAgICAqIEB0eXBlIFN0cmluZ1JlYWRlclxuICAgICAqIEBwcm9wZXJ0eSBfcmVhZGVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9yZWFkZXIgPSBpbnB1dCA/IG5ldyBTdHJpbmdSZWFkZXIoaW5wdXQudG9TdHJpbmcoKSkgOiBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVG9rZW4gb2JqZWN0IGZvciB0aGUgbGFzdCBjb25zdW1lZCB0b2tlbi5cbiAgICAgKiBAdHlwZSBUb2tlblxuICAgICAqIEBwcm9wZXJ0eSBfdG9rZW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3Rva2VuID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcnJheSBvZiB0b2tlbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBwcm9wZXJ0eSBfdG9rZW5EYXRhXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90b2tlbkRhdGEgPSB0b2tlbkRhdGE7XG5cbiAgICAvKipcbiAgICAgKiBMb29rYWhlYWQgdG9rZW4gYnVmZmVyLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQHByb3BlcnR5IF9sdFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbHQgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIExvb2thaGVhZCB0b2tlbiBidWZmZXIgaW5kZXguXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IF9sdEluZGV4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9sdEluZGV4ID0gMDtcblxuICAgIHRoaXMuX2x0SW5kZXhDYWNoZSA9IFtdO1xufVxuXG4vKipcbiAqIEFjY2VwdHMgYW4gYXJyYXkgb2YgdG9rZW4gaW5mb3JtYXRpb24gYW5kIG91dHB1dHNcbiAqIGFuIGFycmF5IG9mIHRva2VuIGRhdGEgY29udGFpbmluZyBrZXktdmFsdWUgbWFwcGluZ3NcbiAqIGFuZCBtYXRjaGluZyBmdW5jdGlvbnMgdGhhdCB0aGUgVG9rZW5TdHJlYW0gbmVlZHMuXG4gKiBAcGFyYW0ge0FycmF5fSB0b2tlbnMgQW4gYXJyYXkgb2YgdG9rZW4gZGVzY3JpcHRvcnMuXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgcHJvY2Vzc2VkIHRva2VuIGRhdGEuXG4gKiBAbWV0aG9kIGNyZWF0ZVRva2VuRGF0YVxuICogQHN0YXRpY1xuICovXG5Ub2tlblN0cmVhbUJhc2UuY3JlYXRlVG9rZW5EYXRhID0gZnVuY3Rpb24odG9rZW5zKXtcblxuICAgIHZhciBuYW1lTWFwICAgICA9IFtdLFxuICAgICAgICB0eXBlTWFwICAgICA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgIHRva2VuRGF0YSAgICAgPSB0b2tlbnMuY29uY2F0KFtdKSxcbiAgICAgICAgaSAgICAgICAgICAgID0gMCxcbiAgICAgICAgbGVuICAgICAgICAgICAgPSB0b2tlbkRhdGEubGVuZ3RoKzE7XG5cbiAgICB0b2tlbkRhdGEuVU5LTk9XTiA9IC0xO1xuICAgIHRva2VuRGF0YS51bnNoaWZ0KHtuYW1lOlwiRU9GXCJ9KTtcblxuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICBuYW1lTWFwLnB1c2godG9rZW5EYXRhW2ldLm5hbWUpO1xuICAgICAgICB0b2tlbkRhdGFbdG9rZW5EYXRhW2ldLm5hbWVdID0gaTtcbiAgICAgICAgaWYgKHRva2VuRGF0YVtpXS50ZXh0KXtcbiAgICAgICAgICAgIHR5cGVNYXBbdG9rZW5EYXRhW2ldLnRleHRdID0gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRva2VuRGF0YS5uYW1lID0gZnVuY3Rpb24odHQpe1xuICAgICAgICByZXR1cm4gbmFtZU1hcFt0dF07XG4gICAgfTtcblxuICAgIHRva2VuRGF0YS50eXBlID0gZnVuY3Rpb24oYyl7XG4gICAgICAgIHJldHVybiB0eXBlTWFwW2NdO1xuICAgIH07XG5cbiAgICByZXR1cm4gdG9rZW5EYXRhO1xufTtcblxuVG9rZW5TdHJlYW1CYXNlLnByb3RvdHlwZSA9IHtcblxuICAgIC8vcmVzdG9yZSBjb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yOiBUb2tlblN0cmVhbUJhc2UsXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNYXRjaGluZyBtZXRob2RzXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBuZXh0IHRva2VuIG1hdGNoZXMgdGhlIGdpdmVuIHRva2VuIHR5cGUuXG4gICAgICogSWYgc28sIHRoYXQgdG9rZW4gaXMgY29uc3VtZWQ7IGlmIG5vdCwgdGhlIHRva2VuIGlzIHBsYWNlZFxuICAgICAqIGJhY2sgb250byB0aGUgdG9rZW4gc3RyZWFtLiBZb3UgY2FuIHBhc3MgaW4gYW55IG51bWJlciBvZlxuICAgICAqIHRva2VuIHR5cGVzIGFuZCB0aGlzIHdpbGwgcmV0dXJuIHRydWUgaWYgYW55IG9mIHRoZSB0b2tlblxuICAgICAqIHR5cGVzIGlzIGZvdW5kLlxuICAgICAqIEBwYXJhbSB7aW50fGludFtdfSB0b2tlblR5cGVzIEVpdGhlciBhIHNpbmdsZSB0b2tlbiB0eXBlIG9yIGFuIGFycmF5IG9mXG4gICAgICogICAgICB0b2tlbiB0eXBlcyB0aGF0IHRoZSBuZXh0IHRva2VuIG1pZ2h0IGJlLiBJZiBhbiBhcnJheSBpcyBwYXNzZWQsXG4gICAgICogICAgICBpdCdzIGFzc3VtZWQgdGhhdCB0aGUgdG9rZW4gY2FuIGJlIGFueSBvZiB0aGVzZS5cbiAgICAgKiBAcGFyYW0ge3ZhcmlhbnR9IGNoYW5uZWwgKE9wdGlvbmFsKSBUaGUgY2hhbm5lbCB0byByZWFkIGZyb20uIElmIG5vdFxuICAgICAqICAgICAgcHJvdmlkZWQsIHJlYWRzIGZyb20gdGhlIGRlZmF1bHQgKHVubmFtZWQpIGNoYW5uZWwuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdG9rZW4gdHlwZSBtYXRjaGVzLCBmYWxzZSBpZiBub3QuXG4gICAgICogQG1ldGhvZCBtYXRjaFxuICAgICAqL1xuICAgIG1hdGNoOiBmdW5jdGlvbih0b2tlblR5cGVzLCBjaGFubmVsKXtcblxuICAgICAgICAvL2Fsd2F5cyBjb252ZXJ0IHRvIGFuIGFycmF5LCBtYWtlcyB0aGluZ3MgZWFzaWVyXG4gICAgICAgIGlmICghKHRva2VuVHlwZXMgaW5zdGFuY2VvZiBBcnJheSkpe1xuICAgICAgICAgICAgdG9rZW5UeXBlcyA9IFt0b2tlblR5cGVzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0dCAgPSB0aGlzLmdldChjaGFubmVsKSxcbiAgICAgICAgICAgIGkgICA9IDAsXG4gICAgICAgICAgICBsZW4gPSB0b2tlblR5cGVzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZShpIDwgbGVuKXtcbiAgICAgICAgICAgIGlmICh0dCA9PT0gdG9rZW5UeXBlc1tpKytdKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vbm8gbWF0Y2ggZm91bmQsIHB1dCB0aGUgdG9rZW4gYmFja1xuICAgICAgICB0aGlzLnVuZ2V0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgbmV4dCB0b2tlbiBtYXRjaGVzIHRoZSBnaXZlbiB0b2tlbiB0eXBlLlxuICAgICAqIElmIHNvLCB0aGF0IHRva2VuIGlzIGNvbnN1bWVkOyBpZiBub3QsIGFuIGVycm9yIGlzIHRocm93bi5cbiAgICAgKiBAcGFyYW0ge2ludHxpbnRbXX0gdG9rZW5UeXBlcyBFaXRoZXIgYSBzaW5nbGUgdG9rZW4gdHlwZSBvciBhbiBhcnJheSBvZlxuICAgICAqICAgICAgdG9rZW4gdHlwZXMgdGhhdCB0aGUgbmV4dCB0b2tlbiBzaG91bGQgYmUuIElmIGFuIGFycmF5IGlzIHBhc3NlZCxcbiAgICAgKiAgICAgIGl0J3MgYXNzdW1lZCB0aGF0IHRoZSB0b2tlbiBtdXN0IGJlIG9uZSBvZiB0aGVzZS5cbiAgICAgKiBAcGFyYW0ge3ZhcmlhbnR9IGNoYW5uZWwgKE9wdGlvbmFsKSBUaGUgY2hhbm5lbCB0byByZWFkIGZyb20uIElmIG5vdFxuICAgICAqICAgICAgcHJvdmlkZWQsIHJlYWRzIGZyb20gdGhlIGRlZmF1bHQgKHVubmFtZWQpIGNoYW5uZWwuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAbWV0aG9kIG11c3RNYXRjaFxuICAgICAqL1xuICAgIG11c3RNYXRjaDogZnVuY3Rpb24odG9rZW5UeXBlcywgY2hhbm5lbCl7XG5cbiAgICAgICAgdmFyIHRva2VuO1xuXG4gICAgICAgIC8vYWx3YXlzIGNvbnZlcnQgdG8gYW4gYXJyYXksIG1ha2VzIHRoaW5ncyBlYXNpZXJcbiAgICAgICAgaWYgKCEodG9rZW5UeXBlcyBpbnN0YW5jZW9mIEFycmF5KSl7XG4gICAgICAgICAgICB0b2tlblR5cGVzID0gW3Rva2VuVHlwZXNdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpe1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLkxUKDEpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiRXhwZWN0ZWQgXCIgKyB0aGlzLl90b2tlbkRhdGFbdG9rZW5UeXBlc1swXV0ubmFtZSArXG4gICAgICAgICAgICAgICAgXCIgYXQgbGluZSBcIiArIHRva2VuLnN0YXJ0TGluZSArIFwiLCBjb2wgXCIgKyB0b2tlbi5zdGFydENvbCArIFwiLlwiLCB0b2tlbi5zdGFydExpbmUsIHRva2VuLnN0YXJ0Q29sKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDb25zdW1pbmcgbWV0aG9kc1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogS2VlcHMgcmVhZGluZyBmcm9tIHRoZSB0b2tlbiBzdHJlYW0gdW50aWwgZWl0aGVyIG9uZSBvZiB0aGUgc3BlY2lmaWVkXG4gICAgICogdG9rZW4gdHlwZXMgaXMgZm91bmQgb3IgdW50aWwgdGhlIGVuZCBvZiB0aGUgaW5wdXQgaXMgcmVhY2hlZC5cbiAgICAgKiBAcGFyYW0ge2ludHxpbnRbXX0gdG9rZW5UeXBlcyBFaXRoZXIgYSBzaW5nbGUgdG9rZW4gdHlwZSBvciBhbiBhcnJheSBvZlxuICAgICAqICAgICAgdG9rZW4gdHlwZXMgdGhhdCB0aGUgbmV4dCB0b2tlbiBzaG91bGQgYmUuIElmIGFuIGFycmF5IGlzIHBhc3NlZCxcbiAgICAgKiAgICAgIGl0J3MgYXNzdW1lZCB0aGF0IHRoZSB0b2tlbiBtdXN0IGJlIG9uZSBvZiB0aGVzZS5cbiAgICAgKiBAcGFyYW0ge3ZhcmlhbnR9IGNoYW5uZWwgKE9wdGlvbmFsKSBUaGUgY2hhbm5lbCB0byByZWFkIGZyb20uIElmIG5vdFxuICAgICAqICAgICAgcHJvdmlkZWQsIHJlYWRzIGZyb20gdGhlIGRlZmF1bHQgKHVubmFtZWQpIGNoYW5uZWwuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAbWV0aG9kIGFkdmFuY2VcbiAgICAgKi9cbiAgICBhZHZhbmNlOiBmdW5jdGlvbih0b2tlblR5cGVzLCBjaGFubmVsKXtcblxuICAgICAgICB3aGlsZSh0aGlzLkxBKDApICE9PSAwICYmICF0aGlzLm1hdGNoKHRva2VuVHlwZXMsIGNoYW5uZWwpKXtcbiAgICAgICAgICAgIHRoaXMuZ2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5MQSgwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3VtZXMgdGhlIG5leHQgdG9rZW4gZnJvbSB0aGUgdG9rZW4gc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge2ludH0gVGhlIHRva2VuIHR5cGUgb2YgdGhlIHRva2VuIHRoYXQgd2FzIGp1c3QgY29uc3VtZWQuXG4gICAgICogQG1ldGhvZCBnZXRcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKGNoYW5uZWwpe1xuXG4gICAgICAgIHZhciB0b2tlbkluZm8gICA9IHRoaXMuX3Rva2VuRGF0YSxcbiAgICAgICAgICAgIGkgICAgICAgICAgID0wLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICBpbmZvO1xuXG4gICAgICAgIC8vY2hlY2sgdGhlIGxvb2thaGVhZCBidWZmZXIgZmlyc3RcbiAgICAgICAgaWYgKHRoaXMuX2x0Lmxlbmd0aCAmJiB0aGlzLl9sdEluZGV4ID49IDAgJiYgdGhpcy5fbHRJbmRleCA8IHRoaXMuX2x0Lmxlbmd0aCl7XG5cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gdGhpcy5fbHRbdGhpcy5fbHRJbmRleCsrXTtcbiAgICAgICAgICAgIGluZm8gPSB0b2tlbkluZm9bdGhpcy5fdG9rZW4udHlwZV07XG5cbiAgICAgICAgICAgIC8vb2JleSBjaGFubmVscyBsb2dpY1xuICAgICAgICAgICAgd2hpbGUoKGluZm8uY2hhbm5lbCAhPT0gdW5kZWZpbmVkICYmIGNoYW5uZWwgIT09IGluZm8uY2hhbm5lbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbHRJbmRleCA8IHRoaXMuX2x0Lmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSB0aGlzLl9sdFt0aGlzLl9sdEluZGV4KytdO1xuICAgICAgICAgICAgICAgIGluZm8gPSB0b2tlbkluZm9bdGhpcy5fdG9rZW4udHlwZV07XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2hlcmUgYmUgZHJhZ29uc1xuICAgICAgICAgICAgaWYgKChpbmZvLmNoYW5uZWwgPT09IHVuZGVmaW5lZCB8fCBjaGFubmVsID09PSBpbmZvLmNoYW5uZWwpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2x0SW5kZXggPD0gdGhpcy5fbHQubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9sdEluZGV4Q2FjaGUucHVzaChpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW4udHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2FsbCB0b2tlbiByZXRyaWV2ZXIgbWV0aG9kXG4gICAgICAgIHRva2VuID0gdGhpcy5fZ2V0VG9rZW4oKTtcblxuICAgICAgICAvL2lmIGl0IHNob3VsZCBiZSBoaWRkZW4sIGRvbid0IHNhdmUgYSB0b2tlblxuICAgICAgICBpZiAodG9rZW4udHlwZSA+IC0xICYmICF0b2tlbkluZm9bdG9rZW4udHlwZV0uaGlkZSl7XG5cbiAgICAgICAgICAgIC8vYXBwbHkgdG9rZW4gY2hhbm5lbFxuICAgICAgICAgICAgdG9rZW4uY2hhbm5lbCA9IHRva2VuSW5mb1t0b2tlbi50eXBlXS5jaGFubmVsO1xuXG4gICAgICAgICAgICAvL3NhdmUgZm9yIGxhdGVyXG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgdGhpcy5fbHQucHVzaCh0b2tlbik7XG5cbiAgICAgICAgICAgIC8vc2F2ZSBzcGFjZSB0aGF0IHdpbGwgYmUgbW92ZWQgKG11c3QgYmUgZG9uZSBiZWZvcmUgYXJyYXkgaXMgdHJ1bmNhdGVkKVxuICAgICAgICAgICAgdGhpcy5fbHRJbmRleENhY2hlLnB1c2godGhpcy5fbHQubGVuZ3RoIC0gdGhpcy5fbHRJbmRleCArIGkpO1xuXG4gICAgICAgICAgICAvL2tlZXAgdGhlIGJ1ZmZlciB1bmRlciA1IGl0ZW1zXG4gICAgICAgICAgICBpZiAodGhpcy5fbHQubGVuZ3RoID4gNSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fbHQuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9hbHNvIGtlZXAgdGhlIHNoaWZ0IGJ1ZmZlciB1bmRlciA1IGl0ZW1zXG4gICAgICAgICAgICBpZiAodGhpcy5fbHRJbmRleENhY2hlLmxlbmd0aCA+IDUpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2x0SW5kZXhDYWNoZS5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3VwZGF0ZSBsb29rYWhlYWQgaW5kZXhcbiAgICAgICAgICAgIHRoaXMuX2x0SW5kZXggPSB0aGlzLl9sdC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvKlxuICAgICAgICAgKiBTa2lwIHRvIHRoZSBuZXh0IHRva2VuIGlmOlxuICAgICAgICAgKiAxLiBUaGUgdG9rZW4gdHlwZSBpcyBtYXJrZWQgYXMgaGlkZGVuLlxuICAgICAgICAgKiAyLiBUaGUgdG9rZW4gdHlwZSBoYXMgYSBjaGFubmVsIHNwZWNpZmllZCBhbmQgaXQgaXNuJ3QgdGhlIGN1cnJlbnQgY2hhbm5lbC5cbiAgICAgICAgICovXG4gICAgICAgIGluZm8gPSB0b2tlbkluZm9bdG9rZW4udHlwZV07XG4gICAgICAgIGlmIChpbmZvICYmXG4gICAgICAgICAgICAgICAgKGluZm8uaGlkZSB8fFxuICAgICAgICAgICAgICAgIChpbmZvLmNoYW5uZWwgIT09IHVuZGVmaW5lZCAmJiBjaGFubmVsICE9PSBpbmZvLmNoYW5uZWwpKSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoY2hhbm5lbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3JldHVybiBqdXN0IHRoZSB0eXBlXG4gICAgICAgICAgICByZXR1cm4gdG9rZW4udHlwZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb29rcyBhaGVhZCBhIGNlcnRhaW4gbnVtYmVyIG9mIHRva2VucyBhbmQgcmV0dXJucyB0aGUgdG9rZW4gdHlwZSBhdFxuICAgICAqIHRoYXQgcG9zaXRpb24uIFRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB5b3UgbG9va2FoZWFkIHBhc3QgdGhlXG4gICAgICogZW5kIG9mIGlucHV0LCBwYXN0IHRoZSBzaXplIG9mIHRoZSBsb29rYWhlYWQgYnVmZmVyLCBvciBiYWNrIHBhc3RcbiAgICAgKiB0aGUgZmlyc3QgdG9rZW4gaW4gdGhlIGxvb2thaGVhZCBidWZmZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IFRoZSBpbmRleCBvZiB0aGUgdG9rZW4gdHlwZSB0byByZXRyaWV2ZS4gMCBmb3IgdGhlXG4gICAgICogICAgICBjdXJyZW50IHRva2VuLCAxIGZvciB0aGUgbmV4dCwgLTEgZm9yIHRoZSBwcmV2aW91cywgZXRjLlxuICAgICAqIEByZXR1cm4ge2ludH0gVGhlIHRva2VuIHR5cGUgb2YgdGhlIHRva2VuIGluIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAgKiBAbWV0aG9kIExBXG4gICAgICovXG4gICAgTEE6IGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgdmFyIHRvdGFsID0gaW5kZXgsXG4gICAgICAgICAgICB0dDtcbiAgICAgICAgaWYgKGluZGV4ID4gMCl7XG4gICAgICAgICAgICAvL1RPRE86IFN0b3JlIDUgc29tZXdoZXJlXG4gICAgICAgICAgICBpZiAoaW5kZXggPiA1KXtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbXVjaCBsb29rYWhlYWQuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2dldCBhbGwgdGhvc2UgdG9rZW5zXG4gICAgICAgICAgICB3aGlsZSh0b3RhbCl7XG4gICAgICAgICAgICAgICAgdHQgPSB0aGlzLmdldCgpO1xuICAgICAgICAgICAgICAgIHRvdGFsLS07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdW5nZXQgYWxsIHRob3NlIHRva2Vuc1xuICAgICAgICAgICAgd2hpbGUodG90YWwgPCBpbmRleCl7XG4gICAgICAgICAgICAgICAgdGhpcy51bmdldCgpO1xuICAgICAgICAgICAgICAgIHRvdGFsKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwKXtcblxuICAgICAgICAgICAgaWYodGhpcy5fbHRbdGhpcy5fbHRJbmRleCtpbmRleF0pe1xuICAgICAgICAgICAgICAgIHR0ID0gdGhpcy5fbHRbdGhpcy5fbHRJbmRleCtpbmRleF0udHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vIG11Y2ggbG9va2JlaGluZC5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR0ID0gdGhpcy5fdG9rZW4udHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0dDtcblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb29rcyBhaGVhZCBhIGNlcnRhaW4gbnVtYmVyIG9mIHRva2VucyBhbmQgcmV0dXJucyB0aGUgdG9rZW4gYXRcbiAgICAgKiB0aGF0IHBvc2l0aW9uLiBUaGlzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgeW91IGxvb2thaGVhZCBwYXN0IHRoZVxuICAgICAqIGVuZCBvZiBpbnB1dCwgcGFzdCB0aGUgc2l6ZSBvZiB0aGUgbG9va2FoZWFkIGJ1ZmZlciwgb3IgYmFjayBwYXN0XG4gICAgICogdGhlIGZpcnN0IHRva2VuIGluIHRoZSBsb29rYWhlYWQgYnVmZmVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBUaGUgaW5kZXggb2YgdGhlIHRva2VuIHR5cGUgdG8gcmV0cmlldmUuIDAgZm9yIHRoZVxuICAgICAqICAgICAgY3VycmVudCB0b2tlbiwgMSBmb3IgdGhlIG5leHQsIC0xIGZvciB0aGUgcHJldmlvdXMsIGV0Yy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB0b2tlbiBvZiB0aGUgdG9rZW4gaW4gdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqIEBtZXRob2QgTEFcbiAgICAgKi9cbiAgICBMVDogZnVuY3Rpb24oaW5kZXgpe1xuXG4gICAgICAgIC8vbG9va2FoZWFkIGZpcnN0IHRvIHByaW1lIHRoZSB0b2tlbiBidWZmZXJcbiAgICAgICAgdGhpcy5MQShpbmRleCk7XG5cbiAgICAgICAgLy9ub3cgZmluZCB0aGUgdG9rZW4sIHN1YnRyYWN0IG9uZSBiZWNhdXNlIF9sdEluZGV4IGlzIGFscmVhZHkgYXQgdGhlIG5leHQgaW5kZXhcbiAgICAgICAgcmV0dXJuIHRoaXMuX2x0W3RoaXMuX2x0SW5kZXgraW5kZXgtMV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRva2VuIHR5cGUgZm9yIHRoZSBuZXh0IHRva2VuIGluIHRoZSBzdHJlYW0gd2l0aG91dFxuICAgICAqIGNvbnN1bWluZyBpdC5cbiAgICAgKiBAcmV0dXJuIHtpbnR9IFRoZSB0b2tlbiB0eXBlIG9mIHRoZSBuZXh0IHRva2VuIGluIHRoZSBzdHJlYW0uXG4gICAgICogQG1ldGhvZCBwZWVrXG4gICAgICovXG4gICAgcGVlazogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuTEEoMSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFjdHVhbCB0b2tlbiBvYmplY3QgZm9yIHRoZSBsYXN0IGNvbnN1bWVkIHRva2VuLlxuICAgICAqIEByZXR1cm4ge1Rva2VufSBUaGUgdG9rZW4gb2JqZWN0IGZvciB0aGUgbGFzdCBjb25zdW1lZCB0b2tlbi5cbiAgICAgKiBAbWV0aG9kIHRva2VuXG4gICAgICovXG4gICAgdG9rZW46IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4gZm9yIHRoZSBnaXZlbiB0b2tlbiB0eXBlLlxuICAgICAqIEBwYXJhbSB7aW50fSB0b2tlblR5cGUgVGhlIHR5cGUgb2YgdG9rZW4gdG8gZ2V0IHRoZSBuYW1lIG9mLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHRva2VuIG9yIFwiVU5LTk9XTl9UT0tFTlwiIGZvciBhbnlcbiAgICAgKiAgICAgIGludmFsaWQgdG9rZW4gdHlwZS5cbiAgICAgKiBAbWV0aG9kIHRva2VuTmFtZVxuICAgICAqL1xuICAgIHRva2VuTmFtZTogZnVuY3Rpb24odG9rZW5UeXBlKXtcbiAgICAgICAgaWYgKHRva2VuVHlwZSA8IDAgfHwgdG9rZW5UeXBlID4gdGhpcy5fdG9rZW5EYXRhLmxlbmd0aCl7XG4gICAgICAgICAgICByZXR1cm4gXCJVTktOT1dOX1RPS0VOXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5EYXRhW3Rva2VuVHlwZV0ubmFtZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0b2tlbiB0eXBlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gdG9rZW4gbmFtZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5OYW1lIFRoZSBuYW1lIG9mIHRoZSB0b2tlbiB3aG9zZSB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQuXG4gICAgICogQHJldHVybiB7aW50fSBUaGUgdG9rZW4gdHlwZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHRva2VuIG5hbWUgb3IgLTFcbiAgICAgKiAgICAgIGZvciBhbiB1bmtub3duIHRva2VuLlxuICAgICAqIEBtZXRob2QgdG9rZW5OYW1lXG4gICAgICovXG4gICAgdG9rZW5UeXBlOiBmdW5jdGlvbih0b2tlbk5hbWUpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5EYXRhW3Rva2VuTmFtZV0gfHwgLTE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhc3QgY29uc3VtZWQgdG9rZW4gdG8gdGhlIHRva2VuIHN0cmVhbS5cbiAgICAgKiBAbWV0aG9kIHVuZ2V0XG4gICAgICovXG4gICAgdW5nZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vaWYgKHRoaXMuX2x0SW5kZXggPiAtMSl7XG4gICAgICAgIGlmICh0aGlzLl9sdEluZGV4Q2FjaGUubGVuZ3RoKXtcbiAgICAgICAgICAgIHRoaXMuX2x0SW5kZXggLT0gdGhpcy5fbHRJbmRleENhY2hlLnBvcCgpOy8vLS07XG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IHRoaXMuX2x0W3RoaXMuX2x0SW5kZXggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBtdWNoIGxvb2thaGVhZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxucGFyc2VybGliLnV0aWwgPSB7XG5fX3Byb3RvX18gICA6IG51bGwsXG5TdHJpbmdSZWFkZXI6IFN0cmluZ1JlYWRlcixcblN5bnRheEVycm9yIDogU3ludGF4RXJyb3IsXG5TeW50YXhVbml0ICA6IFN5bnRheFVuaXQsXG5FdmVudFRhcmdldCA6IEV2ZW50VGFyZ2V0LFxuVG9rZW5TdHJlYW1CYXNlIDogVG9rZW5TdHJlYW1CYXNlXG59O1xufSkoKTtcbi8qXG5QYXJzZXItTGliXG5Db3B5cmlnaHQgKGMpIDIwMDktMjAxMSBOaWNob2xhcyBDLiBaYWthcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4qL1xuLyogVmVyc2lvbiB2MC4yLjUrZG9taW5vMSwgQnVpbGQgdGltZTogMzAtSmFudWFyeS0yMDE2IDA1OjEzOjAzICovXG4oZnVuY3Rpb24oKXtcbnZhciBFdmVudFRhcmdldCA9IHBhcnNlcmxpYi51dGlsLkV2ZW50VGFyZ2V0LFxuVG9rZW5TdHJlYW1CYXNlID0gcGFyc2VybGliLnV0aWwuVG9rZW5TdHJlYW1CYXNlLFxuU3RyaW5nUmVhZGVyID0gcGFyc2VybGliLnV0aWwuU3RyaW5nUmVhZGVyLCAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblN5bnRheEVycm9yID0gcGFyc2VybGliLnV0aWwuU3ludGF4RXJyb3IsXG5TeW50YXhVbml0ICA9IHBhcnNlcmxpYi51dGlsLlN5bnRheFVuaXQ7XG5cbnZhciBDb2xvcnMgPSB7XG4gICAgX19wcm90b19fICAgICAgIDpudWxsLFxuICAgIGFsaWNlYmx1ZSAgICAgICA6XCIjZjBmOGZmXCIsXG4gICAgYW50aXF1ZXdoaXRlICAgIDpcIiNmYWViZDdcIixcbiAgICBhcXVhICAgICAgICAgICAgOlwiIzAwZmZmZlwiLFxuICAgIGFxdWFtYXJpbmUgICAgICA6XCIjN2ZmZmQ0XCIsXG4gICAgYXp1cmUgICAgICAgICAgIDpcIiNmMGZmZmZcIixcbiAgICBiZWlnZSAgICAgICAgICAgOlwiI2Y1ZjVkY1wiLFxuICAgIGJpc3F1ZSAgICAgICAgICA6XCIjZmZlNGM0XCIsXG4gICAgYmxhY2sgICAgICAgICAgIDpcIiMwMDAwMDBcIixcbiAgICBibGFuY2hlZGFsbW9uZCAgOlwiI2ZmZWJjZFwiLFxuICAgIGJsdWUgICAgICAgICAgICA6XCIjMDAwMGZmXCIsXG4gICAgYmx1ZXZpb2xldCAgICAgIDpcIiM4YTJiZTJcIixcbiAgICBicm93biAgICAgICAgICAgOlwiI2E1MmEyYVwiLFxuICAgIGJ1cmx5d29vZCAgICAgICA6XCIjZGViODg3XCIsXG4gICAgY2FkZXRibHVlICAgICAgIDpcIiM1ZjllYTBcIixcbiAgICBjaGFydHJldXNlICAgICAgOlwiIzdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZSAgICAgICA6XCIjZDI2OTFlXCIsXG4gICAgY29yYWwgICAgICAgICAgIDpcIiNmZjdmNTBcIixcbiAgICBjb3JuZmxvd2VyYmx1ZSAgOlwiIzY0OTVlZFwiLFxuICAgIGNvcm5zaWxrICAgICAgICA6XCIjZmZmOGRjXCIsXG4gICAgY3JpbXNvbiAgICAgICAgIDpcIiNkYzE0M2NcIixcbiAgICBjeWFuICAgICAgICAgICAgOlwiIzAwZmZmZlwiLFxuICAgIGRhcmtibHVlICAgICAgICA6XCIjMDAwMDhiXCIsXG4gICAgZGFya2N5YW4gICAgICAgIDpcIiMwMDhiOGJcIixcbiAgICBkYXJrZ29sZGVucm9kICAgOlwiI2I4ODYwYlwiLFxuICAgIGRhcmtncmF5ICAgICAgICA6XCIjYTlhOWE5XCIsXG4gICAgZGFya2dyZXkgICAgICAgIDpcIiNhOWE5YTlcIixcbiAgICBkYXJrZ3JlZW4gICAgICAgOlwiIzAwNjQwMFwiLFxuICAgIGRhcmtraGFraSAgICAgICA6XCIjYmRiNzZiXCIsXG4gICAgZGFya21hZ2VudGEgICAgIDpcIiM4YjAwOGJcIixcbiAgICBkYXJrb2xpdmVncmVlbiAgOlwiIzU1NmIyZlwiLFxuICAgIGRhcmtvcmFuZ2UgICAgICA6XCIjZmY4YzAwXCIsXG4gICAgZGFya29yY2hpZCAgICAgIDpcIiM5OTMyY2NcIixcbiAgICBkYXJrcmVkICAgICAgICAgOlwiIzhiMDAwMFwiLFxuICAgIGRhcmtzYWxtb24gICAgICA6XCIjZTk5NjdhXCIsXG4gICAgZGFya3NlYWdyZWVuICAgIDpcIiM4ZmJjOGZcIixcbiAgICBkYXJrc2xhdGVibHVlICAgOlwiIzQ4M2Q4YlwiLFxuICAgIGRhcmtzbGF0ZWdyYXkgICA6XCIjMmY0ZjRmXCIsXG4gICAgZGFya3NsYXRlZ3JleSAgIDpcIiMyZjRmNGZcIixcbiAgICBkYXJrdHVycXVvaXNlICAgOlwiIzAwY2VkMVwiLFxuICAgIGRhcmt2aW9sZXQgICAgICA6XCIjOTQwMGQzXCIsXG4gICAgZGVlcHBpbmsgICAgICAgIDpcIiNmZjE0OTNcIixcbiAgICBkZWVwc2t5Ymx1ZSAgICAgOlwiIzAwYmZmZlwiLFxuICAgIGRpbWdyYXkgICAgICAgICA6XCIjNjk2OTY5XCIsXG4gICAgZGltZ3JleSAgICAgICAgIDpcIiM2OTY5NjlcIixcbiAgICBkb2RnZXJibHVlICAgICAgOlwiIzFlOTBmZlwiLFxuICAgIGZpcmVicmljayAgICAgICA6XCIjYjIyMjIyXCIsXG4gICAgZmxvcmFsd2hpdGUgICAgIDpcIiNmZmZhZjBcIixcbiAgICBmb3Jlc3RncmVlbiAgICAgOlwiIzIyOGIyMlwiLFxuICAgIGZ1Y2hzaWEgICAgICAgICA6XCIjZmYwMGZmXCIsXG4gICAgZ2FpbnNib3JvICAgICAgIDpcIiNkY2RjZGNcIixcbiAgICBnaG9zdHdoaXRlICAgICAgOlwiI2Y4ZjhmZlwiLFxuICAgIGdvbGQgICAgICAgICAgICA6XCIjZmZkNzAwXCIsXG4gICAgZ29sZGVucm9kICAgICAgIDpcIiNkYWE1MjBcIixcbiAgICBncmF5ICAgICAgICAgICAgOlwiIzgwODA4MFwiLFxuICAgIGdyZXkgICAgICAgICAgICA6XCIjODA4MDgwXCIsXG4gICAgZ3JlZW4gICAgICAgICAgIDpcIiMwMDgwMDBcIixcbiAgICBncmVlbnllbGxvdyAgICAgOlwiI2FkZmYyZlwiLFxuICAgIGhvbmV5ZGV3ICAgICAgICA6XCIjZjBmZmYwXCIsXG4gICAgaG90cGluayAgICAgICAgIDpcIiNmZjY5YjRcIixcbiAgICBpbmRpYW5yZWQgICAgICAgOlwiI2NkNWM1Y1wiLFxuICAgIGluZGlnbyAgICAgICAgICA6XCIjNGIwMDgyXCIsXG4gICAgaXZvcnkgICAgICAgICAgIDpcIiNmZmZmZjBcIixcbiAgICBraGFraSAgICAgICAgICAgOlwiI2YwZTY4Y1wiLFxuICAgIGxhdmVuZGVyICAgICAgICA6XCIjZTZlNmZhXCIsXG4gICAgbGF2ZW5kZXJibHVzaCAgIDpcIiNmZmYwZjVcIixcbiAgICBsYXduZ3JlZW4gICAgICAgOlwiIzdjZmMwMFwiLFxuICAgIGxlbW9uY2hpZmZvbiAgICA6XCIjZmZmYWNkXCIsXG4gICAgbGlnaHRibHVlICAgICAgIDpcIiNhZGQ4ZTZcIixcbiAgICBsaWdodGNvcmFsICAgICAgOlwiI2YwODA4MFwiLFxuICAgIGxpZ2h0Y3lhbiAgICAgICA6XCIjZTBmZmZmXCIsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3cgIDpcIiNmYWZhZDJcIixcbiAgICBsaWdodGdyYXkgICAgICAgOlwiI2QzZDNkM1wiLFxuICAgIGxpZ2h0Z3JleSAgICAgICA6XCIjZDNkM2QzXCIsXG4gICAgbGlnaHRncmVlbiAgICAgIDpcIiM5MGVlOTBcIixcbiAgICBsaWdodHBpbmsgICAgICAgOlwiI2ZmYjZjMVwiLFxuICAgIGxpZ2h0c2FsbW9uICAgICA6XCIjZmZhMDdhXCIsXG4gICAgbGlnaHRzZWFncmVlbiAgIDpcIiMyMGIyYWFcIixcbiAgICBsaWdodHNreWJsdWUgICAgOlwiIzg3Y2VmYVwiLFxuICAgIGxpZ2h0c2xhdGVncmF5ICA6XCIjNzc4ODk5XCIsXG4gICAgbGlnaHRzbGF0ZWdyZXkgIDpcIiM3Nzg4OTlcIixcbiAgICBsaWdodHN0ZWVsYmx1ZSAgOlwiI2IwYzRkZVwiLFxuICAgIGxpZ2h0eWVsbG93ICAgICA6XCIjZmZmZmUwXCIsXG4gICAgbGltZSAgICAgICAgICAgIDpcIiMwMGZmMDBcIixcbiAgICBsaW1lZ3JlZW4gICAgICAgOlwiIzMyY2QzMlwiLFxuICAgIGxpbmVuICAgICAgICAgICA6XCIjZmFmMGU2XCIsXG4gICAgbWFnZW50YSAgICAgICAgIDpcIiNmZjAwZmZcIixcbiAgICBtYXJvb24gICAgICAgICAgOlwiIzgwMDAwMFwiLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6XCIjNjZjZGFhXCIsXG4gICAgbWVkaXVtYmx1ZSAgICAgIDpcIiMwMDAwY2RcIixcbiAgICBtZWRpdW1vcmNoaWQgICAgOlwiI2JhNTVkM1wiLFxuICAgIG1lZGl1bXB1cnBsZSAgICA6XCIjOTM3MGQ4XCIsXG4gICAgbWVkaXVtc2VhZ3JlZW4gIDpcIiMzY2IzNzFcIixcbiAgICBtZWRpdW1zbGF0ZWJsdWUgOlwiIzdiNjhlZVwiLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuICAgOlwiIzAwZmE5YVwiLFxuICAgIG1lZGl1bXR1cnF1b2lzZSA6XCIjNDhkMWNjXCIsXG4gICAgbWVkaXVtdmlvbGV0cmVkIDpcIiNjNzE1ODVcIixcbiAgICBtaWRuaWdodGJsdWUgICAgOlwiIzE5MTk3MFwiLFxuICAgIG1pbnRjcmVhbSAgICAgICA6XCIjZjVmZmZhXCIsXG4gICAgbWlzdHlyb3NlICAgICAgIDpcIiNmZmU0ZTFcIixcbiAgICBtb2NjYXNpbiAgICAgICAgOlwiI2ZmZTRiNVwiLFxuICAgIG5hdmFqb3doaXRlICAgICA6XCIjZmZkZWFkXCIsXG4gICAgbmF2eSAgICAgICAgICAgIDpcIiMwMDAwODBcIixcbiAgICBvbGRsYWNlICAgICAgICAgOlwiI2ZkZjVlNlwiLFxuICAgIG9saXZlICAgICAgICAgICA6XCIjODA4MDAwXCIsXG4gICAgb2xpdmVkcmFiICAgICAgIDpcIiM2YjhlMjNcIixcbiAgICBvcmFuZ2UgICAgICAgICAgOlwiI2ZmYTUwMFwiLFxuICAgIG9yYW5nZXJlZCAgICAgICA6XCIjZmY0NTAwXCIsXG4gICAgb3JjaGlkICAgICAgICAgIDpcIiNkYTcwZDZcIixcbiAgICBwYWxlZ29sZGVucm9kICAgOlwiI2VlZThhYVwiLFxuICAgIHBhbGVncmVlbiAgICAgICA6XCIjOThmYjk4XCIsXG4gICAgcGFsZXR1cnF1b2lzZSAgIDpcIiNhZmVlZWVcIixcbiAgICBwYWxldmlvbGV0cmVkICAgOlwiI2Q4NzA5M1wiLFxuICAgIHBhcGF5YXdoaXAgICAgICA6XCIjZmZlZmQ1XCIsXG4gICAgcGVhY2hwdWZmICAgICAgIDpcIiNmZmRhYjlcIixcbiAgICBwZXJ1ICAgICAgICAgICAgOlwiI2NkODUzZlwiLFxuICAgIHBpbmsgICAgICAgICAgICA6XCIjZmZjMGNiXCIsXG4gICAgcGx1bSAgICAgICAgICAgIDpcIiNkZGEwZGRcIixcbiAgICBwb3dkZXJibHVlICAgICAgOlwiI2IwZTBlNlwiLFxuICAgIHB1cnBsZSAgICAgICAgICA6XCIjODAwMDgwXCIsXG4gICAgcmVkICAgICAgICAgICAgIDpcIiNmZjAwMDBcIixcbiAgICByb3N5YnJvd24gICAgICAgOlwiI2JjOGY4ZlwiLFxuICAgIHJveWFsYmx1ZSAgICAgICA6XCIjNDE2OWUxXCIsXG4gICAgc2FkZGxlYnJvd24gICAgIDpcIiM4YjQ1MTNcIixcbiAgICBzYWxtb24gICAgICAgICAgOlwiI2ZhODA3MlwiLFxuICAgIHNhbmR5YnJvd24gICAgICA6XCIjZjRhNDYwXCIsXG4gICAgc2VhZ3JlZW4gICAgICAgIDpcIiMyZThiNTdcIixcbiAgICBzZWFzaGVsbCAgICAgICAgOlwiI2ZmZjVlZVwiLFxuICAgIHNpZW5uYSAgICAgICAgICA6XCIjYTA1MjJkXCIsXG4gICAgc2lsdmVyICAgICAgICAgIDpcIiNjMGMwYzBcIixcbiAgICBza3libHVlICAgICAgICAgOlwiIzg3Y2VlYlwiLFxuICAgIHNsYXRlYmx1ZSAgICAgICA6XCIjNmE1YWNkXCIsXG4gICAgc2xhdGVncmF5ICAgICAgIDpcIiM3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXkgICAgICAgOlwiIzcwODA5MFwiLFxuICAgIHNub3cgICAgICAgICAgICA6XCIjZmZmYWZhXCIsXG4gICAgc3ByaW5nZ3JlZW4gICAgIDpcIiMwMGZmN2ZcIixcbiAgICBzdGVlbGJsdWUgICAgICAgOlwiIzQ2ODJiNFwiLFxuICAgIHRhbiAgICAgICAgICAgICA6XCIjZDJiNDhjXCIsXG4gICAgdGVhbCAgICAgICAgICAgIDpcIiMwMDgwODBcIixcbiAgICB0aGlzdGxlICAgICAgICAgOlwiI2Q4YmZkOFwiLFxuICAgIHRvbWF0byAgICAgICAgICA6XCIjZmY2MzQ3XCIsXG4gICAgdHVycXVvaXNlICAgICAgIDpcIiM0MGUwZDBcIixcbiAgICB2aW9sZXQgICAgICAgICAgOlwiI2VlODJlZVwiLFxuICAgIHdoZWF0ICAgICAgICAgICA6XCIjZjVkZWIzXCIsXG4gICAgd2hpdGUgICAgICAgICAgIDpcIiNmZmZmZmZcIixcbiAgICB3aGl0ZXNtb2tlICAgICAgOlwiI2Y1ZjVmNVwiLFxuICAgIHllbGxvdyAgICAgICAgICA6XCIjZmZmZjAwXCIsXG4gICAgeWVsbG93Z3JlZW4gICAgIDpcIiM5YWNkMzJcIixcbiAgICAvLydjdXJyZW50Q29sb3InIGNvbG9yIGtleXdvcmQgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jY3VycmVudGNvbG9yXG4gICAgY3VycmVudENvbG9yICAgICAgICA6XCJUaGUgdmFsdWUgb2YgdGhlICdjb2xvcicgcHJvcGVydHkuXCIsXG4gICAgLy9DU1MyIHN5c3RlbSBjb2xvcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jY3NzMi1zeXN0ZW1cbiAgICBhY3RpdmVCb3JkZXIgICAgICAgIDpcIkFjdGl2ZSB3aW5kb3cgYm9yZGVyLlwiLFxuICAgIGFjdGl2ZWNhcHRpb24gICAgICAgOlwiQWN0aXZlIHdpbmRvdyBjYXB0aW9uLlwiLFxuICAgIGFwcHdvcmtzcGFjZSAgICAgICAgOlwiQmFja2dyb3VuZCBjb2xvciBvZiBtdWx0aXBsZSBkb2N1bWVudCBpbnRlcmZhY2UuXCIsXG4gICAgYmFja2dyb3VuZCAgICAgICAgICA6XCJEZXNrdG9wIGJhY2tncm91bmQuXCIsXG4gICAgYnV0dG9uZmFjZSAgICAgICAgICA6XCJUaGUgZmFjZSBiYWNrZ3JvdW5kIGNvbG9yIGZvciAzLUQgZWxlbWVudHMgdGhhdCBhcHBlYXIgMy1EIGR1ZSB0byBvbmUgbGF5ZXIgb2Ygc3Vycm91bmRpbmcgYm9yZGVyLlwiLFxuICAgIGJ1dHRvbmhpZ2hsaWdodCAgICAgOlwiVGhlIGNvbG9yIG9mIHRoZSBib3JkZXIgZmFjaW5nIHRoZSBsaWdodCBzb3VyY2UgZm9yIDMtRCBlbGVtZW50cyB0aGF0IGFwcGVhciAzLUQgZHVlIHRvIG9uZSBsYXllciBvZiBzdXJyb3VuZGluZyBib3JkZXIuXCIsXG4gICAgYnV0dG9uc2hhZG93ICAgICAgICA6XCJUaGUgY29sb3Igb2YgdGhlIGJvcmRlciBhd2F5IGZyb20gdGhlIGxpZ2h0IHNvdXJjZSBmb3IgMy1EIGVsZW1lbnRzIHRoYXQgYXBwZWFyIDMtRCBkdWUgdG8gb25lIGxheWVyIG9mIHN1cnJvdW5kaW5nIGJvcmRlci5cIixcbiAgICBidXR0b250ZXh0ICAgICAgICAgIDpcIlRleHQgb24gcHVzaCBidXR0b25zLlwiLFxuICAgIGNhcHRpb250ZXh0ICAgICAgICAgOlwiVGV4dCBpbiBjYXB0aW9uLCBzaXplIGJveCwgYW5kIHNjcm9sbGJhciBhcnJvdyBib3guXCIsXG4gICAgZ3JheXRleHQgICAgICAgICAgICA6XCJHcmF5ZWQgKGRpc2FibGVkKSB0ZXh0LiBUaGlzIGNvbG9yIGlzIHNldCB0byAjMDAwIGlmIHRoZSBjdXJyZW50IGRpc3BsYXkgZHJpdmVyIGRvZXMgbm90IHN1cHBvcnQgYSBzb2xpZCBncmF5IGNvbG9yLlwiLFxuICAgIGdyZXl0ZXh0ICAgICAgICAgICAgOlwiR3JleWVkIChkaXNhYmxlZCkgdGV4dC4gVGhpcyBjb2xvciBpcyBzZXQgdG8gIzAwMCBpZiB0aGUgY3VycmVudCBkaXNwbGF5IGRyaXZlciBkb2VzIG5vdCBzdXBwb3J0IGEgc29saWQgZ3JleSBjb2xvci5cIixcbiAgICBoaWdobGlnaHQgICAgICAgICAgIDpcIkl0ZW0ocykgc2VsZWN0ZWQgaW4gYSBjb250cm9sLlwiLFxuICAgIGhpZ2hsaWdodHRleHQgICAgICAgOlwiVGV4dCBvZiBpdGVtKHMpIHNlbGVjdGVkIGluIGEgY29udHJvbC5cIixcbiAgICBpbmFjdGl2ZWJvcmRlciAgICAgIDpcIkluYWN0aXZlIHdpbmRvdyBib3JkZXIuXCIsXG4gICAgaW5hY3RpdmVjYXB0aW9uICAgICA6XCJJbmFjdGl2ZSB3aW5kb3cgY2FwdGlvbi5cIixcbiAgICBpbmFjdGl2ZWNhcHRpb250ZXh0IDpcIkNvbG9yIG9mIHRleHQgaW4gYW4gaW5hY3RpdmUgY2FwdGlvbi5cIixcbiAgICBpbmZvYmFja2dyb3VuZCAgICAgIDpcIkJhY2tncm91bmQgY29sb3IgZm9yIHRvb2x0aXAgY29udHJvbHMuXCIsXG4gICAgaW5mb3RleHQgICAgICAgICAgICA6XCJUZXh0IGNvbG9yIGZvciB0b29sdGlwIGNvbnRyb2xzLlwiLFxuICAgIG1lbnUgICAgICAgICAgICAgICAgOlwiTWVudSBiYWNrZ3JvdW5kLlwiLFxuICAgIG1lbnV0ZXh0ICAgICAgICAgICAgOlwiVGV4dCBpbiBtZW51cy5cIixcbiAgICBzY3JvbGxiYXIgICAgICAgICAgIDpcIlNjcm9sbCBiYXIgZ3JheSBhcmVhLlwiLFxuICAgIHRocmVlZGRhcmtzaGFkb3cgICAgOlwiVGhlIGNvbG9yIG9mIHRoZSBkYXJrZXIgKGdlbmVyYWxseSBvdXRlcikgb2YgdGhlIHR3byBib3JkZXJzIGF3YXkgZnJvbSB0aGUgbGlnaHQgc291cmNlIGZvciAzLUQgZWxlbWVudHMgdGhhdCBhcHBlYXIgMy1EIGR1ZSB0byB0d28gY29uY2VudHJpYyBsYXllcnMgb2Ygc3Vycm91bmRpbmcgYm9yZGVyLlwiLFxuICAgIHRocmVlZGZhY2UgICAgICAgICAgOlwiVGhlIGZhY2UgYmFja2dyb3VuZCBjb2xvciBmb3IgMy1EIGVsZW1lbnRzIHRoYXQgYXBwZWFyIDMtRCBkdWUgdG8gdHdvIGNvbmNlbnRyaWMgbGF5ZXJzIG9mIHN1cnJvdW5kaW5nIGJvcmRlci5cIixcbiAgICB0aHJlZWRoaWdobGlnaHQgICAgIDpcIlRoZSBjb2xvciBvZiB0aGUgbGlnaHRlciAoZ2VuZXJhbGx5IG91dGVyKSBvZiB0aGUgdHdvIGJvcmRlcnMgZmFjaW5nIHRoZSBsaWdodCBzb3VyY2UgZm9yIDMtRCBlbGVtZW50cyB0aGF0IGFwcGVhciAzLUQgZHVlIHRvIHR3byBjb25jZW50cmljIGxheWVycyBvZiBzdXJyb3VuZGluZyBib3JkZXIuXCIsXG4gICAgdGhyZWVkbGlnaHRzaGFkb3cgICA6XCJUaGUgY29sb3Igb2YgdGhlIGRhcmtlciAoZ2VuZXJhbGx5IGlubmVyKSBvZiB0aGUgdHdvIGJvcmRlcnMgZmFjaW5nIHRoZSBsaWdodCBzb3VyY2UgZm9yIDMtRCBlbGVtZW50cyB0aGF0IGFwcGVhciAzLUQgZHVlIHRvIHR3byBjb25jZW50cmljIGxheWVycyBvZiBzdXJyb3VuZGluZyBib3JkZXIuXCIsXG4gICAgdGhyZWVkc2hhZG93ICAgICAgICA6XCJUaGUgY29sb3Igb2YgdGhlIGxpZ2h0ZXIgKGdlbmVyYWxseSBpbm5lcikgb2YgdGhlIHR3byBib3JkZXJzIGF3YXkgZnJvbSB0aGUgbGlnaHQgc291cmNlIGZvciAzLUQgZWxlbWVudHMgdGhhdCBhcHBlYXIgMy1EIGR1ZSB0byB0d28gY29uY2VudHJpYyBsYXllcnMgb2Ygc3Vycm91bmRpbmcgYm9yZGVyLlwiLFxuICAgIHdpbmRvdyAgICAgICAgICAgICAgOlwiV2luZG93IGJhY2tncm91bmQuXCIsXG4gICAgd2luZG93ZnJhbWUgICAgICAgICA6XCJXaW5kb3cgZnJhbWUuXCIsXG4gICAgd2luZG93dGV4dCAgICAgICAgICA6XCJUZXh0IGluIHdpbmRvd3MuXCJcbn07XG4vKipcbiAqIFJlcHJlc2VudHMgYSBzZWxlY3RvciBjb21iaW5hdG9yICh3aGl0ZXNwYWNlLCArLCA+KS5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIENvbWJpbmF0b3JcbiAqIEBleHRlbmRzIHBhcnNlcmxpYi51dGlsLlN5bnRheFVuaXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gKiBAcGFyYW0ge2ludH0gbGluZSBUaGUgbGluZSBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKiBAcGFyYW0ge2ludH0gY29sIFRoZSBjb2x1bW4gb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICovXG5mdW5jdGlvbiBDb21iaW5hdG9yKHRleHQsIGxpbmUsIGNvbCl7XG5cbiAgICBTeW50YXhVbml0LmNhbGwodGhpcywgdGV4dCwgbGluZSwgY29sLCBQYXJzZXIuQ09NQklOQVRPUl9UWVBFKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIG1vZGlmaWVyLlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gXCJ1bmtub3duXCI7XG5cbiAgICAvL3ByZXR0eSBzaW1wbGVcbiAgICBpZiAoL15cXHMrJC8udGVzdCh0ZXh0KSl7XG4gICAgICAgIHRoaXMudHlwZSA9IFwiZGVzY2VuZGFudFwiO1xuICAgIH0gZWxzZSBpZiAodGV4dCA9PT0gXCI+XCIpe1xuICAgICAgICB0aGlzLnR5cGUgPSBcImNoaWxkXCI7XG4gICAgfSBlbHNlIGlmICh0ZXh0ID09PSBcIitcIil7XG4gICAgICAgIHRoaXMudHlwZSA9IFwiYWRqYWNlbnQtc2libGluZ1wiO1xuICAgIH0gZWxzZSBpZiAodGV4dCA9PT0gXCJ+XCIpe1xuICAgICAgICB0aGlzLnR5cGUgPSBcInNpYmxpbmdcIjtcbiAgICB9XG5cbn1cblxuQ29tYmluYXRvci5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuQ29tYmluYXRvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb21iaW5hdG9yO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBtZWRpYSBmZWF0dXJlLCBzdWNoIGFzIG1heC13aWR0aDo1MDAuXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi5jc3NcbiAqIEBjbGFzcyBNZWRpYUZlYXR1cmVcbiAqIEBleHRlbmRzIHBhcnNlcmxpYi51dGlsLlN5bnRheFVuaXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTeW50YXhVbml0fSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmZWF0dXJlLlxuICogQHBhcmFtIHtTeW50YXhVbml0fSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZlYXR1cmUgb3IgbnVsbCBpZiBub25lLlxuICovXG5mdW5jdGlvbiBNZWRpYUZlYXR1cmUobmFtZSwgdmFsdWUpe1xuXG4gICAgU3ludGF4VW5pdC5jYWxsKHRoaXMsIFwiKFwiICsgbmFtZSArICh2YWx1ZSAhPT0gbnVsbCA/IFwiOlwiICsgdmFsdWUgOiBcIlwiKSArIFwiKVwiLCBuYW1lLnN0YXJ0TGluZSwgbmFtZS5zdGFydENvbCwgUGFyc2VyLk1FRElBX0ZFQVRVUkVfVFlQRSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbWVkaWEgZmVhdHVyZVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBwcm9wZXJ0eSBuYW1lXG4gICAgICovXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIGZlYXR1cmUgb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lLlxuICAgICAqIEB0eXBlIFN5bnRheFVuaXRcbiAgICAgKiBAcHJvcGVydHkgdmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG59XG5cbk1lZGlhRmVhdHVyZS5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuTWVkaWFGZWF0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lZGlhRmVhdHVyZTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGluZGl2aWR1YWwgbWVkaWEgcXVlcnkuXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi5jc3NcbiAqIEBjbGFzcyBNZWRpYVF1ZXJ5XG4gKiBAZXh0ZW5kcyBwYXJzZXJsaWIudXRpbC5TeW50YXhVbml0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBtb2RpZmllciBUaGUgbW9kaWZpZXIgXCJub3RcIiBvciBcIm9ubHlcIiAob3IgbnVsbCkuXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVkaWFUeXBlIFRoZSB0eXBlIG9mIG1lZGlhIChpLmUuLCBcInByaW50XCIpLlxuICogQHBhcmFtIHtBcnJheX0gcGFydHMgQXJyYXkgb2Ygc2VsZWN0b3JzIHBhcnRzIG1ha2luZyB1cCB0aGlzIHNlbGVjdG9yLlxuICogQHBhcmFtIHtpbnR9IGxpbmUgVGhlIGxpbmUgb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICogQHBhcmFtIHtpbnR9IGNvbCBUaGUgY29sdW1uIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqL1xuZnVuY3Rpb24gTWVkaWFRdWVyeShtb2RpZmllciwgbWVkaWFUeXBlLCBmZWF0dXJlcywgbGluZSwgY29sKXtcblxuICAgIFN5bnRheFVuaXQuY2FsbCh0aGlzLCAobW9kaWZpZXIgPyBtb2RpZmllciArIFwiIFwiOiBcIlwiKSArIChtZWRpYVR5cGUgPyBtZWRpYVR5cGUgOiBcIlwiKSArIChtZWRpYVR5cGUgJiYgZmVhdHVyZXMubGVuZ3RoID4gMCA/IFwiIGFuZCBcIiA6IFwiXCIpICsgZmVhdHVyZXMuam9pbihcIiBhbmQgXCIpLCBsaW5lLCBjb2wsIFBhcnNlci5NRURJQV9RVUVSWV9UWVBFKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtZWRpYSBtb2RpZmllciAoXCJub3RcIiBvciBcIm9ubHlcIilcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAcHJvcGVydHkgbW9kaWZpZXJcbiAgICAgKi9cbiAgICB0aGlzLm1vZGlmaWVyID0gbW9kaWZpZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWVkaWFUeXBlIChpLmUuLCBcInByaW50XCIpXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IG1lZGlhVHlwZVxuICAgICAqL1xuICAgIHRoaXMubWVkaWFUeXBlID0gbWVkaWFUeXBlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBhcnRzIHRoYXQgbWFrZSB1cCB0aGUgc2VsZWN0b3IuXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKiBAcHJvcGVydHkgZmVhdHVyZXNcbiAgICAgKi9cbiAgICB0aGlzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG5cbn1cblxuTWVkaWFRdWVyeS5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuTWVkaWFRdWVyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZWRpYVF1ZXJ5O1xuXG5cbi8qKlxuICogQSBDU1MzIHBhcnNlci5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIFBhcnNlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAoT3B0aW9uYWwpIFZhcmlvdXMgb3B0aW9ucyBmb3IgdGhlIHBhcnNlcjpcbiAqICAgICAgc3RhckhhY2sgKHRydWV8ZmFsc2UpIHRvIGFsbG93IElFNiBzdGFyIGhhY2sgYXMgdmFsaWQsXG4gKiAgICAgIHVuZGVyc2NvcmVIYWNrICh0cnVlfGZhbHNlKSB0byBpbnRlcnByZXQgbGVhZGluZyB1bmRlcnNjb3Jlc1xuICogICAgICBhcyBJRTYtNyB0YXJnZXRpbmcgZm9yIGtub3duIHByb3BlcnRpZXMsIGllRmlsdGVycyAodHJ1ZXxmYWxzZSlcbiAqICAgICAgdG8gaW5kaWNhdGUgdGhhdCBJRSA8IDggZmlsdGVycyBzaG91bGQgYmUgYWNjZXB0ZWQgYW5kIG5vdCB0aHJvd1xuICogICAgICBzeW50YXggZXJyb3JzLlxuICovXG5mdW5jdGlvbiBQYXJzZXIob3B0aW9ucyl7XG5cbiAgICAvL2luaGVyaXQgZXZlbnQgZnVuY3Rpb25hbGl0eVxuICAgIEV2ZW50VGFyZ2V0LmNhbGwodGhpcyk7XG5cblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLl90b2tlblN0cmVhbSA9IG51bGw7XG59XG5cbi8vU3RhdGljIGNvbnN0YW50c1xuUGFyc2VyLkRFRkFVTFRfVFlQRSA9IDA7XG5QYXJzZXIuQ09NQklOQVRPUl9UWVBFID0gMTtcblBhcnNlci5NRURJQV9GRUFUVVJFX1RZUEUgPSAyO1xuUGFyc2VyLk1FRElBX1FVRVJZX1RZUEUgPSAzO1xuUGFyc2VyLlBST1BFUlRZX05BTUVfVFlQRSA9IDQ7XG5QYXJzZXIuUFJPUEVSVFlfVkFMVUVfVFlQRSA9IDU7XG5QYXJzZXIuUFJPUEVSVFlfVkFMVUVfUEFSVF9UWVBFID0gNjtcblBhcnNlci5TRUxFQ1RPUl9UWVBFID0gNztcblBhcnNlci5TRUxFQ1RPUl9QQVJUX1RZUEUgPSA4O1xuUGFyc2VyLlNFTEVDVE9SX1NVQl9QQVJUX1RZUEUgPSA5O1xuXG5QYXJzZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKXtcblxuICAgIHZhciBwcm90byA9IG5ldyBFdmVudFRhcmdldCgpLCAgLy9uZXcgcHJvdG90eXBlXG4gICAgICAgIHByb3AsXG4gICAgICAgIGFkZGl0aW9ucyA9ICB7XG4gICAgICAgICAgICBfX3Byb3RvX186IG51bGwsXG5cbiAgICAgICAgICAgIC8vcmVzdG9yZSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICAgICAgICAgICAgLy9pbnN0YW5jZSBjb25zdGFudHMgLSB5dWNrXG4gICAgICAgICAgICBERUZBVUxUX1RZUEUgOiAwLFxuICAgICAgICAgICAgQ09NQklOQVRPUl9UWVBFIDogMSxcbiAgICAgICAgICAgIE1FRElBX0ZFQVRVUkVfVFlQRSA6IDIsXG4gICAgICAgICAgICBNRURJQV9RVUVSWV9UWVBFIDogMyxcbiAgICAgICAgICAgIFBST1BFUlRZX05BTUVfVFlQRSA6IDQsXG4gICAgICAgICAgICBQUk9QRVJUWV9WQUxVRV9UWVBFIDogNSxcbiAgICAgICAgICAgIFBST1BFUlRZX1ZBTFVFX1BBUlRfVFlQRSA6IDYsXG4gICAgICAgICAgICBTRUxFQ1RPUl9UWVBFIDogNyxcbiAgICAgICAgICAgIFNFTEVDVE9SX1BBUlRfVFlQRSA6IDgsXG4gICAgICAgICAgICBTRUxFQ1RPUl9TVUJfUEFSVF9UWVBFIDogOSxcblxuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gR3JhbW1hclxuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgICAgICBfc3R5bGVzaGVldDogZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogc3R5bGVzaGVldFxuICAgICAgICAgICAgICAgICAqICA6IFsgQ0hBUlNFVF9TWU0gUyogU1RSSU5HIFMqICc7JyBdP1xuICAgICAgICAgICAgICAgICAqICAgIFtTfENET3xDRENdKiBbIGltcG9ydCBbU3xDRE98Q0RDXSogXSpcbiAgICAgICAgICAgICAgICAgKiAgICBbIG5hbWVzcGFjZSBbU3xDRE98Q0RDXSogXSpcbiAgICAgICAgICAgICAgICAgKiAgICBbIFsgcnVsZXNldCB8IG1lZGlhIHwgcGFnZSB8IGZvbnRfZmFjZSB8IGtleWZyYW1lcyBdIFtTfENET3xDRENdKiBdKlxuICAgICAgICAgICAgICAgICAqICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICB0dDtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcInN0YXJ0c3R5bGVzaGVldFwiKTtcblxuICAgICAgICAgICAgICAgIC8vdHJ5IHRvIHJlYWQgY2hhcmFjdGVyIHNldFxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJzZXQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NraXBDcnVmdCgpO1xuXG4gICAgICAgICAgICAgICAgLy90cnkgdG8gcmVhZCBpbXBvcnRzIC0gbWF5IGJlIG1vcmUgdGhhbiBvbmVcbiAgICAgICAgICAgICAgICB3aGlsZSAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuSU1QT1JUX1NZTSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ltcG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwQ3J1ZnQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3RyeSB0byByZWFkIG5hbWVzcGFjZXMgLSBtYXkgYmUgbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIHdoaWxlICh0b2tlblN0cmVhbS5wZWVrKCkgPT09IFRva2Vucy5OQU1FU1BBQ0VfU1lNKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmFtZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBDcnVmdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZ2V0IHRoZSBuZXh0IHRva2VuXG4gICAgICAgICAgICAgICAgdHQgPSB0b2tlblN0cmVhbS5wZWVrKCk7XG5cbiAgICAgICAgICAgICAgICAvL3RyeSB0byByZWFkIHRoZSByZXN0XG4gICAgICAgICAgICAgICAgd2hpbGUodHQgPiBUb2tlbnMuRU9GKXtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVG9rZW5zLk1FRElBX1NZTTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcENydWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVG9rZW5zLlBBR0VfU1lNOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBDcnVmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRva2Vucy5GT05UX0ZBQ0VfU1lNOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb250X2ZhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcENydWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVG9rZW5zLktFWUZSQU1FU19TWU06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleWZyYW1lcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwQ3J1ZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUb2tlbnMuVklFV1BPUlRfU1lNOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3cG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwQ3J1ZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUb2tlbnMuRE9DVU1FTlRfU1lNOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb2N1bWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwQ3J1ZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUb2tlbnMuVU5LTk9XTl9TWU06ICAvL3Vua25vd24gQCBydWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3Qpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZpcmUgZXJyb3IgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogICAgXCJVbmtub3duIEAgcnVsZTogXCIgKyB0b2tlblN0cmVhbS5MVCgwKS52YWx1ZSArIFwiLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgIHRva2VuU3RyZWFtLkxUKDApLnN0YXJ0TGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6ICAgICAgICB0b2tlblN0cmVhbS5MVCgwKS5zdGFydENvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2tpcCBicmFjZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50PTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodG9rZW5TdHJlYW0uYWR2YW5jZShbVG9rZW5zLkxCUkFDRSwgVG9rZW5zLlJCUkFDRV0pID09PSBUb2tlbnMuTEJSQUNFKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrOyAgICAvL2tlZXAgdHJhY2sgb2YgbmVzdGluZyBkZXB0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShjb3VudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0uYWR2YW5jZShbVG9rZW5zLlJCUkFDRV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50LS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90IGEgc3ludGF4IGVycm9yLCByZXRocm93IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJVbmtub3duIEAgcnVsZS5cIiwgdG9rZW5TdHJlYW0uTFQoMCkuc3RhcnRMaW5lLCB0b2tlblN0cmVhbS5MVCgwKS5zdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUb2tlbnMuUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuX3J1bGVzZXQoKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXJyb3IgaGFuZGxpbmcgZm9yIGtub3duIGlzc3Vlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHR0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRva2Vucy5DSEFSU0VUX1NZTTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS5MVCgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnNldChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkBjaGFyc2V0IG5vdCBhbGxvd2VkIGhlcmUuXCIsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVG9rZW5zLklNUE9SVF9TWU06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5TdHJlYW0uTFQoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ltcG9ydChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkBpbXBvcnQgbm90IGFsbG93ZWQgaGVyZS5cIiwgdG9rZW4uc3RhcnRMaW5lLCB0b2tlbi5zdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUb2tlbnMuTkFNRVNQQUNFX1NZTTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS5MVCgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmFtZXNwYWNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQG5hbWVzcGFjZSBub3QgYWxsb3dlZCBoZXJlLlwiLCB0b2tlbi5zdGFydExpbmUsIHRva2VuLnN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5nZXQoKTsgIC8vZ2V0IHRoZSBsYXN0IHRva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuZXhwZWN0ZWRUb2tlbih0b2tlblN0cmVhbS50b2tlbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleCBpbnN0YW5jZW9mIFN5bnRheEVycm9yICYmICF0aGlzLm9wdGlvbnMuc3RyaWN0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgICAgICBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAgICAgIGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAgICBleC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiAgICAgICBleC5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6ICAgICAgICBleC5jb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0dCA9IHRva2VuU3RyZWFtLnBlZWsoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHQgIT09IFRva2Vucy5FT0Ype1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmV4cGVjdGVkVG9rZW4odG9rZW5TdHJlYW0udG9rZW4oKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZW5kc3R5bGVzaGVldFwiKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9jaGFyc2V0OiBmdW5jdGlvbihlbWl0KXtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuQ0hBUlNFVF9TWU0pKXtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuU1RSSU5HKTtcblxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSB0b2tlbi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLlNFTUlDT0xPTik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtaXQgIT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcImNoYXJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc2V0OmNoYXJzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogICAgY29sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9pbXBvcnQ6IGZ1bmN0aW9uKGVtaXQpe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogaW1wb3J0XG4gICAgICAgICAgICAgICAgICogICA6IElNUE9SVF9TWU0gUypcbiAgICAgICAgICAgICAgICAgKiAgICBbU1RSSU5HfFVSSV0gUyogbWVkaWFfcXVlcnlfbGlzdD8gJzsnIFMqXG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdXJpLFxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFMaXN0ICAgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8vcmVhZCBpbXBvcnQgc3ltYm9sXG4gICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5JTVBPUlRfU1lNKTtcbiAgICAgICAgICAgICAgICBpbXBvcnRUb2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChbVG9rZW5zLlNUUklORywgVG9rZW5zLlVSSV0pO1xuXG4gICAgICAgICAgICAgICAgLy9ncmFiIHRoZSBVUkkgdmFsdWVcbiAgICAgICAgICAgICAgICB1cmkgPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlLnJlcGxhY2UoL14oPzp1cmxcXCgpP1tcIiddPyhbXlwiJ10rPylbXCInXT9cXCk/JC8sIFwiJDFcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgbWVkaWFMaXN0ID0gdGhpcy5fbWVkaWFfcXVlcnlfbGlzdCgpO1xuXG4gICAgICAgICAgICAgICAgLy9tdXN0IGVuZCB3aXRoIGEgc2VtaWNvbG9uXG4gICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5TRU1JQ09MT04pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZW1pdCAhPT0gZmFsc2Upe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcImltcG9ydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJpOiAgICB1cmksXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYTogIG1lZGlhTGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgaW1wb3J0VG9rZW4uc3RhcnRMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICBpbXBvcnRUb2tlbi5zdGFydENvbFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9uYW1lc3BhY2U6IGZ1bmN0aW9uKGVtaXQpe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICogICA6IE5BTUVTUEFDRV9TWU0gUyogW25hbWVzcGFjZV9wcmVmaXggUypdPyBbU1RSSU5HfFVSSV0gUyogJzsnIFMqXG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sLFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgIHVyaTtcblxuICAgICAgICAgICAgICAgIC8vcmVhZCBpbXBvcnQgc3ltYm9sXG4gICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5OQU1FU1BBQ0VfU1lNKTtcbiAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydENvbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgLy9pdCdzIGEgbmFtZXNwYWNlIHByZWZpeCAtIG5vIF9uYW1lc3BhY2VfcHJlZml4KCkgbWV0aG9kIGJlY2F1c2UgaXQncyBqdXN0IGFuIElERU5UXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5JREVOVCkpe1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChbVG9rZW5zLlNUUklORywgVG9rZW5zLlVSSV0pO1xuICAgICAgICAgICAgICAgIC8qaWYgKCF0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuU1RSSU5HKSl7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuVVJJKTtcbiAgICAgICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgICAgIC8vZ3JhYiB0aGUgVVJJIHZhbHVlXG4gICAgICAgICAgICAgICAgdXJpID0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZS5yZXBsYWNlKC8oPzp1cmxcXCgpP1tcIiddKFteXCInXSspW1wiJ11cXCk/LywgXCIkMVwiKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAvL211c3QgZW5kIHdpdGggYSBzZW1pY29sb25cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLlNFTUlDT0xPTik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbWl0ICE9PSBmYWxzZSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgIFwibmFtZXNwYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogICAgdXJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICBjb2xcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfbWVkaWE6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBtZWRpYVxuICAgICAgICAgICAgICAgICAqICAgOiBNRURJQV9TWU0gUyogbWVkaWFfcXVlcnlfbGlzdCBTKiAneycgUyogcnVsZXNldCogJ30nIFMqXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtICAgICA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhTGlzdDsvLyAgICAgICA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy9sb29rIGZvciBAbWVkaWFcbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLk1FRElBX1NZTSk7XG4gICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2w7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgbWVkaWFMaXN0ID0gdGhpcy5fbWVkaWFfcXVlcnlfbGlzdCgpO1xuXG4gICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5MQlJBQ0UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAgIFwic3RhcnRtZWRpYVwiLFxuICAgICAgICAgICAgICAgICAgICBtZWRpYTogIG1lZGlhTGlzdCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6ICAgIGNvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuUEFHRV9TWU0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLkZPTlRfRkFDRV9TWU0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9udF9mYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuVklFV1BPUlRfU1lNKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuRE9DVU1FTlRfU1lNKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3J1bGVzZXQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuUkJSQUNFKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcImVuZG1lZGlhXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhOiAgbWVkaWFMaXN0LFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogICAgY29sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIC8vQ1NTMyBNZWRpYSBRdWVyaWVzXG4gICAgICAgICAgICBfbWVkaWFfcXVlcnlfbGlzdDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIG1lZGlhX3F1ZXJ5X2xpc3RcbiAgICAgICAgICAgICAgICAgKiAgIDogUyogW21lZGlhX3F1ZXJ5IFsgJywnIFMqIG1lZGlhX3F1ZXJ5IF0qIF0/XG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhTGlzdCAgID0gW107XG5cblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuSURFTlQgfHwgdG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuTFBBUkVOKXtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFMaXN0LnB1c2godGhpcy5fbWVkaWFfcXVlcnkoKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLkNPTU1BKSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhTGlzdC5wdXNoKHRoaXMuX21lZGlhX3F1ZXJ5KCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYUxpc3Q7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogTm90ZTogXCJleHByZXNzaW9uXCIgaW4gdGhlIGdyYW1tYXIgbWFwcyB0byB0aGUgX21lZGlhX2V4cHJlc3Npb25cbiAgICAgICAgICAgICAqIG1ldGhvZC5cblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfbWVkaWFfcXVlcnk6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBtZWRpYV9xdWVyeVxuICAgICAgICAgICAgICAgICAqICAgOiBbT05MWSB8IE5PVF0/IFMqIG1lZGlhX3R5cGUgUyogWyBBTkQgUyogZXhwcmVzc2lvbiBdKlxuICAgICAgICAgICAgICAgICAqICAgfCBleHByZXNzaW9uIFsgQU5EIFMqIGV4cHJlc3Npb24gXSpcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpZGVudCAgICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuICAgICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuSURFTlQpKXtcbiAgICAgICAgICAgICAgICAgICAgaWRlbnQgPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSB0aGVyZSdzIG5vIGN1c3RvbSB0b2tlbnMgZm9yIHRoZXNlLCBuZWVkIHRvIG1hbnVhbGx5IGNoZWNrXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZGVudCAhPT0gXCJvbmx5XCIgJiYgaWRlbnQgIT09IFwibm90XCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0udW5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5TdHJlYW0udG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuSURFTlQpe1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gdGhpcy5fbWVkaWFfdHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlblN0cmVhbS5wZWVrKCkgPT09IFRva2Vucy5MUEFSRU4pe1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS5MVCgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKHRoaXMuX21lZGlhX2V4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IG51bGwgJiYgZXhwcmVzc2lvbnMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5JREVOVCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWUudG9Mb3dlckNhc2UoKSAhPT0gXCJhbmRcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5leHBlY3RlZFRva2VuKHRva2VuU3RyZWFtLnRva2VuKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaCh0aGlzLl9tZWRpYV9leHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYVF1ZXJ5KGlkZW50LCB0eXBlLCBleHByZXNzaW9ucywgdG9rZW4uc3RhcnRMaW5lLCB0b2tlbi5zdGFydENvbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgTWVkaWEgUXVlcmllc1xuICAgICAgICAgICAgX21lZGlhX3R5cGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBtZWRpYV90eXBlXG4gICAgICAgICAgICAgICAgICogICA6IElERU5UXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhX2ZlYXR1cmUoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTm90ZTogaW4gQ1NTMyBNZWRpYSBRdWVyaWVzLCB0aGlzIGlzIGNhbGxlZCBcImV4cHJlc3Npb25cIi5cbiAgICAgICAgICAgICAqIFJlbmFtZWQgaGVyZSB0byBhdm9pZCBjb25mbGljdCB3aXRoIENTUzMgU2VsZWN0b3JzXG4gICAgICAgICAgICAgKiBkZWZpbml0aW9uIG9mIFwiZXhwcmVzc2lvblwiLiBBbHNvIG5vdGUgdGhhdCBcImV4cHJcIiBpbiB0aGVcbiAgICAgICAgICAgICAqIGdyYW1tYXIgbm93IG1hcHMgdG8gXCJleHByZXNzaW9uXCIgZnJvbSBDU1MzIHNlbGVjdG9ycy5cbiAgICAgICAgICAgICAqIEBtZXRob2QgX21lZGlhX2V4cHJlc3Npb25cbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9tZWRpYV9leHByZXNzaW9uOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAqICA6ICcoJyBTKiBtZWRpYV9mZWF0dXJlIFMqIFsgJzonIFMqIGV4cHIgXT8gJyknIFMqXG4gICAgICAgICAgICAgICAgICogIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiAgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5MUEFSRU4pO1xuXG4gICAgICAgICAgICAgICAgZmVhdHVyZSA9IHRoaXMuX21lZGlhX2ZlYXR1cmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5DT0xPTikpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLkxUKDEpO1xuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5fZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuUlBBUkVOKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYUZlYXR1cmUoZmVhdHVyZSwgKGV4cHJlc3Npb24gPyBuZXcgU3ludGF4VW5pdChleHByZXNzaW9uLCB0b2tlbi5zdGFydExpbmUsIHRva2VuLnN0YXJ0Q29sKSA6IG51bGwpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBNZWRpYSBRdWVyaWVzXG4gICAgICAgICAgICBfbWVkaWFfZmVhdHVyZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIG1lZGlhX2ZlYXR1cmVcbiAgICAgICAgICAgICAgICAgKiAgIDogSURFTlRcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLklERU5UKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBTeW50YXhVbml0LmZyb21Ub2tlbih0b2tlblN0cmVhbS50b2tlbigpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBQYWdlZCBNZWRpYVxuICAgICAgICAgICAgX3BhZ2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBwYWdlOlxuICAgICAgICAgICAgICAgICAqICAgIFBBR0VfU1lNIFMqIElERU5UPyBwc2V1ZG9fcGFnZT8gUypcbiAgICAgICAgICAgICAgICAgKiAgICAneycgUyogWyBkZWNsYXJhdGlvbiB8IG1hcmdpbiBdPyBbICc7JyBTKiBbIGRlY2xhcmF0aW9uIHwgbWFyZ2luIF0/IF0qICd9JyBTKlxuICAgICAgICAgICAgICAgICAqICAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sLFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHBzZXVkb1BhZ2UgID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vbG9vayBmb3IgQHBhZ2VcbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLlBBR0VfU1lNKTtcbiAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydENvbDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLklERU5UKSl7XG4gICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vVGhlIHZhbHVlICdhdXRvJyBtYXkgbm90IGJlIHVzZWQgYXMgYSBwYWdlIG5hbWUgYW5kIE1VU1QgYmUgdHJlYXRlZCBhcyBhIHN5bnRheCBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkZW50aWZpZXIudG9Mb3dlckNhc2UoKSA9PT0gXCJhdXRvXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5leHBlY3RlZFRva2VuKHRva2VuU3RyZWFtLnRva2VuKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhlcmUncyBhIGNvbG9uIHVwY29taW5nXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLkNPTE9OKXtcbiAgICAgICAgICAgICAgICAgICAgcHNldWRvUGFnZSA9IHRoaXMuX3BzZXVkb19wYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgXCJzdGFydHBhZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICBwc2V1ZG86IHBzZXVkb1BhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiAgICBjb2xcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWREZWNsYXJhdGlvbnModHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAgIFwiZW5kcGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgICAgIHBzZXVkbzogcHNldWRvUGFnZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6ICAgIGNvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgUGFnZWQgTWVkaWFcbiAgICAgICAgICAgIF9tYXJnaW46IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBtYXJnaW4gOlxuICAgICAgICAgICAgICAgICAqICAgIG1hcmdpbl9zeW0gUyogJ3snIGRlY2xhcmF0aW9uIFsgJzsnIFMqIGRlY2xhcmF0aW9uPyBdKiAnfScgUypcbiAgICAgICAgICAgICAgICAgKiAgICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luU3ltICAgPSB0aGlzLl9tYXJnaW5fc3ltKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWFyZ2luU3ltKXtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0YXJ0cGFnZW1hcmdpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBtYXJnaW5TeW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6ICAgIGNvbFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkRGVjbGFyYXRpb25zKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVuZHBhZ2VtYXJnaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogbWFyZ2luU3ltLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICBjb2xcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgUGFnZWQgTWVkaWFcbiAgICAgICAgICAgIF9tYXJnaW5fc3ltOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBtYXJnaW5fc3ltIDpcbiAgICAgICAgICAgICAgICAgKiAgICBUT1BMRUZUQ09STkVSX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgVE9QTEVGVF9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIFRPUENFTlRFUl9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIFRPUFJJR0hUX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgVE9QUklHSFRDT1JORVJfU1lNIHxcbiAgICAgICAgICAgICAgICAgKiAgICBCT1RUT01MRUZUQ09STkVSX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgQk9UVE9NTEVGVF9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIEJPVFRPTUNFTlRFUl9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIEJPVFRPTVJJR0hUX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgQk9UVE9NUklHSFRDT1JORVJfU1lNIHxcbiAgICAgICAgICAgICAgICAgKiAgICBMRUZUVE9QX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgTEVGVE1JRERMRV9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIExFRlRCT1RUT01fU1lNIHxcbiAgICAgICAgICAgICAgICAgKiAgICBSSUdIVFRPUF9TWU0gfFxuICAgICAgICAgICAgICAgICAqICAgIFJJR0hUTUlERExFX1NZTSB8XG4gICAgICAgICAgICAgICAgICogICAgUklHSFRCT1RUT01fU1lNXG4gICAgICAgICAgICAgICAgICogICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW07XG5cbiAgICAgICAgICAgICAgICBpZih0b2tlblN0cmVhbS5tYXRjaChbVG9rZW5zLlRPUExFRlRDT1JORVJfU1lNLCBUb2tlbnMuVE9QTEVGVF9TWU0sXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2tlbnMuVE9QQ0VOVEVSX1NZTSwgVG9rZW5zLlRPUFJJR0hUX1NZTSwgVG9rZW5zLlRPUFJJR0hUQ09STkVSX1NZTSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vucy5CT1RUT01MRUZUQ09STkVSX1NZTSwgVG9rZW5zLkJPVFRPTUxFRlRfU1lNLFxuICAgICAgICAgICAgICAgICAgICAgICAgVG9rZW5zLkJPVFRPTUNFTlRFUl9TWU0sIFRva2Vucy5CT1RUT01SSUdIVF9TWU0sXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2tlbnMuQk9UVE9NUklHSFRDT1JORVJfU1lNLCBUb2tlbnMuTEVGVFRPUF9TWU0sXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2tlbnMuTEVGVE1JRERMRV9TWU0sIFRva2Vucy5MRUZUQk9UVE9NX1NZTSwgVG9rZW5zLlJJR0hUVE9QX1NZTSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vucy5SSUdIVE1JRERMRV9TWU0sIFRva2Vucy5SSUdIVEJPVFRPTV9TWU1dKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTeW50YXhVbml0LmZyb21Ub2tlbih0b2tlblN0cmVhbS50b2tlbigpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9wc2V1ZG9fcGFnZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHBzZXVkb19wYWdlXG4gICAgICAgICAgICAgICAgICogICA6ICc6JyBJREVOVFxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW07XG5cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLkNPTE9OKTtcbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLklERU5UKTtcblxuICAgICAgICAgICAgICAgIC8vVE9ETzogQ1NTMyBQYWdlZCBNZWRpYSBzYXlzIG9ubHkgXCJsZWZ0XCIsIFwiY2VudGVyXCIsIGFuZCBcInJpZ2h0XCIgYXJlIGFsbG93ZWRcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2ZvbnRfZmFjZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGZvbnRfZmFjZVxuICAgICAgICAgICAgICAgICAqICAgOiBGT05UX0ZBQ0VfU1lNIFMqXG4gICAgICAgICAgICAgICAgICogICAgICd7JyBTKiBkZWNsYXJhdGlvbiBbICc7JyBTKiBkZWNsYXJhdGlvbiBdKiAnfScgUypcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sO1xuXG4gICAgICAgICAgICAgICAgLy9sb29rIGZvciBAcGFnZVxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuRk9OVF9GQUNFX1NZTSk7XG4gICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2w7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcInN0YXJ0Zm9udGZhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6ICAgIGNvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZERlY2xhcmF0aW9ucyh0cnVlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgXCJlbmRmb250ZmFjZVwiLFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogICAgY29sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfdmlld3BvcnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiB2aWV3cG9ydFxuICAgICAgICAgICAgICAgICAqICAgOiBWSUVXUE9SVF9TWU0gUypcbiAgICAgICAgICAgICAgICAgKiAgICAgJ3snIFMqIGRlY2xhcmF0aW9uPyBbICc7JyBTKiBkZWNsYXJhdGlvbj8gXSogJ30nIFMqXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5WSUVXUE9SVF9TWU0pO1xuICAgICAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2w7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcInN0YXJ0dmlld3BvcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogICAgY29sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWREZWNsYXJhdGlvbnModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgXCJlbmR2aWV3cG9ydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICBjb2xcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9kb2N1bWVudDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICogICA6IERPQ1VNRU5UX1NZTSBTKlxuICAgICAgICAgICAgICAgICAqICAgICBfZG9jdW1lbnRfZnVuY3Rpb24gWyAnLCcgUyogX2RvY3VtZW50X2Z1bmN0aW9uIF0qIFMqXG4gICAgICAgICAgICAgICAgICogICAgICd7JyBTKiBydWxlc2V0KiAnfSdcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLkRPQ1VNRU5UX1NZTSk7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgIGlmICgvXkBcXC0oW15cXC1dKylcXC0vLnRlc3QodG9rZW4udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5wdXNoKHRoaXMuX2RvY3VtZW50X2Z1bmN0aW9uKCkpO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLkNPTU1BKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMucHVzaCh0aGlzLl9kb2N1bWVudF9mdW5jdGlvbigpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLkxCUkFDRSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgXCJzdGFydGRvY3VtZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uczogZnVuY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICAgIHByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogICAgICB0b2tlbi5zdGFydExpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogICAgICAgdG9rZW4uc3RhcnRDb2xcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLlBBR0VfU1lNKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlblN0cmVhbS5wZWVrKCkgPT09IFRva2Vucy5GT05UX0ZBQ0VfU1lNKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvbnRfZmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLlZJRVdQT1JUX1NZTSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3cG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLk1FRElBX1NZTSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9ydWxlc2V0KCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLlJCUkFDRSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgXCJlbmRkb2N1bWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnM6IGZ1bmN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAgICBwcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgdG9rZW4uc3RhcnRMaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6ICAgICAgIHRva2VuLnN0YXJ0Q29sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZG9jdW1lbnRfZnVuY3Rpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBkb2N1bWVudF9mdW5jdGlvblxuICAgICAgICAgICAgICAgICAqICAgOiBmdW5jdGlvbiB8IFVSSSBTKlxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5VUkkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX2Z1bmN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX29wZXJhdG9yOiBmdW5jdGlvbihpbkZ1bmN0aW9uKXtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogb3BlcmF0b3IgKG91dHNpZGUgZnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICogIDogJy8nIFMqIHwgJywnIFMqIHwgLyggZW1wdHkgKS9cbiAgICAgICAgICAgICAgICAgKiBvcGVyYXRvciAoaW5zaWRlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAqICA6ICcvJyBTKiB8ICcrJyBTKiB8ICcqJyBTKiB8ICctJyBTKiAvKCBlbXB0eSApL1xuICAgICAgICAgICAgICAgICAqICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gICAgICAgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuU0xBU0gsIFRva2Vucy5DT01NQV0pIHx8XG4gICAgICAgICAgICAgICAgICAgIChpbkZ1bmN0aW9uICYmIHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuUExVUywgVG9rZW5zLlNUQVIsIFRva2Vucy5NSU5VU10pKSl7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gIHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbiA/IFByb3BlcnR5VmFsdWVQYXJ0LmZyb21Ub2tlbih0b2tlbikgOiBudWxsO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfY29tYmluYXRvcjogZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogY29tYmluYXRvclxuICAgICAgICAgICAgICAgICAqICA6IFBMVVMgUyogfCBHUkVBVEVSIFMqIHwgVElMREUgUyogfCBTK1xuICAgICAgICAgICAgICAgICAqICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbjtcblxuICAgICAgICAgICAgICAgIGlmKHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuUExVUywgVG9rZW5zLkdSRUFURVIsIFRva2Vucy5USUxERV0pKXtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBDb21iaW5hdG9yKHRva2VuLnZhbHVlLCB0b2tlbi5zdGFydExpbmUsIHRva2VuLnN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfdW5hcnlfb3BlcmF0b3I6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHVuYXJ5X29wZXJhdG9yXG4gICAgICAgICAgICAgICAgICogIDogJy0nIHwgJysnXG4gICAgICAgICAgICAgICAgICogIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuTUlOVVMsIFRva2Vucy5QTFVTXSkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfcHJvcGVydHk6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICogICA6IElERU5UIFMqXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBoYWNrICAgICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w7XG5cbiAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciBzdGFyIGhhY2sgLSB0aHJvd3MgZXJyb3IgaWYgbm90IGFsbG93ZWRcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuU1RBUiAmJiB0aGlzLm9wdGlvbnMuc3RhckhhY2spe1xuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBoYWNrID0gdG9rZW4udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlbi5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuLnN0YXJ0Q29sO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5JREVOVCkpe1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuVmFsdWUgPSB0b2tlbi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciB1bmRlcnNjb3JlIGhhY2sgLSBubyBlcnJvciBpZiBub3QgYWxsb3dlZCBiZWNhdXNlIGl0J3MgdmFsaWQgQ1NTIHN5bnRheFxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5WYWx1ZS5jaGFyQXQoMCkgPT09IFwiX1wiICYmIHRoaXMub3B0aW9ucy51bmRlcnNjb3JlSGFjayl7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYWNrID0gXCJfXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblZhbHVlID0gdG9rZW5WYWx1ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBQcm9wZXJ0eU5hbWUodG9rZW5WYWx1ZSwgaGFjaywgKGxpbmV8fHRva2VuLnN0YXJ0TGluZSksIChjb2x8fHRva2VuLnN0YXJ0Q29sKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9BdWdtZW50ZWQgd2l0aCBDU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX3J1bGVzZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBydWxlc2V0XG4gICAgICAgICAgICAgICAgICogICA6IHNlbGVjdG9yc19ncm91cFxuICAgICAgICAgICAgICAgICAqICAgICAneycgUyogZGVjbGFyYXRpb24/IFsgJzsnIFMqIGRlY2xhcmF0aW9uPyBdKiAnfScgUypcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB0dCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzO1xuXG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIEVycm9yIFJlY292ZXJ5OiBJZiBldmVuIGEgc2luZ2xlIHNlbGVjdG9yIGZhaWxzIHRvIHBhcnNlLFxuICAgICAgICAgICAgICAgICAqIHRoZW4gdGhlIGVudGlyZSBydWxlc2V0IHNob3VsZCBiZSB0aHJvd24gYXdheS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnMgPSB0aGlzLl9zZWxlY3RvcnNfZ3JvdXAoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleCBpbnN0YW5jZW9mIFN5bnRheEVycm9yICYmICF0aGlzLm9wdGlvbnMuc3RyaWN0KXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJlIGVycm9yIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgIFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogICAgICBleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAgICBleC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgIGV4LmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICAgICAgZXguY29sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9za2lwIG92ZXIgZXZlcnl0aGluZyB1bnRpbCBjbG9zaW5nIGJyYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0dCA9IHRva2VuU3RyZWFtLmFkdmFuY2UoW1Rva2Vucy5SQlJBQ0VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dCA9PT0gVG9rZW5zLlJCUkFDRSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGVyZSdzIGEgcmlnaHQgYnJhY2UsIHRoZSBydWxlIGlzIGZpbmlzaGVkIHNvIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlLCByZXRocm93IHRoZSBlcnJvciBiZWNhdXNlIGl0IHdhc24ndCBoYW5kbGVkIHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90IGEgc3ludGF4IGVycm9yLCByZXRocm93IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vdHJpZ2dlciBwYXJzZXIgdG8gY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiBpdCBnb3QgaGVyZSwgYWxsIHNlbGVjdG9ycyBwYXJzZWRcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JzKXtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgXCJzdGFydHJ1bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogIHNlbGVjdG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgIHNlbGVjdG9yc1swXS5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICAgICAgc2VsZWN0b3JzWzBdLmNvbFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkRGVjbGFyYXRpb25zKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgICAgICBcImVuZHJ1bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogIHNlbGVjdG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgIHNlbGVjdG9yc1swXS5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAgICAgICAgc2VsZWN0b3JzWzBdLmNvbFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RvcnM7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBTZWxlY3RvcnNcbiAgICAgICAgICAgIF9zZWxlY3RvcnNfZ3JvdXA6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHNlbGVjdG9yc19ncm91cFxuICAgICAgICAgICAgICAgICAqICAgOiBzZWxlY3RvciBbIENPTU1BIFMqIHNlbGVjdG9yIF0qXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycyAgID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSB0aGlzLl9zZWxlY3RvcigpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuQ09NTUEpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHRoaXMuX3NlbGVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5leHBlY3RlZFRva2VuKHRva2VuU3RyZWFtLkxUKDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RvcnMubGVuZ3RoID8gc2VsZWN0b3JzIDogbnVsbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBTZWxlY3RvcnNcbiAgICAgICAgICAgIF9zZWxlY3RvcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICogICA6IHNpbXBsZV9zZWxlY3Rvcl9zZXF1ZW5jZSBbIGNvbWJpbmF0b3Igc2ltcGxlX3NlbGVjdG9yX3NlcXVlbmNlIF0qXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgICAgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNlbGVjdG9yID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY29tYmluYXRvciAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICB3cyAgICAgICAgICA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3Mgbm8gc2ltcGxlIHNlbGVjdG9yLCB0aGVuIHRoZXJlJ3Mgbm8gc2VsZWN0b3JcbiAgICAgICAgICAgICAgICBuZXh0U2VsZWN0b3IgPSB0aGlzLl9zaW1wbGVfc2VsZWN0b3Jfc2VxdWVuY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFNlbGVjdG9yID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IucHVzaChuZXh0U2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vbG9vayBmb3IgYSBjb21iaW5hdG9yXG4gICAgICAgICAgICAgICAgICAgIGNvbWJpbmF0b3IgPSB0aGlzLl9jb21iaW5hdG9yKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJpbmF0b3IgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IucHVzaChjb21iaW5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTZWxlY3RvciA9IHRoaXMuX3NpbXBsZV9zZWxlY3Rvcl9zZXF1ZW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXJlIG11c3QgYmUgYSBuZXh0IHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNlbGVjdG9yID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmV4cGVjdGVkVG9rZW4odG9rZW5TdHJlYW0uTFQoMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV4dFNlbGVjdG9yIGlzIGFuIGluc3RhbmNlIG9mIFNlbGVjdG9yUGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnB1c2gobmV4dFNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGVyZSdzIG5vdCB3aGl0ZXNwYWNlLCB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVhZFdoaXRlc3BhY2UoKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB3aGl0ZXNwYWNlIHNlcGFyYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdzID0gbmV3IENvbWJpbmF0b3IodG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZSwgdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmUsIHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb21iaW5hdG9yIGlzIG5vdCByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmF0b3IgPSB0aGlzLl9jb21iaW5hdG9yKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlbGVjdG9yIGlzIHJlcXVpcmVkIGlmIHRoZXJlJ3MgYSBjb21iaW5hdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNlbGVjdG9yID0gdGhpcy5fc2ltcGxlX3NlbGVjdG9yX3NlcXVlbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRTZWxlY3RvciA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21iaW5hdG9yICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuZXhwZWN0ZWRUb2tlbih0b2tlblN0cmVhbS5MVCgxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21iaW5hdG9yICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnB1c2goY29tYmluYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvci5wdXNoKHdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnB1c2gobmV4dFNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3RvcihzZWxlY3Rvciwgc2VsZWN0b3JbMF0ubGluZSwgc2VsZWN0b3JbMF0uY29sKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBTZWxlY3RvcnNcbiAgICAgICAgICAgIF9zaW1wbGVfc2VsZWN0b3Jfc2VxdWVuY2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBzaW1wbGVfc2VsZWN0b3Jfc2VxdWVuY2VcbiAgICAgICAgICAgICAgICAgKiAgIDogWyB0eXBlX3NlbGVjdG9yIHwgdW5pdmVyc2FsIF1cbiAgICAgICAgICAgICAgICAgKiAgICAgWyBIQVNIIHwgY2xhc3MgfCBhdHRyaWIgfCBwc2V1ZG8gfCBuZWdhdGlvbiBdKlxuICAgICAgICAgICAgICAgICAqICAgfCBbIEhBU0ggfCBjbGFzcyB8IGF0dHJpYiB8IHBzZXVkbyB8IG5lZ2F0aW9uIF0rXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcblxuICAgICAgICAgICAgICAgICAgICAvL3BhcnRzIG9mIGEgc2ltcGxlIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnROYW1lID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzICAgPSBbXSxcblxuICAgICAgICAgICAgICAgICAgICAvL2NvbXBsZXRlIHNlbGVjdG9yIHRleHRcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JUZXh0PSBcIlwiLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIGRpZmZlcmVudCBwYXJ0cyBhZnRlciB0aGUgZWxlbWVudCBuYW1lIHRvIHNlYXJjaCBmb3JcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyAgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0hBU0hcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5IQVNIKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2VsZWN0b3JTdWJQYXJ0KHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWUsIFwiaWRcIiwgdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmUsIHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2wpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xhc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wc2V1ZG8sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZWdhdGlvblxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpICAgICAgICAgICA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlbiAgICAgICAgID0gY29tcG9uZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudCAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sO1xuXG5cbiAgICAgICAgICAgICAgICAvL2dldCBzdGFydGluZyBsaW5lIGFuZCBjb2x1bW4gZm9yIHRoZSBzZWxlY3RvclxuICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlblN0cmVhbS5MVCgxKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0uTFQoMSkuc3RhcnRDb2w7XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50TmFtZSA9IHRoaXMuX3R5cGVfc2VsZWN0b3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnROYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudE5hbWUgPSB0aGlzLl91bml2ZXJzYWwoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudE5hbWUgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvclRleHQgKz0gZWxlbWVudE5hbWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSl7XG5cbiAgICAgICAgICAgICAgICAgICAgLy93aGl0ZXNwYWNlIG1lYW5zIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLlMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciBlYWNoIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB3aGlsZShpIDwgbGVuICYmIGNvbXBvbmVudCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW2krK10uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgPT09IG51bGwpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3dlIGRvbid0IGhhdmUgYSBzZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yVGV4dCA9PT0gXCJcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnMucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JUZXh0ICs9IGNvbXBvbmVudC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yVGV4dCAhPT0gXCJcIiA/XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2VsZWN0b3JQYXJ0KGVsZW1lbnROYW1lLCBtb2RpZmllcnMsIHNlbGVjdG9yVGV4dCwgbGluZSwgY29sKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX3R5cGVfc2VsZWN0b3I6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiB0eXBlX3NlbGVjdG9yXG4gICAgICAgICAgICAgICAgICogICA6IFsgbmFtZXNwYWNlX3ByZWZpeCBdPyBlbGVtZW50X25hbWVcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICBucyAgICAgICAgICA9IHRoaXMuX25hbWVzcGFjZV9wcmVmaXgoKSxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudE5hbWUgPSB0aGlzLl9lbGVtZW50X25hbWUoKTtcblxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudE5hbWUpe1xuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgKiBOZWVkIHRvIGJhY2sgb3V0IHRoZSBuYW1lc3BhY2UgdGhhdCB3YXMgcmVhZCBkdWUgdG8gYm90aFxuICAgICAgICAgICAgICAgICAgICAgKiB0eXBlX3NlbGVjdG9yIGFuZCB1bml2ZXJzYWwgcmVhZGluZyBuYW1lc3BhY2VfcHJlZml4XG4gICAgICAgICAgICAgICAgICAgICAqIGZpcnN0LiBLaW5kIG9mIGhhY2t5LCBidXQgb25seSB3YXkgSSBjYW4gZmlndXJlIG91dFxuICAgICAgICAgICAgICAgICAgICAgKiByaWdodCBub3cgaG93IHRvIG5vdCBjaGFuZ2UgdGhlIGdyYW1tYXIuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAobnMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0udW5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS51bmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5zKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnROYW1lLnRleHQgPSBucyArIGVsZW1lbnROYW1lLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50TmFtZS5jb2wgLT0gbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgU2VsZWN0b3JzXG4gICAgICAgICAgICBfY2xhc3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBjbGFzc1xuICAgICAgICAgICAgICAgICAqICAgOiAnLicgSURFTlRcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbjtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuRE9UKSl7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuSURFTlQpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VsZWN0b3JTdWJQYXJ0KFwiLlwiICsgdG9rZW4udmFsdWUsIFwiY2xhc3NcIiwgdG9rZW4uc3RhcnRMaW5lLCB0b2tlbi5zdGFydENvbCAtIDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX2VsZW1lbnRfbmFtZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGVsZW1lbnRfbmFtZVxuICAgICAgICAgICAgICAgICAqICAgOiBJREVOVFxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHRva2VuO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5JREVOVCkpe1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VsZWN0b3JTdWJQYXJ0KHRva2VuLnZhbHVlLCBcImVsZW1lbnROYW1lXCIsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX25hbWVzcGFjZV9wcmVmaXg6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBuYW1lc3BhY2VfcHJlZml4XG4gICAgICAgICAgICAgICAgICogICA6IFsgSURFTlQgfCAnKicgXT8gJ3wnXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIC8vdmVyaWZ5IHRoYXQgdGhpcyBpcyBhIG5hbWVzcGFjZSBwcmVmaXhcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0uTEEoMSkgPT09IFRva2Vucy5QSVBFIHx8IHRva2VuU3RyZWFtLkxBKDIpID09PSBUb2tlbnMuUElQRSl7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodG9rZW5TdHJlYW0ubWF0Y2goW1Rva2Vucy5JREVOVCwgVG9rZW5zLlNUQVJdKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5QSVBFKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gXCJ8XCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gdmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX3VuaXZlcnNhbDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHVuaXZlcnNhbFxuICAgICAgICAgICAgICAgICAqICAgOiBbIG5hbWVzcGFjZV9wcmVmaXggXT8gJyonXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgbnM7XG5cbiAgICAgICAgICAgICAgICBucyA9IHRoaXMuX25hbWVzcGFjZV9wcmVmaXgoKTtcbiAgICAgICAgICAgICAgICBpZihucyl7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IG5zO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5TVEFSKSl7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IFwiKlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPyB2YWx1ZSA6IG51bGw7XG5cbiAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX2F0dHJpYjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGF0dHJpYlxuICAgICAgICAgICAgICAgICAqICAgOiAnWycgUyogWyBuYW1lc3BhY2VfcHJlZml4IF0/IElERU5UIFMqXG4gICAgICAgICAgICAgICAgICogICAgICAgICBbIFsgUFJFRklYTUFUQ0ggfFxuICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgIFNVRkZJWE1BVENIIHxcbiAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBTVUJTVFJJTkdNQVRDSCB8XG4gICAgICAgICAgICAgICAgICogICAgICAgICAgICAgJz0nIHxcbiAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICBJTkNMVURFUyB8XG4gICAgICAgICAgICAgICAgICogICAgICAgICAgICAgREFTSE1BVENIIF0gUyogWyBJREVOVCB8IFNUUklORyBdIFMqXG4gICAgICAgICAgICAgICAgICogICAgICAgICBdPyAnXSdcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5zLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbjtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuTEJSQUNLRVQpKXtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5zID0gdGhpcy5fbmFtZXNwYWNlX3ByZWZpeCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChucyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBucztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuSURFTlQpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuUFJFRklYTUFUQ0gsIFRva2Vucy5TVUZGSVhNQVRDSCwgVG9rZW5zLlNVQlNUUklOR01BVENILFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vucy5FUVVBTFMsIFRva2Vucy5JTkNMVURFUywgVG9rZW5zLkRBU0hNQVRDSF0pKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChbVG9rZW5zLklERU5ULCBUb2tlbnMuU1RSSU5HXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuUkJSQUNLRVQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VsZWN0b3JTdWJQYXJ0KHZhbHVlICsgXCJdXCIsIFwiYXR0cmlidXRlXCIsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBTZWxlY3RvcnNcbiAgICAgICAgICAgIF9wc2V1ZG86IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHBzZXVkb1xuICAgICAgICAgICAgICAgICAqICAgOiAnOicgJzonPyBbIElERU5UIHwgZnVuY3Rpb25hbF9wc2V1ZG8gXVxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHBzZXVkbyAgICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY29sb25zICAgICAgPSBcIjpcIixcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5DT0xPTikpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuQ09MT04pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9ucyArPSBcIjpcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuSURFTlQpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzZXVkbyA9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sIC0gY29sb25zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlblN0cmVhbS5wZWVrKCkgPT09IFRva2Vucy5GVU5DVElPTil7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0uTFQoMSkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0uTFQoMSkuc3RhcnRDb2wgLSBjb2xvbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHNldWRvID0gdGhpcy5fZnVuY3Rpb25hbF9wc2V1ZG8oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwc2V1ZG8pe1xuICAgICAgICAgICAgICAgICAgICAgICAgcHNldWRvID0gbmV3IFNlbGVjdG9yU3ViUGFydChjb2xvbnMgKyBwc2V1ZG8sIFwicHNldWRvXCIsIGxpbmUsIGNvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHNldWRvO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9DU1MzIFNlbGVjdG9yc1xuICAgICAgICAgICAgX2Z1bmN0aW9uYWxfcHNldWRvOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogZnVuY3Rpb25hbF9wc2V1ZG9cbiAgICAgICAgICAgICAgICAgKiAgIDogRlVOQ1RJT04gUyogZXhwcmVzc2lvbiAnKSdcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5GVU5DVElPTikpe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHRoaXMuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5SUEFSRU4pO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBcIilcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgU2VsZWN0b3JzXG4gICAgICAgICAgICBfZXhwcmVzc2lvbjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgKiAgIDogWyBbIFBMVVMgfCAnLScgfCBESU1FTlNJT04gfCBOVU1CRVIgfCBTVFJJTkcgfCBJREVOVCBdIFMqIF0rXG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUodG9rZW5TdHJlYW0ubWF0Y2goW1Rva2Vucy5QTFVTLCBUb2tlbnMuTUlOVVMsIFRva2Vucy5ESU1FTlNJT04sXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2tlbnMuTlVNQkVSLCBUb2tlbnMuU1RSSU5HLCBUb2tlbnMuSURFTlQsIFRva2Vucy5MRU5HVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2tlbnMuRlJFUSwgVG9rZW5zLkFOR0xFLCBUb2tlbnMuVElNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vucy5SRVNPTFVUSU9OLCBUb2tlbnMuU0xBU0hdKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gdmFsdWUgOiBudWxsO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvL0NTUzMgU2VsZWN0b3JzXG4gICAgICAgICAgICBfbmVnYXRpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBuZWdhdGlvblxuICAgICAgICAgICAgICAgICAqICAgOiBOT1QgUyogbmVnYXRpb25fYXJnIFMqICcpJ1xuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgICAgIHN1YnBhcnQgICAgID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuTk9UKSl7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSB0aGlzLl9uZWdhdGlvbl9hcmcoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gYXJnO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuUlBBUkVOKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBzdWJwYXJ0ID0gbmV3IFNlbGVjdG9yU3ViUGFydCh2YWx1ZSwgXCJub3RcIiwgbGluZSwgY29sKTtcbiAgICAgICAgICAgICAgICAgICAgc3VicGFydC5hcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VicGFydDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vQ1NTMyBTZWxlY3RvcnNcbiAgICAgICAgICAgIF9uZWdhdGlvbl9hcmc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBuZWdhdGlvbl9hcmdcbiAgICAgICAgICAgICAgICAgKiAgIDogdHlwZV9zZWxlY3RvciB8IHVuaXZlcnNhbCB8IEhBU0ggfCBjbGFzcyB8IGF0dHJpYiB8IHBzZXVkb1xuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgICAgICAgID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHlwZV9zZWxlY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuaXZlcnNhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5IQVNIKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2VsZWN0b3JTdWJQYXJ0KHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWUsIFwiaWRcIiwgdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydExpbmUsIHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2wpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xhc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wc2V1ZG9cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgYXJnICAgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpICAgICAgICAgICA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlbiAgICAgICAgID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICAgICAgcGFydDtcblxuICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlblN0cmVhbS5MVCgxKS5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0uTFQoMSkuc3RhcnRDb2w7XG5cbiAgICAgICAgICAgICAgICB3aGlsZShpIDwgbGVuICYmIGFyZyA9PT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnc1tpXS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9tdXN0IGJlIGEgbmVnYXRpb24gYXJnXG4gICAgICAgICAgICAgICAgaWYgKGFyZyA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuZXhwZWN0ZWRUb2tlbih0b2tlblN0cmVhbS5MVCgxKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pdCdzIGFuIGVsZW1lbnQgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChhcmcudHlwZSA9PT0gXCJlbGVtZW50TmFtZVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IG5ldyBTZWxlY3RvclBhcnQoYXJnLCBbXSwgYXJnLnRvU3RyaW5nKCksIGxpbmUsIGNvbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IG5ldyBTZWxlY3RvclBhcnQobnVsbCwgW2FyZ10sIGFyZy50b1N0cmluZygpLCBsaW5lLCBjb2wpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2RlY2xhcmF0aW9uOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBkZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgICAqICAgOiBwcm9wZXJ0eSAnOicgUyogZXhwciBwcmlvP1xuICAgICAgICAgICAgICAgICAqICAgfCAvKCBlbXB0eSApL1xuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXhwciAgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBwcmlvICAgICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWQgICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSB0aGlzLl9wcm9wZXJ0eSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5DT0xPTik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuX2V4cHIoKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3Mgbm8gcGFydHMgZm9yIHRoZSB2YWx1ZSwgaXQncyBhbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4cHIgfHwgZXhwci5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5leHBlY3RlZFRva2VuKHRva2VuU3RyZWFtLkxUKDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByaW8gPSB0aGlzLl9wcmlvKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICogSWYgaGFja3Mgc2hvdWxkIGJlIGFsbG93ZWQsIHRoZW4gb25seSBjaGVjayB0aGUgcm9vdFxuICAgICAgICAgICAgICAgICAgICAgKiBwcm9wZXJ0eS4gSWYgaGFja3Mgc2hvdWxkIG5vdCBiZSBhbGxvd2VkLCB0cmVhdFxuICAgICAgICAgICAgICAgICAgICAgKiBfcHJvcGVydHkgb3IgKnByb3BlcnR5IGFzIGludmFsaWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IHByb3BlcnR5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3RhckhhY2sgJiYgcHJvcGVydHkuaGFjayA9PT0gXCIqXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudW5kZXJzY29yZUhhY2sgJiYgcHJvcGVydHkuaGFjayA9PT0gXCJfXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lID0gcHJvcGVydHkudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWxpZGF0ZVByb3BlcnR5KHByb3BlcnR5TmFtZSwgZXhwcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkID0gZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgXCJwcm9wZXJ0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6ICAgcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICAgICBleHByLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50OiAgcHJpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgICAgIHByb3BlcnR5LmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6ICAgICAgICBwcm9wZXJ0eS5jb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkOiAgICBpbnZhbGlkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfcHJpbzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIHByaW9cbiAgICAgICAgICAgICAgICAgKiAgIDogSU1QT1JUQU5UX1NZTSBTKlxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCAgICAgID0gdG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLklNUE9SVEFOVF9TWU0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2V4cHI6IGZ1bmN0aW9uKGluRnVuY3Rpb24pe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogZXhwclxuICAgICAgICAgICAgICAgICAqICAgOiB0ZXJtIFsgb3BlcmF0b3IgdGVybSBdKlxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyAgICAgID0gW10sXG5cdFx0XHRcdFx0Ly92YWx1ZVBhcnRzXHQ9IFtdLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yICAgID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdGVybShpbkZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9IHRoaXMuX29wZXJhdG9yKGluRnVuY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYW4gb3BlcmF0b3IsIGtlZXAgYnVpbGRpbmcgdXAgdGhlIHZhbHVlIHBhcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0b3Ipe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9wZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLyplbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3Mgbm90IGFuIG9wZXJhdG9yLCB5b3UgaGF2ZSBhIGZ1bGwgdmFsdWVcblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2gobmV3IFByb3BlcnR5VmFsdWUodmFsdWVQYXJ0cywgdmFsdWVQYXJ0c1swXS5saW5lLCB2YWx1ZVBhcnRzWzBdLmNvbCkpO1xuXHRcdFx0XHRcdFx0XHR2YWx1ZVBhcnRzID0gW107XG5cdFx0XHRcdFx0XHR9Ki9cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl90ZXJtKGluRnVuY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cdFx0XHRcdC8vY2xlYW51cFxuICAgICAgICAgICAgICAgIC8qaWYgKHZhbHVlUGFydHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gobmV3IFByb3BlcnR5VmFsdWUodmFsdWVQYXJ0cywgdmFsdWVQYXJ0c1swXS5saW5lLCB2YWx1ZVBhcnRzWzBdLmNvbCkpO1xuICAgICAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5sZW5ndGggPiAwID8gbmV3IFByb3BlcnR5VmFsdWUodmFsdWVzLCB2YWx1ZXNbMF0ubGluZSwgdmFsdWVzWzBdLmNvbCkgOiBudWxsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3Rlcm06IGZ1bmN0aW9uKGluRnVuY3Rpb24pe1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiB0ZXJtXG4gICAgICAgICAgICAgICAgICogICA6IHVuYXJ5X29wZXJhdG9yP1xuICAgICAgICAgICAgICAgICAqICAgICBbIE5VTUJFUiBTKiB8IFBFUkNFTlRBR0UgUyogfCBMRU5HVEggUyogfCBBTkdMRSBTKiB8XG4gICAgICAgICAgICAgICAgICogICAgICAgVElNRSBTKiB8IEZSRVEgUyogfCBmdW5jdGlvbiB8IGllX2Z1bmN0aW9uIF1cbiAgICAgICAgICAgICAgICAgKiAgIHwgU1RSSU5HIFMqIHwgSURFTlQgUyogfCBVUkkgUyogfCBVTklDT0RFUkFOR0UgUyogfCBoZXhjb2xvclxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHVuYXJ5ICAgICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBlbmRDaGFyICAgICA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w7XG5cbiAgICAgICAgICAgICAgICAvL3JldHVybnMgdGhlIG9wZXJhdG9yIG9yIG51bGxcbiAgICAgICAgICAgICAgICB1bmFyeSA9IHRoaXMuX3VuYXJ5X29wZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKHVuYXJ5ICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZXhjZXB0aW9uIGZvciBJRSBmaWx0ZXJzXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLnBlZWsoKSA9PT0gVG9rZW5zLklFX0ZVTkNUSU9OICYmIHRoaXMub3B0aW9ucy5pZUZpbHRlcnMpe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5faWVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuYXJ5ID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0TGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2w7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc2VlIGlmIGl0J3MgYSBzaW1wbGUgYmxvY2tcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluRnVuY3Rpb24gJiYgdG9rZW5TdHJlYW0ubWF0Y2goW1Rva2Vucy5MUEFSRU4sIFRva2Vucy5MQlJBQ0UsIFRva2Vucy5MQlJBQ0tFVF0pKXtcblxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZENoYXIgPSB0b2tlbi5lbmRDaGFyO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRva2VuLnZhbHVlICsgdGhpcy5fZXhwcihpbkZ1bmN0aW9uKS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5hcnkgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gdG9rZW5TdHJlYW0udG9rZW4oKS5zdGFydENvbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLnR5cGUoZW5kQ2hhcikpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBlbmRDaGFyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhlcmUncyBhIHNpbXBsZSBtYXRjaFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW5TdHJlYW0ubWF0Y2goW1Rva2Vucy5OVU1CRVIsIFRva2Vucy5QRVJDRU5UQUdFLCBUb2tlbnMuTEVOR1RILFxuICAgICAgICAgICAgICAgICAgICAgICAgVG9rZW5zLkFOR0xFLCBUb2tlbnMuVElNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vucy5GUkVRLCBUb2tlbnMuU1RSSU5HLCBUb2tlbnMuSURFTlQsIFRva2Vucy5VUkksIFRva2Vucy5VTklDT0RFX1JBTkdFXSkpe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuYXJ5ID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0TGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRDb2w7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vc2VlIGlmIGl0J3MgYSBjb2xvclxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2hleGNvbG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUncyBubyB1bmFyeSwgZ2V0IHRoZSBzdGFydCBvZiB0aGUgbmV4dCB0b2tlbiBmb3IgbGluZS9jb2wgaW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuYXJ5ID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gdG9rZW5TdHJlYW0uTFQoMSkuc3RhcnRMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IHRva2VuU3RyZWFtLkxUKDEpLnN0YXJ0Q29sO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2hhcyB0byBiZSBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGlzIGNoZWNrcyBmb3IgYWxwaGEob3BhY2l0eT0wKSBzdHlsZSBvZiBJRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGZ1bmN0aW9ucy4gSUVfRlVOQ1RJT04gb25seSBwcmVzZW50cyBwcm9naWQ6IHN0eWxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5MQSgzKSA9PT0gVG9rZW5zLkVRVUFMUyAmJiB0aGlzLm9wdGlvbnMuaWVGaWx0ZXJzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9pZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qaWYgKHZhbHVlID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Rocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGlkZW50aWZpZXIgYXQgbGluZSBcIiArIHRva2VuU3RyZWFtLnRva2VuKCkuc3RhcnRMaW5lICsgXCIsIGNoYXJhY3RlciBcIiArICB0b2tlblN0cmVhbS50b2tlbigpLnN0YXJ0Q29sICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdG9rZW4udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5hcnkgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSB0b2tlbi5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gdG9rZW4uc3RhcnRDb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvcGVydHlWYWx1ZVBhcnQodW5hcnkgIT09IG51bGwgPyB1bmFyeSArIHZhbHVlIDogdmFsdWUsIGxpbmUsIGNvbCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2Z1bmN0aW9uOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAqICAgOiBGVU5DVElPTiBTKiBleHByICcpJyBTKlxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGV4cHIgICAgICAgID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLkZVTkNUSU9OKSl7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCA9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLl9leHByKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblRleHQgKz0gZXhwcjtcblxuICAgICAgICAgICAgICAgICAgICAvL1NUQVJUOiBIb3JyaWJsZSBoYWNrIGluIGNhc2UgaXQncyBhbiBJRSBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZUZpbHRlcnMgJiYgdG9rZW5TdHJlYW0ucGVlaygpID09PSBUb2tlbnMuRVFVQUxTKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkV2hpdGVzcGFjZSgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25UZXh0ICs9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9taWdodCBiZSBzZWNvbmQgdGltZSBpbiB0aGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5MQSgwKSA9PT0gVG9rZW5zLkNPTU1BKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25UZXh0ICs9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLklERU5UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblRleHQgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5FUVVBTFMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mdW5jdGlvblRleHQgKz0gdGhpcy5fdGVybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx0ID0gdG9rZW5TdHJlYW0ucGVlaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGx0ICE9PSBUb2tlbnMuQ09NTUEgJiYgbHQgIT09IFRva2Vucy5TICYmIGx0ICE9PSBUb2tlbnMuUlBBUkVOKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0uZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdCA9IHRva2VuU3RyZWFtLnBlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlKHRva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuQ09NTUEsIFRva2Vucy5TXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9FTkQ6IEhvcnJpYmxlIEhhY2tcblxuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuUlBBUkVOKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25UZXh0ICs9IFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvblRleHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfaWVfZnVuY3Rpb246IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKiAoTXkgb3duIGV4dGVuc2lvbilcbiAgICAgICAgICAgICAgICAgKiBpZV9mdW5jdGlvblxuICAgICAgICAgICAgICAgICAqICAgOiBJRV9GVU5DVElPTiBTKiBJREVOVCAnPScgdGVybSBbUyogJywnPyBJREVOVCAnPScgdGVybV0rICcpJyBTKlxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGx0O1xuXG4gICAgICAgICAgICAgICAgLy9JRSBmdW5jdGlvbiBjYW4gYmVnaW4gbGlrZSBhIHJlZ3VsYXIgZnVuY3Rpb24sIHRvb1xuICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5tYXRjaChbVG9rZW5zLklFX0ZVTkNUSU9OLCBUb2tlbnMuRlVOQ1RJT05dKSl7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCA9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVhZFdoaXRlc3BhY2UoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25UZXh0ICs9IHRva2VuU3RyZWFtLnRva2VuKCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWlnaHQgYmUgc2Vjb25kIHRpbWUgaW4gdGhlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblN0cmVhbS5MQSgwKSA9PT0gVG9rZW5zLkNPTU1BKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblRleHQgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLklERU5UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuRVFVQUxTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uVGV4dCArPSB0b2tlblN0cmVhbS50b2tlbigpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Z1bmN0aW9uVGV4dCArPSB0aGlzLl90ZXJtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsdCA9IHRva2VuU3RyZWFtLnBlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGx0ICE9PSBUb2tlbnMuQ09NTUEgJiYgbHQgIT09IFRva2Vucy5TICYmIGx0ICE9PSBUb2tlbnMuUlBBUkVOKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblRleHQgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdCA9IHRva2VuU3RyZWFtLnBlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSh0b2tlblN0cmVhbS5tYXRjaChbVG9rZW5zLkNPTU1BLCBUb2tlbnMuU10pKTtcblxuICAgICAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tYXRjaChUb2tlbnMuUlBBUkVOKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25UZXh0ICs9IFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvblRleHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfaGV4Y29sb3I6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBUaGVyZSBpcyBhIGNvbnN0cmFpbnQgb24gdGhlIGNvbG9yIHRoYXQgaXQgbXVzdFxuICAgICAgICAgICAgICAgICAqIGhhdmUgZWl0aGVyIDMgb3IgNiBoZXgtZGlnaXRzIChpLmUuLCBbMC05YS1mQS1GXSlcbiAgICAgICAgICAgICAgICAgKiBhZnRlciB0aGUgXCIjXCI7IGUuZy4sIFwiIzAwMFwiIGlzIE9LLCBidXQgXCIjYWJjZFwiIGlzIG5vdC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIGhleGNvbG9yXG4gICAgICAgICAgICAgICAgICogICA6IEhBU0ggUypcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIHZhciB0b2tlblN0cmVhbSA9IHRoaXMuX3Rva2VuU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yO1xuXG4gICAgICAgICAgICAgICAgaWYodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLkhBU0gpKXtcblxuICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gZG8gc29tZSB2YWxpZGF0aW9uIGhlcmVcblxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdG9rZW4udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLyNbYS1mMC05XXszLDZ9L2kudGVzdChjb2xvcikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiRXhwZWN0ZWQgYSBoZXggY29sb3IgYnV0IGZvdW5kICdcIiArIGNvbG9yICsgXCInIGF0IGxpbmUgXCIgKyB0b2tlbi5zdGFydExpbmUgKyBcIiwgY29sIFwiICsgdG9rZW4uc3RhcnRDb2wgKyBcIi5cIiwgdG9rZW4uc3RhcnRMaW5lLCB0b2tlbi5zdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyBBbmltYXRpb25zIG1ldGhvZHNcbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgX2tleWZyYW1lczogZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICoga2V5ZnJhbWVzOlxuICAgICAgICAgICAgICAgICAqICAgOiBLRVlGUkFNRVNfU1lNIFMqIGtleWZyYW1lX25hbWUgUyogJ3snIFMqIGtleWZyYW1lX3J1bGUqICd9JyB7XG4gICAgICAgICAgICAgICAgICogICA7XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICB0dCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuS0VZRlJBTUVTX1NZTSk7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblN0cmVhbS50b2tlbigpO1xuICAgICAgICAgICAgICAgIGlmICgvXkBcXC0oW15cXC1dKylcXC0vLnRlc3QodG9rZW4udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIG5hbWUgPSB0aGlzLl9rZXlmcmFtZV9uYW1lKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuTEJSQUNFKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgXCJzdGFydGtleWZyYW1lc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIHRva2VuLnN0YXJ0TGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiAgICB0b2tlbi5zdGFydENvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB0dCA9IHRva2VuU3RyZWFtLnBlZWsoKTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgZm9yIGtleVxuICAgICAgICAgICAgICAgIHdoaWxlKHR0ID09PSBUb2tlbnMuSURFTlQgfHwgdHQgPT09IFRva2Vucy5QRVJDRU5UQUdFKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleWZyYW1lX3J1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdHQgPSB0b2tlblN0cmVhbS5wZWVrKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogICBcImVuZGtleWZyYW1lc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIHRva2VuLnN0YXJ0TGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiAgICB0b2tlbi5zdGFydENvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICB0b2tlblN0cmVhbS5tdXN0TWF0Y2goVG9rZW5zLlJCUkFDRSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9rZXlmcmFtZV9uYW1lOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBrZXlmcmFtZV9uYW1lOlxuICAgICAgICAgICAgICAgICAqICAgOiBJREVOVFxuICAgICAgICAgICAgICAgICAqICAgfCBTVFJJTkdcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbTtcblxuICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChbVG9rZW5zLklERU5ULCBUb2tlbnMuU1RSSU5HXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN5bnRheFVuaXQuZnJvbVRva2VuKHRva2VuU3RyZWFtLnRva2VuKCkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2tleWZyYW1lX3J1bGU6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGtleWZyYW1lX3J1bGU6XG4gICAgICAgICAgICAgICAgICogICA6IGtleV9saXN0IFMqXG4gICAgICAgICAgICAgICAgICogICAgICd7JyBTKiBkZWNsYXJhdGlvbiBbICc7JyBTKiBkZWNsYXJhdGlvbiBdKiAnfScgUypcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIga2V5TGlzdCA9IHRoaXMuX2tleV9saXN0KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAgIFwic3RhcnRrZXlmcmFtZXJ1bGVcIixcbiAgICAgICAgICAgICAgICAgICAga2V5czogICBrZXlMaXN0LFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIGtleUxpc3RbMF0ubGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiAgICBrZXlMaXN0WzBdLmNvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZERlY2xhcmF0aW9ucyh0cnVlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgXCJlbmRrZXlmcmFtZXJ1bGVcIixcbiAgICAgICAgICAgICAgICAgICAga2V5czogICBrZXlMaXN0LFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAgIGtleUxpc3RbMF0ubGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiAgICBrZXlMaXN0WzBdLmNvbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfa2V5X2xpc3Q6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIGtleV9saXN0OlxuICAgICAgICAgICAgICAgICAqICAgOiBrZXkgWyBTKiAnLCcgUyoga2V5XSpcbiAgICAgICAgICAgICAgICAgKiAgIDtcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAga2V5TGlzdCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy9tdXN0IGJlIGxlYXN0IG9uZSBrZXlcbiAgICAgICAgICAgICAgICBrZXlMaXN0LnB1c2godGhpcy5fa2V5KCkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIHdoaWxlKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5DT01NQSkpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBrZXlMaXN0LnB1c2godGhpcy5fa2V5KCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlMaXN0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2tleTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIFRoZXJlIGlzIGEgcmVzdHJpY3Rpb24gdGhhdCBJREVOVCBjYW4gYmUgb25seSBcImZyb21cIiBvciBcInRvXCIuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBrZXlcbiAgICAgICAgICAgICAgICAgKiAgIDogUEVSQ0VOVEFHRVxuICAgICAgICAgICAgICAgICAqICAgfCBJREVOVFxuICAgICAgICAgICAgICAgICAqICAgO1xuICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RyZWFtID0gdGhpcy5fdG9rZW5TdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHRva2VuO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5QRVJDRU5UQUdFKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTeW50YXhVbml0LmZyb21Ub2tlbih0b2tlblN0cmVhbS50b2tlbigpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5JREVOVCkpe1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuU3RyZWFtLnRva2VuKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC9mcm9tfHRvL2kudGVzdCh0b2tlbi52YWx1ZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN5bnRheFVuaXQuZnJvbVRva2VuKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLnVuZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiBpdCBnZXRzIGhlcmUsIHRoZXJlIHdhc24ndCBhIHZhbGlkIHRva2VuLCBzbyB0aW1lIHRvIGV4cGxvZGVcbiAgICAgICAgICAgICAgICB0aGlzLl91bmV4cGVjdGVkVG9rZW4odG9rZW5TdHJlYW0uTFQoMSkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gSGVscGVyIG1ldGhvZHNcbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3QgcGFydCBvZiBDU1MgZ3JhbW1hciwgYnV0IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlclxuICAgICAgICAgICAgICogY29tYmluYXRpb24gb2Ygd2hpdGUgc3BhY2UgYW5kIEhUTUwtc3R5bGUgY29tbWVudHMuXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgICAgICogQG1ldGhvZCBfc2tpcENydWZ0XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfc2tpcENydWZ0OiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHdoaWxlKHRoaXMuX3Rva2VuU3RyZWFtLm1hdGNoKFtUb2tlbnMuUywgVG9rZW5zLkNETywgVG9rZW5zLkNEQ10pKXtcbiAgICAgICAgICAgICAgICAgICAgLy9ub29wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3QgcGFydCBvZiBDU1MgZ3JhbW1hciwgYnV0IHRoaXMgcGF0dGVybiBvY2N1cnMgZnJlcXVlbnRseVxuICAgICAgICAgICAgICogaW4gdGhlIG9mZmljaWFsIENTUyBncmFtbWFyLiBTcGxpdCBvdXQgaGVyZSB0byBlbGltaW5hdGVcbiAgICAgICAgICAgICAqIGR1cGxpY2F0ZSBjb2RlLlxuICAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja1N0YXJ0IEluZGljYXRlcyBpZiB0aGUgcnVsZSBzaG91bGQgY2hlY2tcbiAgICAgICAgICAgICAqICAgICAgZm9yIHRoZSBsZWZ0IGJyYWNlIGF0IHRoZSBiZWdpbm5pbmcuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlYWRNYXJnaW5zIEluZGljYXRlcyBpZiB0aGUgcnVsZSBzaG91bGQgY2hlY2tcbiAgICAgICAgICAgICAqICAgICAgZm9yIG1hcmdpbiBwYXR0ZXJucy5cbiAgICAgICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9yZWFkRGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfcmVhZERlY2xhcmF0aW9uczogZnVuY3Rpb24oY2hlY2tTdGFydCwgcmVhZE1hcmdpbnMpe1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUmVhZHMgdGhlIHBhdHRlcm5cbiAgICAgICAgICAgICAgICAgKiBTKiAneycgUyogZGVjbGFyYXRpb24gWyAnOycgUyogZGVjbGFyYXRpb24gXSogJ30nIFMqXG4gICAgICAgICAgICAgICAgICogb3JcbiAgICAgICAgICAgICAgICAgKiBTKiAneycgUyogWyBkZWNsYXJhdGlvbiB8IG1hcmdpbiBdPyBbICc7JyBTKiBbIGRlY2xhcmF0aW9uIHwgbWFyZ2luIF0/IF0qICd9JyBTKlxuICAgICAgICAgICAgICAgICAqIE5vdGUgdGhhdCB0aGlzIGlzIGhvdyBpdCBpcyBkZXNjcmliZWQgaW4gQ1NTMyBQYWdlZCBNZWRpYSwgYnV0IGlzIGFjdHVhbGx5IGluY29ycmVjdC5cbiAgICAgICAgICAgICAgICAgKiBBIHNlbWljb2xvbiBpcyBvbmx5IG5lY2Vzc2FyeSBmb2xsb3dpbmcgYSBkZWNsYXJhdGlvbiBpZiB0aGVyZSdzIGFub3RoZXIgZGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAgKiBvciBtYXJnaW4gYWZ0ZXJ3YXJkcy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdHQ7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tTdGFydCl7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuU3RyZWFtLm11c3RNYXRjaChUb2tlbnMuTEJSQUNFKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSh0cnVlKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5TRU1JQ09MT04pIHx8IChyZWFkTWFyZ2lucyAmJiB0aGlzLl9tYXJnaW4oKSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kZWNsYXJhdGlvbigpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5TRU1JQ09MT04pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoKCF0aGlzLl9tYXJnaW4oKSAmJiAhdGhpcy5fZGVjbGFyYXRpb24oKSkgfHwgIXRva2VuU3RyZWFtLm1hdGNoKFRva2Vucy5TRU1JQ09MT04pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TdHJlYW0ubXVzdE1hdGNoKFRva2Vucy5SQlJBQ0UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4IGluc3RhbmNlb2YgU3ludGF4RXJyb3IgJiYgIXRoaXMub3B0aW9ucy5zdHJpY3Qpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpcmUgZXJyb3IgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAgICAgIGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICAgIGV4Lm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICAgICAgZXgubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6ICAgICAgICBleC5jb2xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NlZSBpZiB0aGVyZSdzIGFub3RoZXIgZGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR0ID0gdG9rZW5TdHJlYW0uYWR2YW5jZShbVG9rZW5zLlNFTUlDT0xPTiwgVG9rZW5zLlJCUkFDRV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR0ID09PSBUb2tlbnMuU0VNSUNPTE9OKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYSBzZW1pY29sb24sIHRoZW4gdGhlcmUgbWlnaHQgYmUgYW5vdGhlciBkZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWREZWNsYXJhdGlvbnMoZmFsc2UsIHJlYWRNYXJnaW5zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHQgIT09IFRva2Vucy5SQlJBQ0Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhIHJpZ2h0IGJyYWNlLCB0aGUgcnVsZSBpcyBmaW5pc2hlZCBzbyBkb24ndCBkbyBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlLCByZXRocm93IHRoZSBlcnJvciBiZWNhdXNlIGl0IHdhc24ndCBoYW5kbGVkIHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90IGEgc3ludGF4IGVycm9yLCByZXRocm93IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbiBzb21lIGNhc2VzLCB5b3UgY2FuIGVuZCB1cCB3aXRoIHR3byB3aGl0ZSBzcGFjZSB0b2tlbnMgaW4gYVxuICAgICAgICAgICAgICogcm93LiBJbnN0ZWFkIG9mIG1ha2luZyBhIGNoYW5nZSBpbiBldmVyeSBmdW5jdGlvbiB0aGF0IGxvb2tzIGZvclxuICAgICAgICAgICAgICogd2hpdGUgc3BhY2UsIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBtYXRjaCBhcyBtdWNoIHdoaXRlIHNwYWNlXG4gICAgICAgICAgICAgKiBhcyBuZWNlc3NhcnkuXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF9yZWFkV2hpdGVzcGFjZVxuICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgd2hpdGUgc3BhY2UgaWYgZm91bmQsIGVtcHR5IHN0cmluZyBpZiBub3QuXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfcmVhZFdoaXRlc3BhY2U6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5TdHJlYW0gPSB0aGlzLl90b2tlblN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgd3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUodG9rZW5TdHJlYW0ubWF0Y2goVG9rZW5zLlMpKXtcbiAgICAgICAgICAgICAgICAgICAgd3MgKz0gdG9rZW5TdHJlYW0udG9rZW4oKS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd3M7XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhyb3dzIGFuIGVycm9yIHdoZW4gYW4gdW5leHBlY3RlZCB0b2tlbiBpcyBmb3VuZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlbiBUaGUgdG9rZW4gdGhhdCB3YXMgZm91bmQuXG4gICAgICAgICAgICAgKiBAbWV0aG9kIF91bmV4cGVjdGVkVG9rZW5cbiAgICAgICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdW5leHBlY3RlZFRva2VuOiBmdW5jdGlvbih0b2tlbil7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVW5leHBlY3RlZCB0b2tlbiAnXCIgKyB0b2tlbi52YWx1ZSArIFwiJyBhdCBsaW5lIFwiICsgdG9rZW4uc3RhcnRMaW5lICsgXCIsIGNvbCBcIiArIHRva2VuLnN0YXJ0Q29sICsgXCIuXCIsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBIZWxwZXIgbWV0aG9kIHVzZWQgZm9yIHBhcnNpbmcgc3VicGFydHMgb2YgYSBzdHlsZSBzaGVldC5cbiAgICAgICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAgICAgKiBAbWV0aG9kIF92ZXJpZnlFbmRcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF92ZXJpZnlFbmQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rva2VuU3RyZWFtLkxBKDEpICE9PSBUb2tlbnMuRU9GKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5leHBlY3RlZFRva2VuKHRoaXMuX3Rva2VuU3RyZWFtLkxUKDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW9uIG1ldGhvZHNcbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIF92YWxpZGF0ZVByb3BlcnR5OiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpe1xuICAgICAgICAgICAgICAgIFZhbGlkYXRpb24udmFsaWRhdGUocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIC8vIFBhcnNpbmcgbWV0aG9kc1xuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24oaW5wdXQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rva2VuU3RyZWFtID0gbmV3IFRva2VuU3RyZWFtKGlucHV0LCBUb2tlbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlc2hlZXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBhcnNlU3R5bGVTaGVldDogZnVuY3Rpb24oaW5wdXQpe1xuICAgICAgICAgICAgICAgIC8vanVzdCBwYXNzdGhyb3VnaFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGlucHV0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBhcnNlTWVkaWFRdWVyeTogZnVuY3Rpb24oaW5wdXQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rva2VuU3RyZWFtID0gbmV3IFRva2VuU3RyZWFtKGlucHV0LCBUb2tlbnMpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9tZWRpYV9xdWVyeSgpO1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGVyZSdzIGFueXRoaW5nIG1vcmUsIHRoZW4gaXQncyBhbiBpbnZhbGlkIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5RW5kKCk7XG5cbiAgICAgICAgICAgICAgICAvL290aGVyd2lzZSByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2VzIGEgcHJvcGVydHkgdmFsdWUgKGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIHNlbWljb2xvbikuXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtwYXJzZXJsaWIuY3NzLlByb3BlcnR5VmFsdWV9IFRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgICAgICAgICAqIEB0aHJvd3MgcGFyc2VybGliLnV0aWwuU3ludGF4RXJyb3IgSWYgYW4gdW5leHBlY3RlZCB0b2tlbiBpcyBmb3VuZC5cbiAgICAgICAgICAgICAqIEBtZXRob2QgcGFyc2VyUHJvcGVydHlWYWx1ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwYXJzZVByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uKGlucHV0KXtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3Rva2VuU3RyZWFtID0gbmV3IFRva2VuU3RyZWFtKGlucHV0LCBUb2tlbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZXhwcigpO1xuXG4gICAgICAgICAgICAgICAgLy9va2F5IHRvIGhhdmUgYSB0cmFpbGluZyB3aGl0ZSBzcGFjZVxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYW55dGhpbmcgbW9yZSwgdGhlbiBpdCdzIGFuIGludmFsaWQgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICB0aGlzLl92ZXJpZnlFbmQoKTtcblxuICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYXJzZXMgYSBjb21wbGV0ZSBDU1MgcnVsZSwgaW5jbHVkaW5nIHNlbGVjdG9ycyBhbmRcbiAgICAgICAgICAgICAqIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHRleHQgdG8gcGFyc2VyLlxuICAgICAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFyc2UgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgZmFsc2UgaWYgbm90LlxuICAgICAgICAgICAgICogQG1ldGhvZCBwYXJzZVJ1bGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcGFyc2VSdWxlOiBmdW5jdGlvbihpbnB1dCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9rZW5TdHJlYW0gPSBuZXcgVG9rZW5TdHJlYW0oaW5wdXQsIFRva2Vucyk7XG5cbiAgICAgICAgICAgICAgICAvL3NraXAgYW55IGxlYWRpbmcgd2hpdGUgc3BhY2VcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3J1bGVzZXQoKTtcblxuICAgICAgICAgICAgICAgIC8vc2tpcCBhbnkgdHJhaWxpbmcgd2hpdGUgc3BhY2VcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGVyZSdzIGFueXRoaW5nIG1vcmUsIHRoZW4gaXQncyBhbiBpbnZhbGlkIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgdGhpcy5fdmVyaWZ5RW5kKCk7XG5cbiAgICAgICAgICAgICAgICAvL290aGVyd2lzZSByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2VzIGEgc2luZ2xlIENTUyBzZWxlY3RvciAobm8gY29tbWEpXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHRleHQgdG8gcGFyc2UgYXMgYSBDU1Mgc2VsZWN0b3IuXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtTZWxlY3Rvcn0gQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VsZWN0b3IuXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHBhcnNlcmxpYi51dGlsLlN5bnRheEVycm9yIElmIGFuIHVuZXhwZWN0ZWQgdG9rZW4gaXMgZm91bmQuXG4gICAgICAgICAgICAgKiBAbWV0aG9kIHBhcnNlU2VsZWN0b3JcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcGFyc2VTZWxlY3RvcjogZnVuY3Rpb24oaW5wdXQpe1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdG9rZW5TdHJlYW0gPSBuZXcgVG9rZW5TdHJlYW0oaW5wdXQsIFRva2Vucyk7XG5cbiAgICAgICAgICAgICAgICAvL3NraXAgYW55IGxlYWRpbmcgd2hpdGUgc3BhY2VcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkV2hpdGVzcGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3NlbGVjdG9yKCk7XG5cbiAgICAgICAgICAgICAgICAvL3NraXAgYW55IHRyYWlsaW5nIHdoaXRlIHNwYWNlXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZFdoaXRlc3BhY2UoKTtcblxuICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhbnl0aGluZyBtb3JlLCB0aGVuIGl0J3MgYW4gaW52YWxpZCBzZWxlY3RvclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZlcmlmeUVuZCgpO1xuXG4gICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBhcnNlcyBhbiBIVE1MIHN0eWxlIGF0dHJpYnV0ZTogYSBzZXQgb2YgQ1NTIGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICogc2VwYXJhdGVkIGJ5IHNlbWljb2xvbnMuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHRleHQgdG8gcGFyc2UgYXMgYSBzdHlsZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAgICAgKiBAbWV0aG9kIHBhcnNlU3R5bGVBdHRyaWJ1dGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcGFyc2VTdHlsZUF0dHJpYnV0ZTogZnVuY3Rpb24oaW5wdXQpe1xuICAgICAgICAgICAgICAgIGlucHV0ICs9IFwifVwiOyAvLyBmb3IgZXJyb3IgcmVjb3ZlcnkgaW4gX3JlYWREZWNsYXJhdGlvbnMoKVxuICAgICAgICAgICAgICAgIHRoaXMuX3Rva2VuU3RyZWFtID0gbmV3IFRva2VuU3RyZWFtKGlucHV0LCBUb2tlbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWREZWNsYXJhdGlvbnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIC8vY29weSBvdmVyIG9udG8gcHJvdG90eXBlXG4gICAgZm9yIChwcm9wIGluIGFkZGl0aW9ucyl7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWRkaXRpb25zLCBwcm9wKSl7XG4gICAgICAgICAgICBwcm90b1twcm9wXSA9IGFkZGl0aW9uc1twcm9wXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm90bztcbn0oKTtcblxuXG4vKlxubnRoXG4gIDogUyogWyBbJy0nfCcrJ10/IElOVEVHRVI/IHtOfSBbIFMqIFsnLSd8JysnXSBTKiBJTlRFR0VSIF0/IHxcbiAgICAgICAgIFsnLSd8JysnXT8gSU5URUdFUiB8IHtPfXtEfXtEfSB8IHtFfXtWfXtFfXtOfSBdIFMqXG4gIDtcbiovXG52YXIgUHJvcGVydGllcyA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG5cbiAgICAvL0FcbiAgICBcImFsaWduLWl0ZW1zXCIgICAgICAgICAgICAgICAgICAgOiBcImZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaFwiLFxuICAgIFwiYWxpZ24tY29udGVudFwiICAgICAgICAgICAgICAgICA6IFwiZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgc3BhY2UtYmV0d2VlbiB8IHNwYWNlLWFyb3VuZCB8IHN0cmV0Y2hcIixcbiAgICBcImFsaWduLXNlbGZcIiAgICAgICAgICAgICAgICAgICAgOiBcImF1dG8gfCBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2hcIixcbiAgICBcIi13ZWJraXQtYWxpZ24taXRlbXNcIiAgICAgICAgICAgOiBcImZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaFwiLFxuICAgIFwiLXdlYmtpdC1hbGlnbi1jb250ZW50XCIgICAgICAgICA6IFwiZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgc3BhY2UtYmV0d2VlbiB8IHNwYWNlLWFyb3VuZCB8IHN0cmV0Y2hcIixcbiAgICBcIi13ZWJraXQtYWxpZ24tc2VsZlwiICAgICAgICAgICAgOiBcImF1dG8gfCBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2hcIixcbiAgICBcImFsaWdubWVudC1hZGp1c3RcIiAgICAgICAgICAgICAgOiBcImF1dG8gfCBiYXNlbGluZSB8IGJlZm9yZS1lZGdlIHwgdGV4dC1iZWZvcmUtZWRnZSB8IG1pZGRsZSB8IGNlbnRyYWwgfCBhZnRlci1lZGdlIHwgdGV4dC1hZnRlci1lZGdlIHwgaWRlb2dyYXBoaWMgfCBhbHBoYWJldGljIHwgaGFuZ2luZyB8IG1hdGhlbWF0aWNhbCB8IDxwZXJjZW50YWdlPiB8IDxsZW5ndGg+XCIsXG4gICAgXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiAgICAgICAgICAgIDogXCJiYXNlbGluZSB8IHVzZS1zY3JpcHQgfCBiZWZvcmUtZWRnZSB8IHRleHQtYmVmb3JlLWVkZ2UgfCBhZnRlci1lZGdlIHwgdGV4dC1hZnRlci1lZGdlIHwgY2VudHJhbCB8IG1pZGRsZSB8IGlkZW9ncmFwaGljIHwgYWxwaGFiZXRpYyB8IGhhbmdpbmcgfCBtYXRoZW1hdGljYWxcIixcbiAgICBcImFuaW1hdGlvblwiICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiYW5pbWF0aW9uLWRlbGF5XCIgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPHRpbWU+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCJhbmltYXRpb24tZGlyZWN0aW9uXCIgICAgICAgICAgIDogeyBtdWx0aTogXCJub3JtYWwgfCBhbHRlcm5hdGVcIiwgY29tbWE6IHRydWUgfSxcbiAgICBcImFuaW1hdGlvbi1kdXJhdGlvblwiICAgICAgICAgICAgOiB7IG11bHRpOiBcIjx0aW1lPlwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiICAgICAgICAgICA6IHsgbXVsdGk6IFwibm9uZSB8IGZvcndhcmRzIHwgYmFja3dhcmRzIHwgYm90aFwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiICAgICA6IHsgbXVsdGk6IFwiPG51bWJlcj4gfCBpbmZpbml0ZVwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiYW5pbWF0aW9uLW5hbWVcIiAgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwibm9uZSB8IDxpZGVudD5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIgICAgICAgICAgOiB7IG11bHRpOiBcInJ1bm5pbmcgfCBwYXVzZWRcIiwgY29tbWE6IHRydWUgfSxcbiAgICBcImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIiAgICAgOiAxLFxuXG4gICAgLy92ZW5kb3IgcHJlZml4ZWRcbiAgICBcIi1tb3otYW5pbWF0aW9uLWRlbGF5XCIgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPHRpbWU+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItbW96LWFuaW1hdGlvbi1kaXJlY3Rpb25cIiAgICAgICAgICAgOiB7IG11bHRpOiBcIm5vcm1hbCB8IGFsdGVybmF0ZVwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLW1vei1hbmltYXRpb24tZHVyYXRpb25cIiAgICAgICAgICAgIDogeyBtdWx0aTogXCI8dGltZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1tb3otYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiICAgICA6IHsgbXVsdGk6IFwiPG51bWJlcj4gfCBpbmZpbml0ZVwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLW1vei1hbmltYXRpb24tbmFtZVwiICAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCJub25lIHwgPGlkZW50PlwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLW1vei1hbmltYXRpb24tcGxheS1zdGF0ZVwiICAgICAgICAgIDogeyBtdWx0aTogXCJydW5uaW5nIHwgcGF1c2VkXCIsIGNvbW1hOiB0cnVlIH0sXG5cbiAgICBcIi1tcy1hbmltYXRpb24tZGVsYXlcIiAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8dGltZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1tcy1hbmltYXRpb24tZGlyZWN0aW9uXCIgICAgICAgICAgIDogeyBtdWx0aTogXCJub3JtYWwgfCBhbHRlcm5hdGVcIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1tcy1hbmltYXRpb24tZHVyYXRpb25cIiAgICAgICAgICAgIDogeyBtdWx0aTogXCI8dGltZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1tcy1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIgICAgIDogeyBtdWx0aTogXCI8bnVtYmVyPiB8IGluZmluaXRlXCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItbXMtYW5pbWF0aW9uLW5hbWVcIiAgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwibm9uZSB8IDxpZGVudD5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1tcy1hbmltYXRpb24tcGxheS1zdGF0ZVwiICAgICAgICAgIDogeyBtdWx0aTogXCJydW5uaW5nIHwgcGF1c2VkXCIsIGNvbW1hOiB0cnVlIH0sXG5cbiAgICBcIi13ZWJraXQtYW5pbWF0aW9uLWRlbGF5XCIgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPHRpbWU+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb25cIiAgICAgICAgICAgOiB7IG11bHRpOiBcIm5vcm1hbCB8IGFsdGVybmF0ZVwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb25cIiAgICAgICAgICAgIDogeyBtdWx0aTogXCI8dGltZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZVwiICAgICAgICAgICA6IHsgbXVsdGk6IFwibm9uZSB8IGZvcndhcmRzIHwgYmFja3dhcmRzIHwgYm90aFwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIgICAgIDogeyBtdWx0aTogXCI8bnVtYmVyPiB8IGluZmluaXRlXCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItd2Via2l0LWFuaW1hdGlvbi1uYW1lXCIgICAgICAgICAgICAgICAgOiB7IG11bHRpOiBcIm5vbmUgfCA8aWRlbnQ+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItd2Via2l0LWFuaW1hdGlvbi1wbGF5LXN0YXRlXCIgICAgICAgICAgOiB7IG11bHRpOiBcInJ1bm5pbmcgfCBwYXVzZWRcIiwgY29tbWE6IHRydWUgfSxcblxuICAgIFwiLW8tYW5pbWF0aW9uLWRlbGF5XCIgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPHRpbWU+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCItby1hbmltYXRpb24tZGlyZWN0aW9uXCIgICAgICAgICAgIDogeyBtdWx0aTogXCJub3JtYWwgfCBhbHRlcm5hdGVcIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1vLWFuaW1hdGlvbi1kdXJhdGlvblwiICAgICAgICAgICAgOiB7IG11bHRpOiBcIjx0aW1lPlwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLW8tYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiICAgICA6IHsgbXVsdGk6IFwiPG51bWJlcj4gfCBpbmZpbml0ZVwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiLW8tYW5pbWF0aW9uLW5hbWVcIiAgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwibm9uZSB8IDxpZGVudD5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcIi1vLWFuaW1hdGlvbi1wbGF5LXN0YXRlXCIgICAgICAgICAgOiB7IG11bHRpOiBcInJ1bm5pbmcgfCBwYXVzZWRcIiwgY29tbWE6IHRydWUgfSxcblxuICAgIFwiYXBwZWFyYW5jZVwiICAgICAgICAgICAgICAgICAgICA6IFwiaWNvbiB8IHdpbmRvdyB8IGRlc2t0b3AgfCB3b3Jrc3BhY2UgfCBkb2N1bWVudCB8IHRvb2x0aXAgfCBkaWFsb2cgfCBidXR0b24gfCBwdXNoLWJ1dHRvbiB8IGh5cGVybGluayB8IHJhZGlvIHwgcmFkaW8tYnV0dG9uIHwgY2hlY2tib3ggfCBtZW51LWl0ZW0gfCB0YWIgfCBtZW51IHwgbWVudWJhciB8IHB1bGwtZG93bi1tZW51IHwgcG9wLXVwLW1lbnUgfCBsaXN0LW1lbnUgfCByYWRpby1ncm91cCB8IGNoZWNrYm94LWdyb3VwIHwgb3V0bGluZS10cmVlIHwgcmFuZ2UgfCBmaWVsZCB8IGNvbWJvLWJveCB8IHNpZ25hdHVyZSB8IHBhc3N3b3JkIHwgbm9ybWFsIHwgbm9uZSB8IGluaGVyaXRcIixcbiAgICBcImF6aW11dGhcIiAgICAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgc2ltcGxlICAgICAgPSBcIjxhbmdsZT4gfCBsZWZ0d2FyZHMgfCByaWdodHdhcmRzIHwgaW5oZXJpdFwiLFxuICAgICAgICAgICAgZGlyZWN0aW9uICAgPSBcImxlZnQtc2lkZSB8IGZhci1sZWZ0IHwgbGVmdCB8IGNlbnRlci1sZWZ0IHwgY2VudGVyIHwgY2VudGVyLXJpZ2h0IHwgcmlnaHQgfCBmYXItcmlnaHQgfCByaWdodC1zaWRlXCIsXG4gICAgICAgICAgICBiZWhpbmQgICAgICA9IGZhbHNlLFxuICAgICAgICAgICAgdmFsaWQgICAgICAgPSBmYWxzZSxcbiAgICAgICAgICAgIHBhcnQ7XG5cbiAgICAgICAgaWYgKCFWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgc2ltcGxlKSkge1xuICAgICAgICAgICAgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImJlaGluZFwiKSkge1xuICAgICAgICAgICAgICAgIGJlaGluZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIGRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCFiZWhpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIFwiYmVoaW5kXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIGVuZCBvZiB2YWx1ZSBidXQgZm91bmQgJ1wiICsgcGFydCArIFwiJy5cIiwgcGFydC5saW5lLCBwYXJ0LmNvbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCAoPCdhemltdXRoJz4pIGJ1dCBmb3VuZCAnXCIgKyBwYXJ0ICsgXCInLlwiLCBwYXJ0LmxpbmUsIHBhcnQuY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvL0JcbiAgICBcImJhY2tmYWNlLXZpc2liaWxpdHlcIiAgICAgICAgICAgOiBcInZpc2libGUgfCBoaWRkZW5cIixcbiAgICBcImJhY2tncm91bmRcIiAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiYmFja2dyb3VuZC1hdHRhY2htZW50XCIgICAgICAgICA6IHsgbXVsdGk6IFwiPGF0dGFjaG1lbnQ+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCJiYWNrZ3JvdW5kLWNsaXBcIiAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8Ym94PlwiLCBjb21tYTogdHJ1ZSB9LFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiICAgICAgICAgICAgICA6IFwiPGNvbG9yPiB8IGluaGVyaXRcIixcbiAgICBcImJhY2tncm91bmQtaW1hZ2VcIiAgICAgICAgICAgICAgOiB7IG11bHRpOiBcIjxiZy1pbWFnZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcImJhY2tncm91bmQtb3JpZ2luXCIgICAgICAgICAgICAgOiB7IG11bHRpOiBcIjxib3g+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIgICAgICAgICAgIDogeyBtdWx0aTogXCI8YmctcG9zaXRpb24+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8cmVwZWF0LXN0eWxlPlwiIH0sXG4gICAgXCJiYWNrZ3JvdW5kLXNpemVcIiAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8Ymctc2l6ZT5cIiwgY29tbWE6IHRydWUgfSxcbiAgICBcImJhc2VsaW5lLXNoaWZ0XCIgICAgICAgICAgICAgICAgOiBcImJhc2VsaW5lIHwgc3ViIHwgc3VwZXIgfCA8cGVyY2VudGFnZT4gfCA8bGVuZ3RoPlwiLFxuICAgIFwiYmVoYXZpb3JcIiAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJiaW5kaW5nXCIgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImJsZWVkXCIgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+XCIsXG4gICAgXCJib29rbWFyay1sYWJlbFwiICAgICAgICAgICAgICAgIDogXCI8Y29udGVudD4gfCA8YXR0cj4gfCA8c3RyaW5nPlwiLFxuICAgIFwiYm9va21hcmstbGV2ZWxcIiAgICAgICAgICAgICAgICA6IFwibm9uZSB8IDxpbnRlZ2VyPlwiLFxuICAgIFwiYm9va21hcmstc3RhdGVcIiAgICAgICAgICAgICAgICA6IFwib3BlbiB8IGNsb3NlZFwiLFxuICAgIFwiYm9va21hcmstdGFyZ2V0XCIgICAgICAgICAgICAgICA6IFwibm9uZSB8IDx1cmk+IHwgPGF0dHI+XCIsXG4gICAgXCJib3JkZXJcIiAgICAgICAgICAgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPiB8fCA8Ym9yZGVyLXN0eWxlPiB8fCA8Y29sb3I+XCIsXG4gICAgXCJib3JkZXItYm90dG9tXCIgICAgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPiB8fCA8Ym9yZGVyLXN0eWxlPiB8fCA8Y29sb3I+XCIsXG4gICAgXCJib3JkZXItYm90dG9tLWNvbG9yXCIgICAgICAgICAgIDogXCI8Y29sb3I+IHwgaW5oZXJpdFwiLFxuICAgIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiICAgICA6ICBcIjx4LW9uZS1yYWRpdXM+XCIsXG4gICAgXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c1wiICAgIDogIFwiPHgtb25lLXJhZGl1cz5cIixcbiAgICBcImJvcmRlci1ib3R0b20tc3R5bGVcIiAgICAgICAgICAgOiBcIjxib3JkZXItc3R5bGU+XCIsXG4gICAgXCJib3JkZXItYm90dG9tLXdpZHRoXCIgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPlwiLFxuICAgIFwiYm9yZGVyLWNvbGxhcHNlXCIgICAgICAgICAgICAgICA6IFwiY29sbGFwc2UgfCBzZXBhcmF0ZSB8IGluaGVyaXRcIixcbiAgICBcImJvcmRlci1jb2xvclwiICAgICAgICAgICAgICAgICAgOiB7IG11bHRpOiBcIjxjb2xvcj4gfCBpbmhlcml0XCIsIG1heDogNCB9LFxuICAgIFwiYm9yZGVyLWltYWdlXCIgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJib3JkZXItaW1hZ2Utb3V0c2V0XCIgICAgICAgICAgIDogeyBtdWx0aTogXCI8bGVuZ3RoPiB8IDxudW1iZXI+XCIsIG1heDogNCB9LFxuICAgIFwiYm9yZGVyLWltYWdlLXJlcGVhdFwiICAgICAgICAgICA6IHsgbXVsdGk6IFwic3RyZXRjaCB8IHJlcGVhdCB8IHJvdW5kXCIsIG1heDogMiB9LFxuICAgIFwiYm9yZGVyLWltYWdlLXNsaWNlXCIgICAgICAgICAgICA6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcblxuICAgICAgICB2YXIgdmFsaWQgICA9IGZhbHNlLFxuICAgICAgICAgICAgbnVtZXJpYyA9IFwiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5cIixcbiAgICAgICAgICAgIGZpbGwgICAgPSBmYWxzZSxcbiAgICAgICAgICAgIGNvdW50ICAgPSAwLFxuICAgICAgICAgICAgbWF4ICAgICA9IDQsXG4gICAgICAgICAgICBwYXJ0O1xuXG4gICAgICAgIGlmIChWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgXCJmaWxsXCIpKSB7XG4gICAgICAgICAgICBmaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChleHByZXNzaW9uLmhhc05leHQoKSAmJiBjb3VudCA8IG1heCkge1xuICAgICAgICAgICAgdmFsaWQgPSBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgbnVtZXJpYyk7XG4gICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoIWZpbGwpIHtcbiAgICAgICAgICAgIFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImZpbGxcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgIHBhcnQgPSBleHByZXNzaW9uLm5leHQoKTtcbiAgICAgICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCBlbmQgb2YgdmFsdWUgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFwiRXhwZWN0ZWQgKFs8bnVtYmVyPiB8IDxwZXJjZW50YWdlPl17MSw0fSAmJiBmaWxsPykgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImJvcmRlci1pbWFnZS1zb3VyY2VcIiAgICAgICAgICAgOiBcIjxpbWFnZT4gfCBub25lXCIsXG4gICAgXCJib3JkZXItaW1hZ2Utd2lkdGhcIiAgICAgICAgICAgIDogeyBtdWx0aTogXCI8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPiB8IDxudW1iZXI+IHwgYXV0b1wiLCBtYXg6IDQgfSxcbiAgICBcImJvcmRlci1sZWZ0XCIgICAgICAgICAgICAgICAgICAgOiBcIjxib3JkZXItd2lkdGg+IHx8IDxib3JkZXItc3R5bGU+IHx8IDxjb2xvcj5cIixcbiAgICBcImJvcmRlci1sZWZ0LWNvbG9yXCIgICAgICAgICAgICAgOiBcIjxjb2xvcj4gfCBpbmhlcml0XCIsXG4gICAgXCJib3JkZXItbGVmdC1zdHlsZVwiICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXN0eWxlPlwiLFxuICAgIFwiYm9yZGVyLWxlZnQtd2lkdGhcIiAgICAgICAgICAgICA6IFwiPGJvcmRlci13aWR0aD5cIixcbiAgICBcImJvcmRlci1yYWRpdXNcIiAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG5cbiAgICAgICAgdmFyIHZhbGlkICAgPSBmYWxzZSxcbiAgICAgICAgICAgIHNpbXBsZSA9IFwiPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCBpbmhlcml0XCIsXG4gICAgICAgICAgICBzbGFzaCAgID0gZmFsc2UsXG4gICAgICAgICAgICBjb3VudCAgID0gMCxcbiAgICAgICAgICAgIG1heCAgICAgPSA4LFxuICAgICAgICAgICAgcGFydDtcblxuICAgICAgICB3aGlsZSAoZXhwcmVzc2lvbi5oYXNOZXh0KCkgJiYgY291bnQgPCBtYXgpIHtcbiAgICAgICAgICAgIHZhbGlkID0gVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHNpbXBsZSk7XG4gICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoU3RyaW5nKGV4cHJlc3Npb24ucGVlaygpKSA9PT0gXCIvXCIgJiYgY291bnQgPiAwICYmICFzbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzbGFzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNvdW50ICsgNTtcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5uZXh0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIGVuZCBvZiB2YWx1ZSBidXQgZm91bmQgJ1wiICsgcGFydCArIFwiJy5cIiwgcGFydC5saW5lLCBwYXJ0LmNvbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCAoPCdib3JkZXItcmFkaXVzJz4pIGJ1dCBmb3VuZCAnXCIgKyBwYXJ0ICsgXCInLlwiLCBwYXJ0LmxpbmUsIHBhcnQuY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJib3JkZXItcmlnaHRcIiAgICAgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPiB8fCA8Ym9yZGVyLXN0eWxlPiB8fCA8Y29sb3I+XCIsXG4gICAgXCJib3JkZXItcmlnaHQtY29sb3JcIiAgICAgICAgICAgIDogXCI8Y29sb3I+IHwgaW5oZXJpdFwiLFxuICAgIFwiYm9yZGVyLXJpZ2h0LXN0eWxlXCIgICAgICAgICAgICA6IFwiPGJvcmRlci1zdHlsZT5cIixcbiAgICBcImJvcmRlci1yaWdodC13aWR0aFwiICAgICAgICAgICAgOiBcIjxib3JkZXItd2lkdGg+XCIsXG4gICAgXCJib3JkZXItc3BhY2luZ1wiICAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8bGVuZ3RoPiB8IGluaGVyaXRcIiwgbWF4OiAyIH0sXG4gICAgXCJib3JkZXItc3R5bGVcIiAgICAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8Ym9yZGVyLXN0eWxlPlwiLCBtYXg6IDQgfSxcbiAgICBcImJvcmRlci10b3BcIiAgICAgICAgICAgICAgICAgICAgOiBcIjxib3JkZXItd2lkdGg+IHx8IDxib3JkZXItc3R5bGU+IHx8IDxjb2xvcj5cIixcbiAgICBcImJvcmRlci10b3AtY29sb3JcIiAgICAgICAgICAgICAgOiBcIjxjb2xvcj4gfCBpbmhlcml0XCIsXG4gICAgXCJib3JkZXItdG9wLWxlZnQtcmFkaXVzXCIgICAgICAgIDogXCI8eC1vbmUtcmFkaXVzPlwiLFxuICAgIFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXNcIiAgICAgICA6IFwiPHgtb25lLXJhZGl1cz5cIixcbiAgICBcImJvcmRlci10b3Atc3R5bGVcIiAgICAgICAgICAgICAgOiBcIjxib3JkZXItc3R5bGU+XCIsXG4gICAgXCJib3JkZXItdG9wLXdpZHRoXCIgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPlwiLFxuICAgIFwiYm9yZGVyLXdpZHRoXCIgICAgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPGJvcmRlci13aWR0aD5cIiwgbWF4OiA0IH0sXG4gICAgXCJib3R0b21cIiAgICAgICAgICAgICAgICAgICAgICAgIDogXCI8bWFyZ2luLXdpZHRoPiB8IGluaGVyaXRcIixcbiAgICBcIi1tb3otYm94LWFsaWduXCIgICAgICAgICAgICAgICAgOiBcInN0YXJ0IHwgZW5kIHwgY2VudGVyIHwgYmFzZWxpbmUgfCBzdHJldGNoXCIsXG4gICAgXCItbW96LWJveC1kZWNvcmF0aW9uLWJyZWFrXCIgICAgIDogXCJzbGljZSB8Y2xvbmVcIixcbiAgICBcIi1tb3otYm94LWRpcmVjdGlvblwiICAgICAgICAgICAgOiBcIm5vcm1hbCB8IHJldmVyc2UgfCBpbmhlcml0XCIsXG4gICAgXCItbW96LWJveC1mbGV4XCIgICAgICAgICAgICAgICAgIDogXCI8bnVtYmVyPlwiLFxuICAgIFwiLW1vei1ib3gtZmxleC1ncm91cFwiICAgICAgICAgICA6IFwiPGludGVnZXI+XCIsXG4gICAgXCItbW96LWJveC1saW5lc1wiICAgICAgICAgICAgICAgIDogXCJzaW5nbGUgfCBtdWx0aXBsZVwiLFxuICAgIFwiLW1vei1ib3gtb3JkaW5hbC1ncm91cFwiICAgICAgICA6IFwiPGludGVnZXI+XCIsXG4gICAgXCItbW96LWJveC1vcmllbnRcIiAgICAgICAgICAgICAgIDogXCJob3Jpem9udGFsIHwgdmVydGljYWwgfCBpbmxpbmUtYXhpcyB8IGJsb2NrLWF4aXMgfCBpbmhlcml0XCIsXG4gICAgXCItbW96LWJveC1wYWNrXCIgICAgICAgICAgICAgICAgIDogXCJzdGFydCB8IGVuZCB8IGNlbnRlciB8IGp1c3RpZnlcIixcbiAgICBcIi1vLWJveC1kZWNvcmF0aW9uLWJyZWFrXCIgICAgICAgOiBcInNsaWNlIHwgY2xvbmVcIixcbiAgICBcIi13ZWJraXQtYm94LWFsaWduXCIgICAgICAgICAgICAgOiBcInN0YXJ0IHwgZW5kIHwgY2VudGVyIHwgYmFzZWxpbmUgfCBzdHJldGNoXCIsXG4gICAgXCItd2Via2l0LWJveC1kZWNvcmF0aW9uLWJyZWFrXCIgIDogXCJzbGljZSB8Y2xvbmVcIixcbiAgICBcIi13ZWJraXQtYm94LWRpcmVjdGlvblwiICAgICAgICAgOiBcIm5vcm1hbCB8IHJldmVyc2UgfCBpbmhlcml0XCIsXG4gICAgXCItd2Via2l0LWJveC1mbGV4XCIgICAgICAgICAgICAgIDogXCI8bnVtYmVyPlwiLFxuICAgIFwiLXdlYmtpdC1ib3gtZmxleC1ncm91cFwiICAgICAgICA6IFwiPGludGVnZXI+XCIsXG4gICAgXCItd2Via2l0LWJveC1saW5lc1wiICAgICAgICAgICAgIDogXCJzaW5nbGUgfCBtdWx0aXBsZVwiLFxuICAgIFwiLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cFwiICAgICA6IFwiPGludGVnZXI+XCIsXG4gICAgXCItd2Via2l0LWJveC1vcmllbnRcIiAgICAgICAgICAgIDogXCJob3Jpem9udGFsIHwgdmVydGljYWwgfCBpbmxpbmUtYXhpcyB8IGJsb2NrLWF4aXMgfCBpbmhlcml0XCIsXG4gICAgXCItd2Via2l0LWJveC1wYWNrXCIgICAgICAgICAgICAgIDogXCJzdGFydCB8IGVuZCB8IGNlbnRlciB8IGp1c3RpZnlcIixcbiAgICBcImJveC1kZWNvcmF0aW9uLWJyZWFrXCIgICAgICAgICAgOiBcInNsaWNlIHwgY2xvbmVcIixcbiAgICBcImJveC1zaGFkb3dcIiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgcGFydDtcblxuICAgICAgICBpZiAoIVZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcIm5vbmVcIikpIHtcbiAgICAgICAgICAgIFZhbGlkYXRpb24ubXVsdGlQcm9wZXJ0eShcIjxzaGFkb3c+XCIsIGV4cHJlc3Npb24sIHRydWUsIEluZmluaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBleHByZXNzaW9uLm5leHQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFwiRXhwZWN0ZWQgZW5kIG9mIHZhbHVlIGJ1dCBmb3VuZCAnXCIgKyBwYXJ0ICsgXCInLlwiLCBwYXJ0LmxpbmUsIHBhcnQuY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJib3gtc2l6aW5nXCIgICAgICAgICAgICAgICAgICAgIDogXCJjb250ZW50LWJveCB8IGJvcmRlci1ib3ggfCBpbmhlcml0XCIsXG4gICAgXCJicmVhay1hZnRlclwiICAgICAgICAgICAgICAgICAgIDogXCJhdXRvIHwgYWx3YXlzIHwgYXZvaWQgfCBsZWZ0IHwgcmlnaHQgfCBwYWdlIHwgY29sdW1uIHwgYXZvaWQtcGFnZSB8IGF2b2lkLWNvbHVtblwiLFxuICAgIFwiYnJlYWstYmVmb3JlXCIgICAgICAgICAgICAgICAgICA6IFwiYXV0byB8IGFsd2F5cyB8IGF2b2lkIHwgbGVmdCB8IHJpZ2h0IHwgcGFnZSB8IGNvbHVtbiB8IGF2b2lkLXBhZ2UgfCBhdm9pZC1jb2x1bW5cIixcbiAgICBcImJyZWFrLWluc2lkZVwiICAgICAgICAgICAgICAgICAgOiBcImF1dG8gfCBhdm9pZCB8IGF2b2lkLXBhZ2UgfCBhdm9pZC1jb2x1bW5cIixcblxuICAgIC8vQ1xuICAgIFwiY2FwdGlvbi1zaWRlXCIgICAgICAgICAgICAgICAgICA6IFwidG9wIHwgYm90dG9tIHwgaW5oZXJpdFwiLFxuICAgIFwiY2xlYXJcIiAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZSB8IHJpZ2h0IHwgbGVmdCB8IGJvdGggfCBpbmhlcml0XCIsXG4gICAgXCJjbGlwXCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImNvbG9yXCIgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxjb2xvcj4gfCBpbmhlcml0XCIsXG4gICAgXCJjb2xvci1wcm9maWxlXCIgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImNvbHVtbi1jb3VudFwiICAgICAgICAgICAgICAgICAgOiBcIjxpbnRlZ2VyPiB8IGF1dG9cIiwgICAgICAgICAgICAgICAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLW11bHRpY29sL1xuICAgIFwiY29sdW1uLWZpbGxcIiAgICAgICAgICAgICAgICAgICA6IFwiYXV0byB8IGJhbGFuY2VcIixcbiAgICBcImNvbHVtbi1nYXBcIiAgICAgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+IHwgbm9ybWFsXCIsXG4gICAgXCJjb2x1bW4tcnVsZVwiICAgICAgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPiB8fCA8Ym9yZGVyLXN0eWxlPiB8fCA8Y29sb3I+XCIsXG4gICAgXCJjb2x1bW4tcnVsZS1jb2xvclwiICAgICAgICAgICAgIDogXCI8Y29sb3I+XCIsXG4gICAgXCJjb2x1bW4tcnVsZS1zdHlsZVwiICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXN0eWxlPlwiLFxuICAgIFwiY29sdW1uLXJ1bGUtd2lkdGhcIiAgICAgICAgICAgICA6IFwiPGJvcmRlci13aWR0aD5cIixcbiAgICBcImNvbHVtbi1zcGFuXCIgICAgICAgICAgICAgICAgICAgOiBcIm5vbmUgfCBhbGxcIixcbiAgICBcImNvbHVtbi13aWR0aFwiICAgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+IHwgYXV0b1wiLFxuICAgIFwiY29sdW1uc1wiICAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJjb250ZW50XCIgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImNvdW50ZXItaW5jcmVtZW50XCIgICAgICAgICAgICAgOiAxLFxuICAgIFwiY291bnRlci1yZXNldFwiICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJjcm9wXCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCI8c2hhcGU+IHwgYXV0b1wiLFxuICAgIFwiY3VlXCIgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiY3VlLWFmdGVyIHwgY3VlLWJlZm9yZSB8IGluaGVyaXRcIixcbiAgICBcImN1ZS1hZnRlclwiICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiY3VlLWJlZm9yZVwiICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJjdXJzb3JcIiAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcblxuICAgIC8vRFxuICAgIFwiZGlyZWN0aW9uXCIgICAgICAgICAgICAgICAgICAgICA6IFwibHRyIHwgcnRsIHwgaW5oZXJpdFwiLFxuICAgIFwiZGlzcGxheVwiICAgICAgICAgICAgICAgICAgICAgICA6IFwiaW5saW5lIHwgYmxvY2sgfCBsaXN0LWl0ZW0gfCBpbmxpbmUtYmxvY2sgfCB0YWJsZSB8IGlubGluZS10YWJsZSB8IHRhYmxlLXJvdy1ncm91cCB8IHRhYmxlLWhlYWRlci1ncm91cCB8IHRhYmxlLWZvb3Rlci1ncm91cCB8IHRhYmxlLXJvdyB8IHRhYmxlLWNvbHVtbi1ncm91cCB8IHRhYmxlLWNvbHVtbiB8IHRhYmxlLWNlbGwgfCB0YWJsZS1jYXB0aW9uIHwgZ3JpZCB8IGlubGluZS1ncmlkIHwgcnVuLWluIHwgcnVieSB8IHJ1YnktYmFzZSB8IHJ1YnktdGV4dCB8IHJ1YnktYmFzZS1jb250YWluZXIgfCBydWJ5LXRleHQtY29udGFpbmVyIHwgY29udGVudHMgfCBub25lIHwgaW5oZXJpdCB8IC1tb3otYm94IHwgLW1vei1pbmxpbmUtYmxvY2sgfCAtbW96LWlubGluZS1ib3ggfCAtbW96LWlubGluZS1ncmlkIHwgLW1vei1pbmxpbmUtc3RhY2sgfCAtbW96LWlubGluZS10YWJsZSB8IC1tb3otZ3JpZCB8IC1tb3otZ3JpZC1ncm91cCB8IC1tb3otZ3JpZC1saW5lIHwgLW1vei1ncm91cGJveCB8IC1tb3otZGVjayB8IC1tb3otcG9wdXAgfCAtbW96LXN0YWNrIHwgLW1vei1tYXJrZXIgfCAtd2Via2l0LWJveCB8IC13ZWJraXQtaW5saW5lLWJveCB8IC1tcy1mbGV4Ym94IHwgLW1zLWlubGluZS1mbGV4Ym94IHwgZmxleCB8IC13ZWJraXQtZmxleCB8IGlubGluZS1mbGV4IHwgLXdlYmtpdC1pbmxpbmUtZmxleFwiLFxuICAgIFwiZG9taW5hbnQtYmFzZWxpbmVcIiAgICAgICAgICAgICA6IDEsXG4gICAgXCJkcm9wLWluaXRpYWwtYWZ0ZXItYWRqdXN0XCIgICAgIDogXCJjZW50cmFsIHwgbWlkZGxlIHwgYWZ0ZXItZWRnZSB8IHRleHQtYWZ0ZXItZWRnZSB8IGlkZW9ncmFwaGljIHwgYWxwaGFiZXRpYyB8IG1hdGhlbWF0aWNhbCB8IDxwZXJjZW50YWdlPiB8IDxsZW5ndGg+XCIsXG4gICAgXCJkcm9wLWluaXRpYWwtYWZ0ZXItYWxpZ25cIiAgICAgIDogXCJiYXNlbGluZSB8IHVzZS1zY3JpcHQgfCBiZWZvcmUtZWRnZSB8IHRleHQtYmVmb3JlLWVkZ2UgfCBhZnRlci1lZGdlIHwgdGV4dC1hZnRlci1lZGdlIHwgY2VudHJhbCB8IG1pZGRsZSB8IGlkZW9ncmFwaGljIHwgYWxwaGFiZXRpYyB8IGhhbmdpbmcgfCBtYXRoZW1hdGljYWxcIixcbiAgICBcImRyb3AtaW5pdGlhbC1iZWZvcmUtYWRqdXN0XCIgICAgOiBcImJlZm9yZS1lZGdlIHwgdGV4dC1iZWZvcmUtZWRnZSB8IGNlbnRyYWwgfCBtaWRkbGUgfCBoYW5naW5nIHwgbWF0aGVtYXRpY2FsIHwgPHBlcmNlbnRhZ2U+IHwgPGxlbmd0aD5cIixcbiAgICBcImRyb3AtaW5pdGlhbC1iZWZvcmUtYWxpZ25cIiAgICAgOiBcImNhcHMtaGVpZ2h0IHwgYmFzZWxpbmUgfCB1c2Utc2NyaXB0IHwgYmVmb3JlLWVkZ2UgfCB0ZXh0LWJlZm9yZS1lZGdlIHwgYWZ0ZXItZWRnZSB8IHRleHQtYWZ0ZXItZWRnZSB8IGNlbnRyYWwgfCBtaWRkbGUgfCBpZGVvZ3JhcGhpYyB8IGFscGhhYmV0aWMgfCBoYW5naW5nIHwgbWF0aGVtYXRpY2FsXCIsXG4gICAgXCJkcm9wLWluaXRpYWwtc2l6ZVwiICAgICAgICAgICAgIDogXCJhdXRvIHwgbGluZSB8IDxsZW5ndGg+IHwgPHBlcmNlbnRhZ2U+XCIsXG4gICAgXCJkcm9wLWluaXRpYWwtdmFsdWVcIiAgICAgICAgICAgIDogXCJpbml0aWFsIHwgPGludGVnZXI+XCIsXG5cbiAgICAvL0VcbiAgICBcImVsZXZhdGlvblwiICAgICAgICAgICAgICAgICAgICAgOiBcIjxhbmdsZT4gfCBiZWxvdyB8IGxldmVsIHwgYWJvdmUgfCBoaWdoZXIgfCBsb3dlciB8IGluaGVyaXRcIixcbiAgICBcImVtcHR5LWNlbGxzXCIgICAgICAgICAgICAgICAgICAgOiBcInNob3cgfCBoaWRlIHwgaW5oZXJpdFwiLFxuXG4gICAgLy9GXG4gICAgXCJmaWx0ZXJcIiAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImZpdFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImZpbGwgfCBoaWRkZW4gfCBtZWV0IHwgc2xpY2VcIixcbiAgICBcImZpdC1wb3NpdGlvblwiICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZmxleFwiICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiPGZsZXg+XCIsXG4gICAgXCJmbGV4LWJhc2lzXCIgICAgICAgICAgICAgICAgICAgIDogXCI8d2lkdGg+XCIsXG4gICAgXCJmbGV4LWRpcmVjdGlvblwiICAgICAgICAgICAgICAgIDogXCJyb3cgfCByb3ctcmV2ZXJzZSB8IGNvbHVtbiB8IGNvbHVtbi1yZXZlcnNlXCIsXG4gICAgXCJmbGV4LWZsb3dcIiAgICAgICAgICAgICAgICAgICAgIDogXCI8ZmxleC1kaXJlY3Rpb24+IHx8IDxmbGV4LXdyYXA+XCIsXG4gICAgXCJmbGV4LWdyb3dcIiAgICAgICAgICAgICAgICAgICAgIDogXCI8bnVtYmVyPlwiLFxuICAgIFwiZmxleC1zaHJpbmtcIiAgICAgICAgICAgICAgICAgICA6IFwiPG51bWJlcj5cIixcbiAgICBcImZsZXgtd3JhcFwiICAgICAgICAgICAgICAgICAgICAgOiBcIm5vd3JhcCB8IHdyYXAgfCB3cmFwLXJldmVyc2VcIixcbiAgICBcIi13ZWJraXQtZmxleFwiICAgICAgICAgICAgICAgICAgOiBcIjxmbGV4PlwiLFxuICAgIFwiLXdlYmtpdC1mbGV4LWJhc2lzXCIgICAgICAgICAgICA6IFwiPHdpZHRoPlwiLFxuICAgIFwiLXdlYmtpdC1mbGV4LWRpcmVjdGlvblwiICAgICAgICA6IFwicm93IHwgcm93LXJldmVyc2UgfCBjb2x1bW4gfCBjb2x1bW4tcmV2ZXJzZVwiLFxuICAgIFwiLXdlYmtpdC1mbGV4LWZsb3dcIiAgICAgICAgICAgICA6IFwiPGZsZXgtZGlyZWN0aW9uPiB8fCA8ZmxleC13cmFwPlwiLFxuICAgIFwiLXdlYmtpdC1mbGV4LWdyb3dcIiAgICAgICAgICAgICA6IFwiPG51bWJlcj5cIixcbiAgICBcIi13ZWJraXQtZmxleC1zaHJpbmtcIiAgICAgICAgICAgOiBcIjxudW1iZXI+XCIsXG4gICAgXCItd2Via2l0LWZsZXgtd3JhcFwiICAgICAgICAgICAgIDogXCJub3dyYXAgfCB3cmFwIHwgd3JhcC1yZXZlcnNlXCIsXG4gICAgXCItbXMtZmxleFwiICAgICAgICAgICAgICAgICAgICAgIDogXCI8ZmxleD5cIixcbiAgICBcIi1tcy1mbGV4LWFsaWduXCIgICAgICAgICAgICAgICAgOiBcInN0YXJ0IHwgZW5kIHwgY2VudGVyIHwgc3RyZXRjaCB8IGJhc2VsaW5lXCIsXG4gICAgXCItbXMtZmxleC1kaXJlY3Rpb25cIiAgICAgICAgICAgIDogXCJyb3cgfCByb3ctcmV2ZXJzZSB8IGNvbHVtbiB8IGNvbHVtbi1yZXZlcnNlIHwgaW5oZXJpdFwiLFxuICAgIFwiLW1zLWZsZXgtb3JkZXJcIiAgICAgICAgICAgICAgICA6IFwiPG51bWJlcj5cIixcbiAgICBcIi1tcy1mbGV4LXBhY2tcIiAgICAgICAgICAgICAgICAgOiBcInN0YXJ0IHwgZW5kIHwgY2VudGVyIHwganVzdGlmeVwiLFxuICAgIFwiLW1zLWZsZXgtd3JhcFwiICAgICAgICAgICAgICAgICA6IFwibm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZVwiLFxuICAgIFwiZmxvYXRcIiAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibGVmdCB8IHJpZ2h0IHwgbm9uZSB8IGluaGVyaXRcIixcbiAgICBcImZsb2F0LW9mZnNldFwiICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZm9udFwiICAgICAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJmb250LWZhbWlseVwiICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImZvbnQtZmVhdHVyZS1zZXR0aW5nc1wiICAgICAgICAgOiBcIjxmZWF0dXJlLXRhZy12YWx1ZT4gfCBub3JtYWwgfCBpbmhlcml0XCIsXG4gICAgXCJmb250LWtlcm5pbmdcIiAgICAgICAgICAgICAgICAgIDogXCJhdXRvIHwgbm9ybWFsIHwgbm9uZSB8IGluaXRpYWwgfCBpbmhlcml0IHwgdW5zZXRcIixcbiAgICBcImZvbnQtc2l6ZVwiICAgICAgICAgICAgICAgICAgICAgOiBcIjxhYnNvbHV0ZS1zaXplPiB8IDxyZWxhdGl2ZS1zaXplPiB8IDxsZW5ndGg+IHwgPHBlcmNlbnRhZ2U+IHwgaW5oZXJpdFwiLFxuICAgIFwiZm9udC1zaXplLWFkanVzdFwiICAgICAgICAgICAgICA6IFwiPG51bWJlcj4gfCBub25lIHwgaW5oZXJpdFwiLFxuICAgIFwiZm9udC1zdHJldGNoXCIgICAgICAgICAgICAgICAgICA6IFwibm9ybWFsIHwgdWx0cmEtY29uZGVuc2VkIHwgZXh0cmEtY29uZGVuc2VkIHwgY29uZGVuc2VkIHwgc2VtaS1jb25kZW5zZWQgfCBzZW1pLWV4cGFuZGVkIHwgZXhwYW5kZWQgfCBleHRyYS1leHBhbmRlZCB8IHVsdHJhLWV4cGFuZGVkIHwgaW5oZXJpdFwiLFxuICAgIFwiZm9udC1zdHlsZVwiICAgICAgICAgICAgICAgICAgICA6IFwibm9ybWFsIHwgaXRhbGljIHwgb2JsaXF1ZSB8IGluaGVyaXRcIixcbiAgICBcImZvbnQtdmFyaWFudFwiICAgICAgICAgICAgICAgICAgOiBcIm5vcm1hbCB8IHNtYWxsLWNhcHMgfCBpbmhlcml0XCIsXG4gICAgXCJmb250LXZhcmlhbnQtY2Fwc1wiICAgICAgICAgICAgIDogXCJub3JtYWwgfCBzbWFsbC1jYXBzIHwgYWxsLXNtYWxsLWNhcHMgfCBwZXRpdGUtY2FwcyB8IGFsbC1wZXRpdGUtY2FwcyB8IHVuaWNhc2UgfCB0aXRsaW5nLWNhcHNcIixcbiAgICBcImZvbnQtdmFyaWFudC1wb3NpdGlvblwiICAgICAgICAgOiBcIm5vcm1hbCB8IHN1YiB8IHN1cGVyIHwgaW5oZXJpdCB8IGluaXRpYWwgfCB1bnNldFwiLFxuICAgIFwiZm9udC13ZWlnaHRcIiAgICAgICAgICAgICAgICAgICA6IFwibm9ybWFsIHwgYm9sZCB8IGJvbGRlciB8IGxpZ2h0ZXIgfCAxMDAgfCAyMDAgfCAzMDAgfCA0MDAgfCA1MDAgfCA2MDAgfCA3MDAgfCA4MDAgfCA5MDAgfCBpbmhlcml0XCIsXG5cbiAgICAvL0dcbiAgICBcImdyaWRcIiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1hcmVhXCIgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLWF1dG8tY29sdW1uc1wiICAgICAgICAgICAgIDogMSxcbiAgICBcImdyaWQtYXV0by1mbG93XCIgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1hdXRvLXBvc2l0aW9uXCIgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLWF1dG8tcm93c1wiICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImdyaWQtY2VsbC1zdGFja2luZ1wiICAgICAgICAgICAgOiBcImNvbHVtbnMgfCByb3dzIHwgbGF5ZXJcIixcbiAgICBcImdyaWQtY29sdW1uXCIgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1jb2x1bW5zXCIgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLWNvbHVtbi1hbGlnblwiICAgICAgICAgICAgIDogXCJzdGFydCB8IGVuZCB8IGNlbnRlciB8IHN0cmV0Y2hcIixcbiAgICBcImdyaWQtY29sdW1uLXNpemluZ1wiICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1jb2x1bW4tc3RhcnRcIiAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLWNvbHVtbi1lbmRcIiAgICAgICAgICAgICAgIDogMSxcbiAgICBcImdyaWQtY29sdW1uLXNwYW5cIiAgICAgICAgICAgICAgOiBcIjxpbnRlZ2VyPlwiLFxuICAgIFwiZ3JpZC1mbG93XCIgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZSB8IHJvd3MgfCBjb2x1bW5zXCIsXG4gICAgXCJncmlkLWxheWVyXCIgICAgICAgICAgICAgICAgICAgIDogXCI8aW50ZWdlcj5cIixcbiAgICBcImdyaWQtcm93XCIgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1yb3dzXCIgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLXJvdy1hbGlnblwiICAgICAgICAgICAgICAgIDogXCJzdGFydCB8IGVuZCB8IGNlbnRlciB8IHN0cmV0Y2hcIixcbiAgICBcImdyaWQtcm93LXN0YXJ0XCIgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC1yb3ctZW5kXCIgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLXJvdy1zcGFuXCIgICAgICAgICAgICAgICAgIDogXCI8aW50ZWdlcj5cIixcbiAgICBcImdyaWQtcm93LXNpemluZ1wiICAgICAgICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC10ZW1wbGF0ZVwiICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJncmlkLXRlbXBsYXRlLWFyZWFzXCIgICAgICAgICAgIDogMSxcbiAgICBcImdyaWQtdGVtcGxhdGUtY29sdW1uc1wiICAgICAgICAgOiAxLFxuICAgIFwiZ3JpZC10ZW1wbGF0ZS1yb3dzXCIgICAgICAgICAgICA6IDEsXG5cbiAgICAvL0hcbiAgICBcImhhbmdpbmctcHVuY3R1YXRpb25cIiAgICAgICAgICAgOiAxLFxuICAgIFwiaGVpZ2h0XCIgICAgICAgICAgICAgICAgICAgICAgICA6IFwiPG1hcmdpbi13aWR0aD4gfCA8Y29udGVudC1zaXppbmc+IHwgaW5oZXJpdFwiLFxuICAgIFwiaHlwaGVuYXRlLWFmdGVyXCIgICAgICAgICAgICAgICA6IFwiPGludGVnZXI+IHwgYXV0b1wiLFxuICAgIFwiaHlwaGVuYXRlLWJlZm9yZVwiICAgICAgICAgICAgICA6IFwiPGludGVnZXI+IHwgYXV0b1wiLFxuICAgIFwiaHlwaGVuYXRlLWNoYXJhY3RlclwiICAgICAgICAgICA6IFwiPHN0cmluZz4gfCBhdXRvXCIsXG4gICAgXCJoeXBoZW5hdGUtbGluZXNcIiAgICAgICAgICAgICAgIDogXCJuby1saW1pdCB8IDxpbnRlZ2VyPlwiLFxuICAgIFwiaHlwaGVuYXRlLXJlc291cmNlXCIgICAgICAgICAgICA6IDEsXG4gICAgXCJoeXBoZW5zXCIgICAgICAgICAgICAgICAgICAgICAgIDogXCJub25lIHwgbWFudWFsIHwgYXV0b1wiLFxuXG4gICAgLy9JXG4gICAgXCJpY29uXCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImltYWdlLW9yaWVudGF0aW9uXCIgICAgICAgICAgICAgOiBcImFuZ2xlIHwgYXV0b1wiLFxuICAgIFwiaW1hZ2UtcmVuZGVyaW5nXCIgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJpbWFnZS1yZXNvbHV0aW9uXCIgICAgICAgICAgICAgIDogMSxcbiAgICBcImltZS1tb2RlXCIgICAgICAgICAgICAgICAgICAgICAgOiBcImF1dG8gfCBub3JtYWwgfCBhY3RpdmUgfCBpbmFjdGl2ZSB8IGRpc2FibGVkIHwgaW5oZXJpdFwiLFxuICAgIFwiaW5saW5lLWJveC1hbGlnblwiICAgICAgICAgICAgICA6IFwiaW5pdGlhbCB8IGxhc3QgfCA8aW50ZWdlcj5cIixcblxuICAgIC8vSlxuICAgIFwianVzdGlmeS1jb250ZW50XCIgICAgICAgICAgICAgICA6IFwiZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgc3BhY2UtYmV0d2VlbiB8IHNwYWNlLWFyb3VuZFwiLFxuICAgIFwiLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnRcIiAgICAgICA6IFwiZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgc3BhY2UtYmV0d2VlbiB8IHNwYWNlLWFyb3VuZFwiLFxuXG4gICAgLy9MXG4gICAgXCJsZWZ0XCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCI8bWFyZ2luLXdpZHRoPiB8IGluaGVyaXRcIixcbiAgICBcImxldHRlci1zcGFjaW5nXCIgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+IHwgbm9ybWFsIHwgaW5oZXJpdFwiLFxuICAgIFwibGluZS1oZWlnaHRcIiAgICAgICAgICAgICAgICAgICA6IFwiPG51bWJlcj4gfCA8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPiB8IG5vcm1hbCB8IGluaGVyaXRcIixcbiAgICBcImxpbmUtYnJlYWtcIiAgICAgICAgICAgICAgICAgICAgOiBcImF1dG8gfCBsb29zZSB8IG5vcm1hbCB8IHN0cmljdFwiLFxuICAgIFwibGluZS1zdGFja2luZ1wiICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJsaW5lLXN0YWNraW5nLXJ1YnlcIiAgICAgICAgICAgIDogXCJleGNsdWRlLXJ1YnkgfCBpbmNsdWRlLXJ1YnlcIixcbiAgICBcImxpbmUtc3RhY2tpbmctc2hpZnRcIiAgICAgICAgICAgOiBcImNvbnNpZGVyLXNoaWZ0cyB8IGRpc3JlZ2FyZC1zaGlmdHNcIixcbiAgICBcImxpbmUtc3RhY2tpbmctc3RyYXRlZ3lcIiAgICAgICAgOiBcImlubGluZS1saW5lLWhlaWdodCB8IGJsb2NrLWxpbmUtaGVpZ2h0IHwgbWF4LWhlaWdodCB8IGdyaWQtaGVpZ2h0XCIsXG4gICAgXCJsaXN0LXN0eWxlXCIgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcImxpc3Qtc3R5bGUtaW1hZ2VcIiAgICAgICAgICAgICAgOiBcIjx1cmk+IHwgbm9uZSB8IGluaGVyaXRcIixcbiAgICBcImxpc3Qtc3R5bGUtcG9zaXRpb25cIiAgICAgICAgICAgOiBcImluc2lkZSB8IG91dHNpZGUgfCBpbmhlcml0XCIsXG4gICAgXCJsaXN0LXN0eWxlLXR5cGVcIiAgICAgICAgICAgICAgIDogXCJkaXNjIHwgY2lyY2xlIHwgc3F1YXJlIHwgZGVjaW1hbCB8IGRlY2ltYWwtbGVhZGluZy16ZXJvIHwgbG93ZXItcm9tYW4gfCB1cHBlci1yb21hbiB8IGxvd2VyLWdyZWVrIHwgbG93ZXItbGF0aW4gfCB1cHBlci1sYXRpbiB8IGFybWVuaWFuIHwgZ2VvcmdpYW4gfCBsb3dlci1hbHBoYSB8IHVwcGVyLWFscGhhIHwgbm9uZSB8IGluaGVyaXRcIixcblxuICAgIC8vTVxuICAgIFwibWFyZ2luXCIgICAgICAgICAgICAgICAgICAgICAgICA6IHsgbXVsdGk6IFwiPG1hcmdpbi13aWR0aD4gfCBpbmhlcml0XCIsIG1heDogNCB9LFxuICAgIFwibWFyZ2luLWJvdHRvbVwiICAgICAgICAgICAgICAgICA6IFwiPG1hcmdpbi13aWR0aD4gfCBpbmhlcml0XCIsXG4gICAgXCJtYXJnaW4tbGVmdFwiICAgICAgICAgICAgICAgICAgIDogXCI8bWFyZ2luLXdpZHRoPiB8IGluaGVyaXRcIixcbiAgICBcIm1hcmdpbi1yaWdodFwiICAgICAgICAgICAgICAgICAgOiBcIjxtYXJnaW4td2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwibWFyZ2luLXRvcFwiICAgICAgICAgICAgICAgICAgICA6IFwiPG1hcmdpbi13aWR0aD4gfCBpbmhlcml0XCIsXG4gICAgXCJtYXJrXCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm1hcmstYWZ0ZXJcIiAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwibWFyay1iZWZvcmVcIiAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJtYXJrc1wiICAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm1hcnF1ZWUtZGlyZWN0aW9uXCIgICAgICAgICAgICAgOiAxLFxuICAgIFwibWFycXVlZS1wbGF5LWNvdW50XCIgICAgICAgICAgICA6IDEsXG4gICAgXCJtYXJxdWVlLXNwZWVkXCIgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm1hcnF1ZWUtc3R5bGVcIiAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwibWF4LWhlaWdodFwiICAgICAgICAgICAgICAgICAgICA6IFwiPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCA8Y29udGVudC1zaXppbmc+IHwgbm9uZSB8IGluaGVyaXRcIixcbiAgICBcIm1heC13aWR0aFwiICAgICAgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+IHwgPHBlcmNlbnRhZ2U+IHwgPGNvbnRlbnQtc2l6aW5nPiB8IG5vbmUgfCBpbmhlcml0XCIsXG4gICAgXCJtaW4taGVpZ2h0XCIgICAgICAgICAgICAgICAgICAgIDogXCI8bGVuZ3RoPiB8IDxwZXJjZW50YWdlPiB8IDxjb250ZW50LXNpemluZz4gfCBjb250YWluLWZsb2F0cyB8IC1tb3otY29udGFpbi1mbG9hdHMgfCAtd2Via2l0LWNvbnRhaW4tZmxvYXRzIHwgaW5oZXJpdFwiLFxuICAgIFwibWluLXdpZHRoXCIgICAgICAgICAgICAgICAgICAgICA6IFwiPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCA8Y29udGVudC1zaXppbmc+IHwgY29udGFpbi1mbG9hdHMgfCAtbW96LWNvbnRhaW4tZmxvYXRzIHwgLXdlYmtpdC1jb250YWluLWZsb2F0cyB8IGluaGVyaXRcIixcbiAgICBcIm1vdmUtdG9cIiAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuXG4gICAgLy9OXG4gICAgXCJuYXYtZG93blwiICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm5hdi1pbmRleFwiICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwibmF2LWxlZnRcIiAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJuYXYtcmlnaHRcIiAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm5hdi11cFwiICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuXG4gICAgLy9PXG4gICAgXCJvYmplY3QtZml0XCIgICAgICAgICAgICAgICAgICAgIDogXCJmaWxsIHwgY29udGFpbiB8IGNvdmVyIHwgbm9uZSB8IHNjYWxlLWRvd25cIixcbiAgICBcIm9iamVjdC1wb3NpdGlvblwiICAgICAgICAgICAgICAgOiBcIjxiZy1wb3NpdGlvbj5cIixcbiAgICBcIm9wYWNpdHlcIiAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxudW1iZXI+IHwgaW5oZXJpdFwiLFxuICAgIFwib3JkZXJcIiAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiPGludGVnZXI+XCIsXG4gICAgXCItd2Via2l0LW9yZGVyXCIgICAgICAgICAgICAgICAgIDogXCI8aW50ZWdlcj5cIixcbiAgICBcIm9ycGhhbnNcIiAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxpbnRlZ2VyPiB8IGluaGVyaXRcIixcbiAgICBcIm91dGxpbmVcIiAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwib3V0bGluZS1jb2xvclwiICAgICAgICAgICAgICAgICA6IFwiPGNvbG9yPiB8IGludmVydCB8IGluaGVyaXRcIixcbiAgICBcIm91dGxpbmUtb2Zmc2V0XCIgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwib3V0bGluZS1zdHlsZVwiICAgICAgICAgICAgICAgICA6IFwiPGJvcmRlci1zdHlsZT4gfCBpbmhlcml0XCIsXG4gICAgXCJvdXRsaW5lLXdpZHRoXCIgICAgICAgICAgICAgICAgIDogXCI8Ym9yZGVyLXdpZHRoPiB8IGluaGVyaXRcIixcbiAgICBcIm92ZXJmbG93XCIgICAgICAgICAgICAgICAgICAgICAgOiBcInZpc2libGUgfCBoaWRkZW4gfCBzY3JvbGwgfCBhdXRvIHwgaW5oZXJpdFwiLFxuICAgIFwib3ZlcmZsb3ctc3R5bGVcIiAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJvdmVyZmxvdy13cmFwXCIgICAgICAgICAgICAgICAgIDogXCJub3JtYWwgfCBicmVhay13b3JkXCIsXG4gICAgXCJvdmVyZmxvdy14XCIgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcIm92ZXJmbG93LXlcIiAgICAgICAgICAgICAgICAgICAgOiAxLFxuXG4gICAgLy9QXG4gICAgXCJwYWRkaW5nXCIgICAgICAgICAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8cGFkZGluZy13aWR0aD4gfCBpbmhlcml0XCIsIG1heDogNCB9LFxuICAgIFwicGFkZGluZy1ib3R0b21cIiAgICAgICAgICAgICAgICA6IFwiPHBhZGRpbmctd2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwicGFkZGluZy1sZWZ0XCIgICAgICAgICAgICAgICAgICA6IFwiPHBhZGRpbmctd2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwicGFkZGluZy1yaWdodFwiICAgICAgICAgICAgICAgICA6IFwiPHBhZGRpbmctd2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwicGFkZGluZy10b3BcIiAgICAgICAgICAgICAgICAgICA6IFwiPHBhZGRpbmctd2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwicGFnZVwiICAgICAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJwYWdlLWJyZWFrLWFmdGVyXCIgICAgICAgICAgICAgIDogXCJhdXRvIHwgYWx3YXlzIHwgYXZvaWQgfCBsZWZ0IHwgcmlnaHQgfCBpbmhlcml0XCIsXG4gICAgXCJwYWdlLWJyZWFrLWJlZm9yZVwiICAgICAgICAgICAgIDogXCJhdXRvIHwgYWx3YXlzIHwgYXZvaWQgfCBsZWZ0IHwgcmlnaHQgfCBpbmhlcml0XCIsXG4gICAgXCJwYWdlLWJyZWFrLWluc2lkZVwiICAgICAgICAgICAgIDogXCJhdXRvIHwgYXZvaWQgfCBpbmhlcml0XCIsXG4gICAgXCJwYWdlLXBvbGljeVwiICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInBhdXNlXCIgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicGF1c2UtYWZ0ZXJcIiAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJwYXVzZS1iZWZvcmVcIiAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInBlcnNwZWN0aXZlXCIgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicGVyc3BlY3RpdmUtb3JpZ2luXCIgICAgICAgICAgICA6IDEsXG4gICAgXCJwaG9uZW1lc1wiICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInBpdGNoXCIgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicGl0Y2gtcmFuZ2VcIiAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJwbGF5LWR1cmluZ1wiICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInBvaW50ZXItZXZlbnRzXCIgICAgICAgICAgICAgICAgOiBcImF1dG8gfCBub25lIHwgdmlzaWJsZVBhaW50ZWQgfCB2aXNpYmxlRmlsbCB8IHZpc2libGVTdHJva2UgfCB2aXNpYmxlIHwgcGFpbnRlZCB8IGZpbGwgfCBzdHJva2UgfCBhbGwgfCBpbmhlcml0XCIsXG4gICAgXCJwb3NpdGlvblwiICAgICAgICAgICAgICAgICAgICAgIDogXCJzdGF0aWMgfCByZWxhdGl2ZSB8IGFic29sdXRlIHwgZml4ZWQgfCBpbmhlcml0XCIsXG4gICAgXCJwcmVzZW50YXRpb24tbGV2ZWxcIiAgICAgICAgICAgIDogMSxcbiAgICBcInB1bmN0dWF0aW9uLXRyaW1cIiAgICAgICAgICAgICAgOiAxLFxuXG4gICAgLy9RXG4gICAgXCJxdW90ZXNcIiAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcblxuICAgIC8vUlxuICAgIFwicmVuZGVyaW5nLWludGVudFwiICAgICAgICAgICAgICA6IDEsXG4gICAgXCJyZXNpemVcIiAgICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInJlc3RcIiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicmVzdC1hZnRlclwiICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJyZXN0LWJlZm9yZVwiICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInJpY2huZXNzXCIgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicmlnaHRcIiAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiPG1hcmdpbi13aWR0aD4gfCBpbmhlcml0XCIsXG4gICAgXCJyb3RhdGlvblwiICAgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInJvdGF0aW9uLXBvaW50XCIgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicnVieS1hbGlnblwiICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJydWJ5LW92ZXJoYW5nXCIgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInJ1YnktcG9zaXRpb25cIiAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwicnVieS1zcGFuXCIgICAgICAgICAgICAgICAgICAgICA6IDEsXG5cbiAgICAvL1NcbiAgICBcInNpemVcIiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwic3BlYWtcIiAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9ybWFsIHwgbm9uZSB8IHNwZWxsLW91dCB8IGluaGVyaXRcIixcbiAgICBcInNwZWFrLWhlYWRlclwiICAgICAgICAgICAgICAgICAgOiBcIm9uY2UgfCBhbHdheXMgfCBpbmhlcml0XCIsXG4gICAgXCJzcGVhay1udW1lcmFsXCIgICAgICAgICAgICAgICAgIDogXCJkaWdpdHMgfCBjb250aW51b3VzIHwgaW5oZXJpdFwiLFxuICAgIFwic3BlYWstcHVuY3R1YXRpb25cIiAgICAgICAgICAgICA6IFwiY29kZSB8IG5vbmUgfCBpbmhlcml0XCIsXG4gICAgXCJzcGVlY2gtcmF0ZVwiICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInNyY1wiICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwic3RyZXNzXCIgICAgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJzdHJpbmctc2V0XCIgICAgICAgICAgICAgICAgICAgIDogMSxcblxuICAgIFwidGFibGUtbGF5b3V0XCIgICAgICAgICAgICAgICAgICA6IFwiYXV0byB8IGZpeGVkIHwgaW5oZXJpdFwiLFxuICAgIFwidGFiLXNpemVcIiAgICAgICAgICAgICAgICAgICAgICA6IFwiPGludGVnZXI+IHwgPGxlbmd0aD5cIixcbiAgICBcInRhcmdldFwiICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGFyZ2V0LW5hbWVcIiAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ0YXJnZXQtbmV3XCIgICAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInRhcmdldC1wb3NpdGlvblwiICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGV4dC1hbGlnblwiICAgICAgICAgICAgICAgICAgICA6IFwibGVmdCB8IHJpZ2h0IHwgY2VudGVyIHwganVzdGlmeSB8IG1hdGNoLXBhcmVudCB8IHN0YXJ0IHwgZW5kIHwgaW5oZXJpdFwiICxcbiAgICBcInRleHQtYWxpZ24tbGFzdFwiICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGV4dC1kZWNvcmF0aW9uXCIgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ0ZXh0LWVtcGhhc2lzXCIgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInRleHQtaGVpZ2h0XCIgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGV4dC1pbmRlbnRcIiAgICAgICAgICAgICAgICAgICA6IFwiPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCBpbmhlcml0XCIsXG4gICAgXCJ0ZXh0LWp1c3RpZnlcIiAgICAgICAgICAgICAgICAgIDogXCJhdXRvIHwgbm9uZSB8IGludGVyLXdvcmQgfCBpbnRlci1pZGVvZ3JhcGggfCBpbnRlci1jbHVzdGVyIHwgZGlzdHJpYnV0ZSB8IGthc2hpZGFcIixcbiAgICBcInRleHQtb3V0bGluZVwiICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGV4dC1vdmVyZmxvd1wiICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ0ZXh0LXJlbmRlcmluZ1wiICAgICAgICAgICAgICAgIDogXCJhdXRvIHwgb3B0aW1pemVTcGVlZCB8IG9wdGltaXplTGVnaWJpbGl0eSB8IGdlb21ldHJpY1ByZWNpc2lvbiB8IGluaGVyaXRcIixcbiAgICBcInRleHQtc2hhZG93XCIgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidGV4dC10cmFuc2Zvcm1cIiAgICAgICAgICAgICAgICA6IFwiY2FwaXRhbGl6ZSB8IHVwcGVyY2FzZSB8IGxvd2VyY2FzZSB8IG5vbmUgfCBpbmhlcml0XCIsXG4gICAgXCJ0ZXh0LXdyYXBcIiAgICAgICAgICAgICAgICAgICAgIDogXCJub3JtYWwgfCBub25lIHwgYXZvaWRcIixcbiAgICBcInRvcFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxtYXJnaW4td2lkdGg+IHwgaW5oZXJpdFwiLFxuICAgIFwiLW1zLXRvdWNoLWFjdGlvblwiICAgICAgICAgICAgICA6IFwiYXV0byB8IG5vbmUgfCBwYW4teCB8IHBhbi15IHwgcGFuLWxlZnQgfCBwYW4tcmlnaHQgfCBwYW4tdXAgfCBwYW4tZG93biB8IG1hbmlwdWxhdGlvblwiLFxuICAgIFwidG91Y2gtYWN0aW9uXCIgICAgICAgICAgICAgICAgICA6IFwiYXV0byB8IG5vbmUgfCBwYW4teCB8IHBhbi15IHwgcGFuLWxlZnQgfCBwYW4tcmlnaHQgfCBwYW4tdXAgfCBwYW4tZG93biB8IG1hbmlwdWxhdGlvblwiLFxuICAgIFwidHJhbnNmb3JtXCIgICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ0cmFuc2Zvcm0tb3JpZ2luXCIgICAgICAgICAgICAgIDogMSxcbiAgICBcInRyYW5zZm9ybS1zdHlsZVwiICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidHJhbnNpdGlvblwiICAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ0cmFuc2l0aW9uLWRlbGF5XCIgICAgICAgICAgICAgIDogMSxcbiAgICBcInRyYW5zaXRpb24tZHVyYXRpb25cIiAgICAgICAgICAgOiAxLFxuICAgIFwidHJhbnNpdGlvbi1wcm9wZXJ0eVwiICAgICAgICAgICA6IDEsXG4gICAgXCJ0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiICAgIDogMSxcblxuICAgIC8vVVxuICAgIFwidW5pY29kZS1iaWRpXCIgICAgICAgICAgICAgICAgICA6IFwibm9ybWFsIHwgZW1iZWQgfCBpc29sYXRlIHwgYmlkaS1vdmVycmlkZSB8IGlzb2xhdGUtb3ZlcnJpZGUgfCBwbGFpbnRleHQgfCBpbmhlcml0XCIsXG4gICAgXCJ1c2VyLW1vZGlmeVwiICAgICAgICAgICAgICAgICAgIDogXCJyZWFkLW9ubHkgfCByZWFkLXdyaXRlIHwgd3JpdGUtb25seSB8IGluaGVyaXRcIixcbiAgICBcInVzZXItc2VsZWN0XCIgICAgICAgICAgICAgICAgICAgOiBcIm5vbmUgfCB0ZXh0IHwgdG9nZ2xlIHwgZWxlbWVudCB8IGVsZW1lbnRzIHwgYWxsIHwgaW5oZXJpdFwiLFxuXG4gICAgLy9WXG4gICAgXCJ2ZXJ0aWNhbC1hbGlnblwiICAgICAgICAgICAgICAgIDogXCJhdXRvIHwgdXNlLXNjcmlwdCB8IGJhc2VsaW5lIHwgc3ViIHwgc3VwZXIgfCB0b3AgfCB0ZXh0LXRvcCB8IGNlbnRyYWwgfCBtaWRkbGUgfCBib3R0b20gfCB0ZXh0LWJvdHRvbSB8IDxwZXJjZW50YWdlPiB8IDxsZW5ndGg+IHwgaW5oZXJpdFwiLFxuICAgIFwidmlzaWJpbGl0eVwiICAgICAgICAgICAgICAgICAgICA6IFwidmlzaWJsZSB8IGhpZGRlbiB8IGNvbGxhcHNlIHwgaW5oZXJpdFwiLFxuICAgIFwidm9pY2UtYmFsYW5jZVwiICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ2b2ljZS1kdXJhdGlvblwiICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInZvaWNlLWZhbWlseVwiICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidm9pY2UtcGl0Y2hcIiAgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ2b2ljZS1waXRjaC1yYW5nZVwiICAgICAgICAgICAgIDogMSxcbiAgICBcInZvaWNlLXJhdGVcIiAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgIFwidm9pY2Utc3RyZXNzXCIgICAgICAgICAgICAgICAgICA6IDEsXG4gICAgXCJ2b2ljZS12b2x1bWVcIiAgICAgICAgICAgICAgICAgIDogMSxcbiAgICBcInZvbHVtZVwiICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuXG4gICAgLy9XXG4gICAgXCJ3aGl0ZS1zcGFjZVwiICAgICAgICAgICAgICAgICAgIDogXCJub3JtYWwgfCBwcmUgfCBub3dyYXAgfCBwcmUtd3JhcCB8IHByZS1saW5lIHwgaW5oZXJpdCB8IC1wcmUtd3JhcCB8IC1vLXByZS13cmFwIHwgLW1vei1wcmUtd3JhcCB8IC1ocC1wcmUtd3JhcFwiLCAvL2h0dHA6Ly9wZXJpc2hhYmxlcHJlc3MuY29tL3dyYXBwaW5nLWNvbnRlbnQvXG4gICAgXCJ3aGl0ZS1zcGFjZS1jb2xsYXBzZVwiICAgICAgICAgIDogMSxcbiAgICBcIndpZG93c1wiICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxpbnRlZ2VyPiB8IGluaGVyaXRcIixcbiAgICBcIndpZHRoXCIgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxsZW5ndGg+IHwgPHBlcmNlbnRhZ2U+IHwgPGNvbnRlbnQtc2l6aW5nPiB8IGF1dG8gfCBpbmhlcml0XCIsXG4gICAgXCJ3aWxsLWNoYW5nZVwiICAgICAgICAgICAgICAgICAgIDogeyBtdWx0aTogXCI8aWRlbnQ+XCIsIGNvbW1hOiB0cnVlIH0sXG4gICAgXCJ3b3JkLWJyZWFrXCIgICAgICAgICAgICAgICAgICAgIDogXCJub3JtYWwgfCBrZWVwLWFsbCB8IGJyZWFrLWFsbFwiLFxuICAgIFwid29yZC1zcGFjaW5nXCIgICAgICAgICAgICAgICAgICA6IFwiPGxlbmd0aD4gfCBub3JtYWwgfCBpbmhlcml0XCIsXG4gICAgXCJ3b3JkLXdyYXBcIiAgICAgICAgICAgICAgICAgICAgIDogXCJub3JtYWwgfCBicmVhay13b3JkXCIsXG4gICAgXCJ3cml0aW5nLW1vZGVcIiAgICAgICAgICAgICAgICAgIDogXCJob3Jpem9udGFsLXRiIHwgdmVydGljYWwtcmwgfCB2ZXJ0aWNhbC1sciB8IGxyLXRiIHwgcmwtdGIgfCB0Yi1ybCB8IGJ0LXJsIHwgdGItbHIgfCBidC1sciB8IGxyLWJ0IHwgcmwtYnQgfCBsciB8IHJsIHwgdGIgfCBpbmhlcml0XCIsXG5cbiAgICAvL1pcbiAgICBcInotaW5kZXhcIiAgICAgICAgICAgICAgICAgICAgICAgOiBcIjxpbnRlZ2VyPiB8IGF1dG8gfCBpbmhlcml0XCIsXG4gICAgXCJ6b29tXCIgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPiB8IG5vcm1hbFwiXG59O1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2VsZWN0b3IgY29tYmluYXRvciAod2hpdGVzcGFjZSwgKywgPikuXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi5jc3NcbiAqIEBjbGFzcyBQcm9wZXJ0eU5hbWVcbiAqIEBleHRlbmRzIHBhcnNlcmxpYi51dGlsLlN5bnRheFVuaXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gaGFjayBUaGUgdHlwZSBvZiBJRSBoYWNrIGFwcGxpZWQgKFwiKlwiLCBcIl9cIiwgb3IgbnVsbCkuXG4gKiBAcGFyYW0ge2ludH0gbGluZSBUaGUgbGluZSBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKiBAcGFyYW0ge2ludH0gY29sIFRoZSBjb2x1bW4gb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICovXG5mdW5jdGlvbiBQcm9wZXJ0eU5hbWUodGV4dCwgaGFjaywgbGluZSwgY29sKXtcblxuICAgIFN5bnRheFVuaXQuY2FsbCh0aGlzLCB0ZXh0LCBsaW5lLCBjb2wsIFBhcnNlci5QUk9QRVJUWV9OQU1FX1RZUEUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgSUUgaGFjayBhcHBsaWVkIChcIipcIiwgXCJfXCIsIG9yIG51bGwpLlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBwcm9wZXJ0eSBoYWNrXG4gICAgICovXG4gICAgdGhpcy5oYWNrID0gaGFjaztcblxufVxuXG5Qcm9wZXJ0eU5hbWUucHJvdG90eXBlID0gbmV3IFN5bnRheFVuaXQoKTtcblByb3BlcnR5TmFtZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9wZXJ0eU5hbWU7XG5Qcm9wZXJ0eU5hbWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gKHRoaXMuaGFjayA/IHRoaXMuaGFjayA6IFwiXCIpICsgdGhpcy50ZXh0O1xufTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBwYXJ0IG9mIGEgQ1NTIHByb3BlcnR5IHZhbHVlLCBtZWFuaW5nIHRoYXQgaXQgcmVwcmVzZW50c1xuICoganVzdCBldmVyeXRoaW5nIHNpbmdsZSBwYXJ0IGJldHdlZW4gXCI6XCIgYW5kIFwiO1wiLiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmFsdWVzXG4gKiBzZXBhcmF0ZWQgYnkgY29tbWFzLCB0aGlzIHR5cGUgcmVwcmVzZW50cyBqdXN0IG9uZSBvZiB0aGUgdmFsdWVzLlxuICogQHBhcmFtIHtTdHJpbmdbXX0gcGFydHMgQW4gYXJyYXkgb2YgdmFsdWUgcGFydHMgbWFraW5nIHVwIHRoaXMgdmFsdWUuXG4gKiBAcGFyYW0ge2ludH0gbGluZSBUaGUgbGluZSBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKiBAcGFyYW0ge2ludH0gY29sIFRoZSBjb2x1bW4gb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICogQG5hbWVzcGFjZSBwYXJzZXJsaWIuY3NzXG4gKiBAY2xhc3MgUHJvcGVydHlWYWx1ZVxuICogQGV4dGVuZHMgcGFyc2VybGliLnV0aWwuU3ludGF4VW5pdFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFByb3BlcnR5VmFsdWUocGFydHMsIGxpbmUsIGNvbCl7XG5cbiAgICBTeW50YXhVbml0LmNhbGwodGhpcywgcGFydHMuam9pbihcIiBcIiksIGxpbmUsIGNvbCwgUGFyc2VyLlBST1BFUlRZX1ZBTFVFX1RZUEUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBhcnRzIHRoYXQgbWFrZSB1cCB0aGUgc2VsZWN0b3IuXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKiBAcHJvcGVydHkgcGFydHNcbiAgICAgKi9cbiAgICB0aGlzLnBhcnRzID0gcGFydHM7XG5cbn1cblxuUHJvcGVydHlWYWx1ZS5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuUHJvcGVydHlWYWx1ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9wZXJ0eVZhbHVlO1xuXG4vKipcbiAqIEEgdXRpbGl0eSBjbGFzcyB0aGF0IGFsbG93cyBmb3IgZWFzeSBpdGVyYXRpb24gb3ZlciB0aGUgdmFyaW91cyBwYXJ0cyBvZiBhXG4gKiBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7cGFyc2VybGliLmNzcy5Qcm9wZXJ0eVZhbHVlfSB2YWx1ZSBUaGUgcHJvcGVydHkgdmFsdWUgdG8gaXRlcmF0ZSBvdmVyLlxuICogQG5hbWVzcGFjZSBwYXJzZXJsaWIuY3NzXG4gKiBAY2xhc3MgUHJvcGVydHlWYWx1ZUl0ZXJhdG9yXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUHJvcGVydHlWYWx1ZUl0ZXJhdG9yKHZhbHVlKXtcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdG9yIHZhbHVlXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IF9pXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9pID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYXJ0cyB0aGF0IG1ha2UgdXAgdGhlIHZhbHVlLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQHByb3BlcnR5IF9wYXJ0c1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcGFydHMgPSB2YWx1ZS5wYXJ0cztcblxuICAgIC8qKlxuICAgICAqIEtlZXBzIHRyYWNrIG9mIGJvb2ttYXJrcyBhbG9uZyB0aGUgd2F5LlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQHByb3BlcnR5IF9tYXJrc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWFya3MgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAdHlwZSBwYXJzZXJsaWIuY3NzLlByb3BlcnR5VmFsdWVcbiAgICAgKiBAcHJvcGVydHkgdmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgcGFydHMgaW4gdGhlIHZhbHVlLlxuICogQHJldHVybiB7aW50fSBUaGUgdG90YWwgbnVtYmVyIG9mIHBhcnRzIGluIHRoZSB2YWx1ZS5cbiAqIEBtZXRob2QgY291bnRcbiAqL1xuUHJvcGVydHlWYWx1ZUl0ZXJhdG9yLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnRzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogSW5kaWNhdGVzIGlmIHRoZSBpdGVyYXRvciBpcyBwb3NpdGlvbmVkIGF0IHRoZSBmaXJzdCBpdGVtLlxuICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwb3NpdGlvbmVkIGF0IGZpcnN0IGl0ZW0sIGZhbHNlIGlmIG5vdC5cbiAqIEBtZXRob2QgaXNGaXJzdFxuICovXG5Qcm9wZXJ0eVZhbHVlSXRlcmF0b3IucHJvdG90eXBlLmlzRmlyc3QgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLl9pID09PSAwO1xufTtcblxuLyoqXG4gKiBJbmRpY2F0ZXMgaWYgdGhlcmUgYXJlIG1vcmUgcGFydHMgb2YgdGhlIHByb3BlcnR5IHZhbHVlLlxuICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGVyZSBhcmUgbW9yZSBwYXJ0cywgZmFsc2UgaWYgbm90LlxuICogQG1ldGhvZCBoYXNOZXh0XG4gKi9cblByb3BlcnR5VmFsdWVJdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICh0aGlzLl9pIDwgdGhpcy5fcGFydHMubGVuZ3RoKTtcbn07XG5cbi8qKlxuICogTWFya3MgdGhlIGN1cnJlbnQgc3BvdCBpbiB0aGUgaXRlcmF0aW9uIHNvIGl0IGNhbiBiZSByZXN0b3JlZCB0b1xuICogbGF0ZXIgb24uXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQG1ldGhvZCBtYXJrXG4gKi9cblByb3BlcnR5VmFsdWVJdGVyYXRvci5wcm90b3R5cGUubWFyayA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5fbWFya3MucHVzaCh0aGlzLl9pKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBwYXJ0IG9mIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIG5leHRcbiAqIHBhcnQuIERvZXMgbm90IG1vdmUgdGhlIGludGVybmFsIGNvdW50ZXIgZm9yd2FyZC5cbiAqIEByZXR1cm4ge3BhcnNlcmxpYi5jc3MuUHJvcGVydHlWYWx1ZVBhcnR9IFRoZSBuZXh0IHBhcnQgb2YgdGhlIHByb3BlcnR5IHZhbHVlIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gbmV4dFxuICogcGFydC5cbiAqIEBtZXRob2QgcGVla1xuICovXG5Qcm9wZXJ0eVZhbHVlSXRlcmF0b3IucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbihjb3VudCl7XG4gICAgcmV0dXJuIHRoaXMuaGFzTmV4dCgpID8gdGhpcy5fcGFydHNbdGhpcy5faSArIChjb3VudCB8fCAwKV0gOiBudWxsO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IHBhcnQgb2YgdGhlIHByb3BlcnR5IHZhbHVlIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gbmV4dFxuICogcGFydC5cbiAqIEByZXR1cm4ge3BhcnNlcmxpYi5jc3MuUHJvcGVydHlWYWx1ZVBhcnR9IFRoZSBuZXh0IHBhcnQgb2YgdGhlIHByb3BlcnR5IHZhbHVlIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gbmV4dFxuICogcGFydC5cbiAqIEBtZXRob2QgbmV4dFxuICovXG5Qcm9wZXJ0eVZhbHVlSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmhhc05leHQoKSA/IHRoaXMuX3BhcnRzW3RoaXMuX2krK10gOiBudWxsO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcmV2aW91cyBwYXJ0IG9mIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vXG4gKiBwcmV2aW91cyBwYXJ0LlxuICogQHJldHVybiB7cGFyc2VybGliLmNzcy5Qcm9wZXJ0eVZhbHVlUGFydH0gVGhlIHByZXZpb3VzIHBhcnQgb2YgdGhlXG4gKiBwcm9wZXJ0eSB2YWx1ZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHByZXZpb3VzIHBhcnQuXG4gKiBAbWV0aG9kIHByZXZpb3VzXG4gKi9cblByb3BlcnR5VmFsdWVJdGVyYXRvci5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLl9pID4gMCA/IHRoaXMuX3BhcnRzWy0tdGhpcy5faV0gOiBudWxsO1xufTtcblxuLyoqXG4gKiBSZXN0b3JlcyB0aGUgbGFzdCBzYXZlZCBib29rbWFyay5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAbWV0aG9kIHJlc3RvcmVcbiAqL1xuUHJvcGVydHlWYWx1ZUl0ZXJhdG9yLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24oKXtcbiAgICBpZiAodGhpcy5fbWFya3MubGVuZ3RoKXtcbiAgICAgICAgdGhpcy5faSA9IHRoaXMuX21hcmtzLnBvcCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBwYXJ0IG9mIGEgQ1NTIHByb3BlcnR5IHZhbHVlLCBtZWFuaW5nIHRoYXQgaXQgcmVwcmVzZW50c1xuICoganVzdCBvbmUgcGFydCBvZiB0aGUgZGF0YSBiZXR3ZWVuIFwiOlwiIGFuZCBcIjtcIi5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSB1bml0LlxuICogQHBhcmFtIHtpbnR9IGxpbmUgVGhlIGxpbmUgb2YgdGV4dCBvbiB3aGljaCB0aGUgdW5pdCByZXNpZGVzLlxuICogQHBhcmFtIHtpbnR9IGNvbCBUaGUgY29sdW1uIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIFByb3BlcnR5VmFsdWVQYXJ0XG4gKiBAZXh0ZW5kcyBwYXJzZXJsaWIudXRpbC5TeW50YXhVbml0XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUHJvcGVydHlWYWx1ZVBhcnQodGV4dCwgbGluZSwgY29sKXtcblxuICAgIFN5bnRheFVuaXQuY2FsbCh0aGlzLCB0ZXh0LCBsaW5lLCBjb2wsIFBhcnNlci5QUk9QRVJUWV9WQUxVRV9QQVJUX1RZUEUpO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSB0eXBlIG9mIHZhbHVlIHVuaXQuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBcInVua25vd25cIjtcblxuICAgIC8vZmlndXJlIG91dCB3aGF0IHR5cGUgb2YgZGF0YSBpdCBpc1xuXG4gICAgdmFyIHRlbXA7XG5cbiAgICAvL2l0IGlzIGEgbWVhc3VyZW1lbnQ/XG4gICAgaWYgKC9eKFsrXFwtXT9bXFxkXFwuXSspKFthLXpdKykkL2kudGVzdCh0ZXh0KSl7ICAvL2RpbWVuc2lvblxuICAgICAgICB0aGlzLnR5cGUgPSBcImRpbWVuc2lvblwiO1xuICAgICAgICB0aGlzLnZhbHVlID0gK1JlZ0V4cC4kMTtcbiAgICAgICAgdGhpcy51bml0cyA9IFJlZ0V4cC4kMjtcblxuICAgICAgICAvL3RyeSB0byBuYXJyb3cgZG93blxuICAgICAgICBzd2l0Y2godGhpcy51bml0cy50b0xvd2VyQ2FzZSgpKXtcblxuICAgICAgICAgICAgY2FzZSBcImVtXCI6XG4gICAgICAgICAgICBjYXNlIFwicmVtXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXhcIjpcbiAgICAgICAgICAgIGNhc2UgXCJweFwiOlxuICAgICAgICAgICAgY2FzZSBcImNtXCI6XG4gICAgICAgICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgICAgIGNhc2UgXCJpblwiOlxuICAgICAgICAgICAgY2FzZSBcInB0XCI6XG4gICAgICAgICAgICBjYXNlIFwicGNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjaFwiOlxuICAgICAgICAgICAgY2FzZSBcInZoXCI6XG4gICAgICAgICAgICBjYXNlIFwidndcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ2bWF4XCI6XG4gICAgICAgICAgICBjYXNlIFwidm1pblwiOlxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IFwibGVuZ3RoXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIFwiZnJcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBcImdyaWRcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImRlZ1wiOlxuICAgICAgICAgICAgY2FzZSBcInJhZFwiOlxuICAgICAgICAgICAgY2FzZSBcImdyYWRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBcImFuZ2xlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJtc1wiOlxuICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBcInRpbWVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImh6XCI6XG4gICAgICAgICAgICBjYXNlIFwia2h6XCI6XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gXCJmcmVxdWVuY3lcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImRwaVwiOlxuICAgICAgICAgICAgY2FzZSBcImRwY21cIjpcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBcInJlc29sdXRpb25cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy9kZWZhdWx0XG5cbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICgvXihbK1xcLV0/W1xcZFxcLl0rKSUkL2kudGVzdCh0ZXh0KSl7ICAvL3BlcmNlbnRhZ2VcbiAgICAgICAgdGhpcy50eXBlID0gXCJwZXJjZW50YWdlXCI7XG4gICAgICAgIHRoaXMudmFsdWUgPSArUmVnRXhwLiQxO1xuICAgIH0gZWxzZSBpZiAoL14oWytcXC1dP1xcZCspJC9pLnRlc3QodGV4dCkpeyAgLy9pbnRlZ2VyXG4gICAgICAgIHRoaXMudHlwZSA9IFwiaW50ZWdlclwiO1xuICAgICAgICB0aGlzLnZhbHVlID0gK1JlZ0V4cC4kMTtcbiAgICB9IGVsc2UgaWYgKC9eKFsrXFwtXT9bXFxkXFwuXSspJC9pLnRlc3QodGV4dCkpeyAgLy9udW1iZXJcbiAgICAgICAgdGhpcy50eXBlID0gXCJudW1iZXJcIjtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICtSZWdFeHAuJDE7XG5cbiAgICB9IGVsc2UgaWYgKC9eIyhbYS1mMC05XXszLDZ9KS9pLnRlc3QodGV4dCkpeyAgLy9oZXhjb2xvclxuICAgICAgICB0aGlzLnR5cGUgPSBcImNvbG9yXCI7XG4gICAgICAgIHRlbXAgPSBSZWdFeHAuJDE7XG4gICAgICAgIGlmICh0ZW1wLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICB0aGlzLnJlZCAgICA9IHBhcnNlSW50KHRlbXAuY2hhckF0KDApK3RlbXAuY2hhckF0KDApLDE2KTtcbiAgICAgICAgICAgIHRoaXMuZ3JlZW4gID0gcGFyc2VJbnQodGVtcC5jaGFyQXQoMSkrdGVtcC5jaGFyQXQoMSksMTYpO1xuICAgICAgICAgICAgdGhpcy5ibHVlICAgPSBwYXJzZUludCh0ZW1wLmNoYXJBdCgyKSt0ZW1wLmNoYXJBdCgyKSwxNik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlZCAgICA9IHBhcnNlSW50KHRlbXAuc3Vic3RyaW5nKDAsMiksMTYpO1xuICAgICAgICAgICAgdGhpcy5ncmVlbiAgPSBwYXJzZUludCh0ZW1wLnN1YnN0cmluZygyLDQpLDE2KTtcbiAgICAgICAgICAgIHRoaXMuYmx1ZSAgID0gcGFyc2VJbnQodGVtcC5zdWJzdHJpbmcoNCw2KSwxNik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC9ecmdiXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccypcXCkvaS50ZXN0KHRleHQpKXsgLy9yZ2IoKSBjb2xvciB3aXRoIGFic29sdXRlIG51bWJlcnNcbiAgICAgICAgdGhpcy50eXBlICAgPSBcImNvbG9yXCI7XG4gICAgICAgIHRoaXMucmVkICAgID0gK1JlZ0V4cC4kMTtcbiAgICAgICAgdGhpcy5ncmVlbiAgPSArUmVnRXhwLiQyO1xuICAgICAgICB0aGlzLmJsdWUgICA9ICtSZWdFeHAuJDM7XG4gICAgfSBlbHNlIGlmICgvXnJnYlxcKFxccyooXFxkKyklXFxzKixcXHMqKFxcZCspJVxccyosXFxzKihcXGQrKSVcXHMqXFwpL2kudGVzdCh0ZXh0KSl7IC8vcmdiKCkgY29sb3Igd2l0aCBwZXJjZW50YWdlc1xuICAgICAgICB0aGlzLnR5cGUgICA9IFwiY29sb3JcIjtcbiAgICAgICAgdGhpcy5yZWQgICAgPSArUmVnRXhwLiQxICogMjU1IC8gMTAwO1xuICAgICAgICB0aGlzLmdyZWVuICA9ICtSZWdFeHAuJDIgKiAyNTUgLyAxMDA7XG4gICAgICAgIHRoaXMuYmx1ZSAgID0gK1JlZ0V4cC4kMyAqIDI1NSAvIDEwMDtcbiAgICB9IGVsc2UgaWYgKC9ecmdiYVxcKFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooW1xcZFxcLl0rKVxccypcXCkvaS50ZXN0KHRleHQpKXsgLy9yZ2JhKCkgY29sb3Igd2l0aCBhYnNvbHV0ZSBudW1iZXJzXG4gICAgICAgIHRoaXMudHlwZSAgID0gXCJjb2xvclwiO1xuICAgICAgICB0aGlzLnJlZCAgICA9ICtSZWdFeHAuJDE7XG4gICAgICAgIHRoaXMuZ3JlZW4gID0gK1JlZ0V4cC4kMjtcbiAgICAgICAgdGhpcy5ibHVlICAgPSArUmVnRXhwLiQzO1xuICAgICAgICB0aGlzLmFscGhhICA9ICtSZWdFeHAuJDQ7XG4gICAgfSBlbHNlIGlmICgvXnJnYmFcXChcXHMqKFxcZCspJVxccyosXFxzKihcXGQrKSVcXHMqLFxccyooXFxkKyklXFxzKixcXHMqKFtcXGRcXC5dKylcXHMqXFwpL2kudGVzdCh0ZXh0KSl7IC8vcmdiYSgpIGNvbG9yIHdpdGggcGVyY2VudGFnZXNcbiAgICAgICAgdGhpcy50eXBlICAgPSBcImNvbG9yXCI7XG4gICAgICAgIHRoaXMucmVkICAgID0gK1JlZ0V4cC4kMSAqIDI1NSAvIDEwMDtcbiAgICAgICAgdGhpcy5ncmVlbiAgPSArUmVnRXhwLiQyICogMjU1IC8gMTAwO1xuICAgICAgICB0aGlzLmJsdWUgICA9ICtSZWdFeHAuJDMgKiAyNTUgLyAxMDA7XG4gICAgICAgIHRoaXMuYWxwaGEgID0gK1JlZ0V4cC4kNDtcbiAgICB9IGVsc2UgaWYgKC9eaHNsXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKSVcXHMqLFxccyooXFxkKyklXFxzKlxcKS9pLnRlc3QodGV4dCkpeyAvL2hzbCgpXG4gICAgICAgIHRoaXMudHlwZSAgID0gXCJjb2xvclwiO1xuICAgICAgICB0aGlzLmh1ZSAgICA9ICtSZWdFeHAuJDE7XG4gICAgICAgIHRoaXMuc2F0dXJhdGlvbiA9ICtSZWdFeHAuJDIgLyAxMDA7XG4gICAgICAgIHRoaXMubGlnaHRuZXNzICA9ICtSZWdFeHAuJDMgLyAxMDA7XG4gICAgfSBlbHNlIGlmICgvXmhzbGFcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspJVxccyosXFxzKihcXGQrKSVcXHMqLFxccyooW1xcZFxcLl0rKVxccypcXCkvaS50ZXN0KHRleHQpKXsgLy9oc2xhKCkgY29sb3Igd2l0aCBwZXJjZW50YWdlc1xuICAgICAgICB0aGlzLnR5cGUgICA9IFwiY29sb3JcIjtcbiAgICAgICAgdGhpcy5odWUgICAgPSArUmVnRXhwLiQxO1xuICAgICAgICB0aGlzLnNhdHVyYXRpb24gPSArUmVnRXhwLiQyIC8gMTAwO1xuICAgICAgICB0aGlzLmxpZ2h0bmVzcyAgPSArUmVnRXhwLiQzIC8gMTAwO1xuICAgICAgICB0aGlzLmFscGhhICA9ICtSZWdFeHAuJDQ7XG4gICAgfSBlbHNlIGlmICgvXnVybFxcKFtcIiddPyhbXlxcKVwiJ10rKVtcIiddP1xcKS9pLnRlc3QodGV4dCkpeyAvL1VSSVxuICAgICAgICB0aGlzLnR5cGUgICA9IFwidXJpXCI7XG4gICAgICAgIHRoaXMudXJpICAgID0gUmVnRXhwLiQxO1xuICAgIH0gZWxzZSBpZiAoL14oW15cXChdKylcXCgvaS50ZXN0KHRleHQpKXtcbiAgICAgICAgdGhpcy50eXBlICAgPSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIHRoaXMubmFtZSAgID0gUmVnRXhwLiQxO1xuICAgICAgICB0aGlzLnZhbHVlICA9IHRleHQ7XG4gICAgfSBlbHNlIGlmICgvXlwiKFteXFxuXFxyXFxmXFxcXFwiXXxcXFxcXFxyXFxufFxcXFxbXlxccjAtOWEtZl18XFxcXFswLTlhLWZdezEsNn0oXFxyXFxufFsgXFxuXFxyXFx0XFxmXSk/KSpcIi9pLnRlc3QodGV4dCkpeyAgICAvL2RvdWJsZS1xdW90ZWQgc3RyaW5nXG4gICAgICAgIHRoaXMudHlwZSAgID0gXCJzdHJpbmdcIjtcbiAgICAgICAgdGhpcy52YWx1ZSAgPSBQcm9wZXJ0eVZhbHVlUGFydC5wYXJzZVN0cmluZyh0ZXh0KTtcbiAgICB9IGVsc2UgaWYgKC9eJyhbXlxcblxcclxcZlxcXFwnXXxcXFxcXFxyXFxufFxcXFxbXlxccjAtOWEtZl18XFxcXFswLTlhLWZdezEsNn0oXFxyXFxufFsgXFxuXFxyXFx0XFxmXSk/KSonL2kudGVzdCh0ZXh0KSl7ICAgIC8vc2luZ2xlLXF1b3RlZCBzdHJpbmdcbiAgICAgICAgdGhpcy50eXBlICAgPSBcInN0cmluZ1wiO1xuICAgICAgICB0aGlzLnZhbHVlICA9IFByb3BlcnR5VmFsdWVQYXJ0LnBhcnNlU3RyaW5nKHRleHQpO1xuICAgIH0gZWxzZSBpZiAoQ29sb3JzW3RleHQudG9Mb3dlckNhc2UoKV0peyAgLy9uYW1lZCBjb2xvclxuICAgICAgICB0aGlzLnR5cGUgICA9IFwiY29sb3JcIjtcbiAgICAgICAgdGVtcCAgICAgICAgPSBDb2xvcnNbdGV4dC50b0xvd2VyQ2FzZSgpXS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIHRoaXMucmVkICAgID0gcGFyc2VJbnQodGVtcC5zdWJzdHJpbmcoMCwyKSwxNik7XG4gICAgICAgIHRoaXMuZ3JlZW4gID0gcGFyc2VJbnQodGVtcC5zdWJzdHJpbmcoMiw0KSwxNik7XG4gICAgICAgIHRoaXMuYmx1ZSAgID0gcGFyc2VJbnQodGVtcC5zdWJzdHJpbmcoNCw2KSwxNik7XG4gICAgfSBlbHNlIGlmICgvXltcXCxcXC9dJC8udGVzdCh0ZXh0KSl7XG4gICAgICAgIHRoaXMudHlwZSAgID0gXCJvcGVyYXRvclwiO1xuICAgICAgICB0aGlzLnZhbHVlICA9IHRleHQ7XG4gICAgfSBlbHNlIGlmICgvXlthLXpcXC1fXFx1MDA4MC1cXHVGRkZGXVthLXowLTlcXC1fXFx1MDA4MC1cXHVGRkZGXSokL2kudGVzdCh0ZXh0KSl7XG4gICAgICAgIHRoaXMudHlwZSAgID0gXCJpZGVudGlmaWVyXCI7XG4gICAgICAgIHRoaXMudmFsdWUgID0gdGV4dDtcbiAgICB9XG5cbn1cblxuUHJvcGVydHlWYWx1ZVBhcnQucHJvdG90eXBlID0gbmV3IFN5bnRheFVuaXQoKTtcblByb3BlcnR5VmFsdWVQYXJ0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByb3BlcnR5VmFsdWVQYXJ0O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gcGFyc2UgYSBDU1Mgc3RyaW5nLlxuICovXG5Qcm9wZXJ0eVZhbHVlUGFydC5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHN0ciA9IHN0ci5zbGljZSgxLCAtMSk7IC8vIFN0cmlwIHN1cnJvdW5kaW5nIHNpbmdsZS9kb3VibGUgcXVvdGVzXG4gICAgdmFyIHJlcGxhY2VyID0gZnVuY3Rpb24obWF0Y2gsIGVzYykge1xuICAgICAgICBpZiAoL14oXFxufFxcclxcbnxcXHJ8XFxmKSQvLnRlc3QoZXNjKSkgeyByZXR1cm4gJyc7IH1cbiAgICAgICAgdmFyIG0gPSAvXlswLTlhLWZdezEsNn0vaS5leGVjKGVzYyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gcGFyc2VJbnQobVswXSwgMTYpO1xuICAgICAgICAgICAgaWYgKFN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVQb2ludCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFhYWCBObyBzdXBwb3J0IGZvciBzdXJyb2dhdGVzIG9uIG9sZCBKYXZhU2NyaXB0IGVuZ2luZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXNjO1xuICAgIH07XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXFxcKFxcclxcbnxbXlxccjAtOWEtZl18WzAtOWEtZl17MSw2fShcXHJcXG58WyBcXG5cXHJcXHRcXGZdKT8pL2lnLFxuICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlcik7XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gc2VyaWFsaXplIGEgQ1NTIHN0cmluZy5cbiAqL1xuUHJvcGVydHlWYWx1ZVBhcnQuc2VyaWFsaXplU3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVwbGFjZXIgPSBmdW5jdGlvbihtYXRjaCwgYykge1xuICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXFxcXFwiICsgYztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3AgPSBTdHJpbmcuY29kZVBvaW50QXQgPyBTdHJpbmcuY29kZVBvaW50QXQoMCkgOlxuICAgICAgICAgICAgLy8gV2Ugb25seSBlc2NhcGUgbm9uLXN1cnJvZ2F0ZSBjaGFycywgc28gdXNpbmcgY2hhckNvZGVBdFxuICAgICAgICAgICAgLy8gaXMgaGFybWxlc3MgaGVyZS5cbiAgICAgICAgICAgIFN0cmluZy5jaGFyQ29kZUF0KDApO1xuICAgICAgICByZXR1cm4gXCJcXFxcXCIgKyBjcC50b1N0cmluZygxNikgKyBcIiBcIjtcbiAgICB9O1xuICAgIHJldHVybiAnXCInICsgdmFsdWUucmVwbGFjZSgvW1wiXFxyXFxuXFxmXS9nLCByZXBsYWNlcikgKyAnXCInO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc3ludGF4IHVuaXQgYmFzZWQgc29sZWx5IG9uIHRoZSBnaXZlbiB0b2tlbi5cbiAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBuZXcgc3ludGF4IHVuaXQgd2hlblxuICogaXQgcmVwcmVzZW50cyBhIHNpbmdsZSB0b2tlbiBpbnN0ZWFkIG9mIG11bHRpcGxlLlxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuIFRoZSB0b2tlbiBvYmplY3QgdG8gcmVwcmVzZW50LlxuICogQHJldHVybiB7cGFyc2VybGliLmNzcy5Qcm9wZXJ0eVZhbHVlUGFydH0gVGhlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHRva2VuLlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBmcm9tVG9rZW5cbiAqL1xuUHJvcGVydHlWYWx1ZVBhcnQuZnJvbVRva2VuID0gZnVuY3Rpb24odG9rZW4pe1xuICAgIHJldHVybiBuZXcgUHJvcGVydHlWYWx1ZVBhcnQodG9rZW4udmFsdWUsIHRva2VuLnN0YXJ0TGluZSwgdG9rZW4uc3RhcnRDb2wpO1xufTtcbnZhciBQc2V1ZG9zID0ge1xuICAgIF9fcHJvdG9fXzogICAgICAgbnVsbCxcbiAgICBcIjpmaXJzdC1sZXR0ZXJcIjogMSxcbiAgICBcIjpmaXJzdC1saW5lXCI6ICAgMSxcbiAgICBcIjpiZWZvcmVcIjogICAgICAgMSxcbiAgICBcIjphZnRlclwiOiAgICAgICAgMVxufTtcblxuUHNldWRvcy5FTEVNRU5UID0gMTtcblBzZXVkb3MuQ0xBU1MgPSAyO1xuXG5Qc2V1ZG9zLmlzRWxlbWVudCA9IGZ1bmN0aW9uKHBzZXVkbyl7XG4gICAgcmV0dXJuIHBzZXVkby5pbmRleE9mKFwiOjpcIikgPT09IDAgfHwgUHNldWRvc1twc2V1ZG8udG9Mb3dlckNhc2UoKV0gPT09IFBzZXVkb3MuRUxFTUVOVDtcbn07XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gZW50aXJlIHNpbmdsZSBzZWxlY3RvciwgaW5jbHVkaW5nIGFsbCBwYXJ0cyBidXQgbm90XG4gKiBpbmNsdWRpbmcgbXVsdGlwbGUgc2VsZWN0b3JzICh0aG9zZSBzZXBhcmF0ZWQgYnkgY29tbWFzKS5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIFNlbGVjdG9yXG4gKiBAZXh0ZW5kcyBwYXJzZXJsaWIudXRpbC5TeW50YXhVbml0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcnRzIEFycmF5IG9mIHNlbGVjdG9ycyBwYXJ0cyBtYWtpbmcgdXAgdGhpcyBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7aW50fSBsaW5lIFRoZSBsaW5lIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqIEBwYXJhbSB7aW50fSBjb2wgVGhlIGNvbHVtbiBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKi9cbmZ1bmN0aW9uIFNlbGVjdG9yKHBhcnRzLCBsaW5lLCBjb2wpe1xuXG4gICAgU3ludGF4VW5pdC5jYWxsKHRoaXMsIHBhcnRzLmpvaW4oXCIgXCIpLCBsaW5lLCBjb2wsIFBhcnNlci5TRUxFQ1RPUl9UWVBFKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYXJ0cyB0aGF0IG1ha2UgdXAgdGhlIHNlbGVjdG9yLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQHByb3BlcnR5IHBhcnRzXG4gICAgICovXG4gICAgdGhpcy5wYXJ0cyA9IHBhcnRzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwZWNpZmljaXR5IG9mIHRoZSBzZWxlY3Rvci5cbiAgICAgKiBAdHlwZSBwYXJzZXJsaWIuY3NzLlNwZWNpZmljaXR5XG4gICAgICogQHByb3BlcnR5IHNwZWNpZmljaXR5XG4gICAgICovXG4gICAgdGhpcy5zcGVjaWZpY2l0eSA9IFNwZWNpZmljaXR5LmNhbGN1bGF0ZSh0aGlzKTtcblxufVxuXG5TZWxlY3Rvci5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuU2VsZWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2VsZWN0b3I7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBwYXJ0IG9mIGEgc2VsZWN0b3Igc3RyaW5nLCBtZWFuaW5nIGEgc2luZ2xlIHNldCBvZlxuICogZWxlbWVudCBuYW1lIGFuZCBtb2RpZmllcnMuIFRoaXMgZG9lcyBub3QgaW5jbHVkZSBjb21iaW5hdG9ycyBzdWNoIGFzXG4gKiBzcGFjZXMsICssID4sIGV0Yy5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIFNlbGVjdG9yUGFydFxuICogQGV4dGVuZHMgcGFyc2VybGliLnV0aWwuU3ludGF4VW5pdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudE5hbWUgVGhlIGVsZW1lbnQgbmFtZSBpbiB0aGUgc2VsZWN0b3Igb3IgbnVsbFxuICogICAgICBpZiB0aGVyZSBpcyBubyBlbGVtZW50IG5hbWUuXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgQXJyYXkgb2YgaW5kaXZpZHVhbCBtb2RpZmllcnMgZm9yIHRoZSBlbGVtZW50LlxuICogICAgICBNYXkgYmUgZW1wdHkgaWYgdGhlcmUgYXJlIG5vbmUuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdW5pdC5cbiAqIEBwYXJhbSB7aW50fSBsaW5lIFRoZSBsaW5lIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqIEBwYXJhbSB7aW50fSBjb2wgVGhlIGNvbHVtbiBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKi9cbmZ1bmN0aW9uIFNlbGVjdG9yUGFydChlbGVtZW50TmFtZSwgbW9kaWZpZXJzLCB0ZXh0LCBsaW5lLCBjb2wpe1xuXG4gICAgU3ludGF4VW5pdC5jYWxsKHRoaXMsIHRleHQsIGxpbmUsIGNvbCwgUGFyc2VyLlNFTEVDVE9SX1BBUlRfVFlQRSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFnIG5hbWUgb2YgdGhlIGVsZW1lbnQgdG8gd2hpY2ggdGhpcyBwYXJ0XG4gICAgICogb2YgdGhlIHNlbGVjdG9yIGFmZmVjdHMuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IGVsZW1lbnROYW1lXG4gICAgICovXG4gICAgdGhpcy5lbGVtZW50TmFtZSA9IGVsZW1lbnROYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBhcnRzIHRoYXQgY29tZSBhZnRlciB0aGUgZWxlbWVudCBuYW1lLCBzdWNoIGFzIGNsYXNzIG5hbWVzLCBJRHMsXG4gICAgICogcHNldWRvIGNsYXNzZXMvZWxlbWVudHMsIGV0Yy5cbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBwcm9wZXJ0eSBtb2RpZmllcnNcbiAgICAgKi9cbiAgICB0aGlzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxufVxuXG5TZWxlY3RvclBhcnQucHJvdG90eXBlID0gbmV3IFN5bnRheFVuaXQoKTtcblNlbGVjdG9yUGFydC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZWxlY3RvclBhcnQ7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNlbGVjdG9yIG1vZGlmaWVyIHN0cmluZywgbWVhbmluZyBhIGNsYXNzIG5hbWUsIGVsZW1lbnQgbmFtZSxcbiAqIGVsZW1lbnQgSUQsIHBzZXVkbyBydWxlLCBldGMuXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi5jc3NcbiAqIEBjbGFzcyBTZWxlY3RvclN1YlBhcnRcbiAqIEBleHRlbmRzIHBhcnNlcmxpYi51dGlsLlN5bnRheFVuaXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBzZWxlY3RvciBtb2RpZmllci5cbiAqIEBwYXJhbSB7aW50fSBsaW5lIFRoZSBsaW5lIG9mIHRleHQgb24gd2hpY2ggdGhlIHVuaXQgcmVzaWRlcy5cbiAqIEBwYXJhbSB7aW50fSBjb2wgVGhlIGNvbHVtbiBvZiB0ZXh0IG9uIHdoaWNoIHRoZSB1bml0IHJlc2lkZXMuXG4gKi9cbmZ1bmN0aW9uIFNlbGVjdG9yU3ViUGFydCh0ZXh0LCB0eXBlLCBsaW5lLCBjb2wpe1xuXG4gICAgU3ludGF4VW5pdC5jYWxsKHRoaXMsIHRleHQsIGxpbmUsIGNvbCwgUGFyc2VyLlNFTEVDVE9SX1NVQl9QQVJUX1RZUEUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgbW9kaWZpZXIuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gICAgLyoqXG4gICAgICogU29tZSBzdWJwYXJ0cyBoYXZlIGFyZ3VtZW50cywgdGhpcyByZXByZXNlbnRzIHRoZW0uXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKiBAcHJvcGVydHkgYXJnc1xuICAgICAqL1xuICAgIHRoaXMuYXJncyA9IFtdO1xuXG59XG5cblNlbGVjdG9yU3ViUGFydC5wcm90b3R5cGUgPSBuZXcgU3ludGF4VW5pdCgpO1xuU2VsZWN0b3JTdWJQYXJ0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNlbGVjdG9yU3ViUGFydDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2VsZWN0b3IncyBzcGVjaWZpY2l0eS5cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICogQGNsYXNzIFNwZWNpZmljaXR5XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7aW50fSBhIFNob3VsZCBiZSAxIGZvciBpbmxpbmUgc3R5bGVzLCB6ZXJvIGZvciBzdHlsZXNoZWV0IHN0eWxlc1xuICogQHBhcmFtIHtpbnR9IGIgTnVtYmVyIG9mIElEIHNlbGVjdG9yc1xuICogQHBhcmFtIHtpbnR9IGMgTnVtYmVyIG9mIGNsYXNzZXMgYW5kIHBzZXVkbyBjbGFzc2VzXG4gKiBAcGFyYW0ge2ludH0gZCBOdW1iZXIgb2YgZWxlbWVudCBuYW1lcyBhbmQgcHNldWRvIGVsZW1lbnRzXG4gKi9cbmZ1bmN0aW9uIFNwZWNpZmljaXR5KGEsIGIsIGMsIGQpe1xuICAgIHRoaXMuYSA9IGE7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmMgPSBjO1xuICAgIHRoaXMuZCA9IGQ7XG59XG5cblNwZWNpZmljaXR5LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogU3BlY2lmaWNpdHksXG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlIHRoaXMgc3BlY2lmaWNpdHkgdG8gYW5vdGhlci5cbiAgICAgKiBAcGFyYW0ge1NwZWNpZmljaXR5fSBvdGhlciBUaGUgb3RoZXIgc3BlY2lmaWNpdHkgdG8gY29tcGFyZSB0by5cbiAgICAgKiBAcmV0dXJuIHtpbnR9IC0xIGlmIHRoZSBvdGhlciBzcGVjaWZpY2l0eSBpcyBsYXJnZXIsIDEgaWYgc21hbGxlciwgMCBpZiBlcXVhbC5cbiAgICAgKiBAbWV0aG9kIGNvbXBhcmVcbiAgICAgKi9cbiAgICBjb21wYXJlOiBmdW5jdGlvbihvdGhlcil7XG4gICAgICAgIHZhciBjb21wcyA9IFtcImFcIiwgXCJiXCIsIFwiY1wiLCBcImRcIl0sXG4gICAgICAgICAgICBpLCBsZW47XG5cbiAgICAgICAgZm9yIChpPTAsIGxlbj1jb21wcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICBpZiAodGhpc1tjb21wc1tpXV0gPCBvdGhlcltjb21wc1tpXV0pe1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpc1tjb21wc1tpXV0gPiBvdGhlcltjb21wc1tpXV0pe1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBudW1lcmljIHZhbHVlIGZvciB0aGUgc3BlY2lmaWNpdHkuXG4gICAgICogQHJldHVybiB7aW50fSBUaGUgbnVtZXJpYyB2YWx1ZSBmb3IgdGhlIHNwZWNpZmljaXR5LlxuICAgICAqIEBtZXRob2QgdmFsdWVPZlxuICAgICAqL1xuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAodGhpcy5hICogMTAwMCkgKyAodGhpcy5iICogMTAwKSArICh0aGlzLmMgKiAxMCkgKyB0aGlzLmQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gZm9yIHNwZWNpZmljaXR5LlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBzcGVjaWZpY2l0eS5cbiAgICAgKiBAbWV0aG9kIHRvU3RyaW5nXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmEgKyBcIixcIiArIHRoaXMuYiArIFwiLFwiICsgdGhpcy5jICsgXCIsXCIgKyB0aGlzLmQ7XG4gICAgfVxuXG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNwZWNpZmljaXR5IG9mIHRoZSBnaXZlbiBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7cGFyc2VybGliLmNzcy5TZWxlY3Rvcn0gVGhlIHNlbGVjdG9yIHRvIGNhbGN1bGF0ZSBzcGVjaWZpY2l0eSBmb3IuXG4gKiBAcmV0dXJuIHtwYXJzZXJsaWIuY3NzLlNwZWNpZmljaXR5fSBUaGUgc3BlY2lmaWNpdHkgb2YgdGhlIHNlbGVjdG9yLlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBjYWxjdWxhdGVcbiAqL1xuU3BlY2lmaWNpdHkuY2FsY3VsYXRlID0gZnVuY3Rpb24oc2VsZWN0b3Ipe1xuXG4gICAgdmFyIGksIGxlbixcbiAgICAgICAgcGFydCxcbiAgICAgICAgYj0wLCBjPTAsIGQ9MDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlcyhwYXJ0KXtcblxuICAgICAgICB2YXIgaSwgaiwgbGVuLCBudW0sXG4gICAgICAgICAgICBlbGVtZW50TmFtZSA9IHBhcnQuZWxlbWVudE5hbWUgPyBwYXJ0LmVsZW1lbnROYW1lLnRleHQgOiBcIlwiLFxuICAgICAgICAgICAgbW9kaWZpZXI7XG5cbiAgICAgICAgaWYgKGVsZW1lbnROYW1lICYmIGVsZW1lbnROYW1lLmNoYXJBdChlbGVtZW50TmFtZS5sZW5ndGgtMSkgIT09IFwiKlwiKSB7XG4gICAgICAgICAgICBkKys7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGk9MCwgbGVuPXBhcnQubW9kaWZpZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgIG1vZGlmaWVyID0gcGFydC5tb2RpZmllcnNbaV07XG4gICAgICAgICAgICBzd2l0Y2gobW9kaWZpZXIudHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImF0dHJpYnV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBjKys7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcImlkXCI6XG4gICAgICAgICAgICAgICAgICAgIGIrKztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicHNldWRvXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChQc2V1ZG9zLmlzRWxlbWVudChtb2RpZmllci50ZXh0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBkKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwibm90XCI6XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaj0wLCBudW09bW9kaWZpZXIuYXJncy5sZW5ndGg7IGogPCBudW07IGorKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZXMobW9kaWZpZXIuYXJnc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGk9MCwgbGVuPXNlbGVjdG9yLnBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgcGFydCA9IHNlbGVjdG9yLnBhcnRzW2ldO1xuXG4gICAgICAgIGlmIChwYXJ0IGluc3RhbmNlb2YgU2VsZWN0b3JQYXJ0KXtcbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlcyhwYXJ0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3BlY2lmaWNpdHkoMCwgYiwgYywgZCk7XG59O1xuXG52YXIgaCA9IC9eWzAtOWEtZkEtRl0kLyxcbiAgICAvL25vbmFzY2lpID0gL15bXFx1MDA4MC1cXHVGRkZGXSQvLFxuICAgIG5sID0gL1xcbnxcXHJcXG58XFxyfFxcZi87XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEhlbHBlciBmdW5jdGlvbnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5mdW5jdGlvbiBpc0hleERpZ2l0KGMpe1xuICAgIHJldHVybiBjICE9PSBudWxsICYmIGgudGVzdChjKTtcbn1cblxuZnVuY3Rpb24gaXNEaWdpdChjKXtcbiAgICByZXR1cm4gYyAhPT0gbnVsbCAmJiAvXFxkLy50ZXN0KGMpO1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UoYyl7XG4gICAgcmV0dXJuIGMgIT09IG51bGwgJiYgL1xccy8udGVzdChjKTtcbn1cblxuZnVuY3Rpb24gaXNOZXdMaW5lKGMpe1xuICAgIHJldHVybiBjICE9PSBudWxsICYmIG5sLnRlc3QoYyk7XG59XG5cbmZ1bmN0aW9uIGlzTmFtZVN0YXJ0KGMpe1xuICAgIHJldHVybiBjICE9PSBudWxsICYmICgvW2Etel9cXHUwMDgwLVxcdUZGRkZcXFxcXS9pLnRlc3QoYykpO1xufVxuXG5mdW5jdGlvbiBpc05hbWVDaGFyKGMpe1xuICAgIHJldHVybiBjICE9PSBudWxsICYmIChpc05hbWVTdGFydChjKSB8fCAvWzAtOVxcLVxcXFxdLy50ZXN0KGMpKTtcbn1cblxuZnVuY3Rpb24gaXNJZGVudFN0YXJ0KGMpe1xuICAgIHJldHVybiBjICE9PSBudWxsICYmIChpc05hbWVTdGFydChjKSB8fCAvXFwtXFxcXC8udGVzdChjKSk7XG59XG5cbmZ1bmN0aW9uIG1peChyZWNlaXZlciwgc3VwcGxpZXIpe1xuXHRmb3IgKHZhciBwcm9wIGluIHN1cHBsaWVyKXtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN1cHBsaWVyLCBwcm9wKSl7XG5cdFx0XHRyZWNlaXZlcltwcm9wXSA9IHN1cHBsaWVyW3Byb3BdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVjZWl2ZXI7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENTUyBUb2tlbiBTdHJlYW1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4vKipcbiAqIEEgdG9rZW4gc3RyZWFtIHRoYXQgcHJvZHVjZXMgQ1NTIHRva2Vucy5cbiAqIEBwYXJhbSB7U3RyaW5nfFJlYWRlcn0gaW5wdXQgVGhlIHNvdXJjZSBvZiB0ZXh0IHRvIHRva2VuaXplLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAY2xhc3MgVG9rZW5TdHJlYW1cbiAqIEBuYW1lc3BhY2UgcGFyc2VybGliLmNzc1xuICovXG5mdW5jdGlvbiBUb2tlblN0cmVhbShpbnB1dCl7XG5cdFRva2VuU3RyZWFtQmFzZS5jYWxsKHRoaXMsIGlucHV0LCBUb2tlbnMpO1xufVxuXG5Ub2tlblN0cmVhbS5wcm90b3R5cGUgPSBtaXgobmV3IFRva2VuU3RyZWFtQmFzZSgpLCB7XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIFRva2VuU3RyZWFtQmFzZSBtZXRob2Qgb2YgdGhlIHNhbWUgbmFtZVxuICAgICAqIHRvIHByb2R1Y2UgQ1NTIHRva2Vucy5cbiAgICAgKiBAcGFyYW0ge3ZhcmlhbnR9IGNoYW5uZWwgVGhlIG5hbWUgb2YgdGhlIGNoYW5uZWwgdG8gdXNlXG4gICAgICogICAgICBmb3IgdGhlIG5leHQgdG9rZW4uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBIHRva2VuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG5leHQgdG9rZW4uXG4gICAgICogQG1ldGhvZCBfZ2V0VG9rZW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRUb2tlbjogZnVuY3Rpb24oY2hhbm5lbCl7XG5cbiAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICByZWFkZXIgPSB0aGlzLl9yZWFkZXIsXG4gICAgICAgICAgICB0b2tlbiAgID0gbnVsbCxcbiAgICAgICAgICAgIHN0YXJ0TGluZSAgID0gcmVhZGVyLmdldExpbmUoKSxcbiAgICAgICAgICAgIHN0YXJ0Q29sICAgID0gcmVhZGVyLmdldENvbCgpO1xuXG4gICAgICAgIGMgPSByZWFkZXIucmVhZCgpO1xuXG5cbiAgICAgICAgd2hpbGUoYyl7XG4gICAgICAgICAgICBzd2l0Y2goYyl7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIFBvdGVudGlhbCB0b2tlbnM6XG4gICAgICAgICAgICAgICAgICogLSBDT01NRU5UXG4gICAgICAgICAgICAgICAgICogLSBTTEFTSFxuICAgICAgICAgICAgICAgICAqIC0gQ0hBUlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNhc2UgXCIvXCI6XG5cbiAgICAgICAgICAgICAgICAgICAgaWYocmVhZGVyLnBlZWsoKSA9PT0gXCIqXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmNvbW1lbnRUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5jaGFyVG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIFBvdGVudGlhbCB0b2tlbnM6XG4gICAgICAgICAgICAgICAgICogLSBEQVNITUFUQ0hcbiAgICAgICAgICAgICAgICAgKiAtIElOQ0xVREVTXG4gICAgICAgICAgICAgICAgICogLSBQUkVGSVhNQVRDSFxuICAgICAgICAgICAgICAgICAqIC0gU1VGRklYTUFUQ0hcbiAgICAgICAgICAgICAgICAgKiAtIFNVQlNUUklOR01BVENIXG4gICAgICAgICAgICAgICAgICogLSBDSEFSXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY2FzZSBcInxcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiflwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJeXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIiRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICBpZihyZWFkZXIucGVlaygpID09PSBcIj1cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuY29tcGFyaXNvblRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmNoYXJUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIFNUUklOR1xuICAgICAgICAgICAgICAgICAqIC0gSU5WQUxJRFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnN0cmluZ1Rva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIEhBU0hcbiAgICAgICAgICAgICAgICAgKiAtIENIQVJcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYXNlIFwiI1wiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYW1lQ2hhcihyZWFkZXIucGVlaygpKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuaGFzaFRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmNoYXJUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIERPVFxuICAgICAgICAgICAgICAgICAqIC0gTlVNQkVSXG4gICAgICAgICAgICAgICAgICogLSBESU1FTlNJT05cbiAgICAgICAgICAgICAgICAgKiAtIFBFUkNFTlRBR0VcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYXNlIFwiLlwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaWdpdChyZWFkZXIucGVlaygpKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMubnVtYmVyVG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuY2hhclRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBQb3RlbnRpYWwgdG9rZW5zOlxuICAgICAgICAgICAgICAgICAqIC0gQ0RDXG4gICAgICAgICAgICAgICAgICogLSBNSU5VU1xuICAgICAgICAgICAgICAgICAqIC0gTlVNQkVSXG4gICAgICAgICAgICAgICAgICogLSBESU1FTlNJT05cbiAgICAgICAgICAgICAgICAgKiAtIFBFUkNFTlRBR0VcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYXNlIFwiLVwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBlZWsoKSA9PT0gXCItXCIpeyAgLy9jb3VsZCBiZSBjbG9zaW5nIEhUTUwtc3R5bGUgY29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmh0bWxDb21tZW50RW5kVG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYW1lU3RhcnQocmVhZGVyLnBlZWsoKSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmlkZW50T3JGdW5jdGlvblRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmNoYXJUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIElNUE9SVEFOVF9TWU1cbiAgICAgICAgICAgICAgICAgKiAtIENIQVJcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYXNlIFwiIVwiOlxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuaW1wb3J0YW50VG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgKiBBbnkgYXQta2V5d29yZCBvciBDSEFSXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY2FzZSBcIkBcIjpcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmF0UnVsZVRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIE5PVFxuICAgICAgICAgICAgICAgICAqIC0gQ0hBUlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNhc2UgXCI6XCI6XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5ub3RUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIFBvdGVudGlhbCB0b2tlbnM6XG4gICAgICAgICAgICAgICAgICogLSBDRE9cbiAgICAgICAgICAgICAgICAgKiAtIENIQVJcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjYXNlIFwiPFwiOlxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuaHRtbENvbW1lbnRTdGFydFRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgKiAtIFVOSUNPREVfUkFOR0VcbiAgICAgICAgICAgICAgICAgKiAtIFVSTFxuICAgICAgICAgICAgICAgICAqIC0gQ0hBUlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNhc2UgXCJVXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWRlci5wZWVrKCkgPT09IFwiK1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy51bmljb2RlUmFuZ2VUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAqIFBvdGVudGlhbCB0b2tlbnM6XG4gICAgICAgICAgICAgICAgICAgICAqIC0gTlVNQkVSXG4gICAgICAgICAgICAgICAgICAgICAqIC0gRElNRU5TSU9OXG4gICAgICAgICAgICAgICAgICAgICAqIC0gTEVOR1RIXG4gICAgICAgICAgICAgICAgICAgICAqIC0gRlJFUVxuICAgICAgICAgICAgICAgICAgICAgKiAtIFRJTUVcbiAgICAgICAgICAgICAgICAgICAgICogLSBFTVNcbiAgICAgICAgICAgICAgICAgICAgICogLSBFWFNcbiAgICAgICAgICAgICAgICAgICAgICogLSBBTkdMRVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGlnaXQoYykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLm51bWJlclRva2VuKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcblxuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgKiBQb3RlbnRpYWwgdG9rZW5zOlxuICAgICAgICAgICAgICAgICAgICAgKiAtIFNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLndoaXRlc3BhY2VUb2tlbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG5cbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICogUG90ZW50aWFsIHRva2VuczpcbiAgICAgICAgICAgICAgICAgICAgICogLSBJREVOVFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSWRlbnRTdGFydChjKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuaWRlbnRPckZ1bmN0aW9uVG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAqIFBvdGVudGlhbCB0b2tlbnM6XG4gICAgICAgICAgICAgICAgICAgICAqIC0gQ0hBUlxuICAgICAgICAgICAgICAgICAgICAgKiAtIFBMVVNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5jaGFyVG9rZW4oYywgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG5cblxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhpcyB0b2tlbiBpcyB3YW50ZWRcbiAgICAgICAgICAgIC8vVE9ETzogY2hlY2sgY2hhbm5lbFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRva2VuICYmIGMgPT09IG51bGwpe1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmNyZWF0ZVRva2VuKFRva2Vucy5FT0YsbnVsbCxzdGFydExpbmUsc3RhcnRDb2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNZXRob2RzIHRvIGNyZWF0ZSB0b2tlbnNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgdG9rZW4gYmFzZWQgb24gYXZhaWxhYmxlIGRhdGEgYW5kIHRoZSBjdXJyZW50XG4gICAgICogcmVhZGVyIHBvc2l0aW9uIGluZm9ybWF0aW9uLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgb3RoZXJcbiAgICAgKiBwcml2YXRlIG1ldGhvZHMgdG8gY3JlYXRlIHRva2VucyBhbmQgaXMgbmV2ZXIgY2FsbGVkIGRpcmVjdGx5LlxuICAgICAqIEBwYXJhbSB7aW50fSB0dCBUaGUgdG9rZW4gdHlwZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIHRleHQgdmFsdWUgb2YgdGhlIHRva2VuLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAoT3B0aW9uYWwpIFNwZWNpZmllcyBhIGNoYW5uZWwgcHJvcGVydHlcbiAgICAgKiAgICAgIHRvIGluZGljYXRlIHRoYXQgYSBkaWZmZXJlbnQgY2hhbm5lbCBzaG91bGQgYmUgc2Nhbm5lZFxuICAgICAqICAgICAgYW5kL29yIGEgaGlkZSBwcm9wZXJ0eSBpbmRpY2F0aW5nIHRoYXQgdGhlIHRva2VuIHNob3VsZFxuICAgICAqICAgICAgYmUgaGlkZGVuLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVUb2tlblxuICAgICAqL1xuICAgIGNyZWF0ZVRva2VuOiBmdW5jdGlvbih0dCwgdmFsdWUsIHN0YXJ0TGluZSwgc3RhcnRDb2wsIG9wdGlvbnMpe1xuICAgICAgICB2YXIgcmVhZGVyID0gdGhpcy5fcmVhZGVyO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6ICAgICAgdmFsdWUsXG4gICAgICAgICAgICB0eXBlOiAgICAgICB0dCxcbiAgICAgICAgICAgIGNoYW5uZWw6ICAgIG9wdGlvbnMuY2hhbm5lbCxcbiAgICAgICAgICAgIGVuZENoYXI6ICAgIG9wdGlvbnMuZW5kQ2hhcixcbiAgICAgICAgICAgIGhpZGU6ICAgICAgIG9wdGlvbnMuaGlkZSB8fCBmYWxzZSxcbiAgICAgICAgICAgIHN0YXJ0TGluZTogIHN0YXJ0TGluZSxcbiAgICAgICAgICAgIHN0YXJ0Q29sOiAgIHN0YXJ0Q29sLFxuICAgICAgICAgICAgZW5kTGluZTogICAgcmVhZGVyLmdldExpbmUoKSxcbiAgICAgICAgICAgIGVuZENvbDogICAgIHJlYWRlci5nZXRDb2woKVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNZXRob2RzIHRvIGNyZWF0ZSBzcGVjaWZpYyB0b2tlbnNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgdG9rZW4gZm9yIGFueSBhdC1ydWxlLiBJZiB0aGUgYXQtcnVsZSBpcyB1bmtub3duLCB0aGVuXG4gICAgICogdGhlIHRva2VuIGlzIGZvciBhIHNpbmdsZSBcIkBcIiBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpcnN0IFRoZSBmaXJzdCBjaGFyYWN0ZXIgZm9yIHRoZSB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRMaW5lIFRoZSBiZWdpbm5pbmcgbGluZSBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRDb2wgVGhlIGJlZ2lubmluZyBjb2x1bW4gZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBIHRva2VuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGF0UnVsZVRva2VuXG4gICAgICovXG4gICAgYXRSdWxlVG9rZW46IGZ1bmN0aW9uKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIHJ1bGUgICAgPSBmaXJzdCxcbiAgICAgICAgICAgIHJlYWRlciAgPSB0aGlzLl9yZWFkZXIsXG4gICAgICAgICAgICB0dCAgICAgID0gVG9rZW5zLkNIQVIsXG4gICAgICAgICAgICBpZGVudDtcblxuICAgICAgICAvKlxuICAgICAgICAgKiBGaXJzdCwgbWFyayB3aGVyZSB3ZSBhcmUuIFRoZXJlIGFyZSBvbmx5IGZvdXIgQCBydWxlcyxcbiAgICAgICAgICogc28gYW55dGhpbmcgZWxzZSBpcyByZWFsbHkganVzdCBhbiBpbnZhbGlkIHRva2VuLlxuICAgICAgICAgKiBCYXNpY2FsbHksIGlmIHRoaXMgZG9lc24ndCBtYXRjaCBvbmUgb2YgdGhlIGtub3duIEBcbiAgICAgICAgICogcnVsZXMsIGp1c3QgcmV0dXJuICdAJyBhcyBhbiB1bmtub3duIHRva2VuIGFuZCBhbGxvd1xuICAgICAgICAgKiBwYXJzaW5nIHRvIGNvbnRpbnVlIGFmdGVyIHRoYXQgcG9pbnQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkZXIubWFyaygpO1xuXG4gICAgICAgIC8vdHJ5IHRvIGZpbmQgdGhlIGF0LWtleXdvcmRcbiAgICAgICAgaWRlbnQgPSB0aGlzLnJlYWROYW1lKCk7XG4gICAgICAgIHJ1bGUgPSBmaXJzdCArIGlkZW50O1xuICAgICAgICB0dCA9IFRva2Vucy50eXBlKHJ1bGUudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgICAgLy9pZiBpdCdzIG5vdCB2YWxpZCwgdXNlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb25seSBhbmQgcmVzZXQgdGhlIHJlYWRlclxuICAgICAgICBpZiAodHQgPT09IFRva2Vucy5DSEFSIHx8IHR0ID09PSBUb2tlbnMuVU5LTk9XTil7XG4gICAgICAgICAgICBpZiAocnVsZS5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5VTktOT1dOX1NZTTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHQgPSBUb2tlbnMuQ0hBUjtcbiAgICAgICAgICAgICAgICBydWxlID0gZmlyc3Q7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUb2tlbih0dCwgcnVsZSwgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgY2hhcmFjdGVyIHRva2VuIGJhc2VkIG9uIHRoZSBnaXZlbiBjaGFyYWN0ZXJcbiAgICAgKiBhbmQgbG9jYXRpb24gaW4gdGhlIHN0cmVhbS4gSWYgdGhlcmUncyBhIHNwZWNpYWwgKG5vbi1zdGFuZGFyZClcbiAgICAgKiB0b2tlbiBuYW1lLCB0aGlzIGlzIHVzZWQ7IG90aGVyd2lzZSBDSEFSIGlzIHVzZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGMgVGhlIGNoYXJhY3RlciBmb3IgdGhlIHRva2VuLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgdG9rZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY2hhclRva2VuXG4gICAgICovXG4gICAgY2hhclRva2VuOiBmdW5jdGlvbihjLCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIHR0ID0gVG9rZW5zLnR5cGUoYyk7XG4gICAgICAgIHZhciBvcHRzID0ge307XG5cbiAgICAgICAgaWYgKHR0ID09PSAtMSl7XG4gICAgICAgICAgICB0dCA9IFRva2Vucy5DSEFSO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0cy5lbmRDaGFyID0gVG9rZW5zW3R0XS5lbmRDaGFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVG9rZW4odHQsIGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wsIG9wdHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIGNoYXJhY3RlciB0b2tlbiBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2hhcmFjdGVyXG4gICAgICogYW5kIGxvY2F0aW9uIGluIHRoZSBzdHJlYW0uIElmIHRoZXJlJ3MgYSBzcGVjaWFsIChub24tc3RhbmRhcmQpXG4gICAgICogdG9rZW4gbmFtZSwgdGhpcyBpcyB1c2VkOyBvdGhlcndpc2UgQ0hBUiBpcyB1c2VkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaXJzdCBUaGUgZmlyc3QgY2hhcmFjdGVyIGZvciB0aGUgdG9rZW4uXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0TGluZSBUaGUgYmVnaW5uaW5nIGxpbmUgZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0Q29sIFRoZSBiZWdpbm5pbmcgY29sdW1uIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjb21tZW50VG9rZW5cbiAgICAgKi9cbiAgICBjb21tZW50VG9rZW46IGZ1bmN0aW9uKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLnJlYWRDb21tZW50KGZpcnN0KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUb2tlbihUb2tlbnMuQ09NTUVOVCwgY29tbWVudCwgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgY29tcGFyaXNvbiB0b2tlbiBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2hhcmFjdGVyXG4gICAgICogYW5kIGxvY2F0aW9uIGluIHRoZSBzdHJlYW0uIFRoZSBuZXh0IGNoYXJhY3RlciBtdXN0IGJlXG4gICAgICogcmVhZCBhbmQgaXMgYWxyZWFkeSBrbm93biB0byBiZSBhbiBlcXVhbHMgc2lnbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYyBUaGUgY2hhcmFjdGVyIGZvciB0aGUgdG9rZW4uXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0TGluZSBUaGUgYmVnaW5uaW5nIGxpbmUgZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0Q29sIFRoZSBiZWdpbm5pbmcgY29sdW1uIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjb21wYXJpc29uVG9rZW5cbiAgICAgKi9cbiAgICBjb21wYXJpc29uVG9rZW46IGZ1bmN0aW9uKGMsIHN0YXJ0TGluZSwgc3RhcnRDb2wpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIGNvbXBhcmlzb24gID0gYyArIHJlYWRlci5yZWFkKCksXG4gICAgICAgICAgICB0dCAgICAgID0gVG9rZW5zLnR5cGUoY29tcGFyaXNvbikgfHwgVG9rZW5zLkNIQVI7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVG9rZW4odHQsIGNvbXBhcmlzb24sIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIGhhc2ggdG9rZW4gYmFzZWQgb24gdGhlIHNwZWNpZmllZCBpbmZvcm1hdGlvbi4gVGhlXG4gICAgICogZmlyc3QgY2hhcmFjdGVyIHByb3ZpZGVkIGlzIHRoZSBwb3VuZCBzaWduICgjKSBhbmQgdGhlbiB0aGlzXG4gICAgICogbWV0aG9kIHJlYWRzIGEgbmFtZSBhZnRlcndhcmQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpcnN0IFRoZSBmaXJzdCBjaGFyYWN0ZXIgKCMpIGluIHRoZSBoYXNoIG5hbWUuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0TGluZSBUaGUgYmVnaW5uaW5nIGxpbmUgZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0Q29sIFRoZSBiZWdpbm5pbmcgY29sdW1uIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBoYXNoVG9rZW5cbiAgICAgKi9cbiAgICBoYXNoVG9rZW46IGZ1bmN0aW9uKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIG5hbWUgICAgPSB0aGlzLnJlYWROYW1lKGZpcnN0KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUb2tlbihUb2tlbnMuSEFTSCwgbmFtZSwgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgQ0RPIG9yIENIQVIgdG9rZW4gYmFzZWQgb24gdGhlIHNwZWNpZmllZCBpbmZvcm1hdGlvbi4gVGhlXG4gICAgICogZmlyc3QgY2hhcmFjdGVyIGlzIHByb3ZpZGVkIGFuZCB0aGUgcmVzdCBpcyByZWFkIGJ5IHRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmVcbiAgICAgKiB0aGUgY29ycmVjdCB0b2tlbiB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpcnN0IFRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIHRva2VuLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgdG9rZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgaHRtbENvbW1lbnRTdGFydFRva2VuXG4gICAgICovXG4gICAgaHRtbENvbW1lbnRTdGFydFRva2VuOiBmdW5jdGlvbihmaXJzdCwgc3RhcnRMaW5lLCBzdGFydENvbCl7XG4gICAgICAgIHZhciByZWFkZXIgICAgICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHRleHQgICAgICAgID0gZmlyc3Q7XG5cbiAgICAgICAgcmVhZGVyLm1hcmsoKTtcbiAgICAgICAgdGV4dCArPSByZWFkZXIucmVhZENvdW50KDMpO1xuXG4gICAgICAgIGlmICh0ZXh0ID09PSBcIjwhLS1cIil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUb2tlbihUb2tlbnMuQ0RPLCB0ZXh0LCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlYWRlci5yZXNldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhclRva2VuKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIENEQyBvciBDSEFSIHRva2VuIGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgaW5mb3JtYXRpb24uIFRoZVxuICAgICAqIGZpcnN0IGNoYXJhY3RlciBpcyBwcm92aWRlZCBhbmQgdGhlIHJlc3QgaXMgcmVhZCBieSB0aGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lXG4gICAgICogdGhlIGNvcnJlY3QgdG9rZW4gdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaXJzdCBUaGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRMaW5lIFRoZSBiZWdpbm5pbmcgbGluZSBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRDb2wgVGhlIGJlZ2lubmluZyBjb2x1bW4gZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBIHRva2VuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGh0bWxDb21tZW50RW5kVG9rZW5cbiAgICAgKi9cbiAgICBodG1sQ29tbWVudEVuZFRva2VuOiBmdW5jdGlvbihmaXJzdCwgc3RhcnRMaW5lLCBzdGFydENvbCl7XG4gICAgICAgIHZhciByZWFkZXIgICAgICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHRleHQgICAgICAgID0gZmlyc3Q7XG5cbiAgICAgICAgcmVhZGVyLm1hcmsoKTtcbiAgICAgICAgdGV4dCArPSByZWFkZXIucmVhZENvdW50KDIpO1xuXG4gICAgICAgIGlmICh0ZXh0ID09PSBcIi0tPlwiKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKFRva2Vucy5DREMsIHRleHQsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVhZGVyLnJlc2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFyVG9rZW4oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGFuIElERU5UIG9yIEZVTkNUSU9OIHRva2VuIGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgaW5mb3JtYXRpb24uIFRoZVxuICAgICAqIGZpcnN0IGNoYXJhY3RlciBpcyBwcm92aWRlZCBhbmQgdGhlIHJlc3QgaXMgcmVhZCBieSB0aGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lXG4gICAgICogdGhlIGNvcnJlY3QgdG9rZW4gdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaXJzdCBUaGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSBpZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgdG9rZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgaWRlbnRPckZ1bmN0aW9uVG9rZW5cbiAgICAgKi9cbiAgICBpZGVudE9yRnVuY3Rpb25Ub2tlbjogZnVuY3Rpb24oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIGlkZW50ICAgPSB0aGlzLnJlYWROYW1lKGZpcnN0KSxcbiAgICAgICAgICAgIHR0ICAgICAgPSBUb2tlbnMuSURFTlQsXG4gICAgICAgICAgICB1cmlGbnMgID0gW1widXJsKFwiLCBcInVybC1wcmVmaXgoXCIsIFwiZG9tYWluKFwiXTtcblxuICAgICAgICAvL2lmIHRoZXJlJ3MgYSBsZWZ0IHBhcmVuIGltbWVkaWF0ZWx5IGFmdGVyLCBpdCdzIGEgVVJJIG9yIGZ1bmN0aW9uXG4gICAgICAgIGlmIChyZWFkZXIucGVlaygpID09PSBcIihcIil7XG4gICAgICAgICAgICBpZGVudCArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKHVyaUZucy5pbmRleE9mKGlkZW50LnRvTG93ZXJDYXNlKCkpID4gLTEpe1xuICAgICAgICAgICAgICAgIHR0ID0gVG9rZW5zLlVSSTtcbiAgICAgICAgICAgICAgICBpZGVudCA9IHRoaXMucmVhZFVSSShpZGVudCk7XG5cbiAgICAgICAgICAgICAgICAvL2RpZG4ndCBmaW5kIGEgdmFsaWQgVVJMIG9yIHRoZXJlJ3Mgbm8gY2xvc2luZyBwYXJlblxuICAgICAgICAgICAgICAgIGlmICh1cmlGbnMuaW5kZXhPZihpZGVudC50b0xvd2VyQ2FzZSgpKSA+IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgdHQgPSBUb2tlbnMuRlVOQ1RJT047XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5GVU5DVElPTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkZXIucGVlaygpID09PSBcIjpcIil7ICAvL21pZ2h0IGJlIGFuIElFIGZ1bmN0aW9uXG5cbiAgICAgICAgICAgIC8vSUUtc3BlY2lmaWMgZnVuY3Rpb25zIGFsd2F5cyBiZWluZyB3aXRoIHByb2dpZDpcbiAgICAgICAgICAgIGlmIChpZGVudC50b0xvd2VyQ2FzZSgpID09PSBcInByb2dpZFwiKXtcbiAgICAgICAgICAgICAgICBpZGVudCArPSByZWFkZXIucmVhZFRvKFwiKFwiKTtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5JRV9GVU5DVElPTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKHR0LCBpZGVudCwgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGFuIElNUE9SVEFOVF9TWU0gb3IgQ0hBUiB0b2tlbiBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIGluZm9ybWF0aW9uLiBUaGVcbiAgICAgKiBmaXJzdCBjaGFyYWN0ZXIgaXMgcHJvdmlkZWQgYW5kIHRoZSByZXN0IGlzIHJlYWQgYnkgdGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZVxuICAgICAqIHRoZSBjb3JyZWN0IHRva2VuIHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlyc3QgVGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgdG9rZW4uXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0TGluZSBUaGUgYmVnaW5uaW5nIGxpbmUgZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0Q29sIFRoZSBiZWdpbm5pbmcgY29sdW1uIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBpbXBvcnRhbnRUb2tlblxuICAgICAqL1xuICAgIGltcG9ydGFudFRva2VuOiBmdW5jdGlvbihmaXJzdCwgc3RhcnRMaW5lLCBzdGFydENvbCl7XG4gICAgICAgIHZhciByZWFkZXIgICAgICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIGltcG9ydGFudCAgID0gZmlyc3QsXG4gICAgICAgICAgICB0dCAgICAgICAgICA9IFRva2Vucy5DSEFSLFxuICAgICAgICAgICAgdGVtcCxcbiAgICAgICAgICAgIGM7XG5cbiAgICAgICAgcmVhZGVyLm1hcmsoKTtcbiAgICAgICAgYyA9IHJlYWRlci5yZWFkKCk7XG5cbiAgICAgICAgd2hpbGUoYyl7XG5cbiAgICAgICAgICAgIC8vdGhlcmUgY2FuIGJlIGEgY29tbWVudCBpbiBoZXJlXG4gICAgICAgICAgICBpZiAoYyA9PT0gXCIvXCIpe1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXNuJ3QgYSBzdGFyLCB0aGVuIHRoaXMgaXNuJ3QgYSB2YWxpZCAhaW1wb3J0YW50IHRva2VuXG4gICAgICAgICAgICAgICAgaWYgKHJlYWRlci5wZWVrKCkgIT09IFwiKlwiKXtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHRoaXMucmVhZENvbW1lbnQoYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID09PSBcIlwiKXsgICAgLy9icm9rZW4hXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKXtcbiAgICAgICAgICAgICAgICBpbXBvcnRhbnQgKz0gYyArIHRoaXMucmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL2kvaS50ZXN0KGMpKXtcbiAgICAgICAgICAgICAgICB0ZW1wID0gcmVhZGVyLnJlYWRDb3VudCg4KTtcbiAgICAgICAgICAgICAgICBpZiAoL21wb3J0YW50L2kudGVzdCh0ZW1wKSl7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydGFudCArPSBjICsgdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgdHQgPSBUb2tlbnMuSU1QT1JUQU5UX1NZTTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhazsgIC8vd2UncmUgZG9uZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYyA9IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHQgPT09IFRva2Vucy5DSEFSKXtcbiAgICAgICAgICAgIHJlYWRlci5yZXNldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhclRva2VuKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKHR0LCBpbXBvcnRhbnQsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICB9XG5cblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIE5PVCBvciBDSEFSIHRva2VuIGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgaW5mb3JtYXRpb24uIFRoZVxuICAgICAqIGZpcnN0IGNoYXJhY3RlciBpcyBwcm92aWRlZCBhbmQgdGhlIHJlc3QgaXMgcmVhZCBieSB0aGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lXG4gICAgICogdGhlIGNvcnJlY3QgdG9rZW4gdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaXJzdCBUaGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRMaW5lIFRoZSBiZWdpbm5pbmcgbGluZSBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnRDb2wgVGhlIGJlZ2lubmluZyBjb2x1bW4gZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBIHRva2VuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIG5vdFRva2VuXG4gICAgICovXG4gICAgbm90VG9rZW46IGZ1bmN0aW9uKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIHJlYWRlciAgICAgID0gdGhpcy5fcmVhZGVyLFxuICAgICAgICAgICAgdGV4dCAgICAgICAgPSBmaXJzdDtcblxuICAgICAgICByZWFkZXIubWFyaygpO1xuICAgICAgICB0ZXh0ICs9IHJlYWRlci5yZWFkQ291bnQoNCk7XG5cbiAgICAgICAgaWYgKHRleHQudG9Mb3dlckNhc2UoKSA9PT0gXCI6bm90KFwiKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKFRva2Vucy5OT1QsIHRleHQsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVhZGVyLnJlc2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFyVG9rZW4oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgbnVtYmVyIHRva2VuIGJhc2VkIG9uIHRoZSBnaXZlbiBjaGFyYWN0ZXJcbiAgICAgKiBhbmQgbG9jYXRpb24gaW4gdGhlIHN0cmVhbS4gVGhpcyBtYXkgcmV0dXJuIGEgdG9rZW4gb2ZcbiAgICAgKiBOVU1CRVIsIEVNUywgRVhTLCBMRU5HVEgsIEFOR0xFLCBUSU1FLCBGUkVRLCBESU1FTlNJT04sXG4gICAgICogb3IgUEVSQ0VOVEFHRS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlyc3QgVGhlIGZpcnN0IGNoYXJhY3RlciBmb3IgdGhlIHRva2VuLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgdG9rZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgbnVtYmVyVG9rZW5cbiAgICAgKi9cbiAgICBudW1iZXJUb2tlbjogZnVuY3Rpb24oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHZhbHVlICAgPSB0aGlzLnJlYWROdW1iZXIoZmlyc3QpLFxuICAgICAgICAgICAgaWRlbnQsXG4gICAgICAgICAgICB0dCAgICAgID0gVG9rZW5zLk5VTUJFUixcbiAgICAgICAgICAgIGMgICAgICAgPSByZWFkZXIucGVlaygpO1xuXG4gICAgICAgIGlmIChpc0lkZW50U3RhcnQoYykpe1xuICAgICAgICAgICAgaWRlbnQgPSB0aGlzLnJlYWROYW1lKHJlYWRlci5yZWFkKCkpO1xuICAgICAgICAgICAgdmFsdWUgKz0gaWRlbnQ7XG5cbiAgICAgICAgICAgIGlmICgvXmVtJHxeZXgkfF5weCR8XmdkJHxecmVtJHxednckfF52aCR8XnZtYXgkfF52bWluJHxeY2gkfF5jbSR8Xm1tJHxeaW4kfF5wdCR8XnBjJC9pLnRlc3QoaWRlbnQpKXtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5MRU5HVEg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eZGVnfF5yYWQkfF5ncmFkJC9pLnRlc3QoaWRlbnQpKXtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5BTkdMRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL15tcyR8XnMkL2kudGVzdChpZGVudCkpe1xuICAgICAgICAgICAgICAgIHR0ID0gVG9rZW5zLlRJTUU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eaHokfF5raHokL2kudGVzdChpZGVudCkpe1xuICAgICAgICAgICAgICAgIHR0ID0gVG9rZW5zLkZSRVE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eZHBpJHxeZHBjbSQvaS50ZXN0KGlkZW50KSl7XG4gICAgICAgICAgICAgICAgdHQgPSBUb2tlbnMuUkVTT0xVVElPTjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHQgPSBUb2tlbnMuRElNRU5TSU9OO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIlXCIpe1xuICAgICAgICAgICAgdmFsdWUgKz0gcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIHR0ID0gVG9rZW5zLlBFUkNFTlRBR0U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUb2tlbih0dCwgdmFsdWUsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHN0cmluZyB0b2tlbiBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2hhcmFjdGVyXG4gICAgICogYW5kIGxvY2F0aW9uIGluIHRoZSBzdHJlYW0uIFNpbmNlIHN0cmluZ3MgbWF5IGJlIGluZGljYXRlZFxuICAgICAqIGJ5IHNpbmdsZSBvciBkb3VibGUgcXVvdGVzLCBhIGZhaWx1cmUgdG8gbWF0Y2ggc3RhcnRpbmdcbiAgICAgKiBhbmQgZW5kaW5nIHF1b3RlcyByZXN1bHRzIGluIGFuIElOVkFMSUQgdG9rZW4gYmVpbmcgZ2VuZXJhdGVkLlxuICAgICAqIFRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBpcyBwYXNzZWQgaW4gYW5kIHRoZW5cbiAgICAgKiB0aGUgcmVzdCBhcmUgcmVhZCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBmaW5hbCBxdW90YXRpb24gbWFyay5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlyc3QgVGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydExpbmUgVGhlIGJlZ2lubmluZyBsaW5lIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSB7aW50fSBzdGFydENvbCBUaGUgYmVnaW5uaW5nIGNvbHVtbiBmb3IgdGhlIGNoYXJhY3Rlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgdG9rZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2Qgc3RyaW5nVG9rZW5cbiAgICAgKi9cbiAgICBzdHJpbmdUb2tlbjogZnVuY3Rpb24oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpe1xuICAgICAgICB2YXIgZGVsaW0gICA9IGZpcnN0LFxuICAgICAgICAgICAgc3RyaW5nICA9IGZpcnN0LFxuICAgICAgICAgICAgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHByZXYgICAgPSBmaXJzdCxcbiAgICAgICAgICAgIHR0ICAgICAgPSBUb2tlbnMuU1RSSU5HLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5yZWFkKCk7XG5cbiAgICAgICAgd2hpbGUoYyl7XG4gICAgICAgICAgICBzdHJpbmcgKz0gYztcblxuICAgICAgICAgICAgLy9pZiB0aGUgZGVsaW1pdGVyIGlzIGZvdW5kIHdpdGggYW4gZXNjYXBlbWVudCwgd2UncmUgZG9uZS5cbiAgICAgICAgICAgIGlmIChjID09PSBkZWxpbSAmJiBwcmV2ICE9PSBcIlxcXFxcIil7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhIG5ld2xpbmUgd2l0aG91dCBhbiBlc2NhcGVtZW50LCBpdCdzIGFuIGludmFsaWQgc3RyaW5nXG4gICAgICAgICAgICBpZiAoaXNOZXdMaW5lKHJlYWRlci5wZWVrKCkpICYmIGMgIT09IFwiXFxcXFwiKXtcbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5JTlZBTElEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3NhdmUgcHJldmlvdXMgYW5kIGdldCBuZXh0XG4gICAgICAgICAgICBwcmV2ID0gYztcbiAgICAgICAgICAgIGMgPSByZWFkZXIucmVhZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiBjIGlzIG51bGwsIHRoYXQgbWVhbnMgd2UncmUgb3V0IG9mIGlucHV0IGFuZCB0aGUgc3RyaW5nIHdhcyBuZXZlciBjbG9zZWRcbiAgICAgICAgaWYgKGMgPT09IG51bGwpe1xuICAgICAgICAgICAgdHQgPSBUb2tlbnMuSU5WQUxJRDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKHR0LCBzdHJpbmcsIHN0YXJ0TGluZSwgc3RhcnRDb2wpO1xuICAgIH0sXG5cbiAgICB1bmljb2RlUmFuZ2VUb2tlbjogZnVuY3Rpb24oZmlyc3QsIHN0YXJ0TGluZSwgc3RhcnRDb2wpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHZhbHVlICAgPSBmaXJzdCxcbiAgICAgICAgICAgIHRlbXAsXG4gICAgICAgICAgICB0dCAgICAgID0gVG9rZW5zLkNIQVI7XG5cbiAgICAgICAgLy90aGVuIGl0IHNob3VsZCBiZSBhIHVuaWNvZGUgcmFuZ2VcbiAgICAgICAgaWYgKHJlYWRlci5wZWVrKCkgPT09IFwiK1wiKXtcbiAgICAgICAgICAgIHJlYWRlci5tYXJrKCk7XG4gICAgICAgICAgICB2YWx1ZSArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5yZWFkVW5pY29kZVJhbmdlUGFydCh0cnVlKTtcblxuICAgICAgICAgICAgLy9lbnN1cmUgdGhlcmUncyBhbiBhY3R1YWwgdW5pY29kZSByYW5nZSBoZXJlXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVzZXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICB0dCA9IFRva2Vucy5VTklDT0RFX1JBTkdFO1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGVyZSdzIGEgPyBpbiB0aGUgZmlyc3QgcGFydCwgdGhlcmUgY2FuJ3QgYmUgYSBzZWNvbmQgcGFydFxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiP1wiKSA9PT0gLTEpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWFkZXIucGVlaygpID09PSBcIi1cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIubWFyaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wICs9IHRoaXMucmVhZFVuaWNvZGVSYW5nZVBhcnQoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3Mgbm90IGFub3RoZXIgdmFsdWUsIGJhY2sgdXAgYW5kIGp1c3QgdGFrZSB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHRlbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKHR0LCB2YWx1ZSwgc3RhcnRMaW5lLCBzdGFydENvbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgUyB0b2tlbiBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIGluZm9ybWF0aW9uLiBTaW5jZSB3aGl0ZXNwYWNlXG4gICAgICogbWF5IGhhdmUgbXVsdGlwbGUgY2hhcmFjdGVycywgdGhpcyBjb25zdW1lcyBhbGwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG4gICAgICogaW50byBhIHNpbmdsZSB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlyc3QgVGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgdG9rZW4uXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0TGluZSBUaGUgYmVnaW5uaW5nIGxpbmUgZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIHtpbnR9IHN0YXJ0Q29sIFRoZSBiZWdpbm5pbmcgY29sdW1uIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSB0b2tlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCB3aGl0ZXNwYWNlVG9rZW5cbiAgICAgKi9cbiAgICB3aGl0ZXNwYWNlVG9rZW46IGZ1bmN0aW9uKGZpcnN0LCBzdGFydExpbmUsIHN0YXJ0Q29sKXtcbiAgICAgICAgdmFyIHZhbHVlICAgPSBmaXJzdCArIHRoaXMucmVhZFdoaXRlc3BhY2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVG9rZW4oVG9rZW5zLlMsIHZhbHVlLCBzdGFydExpbmUsIHN0YXJ0Q29sKTtcbiAgICB9LFxuXG5cblxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTWV0aG9kcyB0byByZWFkIHZhbHVlcyBmcm9tIHRoZSBzdHJpbmcgc3RyZWFtXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICByZWFkVW5pY29kZVJhbmdlUGFydDogZnVuY3Rpb24oYWxsb3dRdWVzdGlvbk1hcmspe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHBhcnQgPSBcIlwiLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5wZWVrKCk7XG5cbiAgICAgICAgLy9maXJzdCByZWFkIGhleCBkaWdpdHNcbiAgICAgICAgd2hpbGUoaXNIZXhEaWdpdChjKSAmJiBwYXJ0Lmxlbmd0aCA8IDYpe1xuICAgICAgICAgICAgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIHBhcnQgKz0gYztcbiAgICAgICAgICAgIGMgPSByZWFkZXIucGVlaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGVuIHJlYWQgcXVlc3Rpb24gbWFya3MgaWYgYWxsb3dlZFxuICAgICAgICBpZiAoYWxsb3dRdWVzdGlvbk1hcmspe1xuICAgICAgICAgICAgd2hpbGUoYyA9PT0gXCI/XCIgJiYgcGFydC5sZW5ndGggPCA2KXtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIHBhcnQgKz0gYztcbiAgICAgICAgICAgICAgICBjID0gcmVhZGVyLnBlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vdGhlcmUgY2FuJ3QgYmUgYW55IG90aGVyIGNoYXJhY3RlcnMgYWZ0ZXIgdGhpcyBwb2ludFxuXG4gICAgICAgIHJldHVybiBwYXJ0O1xuICAgIH0sXG5cbiAgICByZWFkV2hpdGVzcGFjZTogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHJlYWRlciAgPSB0aGlzLl9yZWFkZXIsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlID0gXCJcIixcbiAgICAgICAgICAgIGMgICAgICAgPSByZWFkZXIucGVlaygpO1xuXG4gICAgICAgIHdoaWxlKGlzV2hpdGVzcGFjZShjKSl7XG4gICAgICAgICAgICByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgd2hpdGVzcGFjZSArPSBjO1xuICAgICAgICAgICAgYyA9IHJlYWRlci5wZWVrKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd2hpdGVzcGFjZTtcbiAgICB9LFxuICAgIHJlYWROdW1iZXI6IGZ1bmN0aW9uKGZpcnN0KXtcbiAgICAgICAgdmFyIHJlYWRlciAgPSB0aGlzLl9yZWFkZXIsXG4gICAgICAgICAgICBudW1iZXIgID0gZmlyc3QsXG4gICAgICAgICAgICBoYXNEb3QgID0gKGZpcnN0ID09PSBcIi5cIiksXG4gICAgICAgICAgICBjICAgICAgID0gcmVhZGVyLnBlZWsoKTtcblxuXG4gICAgICAgIHdoaWxlKGMpe1xuICAgICAgICAgICAgaWYgKGlzRGlnaXQoYykpe1xuICAgICAgICAgICAgICAgIG51bWJlciArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIi5cIil7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0RvdCl7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0RvdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG51bWJlciArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGMgPSByZWFkZXIucGVlaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9LFxuICAgIHJlYWRTdHJpbmc6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciByZWFkZXIgID0gdGhpcy5fcmVhZGVyLFxuICAgICAgICAgICAgZGVsaW0gICA9IHJlYWRlci5yZWFkKCksXG4gICAgICAgICAgICBzdHJpbmcgID0gZGVsaW0sXG4gICAgICAgICAgICBwcmV2ICAgID0gZGVsaW0sXG4gICAgICAgICAgICBjICAgICAgID0gcmVhZGVyLnBlZWsoKTtcblxuICAgICAgICB3aGlsZShjKXtcbiAgICAgICAgICAgIGMgPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgc3RyaW5nICs9IGM7XG5cbiAgICAgICAgICAgIC8vaWYgdGhlIGRlbGltaXRlciBpcyBmb3VuZCB3aXRoIGFuIGVzY2FwZW1lbnQsIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICBpZiAoYyA9PT0gZGVsaW0gJiYgcHJldiAhPT0gXCJcXFxcXCIpe1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYSBuZXdsaW5lIHdpdGhvdXQgYW4gZXNjYXBlbWVudCwgaXQncyBhbiBpbnZhbGlkIHN0cmluZ1xuICAgICAgICAgICAgaWYgKGlzTmV3TGluZShyZWFkZXIucGVlaygpKSAmJiBjICE9PSBcIlxcXFxcIil7XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gXCJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zYXZlIHByZXZpb3VzIGFuZCBnZXQgbmV4dFxuICAgICAgICAgICAgcHJldiA9IGM7XG4gICAgICAgICAgICBjID0gcmVhZGVyLnBlZWsoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgYyBpcyBudWxsLCB0aGF0IG1lYW5zIHdlJ3JlIG91dCBvZiBpbnB1dCBhbmQgdGhlIHN0cmluZyB3YXMgbmV2ZXIgY2xvc2VkXG4gICAgICAgIGlmIChjID09PSBudWxsKXtcbiAgICAgICAgICAgIHN0cmluZyA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH0sXG4gICAgcmVhZFVSSTogZnVuY3Rpb24oZmlyc3Qpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIHVyaSAgICAgPSBmaXJzdCxcbiAgICAgICAgICAgIGlubmVyICAgPSBcIlwiLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5wZWVrKCk7XG5cbiAgICAgICAgcmVhZGVyLm1hcmsoKTtcblxuICAgICAgICAvL3NraXAgd2hpdGVzcGFjZSBiZWZvcmVcbiAgICAgICAgd2hpbGUoYyAmJiBpc1doaXRlc3BhY2UoYykpe1xuICAgICAgICAgICAgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIGMgPSByZWFkZXIucGVlaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pdCdzIGEgc3RyaW5nXG4gICAgICAgIGlmIChjID09PSBcIidcIiB8fCBjID09PSBcIlxcXCJcIil7XG4gICAgICAgICAgICBpbm5lciA9IHRoaXMucmVhZFN0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5uZXIgPSB0aGlzLnJlYWRVUkwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMgPSByZWFkZXIucGVlaygpO1xuXG4gICAgICAgIC8vc2tpcCB3aGl0ZXNwYWNlIGFmdGVyXG4gICAgICAgIHdoaWxlKGMgJiYgaXNXaGl0ZXNwYWNlKGMpKXtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICBjID0gcmVhZGVyLnBlZWsoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlcmUgd2FzIG5vIGlubmVyIHZhbHVlIG9yIHRoZSBuZXh0IGNoYXJhY3RlciBpc24ndCBjbG9zaW5nIHBhcmVuLCBpdCdzIG5vdCBhIFVSSVxuICAgICAgICBpZiAoaW5uZXIgPT09IFwiXCIgfHwgYyAhPT0gXCIpXCIpe1xuICAgICAgICAgICAgdXJpID0gZmlyc3Q7XG4gICAgICAgICAgICByZWFkZXIucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVyaSArPSBpbm5lciArIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJpO1xuICAgIH0sXG4gICAgcmVhZFVSTDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHJlYWRlciAgPSB0aGlzLl9yZWFkZXIsXG4gICAgICAgICAgICB1cmwgICAgID0gXCJcIixcbiAgICAgICAgICAgIGMgICAgICAgPSByZWFkZXIucGVlaygpO1xuXG4gICAgICAgIC8vVE9ETzogQ2hlY2sgZm9yIGVzY2FwZSBhbmQgbm9uYXNjaWlcbiAgICAgICAgd2hpbGUgKC9eWyEjJCUmXFxcXCotfl0kLy50ZXN0KGMpKXtcbiAgICAgICAgICAgIHVybCArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgYyA9IHJlYWRlci5wZWVrKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsO1xuXG4gICAgfSxcbiAgICByZWFkTmFtZTogZnVuY3Rpb24oZmlyc3Qpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIGlkZW50ICAgPSBmaXJzdCB8fCBcIlwiLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5wZWVrKCk7XG5cbiAgICAgICAgd2hpbGUodHJ1ZSl7XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCJcXFxcXCIpe1xuICAgICAgICAgICAgICAgIGlkZW50ICs9IHRoaXMucmVhZEVzY2FwZShyZWFkZXIucmVhZCgpKTtcbiAgICAgICAgICAgICAgICBjID0gcmVhZGVyLnBlZWsoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihjICYmIGlzTmFtZUNoYXIoYykpe1xuICAgICAgICAgICAgICAgIGlkZW50ICs9IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgYyA9IHJlYWRlci5wZWVrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkZW50O1xuICAgIH0sXG5cbiAgICByZWFkRXNjYXBlOiBmdW5jdGlvbihmaXJzdCl7XG4gICAgICAgIHZhciByZWFkZXIgID0gdGhpcy5fcmVhZGVyLFxuICAgICAgICAgICAgY3NzRXNjYXBlID0gZmlyc3QgfHwgXCJcIixcbiAgICAgICAgICAgIGkgICAgICAgPSAwLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5wZWVrKCk7XG5cbiAgICAgICAgaWYgKGlzSGV4RGlnaXQoYykpe1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNzc0VzY2FwZSArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGMgPSByZWFkZXIucGVlaygpO1xuICAgICAgICAgICAgfSB3aGlsZShjICYmIGlzSGV4RGlnaXQoYykgJiYgKytpIDwgNik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3NzRXNjYXBlLmxlbmd0aCA9PT0gMyAmJiAvXFxzLy50ZXN0KGMpIHx8XG4gICAgICAgICAgICBjc3NFc2NhcGUubGVuZ3RoID09PSA3IHx8IGNzc0VzY2FwZS5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjID0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjc3NFc2NhcGUgKyBjO1xuICAgIH0sXG5cbiAgICByZWFkQ29tbWVudDogZnVuY3Rpb24oZmlyc3Qpe1xuICAgICAgICB2YXIgcmVhZGVyICA9IHRoaXMuX3JlYWRlcixcbiAgICAgICAgICAgIGNvbW1lbnQgPSBmaXJzdCB8fCBcIlwiLFxuICAgICAgICAgICAgYyAgICAgICA9IHJlYWRlci5yZWFkKCk7XG5cbiAgICAgICAgaWYgKGMgPT09IFwiKlwiKXtcbiAgICAgICAgICAgIHdoaWxlKGMpe1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gYztcblxuICAgICAgICAgICAgICAgIC8vbG9vayBmb3IgZW5kIG9mIGNvbW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoY29tbWVudC5sZW5ndGggPiAyICYmIGMgPT09IFwiKlwiICYmIHJlYWRlci5wZWVrKCkgPT09IFwiL1wiKXtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjID0gcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgfVxufSk7XG5cbnZhciBUb2tlbnMgID0gW1xuXG4gICAgLypcbiAgICAgKiBUaGUgZm9sbG93aW5nIHRva2VuIG5hbWVzIGFyZSBkZWZpbmVkIGluIENTUzMgR3JhbW1hcjogaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2xleGljYWxcbiAgICAgKi9cblxuICAgIC8vSFRNTC1zdHlsZSBjb21tZW50c1xuICAgIHsgbmFtZTogXCJDRE9cIn0sXG4gICAgeyBuYW1lOiBcIkNEQ1wifSxcblxuICAgIC8vaWdub3JhYmxlc1xuICAgIHsgbmFtZTogXCJTXCIsIHdoaXRlc3BhY2U6IHRydWUvKiwgY2hhbm5lbDogXCJ3c1wiKi99LFxuICAgIHsgbmFtZTogXCJDT01NRU5UXCIsIGNvbW1lbnQ6IHRydWUsIGhpZGU6IHRydWUsIGNoYW5uZWw6IFwiY29tbWVudFwiIH0sXG5cbiAgICAvL2F0dHJpYnV0ZSBlcXVhbGl0eVxuICAgIHsgbmFtZTogXCJJTkNMVURFU1wiLCB0ZXh0OiBcIn49XCJ9LFxuICAgIHsgbmFtZTogXCJEQVNITUFUQ0hcIiwgdGV4dDogXCJ8PVwifSxcbiAgICB7IG5hbWU6IFwiUFJFRklYTUFUQ0hcIiwgdGV4dDogXCJePVwifSxcbiAgICB7IG5hbWU6IFwiU1VGRklYTUFUQ0hcIiwgdGV4dDogXCIkPVwifSxcbiAgICB7IG5hbWU6IFwiU1VCU1RSSU5HTUFUQ0hcIiwgdGV4dDogXCIqPVwifSxcblxuICAgIC8vaWRlbnRpZmllciB0eXBlc1xuICAgIHsgbmFtZTogXCJTVFJJTkdcIn0sXG4gICAgeyBuYW1lOiBcIklERU5UXCJ9LFxuICAgIHsgbmFtZTogXCJIQVNIXCJ9LFxuXG4gICAgLy9hdC1rZXl3b3Jkc1xuICAgIHsgbmFtZTogXCJJTVBPUlRfU1lNXCIsIHRleHQ6IFwiQGltcG9ydFwifSxcbiAgICB7IG5hbWU6IFwiUEFHRV9TWU1cIiwgdGV4dDogXCJAcGFnZVwifSxcbiAgICB7IG5hbWU6IFwiTUVESUFfU1lNXCIsIHRleHQ6IFwiQG1lZGlhXCJ9LFxuICAgIHsgbmFtZTogXCJGT05UX0ZBQ0VfU1lNXCIsIHRleHQ6IFwiQGZvbnQtZmFjZVwifSxcbiAgICB7IG5hbWU6IFwiQ0hBUlNFVF9TWU1cIiwgdGV4dDogXCJAY2hhcnNldFwifSxcbiAgICB7IG5hbWU6IFwiTkFNRVNQQUNFX1NZTVwiLCB0ZXh0OiBcIkBuYW1lc3BhY2VcIn0sXG4gICAgeyBuYW1lOiBcIlZJRVdQT1JUX1NZTVwiLCB0ZXh0OiBbXCJAdmlld3BvcnRcIiwgXCJALW1zLXZpZXdwb3J0XCIsIFwiQC1vLXZpZXdwb3J0XCJdfSxcbiAgICB7IG5hbWU6IFwiRE9DVU1FTlRfU1lNXCIsIHRleHQ6IFtcIkBkb2N1bWVudFwiLCBcIkAtbW96LWRvY3VtZW50XCJdfSxcbiAgICB7IG5hbWU6IFwiVU5LTk9XTl9TWU1cIiB9LFxuICAgIC8veyBuYW1lOiBcIkFUS0VZV09SRFwifSxcblxuICAgIC8vQ1NTMyBhbmltYXRpb25zXG4gICAgeyBuYW1lOiBcIktFWUZSQU1FU19TWU1cIiwgdGV4dDogWyBcIkBrZXlmcmFtZXNcIiwgXCJALXdlYmtpdC1rZXlmcmFtZXNcIiwgXCJALW1vei1rZXlmcmFtZXNcIiwgXCJALW8ta2V5ZnJhbWVzXCIgXSB9LFxuXG4gICAgLy9pbXBvcnRhbnQgc3ltYm9sXG4gICAgeyBuYW1lOiBcIklNUE9SVEFOVF9TWU1cIn0sXG5cbiAgICAvL21lYXN1cmVtZW50c1xuICAgIHsgbmFtZTogXCJMRU5HVEhcIn0sXG4gICAgeyBuYW1lOiBcIkFOR0xFXCJ9LFxuICAgIHsgbmFtZTogXCJUSU1FXCJ9LFxuICAgIHsgbmFtZTogXCJGUkVRXCJ9LFxuICAgIHsgbmFtZTogXCJESU1FTlNJT05cIn0sXG4gICAgeyBuYW1lOiBcIlBFUkNFTlRBR0VcIn0sXG4gICAgeyBuYW1lOiBcIk5VTUJFUlwifSxcblxuICAgIC8vZnVuY3Rpb25zXG4gICAgeyBuYW1lOiBcIlVSSVwifSxcbiAgICB7IG5hbWU6IFwiRlVOQ1RJT05cIn0sXG5cbiAgICAvL1VuaWNvZGUgcmFuZ2VzXG4gICAgeyBuYW1lOiBcIlVOSUNPREVfUkFOR0VcIn0sXG5cbiAgICAvKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgdG9rZW4gbmFtZXMgYXJlIGRlZmluZWQgaW4gQ1NTMyBTZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNzZWxlY3Rvci1zeW50YXhcbiAgICAgKi9cblxuICAgIC8vaW52YWxpZCBzdHJpbmdcbiAgICB7IG5hbWU6IFwiSU5WQUxJRFwifSxcblxuICAgIC8vY29tYmluYXRvcnNcbiAgICB7IG5hbWU6IFwiUExVU1wiLCB0ZXh0OiBcIitcIiB9LFxuICAgIHsgbmFtZTogXCJHUkVBVEVSXCIsIHRleHQ6IFwiPlwifSxcbiAgICB7IG5hbWU6IFwiQ09NTUFcIiwgdGV4dDogXCIsXCJ9LFxuICAgIHsgbmFtZTogXCJUSUxERVwiLCB0ZXh0OiBcIn5cIn0sXG5cbiAgICAvL21vZGlmaWVyXG4gICAgeyBuYW1lOiBcIk5PVFwifSxcblxuICAgIC8qXG4gICAgICogRGVmaW5lZCBpbiBDU1MzIFBhZ2VkIE1lZGlhXG4gICAgICovXG4gICAgeyBuYW1lOiBcIlRPUExFRlRDT1JORVJfU1lNXCIsIHRleHQ6IFwiQHRvcC1sZWZ0LWNvcm5lclwifSxcbiAgICB7IG5hbWU6IFwiVE9QTEVGVF9TWU1cIiwgdGV4dDogXCJAdG9wLWxlZnRcIn0sXG4gICAgeyBuYW1lOiBcIlRPUENFTlRFUl9TWU1cIiwgdGV4dDogXCJAdG9wLWNlbnRlclwifSxcbiAgICB7IG5hbWU6IFwiVE9QUklHSFRfU1lNXCIsIHRleHQ6IFwiQHRvcC1yaWdodFwifSxcbiAgICB7IG5hbWU6IFwiVE9QUklHSFRDT1JORVJfU1lNXCIsIHRleHQ6IFwiQHRvcC1yaWdodC1jb3JuZXJcIn0sXG4gICAgeyBuYW1lOiBcIkJPVFRPTUxFRlRDT1JORVJfU1lNXCIsIHRleHQ6IFwiQGJvdHRvbS1sZWZ0LWNvcm5lclwifSxcbiAgICB7IG5hbWU6IFwiQk9UVE9NTEVGVF9TWU1cIiwgdGV4dDogXCJAYm90dG9tLWxlZnRcIn0sXG4gICAgeyBuYW1lOiBcIkJPVFRPTUNFTlRFUl9TWU1cIiwgdGV4dDogXCJAYm90dG9tLWNlbnRlclwifSxcbiAgICB7IG5hbWU6IFwiQk9UVE9NUklHSFRfU1lNXCIsIHRleHQ6IFwiQGJvdHRvbS1yaWdodFwifSxcbiAgICB7IG5hbWU6IFwiQk9UVE9NUklHSFRDT1JORVJfU1lNXCIsIHRleHQ6IFwiQGJvdHRvbS1yaWdodC1jb3JuZXJcIn0sXG4gICAgeyBuYW1lOiBcIkxFRlRUT1BfU1lNXCIsIHRleHQ6IFwiQGxlZnQtdG9wXCJ9LFxuICAgIHsgbmFtZTogXCJMRUZUTUlERExFX1NZTVwiLCB0ZXh0OiBcIkBsZWZ0LW1pZGRsZVwifSxcbiAgICB7IG5hbWU6IFwiTEVGVEJPVFRPTV9TWU1cIiwgdGV4dDogXCJAbGVmdC1ib3R0b21cIn0sXG4gICAgeyBuYW1lOiBcIlJJR0hUVE9QX1NZTVwiLCB0ZXh0OiBcIkByaWdodC10b3BcIn0sXG4gICAgeyBuYW1lOiBcIlJJR0hUTUlERExFX1NZTVwiLCB0ZXh0OiBcIkByaWdodC1taWRkbGVcIn0sXG4gICAgeyBuYW1lOiBcIlJJR0hUQk9UVE9NX1NZTVwiLCB0ZXh0OiBcIkByaWdodC1ib3R0b21cIn0sXG5cbiAgICAvKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgdG9rZW4gbmFtZXMgYXJlIGRlZmluZWQgaW4gQ1NTMyBNZWRpYSBRdWVyaWVzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLW1lZGlhcXVlcmllcy8jc3ludGF4XG4gICAgICovXG4gICAgLyp7IG5hbWU6IFwiTUVESUFfT05MWVwiLCBzdGF0ZTogXCJtZWRpYVwifSxcbiAgICB7IG5hbWU6IFwiTUVESUFfTk9UXCIsIHN0YXRlOiBcIm1lZGlhXCJ9LFxuICAgIHsgbmFtZTogXCJNRURJQV9BTkRcIiwgc3RhdGU6IFwibWVkaWFcIn0sKi9cbiAgICB7IG5hbWU6IFwiUkVTT0xVVElPTlwiLCBzdGF0ZTogXCJtZWRpYVwifSxcblxuICAgIC8qXG4gICAgICogVGhlIGZvbGxvd2luZyB0b2tlbiBuYW1lcyBhcmUgbm90IGRlZmluZWQgaW4gYW55IENTUyBzcGVjaWZpY2F0aW9uIGJ1dCBhcmUgdXNlZCBieSB0aGUgbGV4ZXIuXG4gICAgICovXG5cbiAgICAvL25vdCBhIHJlYWwgdG9rZW4sIGJ1dCB1c2VmdWwgZm9yIHN0dXBpZCBJRSBmaWx0ZXJzXG4gICAgeyBuYW1lOiBcIklFX0ZVTkNUSU9OXCIgfSxcblxuICAgIC8vcGFydCBvZiBDU1MzIGdyYW1tYXIgYnV0IG5vdCB0aGUgRmxleCBjb2RlXG4gICAgeyBuYW1lOiBcIkNIQVJcIiB9LFxuXG4gICAgLy9UT0RPOiBOZWVkZWQ/XG4gICAgLy9Ob3QgZGVmaW5lZCBhcyB0b2tlbnMsIGJ1dCBtaWdodCBhcyB3ZWxsIGJlXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBJUEVcIixcbiAgICAgICAgdGV4dDogXCJ8XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTTEFTSFwiLFxuICAgICAgICB0ZXh0OiBcIi9cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk1JTlVTXCIsXG4gICAgICAgIHRleHQ6IFwiLVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU1RBUlwiLFxuICAgICAgICB0ZXh0OiBcIipcIlxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTEJSQUNFXCIsXG4gICAgICAgIGVuZENoYXI6IFwifVwiLFxuICAgICAgICB0ZXh0OiBcIntcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJCUkFDRVwiLFxuICAgICAgICB0ZXh0OiBcIn1cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkxCUkFDS0VUXCIsXG4gICAgICAgIGVuZENoYXI6IFwiXVwiLFxuICAgICAgICB0ZXh0OiBcIltcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJCUkFDS0VUXCIsXG4gICAgICAgIHRleHQ6IFwiXVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRVFVQUxTXCIsXG4gICAgICAgIHRleHQ6IFwiPVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ09MT05cIixcbiAgICAgICAgdGV4dDogXCI6XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTRU1JQ09MT05cIixcbiAgICAgICAgdGV4dDogXCI7XCJcbiAgICB9LFxuXG4gICAge1xuICAgICAgICBuYW1lOiBcIkxQQVJFTlwiLFxuICAgICAgICBlbmRDaGFyOiBcIilcIixcbiAgICAgICAgdGV4dDogXCIoXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSUEFSRU5cIixcbiAgICAgICAgdGV4dDogXCIpXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJET1RcIixcbiAgICAgICAgdGV4dDogXCIuXCJcbiAgICB9XG5dO1xuXG4oZnVuY3Rpb24oKXtcblxuICAgIHZhciBuYW1lTWFwID0gW10sXG4gICAgICAgIHR5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgVG9rZW5zLlVOS05PV04gPSAtMTtcbiAgICBUb2tlbnMudW5zaGlmdCh7bmFtZTpcIkVPRlwifSk7XG4gICAgZm9yICh2YXIgaT0wLCBsZW4gPSBUb2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICBuYW1lTWFwLnB1c2goVG9rZW5zW2ldLm5hbWUpO1xuICAgICAgICBUb2tlbnNbVG9rZW5zW2ldLm5hbWVdID0gaTtcbiAgICAgICAgaWYgKFRva2Vuc1tpXS50ZXh0KXtcbiAgICAgICAgICAgIGlmIChUb2tlbnNbaV0udGV4dCBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqPTA7IGogPCBUb2tlbnNbaV0udGV4dC5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVNYXBbVG9rZW5zW2ldLnRleHRbal1dID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGVNYXBbVG9rZW5zW2ldLnRleHRdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFRva2Vucy5uYW1lID0gZnVuY3Rpb24odHQpe1xuICAgICAgICByZXR1cm4gbmFtZU1hcFt0dF07XG4gICAgfTtcblxuICAgIFRva2Vucy50eXBlID0gZnVuY3Rpb24oYyl7XG4gICAgICAgIHJldHVybiB0eXBlTWFwW2NdIHx8IC0xO1xuICAgIH07XG5cbn0pKCk7XG5cblxuXG4vL1RoaXMgZmlsZSB3aWxsIGxpa2VseSBjaGFuZ2UgYSBsb3QhIFZlcnkgZXhwZXJpbWVudGFsIVxudmFyIFZhbGlkYXRpb24gPSB7XG5cbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKXtcblxuICAgICAgICAvL25vcm1hbGl6ZSBuYW1lXG4gICAgICAgIHZhciBuYW1lICAgICAgICA9IHByb3BlcnR5LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGV4cHJlc3Npb24gID0gbmV3IFByb3BlcnR5VmFsdWVJdGVyYXRvcih2YWx1ZSksXG4gICAgICAgICAgICBzcGVjICAgICAgICA9IFByb3BlcnRpZXNbbmFtZV07XG5cbiAgICAgICAgaWYgKCFzcGVjKSB7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKFwiLVwiKSAhPT0gMCl7ICAgIC8vdmVuZG9yIHByZWZpeGVkIGFyZSBva1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJVbmtub3duIHByb3BlcnR5ICdcIiArIHByb3BlcnR5ICsgXCInLlwiLCBwcm9wZXJ0eS5saW5lLCBwcm9wZXJ0eS5jb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGVjICE9PSBcIm51bWJlclwiKXtcblxuICAgICAgICAgICAgLy9pbml0aWFsaXphdGlvblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcGVjID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5pbmRleE9mKFwifHxcIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwUHJvcGVydHkoc3BlYywgZXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaW5nbGVQcm9wZXJ0eShzcGVjLCBleHByZXNzaW9uLCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BlYy5tdWx0aSkge1xuICAgICAgICAgICAgICAgIHRoaXMubXVsdGlQcm9wZXJ0eShzcGVjLm11bHRpLCBleHByZXNzaW9uLCBzcGVjLmNvbW1hLCBzcGVjLm1heCB8fCBJbmZpbml0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGVjID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBzcGVjKGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBzaW5nbGVQcm9wZXJ0eTogZnVuY3Rpb24odHlwZXMsIGV4cHJlc3Npb24sIG1heCwgcGFydGlhbCkge1xuXG4gICAgICAgIHZhciByZXN1bHQgICAgICA9IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWUgICAgICAgPSBleHByZXNzaW9uLnZhbHVlLFxuICAgICAgICAgICAgY291bnQgICAgICAgPSAwLFxuICAgICAgICAgICAgcGFydDtcblxuICAgICAgICB3aGlsZSAoZXhwcmVzc2lvbi5oYXNOZXh0KCkgJiYgY291bnQgPCBtYXgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB0eXBlcyk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5oYXNOZXh0KCkgJiYgIWV4cHJlc3Npb24uaXNGaXJzdCgpKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ucGVlaygpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCBlbmQgb2YgdmFsdWUgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIChcIiArIHR5cGVzICsgXCIpIGJ1dCBmb3VuZCAnXCIgKyB2YWx1ZSArIFwiJy5cIiwgdmFsdWUubGluZSwgdmFsdWUuY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ubmV4dCgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIGVuZCBvZiB2YWx1ZSBidXQgZm91bmQgJ1wiICsgcGFydCArIFwiJy5cIiwgcGFydC5saW5lLCBwYXJ0LmNvbCk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtdWx0aVByb3BlcnR5OiBmdW5jdGlvbiAodHlwZXMsIGV4cHJlc3Npb24sIGNvbW1hLCBtYXgpIHtcblxuICAgICAgICB2YXIgcmVzdWx0ICAgICAgPSBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlICAgICAgID0gZXhwcmVzc2lvbi52YWx1ZSxcbiAgICAgICAgICAgIGNvdW50ICAgICAgID0gMCxcbiAgICAgICAgICAgIHBhcnQ7XG5cbiAgICAgICAgd2hpbGUoZXhwcmVzc2lvbi5oYXNOZXh0KCkgJiYgIXJlc3VsdCAmJiBjb3VudCA8IG1heCkge1xuICAgICAgICAgICAgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB0eXBlcykpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmICghZXhwcmVzc2lvbi5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFN0cmluZyhleHByZXNzaW9uLnBlZWsoKSkgPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gZXhwcmVzc2lvbi5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5oYXNOZXh0KCkgJiYgIWV4cHJlc3Npb24uaXNGaXJzdCgpKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ucGVlaygpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCBlbmQgb2YgdmFsdWUgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gZXhwcmVzc2lvbi5wcmV2aW91cygpO1xuICAgICAgICAgICAgICAgIGlmIChjb21tYSAmJiBTdHJpbmcocGFydCkgPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCBlbmQgb2YgdmFsdWUgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCAoXCIgKyB0eXBlcyArIFwiKSBidXQgZm91bmQgJ1wiICsgdmFsdWUgKyBcIicuXCIsIHZhbHVlLmxpbmUsIHZhbHVlLmNvbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbi5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgIHBhcnQgPSBleHByZXNzaW9uLm5leHQoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJFeHBlY3RlZCBlbmQgb2YgdmFsdWUgYnV0IGZvdW5kICdcIiArIHBhcnQgKyBcIicuXCIsIHBhcnQubGluZSwgcGFydC5jb2wpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZ3JvdXBQcm9wZXJ0eTogZnVuY3Rpb24gKHR5cGVzLCBleHByZXNzaW9uLCBjb21tYSkge1xuXG4gICAgICAgIHZhciByZXN1bHQgICAgICA9IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWUgICAgICAgPSBleHByZXNzaW9uLnZhbHVlLFxuICAgICAgICAgICAgdHlwZUNvdW50ICAgPSB0eXBlcy5zcGxpdChcInx8XCIpLmxlbmd0aCxcbiAgICAgICAgICAgIGdyb3VwcyAgICAgID0geyBjb3VudDogMCB9LFxuICAgICAgICAgICAgcGFydGlhbCAgICAgPSBmYWxzZSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwYXJ0O1xuXG4gICAgICAgIHdoaWxlKGV4cHJlc3Npb24uaGFzTmV4dCgpICYmICFyZXN1bHQpIHtcbiAgICAgICAgICAgIG5hbWUgPSBWYWxpZGF0aW9uVHlwZXMuaXNBbnlPZkdyb3VwKGV4cHJlc3Npb24sIHR5cGVzKTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAvL25vIGR1cGVzXG4gICAgICAgICAgICAgICAgaWYgKGdyb3Vwc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBncm91cHNbbmFtZV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICBncm91cHMuY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3Vwcy5jb3VudCA9PT0gdHlwZUNvdW50IHx8ICFleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHBhcnRpYWwgJiYgZXhwcmVzc2lvbi5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ucGVlaygpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFwiRXhwZWN0ZWQgZW5kIG9mIHZhbHVlIGJ1dCBmb3VuZCAnXCIgKyBwYXJ0ICsgXCInLlwiLCBwYXJ0LmxpbmUsIHBhcnQuY29sKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIChcIiArIHR5cGVzICsgXCIpIGJ1dCBmb3VuZCAnXCIgKyB2YWx1ZSArIFwiJy5cIiwgdmFsdWUubGluZSwgdmFsdWUuY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgcGFydCA9IGV4cHJlc3Npb24ubmV4dCgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIGVuZCBvZiB2YWx1ZSBidXQgZm91bmQgJ1wiICsgcGFydCArIFwiJy5cIiwgcGFydC5saW5lLCBwYXJ0LmNvbCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59O1xuLyoqXG4gKiBUeXBlIHRvIHVzZSB3aGVuIGEgdmFsaWRhdGlvbiBlcnJvciBvY2N1cnMuXG4gKiBAY2xhc3MgVmFsaWRhdGlvbkVycm9yXG4gKiBAbmFtZXNwYWNlIHBhcnNlcmxpYi51dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtpbnR9IGxpbmUgVGhlIGxpbmUgYXQgd2hpY2ggdGhlIGVycm9yIG9jY3VycmVkLlxuICogQHBhcmFtIHtpbnR9IGNvbCBUaGUgY29sdW1uIGF0IHdoaWNoIHRoZSBlcnJvciBvY2N1cnJlZC5cbiAqL1xuZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9yKG1lc3NhZ2UsIGxpbmUsIGNvbCl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1uIGF0IHdoaWNoIHRoZSBlcnJvciBvY2N1cnJlZC5cbiAgICAgKiBAdHlwZSBpbnRcbiAgICAgKiBAcHJvcGVydHkgY29sXG4gICAgICovXG4gICAgdGhpcy5jb2wgPSBjb2w7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGluZSBhdCB3aGljaCB0aGUgZXJyb3Igb2NjdXJyZWQuXG4gICAgICogQHR5cGUgaW50XG4gICAgICogQHByb3BlcnR5IGxpbmVcbiAgICAgKi9cbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXQuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHByb3BlcnR5IHRleHRcbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG59XG5cbi8vaW5oZXJpdCBmcm9tIEVycm9yXG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4vL1RoaXMgZmlsZSB3aWxsIGxpa2VseSBjaGFuZ2UgYSBsb3QhIFZlcnkgZXhwZXJpbWVudGFsIVxudmFyIFZhbGlkYXRpb25UeXBlcyA9IHtcblxuICAgIGlzTGl0ZXJhbDogZnVuY3Rpb24gKHBhcnQsIGxpdGVyYWxzKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gcGFydC50ZXh0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGFyZ3MgPSBsaXRlcmFscy5zcGxpdChcIiB8IFwiKSxcbiAgICAgICAgICAgIGksIGxlbiwgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGk9MCxsZW49YXJncy5sZW5ndGg7IGkgPCBsZW4gJiYgIWZvdW5kOyBpKyspe1xuICAgICAgICAgICAgaWYgKHRleHQgPT09IGFyZ3NbaV0udG9Mb3dlckNhc2UoKSl7XG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sXG5cbiAgICBpc1NpbXBsZTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNpbXBsZVt0eXBlXTtcbiAgICB9LFxuXG4gICAgaXNDb21wbGV4OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuY29tcGxleFt0eXBlXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgbmV4dCBwYXJ0KHMpIG9mIHRoZSBnaXZlbiBleHByZXNzaW9uXG4gICAgICogYXJlIGFueSBvZiB0aGUgZ2l2ZW4gdHlwZXMuXG4gICAgICovXG4gICAgaXNBbnk6IGZ1bmN0aW9uIChleHByZXNzaW9uLCB0eXBlcykge1xuICAgICAgICB2YXIgYXJncyA9IHR5cGVzLnNwbGl0KFwiIHwgXCIpLFxuICAgICAgICAgICAgaSwgbGVuLCBmb3VuZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoaT0wLGxlbj1hcmdzLmxlbmd0aDsgaSA8IGxlbiAmJiAhZm91bmQgJiYgZXhwcmVzc2lvbi5oYXNOZXh0KCk7IGkrKyl7XG4gICAgICAgICAgICBmb3VuZCA9IHRoaXMuaXNUeXBlKGV4cHJlc3Npb24sIGFyZ3NbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBuZXh0IHBhcnQocykgb2YgdGhlIGdpdmVuIGV4cHJlc3Npb25cbiAgICAgKiBhcmUgb25lIG9mIGEgZ3JvdXAuXG4gICAgICovXG4gICAgaXNBbnlPZkdyb3VwOiBmdW5jdGlvbihleHByZXNzaW9uLCB0eXBlcykge1xuICAgICAgICB2YXIgYXJncyA9IHR5cGVzLnNwbGl0KFwiIHx8IFwiKSxcbiAgICAgICAgICAgIGksIGxlbiwgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGk9MCxsZW49YXJncy5sZW5ndGg7IGkgPCBsZW4gJiYgIWZvdW5kOyBpKyspe1xuICAgICAgICAgICAgZm91bmQgPSB0aGlzLmlzVHlwZShleHByZXNzaW9uLCBhcmdzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZCA/IGFyZ3NbaS0xXSA6IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBuZXh0IHBhcnQocykgb2YgdGhlIGdpdmVuIGV4cHJlc3Npb25cbiAgICAgKiBhcmUgb2YgYSBnaXZlbiB0eXBlLlxuICAgICAqL1xuICAgIGlzVHlwZTogZnVuY3Rpb24gKGV4cHJlc3Npb24sIHR5cGUpIHtcbiAgICAgICAgdmFyIHBhcnQgPSBleHByZXNzaW9uLnBlZWsoKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0eXBlLmNoYXJBdCgwKSAhPT0gXCI8XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaXNMaXRlcmFsKHBhcnQsIHR5cGUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24ubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2ltcGxlW3R5cGVdKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnNpbXBsZVt0eXBlXShwYXJ0KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY29tcGxleFt0eXBlXShleHByZXNzaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuXG5cbiAgICBzaW1wbGU6IHtcbiAgICAgICAgX19wcm90b19fOiBudWxsLFxuXG4gICAgICAgIFwiPGFic29sdXRlLXNpemU+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRpb25UeXBlcy5pc0xpdGVyYWwocGFydCwgXCJ4eC1zbWFsbCB8IHgtc21hbGwgfCBzbWFsbCB8IG1lZGl1bSB8IGxhcmdlIHwgeC1sYXJnZSB8IHh4LWxhcmdlXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGF0dGFjaG1lbnQ+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRpb25UeXBlcy5pc0xpdGVyYWwocGFydCwgXCJzY3JvbGwgfCBmaXhlZCB8IGxvY2FsXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGF0dHI+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmIHBhcnQubmFtZSA9PT0gXCJhdHRyXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8YmctaW1hZ2U+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbXCI8aW1hZ2U+XCJdKHBhcnQpIHx8IHRoaXNbXCI8Z3JhZGllbnQ+XCJdKHBhcnQpIHx8ICBTdHJpbmcocGFydCkgPT09IFwibm9uZVwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGdyYWRpZW50PlwiOiBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydC50eXBlID09PSBcImZ1bmN0aW9uXCIgJiYgL14oPzpcXC0oPzptc3xtb3p8b3x3ZWJraXQpXFwtKT8oPzpyZXBlYXRpbmdcXC0pPyg/OnJhZGlhbFxcLXxsaW5lYXJcXC0pP2dyYWRpZW50L2kudGVzdChwYXJ0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxib3g+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRpb25UeXBlcy5pc0xpdGVyYWwocGFydCwgXCJwYWRkaW5nLWJveCB8IGJvcmRlci1ib3ggfCBjb250ZW50LWJveFwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxjb250ZW50PlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwiZnVuY3Rpb25cIiAmJiBwYXJ0Lm5hbWUgPT09IFwiY29udGVudFwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPHJlbGF0aXZlLXNpemU+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRpb25UeXBlcy5pc0xpdGVyYWwocGFydCwgXCJzbWFsbGVyIHwgbGFyZ2VyXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vYW55IGlkZW50aWZpZXJcbiAgICAgICAgXCI8aWRlbnQ+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudHlwZSA9PT0gXCJpZGVudGlmaWVyXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8bGVuZ3RoPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFwiZnVuY3Rpb25cIiAmJiAvXig/OlxcLSg/Om1zfG1venxvfHdlYmtpdClcXC0pP2NhbGMvaS50ZXN0KHBhcnQpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwibGVuZ3RoXCIgfHwgcGFydC50eXBlID09PSBcIm51bWJlclwiIHx8IHBhcnQudHlwZSA9PT0gXCJpbnRlZ2VyXCIgfHwgU3RyaW5nKHBhcnQpID09PSBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBcIjxjb2xvcj5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gcGFydC50eXBlID09PSBcImNvbG9yXCIgfHwgU3RyaW5nKHBhcnQpID09PSBcInRyYW5zcGFyZW50XCIgfHwgU3RyaW5nKHBhcnQpID09PSBcImN1cnJlbnRDb2xvclwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPG51bWJlcj5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gcGFydC50eXBlID09PSBcIm51bWJlclwiIHx8IHRoaXNbXCI8aW50ZWdlcj5cIl0ocGFydCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8aW50ZWdlcj5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gcGFydC50eXBlID09PSBcImludGVnZXJcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxsaW5lPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwiaW50ZWdlclwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGFuZ2xlPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwiYW5nbGVcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjx1cmk+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudHlwZSA9PT0gXCJ1cmlcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxpbWFnZT5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tcIjx1cmk+XCJdKHBhcnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPHBlcmNlbnRhZ2U+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudHlwZSA9PT0gXCJwZXJjZW50YWdlXCIgfHwgU3RyaW5nKHBhcnQpID09PSBcIjBcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxib3JkZXItd2lkdGg+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbXCI8bGVuZ3RoPlwiXShwYXJ0KSB8fCBWYWxpZGF0aW9uVHlwZXMuaXNMaXRlcmFsKHBhcnQsIFwidGhpbiB8IG1lZGl1bSB8IHRoaWNrXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGJvcmRlci1zdHlsZT5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gVmFsaWRhdGlvblR5cGVzLmlzTGl0ZXJhbChwYXJ0LCBcIm5vbmUgfCBoaWRkZW4gfCBkb3R0ZWQgfCBkYXNoZWQgfCBzb2xpZCB8IGRvdWJsZSB8IGdyb292ZSB8IHJpZGdlIHwgaW5zZXQgfCBvdXRzZXRcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8Y29udGVudC1zaXppbmc+XCI6IGZ1bmN0aW9uKHBhcnQpeyAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNpemluZy8jd2lkdGgtaGVpZ2h0LWtleXdvcmRzXG4gICAgICAgICAgICByZXR1cm4gVmFsaWRhdGlvblR5cGVzLmlzTGl0ZXJhbChwYXJ0LCBcImZpbGwtYXZhaWxhYmxlIHwgLW1vei1hdmFpbGFibGUgfCAtd2Via2l0LWZpbGwtYXZhaWxhYmxlIHwgbWF4LWNvbnRlbnQgfCAtbW96LW1heC1jb250ZW50IHwgLXdlYmtpdC1tYXgtY29udGVudCB8IG1pbi1jb250ZW50IHwgLW1vei1taW4tY29udGVudCB8IC13ZWJraXQtbWluLWNvbnRlbnQgfCBmaXQtY29udGVudCB8IC1tb3otZml0LWNvbnRlbnQgfCAtd2Via2l0LWZpdC1jb250ZW50XCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPG1hcmdpbi13aWR0aD5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tcIjxsZW5ndGg+XCJdKHBhcnQpIHx8IHRoaXNbXCI8cGVyY2VudGFnZT5cIl0ocGFydCkgfHwgVmFsaWRhdGlvblR5cGVzLmlzTGl0ZXJhbChwYXJ0LCBcImF1dG9cIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8cGFkZGluZy13aWR0aD5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tcIjxsZW5ndGg+XCJdKHBhcnQpIHx8IHRoaXNbXCI8cGVyY2VudGFnZT5cIl0ocGFydCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8c2hhcGU+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmIChwYXJ0Lm5hbWUgPT09IFwicmVjdFwiIHx8IHBhcnQubmFtZSA9PT0gXCJpbnNldC1yZWN0XCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPHRpbWU+XCI6IGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnR5cGUgPT09IFwidGltZVwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGZsZXgtZ3Jvdz5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tcIjxudW1iZXI+XCJdKHBhcnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPGZsZXgtc2hyaW5rPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW1wiPG51bWJlcj5cIl0ocGFydCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8d2lkdGg+XCI6IGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbXCI8bWFyZ2luLXdpZHRoPlwiXShwYXJ0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxmbGV4LWJhc2lzPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW1wiPHdpZHRoPlwiXShwYXJ0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxmbGV4LWRpcmVjdGlvbj5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gVmFsaWRhdGlvblR5cGVzLmlzTGl0ZXJhbChwYXJ0LCBcInJvdyB8IHJvdy1yZXZlcnNlIHwgY29sdW1uIHwgY29sdW1uLXJldmVyc2VcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8ZmxleC13cmFwPlwiOiBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiBWYWxpZGF0aW9uVHlwZXMuaXNMaXRlcmFsKHBhcnQsIFwibm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZVwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxmZWF0dXJlLXRhZy12YWx1ZT5cIjogZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gKHBhcnQudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmIC9eW0EtWjAtOV17NH0kL2kudGVzdChwYXJ0KSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcGxleDoge1xuICAgICAgICBfX3Byb3RvX186IG51bGwsXG5cbiAgICAgICAgXCI8YmctcG9zaXRpb24+XCI6IGZ1bmN0aW9uKGV4cHJlc3Npb24pe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCAgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBudW1lcmljID0gXCI8cGVyY2VudGFnZT4gfCA8bGVuZ3RoPlwiLFxuICAgICAgICAgICAgICAgIHhEaXIgICAgPSBcImxlZnQgfCByaWdodFwiLFxuICAgICAgICAgICAgICAgIHlEaXIgICAgPSBcInRvcCB8IGJvdHRvbVwiLFxuICAgICAgICAgICAgICAgIGNvdW50ID0gMDtcblxuICAgICAgICAgICAgd2hpbGUgKGV4cHJlc3Npb24ucGVlayhjb3VudCkgJiYgZXhwcmVzc2lvbi5wZWVrKGNvdW50KS50ZXh0ICE9PSBcIixcIikge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG5cbi8qXG48cG9zaXRpb24+ID0gW1xuICBbIGxlZnQgfCBjZW50ZXIgfCByaWdodCB8IHRvcCB8IGJvdHRvbSB8IDxwZXJjZW50YWdlPiB8IDxsZW5ndGg+IF1cbnxcbiAgWyBsZWZ0IHwgY2VudGVyIHwgcmlnaHQgfCA8cGVyY2VudGFnZT4gfCA8bGVuZ3RoPiBdXG4gIFsgdG9wIHwgY2VudGVyIHwgYm90dG9tIHwgPHBlcmNlbnRhZ2U+IHwgPGxlbmd0aD4gXVxufFxuICBbIGNlbnRlciB8IFsgbGVmdCB8IHJpZ2h0IF0gWyA8cGVyY2VudGFnZT4gfCA8bGVuZ3RoPiBdPyBdICYmXG4gIFsgY2VudGVyIHwgWyB0b3AgfCBib3R0b20gXSBbIDxwZXJjZW50YWdlPiB8IDxsZW5ndGg+IF0/IF1cbl1cbiovXG5cbiAgICAgICAgICAgIGlmIChjb3VudCA8IDMpIHtcbiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHhEaXIgKyBcIiB8IGNlbnRlciB8IFwiICsgbnVtZXJpYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgeURpciArIFwiIHwgY2VudGVyIHwgXCIgKyBudW1lcmljKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB5RGlyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB4RGlyICsgXCIgfCBjZW50ZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHhEaXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgeURpcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgbnVtZXJpYyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIG51bWVyaWMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHlEaXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgbnVtZXJpYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImNlbnRlclwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB5RGlyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHhEaXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIG51bWVyaWMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBudW1lcmljKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCB4RGlyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgbnVtZXJpYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImNlbnRlclwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImNlbnRlclwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIHhEaXIgKyBcIiB8IFwiICsgeURpcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgbnVtZXJpYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8Ymctc2l6ZT5cIjogZnVuY3Rpb24oZXhwcmVzc2lvbil7XG4gICAgICAgICAgICAvLzxiZy1zaXplPiA9IFsgPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCBhdXRvIF17MSwyfSB8IGNvdmVyIHwgY29udGFpblxuICAgICAgICAgICAgdmFyIHJlc3VsdCAgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBudW1lcmljID0gXCI8cGVyY2VudGFnZT4gfCA8bGVuZ3RoPiB8IGF1dG9cIjtcblxuICAgICAgICAgICAgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcImNvdmVyIHwgY29udGFpblwiKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBudW1lcmljKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIG51bWVyaWMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiPHJlcGVhdC1zdHlsZT5cIjogZnVuY3Rpb24oZXhwcmVzc2lvbil7XG4gICAgICAgICAgICAvL3JlcGVhdC14IHwgcmVwZWF0LXkgfCBbcmVwZWF0IHwgc3BhY2UgfCByb3VuZCB8IG5vLXJlcGVhdF17MSwyfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCAgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWx1ZXMgID0gXCJyZXBlYXQgfCBzcGFjZSB8IHJvdW5kIHwgbm8tcmVwZWF0XCIsXG4gICAgICAgICAgICAgICAgcGFydDtcblxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24uaGFzTmV4dCgpKXtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gZXhwcmVzc2lvbi5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzTGl0ZXJhbChwYXJ0LCBcInJlcGVhdC14IHwgcmVwZWF0LXlcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0xpdGVyYWwocGFydCwgdmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmhhc05leHQoKSAmJiBWYWxpZGF0aW9uVHlwZXMuaXNMaXRlcmFsKGV4cHJlc3Npb24ucGVlaygpLCB2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB9LFxuXG4gICAgICAgIFwiPHNoYWRvdz5cIjogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgLy9pbnNldD8gJiYgWyA8bGVuZ3RoPnsyLDR9ICYmIDxjb2xvcj4/IF1cbiAgICAgICAgICAgIHZhciByZXN1bHQgID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgY291bnQgICA9IDAsXG4gICAgICAgICAgICAgICAgaW5zZXQgICA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbG9yICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24uaGFzTmV4dCgpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIFwiaW5zZXRcIikpe1xuICAgICAgICAgICAgICAgICAgICBpbnNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKFZhbGlkYXRpb25UeXBlcy5pc0FueShleHByZXNzaW9uLCBcIjxjb2xvcj5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlIChWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgXCI8bGVuZ3RoPlwiKSAmJiBjb3VudCA8IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmhhc05leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgXCI8Y29sb3I+XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvblR5cGVzLmlzQW55KGV4cHJlc3Npb24sIFwiaW5zZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IChjb3VudCA+PSAyICYmIGNvdW50IDw9IDQpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCI8eC1vbmUtcmFkaXVzPlwiOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgICAgICAgICAvL1sgPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gXSBbIDxsZW5ndGg+IHwgPHBlcmNlbnRhZ2U+IF0/XG4gICAgICAgICAgICB2YXIgcmVzdWx0ICA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNpbXBsZSA9IFwiPGxlbmd0aD4gfCA8cGVyY2VudGFnZT4gfCBpbmhlcml0XCI7XG5cbiAgICAgICAgICAgIGlmIChWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgc2ltcGxlKSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgc2ltcGxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBcIjxmbGV4PlwiOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDE0L1dELWNzcy1mbGV4Ym94LTEtMjAxNDAzMjUvI2ZsZXgtcHJvcGVydHlcbiAgICAgICAgICAgIC8vIG5vbmUgfCBbIDxmbGV4LWdyb3c+IDxmbGV4LXNocmluaz4/IHx8IDxmbGV4LWJhc2lzPiBdXG4gICAgICAgICAgICAvLyBWYWxpZCBzeW50YXhlcywgYWNjb3JkaW5nIHRvIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4I1N5bnRheFxuICAgICAgICAgICAgLy8gKiBub25lXG4gICAgICAgICAgICAvLyAqIDxmbGV4LWdyb3c+XG4gICAgICAgICAgICAvLyAqIDxmbGV4LWJhc2lzPlxuICAgICAgICAgICAgLy8gKiA8ZmxleC1ncm93PiA8ZmxleC1iYXNpcz5cbiAgICAgICAgICAgIC8vICogPGZsZXgtZ3Jvdz4gPGZsZXgtc2hyaW5rPlxuICAgICAgICAgICAgLy8gKiA8ZmxleC1ncm93PiA8ZmxleC1zaHJpbms+IDxmbGV4LWJhc2lzPlxuICAgICAgICAgICAgLy8gKiBpbmhlcml0XG4gICAgICAgICAgICB2YXIgcGFydCxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChWYWxpZGF0aW9uVHlwZXMuaXNBbnkoZXhwcmVzc2lvbiwgXCJub25lIHwgaW5oZXJpdFwiKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChWYWxpZGF0aW9uVHlwZXMuaXNUeXBlKGV4cHJlc3Npb24sIFwiPGZsZXgtZ3Jvdz5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24ucGVlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGlvblR5cGVzLmlzVHlwZShleHByZXNzaW9uLCBcIjxmbGV4LXNocmluaz5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5wZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gVmFsaWRhdGlvblR5cGVzLmlzVHlwZShleHByZXNzaW9uLCBcIjxmbGV4LWJhc2lzPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVmFsaWRhdGlvblR5cGVzLmlzVHlwZShleHByZXNzaW9uLCBcIjxmbGV4LWJhc2lzPlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGV4cHJlc3Npb24ucGVlaygpID09PSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVmFsaWRhdGlvblR5cGVzLmlzVHlwZShleHByZXNzaW9uLCBcIjxmbGV4LWJhc2lzPlwiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG1vcmUgdmVyYm9zZSBlcnJvciB0aGFuIFwiRXhwZWN0ZWQgPGZsZXg+Li4uXCJcbiAgICAgICAgICAgICAgICBwYXJ0ID0gZXhwcmVzc2lvbi5wZWVrKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkV4cGVjdGVkIChub25lIHwgWyA8ZmxleC1ncm93PiA8ZmxleC1zaHJpbms+PyB8fCA8ZmxleC1iYXNpcz4gXSkgYnV0IGZvdW5kICdcIiArIGV4cHJlc3Npb24udmFsdWUudGV4dCArIFwiJy5cIiwgcGFydC5saW5lLCBwYXJ0LmNvbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5wYXJzZXJsaWIuY3NzID0ge1xuX19wcm90b19fICAgICAgICAgICA6bnVsbCxcbkNvbG9ycyAgICAgICAgICAgICAgOkNvbG9ycyxcbkNvbWJpbmF0b3IgICAgICAgICAgOkNvbWJpbmF0b3IsXG5QYXJzZXIgICAgICAgICAgICAgIDpQYXJzZXIsXG5Qcm9wZXJ0eU5hbWUgICAgICAgIDpQcm9wZXJ0eU5hbWUsXG5Qcm9wZXJ0eVZhbHVlICAgICAgIDpQcm9wZXJ0eVZhbHVlLFxuUHJvcGVydHlWYWx1ZVBhcnQgICA6UHJvcGVydHlWYWx1ZVBhcnQsXG5NZWRpYUZlYXR1cmUgICAgICAgIDpNZWRpYUZlYXR1cmUsXG5NZWRpYVF1ZXJ5ICAgICAgICAgIDpNZWRpYVF1ZXJ5LFxuU2VsZWN0b3IgICAgICAgICAgICA6U2VsZWN0b3IsXG5TZWxlY3RvclBhcnQgICAgICAgIDpTZWxlY3RvclBhcnQsXG5TZWxlY3RvclN1YlBhcnQgICAgIDpTZWxlY3RvclN1YlBhcnQsXG5TcGVjaWZpY2l0eSAgICAgICAgIDpTcGVjaWZpY2l0eSxcblRva2VuU3RyZWFtICAgICAgICAgOlRva2VuU3RyZWFtLFxuVG9rZW5zICAgICAgICAgICAgICA6VG9rZW5zLFxuVmFsaWRhdGlvbkVycm9yICAgICA6VmFsaWRhdGlvbkVycm9yXG59O1xufSkoKTtcblxuKGZ1bmN0aW9uKCl7XG4vKiBqc2hpbnQgZm9yaW46ZmFsc2UgKi9cbmZvcih2YXIgcHJvcCBpbiBwYXJzZXJsaWIpe1xuZXhwb3J0c1twcm9wXSA9IHBhcnNlcmxpYltwcm9wXTtcbn1cbn0pKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9jc3NwYXJzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9ET01JbXBsZW1lbnRhdGlvbicpO1xudmFyIEhUTUxQYXJzZXIgPSByZXF1aXJlKCcuL0hUTUxQYXJzZXInKTtcbnZhciBXaW5kb3cgPSByZXF1aXJlKCcuL1dpbmRvdycpO1xuXG5leHBvcnRzLmNyZWF0ZURPTUltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRE9NSW1wbGVtZW50YXRpb24oKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlRG9jdW1lbnQgPSBmdW5jdGlvbihodG1sLCBmb3JjZSkge1xuICAvLyBQcmV2aW91cyBBUEkgY291bGRuJ3QgbGV0IHlvdSBwYXNzICcnIGFzIGEgZG9jdW1lbnQsIGFuZCB0aGF0XG4gIC8vIHlpZWxkcyBhIHNsaWdodGx5IGRpZmZlcmVudCBkb2N1bWVudCB0aGFuIGNyZWF0ZUhUTUxEb2N1bWVudCgnJylcbiAgLy8gZG9lcy4gIFRoZSBuZXcgYGZvcmNlYCBwYXJhbWV0ZXIgbGV0cyB5b3UgcGFzcyAnJyBpZiB5b3Ugd2FudCB0by5cbiAgaWYgKGh0bWwgfHwgZm9yY2UpIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IEhUTUxQYXJzZXIoKTtcbiAgICBwYXJzZXIucGFyc2UoaHRtbCB8fCAnJywgdHJ1ZSk7XG4gICAgcmV0dXJuIHBhcnNlci5kb2N1bWVudCgpO1xuICB9XG4gIHJldHVybiBuZXcgRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIik7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVdpbmRvdyA9IGZ1bmN0aW9uKGh0bWwsIGFkZHJlc3MpIHtcbiAgdmFyIGRvY3VtZW50ID0gZXhwb3J0cy5jcmVhdGVEb2N1bWVudChodG1sKTtcbiAgaWYgKGFkZHJlc3MgIT09IHVuZGVmaW5lZCkgeyBkb2N1bWVudC5fYWRkcmVzcyA9IGFkZHJlc3M7IH1cbiAgcmV0dXJuIG5ldyBXaW5kb3coZG9jdW1lbnQpO1xufTtcblxuZXhwb3J0cy5pbXBsID0gcmVxdWlyZSgnLi9pbXBsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZG9taW5vL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xuLy8gSEFDSzogdGhpcyBpcyBoZXJlIGZvciBiYWNrd2FyZCBjb21wYXRhYmlsaXR5XG4vLyBUT0RPKGJlbmxlc2gpOiByZW1vdmUgdGhpcyBpbiB2Ni5cbmV4cG9ydHMudG9Qcm9taXNlID0gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHJvbWlzZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcnhqcy9vcGVyYXRvci90b1Byb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBnbG9iYWwsIGRlZmluZSwgU3lzdGVtLCBSZWZsZWN0LCBQcm9taXNlICovXHJcbnZhciBfX2V4dGVuZHM7XHJcbnZhciBfX2Fzc2lnbjtcclxudmFyIF9fcmVzdDtcclxudmFyIF9fZGVjb3JhdGU7XHJcbnZhciBfX3BhcmFtO1xyXG52YXIgX19tZXRhZGF0YTtcclxudmFyIF9fYXdhaXRlcjtcclxudmFyIF9fZ2VuZXJhdG9yO1xyXG52YXIgX19leHBvcnRTdGFyO1xyXG52YXIgX192YWx1ZXM7XHJcbnZhciBfX3JlYWQ7XHJcbnZhciBfX3NwcmVhZDtcclxudmFyIF9fYXdhaXQ7XHJcbnZhciBfX2FzeW5jR2VuZXJhdG9yO1xyXG52YXIgX19hc3luY0RlbGVnYXRvcjtcclxudmFyIF9fYXN5bmNWYWx1ZXM7XHJcbnZhciBfX21ha2VUZW1wbGF0ZU9iamVjdDtcclxudmFyIF9faW1wb3J0U3RhcjtcclxudmFyIF9faW1wb3J0RGVmYXVsdDtcclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcbiAgICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiA/IHRoaXMgOiB7fTtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShcInRzbGliXCIsIFtcImV4cG9ydHNcIl0sIGZ1bmN0aW9uIChleHBvcnRzKSB7IGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCwgY3JlYXRlRXhwb3J0ZXIoZXhwb3J0cykpKTsgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCwgY3JlYXRlRXhwb3J0ZXIobW9kdWxlLmV4cG9ydHMpKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV4cG9ydGVyKGV4cG9ydHMsIHByZXZpb3VzKSB7XHJcbiAgICAgICAgaWYgKGV4cG9ydHMgIT09IHJvb3QpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgdikgeyByZXR1cm4gZXhwb3J0c1tpZF0gPSBwcmV2aW91cyA/IHByZXZpb3VzKGlkLCB2KSA6IHY7IH07XHJcbiAgICB9XHJcbn0pXHJcbihmdW5jdGlvbiAoZXhwb3J0ZXIpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgX19yZXN0ID0gZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgICAgICB2YXIgdCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZGVjb3JhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3BhcmFtID0gZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdGVyID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZ2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbMCwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZXhwb3J0U3RhciA9IGZ1bmN0aW9uIChtLCBleHBvcnRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgX19yZWFkID0gZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICAgICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgICAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jRGVsZWdhdG9yID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgaSwgcDtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jVmFsdWVzID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl07XHJcbiAgICAgICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgICAgICByZXR1cm4gY29va2VkO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2ltcG9ydFN0YXIgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgICAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0RGVmYXVsdCA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0ZXIoXCJfX2V4dGVuZHNcIiwgX19leHRlbmRzKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3NpZ25cIiwgX19hc3NpZ24pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3Jlc3RcIiwgX19yZXN0KTtcclxuICAgIGV4cG9ydGVyKFwiX19kZWNvcmF0ZVwiLCBfX2RlY29yYXRlKTtcclxuICAgIGV4cG9ydGVyKFwiX19wYXJhbVwiLCBfX3BhcmFtKTtcclxuICAgIGV4cG9ydGVyKFwiX19tZXRhZGF0YVwiLCBfX21ldGFkYXRhKTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdGVyXCIsIF9fYXdhaXRlcik7XHJcbiAgICBleHBvcnRlcihcIl9fZ2VuZXJhdG9yXCIsIF9fZ2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19leHBvcnRTdGFyXCIsIF9fZXhwb3J0U3Rhcik7XHJcbiAgICBleHBvcnRlcihcIl9fdmFsdWVzXCIsIF9fdmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZWFkXCIsIF9fcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkXCIsIF9fc3ByZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdFwiLCBfX2F3YWl0KTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0dlbmVyYXRvclwiLCBfX2FzeW5jR2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0RlbGVnYXRvclwiLCBfX2FzeW5jRGVsZWdhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY1ZhbHVlc1wiLCBfX2FzeW5jVmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19tYWtlVGVtcGxhdGVPYmplY3RcIiwgX19tYWtlVGVtcGxhdGVPYmplY3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydFN0YXJcIiwgX19pbXBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX19pbXBvcnREZWZhdWx0XCIsIF9faW1wb3J0RGVmYXVsdCk7XHJcbn0pO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdHNsaWIvdHNsaWIuanNcbi8vIG1vZHVsZSBpZCA9IDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBJbnZhbGlkU3RhdGVFcnJvciwgTmV0d29ya0Vycm9yLCBQcm9ncmVzc0V2ZW50LCBTZWN1cml0eUVycm9yLCBTeW50YXhFcnJvciwgWE1MSHR0cFJlcXVlc3QsIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQsIFhNTEh0dHBSZXF1ZXN0VXBsb2FkLCBodHRwLCBodHRwcywgb3MsIHVybCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldCgpIHtcbiAgICAgIHRoaXMub25sb2Fkc3RhcnQgPSBudWxsO1xuICAgICAgdGhpcy5vbnByb2dyZXNzID0gbnVsbDtcbiAgICAgIHRoaXMub25hYm9ydCA9IG51bGw7XG4gICAgICB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgICAgdGhpcy5vbmxvYWQgPSBudWxsO1xuICAgICAgdGhpcy5vbnRpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy5vbmxvYWRlbmQgPSBudWxsO1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgfVxuXG4gICAgWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldC5wcm90b3R5cGUub25sb2Fkc3RhcnQgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldC5wcm90b3R5cGUub25wcm9ncmVzcyA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbmFib3J0ID0gbnVsbDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQucHJvdG90eXBlLm9uZXJyb3IgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldC5wcm90b3R5cGUub25sb2FkID0gbnVsbDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQucHJvdG90eXBlLm9udGltZW91dCA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbmxvYWRlbmQgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBiYXNlO1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAoYmFzZSA9IHRoaXMuX2xpc3RlbmVycylbZXZlbnRUeXBlXSB8fCAoYmFzZVtldmVudFR5cGVdID0gW10pO1xuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGluZGV4O1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0pIHtcbiAgICAgICAgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXS5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGV2ZW50VHlwZSwgaiwgbGVuLCBsaXN0ZW5lciwgbGlzdGVuZXJzO1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGV2ZW50LnRhcmdldCA9IHRoaXM7XG4gICAgICBldmVudFR5cGUgPSBldmVudC50eXBlO1xuICAgICAgaWYgKGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJzW2pdO1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGlzdGVuZXIgPSB0aGlzW1wib25cIiArIGV2ZW50VHlwZV0pIHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldDtcblxuICB9KSgpO1xuXG4gIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbiAgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuXG4gIG9zID0gcmVxdWlyZSgnb3MnKTtcblxuICB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxuICBYTUxIdHRwUmVxdWVzdCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTEh0dHBSZXF1ZXN0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTEh0dHBSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICAgIFhNTEh0dHBSZXF1ZXN0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgdGhpcy5fYW5vbnltb3VzID0gb3B0aW9ucyAmJiBvcHRpb25zLmFub247XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBYTUxIdHRwUmVxdWVzdC5VTlNFTlQ7XG4gICAgICB0aGlzLnJlc3BvbnNlID0gbnVsbDtcbiAgICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gJyc7XG4gICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9ICcnO1xuICAgICAgdGhpcy5yZXNwb25zZVVSTCA9ICcnO1xuICAgICAgdGhpcy5zdGF0dXMgPSAwO1xuICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gJyc7XG4gICAgICB0aGlzLnRpbWVvdXQgPSAwO1xuICAgICAgdGhpcy51cGxvYWQgPSBuZXcgWE1MSHR0cFJlcXVlc3RVcGxvYWQodGhpcyk7XG4gICAgICB0aGlzLl9tZXRob2QgPSBudWxsO1xuICAgICAgdGhpcy5fdXJsID0gbnVsbDtcbiAgICAgIHRoaXMuX3N5bmMgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2hlYWRlcnMgPSBudWxsO1xuICAgICAgdGhpcy5fbG93ZXJlZEhlYWRlcnMgPSBudWxsO1xuICAgICAgdGhpcy5fbWltZU92ZXJyaWRlID0gbnVsbDtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgdGhpcy5fcmVzcG9uc2UgPSBudWxsO1xuICAgICAgdGhpcy5fcmVzcG9uc2VQYXJ0cyA9IG51bGw7XG4gICAgICB0aGlzLl9yZXNwb25zZUhlYWRlcnMgPSBudWxsO1xuICAgICAgdGhpcy5fYWJvcnRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgICAgdGhpcy5fbG9hZGVkQnl0ZXMgPSAwO1xuICAgICAgdGhpcy5fdG90YWxCeXRlcyA9IDA7XG4gICAgICB0aGlzLl9sZW5ndGhDb21wdXRhYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUucmVhZHlTdGF0ZSA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uc2UgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnJlc3BvbnNlVGV4dCA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uc2VUeXBlID0gbnVsbDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zdGF0dXMgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnRpbWVvdXQgPSBudWxsO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnVwbG9hZCA9IG51bGw7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBhc3luYywgdXNlciwgcGFzc3dvcmQpIHtcbiAgICAgIHZhciB4aHJVcmw7XG4gICAgICBtZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICAgIGlmIChtZXRob2QgaW4gdGhpcy5fcmVzdHJpY3RlZE1ldGhvZHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlY3VyaXR5RXJyb3IoXCJIVFRQIG1ldGhvZCBcIiArIG1ldGhvZCArIFwiIGlzIG5vdCBhbGxvd2VkIGluIFhIUlwiKTtcbiAgICAgIH1cbiAgICAgIHhoclVybCA9IHRoaXMuX3BhcnNlVXJsKHVybCk7XG4gICAgICBpZiAoYXN5bmMgPT09IHZvaWQgMCkge1xuICAgICAgICBhc3luYyA9IHRydWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICBjYXNlIFhNTEh0dHBSZXF1ZXN0LlVOU0VOVDpcbiAgICAgICAgY2FzZSBYTUxIdHRwUmVxdWVzdC5PUEVORUQ6XG4gICAgICAgIGNhc2UgWE1MSHR0cFJlcXVlc3QuRE9ORTpcbiAgICAgICAgICBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFhNTEh0dHBSZXF1ZXN0LkhFQURFUlNfUkVDRUlWRUQ6XG4gICAgICAgIGNhc2UgWE1MSHR0cFJlcXVlc3QuTE9BRElORzpcbiAgICAgICAgICBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWV0aG9kID0gbWV0aG9kO1xuICAgICAgdGhpcy5fdXJsID0geGhyVXJsO1xuICAgICAgdGhpcy5fc3luYyA9ICFhc3luYztcbiAgICAgIHRoaXMuX2hlYWRlcnMgPSB7fTtcbiAgICAgIHRoaXMuX2xvd2VyZWRIZWFkZXJzID0ge307XG4gICAgICB0aGlzLl9taW1lT3ZlcnJpZGUgPSBudWxsO1xuICAgICAgdGhpcy5fc2V0UmVhZHlTdGF0ZShYTUxIdHRwUmVxdWVzdC5PUEVORUQpO1xuICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICB0aGlzLl9yZXNwb25zZSA9IG51bGw7XG4gICAgICB0aGlzLnN0YXR1cyA9IDA7XG4gICAgICB0aGlzLnN0YXR1c1RleHQgPSAnJztcbiAgICAgIHRoaXMuX3Jlc3BvbnNlUGFydHMgPSBbXTtcbiAgICAgIHRoaXMuX3Jlc3BvbnNlSGVhZGVycyA9IG51bGw7XG4gICAgICB0aGlzLl9sb2FkZWRCeXRlcyA9IDA7XG4gICAgICB0aGlzLl90b3RhbEJ5dGVzID0gMDtcbiAgICAgIHRoaXMuX2xlbmd0aENvbXB1dGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBsb3dlcmVkTmFtZTtcbiAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0Lk9QRU5FRCkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN0YXRlRXJyb3IoXCJYSFIgcmVhZHlTdGF0ZSBtdXN0IGJlIE9QRU5FRFwiKTtcbiAgICAgIH1cbiAgICAgIGxvd2VyZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHRoaXMuX3Jlc3RyaWN0ZWRIZWFkZXJzW2xvd2VyZWROYW1lXSB8fCAvXnNlY1xcLS8udGVzdChsb3dlcmVkTmFtZSkgfHwgL15wcm94eS0vLnRlc3QobG93ZXJlZE5hbWUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlJlZnVzZWQgdG8gc2V0IHVuc2FmZSBoZWFkZXIgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIGlmIChsb3dlcmVkTmFtZSBpbiB0aGlzLl9sb3dlcmVkSGVhZGVycykge1xuICAgICAgICBuYW1lID0gdGhpcy5fbG93ZXJlZEhlYWRlcnNbbG93ZXJlZE5hbWVdO1xuICAgICAgICB0aGlzLl9oZWFkZXJzW25hbWVdID0gdGhpcy5faGVhZGVyc1tuYW1lXSArICcsICcgKyB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xvd2VyZWRIZWFkZXJzW2xvd2VyZWROYW1lXSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gWE1MSHR0cFJlcXVlc3QuT1BFTkVEKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkU3RhdGVFcnJvcihcIlhIUiByZWFkeVN0YXRlIG11c3QgYmUgT1BFTkVEXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdGF0ZUVycm9yKFwic2VuZCgpIGFscmVhZHkgY2FsbGVkXCIpO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGlzLl91cmwucHJvdG9jb2wpIHtcbiAgICAgICAgY2FzZSAnZmlsZTonOlxuICAgICAgICAgIHRoaXMuX3NlbmRGaWxlKGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodHRwOic6XG4gICAgICAgIGNhc2UgJ2h0dHBzOic6XG4gICAgICAgICAgdGhpcy5fc2VuZEh0dHAoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IE5ldHdvcmtFcnJvcihcIlVuc3VwcG9ydGVkIHByb3RvY29sIFwiICsgdGhpcy5fdXJsLnByb3RvY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgIHRoaXMuX3NldEVycm9yKCk7XG4gICAgICB0aGlzLl9kaXNwYXRjaFByb2dyZXNzKCdhYm9ydCcpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcygnbG9hZGVuZCcpO1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGxvd2VyZWROYW1lO1xuICAgICAgaWYgKCF0aGlzLl9yZXNwb25zZUhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBsb3dlcmVkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlcmVkTmFtZSBpbiB0aGlzLl9yZXNwb25zZUhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlSGVhZGVyc1tsb3dlcmVkTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmdldEFsbFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxpbmVzLCBuYW1lLCB2YWx1ZTtcbiAgICAgIGlmICghdGhpcy5fcmVzcG9uc2VIZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGxpbmVzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLl9yZXNwb25zZUhlYWRlcnM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChuYW1lIGluIHJlZikge1xuICAgICAgICAgIHZhbHVlID0gcmVmW25hbWVdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChuYW1lICsgXCI6IFwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgIHJldHVybiBsaW5lcy5qb2luKFwiXFxyXFxuXCIpO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3ZlcnJpZGVNaW1lVHlwZSA9IGZ1bmN0aW9uKG5ld01pbWVUeXBlKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5MT0FESU5HIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN0YXRlRXJyb3IoXCJvdmVycmlkZU1pbWVUeXBlKCkgbm90IGFsbG93ZWQgaW4gTE9BRElORyBvciBET05FXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWltZU92ZXJyaWRlID0gbmV3TWltZVR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5ub2RlanNTZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgYmFzZVVybCwgcGFyc2VkVXJsO1xuICAgICAgaWYgKCdodHRwQWdlbnQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ub2RlanNIdHRwQWdlbnQgPSBvcHRpb25zLmh0dHBBZ2VudDtcbiAgICAgIH1cbiAgICAgIGlmICgnaHR0cHNBZ2VudCcgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzLm5vZGVqc0h0dHBzQWdlbnQgPSBvcHRpb25zLmh0dHBzQWdlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoJ2Jhc2VVcmwnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICAgICAgaWYgKGJhc2VVcmwgIT09IG51bGwpIHtcbiAgICAgICAgICBwYXJzZWRVcmwgPSB1cmwucGFyc2UoYmFzZVVybCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmICghcGFyc2VkVXJsLnByb3RvY29sKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJiYXNlVXJsIG11c3QgYmUgYW4gYWJzb2x1dGUgVVJMXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGVqc0Jhc2VVcmwgPSBiYXNlVXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3Qubm9kZWpzU2V0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm5vZGVqc1NldChvcHRpb25zKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5VTlNFTlQgPSAwO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QuVU5TRU5UID0gMDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5PUEVORUQgPSAxO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QuT1BFTkVEID0gMTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5IRUFERVJTX1JFQ0VJVkVEID0gMjtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LkhFQURFUlNfUkVDRUlWRUQgPSAyO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLkxPQURJTkcgPSAzO1xuXG4gICAgWE1MSHR0cFJlcXVlc3QuTE9BRElORyA9IDM7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuRE9ORSA9IDQ7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5ET05FID0gNDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5ub2RlanNIdHRwQWdlbnQgPSBodHRwLmdsb2JhbEFnZW50O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm5vZGVqc0h0dHBzQWdlbnQgPSBodHRwcy5nbG9iYWxBZ2VudDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5ub2RlanNCYXNlVXJsID0gbnVsbDtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fcmVzdHJpY3RlZE1ldGhvZHMgPSB7XG4gICAgICBDT05ORUNUOiB0cnVlLFxuICAgICAgVFJBQ0U6IHRydWUsXG4gICAgICBUUkFDSzogdHJ1ZVxuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3Jlc3RyaWN0ZWRIZWFkZXJzID0ge1xuICAgICAgJ2FjY2VwdC1jaGFyc2V0JzogdHJ1ZSxcbiAgICAgICdhY2NlcHQtZW5jb2RpbmcnOiB0cnVlLFxuICAgICAgJ2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycyc6IHRydWUsXG4gICAgICAnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2QnOiB0cnVlLFxuICAgICAgY29ubmVjdGlvbjogdHJ1ZSxcbiAgICAgICdjb250ZW50LWxlbmd0aCc6IHRydWUsXG4gICAgICBjb29raWU6IHRydWUsXG4gICAgICBjb29raWUyOiB0cnVlLFxuICAgICAgZGF0ZTogdHJ1ZSxcbiAgICAgIGRudDogdHJ1ZSxcbiAgICAgIGV4cGVjdDogdHJ1ZSxcbiAgICAgIGhvc3Q6IHRydWUsXG4gICAgICAna2VlcC1hbGl2ZSc6IHRydWUsXG4gICAgICBvcmlnaW46IHRydWUsXG4gICAgICByZWZlcmVyOiB0cnVlLFxuICAgICAgdGU6IHRydWUsXG4gICAgICB0cmFpbGVyOiB0cnVlLFxuICAgICAgJ3RyYW5zZmVyLWVuY29kaW5nJzogdHJ1ZSxcbiAgICAgIHVwZ3JhZGU6IHRydWUsXG4gICAgICAndXNlci1hZ2VudCc6IHRydWUsXG4gICAgICB2aWE6IHRydWVcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLl9wcml2YXRlSGVhZGVycyA9IHtcbiAgICAgICdzZXQtY29va2llJzogdHJ1ZSxcbiAgICAgICdzZXQtY29va2llMic6IHRydWVcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLl91c2VyQWdlbnQgPSAoXCJNb3ppbGxhLzUuMCAoXCIgKyAob3MudHlwZSgpKSArIFwiIFwiICsgKG9zLmFyY2goKSkgKyBcIikgXCIpICsgKFwibm9kZS5qcy9cIiArIHByb2Nlc3MudmVyc2lvbnMubm9kZSArIFwiIHY4L1wiICsgcHJvY2Vzcy52ZXJzaW9ucy52OCk7XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3NldFJlYWR5U3RhdGUgPSBmdW5jdGlvbihuZXdSZWFkeVN0YXRlKSB7XG4gICAgICB2YXIgZXZlbnQ7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBuZXdSZWFkeVN0YXRlO1xuICAgICAgZXZlbnQgPSBuZXcgUHJvZ3Jlc3NFdmVudCgncmVhZHlzdGF0ZWNoYW5nZScpO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fc2VuZEZpbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl91cmwubWV0aG9kICE9PSAnR0VUJykge1xuICAgICAgICB0aHJvdyBuZXcgTmV0d29ya0Vycm9yKCdUaGUgZmlsZSBwcm90b2NvbCBvbmx5IHN1cHBvcnRzIEdFVCcpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdG9jb2wgZmlsZTogbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3NlbmRIdHRwID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgaWYgKHRoaXMuX3N5bmMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgWEhSIHByb2Nlc3Npbmcgbm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKChkYXRhICE9IG51bGwpICYmICh0aGlzLl9tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMuX21ldGhvZCA9PT0gJ0hFQUQnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJEaXNjYXJkaW5nIGVudGl0eSBib2R5IGZvciBcIiArIHRoaXMuX21ldGhvZCArIFwiIHJlcXVlc3RzXCIpO1xuICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgfHwgKGRhdGEgPSAnJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwbG9hZC5fc2V0RGF0YShkYXRhKTtcbiAgICAgIHRoaXMuX2ZpbmFsaXplSGVhZGVycygpO1xuICAgICAgdGhpcy5fc2VuZEh4eHBSZXF1ZXN0KCk7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3NlbmRIeHhwUmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFnZW50LCBoeHhwLCByZXF1ZXN0O1xuICAgICAgaWYgKHRoaXMuX3VybC5wcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgICAgICBoeHhwID0gaHR0cDtcbiAgICAgICAgYWdlbnQgPSB0aGlzLm5vZGVqc0h0dHBBZ2VudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh4eHAgPSBodHRwcztcbiAgICAgICAgYWdlbnQgPSB0aGlzLm5vZGVqc0h0dHBzQWdlbnQ7XG4gICAgICB9XG4gICAgICByZXF1ZXN0ID0gaHh4cC5yZXF1ZXN0KHtcbiAgICAgICAgaG9zdG5hbWU6IHRoaXMuX3VybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdGhpcy5fdXJsLnBvcnQsXG4gICAgICAgIHBhdGg6IHRoaXMuX3VybC5wYXRoLFxuICAgICAgICBhdXRoOiB0aGlzLl91cmwuYXV0aCxcbiAgICAgICAgbWV0aG9kOiB0aGlzLl9tZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgIGFnZW50OiBhZ2VudFxuICAgICAgfSk7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRUaW1lb3V0KHRoaXMudGltZW91dCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9vbkh0dHBUaW1lb3V0KHJlcXVlc3QpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHJlcXVlc3Qub24oJ3Jlc3BvbnNlJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fb25IdHRwUmVzcG9uc2UocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmVxdWVzdC5vbignZXJyb3InLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLl9vbkh0dHBSZXF1ZXN0RXJyb3IocmVxdWVzdCwgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgdGhpcy51cGxvYWQuX3N0YXJ0VXBsb2FkKHJlcXVlc3QpO1xuICAgICAgaWYgKHRoaXMuX3JlcXVlc3QgPT09IHJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcygnbG9hZHN0YXJ0Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX2ZpbmFsaXplSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5faGVhZGVyc1snQ29ubmVjdGlvbiddID0gJ2tlZXAtYWxpdmUnO1xuICAgICAgdGhpcy5faGVhZGVyc1snSG9zdCddID0gdGhpcy5fdXJsLmhvc3Q7XG4gICAgICBpZiAodGhpcy5fYW5vbnltb3VzKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNbJ1JlZmVyZXInXSA9ICdhYm91dDpibGFuayc7XG4gICAgICB9XG4gICAgICB0aGlzLl9oZWFkZXJzWydVc2VyLUFnZW50J10gPSB0aGlzLl91c2VyQWdlbnQ7XG4gICAgICB0aGlzLnVwbG9hZC5fZmluYWxpemVIZWFkZXJzKHRoaXMuX2hlYWRlcnMsIHRoaXMuX2xvd2VyZWRIZWFkZXJzKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fb25IdHRwUmVzcG9uc2UgPSBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgdmFyIGxlbmd0aFN0cmluZztcbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ICE9PSByZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAocmVzcG9uc2Uuc3RhdHVzQ29kZSkge1xuICAgICAgICBjYXNlIDMwMTpcbiAgICAgICAgY2FzZSAzMDI6XG4gICAgICAgIGNhc2UgMzAzOlxuICAgICAgICBjYXNlIDMwNzpcbiAgICAgICAgY2FzZSAzMDg6XG4gICAgICAgICAgdGhpcy5fdXJsID0gdGhpcy5fcGFyc2VVcmwocmVzcG9uc2UuaGVhZGVyc1snbG9jYXRpb24nXSk7XG4gICAgICAgICAgdGhpcy5fbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgaWYgKCdjb250ZW50LXR5cGUnIGluIHRoaXMuX2xvd2VyZWRIZWFkZXJzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGVhZGVyc1t0aGlzLl9sb3dlcmVkSGVhZGVyc1snY29udGVudC10eXBlJ11dO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xvd2VyZWRIZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdDb250ZW50LVR5cGUnIGluIHRoaXMuX2hlYWRlcnMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2hlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ107XG4gICAgICAgICAgdGhpcy51cGxvYWQuX3Jlc2V0KCk7XG4gICAgICAgICAgdGhpcy5fZmluYWxpemVIZWFkZXJzKCk7XG4gICAgICAgICAgdGhpcy5fc2VuZEh4eHBSZXF1ZXN0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgIHRoaXMuX3Jlc3BvbnNlLm9uKCdkYXRhJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLl9vbkh0dHBSZXNwb25zZURhdGEocmVzcG9uc2UsIGRhdGEpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgdGhpcy5fcmVzcG9uc2Uub24oJ2VuZCcsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLl9vbkh0dHBSZXNwb25zZUVuZChyZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB0aGlzLl9yZXNwb25zZS5vbignY2xvc2UnLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fb25IdHRwUmVzcG9uc2VDbG9zZShyZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB0aGlzLnJlc3BvbnNlVVJMID0gdGhpcy5fdXJsLmhyZWYuc3BsaXQoJyMnKVswXTtcbiAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5fcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IGh0dHAuU1RBVFVTX0NPREVTW3RoaXMuc3RhdHVzXTtcbiAgICAgIHRoaXMuX3BhcnNlUmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgICAgIGlmIChsZW5ndGhTdHJpbmcgPSB0aGlzLl9yZXNwb25zZUhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pIHtcbiAgICAgICAgdGhpcy5fdG90YWxCeXRlcyA9IHBhcnNlSW50KGxlbmd0aFN0cmluZyk7XG4gICAgICAgIHRoaXMuX2xlbmd0aENvbXB1dGFibGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbGVuZ3RoQ29tcHV0YWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3NldFJlYWR5U3RhdGUoWE1MSHR0cFJlcXVlc3QuSEVBREVSU19SRUNFSVZFRCk7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fb25IdHRwUmVzcG9uc2VEYXRhID0gZnVuY3Rpb24ocmVzcG9uc2UsIGRhdGEpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNwb25zZSAhPT0gcmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVzcG9uc2VQYXJ0cy5wdXNoKGRhdGEpO1xuICAgICAgdGhpcy5fbG9hZGVkQnl0ZXMgKz0gZGF0YS5sZW5ndGg7XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSBYTUxIdHRwUmVxdWVzdC5MT0FESU5HKSB7XG4gICAgICAgIHRoaXMuX3NldFJlYWR5U3RhdGUoWE1MSHR0cFJlcXVlc3QuTE9BRElORyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcygncHJvZ3Jlc3MnKTtcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLl9vbkh0dHBSZXNwb25zZUVuZCA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBpZiAodGhpcy5fcmVzcG9uc2UgIT09IHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BhcnNlUmVzcG9uc2UoKTtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgdGhpcy5fcmVzcG9uc2UgPSBudWxsO1xuICAgICAgdGhpcy5fc2V0UmVhZHlTdGF0ZShYTUxIdHRwUmVxdWVzdC5ET05FKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoUHJvZ3Jlc3MoJ2xvYWQnKTtcbiAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaFByb2dyZXNzKCdsb2FkZW5kJyk7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fb25IdHRwUmVzcG9uc2VDbG9zZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgcmVxdWVzdDtcbiAgICAgIGlmICh0aGlzLl9yZXNwb25zZSAhPT0gcmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVxdWVzdCA9IHRoaXMuX3JlcXVlc3Q7XG4gICAgICB0aGlzLl9zZXRFcnJvcigpO1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgdGhpcy5fc2V0UmVhZHlTdGF0ZShYTUxIdHRwUmVxdWVzdC5ET05FKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoUHJvZ3Jlc3MoJ2Vycm9yJyk7XG4gICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcygnbG9hZGVuZCcpO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX29uSHR0cFRpbWVvdXQgPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICBpZiAodGhpcy5fcmVxdWVzdCAhPT0gcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXRFcnJvcigpO1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgdGhpcy5fc2V0UmVhZHlTdGF0ZShYTUxIdHRwUmVxdWVzdC5ET05FKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoUHJvZ3Jlc3MoJ3RpbWVvdXQnKTtcbiAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaFByb2dyZXNzKCdsb2FkZW5kJyk7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fb25IdHRwUmVxdWVzdEVycm9yID0gZnVuY3Rpb24ocmVxdWVzdCwgZXJyb3IpIHtcbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ICE9PSByZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NldEVycm9yKCk7XG4gICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICB0aGlzLl9zZXRSZWFkeVN0YXRlKFhNTEh0dHBSZXF1ZXN0LkRPTkUpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2hQcm9ncmVzcygnZXJyb3InKTtcbiAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaFByb2dyZXNzKCdsb2FkZW5kJyk7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fZGlzcGF0Y2hQcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgICAgdmFyIGV2ZW50O1xuICAgICAgZXZlbnQgPSBuZXcgUHJvZ3Jlc3NFdmVudChldmVudFR5cGUpO1xuICAgICAgZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSA9IHRoaXMuX2xlbmd0aENvbXB1dGFibGU7XG4gICAgICBldmVudC5sb2FkZWQgPSB0aGlzLl9sb2FkZWRCeXRlcztcbiAgICAgIGV2ZW50LnRvdGFsID0gdGhpcy5fdG90YWxCeXRlcztcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3NldEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Jlc3BvbnNlID0gbnVsbDtcbiAgICAgIHRoaXMuX3Jlc3BvbnNlSGVhZGVycyA9IG51bGw7XG4gICAgICB0aGlzLl9yZXNwb25zZVBhcnRzID0gbnVsbDtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fcGFyc2VVcmwgPSBmdW5jdGlvbih1cmxTdHJpbmcpIHtcbiAgICAgIHZhciBhYnNvbHV0ZVVybFN0cmluZywgaW5kZXgsIHBhc3N3b3JkLCB1c2VyLCB4aHJVcmw7XG4gICAgICBpZiAodGhpcy5ub2RlanNCYXNlVXJsID09PSBudWxsKSB7XG4gICAgICAgIGFic29sdXRlVXJsU3RyaW5nID0gdXJsU3RyaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWJzb2x1dGVVcmxTdHJpbmcgPSB1cmwucmVzb2x2ZSh0aGlzLm5vZGVqc0Jhc2VVcmwsIHVybFN0cmluZyk7XG4gICAgICB9XG4gICAgICB4aHJVcmwgPSB1cmwucGFyc2UoYWJzb2x1dGVVcmxTdHJpbmcsIGZhbHNlLCB0cnVlKTtcbiAgICAgIHhoclVybC5oYXNoID0gbnVsbDtcbiAgICAgIGlmICh4aHJVcmwuYXV0aCAmJiAoKHR5cGVvZiB1c2VyICE9PSBcInVuZGVmaW5lZFwiICYmIHVzZXIgIT09IG51bGwpIHx8ICh0eXBlb2YgcGFzc3dvcmQgIT09IFwidW5kZWZpbmVkXCIgJiYgcGFzc3dvcmQgIT09IG51bGwpKSkge1xuICAgICAgICBpbmRleCA9IHhoclVybC5hdXRoLmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgdXNlciA9IHhoclVybC5hdXRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgIHVzZXIgPSB4aHJVcmwuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgICAgICAgcGFzc3dvcmQgPSB4aHJVcmwuc3Vic3RyaW5nKGluZGV4ICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodXNlciB8fCBwYXNzd29yZCkge1xuICAgICAgICB4aHJVcmwuYXV0aCA9IHVzZXIgKyBcIjpcIiArIHBhc3N3b3JkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHhoclVybDtcbiAgICB9O1xuXG4gICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLl9wYXJzZVJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgbG93ZXJlZE5hbWUsIG5hbWUsIHJlZiwgdmFsdWU7XG4gICAgICB0aGlzLl9yZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgIHJlZiA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIHZhbHVlID0gcmVmW25hbWVdO1xuICAgICAgICBsb3dlcmVkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVIZWFkZXJzW2xvd2VyZWROYW1lXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9taW1lT3ZlcnJpZGUgIT09IG51bGwgJiYgbG93ZXJlZE5hbWUgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9taW1lT3ZlcnJpZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzcG9uc2VIZWFkZXJzW2xvd2VyZWROYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX21pbWVPdmVycmlkZSAhPT0gbnVsbCAmJiAhKCdjb250ZW50LXR5cGUnIGluIHRoaXMuX3Jlc3BvbnNlSGVhZGVycykpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VIZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IHRoaXMuX21pbWVPdmVycmlkZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fcGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFycmF5QnVmZmVyLCBidWZmZXIsIGksIGosIGpzb25FcnJvciwgcmVmLCB2aWV3O1xuICAgICAgaWYgKEJ1ZmZlci5jb25jYXQpIHtcbiAgICAgICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdCh0aGlzLl9yZXNwb25zZVBhcnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlciA9IHRoaXMuX2NvbmNhdEJ1ZmZlcnModGhpcy5fcmVzcG9uc2VQYXJ0cyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZXNwb25zZVBhcnRzID0gbnVsbDtcbiAgICAgIHN3aXRjaCAodGhpcy5yZXNwb25zZVR5cGUpIHtcbiAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgdGhpcy5fcGFyc2VUZXh0UmVzcG9uc2UoYnVmZmVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgICAgdGhpcy5yZXNwb25zZVRleHQgPSBudWxsO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gSlNPTi5wYXJzZShidWZmZXIudG9TdHJpbmcoJ3V0Zi04JykpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAganNvbkVycm9yID0gZXJyb3IxO1xuICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdidWZmZXInOlxuICAgICAgICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gYnVmZmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhcnJheWJ1ZmZlcic6XG4gICAgICAgICAgdGhpcy5yZXNwb25zZVRleHQgPSBudWxsO1xuICAgICAgICAgIGFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgIHZpZXcgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgZm9yIChpID0gaiA9IDAsIHJlZiA9IGJ1ZmZlci5sZW5ndGg7IDAgPD0gcmVmID8gaiA8IHJlZiA6IGogPiByZWY7IGkgPSAwIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICAgICAgdmlld1tpXSA9IGJ1ZmZlcltpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZXNwb25zZSA9IGFycmF5QnVmZmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMuX3BhcnNlVGV4dFJlc3BvbnNlKGJ1ZmZlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3BhcnNlVGV4dFJlc3BvbnNlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICB2YXIgZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gYnVmZmVyLnRvU3RyaW5nKHRoaXMuX3BhcnNlUmVzcG9uc2VFbmNvZGluZygpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlID0gZXJyb3IxO1xuICAgICAgICB0aGlzLnJlc3BvbnNlVGV4dCA9IGJ1ZmZlci50b1N0cmluZygnYmluYXJ5Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlc3BvbnNlID0gdGhpcy5yZXNwb25zZVRleHQ7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuX3BhcnNlUmVzcG9uc2VFbmNvZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbnRlbnRUeXBlLCBlbmNvZGluZywgbWF0Y2g7XG4gICAgICBlbmNvZGluZyA9IG51bGw7XG4gICAgICBpZiAoY29udGVudFR5cGUgPSB0aGlzLl9yZXNwb25zZUhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSB7XG4gICAgICAgIGlmIChtYXRjaCA9IC9cXDtcXHMqY2hhcnNldFxcPSguKikkLy5leGVjKGNvbnRlbnRUeXBlKSkge1xuICAgICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICd1dGYtOCc7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5fY29uY2F0QnVmZmVycyA9IGZ1bmN0aW9uKGJ1ZmZlcnMpIHtcbiAgICAgIHZhciBidWZmZXIsIGosIGssIGxlbiwgbGVuMSwgbGVuZ3RoLCB0YXJnZXQ7XG4gICAgICBpZiAoYnVmZmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoMCk7XG4gICAgICB9XG4gICAgICBpZiAoYnVmZmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnNbMF07XG4gICAgICB9XG4gICAgICBsZW5ndGggPSAwO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gYnVmZmVycy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBidWZmZXIgPSBidWZmZXJzW2pdO1xuICAgICAgICBsZW5ndGggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRhcmdldCA9IG5ldyBCdWZmZXIobGVuZ3RoKTtcbiAgICAgIGxlbmd0aCA9IDA7XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gYnVmZmVycy5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgYnVmZmVyID0gYnVmZmVyc1trXTtcbiAgICAgICAgYnVmZmVyLmNvcHkodGFyZ2V0LCBsZW5ndGgpO1xuICAgICAgICBsZW5ndGggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxIdHRwUmVxdWVzdDtcblxuICB9KShYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEh0dHBSZXF1ZXN0O1xuXG4gIFhNTEh0dHBSZXF1ZXN0LlhNTEh0dHBSZXF1ZXN0ID0gWE1MSHR0cFJlcXVlc3Q7XG5cbiAgU2VjdXJpdHlFcnJvciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFNlY3VyaXR5RXJyb3IsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gU2VjdXJpdHlFcnJvcigpIHtcbiAgICAgIFNlY3VyaXR5RXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFNlY3VyaXR5RXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIFhNTEh0dHBSZXF1ZXN0LlNlY3VyaXR5RXJyb3IgPSBTZWN1cml0eUVycm9yO1xuXG4gIEludmFsaWRTdGF0ZUVycm9yID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoSW52YWxpZFN0YXRlRXJyb3IsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gSW52YWxpZFN0YXRlRXJyb3IoKSB7XG4gICAgICBJbnZhbGlkU3RhdGVFcnJvci5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gSW52YWxpZFN0YXRlRXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIEludmFsaWRTdGF0ZUVycm9yID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoSW52YWxpZFN0YXRlRXJyb3IsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gSW52YWxpZFN0YXRlRXJyb3IoKSB7XG4gICAgICByZXR1cm4gSW52YWxpZFN0YXRlRXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEludmFsaWRTdGF0ZUVycm9yO1xuXG4gIH0pKEVycm9yKTtcblxuICBYTUxIdHRwUmVxdWVzdC5JbnZhbGlkU3RhdGVFcnJvciA9IEludmFsaWRTdGF0ZUVycm9yO1xuXG4gIE5ldHdvcmtFcnJvciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKE5ldHdvcmtFcnJvciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBOZXR3b3JrRXJyb3IoKSB7XG4gICAgICBOZXR3b3JrRXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5ldHdvcmtFcnJvcjtcblxuICB9KShFcnJvcik7XG5cbiAgWE1MSHR0cFJlcXVlc3QuU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcblxuICBTeW50YXhFcnJvciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFN5bnRheEVycm9yLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFN5bnRheEVycm9yKCkge1xuICAgICAgU3ludGF4RXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN5bnRheEVycm9yO1xuXG4gIH0pKEVycm9yKTtcblxuICBQcm9ncmVzc0V2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFByb2dyZXNzRXZlbnQodHlwZSkge1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLmxlbmd0aENvbXB1dGFibGUgPSBmYWxzZTtcbiAgICAgIHRoaXMubG9hZGVkID0gMDtcbiAgICAgIHRoaXMudG90YWwgPSAwO1xuICAgIH1cblxuICAgIFByb2dyZXNzRXZlbnQucHJvdG90eXBlLmJ1YmJsZXMgPSBmYWxzZTtcblxuICAgIFByb2dyZXNzRXZlbnQucHJvdG90eXBlLmNhbmNlbGFibGUgPSBmYWxzZTtcblxuICAgIFByb2dyZXNzRXZlbnQucHJvdG90eXBlLnRhcmdldCA9IG51bGw7XG5cbiAgICBQcm9ncmVzc0V2ZW50LnByb3RvdHlwZS5sb2FkZWQgPSBudWxsO1xuXG4gICAgUHJvZ3Jlc3NFdmVudC5wcm90b3R5cGUubGVuZ3RoQ29tcHV0YWJsZSA9IG51bGw7XG5cbiAgICBQcm9ncmVzc0V2ZW50LnByb3RvdHlwZS50b3RhbCA9IG51bGw7XG5cbiAgICByZXR1cm4gUHJvZ3Jlc3NFdmVudDtcblxuICB9KSgpO1xuXG4gIFhNTEh0dHBSZXF1ZXN0LlByb2dyZXNzRXZlbnQgPSBQcm9ncmVzc0V2ZW50O1xuXG4gIFhNTEh0dHBSZXF1ZXN0VXBsb2FkID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MSHR0cFJlcXVlc3RVcGxvYWQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MSHR0cFJlcXVlc3RVcGxvYWQocmVxdWVzdCkge1xuICAgICAgWE1MSHR0cFJlcXVlc3RVcGxvYWQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgfVxuXG4gICAgWE1MSHR0cFJlcXVlc3RVcGxvYWQucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY29udGVudFR5cGUgPSBudWxsO1xuICAgICAgdGhpcy5fYm9keSA9IG51bGw7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH07XG5cbiAgICBYTUxIdHRwUmVxdWVzdFVwbG9hZC5wcm90b3R5cGUuX3NldERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgYm9keSwgaSwgaiwgaywgb2Zmc2V0LCByZWYsIHJlZjEsIHZpZXc7XG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICB0aGlzLl9jb250ZW50VHlwZSA9ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2JvZHkgPSBuZXcgQnVmZmVyKGRhdGEsICd1dGY4Jyk7XG4gICAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICB0aGlzLl9ib2R5ID0gZGF0YTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGJvZHkgPSBuZXcgQnVmZmVyKGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgZm9yIChpID0gaiA9IDAsIHJlZiA9IGRhdGEuYnl0ZUxlbmd0aDsgMCA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZjsgaSA9IDAgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgYm9keVtpXSA9IHZpZXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYm9keSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuYnVmZmVyICYmIGRhdGEuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgYm9keSA9IG5ldyBCdWZmZXIoZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgb2Zmc2V0ID0gZGF0YS5ieXRlT2Zmc2V0O1xuICAgICAgICB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIpO1xuICAgICAgICBmb3IgKGkgPSBrID0gMCwgcmVmMSA9IGRhdGEuYnl0ZUxlbmd0aDsgMCA8PSByZWYxID8gayA8IHJlZjEgOiBrID4gcmVmMTsgaSA9IDAgPD0gcmVmMSA/ICsrayA6IC0taykge1xuICAgICAgICAgIGJvZHlbaV0gPSB2aWV3W2kgKyBvZmZzZXRdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2JvZHkgPSBib2R5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgc2VuZCgpIGRhdGEgXCIgKyBkYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0VXBsb2FkLnByb3RvdHlwZS5fZmluYWxpemVIZWFkZXJzID0gZnVuY3Rpb24oaGVhZGVycywgbG93ZXJlZEhlYWRlcnMpIHtcbiAgICAgIGlmICh0aGlzLl9jb250ZW50VHlwZSkge1xuICAgICAgICBpZiAoISgnY29udGVudC10eXBlJyBpbiBsb3dlcmVkSGVhZGVycykpIHtcbiAgICAgICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHRoaXMuX2NvbnRlbnRUeXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fYm9keSkge1xuICAgICAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gdGhpcy5fYm9keS5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIFhNTEh0dHBSZXF1ZXN0VXBsb2FkLnByb3RvdHlwZS5fc3RhcnRVcGxvYWQgPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICBpZiAodGhpcy5fYm9keSkge1xuICAgICAgICByZXF1ZXN0LndyaXRlKHRoaXMuX2JvZHkpO1xuICAgICAgfVxuICAgICAgcmVxdWVzdC5lbmQoKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxIdHRwUmVxdWVzdFVwbG9hZDtcblxuICB9KShYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0KTtcblxuICBYTUxIdHRwUmVxdWVzdC5YTUxIdHRwUmVxdWVzdFVwbG9hZCA9IFhNTEh0dHBSZXF1ZXN0VXBsb2FkO1xuXG59KS5jYWxsKHRoaXMpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3hocjIvbGliL3hocjIuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDIxKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tcGlsZXIvYnVuZGxlcy9jb21waWxlci51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyOCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvbWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvclxuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNDEpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGRlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9AYW5ndWxhci9odHRwL2J1bmRsZXMvaHR0cC51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg0Mik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy9idW5kbGVzL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy51bWQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg2KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBkZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJqZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvclxuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoODEpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGRlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yeGpzL29ic2VydmFibGUvb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg4NCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvY29uY2F0TWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvclxuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImh0dHBcIlxuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJodHRwc1wiXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIm9zXCJcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=